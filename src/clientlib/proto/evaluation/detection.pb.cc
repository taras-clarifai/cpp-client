// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/evaluation/detection.proto

#include "proto/evaluation/detection.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_proto_2fevaluation_2fdetection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DetectionEvalSubset_proto_2fevaluation_2fdetection_2eproto;
class DetectionEvalResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DetectionEvalResult> _instance;
} _DetectionEvalResult_default_instance_;
class DetectionEvalSubsetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DetectionEvalSubset> _instance;
} _DetectionEvalSubset_default_instance_;
static void InitDefaultsscc_info_DetectionEvalResult_proto_2fevaluation_2fdetection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DetectionEvalResult_default_instance_;
    new (ptr) ::DetectionEvalResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DetectionEvalResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DetectionEvalResult_proto_2fevaluation_2fdetection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DetectionEvalResult_proto_2fevaluation_2fdetection_2eproto}, {
      &scc_info_DetectionEvalSubset_proto_2fevaluation_2fdetection_2eproto.base,}};

static void InitDefaultsscc_info_DetectionEvalSubset_proto_2fevaluation_2fdetection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DetectionEvalSubset_default_instance_;
    new (ptr) ::DetectionEvalSubset();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DetectionEvalSubset::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DetectionEvalSubset_proto_2fevaluation_2fdetection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DetectionEvalSubset_proto_2fevaluation_2fdetection_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fevaluation_2fdetection_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_proto_2fevaluation_2fdetection_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fevaluation_2fdetection_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2fevaluation_2fdetection_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DetectionEvalResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DetectionEvalResult, mean_average_precision_iou_50_),
  PROTOBUF_FIELD_OFFSET(::DetectionEvalResult, mean_average_precision_iou_range_),
  PROTOBUF_FIELD_OFFSET(::DetectionEvalResult, subsets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DetectionEvalSubset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DetectionEvalSubset, area_range_name_),
  PROTOBUF_FIELD_OFFSET(::DetectionEvalSubset, area_min_),
  PROTOBUF_FIELD_OFFSET(::DetectionEvalSubset, area_max_),
  PROTOBUF_FIELD_OFFSET(::DetectionEvalSubset, concept_name_),
  PROTOBUF_FIELD_OFFSET(::DetectionEvalSubset, concept_id_),
  PROTOBUF_FIELD_OFFSET(::DetectionEvalSubset, iou_),
  PROTOBUF_FIELD_OFFSET(::DetectionEvalSubset, mean_average_precision_),
  PROTOBUF_FIELD_OFFSET(::DetectionEvalSubset, class_average_precision_),
  PROTOBUF_FIELD_OFFSET(::DetectionEvalSubset, score_thresholds_),
  PROTOBUF_FIELD_OFFSET(::DetectionEvalSubset, precision_),
  PROTOBUF_FIELD_OFFSET(::DetectionEvalSubset, recall_),
  PROTOBUF_FIELD_OFFSET(::DetectionEvalSubset, tp_rate_),
  PROTOBUF_FIELD_OFFSET(::DetectionEvalSubset, fp_rate_per_image_),
  PROTOBUF_FIELD_OFFSET(::DetectionEvalSubset, fp_rate_per_object_),
  PROTOBUF_FIELD_OFFSET(::DetectionEvalSubset, num_gt_boxes_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::DetectionEvalResult)},
  { 8, -1, sizeof(::DetectionEvalSubset)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DetectionEvalResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DetectionEvalSubset_default_instance_),
};

const char descriptor_table_protodef_proto_2fevaluation_2fdetection_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n proto/evaluation/detection.proto\"\215\001\n\023D"
  "etectionEvalResult\022%\n\035mean_average_preci"
  "sion_iou_50\030\001 \001(\001\022(\n mean_average_precis"
  "ion_iou_range\030\002 \001(\001\022%\n\007subsets\030\003 \003(\0132\024.D"
  "etectionEvalSubset\"\345\002\n\023DetectionEvalSubs"
  "et\022\027\n\017area_range_name\030\002 \001(\t\022\020\n\010area_min\030"
  "\003 \001(\001\022\020\n\010area_max\030\004 \001(\001\022\024\n\014concept_name\030"
  "\006 \001(\t\022\022\n\nconcept_id\030\007 \001(\t\022\013\n\003iou\030\010 \001(\002\022\036"
  "\n\026mean_average_precision\030\t \001(\001\022\037\n\027class_"
  "average_precision\030\n \001(\001\022\030\n\020score_thresho"
  "lds\030\013 \003(\002\022\021\n\tprecision\030\014 \003(\002\022\016\n\006recall\030\r"
  " \003(\002\022\017\n\007tp_rate\030\016 \003(\002\022\031\n\021fp_rate_per_ima"
  "ge\030\017 \003(\002\022\032\n\022fp_rate_per_object\030\020 \003(\002\022\024\n\014"
  "num_gt_boxes\030\021 \001(\003B\014Z\nevaluationb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2fevaluation_2fdetection_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_2fevaluation_2fdetection_2eproto_sccs[2] = {
  &scc_info_DetectionEvalResult_proto_2fevaluation_2fdetection_2eproto.base,
  &scc_info_DetectionEvalSubset_proto_2fevaluation_2fdetection_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2fevaluation_2fdetection_2eproto_once;
static bool descriptor_table_proto_2fevaluation_2fdetection_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fevaluation_2fdetection_2eproto = {
  &descriptor_table_proto_2fevaluation_2fdetection_2eproto_initialized, descriptor_table_protodef_proto_2fevaluation_2fdetection_2eproto, "proto/evaluation/detection.proto", 560,
  &descriptor_table_proto_2fevaluation_2fdetection_2eproto_once, descriptor_table_proto_2fevaluation_2fdetection_2eproto_sccs, descriptor_table_proto_2fevaluation_2fdetection_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_proto_2fevaluation_2fdetection_2eproto::offsets,
  file_level_metadata_proto_2fevaluation_2fdetection_2eproto, 2, file_level_enum_descriptors_proto_2fevaluation_2fdetection_2eproto, file_level_service_descriptors_proto_2fevaluation_2fdetection_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2fevaluation_2fdetection_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_2fevaluation_2fdetection_2eproto), true);

// ===================================================================

void DetectionEvalResult::InitAsDefaultInstance() {
}
class DetectionEvalResult::_Internal {
 public:
};

DetectionEvalResult::DetectionEvalResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DetectionEvalResult)
}
DetectionEvalResult::DetectionEvalResult(const DetectionEvalResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      subsets_(from.subsets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mean_average_precision_iou_50_, &from.mean_average_precision_iou_50_,
    static_cast<size_t>(reinterpret_cast<char*>(&mean_average_precision_iou_range_) -
    reinterpret_cast<char*>(&mean_average_precision_iou_50_)) + sizeof(mean_average_precision_iou_range_));
  // @@protoc_insertion_point(copy_constructor:DetectionEvalResult)
}

void DetectionEvalResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DetectionEvalResult_proto_2fevaluation_2fdetection_2eproto.base);
  ::memset(&mean_average_precision_iou_50_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mean_average_precision_iou_range_) -
      reinterpret_cast<char*>(&mean_average_precision_iou_50_)) + sizeof(mean_average_precision_iou_range_));
}

DetectionEvalResult::~DetectionEvalResult() {
  // @@protoc_insertion_point(destructor:DetectionEvalResult)
  SharedDtor();
}

void DetectionEvalResult::SharedDtor() {
}

void DetectionEvalResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DetectionEvalResult& DetectionEvalResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DetectionEvalResult_proto_2fevaluation_2fdetection_2eproto.base);
  return *internal_default_instance();
}


void DetectionEvalResult::Clear() {
// @@protoc_insertion_point(message_clear_start:DetectionEvalResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subsets_.Clear();
  ::memset(&mean_average_precision_iou_50_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mean_average_precision_iou_range_) -
      reinterpret_cast<char*>(&mean_average_precision_iou_50_)) + sizeof(mean_average_precision_iou_range_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DetectionEvalResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double mean_average_precision_iou_50 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          mean_average_precision_iou_50_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double mean_average_precision_iou_range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          mean_average_precision_iou_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .DetectionEvalSubset subsets = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_subsets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DetectionEvalResult::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:DetectionEvalResult)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double mean_average_precision_iou_50 = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mean_average_precision_iou_50_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double mean_average_precision_iou_range = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mean_average_precision_iou_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .DetectionEvalSubset subsets = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_subsets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DetectionEvalResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DetectionEvalResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DetectionEvalResult::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DetectionEvalResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double mean_average_precision_iou_50 = 1;
  if (!(this->mean_average_precision_iou_50() <= 0 && this->mean_average_precision_iou_50() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->mean_average_precision_iou_50(), output);
  }

  // double mean_average_precision_iou_range = 2;
  if (!(this->mean_average_precision_iou_range() <= 0 && this->mean_average_precision_iou_range() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->mean_average_precision_iou_range(), output);
  }

  // repeated .DetectionEvalSubset subsets = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->subsets_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->subsets(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DetectionEvalResult)
}

::PROTOBUF_NAMESPACE_ID::uint8* DetectionEvalResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DetectionEvalResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double mean_average_precision_iou_50 = 1;
  if (!(this->mean_average_precision_iou_50() <= 0 && this->mean_average_precision_iou_50() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->mean_average_precision_iou_50(), target);
  }

  // double mean_average_precision_iou_range = 2;
  if (!(this->mean_average_precision_iou_range() <= 0 && this->mean_average_precision_iou_range() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->mean_average_precision_iou_range(), target);
  }

  // repeated .DetectionEvalSubset subsets = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->subsets_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->subsets(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DetectionEvalResult)
  return target;
}

size_t DetectionEvalResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DetectionEvalResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DetectionEvalSubset subsets = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->subsets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->subsets(static_cast<int>(i)));
    }
  }

  // double mean_average_precision_iou_50 = 1;
  if (!(this->mean_average_precision_iou_50() <= 0 && this->mean_average_precision_iou_50() >= 0)) {
    total_size += 1 + 8;
  }

  // double mean_average_precision_iou_range = 2;
  if (!(this->mean_average_precision_iou_range() <= 0 && this->mean_average_precision_iou_range() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetectionEvalResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DetectionEvalResult)
  GOOGLE_DCHECK_NE(&from, this);
  const DetectionEvalResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DetectionEvalResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DetectionEvalResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DetectionEvalResult)
    MergeFrom(*source);
  }
}

void DetectionEvalResult::MergeFrom(const DetectionEvalResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DetectionEvalResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  subsets_.MergeFrom(from.subsets_);
  if (!(from.mean_average_precision_iou_50() <= 0 && from.mean_average_precision_iou_50() >= 0)) {
    set_mean_average_precision_iou_50(from.mean_average_precision_iou_50());
  }
  if (!(from.mean_average_precision_iou_range() <= 0 && from.mean_average_precision_iou_range() >= 0)) {
    set_mean_average_precision_iou_range(from.mean_average_precision_iou_range());
  }
}

void DetectionEvalResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DetectionEvalResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectionEvalResult::CopyFrom(const DetectionEvalResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DetectionEvalResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectionEvalResult::IsInitialized() const {
  return true;
}

void DetectionEvalResult::InternalSwap(DetectionEvalResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&subsets_)->InternalSwap(CastToBase(&other->subsets_));
  swap(mean_average_precision_iou_50_, other->mean_average_precision_iou_50_);
  swap(mean_average_precision_iou_range_, other->mean_average_precision_iou_range_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectionEvalResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DetectionEvalSubset::InitAsDefaultInstance() {
}
class DetectionEvalSubset::_Internal {
 public:
};

DetectionEvalSubset::DetectionEvalSubset()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DetectionEvalSubset)
}
DetectionEvalSubset::DetectionEvalSubset(const DetectionEvalSubset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      score_thresholds_(from.score_thresholds_),
      precision_(from.precision_),
      recall_(from.recall_),
      tp_rate_(from.tp_rate_),
      fp_rate_per_image_(from.fp_rate_per_image_),
      fp_rate_per_object_(from.fp_rate_per_object_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  area_range_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.area_range_name().empty()) {
    area_range_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.area_range_name_);
  }
  concept_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.concept_name().empty()) {
    concept_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.concept_name_);
  }
  concept_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.concept_id().empty()) {
    concept_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.concept_id_);
  }
  ::memcpy(&area_min_, &from.area_min_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_gt_boxes_) -
    reinterpret_cast<char*>(&area_min_)) + sizeof(num_gt_boxes_));
  // @@protoc_insertion_point(copy_constructor:DetectionEvalSubset)
}

void DetectionEvalSubset::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DetectionEvalSubset_proto_2fevaluation_2fdetection_2eproto.base);
  area_range_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  concept_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  concept_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&area_min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_gt_boxes_) -
      reinterpret_cast<char*>(&area_min_)) + sizeof(num_gt_boxes_));
}

DetectionEvalSubset::~DetectionEvalSubset() {
  // @@protoc_insertion_point(destructor:DetectionEvalSubset)
  SharedDtor();
}

void DetectionEvalSubset::SharedDtor() {
  area_range_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  concept_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  concept_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DetectionEvalSubset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DetectionEvalSubset& DetectionEvalSubset::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DetectionEvalSubset_proto_2fevaluation_2fdetection_2eproto.base);
  return *internal_default_instance();
}


void DetectionEvalSubset::Clear() {
// @@protoc_insertion_point(message_clear_start:DetectionEvalSubset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  score_thresholds_.Clear();
  precision_.Clear();
  recall_.Clear();
  tp_rate_.Clear();
  fp_rate_per_image_.Clear();
  fp_rate_per_object_.Clear();
  area_range_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  concept_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  concept_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&area_min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_gt_boxes_) -
      reinterpret_cast<char*>(&area_min_)) + sizeof(num_gt_boxes_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DetectionEvalSubset::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string area_range_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_area_range_name(), ptr, ctx, "DetectionEvalSubset.area_range_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double area_min = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          area_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double area_max = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          area_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string concept_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_concept_name(), ptr, ctx, "DetectionEvalSubset.concept_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string concept_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_concept_id(), ptr, ctx, "DetectionEvalSubset.concept_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float iou = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          iou_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // double mean_average_precision = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          mean_average_precision_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double class_average_precision = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          class_average_precision_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated float score_thresholds = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_score_thresholds(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93) {
          add_score_thresholds(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float precision = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_precision(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101) {
          add_precision(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float recall = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_recall(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109) {
          add_recall(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float tp_rate = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_tp_rate(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117) {
          add_tp_rate(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float fp_rate_per_image = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_fp_rate_per_image(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125) {
          add_fp_rate_per_image(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float fp_rate_per_object = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_fp_rate_per_object(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133) {
          add_fp_rate_per_object(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int64 num_gt_boxes = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          num_gt_boxes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DetectionEvalSubset::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:DetectionEvalSubset)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string area_range_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_area_range_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->area_range_name().data(), static_cast<int>(this->area_range_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "DetectionEvalSubset.area_range_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double area_min = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &area_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double area_max = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &area_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string concept_name = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_concept_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->concept_name().data(), static_cast<int>(this->concept_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "DetectionEvalSubset.concept_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string concept_id = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_concept_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->concept_id().data(), static_cast<int>(this->concept_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "DetectionEvalSubset.concept_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float iou = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (69 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &iou_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double mean_average_precision = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (73 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mean_average_precision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double class_average_precision = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (81 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &class_average_precision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float score_thresholds = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_score_thresholds())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (93 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 90u, input, this->mutable_score_thresholds())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float precision = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_precision())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (101 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 98u, input, this->mutable_precision())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float recall = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_recall())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (109 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 106u, input, this->mutable_recall())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float tp_rate = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_tp_rate())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (117 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 114u, input, this->mutable_tp_rate())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float fp_rate_per_image = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_fp_rate_per_image())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (125 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 122u, input, this->mutable_fp_rate_per_image())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float fp_rate_per_object = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_fp_rate_per_object())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (133 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 130u, input, this->mutable_fp_rate_per_object())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 num_gt_boxes = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_gt_boxes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DetectionEvalSubset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DetectionEvalSubset)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DetectionEvalSubset::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DetectionEvalSubset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string area_range_name = 2;
  if (this->area_range_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->area_range_name().data(), static_cast<int>(this->area_range_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DetectionEvalSubset.area_range_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->area_range_name(), output);
  }

  // double area_min = 3;
  if (!(this->area_min() <= 0 && this->area_min() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->area_min(), output);
  }

  // double area_max = 4;
  if (!(this->area_max() <= 0 && this->area_max() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->area_max(), output);
  }

  // string concept_name = 6;
  if (this->concept_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->concept_name().data(), static_cast<int>(this->concept_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DetectionEvalSubset.concept_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->concept_name(), output);
  }

  // string concept_id = 7;
  if (this->concept_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->concept_id().data(), static_cast<int>(this->concept_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DetectionEvalSubset.concept_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->concept_id(), output);
  }

  // float iou = 8;
  if (!(this->iou() <= 0 && this->iou() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(8, this->iou(), output);
  }

  // double mean_average_precision = 9;
  if (!(this->mean_average_precision() <= 0 && this->mean_average_precision() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(9, this->mean_average_precision(), output);
  }

  // double class_average_precision = 10;
  if (!(this->class_average_precision() <= 0 && this->class_average_precision() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(10, this->class_average_precision(), output);
  }

  // repeated float score_thresholds = 11;
  if (this->score_thresholds_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(11, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_score_thresholds_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->score_thresholds().data(), this->score_thresholds_size(), output);
  }

  // repeated float precision = 12;
  if (this->precision_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(12, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_precision_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->precision().data(), this->precision_size(), output);
  }

  // repeated float recall = 13;
  if (this->recall_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(13, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_recall_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->recall().data(), this->recall_size(), output);
  }

  // repeated float tp_rate = 14;
  if (this->tp_rate_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(14, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_tp_rate_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->tp_rate().data(), this->tp_rate_size(), output);
  }

  // repeated float fp_rate_per_image = 15;
  if (this->fp_rate_per_image_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(15, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_fp_rate_per_image_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->fp_rate_per_image().data(), this->fp_rate_per_image_size(), output);
  }

  // repeated float fp_rate_per_object = 16;
  if (this->fp_rate_per_object_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(16, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_fp_rate_per_object_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->fp_rate_per_object().data(), this->fp_rate_per_object_size(), output);
  }

  // int64 num_gt_boxes = 17;
  if (this->num_gt_boxes() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(17, this->num_gt_boxes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DetectionEvalSubset)
}

::PROTOBUF_NAMESPACE_ID::uint8* DetectionEvalSubset::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DetectionEvalSubset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string area_range_name = 2;
  if (this->area_range_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->area_range_name().data(), static_cast<int>(this->area_range_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DetectionEvalSubset.area_range_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->area_range_name(), target);
  }

  // double area_min = 3;
  if (!(this->area_min() <= 0 && this->area_min() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->area_min(), target);
  }

  // double area_max = 4;
  if (!(this->area_max() <= 0 && this->area_max() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->area_max(), target);
  }

  // string concept_name = 6;
  if (this->concept_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->concept_name().data(), static_cast<int>(this->concept_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DetectionEvalSubset.concept_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->concept_name(), target);
  }

  // string concept_id = 7;
  if (this->concept_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->concept_id().data(), static_cast<int>(this->concept_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DetectionEvalSubset.concept_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        7, this->concept_id(), target);
  }

  // float iou = 8;
  if (!(this->iou() <= 0 && this->iou() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->iou(), target);
  }

  // double mean_average_precision = 9;
  if (!(this->mean_average_precision() <= 0 && this->mean_average_precision() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->mean_average_precision(), target);
  }

  // double class_average_precision = 10;
  if (!(this->class_average_precision() <= 0 && this->class_average_precision() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->class_average_precision(), target);
  }

  // repeated float score_thresholds = 11;
  if (this->score_thresholds_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      11,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _score_thresholds_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->score_thresholds_, target);
  }

  // repeated float precision = 12;
  if (this->precision_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      12,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _precision_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->precision_, target);
  }

  // repeated float recall = 13;
  if (this->recall_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      13,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _recall_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->recall_, target);
  }

  // repeated float tp_rate = 14;
  if (this->tp_rate_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      14,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _tp_rate_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->tp_rate_, target);
  }

  // repeated float fp_rate_per_image = 15;
  if (this->fp_rate_per_image_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      15,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _fp_rate_per_image_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->fp_rate_per_image_, target);
  }

  // repeated float fp_rate_per_object = 16;
  if (this->fp_rate_per_object_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      16,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _fp_rate_per_object_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->fp_rate_per_object_, target);
  }

  // int64 num_gt_boxes = 17;
  if (this->num_gt_boxes() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(17, this->num_gt_boxes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DetectionEvalSubset)
  return target;
}

size_t DetectionEvalSubset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DetectionEvalSubset)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float score_thresholds = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->score_thresholds_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _score_thresholds_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float precision = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->precision_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _precision_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float recall = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->recall_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _recall_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float tp_rate = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->tp_rate_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _tp_rate_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float fp_rate_per_image = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->fp_rate_per_image_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _fp_rate_per_image_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float fp_rate_per_object = 16;
  {
    unsigned int count = static_cast<unsigned int>(this->fp_rate_per_object_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _fp_rate_per_object_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string area_range_name = 2;
  if (this->area_range_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->area_range_name());
  }

  // string concept_name = 6;
  if (this->concept_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->concept_name());
  }

  // string concept_id = 7;
  if (this->concept_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->concept_id());
  }

  // double area_min = 3;
  if (!(this->area_min() <= 0 && this->area_min() >= 0)) {
    total_size += 1 + 8;
  }

  // double area_max = 4;
  if (!(this->area_max() <= 0 && this->area_max() >= 0)) {
    total_size += 1 + 8;
  }

  // double mean_average_precision = 9;
  if (!(this->mean_average_precision() <= 0 && this->mean_average_precision() >= 0)) {
    total_size += 1 + 8;
  }

  // double class_average_precision = 10;
  if (!(this->class_average_precision() <= 0 && this->class_average_precision() >= 0)) {
    total_size += 1 + 8;
  }

  // float iou = 8;
  if (!(this->iou() <= 0 && this->iou() >= 0)) {
    total_size += 1 + 4;
  }

  // int64 num_gt_boxes = 17;
  if (this->num_gt_boxes() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->num_gt_boxes());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetectionEvalSubset::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DetectionEvalSubset)
  GOOGLE_DCHECK_NE(&from, this);
  const DetectionEvalSubset* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DetectionEvalSubset>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DetectionEvalSubset)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DetectionEvalSubset)
    MergeFrom(*source);
  }
}

void DetectionEvalSubset::MergeFrom(const DetectionEvalSubset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DetectionEvalSubset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  score_thresholds_.MergeFrom(from.score_thresholds_);
  precision_.MergeFrom(from.precision_);
  recall_.MergeFrom(from.recall_);
  tp_rate_.MergeFrom(from.tp_rate_);
  fp_rate_per_image_.MergeFrom(from.fp_rate_per_image_);
  fp_rate_per_object_.MergeFrom(from.fp_rate_per_object_);
  if (from.area_range_name().size() > 0) {

    area_range_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.area_range_name_);
  }
  if (from.concept_name().size() > 0) {

    concept_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.concept_name_);
  }
  if (from.concept_id().size() > 0) {

    concept_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.concept_id_);
  }
  if (!(from.area_min() <= 0 && from.area_min() >= 0)) {
    set_area_min(from.area_min());
  }
  if (!(from.area_max() <= 0 && from.area_max() >= 0)) {
    set_area_max(from.area_max());
  }
  if (!(from.mean_average_precision() <= 0 && from.mean_average_precision() >= 0)) {
    set_mean_average_precision(from.mean_average_precision());
  }
  if (!(from.class_average_precision() <= 0 && from.class_average_precision() >= 0)) {
    set_class_average_precision(from.class_average_precision());
  }
  if (!(from.iou() <= 0 && from.iou() >= 0)) {
    set_iou(from.iou());
  }
  if (from.num_gt_boxes() != 0) {
    set_num_gt_boxes(from.num_gt_boxes());
  }
}

void DetectionEvalSubset::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DetectionEvalSubset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectionEvalSubset::CopyFrom(const DetectionEvalSubset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DetectionEvalSubset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectionEvalSubset::IsInitialized() const {
  return true;
}

void DetectionEvalSubset::InternalSwap(DetectionEvalSubset* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  score_thresholds_.InternalSwap(&other->score_thresholds_);
  precision_.InternalSwap(&other->precision_);
  recall_.InternalSwap(&other->recall_);
  tp_rate_.InternalSwap(&other->tp_rate_);
  fp_rate_per_image_.InternalSwap(&other->fp_rate_per_image_);
  fp_rate_per_object_.InternalSwap(&other->fp_rate_per_object_);
  area_range_name_.Swap(&other->area_range_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  concept_name_.Swap(&other->concept_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  concept_id_.Swap(&other->concept_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(area_min_, other->area_min_);
  swap(area_max_, other->area_max_);
  swap(mean_average_precision_, other->mean_average_precision_);
  swap(class_average_precision_, other->class_average_precision_);
  swap(iou_, other->iou_);
  swap(num_gt_boxes_, other->num_gt_boxes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectionEvalSubset::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::DetectionEvalResult* Arena::CreateMaybeMessage< ::DetectionEvalResult >(Arena* arena) {
  return Arena::CreateInternal< ::DetectionEvalResult >(arena);
}
template<> PROTOBUF_NOINLINE ::DetectionEvalSubset* Arena::CreateMaybeMessage< ::DetectionEvalSubset >(Arena* arena) {
  return Arena::CreateInternal< ::DetectionEvalSubset >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
