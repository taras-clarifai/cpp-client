// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/evaluation/classification.proto

#include "proto/evaluation/classification.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_proto_2fevaluation_2fclassification_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClassificationEvalSubset_proto_2fevaluation_2fclassification_2eproto;
class ClassificationEvalResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClassificationEvalResult> _instance;
} _ClassificationEvalResult_default_instance_;
class ClassificationEvalSubsetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClassificationEvalSubset> _instance;
} _ClassificationEvalSubset_default_instance_;
static void InitDefaultsscc_info_ClassificationEvalResult_proto_2fevaluation_2fclassification_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ClassificationEvalResult_default_instance_;
    new (ptr) ::ClassificationEvalResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ClassificationEvalResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClassificationEvalResult_proto_2fevaluation_2fclassification_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ClassificationEvalResult_proto_2fevaluation_2fclassification_2eproto}, {
      &scc_info_ClassificationEvalSubset_proto_2fevaluation_2fclassification_2eproto.base,}};

static void InitDefaultsscc_info_ClassificationEvalSubset_proto_2fevaluation_2fclassification_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ClassificationEvalSubset_default_instance_;
    new (ptr) ::ClassificationEvalSubset();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ClassificationEvalSubset::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClassificationEvalSubset_proto_2fevaluation_2fclassification_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ClassificationEvalSubset_proto_2fevaluation_2fclassification_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fevaluation_2fclassification_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_proto_2fevaluation_2fclassification_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fevaluation_2fclassification_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2fevaluation_2fclassification_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClassificationEvalResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ClassificationEvalResult, top1_correct_),
  PROTOBUF_FIELD_OFFSET(::ClassificationEvalResult, topk_correct_),
  PROTOBUF_FIELD_OFFSET(::ClassificationEvalResult, subsets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClassificationEvalSubset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ClassificationEvalSubset, concept_name_),
  PROTOBUF_FIELD_OFFSET(::ClassificationEvalSubset, concept_id_),
  PROTOBUF_FIELD_OFFSET(::ClassificationEvalSubset, top1_correct_),
  PROTOBUF_FIELD_OFFSET(::ClassificationEvalSubset, topk_correct_),
  PROTOBUF_FIELD_OFFSET(::ClassificationEvalSubset, auc_),
  PROTOBUF_FIELD_OFFSET(::ClassificationEvalSubset, precision_at_50_),
  PROTOBUF_FIELD_OFFSET(::ClassificationEvalSubset, recall_at_50_),
  PROTOBUF_FIELD_OFFSET(::ClassificationEvalSubset, num_gt_images_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ClassificationEvalResult)},
  { 8, -1, sizeof(::ClassificationEvalSubset)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ClassificationEvalResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ClassificationEvalSubset_default_instance_),
};

const char descriptor_table_protodef_proto_2fevaluation_2fclassification_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%proto/evaluation/classification.proto\""
  "r\n\030ClassificationEvalResult\022\024\n\014top1_corr"
  "ect\030\001 \001(\001\022\024\n\014topk_correct\030\002 \001(\001\022*\n\007subse"
  "ts\030\003 \003(\0132\031.ClassificationEvalSubset\"\303\001\n\030"
  "ClassificationEvalSubset\022\024\n\014concept_name"
  "\030\001 \001(\t\022\022\n\nconcept_id\030\002 \001(\t\022\024\n\014top1_corre"
  "ct\030\n \001(\001\022\024\n\014topk_correct\030\013 \001(\001\022\013\n\003auc\030\014 "
  "\001(\001\022\027\n\017precision_at_50\030\r \001(\001\022\024\n\014recall_a"
  "t_50\030\016 \001(\001\022\025\n\rnum_gt_images\030\021 \001(\003B\014Z\neva"
  "luationb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2fevaluation_2fclassification_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_2fevaluation_2fclassification_2eproto_sccs[2] = {
  &scc_info_ClassificationEvalResult_proto_2fevaluation_2fclassification_2eproto.base,
  &scc_info_ClassificationEvalSubset_proto_2fevaluation_2fclassification_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2fevaluation_2fclassification_2eproto_once;
static bool descriptor_table_proto_2fevaluation_2fclassification_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fevaluation_2fclassification_2eproto = {
  &descriptor_table_proto_2fevaluation_2fclassification_2eproto_initialized, descriptor_table_protodef_proto_2fevaluation_2fclassification_2eproto, "proto/evaluation/classification.proto", 375,
  &descriptor_table_proto_2fevaluation_2fclassification_2eproto_once, descriptor_table_proto_2fevaluation_2fclassification_2eproto_sccs, descriptor_table_proto_2fevaluation_2fclassification_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_proto_2fevaluation_2fclassification_2eproto::offsets,
  file_level_metadata_proto_2fevaluation_2fclassification_2eproto, 2, file_level_enum_descriptors_proto_2fevaluation_2fclassification_2eproto, file_level_service_descriptors_proto_2fevaluation_2fclassification_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2fevaluation_2fclassification_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_2fevaluation_2fclassification_2eproto), true);

// ===================================================================

void ClassificationEvalResult::InitAsDefaultInstance() {
}
class ClassificationEvalResult::_Internal {
 public:
};

ClassificationEvalResult::ClassificationEvalResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClassificationEvalResult)
}
ClassificationEvalResult::ClassificationEvalResult(const ClassificationEvalResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      subsets_(from.subsets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&top1_correct_, &from.top1_correct_,
    static_cast<size_t>(reinterpret_cast<char*>(&topk_correct_) -
    reinterpret_cast<char*>(&top1_correct_)) + sizeof(topk_correct_));
  // @@protoc_insertion_point(copy_constructor:ClassificationEvalResult)
}

void ClassificationEvalResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClassificationEvalResult_proto_2fevaluation_2fclassification_2eproto.base);
  ::memset(&top1_correct_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&topk_correct_) -
      reinterpret_cast<char*>(&top1_correct_)) + sizeof(topk_correct_));
}

ClassificationEvalResult::~ClassificationEvalResult() {
  // @@protoc_insertion_point(destructor:ClassificationEvalResult)
  SharedDtor();
}

void ClassificationEvalResult::SharedDtor() {
}

void ClassificationEvalResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClassificationEvalResult& ClassificationEvalResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClassificationEvalResult_proto_2fevaluation_2fclassification_2eproto.base);
  return *internal_default_instance();
}


void ClassificationEvalResult::Clear() {
// @@protoc_insertion_point(message_clear_start:ClassificationEvalResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subsets_.Clear();
  ::memset(&top1_correct_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&topk_correct_) -
      reinterpret_cast<char*>(&top1_correct_)) + sizeof(topk_correct_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClassificationEvalResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double top1_correct = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          top1_correct_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double topk_correct = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          topk_correct_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .ClassificationEvalSubset subsets = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_subsets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClassificationEvalResult::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ClassificationEvalResult)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double top1_correct = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &top1_correct_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double topk_correct = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &topk_correct_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ClassificationEvalSubset subsets = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_subsets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ClassificationEvalResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClassificationEvalResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClassificationEvalResult::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClassificationEvalResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double top1_correct = 1;
  if (!(this->top1_correct() <= 0 && this->top1_correct() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->top1_correct(), output);
  }

  // double topk_correct = 2;
  if (!(this->topk_correct() <= 0 && this->topk_correct() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->topk_correct(), output);
  }

  // repeated .ClassificationEvalSubset subsets = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->subsets_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->subsets(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ClassificationEvalResult)
}

::PROTOBUF_NAMESPACE_ID::uint8* ClassificationEvalResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClassificationEvalResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double top1_correct = 1;
  if (!(this->top1_correct() <= 0 && this->top1_correct() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->top1_correct(), target);
  }

  // double topk_correct = 2;
  if (!(this->topk_correct() <= 0 && this->topk_correct() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->topk_correct(), target);
  }

  // repeated .ClassificationEvalSubset subsets = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->subsets_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->subsets(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClassificationEvalResult)
  return target;
}

size_t ClassificationEvalResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClassificationEvalResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ClassificationEvalSubset subsets = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->subsets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->subsets(static_cast<int>(i)));
    }
  }

  // double top1_correct = 1;
  if (!(this->top1_correct() <= 0 && this->top1_correct() >= 0)) {
    total_size += 1 + 8;
  }

  // double topk_correct = 2;
  if (!(this->topk_correct() <= 0 && this->topk_correct() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClassificationEvalResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ClassificationEvalResult)
  GOOGLE_DCHECK_NE(&from, this);
  const ClassificationEvalResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClassificationEvalResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ClassificationEvalResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ClassificationEvalResult)
    MergeFrom(*source);
  }
}

void ClassificationEvalResult::MergeFrom(const ClassificationEvalResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClassificationEvalResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  subsets_.MergeFrom(from.subsets_);
  if (!(from.top1_correct() <= 0 && from.top1_correct() >= 0)) {
    set_top1_correct(from.top1_correct());
  }
  if (!(from.topk_correct() <= 0 && from.topk_correct() >= 0)) {
    set_topk_correct(from.topk_correct());
  }
}

void ClassificationEvalResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ClassificationEvalResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClassificationEvalResult::CopyFrom(const ClassificationEvalResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClassificationEvalResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClassificationEvalResult::IsInitialized() const {
  return true;
}

void ClassificationEvalResult::InternalSwap(ClassificationEvalResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&subsets_)->InternalSwap(CastToBase(&other->subsets_));
  swap(top1_correct_, other->top1_correct_);
  swap(topk_correct_, other->topk_correct_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClassificationEvalResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClassificationEvalSubset::InitAsDefaultInstance() {
}
class ClassificationEvalSubset::_Internal {
 public:
};

ClassificationEvalSubset::ClassificationEvalSubset()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClassificationEvalSubset)
}
ClassificationEvalSubset::ClassificationEvalSubset(const ClassificationEvalSubset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  concept_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.concept_name().empty()) {
    concept_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.concept_name_);
  }
  concept_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.concept_id().empty()) {
    concept_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.concept_id_);
  }
  ::memcpy(&top1_correct_, &from.top1_correct_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_gt_images_) -
    reinterpret_cast<char*>(&top1_correct_)) + sizeof(num_gt_images_));
  // @@protoc_insertion_point(copy_constructor:ClassificationEvalSubset)
}

void ClassificationEvalSubset::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClassificationEvalSubset_proto_2fevaluation_2fclassification_2eproto.base);
  concept_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  concept_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&top1_correct_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_gt_images_) -
      reinterpret_cast<char*>(&top1_correct_)) + sizeof(num_gt_images_));
}

ClassificationEvalSubset::~ClassificationEvalSubset() {
  // @@protoc_insertion_point(destructor:ClassificationEvalSubset)
  SharedDtor();
}

void ClassificationEvalSubset::SharedDtor() {
  concept_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  concept_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ClassificationEvalSubset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClassificationEvalSubset& ClassificationEvalSubset::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClassificationEvalSubset_proto_2fevaluation_2fclassification_2eproto.base);
  return *internal_default_instance();
}


void ClassificationEvalSubset::Clear() {
// @@protoc_insertion_point(message_clear_start:ClassificationEvalSubset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concept_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  concept_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&top1_correct_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_gt_images_) -
      reinterpret_cast<char*>(&top1_correct_)) + sizeof(num_gt_images_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClassificationEvalSubset::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string concept_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_concept_name(), ptr, ctx, "ClassificationEvalSubset.concept_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string concept_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_concept_id(), ptr, ctx, "ClassificationEvalSubset.concept_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double top1_correct = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          top1_correct_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double topk_correct = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          topk_correct_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double auc = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          auc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double precision_at_50 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          precision_at_50_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double recall_at_50 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          recall_at_50_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int64 num_gt_images = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          num_gt_images_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClassificationEvalSubset::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ClassificationEvalSubset)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string concept_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_concept_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->concept_name().data(), static_cast<int>(this->concept_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ClassificationEvalSubset.concept_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string concept_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_concept_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->concept_id().data(), static_cast<int>(this->concept_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ClassificationEvalSubset.concept_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double top1_correct = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (81 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &top1_correct_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double topk_correct = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (89 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &topk_correct_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double auc = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (97 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &auc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double precision_at_50 = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (105 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &precision_at_50_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double recall_at_50 = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (113 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &recall_at_50_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 num_gt_images = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_gt_images_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ClassificationEvalSubset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClassificationEvalSubset)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClassificationEvalSubset::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClassificationEvalSubset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string concept_name = 1;
  if (this->concept_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->concept_name().data(), static_cast<int>(this->concept_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClassificationEvalSubset.concept_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->concept_name(), output);
  }

  // string concept_id = 2;
  if (this->concept_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->concept_id().data(), static_cast<int>(this->concept_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClassificationEvalSubset.concept_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->concept_id(), output);
  }

  // double top1_correct = 10;
  if (!(this->top1_correct() <= 0 && this->top1_correct() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(10, this->top1_correct(), output);
  }

  // double topk_correct = 11;
  if (!(this->topk_correct() <= 0 && this->topk_correct() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(11, this->topk_correct(), output);
  }

  // double auc = 12;
  if (!(this->auc() <= 0 && this->auc() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(12, this->auc(), output);
  }

  // double precision_at_50 = 13;
  if (!(this->precision_at_50() <= 0 && this->precision_at_50() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(13, this->precision_at_50(), output);
  }

  // double recall_at_50 = 14;
  if (!(this->recall_at_50() <= 0 && this->recall_at_50() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(14, this->recall_at_50(), output);
  }

  // int64 num_gt_images = 17;
  if (this->num_gt_images() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(17, this->num_gt_images(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ClassificationEvalSubset)
}

::PROTOBUF_NAMESPACE_ID::uint8* ClassificationEvalSubset::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClassificationEvalSubset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string concept_name = 1;
  if (this->concept_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->concept_name().data(), static_cast<int>(this->concept_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClassificationEvalSubset.concept_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->concept_name(), target);
  }

  // string concept_id = 2;
  if (this->concept_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->concept_id().data(), static_cast<int>(this->concept_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClassificationEvalSubset.concept_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->concept_id(), target);
  }

  // double top1_correct = 10;
  if (!(this->top1_correct() <= 0 && this->top1_correct() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->top1_correct(), target);
  }

  // double topk_correct = 11;
  if (!(this->topk_correct() <= 0 && this->topk_correct() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->topk_correct(), target);
  }

  // double auc = 12;
  if (!(this->auc() <= 0 && this->auc() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->auc(), target);
  }

  // double precision_at_50 = 13;
  if (!(this->precision_at_50() <= 0 && this->precision_at_50() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->precision_at_50(), target);
  }

  // double recall_at_50 = 14;
  if (!(this->recall_at_50() <= 0 && this->recall_at_50() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->recall_at_50(), target);
  }

  // int64 num_gt_images = 17;
  if (this->num_gt_images() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(17, this->num_gt_images(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClassificationEvalSubset)
  return target;
}

size_t ClassificationEvalSubset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClassificationEvalSubset)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string concept_name = 1;
  if (this->concept_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->concept_name());
  }

  // string concept_id = 2;
  if (this->concept_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->concept_id());
  }

  // double top1_correct = 10;
  if (!(this->top1_correct() <= 0 && this->top1_correct() >= 0)) {
    total_size += 1 + 8;
  }

  // double topk_correct = 11;
  if (!(this->topk_correct() <= 0 && this->topk_correct() >= 0)) {
    total_size += 1 + 8;
  }

  // double auc = 12;
  if (!(this->auc() <= 0 && this->auc() >= 0)) {
    total_size += 1 + 8;
  }

  // double precision_at_50 = 13;
  if (!(this->precision_at_50() <= 0 && this->precision_at_50() >= 0)) {
    total_size += 1 + 8;
  }

  // double recall_at_50 = 14;
  if (!(this->recall_at_50() <= 0 && this->recall_at_50() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 num_gt_images = 17;
  if (this->num_gt_images() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->num_gt_images());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClassificationEvalSubset::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ClassificationEvalSubset)
  GOOGLE_DCHECK_NE(&from, this);
  const ClassificationEvalSubset* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClassificationEvalSubset>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ClassificationEvalSubset)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ClassificationEvalSubset)
    MergeFrom(*source);
  }
}

void ClassificationEvalSubset::MergeFrom(const ClassificationEvalSubset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClassificationEvalSubset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.concept_name().size() > 0) {

    concept_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.concept_name_);
  }
  if (from.concept_id().size() > 0) {

    concept_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.concept_id_);
  }
  if (!(from.top1_correct() <= 0 && from.top1_correct() >= 0)) {
    set_top1_correct(from.top1_correct());
  }
  if (!(from.topk_correct() <= 0 && from.topk_correct() >= 0)) {
    set_topk_correct(from.topk_correct());
  }
  if (!(from.auc() <= 0 && from.auc() >= 0)) {
    set_auc(from.auc());
  }
  if (!(from.precision_at_50() <= 0 && from.precision_at_50() >= 0)) {
    set_precision_at_50(from.precision_at_50());
  }
  if (!(from.recall_at_50() <= 0 && from.recall_at_50() >= 0)) {
    set_recall_at_50(from.recall_at_50());
  }
  if (from.num_gt_images() != 0) {
    set_num_gt_images(from.num_gt_images());
  }
}

void ClassificationEvalSubset::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ClassificationEvalSubset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClassificationEvalSubset::CopyFrom(const ClassificationEvalSubset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClassificationEvalSubset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClassificationEvalSubset::IsInitialized() const {
  return true;
}

void ClassificationEvalSubset::InternalSwap(ClassificationEvalSubset* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  concept_name_.Swap(&other->concept_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  concept_id_.Swap(&other->concept_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(top1_correct_, other->top1_correct_);
  swap(topk_correct_, other->topk_correct_);
  swap(auc_, other->auc_);
  swap(precision_at_50_, other->precision_at_50_);
  swap(recall_at_50_, other->recall_at_50_);
  swap(num_gt_images_, other->num_gt_images_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClassificationEvalSubset::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ClassificationEvalResult* Arena::CreateMaybeMessage< ::ClassificationEvalResult >(Arena* arena) {
  return Arena::CreateInternal< ::ClassificationEvalResult >(arena);
}
template<> PROTOBUF_NOINLINE ::ClassificationEvalSubset* Arena::CreateMaybeMessage< ::ClassificationEvalSubset >(Arena* arena) {
  return Arena::CreateInternal< ::ClassificationEvalSubset >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
