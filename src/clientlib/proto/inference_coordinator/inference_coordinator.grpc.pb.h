// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/inference_coordinator/inference_coordinator.proto
#ifndef GRPC_proto_2finference_5fcoordinator_2finference_5fcoordinator_2eproto__INCLUDED
#define GRPC_proto_2finference_5fcoordinator_2finference_5fcoordinator_2eproto__INCLUDED

#include "proto/inference_coordinator/inference_coordinator.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

// Interface exported by the server.
class InferenceCoordinator final {
 public:
  static constexpr char const* service_full_name() {
    return "InferenceCoordinator";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Deploy a Spire
    virtual ::grpc::Status DeploySpire(::grpc::ClientContext* context, const ::DeploySpireRequest& request, ::DeploySpireResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DeploySpireResponse>> AsyncDeploySpire(::grpc::ClientContext* context, const ::DeploySpireRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DeploySpireResponse>>(AsyncDeploySpireRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DeploySpireResponse>> PrepareAsyncDeploySpire(::grpc::ClientContext* context, const ::DeploySpireRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DeploySpireResponse>>(PrepareAsyncDeploySpireRaw(context, request, cq));
    }
    // Delete a Spire
    virtual ::grpc::Status DeleteSpire(::grpc::ClientContext* context, const ::DeleteSpireRequest& request, ::DeleteSpireResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DeleteSpireResponse>> AsyncDeleteSpire(::grpc::ClientContext* context, const ::DeleteSpireRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DeleteSpireResponse>>(AsyncDeleteSpireRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DeleteSpireResponse>> PrepareAsyncDeleteSpire(::grpc::ClientContext* context, const ::DeleteSpireRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DeleteSpireResponse>>(PrepareAsyncDeleteSpireRaw(context, request, cq));
    }
    // Check whether a spire is running
    virtual ::grpc::Status GetSpireDeployStatus(::grpc::ClientContext* context, const ::GetSpireDeployStatusRequest& request, ::GetSpireDeployStatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetSpireDeployStatusResponse>> AsyncGetSpireDeployStatus(::grpc::ClientContext* context, const ::GetSpireDeployStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetSpireDeployStatusResponse>>(AsyncGetSpireDeployStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetSpireDeployStatusResponse>> PrepareAsyncGetSpireDeployStatus(::grpc::ClientContext* context, const ::GetSpireDeployStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetSpireDeployStatusResponse>>(PrepareAsyncGetSpireDeployStatusRaw(context, request, cq));
    }
    // Get list of spires
    virtual ::grpc::Status ListSpires(::grpc::ClientContext* context, const ::ListSpiresRequest& request, ::ListSpiresResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ListSpiresResponse>> AsyncListSpires(::grpc::ClientContext* context, const ::ListSpiresRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ListSpiresResponse>>(AsyncListSpiresRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ListSpiresResponse>> PrepareAsyncListSpires(::grpc::ClientContext* context, const ::ListSpiresRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ListSpiresResponse>>(PrepareAsyncListSpiresRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Deploy a Spire
      virtual void DeploySpire(::grpc::ClientContext* context, const ::DeploySpireRequest* request, ::DeploySpireResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeploySpire(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::DeploySpireResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeploySpire(::grpc::ClientContext* context, const ::DeploySpireRequest* request, ::DeploySpireResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void DeploySpire(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::DeploySpireResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Delete a Spire
      virtual void DeleteSpire(::grpc::ClientContext* context, const ::DeleteSpireRequest* request, ::DeleteSpireResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteSpire(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::DeleteSpireResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteSpire(::grpc::ClientContext* context, const ::DeleteSpireRequest* request, ::DeleteSpireResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteSpire(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::DeleteSpireResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Check whether a spire is running
      virtual void GetSpireDeployStatus(::grpc::ClientContext* context, const ::GetSpireDeployStatusRequest* request, ::GetSpireDeployStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetSpireDeployStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GetSpireDeployStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetSpireDeployStatus(::grpc::ClientContext* context, const ::GetSpireDeployStatusRequest* request, ::GetSpireDeployStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetSpireDeployStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GetSpireDeployStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Get list of spires
      virtual void ListSpires(::grpc::ClientContext* context, const ::ListSpiresRequest* request, ::ListSpiresResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListSpires(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ListSpiresResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListSpires(::grpc::ClientContext* context, const ::ListSpiresRequest* request, ::ListSpiresResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ListSpires(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ListSpiresResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DeploySpireResponse>* AsyncDeploySpireRaw(::grpc::ClientContext* context, const ::DeploySpireRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DeploySpireResponse>* PrepareAsyncDeploySpireRaw(::grpc::ClientContext* context, const ::DeploySpireRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DeleteSpireResponse>* AsyncDeleteSpireRaw(::grpc::ClientContext* context, const ::DeleteSpireRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DeleteSpireResponse>* PrepareAsyncDeleteSpireRaw(::grpc::ClientContext* context, const ::DeleteSpireRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GetSpireDeployStatusResponse>* AsyncGetSpireDeployStatusRaw(::grpc::ClientContext* context, const ::GetSpireDeployStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GetSpireDeployStatusResponse>* PrepareAsyncGetSpireDeployStatusRaw(::grpc::ClientContext* context, const ::GetSpireDeployStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ListSpiresResponse>* AsyncListSpiresRaw(::grpc::ClientContext* context, const ::ListSpiresRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ListSpiresResponse>* PrepareAsyncListSpiresRaw(::grpc::ClientContext* context, const ::ListSpiresRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status DeploySpire(::grpc::ClientContext* context, const ::DeploySpireRequest& request, ::DeploySpireResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DeploySpireResponse>> AsyncDeploySpire(::grpc::ClientContext* context, const ::DeploySpireRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DeploySpireResponse>>(AsyncDeploySpireRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DeploySpireResponse>> PrepareAsyncDeploySpire(::grpc::ClientContext* context, const ::DeploySpireRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DeploySpireResponse>>(PrepareAsyncDeploySpireRaw(context, request, cq));
    }
    ::grpc::Status DeleteSpire(::grpc::ClientContext* context, const ::DeleteSpireRequest& request, ::DeleteSpireResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DeleteSpireResponse>> AsyncDeleteSpire(::grpc::ClientContext* context, const ::DeleteSpireRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DeleteSpireResponse>>(AsyncDeleteSpireRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DeleteSpireResponse>> PrepareAsyncDeleteSpire(::grpc::ClientContext* context, const ::DeleteSpireRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DeleteSpireResponse>>(PrepareAsyncDeleteSpireRaw(context, request, cq));
    }
    ::grpc::Status GetSpireDeployStatus(::grpc::ClientContext* context, const ::GetSpireDeployStatusRequest& request, ::GetSpireDeployStatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetSpireDeployStatusResponse>> AsyncGetSpireDeployStatus(::grpc::ClientContext* context, const ::GetSpireDeployStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetSpireDeployStatusResponse>>(AsyncGetSpireDeployStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetSpireDeployStatusResponse>> PrepareAsyncGetSpireDeployStatus(::grpc::ClientContext* context, const ::GetSpireDeployStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetSpireDeployStatusResponse>>(PrepareAsyncGetSpireDeployStatusRaw(context, request, cq));
    }
    ::grpc::Status ListSpires(::grpc::ClientContext* context, const ::ListSpiresRequest& request, ::ListSpiresResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ListSpiresResponse>> AsyncListSpires(::grpc::ClientContext* context, const ::ListSpiresRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ListSpiresResponse>>(AsyncListSpiresRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ListSpiresResponse>> PrepareAsyncListSpires(::grpc::ClientContext* context, const ::ListSpiresRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ListSpiresResponse>>(PrepareAsyncListSpiresRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void DeploySpire(::grpc::ClientContext* context, const ::DeploySpireRequest* request, ::DeploySpireResponse* response, std::function<void(::grpc::Status)>) override;
      void DeploySpire(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::DeploySpireResponse* response, std::function<void(::grpc::Status)>) override;
      void DeploySpire(::grpc::ClientContext* context, const ::DeploySpireRequest* request, ::DeploySpireResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void DeploySpire(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::DeploySpireResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void DeleteSpire(::grpc::ClientContext* context, const ::DeleteSpireRequest* request, ::DeleteSpireResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteSpire(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::DeleteSpireResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteSpire(::grpc::ClientContext* context, const ::DeleteSpireRequest* request, ::DeleteSpireResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void DeleteSpire(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::DeleteSpireResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetSpireDeployStatus(::grpc::ClientContext* context, const ::GetSpireDeployStatusRequest* request, ::GetSpireDeployStatusResponse* response, std::function<void(::grpc::Status)>) override;
      void GetSpireDeployStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GetSpireDeployStatusResponse* response, std::function<void(::grpc::Status)>) override;
      void GetSpireDeployStatus(::grpc::ClientContext* context, const ::GetSpireDeployStatusRequest* request, ::GetSpireDeployStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetSpireDeployStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GetSpireDeployStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ListSpires(::grpc::ClientContext* context, const ::ListSpiresRequest* request, ::ListSpiresResponse* response, std::function<void(::grpc::Status)>) override;
      void ListSpires(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ListSpiresResponse* response, std::function<void(::grpc::Status)>) override;
      void ListSpires(::grpc::ClientContext* context, const ::ListSpiresRequest* request, ::ListSpiresResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ListSpires(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ListSpiresResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::DeploySpireResponse>* AsyncDeploySpireRaw(::grpc::ClientContext* context, const ::DeploySpireRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DeploySpireResponse>* PrepareAsyncDeploySpireRaw(::grpc::ClientContext* context, const ::DeploySpireRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DeleteSpireResponse>* AsyncDeleteSpireRaw(::grpc::ClientContext* context, const ::DeleteSpireRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DeleteSpireResponse>* PrepareAsyncDeleteSpireRaw(::grpc::ClientContext* context, const ::DeleteSpireRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GetSpireDeployStatusResponse>* AsyncGetSpireDeployStatusRaw(::grpc::ClientContext* context, const ::GetSpireDeployStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GetSpireDeployStatusResponse>* PrepareAsyncGetSpireDeployStatusRaw(::grpc::ClientContext* context, const ::GetSpireDeployStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ListSpiresResponse>* AsyncListSpiresRaw(::grpc::ClientContext* context, const ::ListSpiresRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ListSpiresResponse>* PrepareAsyncListSpiresRaw(::grpc::ClientContext* context, const ::ListSpiresRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_DeploySpire_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteSpire_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSpireDeployStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_ListSpires_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Deploy a Spire
    virtual ::grpc::Status DeploySpire(::grpc::ServerContext* context, const ::DeploySpireRequest* request, ::DeploySpireResponse* response);
    // Delete a Spire
    virtual ::grpc::Status DeleteSpire(::grpc::ServerContext* context, const ::DeleteSpireRequest* request, ::DeleteSpireResponse* response);
    // Check whether a spire is running
    virtual ::grpc::Status GetSpireDeployStatus(::grpc::ServerContext* context, const ::GetSpireDeployStatusRequest* request, ::GetSpireDeployStatusResponse* response);
    // Get list of spires
    virtual ::grpc::Status ListSpires(::grpc::ServerContext* context, const ::ListSpiresRequest* request, ::ListSpiresResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_DeploySpire : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeploySpire() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_DeploySpire() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeploySpire(::grpc::ServerContext* context, const ::DeploySpireRequest* request, ::DeploySpireResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeploySpire(::grpc::ServerContext* context, ::DeploySpireRequest* request, ::grpc::ServerAsyncResponseWriter< ::DeploySpireResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteSpire : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteSpire() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_DeleteSpire() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSpire(::grpc::ServerContext* context, const ::DeleteSpireRequest* request, ::DeleteSpireResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteSpire(::grpc::ServerContext* context, ::DeleteSpireRequest* request, ::grpc::ServerAsyncResponseWriter< ::DeleteSpireResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSpireDeployStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetSpireDeployStatus() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetSpireDeployStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpireDeployStatus(::grpc::ServerContext* context, const ::GetSpireDeployStatusRequest* request, ::GetSpireDeployStatusResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSpireDeployStatus(::grpc::ServerContext* context, ::GetSpireDeployStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::GetSpireDeployStatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListSpires : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListSpires() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ListSpires() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSpires(::grpc::ServerContext* context, const ::ListSpiresRequest* request, ::ListSpiresResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListSpires(::grpc::ServerContext* context, ::ListSpiresRequest* request, ::grpc::ServerAsyncResponseWriter< ::ListSpiresResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_DeploySpire<WithAsyncMethod_DeleteSpire<WithAsyncMethod_GetSpireDeployStatus<WithAsyncMethod_ListSpires<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeploySpire : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_DeploySpire() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::DeploySpireRequest, ::DeploySpireResponse>(
          [this](::grpc::ServerContext* context,
                 const ::DeploySpireRequest* request,
                 ::DeploySpireResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->DeploySpire(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_DeploySpire(
        ::grpc::experimental::MessageAllocator< ::DeploySpireRequest, ::DeploySpireResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::DeploySpireRequest, ::DeploySpireResponse>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeploySpire() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeploySpire(::grpc::ServerContext* context, const ::DeploySpireRequest* request, ::DeploySpireResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DeploySpire(::grpc::ServerContext* context, const ::DeploySpireRequest* request, ::DeploySpireResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteSpire : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_DeleteSpire() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::DeleteSpireRequest, ::DeleteSpireResponse>(
          [this](::grpc::ServerContext* context,
                 const ::DeleteSpireRequest* request,
                 ::DeleteSpireResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->DeleteSpire(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_DeleteSpire(
        ::grpc::experimental::MessageAllocator< ::DeleteSpireRequest, ::DeleteSpireResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::DeleteSpireRequest, ::DeleteSpireResponse>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteSpire() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSpire(::grpc::ServerContext* context, const ::DeleteSpireRequest* request, ::DeleteSpireResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DeleteSpire(::grpc::ServerContext* context, const ::DeleteSpireRequest* request, ::DeleteSpireResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetSpireDeployStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetSpireDeployStatus() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::GetSpireDeployStatusRequest, ::GetSpireDeployStatusResponse>(
          [this](::grpc::ServerContext* context,
                 const ::GetSpireDeployStatusRequest* request,
                 ::GetSpireDeployStatusResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetSpireDeployStatus(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetSpireDeployStatus(
        ::grpc::experimental::MessageAllocator< ::GetSpireDeployStatusRequest, ::GetSpireDeployStatusResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::GetSpireDeployStatusRequest, ::GetSpireDeployStatusResponse>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetSpireDeployStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpireDeployStatus(::grpc::ServerContext* context, const ::GetSpireDeployStatusRequest* request, ::GetSpireDeployStatusResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetSpireDeployStatus(::grpc::ServerContext* context, const ::GetSpireDeployStatusRequest* request, ::GetSpireDeployStatusResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListSpires : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ListSpires() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::ListSpiresRequest, ::ListSpiresResponse>(
          [this](::grpc::ServerContext* context,
                 const ::ListSpiresRequest* request,
                 ::ListSpiresResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ListSpires(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_ListSpires(
        ::grpc::experimental::MessageAllocator< ::ListSpiresRequest, ::ListSpiresResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ListSpiresRequest, ::ListSpiresResponse>*>(
          ::grpc::Service::experimental().GetHandler(3))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListSpires() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSpires(::grpc::ServerContext* context, const ::ListSpiresRequest* request, ::ListSpiresResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ListSpires(::grpc::ServerContext* context, const ::ListSpiresRequest* request, ::ListSpiresResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_DeploySpire<ExperimentalWithCallbackMethod_DeleteSpire<ExperimentalWithCallbackMethod_GetSpireDeployStatus<ExperimentalWithCallbackMethod_ListSpires<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_DeploySpire : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeploySpire() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_DeploySpire() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeploySpire(::grpc::ServerContext* context, const ::DeploySpireRequest* request, ::DeploySpireResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteSpire : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteSpire() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_DeleteSpire() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSpire(::grpc::ServerContext* context, const ::DeleteSpireRequest* request, ::DeleteSpireResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSpireDeployStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetSpireDeployStatus() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetSpireDeployStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpireDeployStatus(::grpc::ServerContext* context, const ::GetSpireDeployStatusRequest* request, ::GetSpireDeployStatusResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListSpires : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListSpires() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ListSpires() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSpires(::grpc::ServerContext* context, const ::ListSpiresRequest* request, ::ListSpiresResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeploySpire : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DeploySpire() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_DeploySpire() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeploySpire(::grpc::ServerContext* context, const ::DeploySpireRequest* request, ::DeploySpireResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeploySpire(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteSpire : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DeleteSpire() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_DeleteSpire() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSpire(::grpc::ServerContext* context, const ::DeleteSpireRequest* request, ::DeleteSpireResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteSpire(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSpireDeployStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetSpireDeployStatus() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetSpireDeployStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpireDeployStatus(::grpc::ServerContext* context, const ::GetSpireDeployStatusRequest* request, ::GetSpireDeployStatusResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSpireDeployStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListSpires : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ListSpires() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ListSpires() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSpires(::grpc::ServerContext* context, const ::ListSpiresRequest* request, ::ListSpiresResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListSpires(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeploySpire : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_DeploySpire() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DeploySpire(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_DeploySpire() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeploySpire(::grpc::ServerContext* context, const ::DeploySpireRequest* request, ::DeploySpireResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DeploySpire(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteSpire : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteSpire() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DeleteSpire(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteSpire() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSpire(::grpc::ServerContext* context, const ::DeleteSpireRequest* request, ::DeleteSpireResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DeleteSpire(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetSpireDeployStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetSpireDeployStatus() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetSpireDeployStatus(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetSpireDeployStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpireDeployStatus(::grpc::ServerContext* context, const ::GetSpireDeployStatusRequest* request, ::GetSpireDeployStatusResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetSpireDeployStatus(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListSpires : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ListSpires() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ListSpires(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ListSpires() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSpires(::grpc::ServerContext* context, const ::ListSpiresRequest* request, ::ListSpiresResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ListSpires(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeploySpire : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeploySpire() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::DeploySpireRequest, ::DeploySpireResponse>(std::bind(&WithStreamedUnaryMethod_DeploySpire<BaseClass>::StreamedDeploySpire, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeploySpire() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeploySpire(::grpc::ServerContext* context, const ::DeploySpireRequest* request, ::DeploySpireResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeploySpire(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::DeploySpireRequest,::DeploySpireResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteSpire : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteSpire() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::DeleteSpireRequest, ::DeleteSpireResponse>(std::bind(&WithStreamedUnaryMethod_DeleteSpire<BaseClass>::StreamedDeleteSpire, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteSpire() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteSpire(::grpc::ServerContext* context, const ::DeleteSpireRequest* request, ::DeleteSpireResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteSpire(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::DeleteSpireRequest,::DeleteSpireResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSpireDeployStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetSpireDeployStatus() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::GetSpireDeployStatusRequest, ::GetSpireDeployStatusResponse>(std::bind(&WithStreamedUnaryMethod_GetSpireDeployStatus<BaseClass>::StreamedGetSpireDeployStatus, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetSpireDeployStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSpireDeployStatus(::grpc::ServerContext* context, const ::GetSpireDeployStatusRequest* request, ::GetSpireDeployStatusResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSpireDeployStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GetSpireDeployStatusRequest,::GetSpireDeployStatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListSpires : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListSpires() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::ListSpiresRequest, ::ListSpiresResponse>(std::bind(&WithStreamedUnaryMethod_ListSpires<BaseClass>::StreamedListSpires, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListSpires() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListSpires(::grpc::ServerContext* context, const ::ListSpiresRequest* request, ::ListSpiresResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListSpires(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ListSpiresRequest,::ListSpiresResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_DeploySpire<WithStreamedUnaryMethod_DeleteSpire<WithStreamedUnaryMethod_GetSpireDeployStatus<WithStreamedUnaryMethod_ListSpires<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_DeploySpire<WithStreamedUnaryMethod_DeleteSpire<WithStreamedUnaryMethod_GetSpireDeployStatus<WithStreamedUnaryMethod_ListSpires<Service > > > > StreamedService;
};


#endif  // GRPC_proto_2finference_5fcoordinator_2finference_5fcoordinator_2eproto__INCLUDED
