// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/utils/face.proto

#include "proto/utils/face.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fboundingbox_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BoundingBox_proto_2futils_2fboundingbox_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fembedding_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Embedding_proto_2futils_2fembedding_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fface_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Face_proto_2futils_2fface_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2ftag_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Tag_proto_2futils_2ftag_2eproto;
class FaceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Face> _instance;
} _Face_default_instance_;
class FaceDetectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FaceDetection> _instance;
} _FaceDetection_default_instance_;
static void InitDefaultsscc_info_Face_proto_2futils_2fface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Face_default_instance_;
    new (ptr) ::Face();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Face::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Face_proto_2futils_2fface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Face_proto_2futils_2fface_2eproto}, {
      &scc_info_Tag_proto_2futils_2ftag_2eproto.base,}};

static void InitDefaultsscc_info_FaceDetection_proto_2futils_2fface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_FaceDetection_default_instance_;
    new (ptr) ::FaceDetection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::FaceDetection::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_FaceDetection_proto_2futils_2fface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_FaceDetection_proto_2futils_2fface_2eproto}, {
      &scc_info_BoundingBox_proto_2futils_2fboundingbox_2eproto.base,
      &scc_info_Face_proto_2futils_2fface_2eproto.base,
      &scc_info_Embedding_proto_2futils_2fembedding_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2futils_2fface_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_proto_2futils_2fface_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2futils_2fface_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2futils_2fface_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Face, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Face, identity_),
  PROTOBUF_FIELD_OFFSET(::Face, age_),
  PROTOBUF_FIELD_OFFSET(::Face, gender_),
  PROTOBUF_FIELD_OFFSET(::Face, ethnicity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FaceDetection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FaceDetection, box_),
  PROTOBUF_FIELD_OFFSET(::FaceDetection, face_),
  PROTOBUF_FIELD_OFFSET(::FaceDetection, embedding_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Face)},
  { 9, -1, sizeof(::FaceDetection)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Face_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FaceDetection_default_instance_),
};

const char descriptor_table_protodef_proto_2futils_2fface_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026proto/utils/face.proto\032\025proto/utils/ta"
  "g.proto\032\035proto/utils/boundingbox.proto\032\033"
  "proto/utils/embedding.proto\"`\n\004Face\022\026\n\010i"
  "dentity\030\001 \003(\0132\004.Tag\022\021\n\003age\030\002 \003(\0132\004.Tag\022\024"
  "\n\006gender\030\003 \003(\0132\004.Tag\022\027\n\tethnicity\030\004 \003(\0132"
  "\004.Tag\"^\n\rFaceDetection\022\031\n\003box\030\001 \001(\0132\014.Bo"
  "undingBox\022\023\n\004face\030\002 \001(\0132\005.Face\022\035\n\tembedd"
  "ing\030\003 \001(\0132\n.EmbeddingB\016\n\005utilsZ\005utilsb\006p"
  "roto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2futils_2fface_2eproto_deps[3] = {
  &::descriptor_table_proto_2futils_2fboundingbox_2eproto,
  &::descriptor_table_proto_2futils_2fembedding_2eproto,
  &::descriptor_table_proto_2futils_2ftag_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_2futils_2fface_2eproto_sccs[2] = {
  &scc_info_Face_proto_2futils_2fface_2eproto.base,
  &scc_info_FaceDetection_proto_2futils_2fface_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2futils_2fface_2eproto_once;
static bool descriptor_table_proto_2futils_2fface_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2futils_2fface_2eproto = {
  &descriptor_table_proto_2futils_2fface_2eproto_initialized, descriptor_table_protodef_proto_2futils_2fface_2eproto, "proto/utils/face.proto", 325,
  &descriptor_table_proto_2futils_2fface_2eproto_once, descriptor_table_proto_2futils_2fface_2eproto_sccs, descriptor_table_proto_2futils_2fface_2eproto_deps, 2, 3,
  schemas, file_default_instances, TableStruct_proto_2futils_2fface_2eproto::offsets,
  file_level_metadata_proto_2futils_2fface_2eproto, 2, file_level_enum_descriptors_proto_2futils_2fface_2eproto, file_level_service_descriptors_proto_2futils_2fface_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2futils_2fface_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_2futils_2fface_2eproto), true);

// ===================================================================

void Face::InitAsDefaultInstance() {
}
class Face::_Internal {
 public:
};

void Face::clear_identity() {
  identity_.Clear();
}
void Face::clear_age() {
  age_.Clear();
}
void Face::clear_gender() {
  gender_.Clear();
}
void Face::clear_ethnicity() {
  ethnicity_.Clear();
}
Face::Face()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Face)
}
Face::Face(const Face& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      identity_(from.identity_),
      age_(from.age_),
      gender_(from.gender_),
      ethnicity_(from.ethnicity_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Face)
}

void Face::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Face_proto_2futils_2fface_2eproto.base);
}

Face::~Face() {
  // @@protoc_insertion_point(destructor:Face)
  SharedDtor();
}

void Face::SharedDtor() {
}

void Face::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Face& Face::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Face_proto_2futils_2fface_2eproto.base);
  return *internal_default_instance();
}


void Face::Clear() {
// @@protoc_insertion_point(message_clear_start:Face)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  identity_.Clear();
  age_.Clear();
  gender_.Clear();
  ethnicity_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Face::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Tag identity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_identity(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated .Tag age = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_age(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated .Tag gender = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_gender(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated .Tag ethnicity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_ethnicity(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Face::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Face)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Tag identity = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_identity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Tag age = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_age()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Tag gender = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_gender()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Tag ethnicity = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_ethnicity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Face)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Face)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Face::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Face)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Tag identity = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->identity_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->identity(static_cast<int>(i)),
      output);
  }

  // repeated .Tag age = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->age_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->age(static_cast<int>(i)),
      output);
  }

  // repeated .Tag gender = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->gender_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->gender(static_cast<int>(i)),
      output);
  }

  // repeated .Tag ethnicity = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ethnicity_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->ethnicity(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Face)
}

::PROTOBUF_NAMESPACE_ID::uint8* Face::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Face)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Tag identity = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->identity_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->identity(static_cast<int>(i)), target);
  }

  // repeated .Tag age = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->age_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->age(static_cast<int>(i)), target);
  }

  // repeated .Tag gender = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->gender_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->gender(static_cast<int>(i)), target);
  }

  // repeated .Tag ethnicity = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ethnicity_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->ethnicity(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Face)
  return target;
}

size_t Face::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Face)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Tag identity = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->identity_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->identity(static_cast<int>(i)));
    }
  }

  // repeated .Tag age = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->age_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->age(static_cast<int>(i)));
    }
  }

  // repeated .Tag gender = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->gender_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->gender(static_cast<int>(i)));
    }
  }

  // repeated .Tag ethnicity = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->ethnicity_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->ethnicity(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Face::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Face)
  GOOGLE_DCHECK_NE(&from, this);
  const Face* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Face>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Face)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Face)
    MergeFrom(*source);
  }
}

void Face::MergeFrom(const Face& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Face)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  identity_.MergeFrom(from.identity_);
  age_.MergeFrom(from.age_);
  gender_.MergeFrom(from.gender_);
  ethnicity_.MergeFrom(from.ethnicity_);
}

void Face::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Face)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Face::CopyFrom(const Face& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Face)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Face::IsInitialized() const {
  return true;
}

void Face::InternalSwap(Face* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&identity_)->InternalSwap(CastToBase(&other->identity_));
  CastToBase(&age_)->InternalSwap(CastToBase(&other->age_));
  CastToBase(&gender_)->InternalSwap(CastToBase(&other->gender_));
  CastToBase(&ethnicity_)->InternalSwap(CastToBase(&other->ethnicity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Face::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FaceDetection::InitAsDefaultInstance() {
  ::_FaceDetection_default_instance_._instance.get_mutable()->box_ = const_cast< ::BoundingBox*>(
      ::BoundingBox::internal_default_instance());
  ::_FaceDetection_default_instance_._instance.get_mutable()->face_ = const_cast< ::Face*>(
      ::Face::internal_default_instance());
  ::_FaceDetection_default_instance_._instance.get_mutable()->embedding_ = const_cast< ::Embedding*>(
      ::Embedding::internal_default_instance());
}
class FaceDetection::_Internal {
 public:
  static const ::BoundingBox& box(const FaceDetection* msg);
  static const ::Face& face(const FaceDetection* msg);
  static const ::Embedding& embedding(const FaceDetection* msg);
};

const ::BoundingBox&
FaceDetection::_Internal::box(const FaceDetection* msg) {
  return *msg->box_;
}
const ::Face&
FaceDetection::_Internal::face(const FaceDetection* msg) {
  return *msg->face_;
}
const ::Embedding&
FaceDetection::_Internal::embedding(const FaceDetection* msg) {
  return *msg->embedding_;
}
void FaceDetection::clear_box() {
  if (GetArenaNoVirtual() == nullptr && box_ != nullptr) {
    delete box_;
  }
  box_ = nullptr;
}
void FaceDetection::clear_embedding() {
  if (GetArenaNoVirtual() == nullptr && embedding_ != nullptr) {
    delete embedding_;
  }
  embedding_ = nullptr;
}
FaceDetection::FaceDetection()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FaceDetection)
}
FaceDetection::FaceDetection(const FaceDetection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_box()) {
    box_ = new ::BoundingBox(*from.box_);
  } else {
    box_ = nullptr;
  }
  if (from.has_face()) {
    face_ = new ::Face(*from.face_);
  } else {
    face_ = nullptr;
  }
  if (from.has_embedding()) {
    embedding_ = new ::Embedding(*from.embedding_);
  } else {
    embedding_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:FaceDetection)
}

void FaceDetection::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FaceDetection_proto_2futils_2fface_2eproto.base);
  ::memset(&box_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&embedding_) -
      reinterpret_cast<char*>(&box_)) + sizeof(embedding_));
}

FaceDetection::~FaceDetection() {
  // @@protoc_insertion_point(destructor:FaceDetection)
  SharedDtor();
}

void FaceDetection::SharedDtor() {
  if (this != internal_default_instance()) delete box_;
  if (this != internal_default_instance()) delete face_;
  if (this != internal_default_instance()) delete embedding_;
}

void FaceDetection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FaceDetection& FaceDetection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FaceDetection_proto_2futils_2fface_2eproto.base);
  return *internal_default_instance();
}


void FaceDetection::Clear() {
// @@protoc_insertion_point(message_clear_start:FaceDetection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && box_ != nullptr) {
    delete box_;
  }
  box_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && face_ != nullptr) {
    delete face_;
  }
  face_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && embedding_ != nullptr) {
    delete embedding_;
  }
  embedding_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FaceDetection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .BoundingBox box = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_box(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Face face = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_face(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Embedding embedding = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_embedding(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FaceDetection::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:FaceDetection)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .BoundingBox box = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_box()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Face face = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_face()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Embedding embedding = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_embedding()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FaceDetection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FaceDetection)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FaceDetection::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FaceDetection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BoundingBox box = 1;
  if (this->has_box()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::box(this), output);
  }

  // .Face face = 2;
  if (this->has_face()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::face(this), output);
  }

  // .Embedding embedding = 3;
  if (this->has_embedding()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::embedding(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FaceDetection)
}

::PROTOBUF_NAMESPACE_ID::uint8* FaceDetection::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FaceDetection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BoundingBox box = 1;
  if (this->has_box()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::box(this), target);
  }

  // .Face face = 2;
  if (this->has_face()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::face(this), target);
  }

  // .Embedding embedding = 3;
  if (this->has_embedding()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::embedding(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FaceDetection)
  return target;
}

size_t FaceDetection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FaceDetection)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .BoundingBox box = 1;
  if (this->has_box()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *box_);
  }

  // .Face face = 2;
  if (this->has_face()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *face_);
  }

  // .Embedding embedding = 3;
  if (this->has_embedding()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *embedding_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FaceDetection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FaceDetection)
  GOOGLE_DCHECK_NE(&from, this);
  const FaceDetection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FaceDetection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FaceDetection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FaceDetection)
    MergeFrom(*source);
  }
}

void FaceDetection::MergeFrom(const FaceDetection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FaceDetection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_box()) {
    mutable_box()->::BoundingBox::MergeFrom(from.box());
  }
  if (from.has_face()) {
    mutable_face()->::Face::MergeFrom(from.face());
  }
  if (from.has_embedding()) {
    mutable_embedding()->::Embedding::MergeFrom(from.embedding());
  }
}

void FaceDetection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FaceDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceDetection::CopyFrom(const FaceDetection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FaceDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceDetection::IsInitialized() const {
  return true;
}

void FaceDetection::InternalSwap(FaceDetection* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(box_, other->box_);
  swap(face_, other->face_);
  swap(embedding_, other->embedding_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FaceDetection::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Face* Arena::CreateMaybeMessage< ::Face >(Arena* arena) {
  return Arena::CreateInternal< ::Face >(arena);
}
template<> PROTOBUF_NOINLINE ::FaceDetection* Arena::CreateMaybeMessage< ::FaceDetection >(Arena* arena) {
  return Arena::CreateInternal< ::FaceDetection >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
