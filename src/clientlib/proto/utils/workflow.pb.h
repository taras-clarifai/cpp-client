// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/utils/workflow.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2futils_2fworkflow_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2futils_2fworkflow_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fworkflow_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2futils_2fworkflow_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2futils_2fworkflow_2eproto;
class ModelVersion;
class ModelVersionDefaultTypeInternal;
extern ModelVersionDefaultTypeInternal _ModelVersion_default_instance_;
class WorkflowComputationHint;
class WorkflowComputationHintDefaultTypeInternal;
extern WorkflowComputationHintDefaultTypeInternal _WorkflowComputationHint_default_instance_;
class WorkflowGraph;
class WorkflowGraphDefaultTypeInternal;
extern WorkflowGraphDefaultTypeInternal _WorkflowGraph_default_instance_;
class WorkflowInput;
class WorkflowInputDefaultTypeInternal;
extern WorkflowInputDefaultTypeInternal _WorkflowInput_default_instance_;
class WorkflowNode;
class WorkflowNodeDefaultTypeInternal;
extern WorkflowNodeDefaultTypeInternal _WorkflowNode_default_instance_;
class WorkflowRecipe;
class WorkflowRecipeDefaultTypeInternal;
extern WorkflowRecipeDefaultTypeInternal _WorkflowRecipe_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ModelVersion* Arena::CreateMaybeMessage<::ModelVersion>(Arena*);
template<> ::WorkflowComputationHint* Arena::CreateMaybeMessage<::WorkflowComputationHint>(Arena*);
template<> ::WorkflowGraph* Arena::CreateMaybeMessage<::WorkflowGraph>(Arena*);
template<> ::WorkflowInput* Arena::CreateMaybeMessage<::WorkflowInput>(Arena*);
template<> ::WorkflowNode* Arena::CreateMaybeMessage<::WorkflowNode>(Arena*);
template<> ::WorkflowRecipe* Arena::CreateMaybeMessage<::WorkflowRecipe>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class WorkflowGraph :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WorkflowGraph) */ {
 public:
  WorkflowGraph();
  virtual ~WorkflowGraph();

  WorkflowGraph(const WorkflowGraph& from);
  WorkflowGraph(WorkflowGraph&& from) noexcept
    : WorkflowGraph() {
    *this = ::std::move(from);
  }

  inline WorkflowGraph& operator=(const WorkflowGraph& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkflowGraph& operator=(WorkflowGraph&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorkflowGraph& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkflowGraph* internal_default_instance() {
    return reinterpret_cast<const WorkflowGraph*>(
               &_WorkflowGraph_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WorkflowGraph& a, WorkflowGraph& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkflowGraph* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorkflowGraph* New() const final {
    return CreateMaybeMessage<WorkflowGraph>(nullptr);
  }

  WorkflowGraph* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorkflowGraph>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorkflowGraph& from);
  void MergeFrom(const WorkflowGraph& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkflowGraph* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WorkflowGraph";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fworkflow_2eproto);
    return ::descriptor_table_proto_2futils_2fworkflow_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeFieldNumber = 1,
    kHintFieldNumber = 5,
  };
  // repeated .WorkflowNode node = 1;
  int node_size() const;
  void clear_node();
  ::WorkflowNode* mutable_node(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WorkflowNode >*
      mutable_node();
  const ::WorkflowNode& node(int index) const;
  ::WorkflowNode* add_node();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WorkflowNode >&
      node() const;

  // repeated .WorkflowComputationHint hint = 5;
  int hint_size() const;
  void clear_hint();
  ::WorkflowComputationHint* mutable_hint(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WorkflowComputationHint >*
      mutable_hint();
  const ::WorkflowComputationHint& hint(int index) const;
  ::WorkflowComputationHint* add_hint();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WorkflowComputationHint >&
      hint() const;

  // @@protoc_insertion_point(class_scope:WorkflowGraph)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WorkflowNode > node_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WorkflowComputationHint > hint_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2fworkflow_2eproto;
};
// -------------------------------------------------------------------

class ModelVersion :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ModelVersion) */ {
 public:
  ModelVersion();
  virtual ~ModelVersion();

  ModelVersion(const ModelVersion& from);
  ModelVersion(ModelVersion&& from) noexcept
    : ModelVersion() {
    *this = ::std::move(from);
  }

  inline ModelVersion& operator=(const ModelVersion& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelVersion& operator=(ModelVersion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModelVersion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModelVersion* internal_default_instance() {
    return reinterpret_cast<const ModelVersion*>(
               &_ModelVersion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ModelVersion& a, ModelVersion& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelVersion* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModelVersion* New() const final {
    return CreateMaybeMessage<ModelVersion>(nullptr);
  }

  ModelVersion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModelVersion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModelVersion& from);
  void MergeFrom(const ModelVersion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelVersion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ModelVersion";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fworkflow_2eproto);
    return ::descriptor_table_proto_2futils_2fworkflow_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelIdFieldNumber = 1,
    kVersionIdFieldNumber = 2,
  };
  // string model_id = 1;
  void clear_model_id();
  const std::string& model_id() const;
  void set_model_id(const std::string& value);
  void set_model_id(std::string&& value);
  void set_model_id(const char* value);
  void set_model_id(const char* value, size_t size);
  std::string* mutable_model_id();
  std::string* release_model_id();
  void set_allocated_model_id(std::string* model_id);

  // string version_id = 2;
  void clear_version_id();
  const std::string& version_id() const;
  void set_version_id(const std::string& value);
  void set_version_id(std::string&& value);
  void set_version_id(const char* value);
  void set_version_id(const char* value, size_t size);
  std::string* mutable_version_id();
  std::string* release_version_id();
  void set_allocated_version_id(std::string* version_id);

  // @@protoc_insertion_point(class_scope:ModelVersion)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2fworkflow_2eproto;
};
// -------------------------------------------------------------------

class WorkflowNode :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WorkflowNode) */ {
 public:
  WorkflowNode();
  virtual ~WorkflowNode();

  WorkflowNode(const WorkflowNode& from);
  WorkflowNode(WorkflowNode&& from) noexcept
    : WorkflowNode() {
    *this = ::std::move(from);
  }

  inline WorkflowNode& operator=(const WorkflowNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkflowNode& operator=(WorkflowNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorkflowNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkflowNode* internal_default_instance() {
    return reinterpret_cast<const WorkflowNode*>(
               &_WorkflowNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(WorkflowNode& a, WorkflowNode& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkflowNode* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorkflowNode* New() const final {
    return CreateMaybeMessage<WorkflowNode>(nullptr);
  }

  WorkflowNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorkflowNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorkflowNode& from);
  void MergeFrom(const WorkflowNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkflowNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WorkflowNode";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fworkflow_2eproto);
    return ::descriptor_table_proto_2futils_2fworkflow_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputFieldNumber = 3,
    kIdFieldNumber = 1,
    kDisplayNameFieldNumber = 4,
    kGroupIdFieldNumber = 5,
    kModelVersionFieldNumber = 2,
    kHiddenFieldNumber = 6,
  };
  // repeated .WorkflowInput input = 3;
  int input_size() const;
  void clear_input();
  ::WorkflowInput* mutable_input(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WorkflowInput >*
      mutable_input();
  const ::WorkflowInput& input(int index) const;
  ::WorkflowInput* add_input();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WorkflowInput >&
      input() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // string display_name = 4;
  void clear_display_name();
  const std::string& display_name() const;
  void set_display_name(const std::string& value);
  void set_display_name(std::string&& value);
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  std::string* mutable_display_name();
  std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);

  // string group_id = 5;
  void clear_group_id();
  const std::string& group_id() const;
  void set_group_id(const std::string& value);
  void set_group_id(std::string&& value);
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  std::string* mutable_group_id();
  std::string* release_group_id();
  void set_allocated_group_id(std::string* group_id);

  // .ModelVersion model_version = 2;
  bool has_model_version() const;
  void clear_model_version();
  const ::ModelVersion& model_version() const;
  ::ModelVersion* release_model_version();
  ::ModelVersion* mutable_model_version();
  void set_allocated_model_version(::ModelVersion* model_version);

  // bool hidden = 6;
  void clear_hidden();
  bool hidden() const;
  void set_hidden(bool value);

  // @@protoc_insertion_point(class_scope:WorkflowNode)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WorkflowInput > input_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_id_;
  ::ModelVersion* model_version_;
  bool hidden_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2fworkflow_2eproto;
};
// -------------------------------------------------------------------

class WorkflowInput :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WorkflowInput) */ {
 public:
  WorkflowInput();
  virtual ~WorkflowInput();

  WorkflowInput(const WorkflowInput& from);
  WorkflowInput(WorkflowInput&& from) noexcept
    : WorkflowInput() {
    *this = ::std::move(from);
  }

  inline WorkflowInput& operator=(const WorkflowInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkflowInput& operator=(WorkflowInput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorkflowInput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkflowInput* internal_default_instance() {
    return reinterpret_cast<const WorkflowInput*>(
               &_WorkflowInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(WorkflowInput& a, WorkflowInput& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkflowInput* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorkflowInput* New() const final {
    return CreateMaybeMessage<WorkflowInput>(nullptr);
  }

  WorkflowInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorkflowInput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorkflowInput& from);
  void MergeFrom(const WorkflowInput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkflowInput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WorkflowInput";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fworkflow_2eproto);
    return ::descriptor_table_proto_2futils_2fworkflow_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeIdFieldNumber = 1,
    kOutputFieldNumber = 2,
  };
  // string node_id = 1;
  void clear_node_id();
  const std::string& node_id() const;
  void set_node_id(const std::string& value);
  void set_node_id(std::string&& value);
  void set_node_id(const char* value);
  void set_node_id(const char* value, size_t size);
  std::string* mutable_node_id();
  std::string* release_node_id();
  void set_allocated_node_id(std::string* node_id);

  // string output = 2;
  void clear_output();
  const std::string& output() const;
  void set_output(const std::string& value);
  void set_output(std::string&& value);
  void set_output(const char* value);
  void set_output(const char* value, size_t size);
  std::string* mutable_output();
  std::string* release_output();
  void set_allocated_output(std::string* output);

  // @@protoc_insertion_point(class_scope:WorkflowInput)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2fworkflow_2eproto;
};
// -------------------------------------------------------------------

class WorkflowComputationHint :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WorkflowComputationHint) */ {
 public:
  WorkflowComputationHint();
  virtual ~WorkflowComputationHint();

  WorkflowComputationHint(const WorkflowComputationHint& from);
  WorkflowComputationHint(WorkflowComputationHint&& from) noexcept
    : WorkflowComputationHint() {
    *this = ::std::move(from);
  }

  inline WorkflowComputationHint& operator=(const WorkflowComputationHint& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkflowComputationHint& operator=(WorkflowComputationHint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorkflowComputationHint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkflowComputationHint* internal_default_instance() {
    return reinterpret_cast<const WorkflowComputationHint*>(
               &_WorkflowComputationHint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(WorkflowComputationHint& a, WorkflowComputationHint& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkflowComputationHint* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorkflowComputationHint* New() const final {
    return CreateMaybeMessage<WorkflowComputationHint>(nullptr);
  }

  WorkflowComputationHint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorkflowComputationHint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorkflowComputationHint& from);
  void MergeFrom(const WorkflowComputationHint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkflowComputationHint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WorkflowComputationHint";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fworkflow_2eproto);
    return ::descriptor_table_proto_2futils_2fworkflow_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeIdFieldNumber = 1,
    kAlreadyPredictedFieldNumber = 2,
  };
  // string node_id = 1;
  void clear_node_id();
  const std::string& node_id() const;
  void set_node_id(const std::string& value);
  void set_node_id(std::string&& value);
  void set_node_id(const char* value);
  void set_node_id(const char* value, size_t size);
  std::string* mutable_node_id();
  std::string* release_node_id();
  void set_allocated_node_id(std::string* node_id);

  // bool already_predicted = 2;
  void clear_already_predicted();
  bool already_predicted() const;
  void set_already_predicted(bool value);

  // @@protoc_insertion_point(class_scope:WorkflowComputationHint)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_id_;
  bool already_predicted_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2fworkflow_2eproto;
};
// -------------------------------------------------------------------

class WorkflowRecipe :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WorkflowRecipe) */ {
 public:
  WorkflowRecipe();
  virtual ~WorkflowRecipe();

  WorkflowRecipe(const WorkflowRecipe& from);
  WorkflowRecipe(WorkflowRecipe&& from) noexcept
    : WorkflowRecipe() {
    *this = ::std::move(from);
  }

  inline WorkflowRecipe& operator=(const WorkflowRecipe& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkflowRecipe& operator=(WorkflowRecipe&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorkflowRecipe& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkflowRecipe* internal_default_instance() {
    return reinterpret_cast<const WorkflowRecipe*>(
               &_WorkflowRecipe_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(WorkflowRecipe& a, WorkflowRecipe& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkflowRecipe* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorkflowRecipe* New() const final {
    return CreateMaybeMessage<WorkflowRecipe>(nullptr);
  }

  WorkflowRecipe* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorkflowRecipe>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorkflowRecipe& from);
  void MergeFrom(const WorkflowRecipe& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkflowRecipe* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WorkflowRecipe";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fworkflow_2eproto);
    return ::descriptor_table_proto_2futils_2fworkflow_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeIdsFieldNumber = 4,
    kHintFieldNumber = 5,
    kIdFieldNumber = 1,
    kOpFieldNumber = 2,
    kDisplayNameFieldNumber = 3,
    kDefaultFieldNumber = 6,
  };
  // repeated string node_ids = 4;
  int node_ids_size() const;
  void clear_node_ids();
  const std::string& node_ids(int index) const;
  std::string* mutable_node_ids(int index);
  void set_node_ids(int index, const std::string& value);
  void set_node_ids(int index, std::string&& value);
  void set_node_ids(int index, const char* value);
  void set_node_ids(int index, const char* value, size_t size);
  std::string* add_node_ids();
  void add_node_ids(const std::string& value);
  void add_node_ids(std::string&& value);
  void add_node_ids(const char* value);
  void add_node_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& node_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_node_ids();

  // repeated .WorkflowComputationHint hint = 5;
  int hint_size() const;
  void clear_hint();
  ::WorkflowComputationHint* mutable_hint(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WorkflowComputationHint >*
      mutable_hint();
  const ::WorkflowComputationHint& hint(int index) const;
  ::WorkflowComputationHint* add_hint();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WorkflowComputationHint >&
      hint() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // string op = 2;
  void clear_op();
  const std::string& op() const;
  void set_op(const std::string& value);
  void set_op(std::string&& value);
  void set_op(const char* value);
  void set_op(const char* value, size_t size);
  std::string* mutable_op();
  std::string* release_op();
  void set_allocated_op(std::string* op);

  // string display_name = 3;
  void clear_display_name();
  const std::string& display_name() const;
  void set_display_name(const std::string& value);
  void set_display_name(std::string&& value);
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  std::string* mutable_display_name();
  std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);

  // bool default = 6;
  void clear_default_();
  bool default_() const;
  void set_default_(bool value);

  // @@protoc_insertion_point(class_scope:WorkflowRecipe)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> node_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WorkflowComputationHint > hint_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr op_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
  bool default__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2fworkflow_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WorkflowGraph

// repeated .WorkflowNode node = 1;
inline int WorkflowGraph::node_size() const {
  return node_.size();
}
inline void WorkflowGraph::clear_node() {
  node_.Clear();
}
inline ::WorkflowNode* WorkflowGraph::mutable_node(int index) {
  // @@protoc_insertion_point(field_mutable:WorkflowGraph.node)
  return node_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WorkflowNode >*
WorkflowGraph::mutable_node() {
  // @@protoc_insertion_point(field_mutable_list:WorkflowGraph.node)
  return &node_;
}
inline const ::WorkflowNode& WorkflowGraph::node(int index) const {
  // @@protoc_insertion_point(field_get:WorkflowGraph.node)
  return node_.Get(index);
}
inline ::WorkflowNode* WorkflowGraph::add_node() {
  // @@protoc_insertion_point(field_add:WorkflowGraph.node)
  return node_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WorkflowNode >&
WorkflowGraph::node() const {
  // @@protoc_insertion_point(field_list:WorkflowGraph.node)
  return node_;
}

// repeated .WorkflowComputationHint hint = 5;
inline int WorkflowGraph::hint_size() const {
  return hint_.size();
}
inline void WorkflowGraph::clear_hint() {
  hint_.Clear();
}
inline ::WorkflowComputationHint* WorkflowGraph::mutable_hint(int index) {
  // @@protoc_insertion_point(field_mutable:WorkflowGraph.hint)
  return hint_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WorkflowComputationHint >*
WorkflowGraph::mutable_hint() {
  // @@protoc_insertion_point(field_mutable_list:WorkflowGraph.hint)
  return &hint_;
}
inline const ::WorkflowComputationHint& WorkflowGraph::hint(int index) const {
  // @@protoc_insertion_point(field_get:WorkflowGraph.hint)
  return hint_.Get(index);
}
inline ::WorkflowComputationHint* WorkflowGraph::add_hint() {
  // @@protoc_insertion_point(field_add:WorkflowGraph.hint)
  return hint_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WorkflowComputationHint >&
WorkflowGraph::hint() const {
  // @@protoc_insertion_point(field_list:WorkflowGraph.hint)
  return hint_;
}

// -------------------------------------------------------------------

// ModelVersion

// string model_id = 1;
inline void ModelVersion::clear_model_id() {
  model_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ModelVersion::model_id() const {
  // @@protoc_insertion_point(field_get:ModelVersion.model_id)
  return model_id_.GetNoArena();
}
inline void ModelVersion::set_model_id(const std::string& value) {
  
  model_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ModelVersion.model_id)
}
inline void ModelVersion::set_model_id(std::string&& value) {
  
  model_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ModelVersion.model_id)
}
inline void ModelVersion::set_model_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ModelVersion.model_id)
}
inline void ModelVersion::set_model_id(const char* value, size_t size) {
  
  model_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ModelVersion.model_id)
}
inline std::string* ModelVersion::mutable_model_id() {
  
  // @@protoc_insertion_point(field_mutable:ModelVersion.model_id)
  return model_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ModelVersion::release_model_id() {
  // @@protoc_insertion_point(field_release:ModelVersion.model_id)
  
  return model_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ModelVersion::set_allocated_model_id(std::string* model_id) {
  if (model_id != nullptr) {
    
  } else {
    
  }
  model_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_id);
  // @@protoc_insertion_point(field_set_allocated:ModelVersion.model_id)
}

// string version_id = 2;
inline void ModelVersion::clear_version_id() {
  version_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ModelVersion::version_id() const {
  // @@protoc_insertion_point(field_get:ModelVersion.version_id)
  return version_id_.GetNoArena();
}
inline void ModelVersion::set_version_id(const std::string& value) {
  
  version_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ModelVersion.version_id)
}
inline void ModelVersion::set_version_id(std::string&& value) {
  
  version_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ModelVersion.version_id)
}
inline void ModelVersion::set_version_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ModelVersion.version_id)
}
inline void ModelVersion::set_version_id(const char* value, size_t size) {
  
  version_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ModelVersion.version_id)
}
inline std::string* ModelVersion::mutable_version_id() {
  
  // @@protoc_insertion_point(field_mutable:ModelVersion.version_id)
  return version_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ModelVersion::release_version_id() {
  // @@protoc_insertion_point(field_release:ModelVersion.version_id)
  
  return version_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ModelVersion::set_allocated_version_id(std::string* version_id) {
  if (version_id != nullptr) {
    
  } else {
    
  }
  version_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version_id);
  // @@protoc_insertion_point(field_set_allocated:ModelVersion.version_id)
}

// -------------------------------------------------------------------

// WorkflowNode

// string id = 1;
inline void WorkflowNode::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WorkflowNode::id() const {
  // @@protoc_insertion_point(field_get:WorkflowNode.id)
  return id_.GetNoArena();
}
inline void WorkflowNode::set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WorkflowNode.id)
}
inline void WorkflowNode::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:WorkflowNode.id)
}
inline void WorkflowNode::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WorkflowNode.id)
}
inline void WorkflowNode::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WorkflowNode.id)
}
inline std::string* WorkflowNode::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:WorkflowNode.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WorkflowNode::release_id() {
  // @@protoc_insertion_point(field_release:WorkflowNode.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WorkflowNode::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:WorkflowNode.id)
}

// .ModelVersion model_version = 2;
inline bool WorkflowNode::has_model_version() const {
  return this != internal_default_instance() && model_version_ != nullptr;
}
inline void WorkflowNode::clear_model_version() {
  if (GetArenaNoVirtual() == nullptr && model_version_ != nullptr) {
    delete model_version_;
  }
  model_version_ = nullptr;
}
inline const ::ModelVersion& WorkflowNode::model_version() const {
  const ::ModelVersion* p = model_version_;
  // @@protoc_insertion_point(field_get:WorkflowNode.model_version)
  return p != nullptr ? *p : *reinterpret_cast<const ::ModelVersion*>(
      &::_ModelVersion_default_instance_);
}
inline ::ModelVersion* WorkflowNode::release_model_version() {
  // @@protoc_insertion_point(field_release:WorkflowNode.model_version)
  
  ::ModelVersion* temp = model_version_;
  model_version_ = nullptr;
  return temp;
}
inline ::ModelVersion* WorkflowNode::mutable_model_version() {
  
  if (model_version_ == nullptr) {
    auto* p = CreateMaybeMessage<::ModelVersion>(GetArenaNoVirtual());
    model_version_ = p;
  }
  // @@protoc_insertion_point(field_mutable:WorkflowNode.model_version)
  return model_version_;
}
inline void WorkflowNode::set_allocated_model_version(::ModelVersion* model_version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete model_version_;
  }
  if (model_version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      model_version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model_version, submessage_arena);
    }
    
  } else {
    
  }
  model_version_ = model_version;
  // @@protoc_insertion_point(field_set_allocated:WorkflowNode.model_version)
}

// repeated .WorkflowInput input = 3;
inline int WorkflowNode::input_size() const {
  return input_.size();
}
inline void WorkflowNode::clear_input() {
  input_.Clear();
}
inline ::WorkflowInput* WorkflowNode::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:WorkflowNode.input)
  return input_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WorkflowInput >*
WorkflowNode::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:WorkflowNode.input)
  return &input_;
}
inline const ::WorkflowInput& WorkflowNode::input(int index) const {
  // @@protoc_insertion_point(field_get:WorkflowNode.input)
  return input_.Get(index);
}
inline ::WorkflowInput* WorkflowNode::add_input() {
  // @@protoc_insertion_point(field_add:WorkflowNode.input)
  return input_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WorkflowInput >&
WorkflowNode::input() const {
  // @@protoc_insertion_point(field_list:WorkflowNode.input)
  return input_;
}

// string display_name = 4;
inline void WorkflowNode::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WorkflowNode::display_name() const {
  // @@protoc_insertion_point(field_get:WorkflowNode.display_name)
  return display_name_.GetNoArena();
}
inline void WorkflowNode::set_display_name(const std::string& value) {
  
  display_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WorkflowNode.display_name)
}
inline void WorkflowNode::set_display_name(std::string&& value) {
  
  display_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:WorkflowNode.display_name)
}
inline void WorkflowNode::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  display_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WorkflowNode.display_name)
}
inline void WorkflowNode::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WorkflowNode.display_name)
}
inline std::string* WorkflowNode::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:WorkflowNode.display_name)
  return display_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WorkflowNode::release_display_name() {
  // @@protoc_insertion_point(field_release:WorkflowNode.display_name)
  
  return display_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WorkflowNode::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:WorkflowNode.display_name)
}

// string group_id = 5;
inline void WorkflowNode::clear_group_id() {
  group_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WorkflowNode::group_id() const {
  // @@protoc_insertion_point(field_get:WorkflowNode.group_id)
  return group_id_.GetNoArena();
}
inline void WorkflowNode::set_group_id(const std::string& value) {
  
  group_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WorkflowNode.group_id)
}
inline void WorkflowNode::set_group_id(std::string&& value) {
  
  group_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:WorkflowNode.group_id)
}
inline void WorkflowNode::set_group_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WorkflowNode.group_id)
}
inline void WorkflowNode::set_group_id(const char* value, size_t size) {
  
  group_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WorkflowNode.group_id)
}
inline std::string* WorkflowNode::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:WorkflowNode.group_id)
  return group_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WorkflowNode::release_group_id() {
  // @@protoc_insertion_point(field_release:WorkflowNode.group_id)
  
  return group_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WorkflowNode::set_allocated_group_id(std::string* group_id) {
  if (group_id != nullptr) {
    
  } else {
    
  }
  group_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group_id);
  // @@protoc_insertion_point(field_set_allocated:WorkflowNode.group_id)
}

// bool hidden = 6;
inline void WorkflowNode::clear_hidden() {
  hidden_ = false;
}
inline bool WorkflowNode::hidden() const {
  // @@protoc_insertion_point(field_get:WorkflowNode.hidden)
  return hidden_;
}
inline void WorkflowNode::set_hidden(bool value) {
  
  hidden_ = value;
  // @@protoc_insertion_point(field_set:WorkflowNode.hidden)
}

// -------------------------------------------------------------------

// WorkflowInput

// string node_id = 1;
inline void WorkflowInput::clear_node_id() {
  node_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WorkflowInput::node_id() const {
  // @@protoc_insertion_point(field_get:WorkflowInput.node_id)
  return node_id_.GetNoArena();
}
inline void WorkflowInput::set_node_id(const std::string& value) {
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WorkflowInput.node_id)
}
inline void WorkflowInput::set_node_id(std::string&& value) {
  
  node_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:WorkflowInput.node_id)
}
inline void WorkflowInput::set_node_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WorkflowInput.node_id)
}
inline void WorkflowInput::set_node_id(const char* value, size_t size) {
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WorkflowInput.node_id)
}
inline std::string* WorkflowInput::mutable_node_id() {
  
  // @@protoc_insertion_point(field_mutable:WorkflowInput.node_id)
  return node_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WorkflowInput::release_node_id() {
  // @@protoc_insertion_point(field_release:WorkflowInput.node_id)
  
  return node_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WorkflowInput::set_allocated_node_id(std::string* node_id) {
  if (node_id != nullptr) {
    
  } else {
    
  }
  node_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_id);
  // @@protoc_insertion_point(field_set_allocated:WorkflowInput.node_id)
}

// string output = 2;
inline void WorkflowInput::clear_output() {
  output_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WorkflowInput::output() const {
  // @@protoc_insertion_point(field_get:WorkflowInput.output)
  return output_.GetNoArena();
}
inline void WorkflowInput::set_output(const std::string& value) {
  
  output_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WorkflowInput.output)
}
inline void WorkflowInput::set_output(std::string&& value) {
  
  output_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:WorkflowInput.output)
}
inline void WorkflowInput::set_output(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  output_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WorkflowInput.output)
}
inline void WorkflowInput::set_output(const char* value, size_t size) {
  
  output_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WorkflowInput.output)
}
inline std::string* WorkflowInput::mutable_output() {
  
  // @@protoc_insertion_point(field_mutable:WorkflowInput.output)
  return output_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WorkflowInput::release_output() {
  // @@protoc_insertion_point(field_release:WorkflowInput.output)
  
  return output_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WorkflowInput::set_allocated_output(std::string* output) {
  if (output != nullptr) {
    
  } else {
    
  }
  output_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output);
  // @@protoc_insertion_point(field_set_allocated:WorkflowInput.output)
}

// -------------------------------------------------------------------

// WorkflowComputationHint

// string node_id = 1;
inline void WorkflowComputationHint::clear_node_id() {
  node_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WorkflowComputationHint::node_id() const {
  // @@protoc_insertion_point(field_get:WorkflowComputationHint.node_id)
  return node_id_.GetNoArena();
}
inline void WorkflowComputationHint::set_node_id(const std::string& value) {
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WorkflowComputationHint.node_id)
}
inline void WorkflowComputationHint::set_node_id(std::string&& value) {
  
  node_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:WorkflowComputationHint.node_id)
}
inline void WorkflowComputationHint::set_node_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WorkflowComputationHint.node_id)
}
inline void WorkflowComputationHint::set_node_id(const char* value, size_t size) {
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WorkflowComputationHint.node_id)
}
inline std::string* WorkflowComputationHint::mutable_node_id() {
  
  // @@protoc_insertion_point(field_mutable:WorkflowComputationHint.node_id)
  return node_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WorkflowComputationHint::release_node_id() {
  // @@protoc_insertion_point(field_release:WorkflowComputationHint.node_id)
  
  return node_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WorkflowComputationHint::set_allocated_node_id(std::string* node_id) {
  if (node_id != nullptr) {
    
  } else {
    
  }
  node_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_id);
  // @@protoc_insertion_point(field_set_allocated:WorkflowComputationHint.node_id)
}

// bool already_predicted = 2;
inline void WorkflowComputationHint::clear_already_predicted() {
  already_predicted_ = false;
}
inline bool WorkflowComputationHint::already_predicted() const {
  // @@protoc_insertion_point(field_get:WorkflowComputationHint.already_predicted)
  return already_predicted_;
}
inline void WorkflowComputationHint::set_already_predicted(bool value) {
  
  already_predicted_ = value;
  // @@protoc_insertion_point(field_set:WorkflowComputationHint.already_predicted)
}

// -------------------------------------------------------------------

// WorkflowRecipe

// string id = 1;
inline void WorkflowRecipe::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WorkflowRecipe::id() const {
  // @@protoc_insertion_point(field_get:WorkflowRecipe.id)
  return id_.GetNoArena();
}
inline void WorkflowRecipe::set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WorkflowRecipe.id)
}
inline void WorkflowRecipe::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:WorkflowRecipe.id)
}
inline void WorkflowRecipe::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WorkflowRecipe.id)
}
inline void WorkflowRecipe::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WorkflowRecipe.id)
}
inline std::string* WorkflowRecipe::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:WorkflowRecipe.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WorkflowRecipe::release_id() {
  // @@protoc_insertion_point(field_release:WorkflowRecipe.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WorkflowRecipe::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:WorkflowRecipe.id)
}

// string op = 2;
inline void WorkflowRecipe::clear_op() {
  op_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WorkflowRecipe::op() const {
  // @@protoc_insertion_point(field_get:WorkflowRecipe.op)
  return op_.GetNoArena();
}
inline void WorkflowRecipe::set_op(const std::string& value) {
  
  op_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WorkflowRecipe.op)
}
inline void WorkflowRecipe::set_op(std::string&& value) {
  
  op_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:WorkflowRecipe.op)
}
inline void WorkflowRecipe::set_op(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  op_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WorkflowRecipe.op)
}
inline void WorkflowRecipe::set_op(const char* value, size_t size) {
  
  op_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WorkflowRecipe.op)
}
inline std::string* WorkflowRecipe::mutable_op() {
  
  // @@protoc_insertion_point(field_mutable:WorkflowRecipe.op)
  return op_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WorkflowRecipe::release_op() {
  // @@protoc_insertion_point(field_release:WorkflowRecipe.op)
  
  return op_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WorkflowRecipe::set_allocated_op(std::string* op) {
  if (op != nullptr) {
    
  } else {
    
  }
  op_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), op);
  // @@protoc_insertion_point(field_set_allocated:WorkflowRecipe.op)
}

// string display_name = 3;
inline void WorkflowRecipe::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WorkflowRecipe::display_name() const {
  // @@protoc_insertion_point(field_get:WorkflowRecipe.display_name)
  return display_name_.GetNoArena();
}
inline void WorkflowRecipe::set_display_name(const std::string& value) {
  
  display_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WorkflowRecipe.display_name)
}
inline void WorkflowRecipe::set_display_name(std::string&& value) {
  
  display_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:WorkflowRecipe.display_name)
}
inline void WorkflowRecipe::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  display_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WorkflowRecipe.display_name)
}
inline void WorkflowRecipe::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WorkflowRecipe.display_name)
}
inline std::string* WorkflowRecipe::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:WorkflowRecipe.display_name)
  return display_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WorkflowRecipe::release_display_name() {
  // @@protoc_insertion_point(field_release:WorkflowRecipe.display_name)
  
  return display_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WorkflowRecipe::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:WorkflowRecipe.display_name)
}

// repeated string node_ids = 4;
inline int WorkflowRecipe::node_ids_size() const {
  return node_ids_.size();
}
inline void WorkflowRecipe::clear_node_ids() {
  node_ids_.Clear();
}
inline const std::string& WorkflowRecipe::node_ids(int index) const {
  // @@protoc_insertion_point(field_get:WorkflowRecipe.node_ids)
  return node_ids_.Get(index);
}
inline std::string* WorkflowRecipe::mutable_node_ids(int index) {
  // @@protoc_insertion_point(field_mutable:WorkflowRecipe.node_ids)
  return node_ids_.Mutable(index);
}
inline void WorkflowRecipe::set_node_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:WorkflowRecipe.node_ids)
  node_ids_.Mutable(index)->assign(value);
}
inline void WorkflowRecipe::set_node_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:WorkflowRecipe.node_ids)
  node_ids_.Mutable(index)->assign(std::move(value));
}
inline void WorkflowRecipe::set_node_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  node_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:WorkflowRecipe.node_ids)
}
inline void WorkflowRecipe::set_node_ids(int index, const char* value, size_t size) {
  node_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:WorkflowRecipe.node_ids)
}
inline std::string* WorkflowRecipe::add_node_ids() {
  // @@protoc_insertion_point(field_add_mutable:WorkflowRecipe.node_ids)
  return node_ids_.Add();
}
inline void WorkflowRecipe::add_node_ids(const std::string& value) {
  node_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:WorkflowRecipe.node_ids)
}
inline void WorkflowRecipe::add_node_ids(std::string&& value) {
  node_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:WorkflowRecipe.node_ids)
}
inline void WorkflowRecipe::add_node_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  node_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:WorkflowRecipe.node_ids)
}
inline void WorkflowRecipe::add_node_ids(const char* value, size_t size) {
  node_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:WorkflowRecipe.node_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
WorkflowRecipe::node_ids() const {
  // @@protoc_insertion_point(field_list:WorkflowRecipe.node_ids)
  return node_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
WorkflowRecipe::mutable_node_ids() {
  // @@protoc_insertion_point(field_mutable_list:WorkflowRecipe.node_ids)
  return &node_ids_;
}

// repeated .WorkflowComputationHint hint = 5;
inline int WorkflowRecipe::hint_size() const {
  return hint_.size();
}
inline void WorkflowRecipe::clear_hint() {
  hint_.Clear();
}
inline ::WorkflowComputationHint* WorkflowRecipe::mutable_hint(int index) {
  // @@protoc_insertion_point(field_mutable:WorkflowRecipe.hint)
  return hint_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WorkflowComputationHint >*
WorkflowRecipe::mutable_hint() {
  // @@protoc_insertion_point(field_mutable_list:WorkflowRecipe.hint)
  return &hint_;
}
inline const ::WorkflowComputationHint& WorkflowRecipe::hint(int index) const {
  // @@protoc_insertion_point(field_get:WorkflowRecipe.hint)
  return hint_.Get(index);
}
inline ::WorkflowComputationHint* WorkflowRecipe::add_hint() {
  // @@protoc_insertion_point(field_add:WorkflowRecipe.hint)
  return hint_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WorkflowComputationHint >&
WorkflowRecipe::hint() const {
  // @@protoc_insertion_point(field_list:WorkflowRecipe.hint)
  return hint_;
}

// bool default = 6;
inline void WorkflowRecipe::clear_default_() {
  default__ = false;
}
inline bool WorkflowRecipe::default_() const {
  // @@protoc_insertion_point(field_get:WorkflowRecipe.default)
  return default__;
}
inline void WorkflowRecipe::set_default_(bool value) {
  
  default__ = value;
  // @@protoc_insertion_point(field_set:WorkflowRecipe.default)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2futils_2fworkflow_2eproto
