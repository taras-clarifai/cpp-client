// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/utils/lopq_code.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2futils_2flopq_5fcode_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2futils_2flopq_5fcode_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "proto/clarifai/api/utils/extensions.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2futils_2flopq_5fcode_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2futils_2flopq_5fcode_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2futils_2flopq_5fcode_2eproto;
class LOPQCode;
class LOPQCodeDefaultTypeInternal;
extern LOPQCodeDefaultTypeInternal _LOPQCode_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::LOPQCode* Arena::CreateMaybeMessage<::LOPQCode>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class LOPQCode :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LOPQCode) */ {
 public:
  LOPQCode();
  virtual ~LOPQCode();

  LOPQCode(const LOPQCode& from);
  LOPQCode(LOPQCode&& from) noexcept
    : LOPQCode() {
    *this = ::std::move(from);
  }

  inline LOPQCode& operator=(const LOPQCode& from) {
    CopyFrom(from);
    return *this;
  }
  inline LOPQCode& operator=(LOPQCode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LOPQCode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LOPQCode* internal_default_instance() {
    return reinterpret_cast<const LOPQCode*>(
               &_LOPQCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LOPQCode& a, LOPQCode& b) {
    a.Swap(&b);
  }
  inline void Swap(LOPQCode* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LOPQCode* New() const final {
    return CreateMaybeMessage<LOPQCode>(nullptr);
  }

  LOPQCode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LOPQCode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LOPQCode& from);
  void MergeFrom(const LOPQCode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LOPQCode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LOPQCode";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2flopq_5fcode_2eproto);
    return ::descriptor_table_proto_2futils_2flopq_5fcode_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectionFieldNumber = 3,
    kCoarseKeyFieldNumber = 1,
    kFineKeyFieldNumber = 2,
  };
  // repeated float projection = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int projection_size() const;
  void clear_projection();
  float projection(int index) const;
  void set_projection(int index, float value);
  void add_projection(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      projection() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_projection();

  // bytes coarse_key = 1;
  void clear_coarse_key();
  const std::string& coarse_key() const;
  void set_coarse_key(const std::string& value);
  void set_coarse_key(std::string&& value);
  void set_coarse_key(const char* value);
  void set_coarse_key(const void* value, size_t size);
  std::string* mutable_coarse_key();
  std::string* release_coarse_key();
  void set_allocated_coarse_key(std::string* coarse_key);

  // bytes fine_key = 2;
  void clear_fine_key();
  const std::string& fine_key() const;
  void set_fine_key(const std::string& value);
  void set_fine_key(std::string&& value);
  void set_fine_key(const char* value);
  void set_fine_key(const void* value, size_t size);
  std::string* mutable_fine_key();
  std::string* release_fine_key();
  void set_allocated_fine_key(std::string* fine_key);

  // @@protoc_insertion_point(class_scope:LOPQCode)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > projection_;
  mutable std::atomic<int> _projection_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr coarse_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fine_key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2flopq_5fcode_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LOPQCode

// bytes coarse_key = 1;
inline void LOPQCode::clear_coarse_key() {
  coarse_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LOPQCode::coarse_key() const {
  // @@protoc_insertion_point(field_get:LOPQCode.coarse_key)
  return coarse_key_.GetNoArena();
}
inline void LOPQCode::set_coarse_key(const std::string& value) {
  
  coarse_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LOPQCode.coarse_key)
}
inline void LOPQCode::set_coarse_key(std::string&& value) {
  
  coarse_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LOPQCode.coarse_key)
}
inline void LOPQCode::set_coarse_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  coarse_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LOPQCode.coarse_key)
}
inline void LOPQCode::set_coarse_key(const void* value, size_t size) {
  
  coarse_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LOPQCode.coarse_key)
}
inline std::string* LOPQCode::mutable_coarse_key() {
  
  // @@protoc_insertion_point(field_mutable:LOPQCode.coarse_key)
  return coarse_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LOPQCode::release_coarse_key() {
  // @@protoc_insertion_point(field_release:LOPQCode.coarse_key)
  
  return coarse_key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LOPQCode::set_allocated_coarse_key(std::string* coarse_key) {
  if (coarse_key != nullptr) {
    
  } else {
    
  }
  coarse_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), coarse_key);
  // @@protoc_insertion_point(field_set_allocated:LOPQCode.coarse_key)
}

// bytes fine_key = 2;
inline void LOPQCode::clear_fine_key() {
  fine_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LOPQCode::fine_key() const {
  // @@protoc_insertion_point(field_get:LOPQCode.fine_key)
  return fine_key_.GetNoArena();
}
inline void LOPQCode::set_fine_key(const std::string& value) {
  
  fine_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LOPQCode.fine_key)
}
inline void LOPQCode::set_fine_key(std::string&& value) {
  
  fine_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LOPQCode.fine_key)
}
inline void LOPQCode::set_fine_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fine_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LOPQCode.fine_key)
}
inline void LOPQCode::set_fine_key(const void* value, size_t size) {
  
  fine_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LOPQCode.fine_key)
}
inline std::string* LOPQCode::mutable_fine_key() {
  
  // @@protoc_insertion_point(field_mutable:LOPQCode.fine_key)
  return fine_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LOPQCode::release_fine_key() {
  // @@protoc_insertion_point(field_release:LOPQCode.fine_key)
  
  return fine_key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LOPQCode::set_allocated_fine_key(std::string* fine_key) {
  if (fine_key != nullptr) {
    
  } else {
    
  }
  fine_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fine_key);
  // @@protoc_insertion_point(field_set_allocated:LOPQCode.fine_key)
}

// repeated float projection = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int LOPQCode::projection_size() const {
  return projection_.size();
}
inline void LOPQCode::clear_projection() {
  projection_.Clear();
}
inline float LOPQCode::projection(int index) const {
  // @@protoc_insertion_point(field_get:LOPQCode.projection)
  return projection_.Get(index);
}
inline void LOPQCode::set_projection(int index, float value) {
  projection_.Set(index, value);
  // @@protoc_insertion_point(field_set:LOPQCode.projection)
}
inline void LOPQCode::add_projection(float value) {
  projection_.Add(value);
  // @@protoc_insertion_point(field_add:LOPQCode.projection)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
LOPQCode::projection() const {
  // @@protoc_insertion_point(field_list:LOPQCode.projection)
  return projection_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
LOPQCode::mutable_projection() {
  // @@protoc_insertion_point(field_mutable_list:LOPQCode.projection)
  return &projection_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2futils_2flopq_5fcode_2eproto
