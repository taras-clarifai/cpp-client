// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/utils/data_example.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2futils_2fdata_5fexample_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2futils_2fdata_5fexample_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "proto/utils/audio.pb.h"
#include "proto/utils/bbox.pb.h"
#include "proto/utils/boundingbox.pb.h"
#include "proto/utils/caption.pb.h"
#include "proto/utils/color_result.pb.h"
#include "proto/utils/embedding.pb.h"
#include "proto/utils/face.pb.h"
#include "proto/utils/geo.pb.h"
#include "proto/utils/image.pb.h"
#include "proto/utils/lopq_code.pb.h"
#include "proto/utils/point.pb.h"
#include "proto/utils/request_meta.pb.h"
#include "proto/utils/saved_output.pb.h"
#include "proto/utils/tag.pb.h"
#include "proto/utils/text.pb.h"
#include "proto/utils/video.pb.h"
#include "proto/clarifai/api/utils/extensions.pb.h"
#include <google/protobuf/descriptor.pb.h>
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/struct.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fdata_5fexample_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2futils_2fdata_5fexample_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2futils_2fdata_5fexample_2eproto;
class DataExample;
class DataExampleDefaultTypeInternal;
extern DataExampleDefaultTypeInternal _DataExample_default_instance_;
class DataExample_SavedOutputEntry_DoNotUse;
class DataExample_SavedOutputEntry_DoNotUseDefaultTypeInternal;
extern DataExample_SavedOutputEntry_DoNotUseDefaultTypeInternal _DataExample_SavedOutputEntry_DoNotUse_default_instance_;
class Region;
class RegionDefaultTypeInternal;
extern RegionDefaultTypeInternal _Region_default_instance_;
class Region_RegionInfo;
class Region_RegionInfoDefaultTypeInternal;
extern Region_RegionInfoDefaultTypeInternal _Region_RegionInfo_default_instance_;
class TimeFrame;
class TimeFrameDefaultTypeInternal;
extern TimeFrameDefaultTypeInternal _TimeFrame_default_instance_;
class TimeFrame_FrameInfo;
class TimeFrame_FrameInfoDefaultTypeInternal;
extern TimeFrame_FrameInfoDefaultTypeInternal _TimeFrame_FrameInfo_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::DataExample* Arena::CreateMaybeMessage<::DataExample>(Arena*);
template<> ::DataExample_SavedOutputEntry_DoNotUse* Arena::CreateMaybeMessage<::DataExample_SavedOutputEntry_DoNotUse>(Arena*);
template<> ::Region* Arena::CreateMaybeMessage<::Region>(Arena*);
template<> ::Region_RegionInfo* Arena::CreateMaybeMessage<::Region_RegionInfo>(Arena*);
template<> ::TimeFrame* Arena::CreateMaybeMessage<::TimeFrame>(Arena*);
template<> ::TimeFrame_FrameInfo* Arena::CreateMaybeMessage<::TimeFrame_FrameInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class DataExample_SavedOutputEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DataExample_SavedOutputEntry_DoNotUse, 
    std::string, ::SavedOutput,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DataExample_SavedOutputEntry_DoNotUse, 
    std::string, ::SavedOutput,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  DataExample_SavedOutputEntry_DoNotUse();
  DataExample_SavedOutputEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const DataExample_SavedOutputEntry_DoNotUse& other);
  static const DataExample_SavedOutputEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const DataExample_SavedOutputEntry_DoNotUse*>(&_DataExample_SavedOutputEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "DataExample.SavedOutputEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fdata_5fexample_2eproto);
    return ::descriptor_table_proto_2futils_2fdata_5fexample_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class DataExample :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DataExample) */ {
 public:
  DataExample();
  virtual ~DataExample();

  DataExample(const DataExample& from);
  DataExample(DataExample&& from) noexcept
    : DataExample() {
    *this = ::std::move(from);
  }

  inline DataExample& operator=(const DataExample& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataExample& operator=(DataExample&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataExample& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataExample* internal_default_instance() {
    return reinterpret_cast<const DataExample*>(
               &_DataExample_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DataExample& a, DataExample& b) {
    a.Swap(&b);
  }
  inline void Swap(DataExample* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataExample* New() const final {
    return CreateMaybeMessage<DataExample>(nullptr);
  }

  DataExample* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataExample>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataExample& from);
  void MergeFrom(const DataExample& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataExample* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DataExample";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fdata_5fexample_2eproto);
    return ::descriptor_table_proto_2futils_2fdata_5fexample_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kSavedOutputFieldNumber = 5,
    kEmbeddingFieldNumber = 6,
    kTagFieldNumber = 1000,
    kBboxFieldNumber = 1002,
    kCaptionFieldNumber = 1007,
    kRegionFieldNumber = 1008,
    kFaceFieldNumber = 1009,
    kLopqCodeFieldNumber = 1010,
    kFrameFieldNumber = 1013,
    kIdFieldNumber = 1,
    kJsonMetadataFieldNumber = 1003,
    kCfidFieldNumber = 1100,
    kHashFieldNumber = 1101,
    kAssetIdFieldNumber = 1102,
    kAssetCfidFieldNumber = 1103,
    kDatasetNameFieldNumber = 1105,
    kImageFieldNumber = 2,
    kVideoFieldNumber = 3,
    kImageSegmentFieldNumber = 7,
    kStatusFieldNumber = 999,
    kGeoFieldNumber = 1005,
    kColorResultFieldNumber = 1012,
    kTextFieldNumber = 1015,
    kMetadataFieldNumber = 1016,
    kAudioFieldNumber = 1017,
    kAnnotationInfoFieldNumber = 1104,
  };
  // map<string, .SavedOutput> saved_output = 5 [(.heavy) = true];
  int saved_output_size() const;
  void clear_saved_output();
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::SavedOutput >&
      saved_output() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::SavedOutput >*
      mutable_saved_output();

  // repeated .Embedding embedding = 6 [(.heavy) = true];
  int embedding_size() const;
  void clear_embedding();
  ::Embedding* mutable_embedding(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Embedding >*
      mutable_embedding();
  const ::Embedding& embedding(int index) const;
  ::Embedding* add_embedding();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Embedding >&
      embedding() const;

  // repeated .Tag tag = 1000 [(.heavy) = false];
  int tag_size() const;
  void clear_tag();
  ::Tag* mutable_tag(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tag >*
      mutable_tag();
  const ::Tag& tag(int index) const;
  ::Tag* add_tag();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tag >&
      tag() const;

  // repeated .BoundingBox bbox = 1002 [(.heavy) = false];
  int bbox_size() const;
  void clear_bbox();
  ::BoundingBox* mutable_bbox(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BoundingBox >*
      mutable_bbox();
  const ::BoundingBox& bbox(int index) const;
  ::BoundingBox* add_bbox();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BoundingBox >&
      bbox() const;

  // repeated .Caption caption = 1007 [(.heavy) = false];
  int caption_size() const;
  void clear_caption();
  ::Caption* mutable_caption(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Caption >*
      mutable_caption();
  const ::Caption& caption(int index) const;
  ::Caption* add_caption();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Caption >&
      caption() const;

  // repeated .Region region = 1008 [(.heavy) = false];
  int region_size() const;
  void clear_region();
  ::Region* mutable_region(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Region >*
      mutable_region();
  const ::Region& region(int index) const;
  ::Region* add_region();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Region >&
      region() const;

  // repeated .Face face = 1009 [(.heavy) = false];
  int face_size() const;
  void clear_face();
  ::Face* mutable_face(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Face >*
      mutable_face();
  const ::Face& face(int index) const;
  ::Face* add_face();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Face >&
      face() const;

  // repeated .LOPQCode lopq_code = 1010 [(.heavy) = false];
  int lopq_code_size() const;
  void clear_lopq_code();
  ::LOPQCode* mutable_lopq_code(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LOPQCode >*
      mutable_lopq_code();
  const ::LOPQCode& lopq_code(int index) const;
  ::LOPQCode* add_lopq_code();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LOPQCode >&
      lopq_code() const;

  // repeated .TimeFrame frame = 1013 [(.heavy) = false];
  int frame_size() const;
  void clear_frame();
  ::TimeFrame* mutable_frame(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TimeFrame >*
      mutable_frame();
  const ::TimeFrame& frame(int index) const;
  ::TimeFrame* add_frame();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TimeFrame >&
      frame() const;

  // string id = 1 [(.heavy) = false];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // string json_metadata = 1003 [deprecated = true, (.heavy) = false];
  PROTOBUF_DEPRECATED void clear_json_metadata();
  PROTOBUF_DEPRECATED const std::string& json_metadata() const;
  PROTOBUF_DEPRECATED void set_json_metadata(const std::string& value);
  PROTOBUF_DEPRECATED void set_json_metadata(std::string&& value);
  PROTOBUF_DEPRECATED void set_json_metadata(const char* value);
  PROTOBUF_DEPRECATED void set_json_metadata(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_json_metadata();
  PROTOBUF_DEPRECATED std::string* release_json_metadata();
  PROTOBUF_DEPRECATED void set_allocated_json_metadata(std::string* json_metadata);

  // string cfid = 1100 [(.heavy) = false];
  void clear_cfid();
  const std::string& cfid() const;
  void set_cfid(const std::string& value);
  void set_cfid(std::string&& value);
  void set_cfid(const char* value);
  void set_cfid(const char* value, size_t size);
  std::string* mutable_cfid();
  std::string* release_cfid();
  void set_allocated_cfid(std::string* cfid);

  // string hash = 1101 [(.heavy) = false];
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const char* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);

  // string asset_id = 1102 [(.heavy) = false];
  void clear_asset_id();
  const std::string& asset_id() const;
  void set_asset_id(const std::string& value);
  void set_asset_id(std::string&& value);
  void set_asset_id(const char* value);
  void set_asset_id(const char* value, size_t size);
  std::string* mutable_asset_id();
  std::string* release_asset_id();
  void set_allocated_asset_id(std::string* asset_id);

  // string asset_cfid = 1103 [(.heavy) = false];
  void clear_asset_cfid();
  const std::string& asset_cfid() const;
  void set_asset_cfid(const std::string& value);
  void set_asset_cfid(std::string&& value);
  void set_asset_cfid(const char* value);
  void set_asset_cfid(const char* value, size_t size);
  std::string* mutable_asset_cfid();
  std::string* release_asset_cfid();
  void set_allocated_asset_cfid(std::string* asset_cfid);

  // string dataset_name = 1105 [(.heavy) = false];
  void clear_dataset_name();
  const std::string& dataset_name() const;
  void set_dataset_name(const std::string& value);
  void set_dataset_name(std::string&& value);
  void set_dataset_name(const char* value);
  void set_dataset_name(const char* value, size_t size);
  std::string* mutable_dataset_name();
  std::string* release_dataset_name();
  void set_allocated_dataset_name(std::string* dataset_name);

  // .Image image = 2 [(.heavy) = true];
  bool has_image() const;
  void clear_image();
  const ::Image& image() const;
  ::Image* release_image();
  ::Image* mutable_image();
  void set_allocated_image(::Image* image);

  // .Video video = 3 [(.heavy) = true];
  bool has_video() const;
  void clear_video();
  const ::Video& video() const;
  ::Video* release_video();
  ::Video* mutable_video();
  void set_allocated_video(::Video* video);

  // .Image image_segment = 7 [(.heavy) = true];
  bool has_image_segment() const;
  void clear_image_segment();
  const ::Image& image_segment() const;
  ::Image* release_image_segment();
  ::Image* mutable_image_segment();
  void set_allocated_image_segment(::Image* image_segment);

  // .ResponseStatus status = 999 [(.heavy) = false];
  bool has_status() const;
  void clear_status();
  const ::ResponseStatus& status() const;
  ::ResponseStatus* release_status();
  ::ResponseStatus* mutable_status();
  void set_allocated_status(::ResponseStatus* status);

  // .Geo geo = 1005 [(.heavy) = false];
  bool has_geo() const;
  void clear_geo();
  const ::Geo& geo() const;
  ::Geo* release_geo();
  ::Geo* mutable_geo();
  void set_allocated_geo(::Geo* geo);

  // .ColorResult color_result = 1012 [(.heavy) = false];
  bool has_color_result() const;
  void clear_color_result();
  const ::ColorResult& color_result() const;
  ::ColorResult* release_color_result();
  ::ColorResult* mutable_color_result();
  void set_allocated_color_result(::ColorResult* color_result);

  // .Text text = 1015 [(.heavy) = true];
  bool has_text() const;
  void clear_text();
  const ::Text& text() const;
  ::Text* release_text();
  ::Text* mutable_text();
  void set_allocated_text(::Text* text);

  // .google.protobuf.Struct metadata = 1016 [(.heavy) = false];
  bool has_metadata() const;
  void clear_metadata();
  const PROTOBUF_NAMESPACE_ID::Struct& metadata() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_metadata();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_metadata();
  void set_allocated_metadata(PROTOBUF_NAMESPACE_ID::Struct* metadata);

  // .Audio audio = 1017 [(.heavy) = true];
  bool has_audio() const;
  void clear_audio();
  const ::Audio& audio() const;
  ::Audio* release_audio();
  ::Audio* mutable_audio();
  void set_allocated_audio(::Audio* audio);

  // .google.protobuf.Struct annotation_info = 1104 [(.heavy) = false];
  bool has_annotation_info() const;
  void clear_annotation_info();
  const PROTOBUF_NAMESPACE_ID::Struct& annotation_info() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_annotation_info();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_annotation_info();
  void set_allocated_annotation_info(PROTOBUF_NAMESPACE_ID::Struct* annotation_info);

  // @@protoc_insertion_point(class_scope:DataExample)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      DataExample_SavedOutputEntry_DoNotUse,
      std::string, ::SavedOutput,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > saved_output_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Embedding > embedding_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tag > tag_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BoundingBox > bbox_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Caption > caption_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Region > region_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Face > face_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LOPQCode > lopq_code_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TimeFrame > frame_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr json_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cfid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_cfid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dataset_name_;
  ::Image* image_;
  ::Video* video_;
  ::Image* image_segment_;
  ::ResponseStatus* status_;
  ::Geo* geo_;
  ::ColorResult* color_result_;
  ::Text* text_;
  PROTOBUF_NAMESPACE_ID::Struct* metadata_;
  ::Audio* audio_;
  PROTOBUF_NAMESPACE_ID::Struct* annotation_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2fdata_5fexample_2eproto;
};
// -------------------------------------------------------------------

class Region_RegionInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Region.RegionInfo) */ {
 public:
  Region_RegionInfo();
  virtual ~Region_RegionInfo();

  Region_RegionInfo(const Region_RegionInfo& from);
  Region_RegionInfo(Region_RegionInfo&& from) noexcept
    : Region_RegionInfo() {
    *this = ::std::move(from);
  }

  inline Region_RegionInfo& operator=(const Region_RegionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Region_RegionInfo& operator=(Region_RegionInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Region_RegionInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Region_RegionInfo* internal_default_instance() {
    return reinterpret_cast<const Region_RegionInfo*>(
               &_Region_RegionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Region_RegionInfo& a, Region_RegionInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(Region_RegionInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Region_RegionInfo* New() const final {
    return CreateMaybeMessage<Region_RegionInfo>(nullptr);
  }

  Region_RegionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Region_RegionInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Region_RegionInfo& from);
  void MergeFrom(const Region_RegionInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Region_RegionInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Region.RegionInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fdata_5fexample_2eproto);
    return ::descriptor_table_proto_2futils_2fdata_5fexample_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaskFieldNumber = 2,
    kBoundingBoxFieldNumber = 1,
    kPointFieldNumber = 3,
    kPolygonFieldNumber = 5,
    kRelativeToFieldNumber = 4,
  };
  // bytes mask = 2;
  void clear_mask();
  const std::string& mask() const;
  void set_mask(const std::string& value);
  void set_mask(std::string&& value);
  void set_mask(const char* value);
  void set_mask(const void* value, size_t size);
  std::string* mutable_mask();
  std::string* release_mask();
  void set_allocated_mask(std::string* mask);

  // .BBox bounding_box = 1;
  bool has_bounding_box() const;
  void clear_bounding_box();
  const ::BBox& bounding_box() const;
  ::BBox* release_bounding_box();
  ::BBox* mutable_bounding_box();
  void set_allocated_bounding_box(::BBox* bounding_box);

  // .Point point = 3 [(.heavy) = false];
  bool has_point() const;
  void clear_point();
  const ::Point& point() const;
  ::Point* release_point();
  ::Point* mutable_point();
  void set_allocated_point(::Point* point);

  // .Polygon polygon = 5;
  bool has_polygon() const;
  void clear_polygon();
  const ::Polygon& polygon() const;
  ::Polygon* release_polygon();
  ::Polygon* mutable_polygon();
  void set_allocated_polygon(::Polygon* polygon);

  // int32 relative_to = 4;
  void clear_relative_to();
  ::PROTOBUF_NAMESPACE_ID::int32 relative_to() const;
  void set_relative_to(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Region.RegionInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mask_;
  ::BBox* bounding_box_;
  ::Point* point_;
  ::Polygon* polygon_;
  ::PROTOBUF_NAMESPACE_ID::int32 relative_to_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2fdata_5fexample_2eproto;
};
// -------------------------------------------------------------------

class Region :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Region) */ {
 public:
  Region();
  virtual ~Region();

  Region(const Region& from);
  Region(Region&& from) noexcept
    : Region() {
    *this = ::std::move(from);
  }

  inline Region& operator=(const Region& from) {
    CopyFrom(from);
    return *this;
  }
  inline Region& operator=(Region&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Region& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Region* internal_default_instance() {
    return reinterpret_cast<const Region*>(
               &_Region_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Region& a, Region& b) {
    a.Swap(&b);
  }
  inline void Swap(Region* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Region* New() const final {
    return CreateMaybeMessage<Region>(nullptr);
  }

  Region* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Region>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Region& from);
  void MergeFrom(const Region& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Region* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Region";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fdata_5fexample_2eproto);
    return ::descriptor_table_proto_2futils_2fdata_5fexample_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Region_RegionInfo RegionInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTrackIdFieldNumber = 14,
    kRegionInfoFieldNumber = 11,
    kDataFieldNumber = 12,
    kValueFieldNumber = 13,
  };
  // string id = 1 [(.heavy) = false];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // string track_id = 14;
  void clear_track_id();
  const std::string& track_id() const;
  void set_track_id(const std::string& value);
  void set_track_id(std::string&& value);
  void set_track_id(const char* value);
  void set_track_id(const char* value, size_t size);
  std::string* mutable_track_id();
  std::string* release_track_id();
  void set_allocated_track_id(std::string* track_id);

  // .Region.RegionInfo region_info = 11;
  bool has_region_info() const;
  void clear_region_info();
  const ::Region_RegionInfo& region_info() const;
  ::Region_RegionInfo* release_region_info();
  ::Region_RegionInfo* mutable_region_info();
  void set_allocated_region_info(::Region_RegionInfo* region_info);

  // .DataExample data = 12;
  bool has_data() const;
  void clear_data();
  const ::DataExample& data() const;
  ::DataExample* release_data();
  ::DataExample* mutable_data();
  void set_allocated_data(::DataExample* data);

  // float value = 13;
  void clear_value();
  float value() const;
  void set_value(float value);

  // @@protoc_insertion_point(class_scope:Region)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr track_id_;
  ::Region_RegionInfo* region_info_;
  ::DataExample* data_;
  float value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2fdata_5fexample_2eproto;
};
// -------------------------------------------------------------------

class TimeFrame_FrameInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TimeFrame.FrameInfo) */ {
 public:
  TimeFrame_FrameInfo();
  virtual ~TimeFrame_FrameInfo();

  TimeFrame_FrameInfo(const TimeFrame_FrameInfo& from);
  TimeFrame_FrameInfo(TimeFrame_FrameInfo&& from) noexcept
    : TimeFrame_FrameInfo() {
    *this = ::std::move(from);
  }

  inline TimeFrame_FrameInfo& operator=(const TimeFrame_FrameInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeFrame_FrameInfo& operator=(TimeFrame_FrameInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimeFrame_FrameInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimeFrame_FrameInfo* internal_default_instance() {
    return reinterpret_cast<const TimeFrame_FrameInfo*>(
               &_TimeFrame_FrameInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TimeFrame_FrameInfo& a, TimeFrame_FrameInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeFrame_FrameInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimeFrame_FrameInfo* New() const final {
    return CreateMaybeMessage<TimeFrame_FrameInfo>(nullptr);
  }

  TimeFrame_FrameInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimeFrame_FrameInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimeFrame_FrameInfo& from);
  void MergeFrom(const TimeFrame_FrameInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeFrame_FrameInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TimeFrame.FrameInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fdata_5fexample_2eproto);
    return ::descriptor_table_proto_2futils_2fdata_5fexample_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 2,
    kNumFieldNumber = 1,
  };
  // .google.protobuf.Timestamp time = 2;
  bool has_time() const;
  void clear_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time();
  void set_allocated_time(PROTOBUF_NAMESPACE_ID::Timestamp* time);

  // int32 num = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:TimeFrame.FrameInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  PROTOBUF_NAMESPACE_ID::Timestamp* time_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2fdata_5fexample_2eproto;
};
// -------------------------------------------------------------------

class TimeFrame :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TimeFrame) */ {
 public:
  TimeFrame();
  virtual ~TimeFrame();

  TimeFrame(const TimeFrame& from);
  TimeFrame(TimeFrame&& from) noexcept
    : TimeFrame() {
    *this = ::std::move(from);
  }

  inline TimeFrame& operator=(const TimeFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeFrame& operator=(TimeFrame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimeFrame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimeFrame* internal_default_instance() {
    return reinterpret_cast<const TimeFrame*>(
               &_TimeFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TimeFrame& a, TimeFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeFrame* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimeFrame* New() const final {
    return CreateMaybeMessage<TimeFrame>(nullptr);
  }

  TimeFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimeFrame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimeFrame& from);
  void MergeFrom(const TimeFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TimeFrame";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fdata_5fexample_2eproto);
    return ::descriptor_table_proto_2futils_2fdata_5fexample_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TimeFrame_FrameInfo FrameInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kFrameInfoFieldNumber = 11,
    kDataFieldNumber = 12,
  };
  // string id = 1 [(.heavy) = false];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // .TimeFrame.FrameInfo frame_info = 11;
  bool has_frame_info() const;
  void clear_frame_info();
  const ::TimeFrame_FrameInfo& frame_info() const;
  ::TimeFrame_FrameInfo* release_frame_info();
  ::TimeFrame_FrameInfo* mutable_frame_info();
  void set_allocated_frame_info(::TimeFrame_FrameInfo* frame_info);

  // .DataExample data = 12;
  bool has_data() const;
  void clear_data();
  const ::DataExample& data() const;
  ::DataExample* release_data();
  ::DataExample* mutable_data();
  void set_allocated_data(::DataExample* data);

  // @@protoc_insertion_point(class_scope:TimeFrame)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::TimeFrame_FrameInfo* frame_info_;
  ::DataExample* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2fdata_5fexample_2eproto;
};
// ===================================================================

static const int kHeavyFieldNumber = 50002;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  heavy;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// DataExample

// string id = 1 [(.heavy) = false];
inline void DataExample::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DataExample::id() const {
  // @@protoc_insertion_point(field_get:DataExample.id)
  return id_.GetNoArena();
}
inline void DataExample::set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DataExample.id)
}
inline void DataExample::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DataExample.id)
}
inline void DataExample::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataExample.id)
}
inline void DataExample::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataExample.id)
}
inline std::string* DataExample::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:DataExample.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DataExample::release_id() {
  // @@protoc_insertion_point(field_release:DataExample.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DataExample::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:DataExample.id)
}

// .ResponseStatus status = 999 [(.heavy) = false];
inline bool DataExample::has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline const ::ResponseStatus& DataExample::status() const {
  const ::ResponseStatus* p = status_;
  // @@protoc_insertion_point(field_get:DataExample.status)
  return p != nullptr ? *p : *reinterpret_cast<const ::ResponseStatus*>(
      &::_ResponseStatus_default_instance_);
}
inline ::ResponseStatus* DataExample::release_status() {
  // @@protoc_insertion_point(field_release:DataExample.status)
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::ResponseStatus* DataExample::mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::ResponseStatus>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:DataExample.status)
  return status_;
}
inline void DataExample::set_allocated_status(::ResponseStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:DataExample.status)
}

// .Image image = 2 [(.heavy) = true];
inline bool DataExample::has_image() const {
  return this != internal_default_instance() && image_ != nullptr;
}
inline const ::Image& DataExample::image() const {
  const ::Image* p = image_;
  // @@protoc_insertion_point(field_get:DataExample.image)
  return p != nullptr ? *p : *reinterpret_cast<const ::Image*>(
      &::_Image_default_instance_);
}
inline ::Image* DataExample::release_image() {
  // @@protoc_insertion_point(field_release:DataExample.image)
  
  ::Image* temp = image_;
  image_ = nullptr;
  return temp;
}
inline ::Image* DataExample::mutable_image() {
  
  if (image_ == nullptr) {
    auto* p = CreateMaybeMessage<::Image>(GetArenaNoVirtual());
    image_ = p;
  }
  // @@protoc_insertion_point(field_mutable:DataExample.image)
  return image_;
}
inline void DataExample::set_allocated_image(::Image* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_);
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    
  } else {
    
  }
  image_ = image;
  // @@protoc_insertion_point(field_set_allocated:DataExample.image)
}

// .Video video = 3 [(.heavy) = true];
inline bool DataExample::has_video() const {
  return this != internal_default_instance() && video_ != nullptr;
}
inline const ::Video& DataExample::video() const {
  const ::Video* p = video_;
  // @@protoc_insertion_point(field_get:DataExample.video)
  return p != nullptr ? *p : *reinterpret_cast<const ::Video*>(
      &::_Video_default_instance_);
}
inline ::Video* DataExample::release_video() {
  // @@protoc_insertion_point(field_release:DataExample.video)
  
  ::Video* temp = video_;
  video_ = nullptr;
  return temp;
}
inline ::Video* DataExample::mutable_video() {
  
  if (video_ == nullptr) {
    auto* p = CreateMaybeMessage<::Video>(GetArenaNoVirtual());
    video_ = p;
  }
  // @@protoc_insertion_point(field_mutable:DataExample.video)
  return video_;
}
inline void DataExample::set_allocated_video(::Video* video) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(video_);
  }
  if (video) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      video = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, video, submessage_arena);
    }
    
  } else {
    
  }
  video_ = video;
  // @@protoc_insertion_point(field_set_allocated:DataExample.video)
}

// map<string, .SavedOutput> saved_output = 5 [(.heavy) = true];
inline int DataExample::saved_output_size() const {
  return saved_output_.size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::SavedOutput >&
DataExample::saved_output() const {
  // @@protoc_insertion_point(field_map:DataExample.saved_output)
  return saved_output_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::SavedOutput >*
DataExample::mutable_saved_output() {
  // @@protoc_insertion_point(field_mutable_map:DataExample.saved_output)
  return saved_output_.MutableMap();
}

// repeated .Embedding embedding = 6 [(.heavy) = true];
inline int DataExample::embedding_size() const {
  return embedding_.size();
}
inline ::Embedding* DataExample::mutable_embedding(int index) {
  // @@protoc_insertion_point(field_mutable:DataExample.embedding)
  return embedding_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Embedding >*
DataExample::mutable_embedding() {
  // @@protoc_insertion_point(field_mutable_list:DataExample.embedding)
  return &embedding_;
}
inline const ::Embedding& DataExample::embedding(int index) const {
  // @@protoc_insertion_point(field_get:DataExample.embedding)
  return embedding_.Get(index);
}
inline ::Embedding* DataExample::add_embedding() {
  // @@protoc_insertion_point(field_add:DataExample.embedding)
  return embedding_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Embedding >&
DataExample::embedding() const {
  // @@protoc_insertion_point(field_list:DataExample.embedding)
  return embedding_;
}

// .Image image_segment = 7 [(.heavy) = true];
inline bool DataExample::has_image_segment() const {
  return this != internal_default_instance() && image_segment_ != nullptr;
}
inline const ::Image& DataExample::image_segment() const {
  const ::Image* p = image_segment_;
  // @@protoc_insertion_point(field_get:DataExample.image_segment)
  return p != nullptr ? *p : *reinterpret_cast<const ::Image*>(
      &::_Image_default_instance_);
}
inline ::Image* DataExample::release_image_segment() {
  // @@protoc_insertion_point(field_release:DataExample.image_segment)
  
  ::Image* temp = image_segment_;
  image_segment_ = nullptr;
  return temp;
}
inline ::Image* DataExample::mutable_image_segment() {
  
  if (image_segment_ == nullptr) {
    auto* p = CreateMaybeMessage<::Image>(GetArenaNoVirtual());
    image_segment_ = p;
  }
  // @@protoc_insertion_point(field_mutable:DataExample.image_segment)
  return image_segment_;
}
inline void DataExample::set_allocated_image_segment(::Image* image_segment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_segment_);
  }
  if (image_segment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      image_segment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image_segment, submessage_arena);
    }
    
  } else {
    
  }
  image_segment_ = image_segment;
  // @@protoc_insertion_point(field_set_allocated:DataExample.image_segment)
}

// repeated .Tag tag = 1000 [(.heavy) = false];
inline int DataExample::tag_size() const {
  return tag_.size();
}
inline ::Tag* DataExample::mutable_tag(int index) {
  // @@protoc_insertion_point(field_mutable:DataExample.tag)
  return tag_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tag >*
DataExample::mutable_tag() {
  // @@protoc_insertion_point(field_mutable_list:DataExample.tag)
  return &tag_;
}
inline const ::Tag& DataExample::tag(int index) const {
  // @@protoc_insertion_point(field_get:DataExample.tag)
  return tag_.Get(index);
}
inline ::Tag* DataExample::add_tag() {
  // @@protoc_insertion_point(field_add:DataExample.tag)
  return tag_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tag >&
DataExample::tag() const {
  // @@protoc_insertion_point(field_list:DataExample.tag)
  return tag_;
}

// repeated .BoundingBox bbox = 1002 [(.heavy) = false];
inline int DataExample::bbox_size() const {
  return bbox_.size();
}
inline ::BoundingBox* DataExample::mutable_bbox(int index) {
  // @@protoc_insertion_point(field_mutable:DataExample.bbox)
  return bbox_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BoundingBox >*
DataExample::mutable_bbox() {
  // @@protoc_insertion_point(field_mutable_list:DataExample.bbox)
  return &bbox_;
}
inline const ::BoundingBox& DataExample::bbox(int index) const {
  // @@protoc_insertion_point(field_get:DataExample.bbox)
  return bbox_.Get(index);
}
inline ::BoundingBox* DataExample::add_bbox() {
  // @@protoc_insertion_point(field_add:DataExample.bbox)
  return bbox_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BoundingBox >&
DataExample::bbox() const {
  // @@protoc_insertion_point(field_list:DataExample.bbox)
  return bbox_;
}

// string json_metadata = 1003 [deprecated = true, (.heavy) = false];
inline void DataExample::clear_json_metadata() {
  json_metadata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DataExample::json_metadata() const {
  // @@protoc_insertion_point(field_get:DataExample.json_metadata)
  return json_metadata_.GetNoArena();
}
inline void DataExample::set_json_metadata(const std::string& value) {
  
  json_metadata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DataExample.json_metadata)
}
inline void DataExample::set_json_metadata(std::string&& value) {
  
  json_metadata_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DataExample.json_metadata)
}
inline void DataExample::set_json_metadata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  json_metadata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataExample.json_metadata)
}
inline void DataExample::set_json_metadata(const char* value, size_t size) {
  
  json_metadata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataExample.json_metadata)
}
inline std::string* DataExample::mutable_json_metadata() {
  
  // @@protoc_insertion_point(field_mutable:DataExample.json_metadata)
  return json_metadata_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DataExample::release_json_metadata() {
  // @@protoc_insertion_point(field_release:DataExample.json_metadata)
  
  return json_metadata_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DataExample::set_allocated_json_metadata(std::string* json_metadata) {
  if (json_metadata != nullptr) {
    
  } else {
    
  }
  json_metadata_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), json_metadata);
  // @@protoc_insertion_point(field_set_allocated:DataExample.json_metadata)
}

// .Geo geo = 1005 [(.heavy) = false];
inline bool DataExample::has_geo() const {
  return this != internal_default_instance() && geo_ != nullptr;
}
inline const ::Geo& DataExample::geo() const {
  const ::Geo* p = geo_;
  // @@protoc_insertion_point(field_get:DataExample.geo)
  return p != nullptr ? *p : *reinterpret_cast<const ::Geo*>(
      &::_Geo_default_instance_);
}
inline ::Geo* DataExample::release_geo() {
  // @@protoc_insertion_point(field_release:DataExample.geo)
  
  ::Geo* temp = geo_;
  geo_ = nullptr;
  return temp;
}
inline ::Geo* DataExample::mutable_geo() {
  
  if (geo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Geo>(GetArenaNoVirtual());
    geo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:DataExample.geo)
  return geo_;
}
inline void DataExample::set_allocated_geo(::Geo* geo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(geo_);
  }
  if (geo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      geo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geo, submessage_arena);
    }
    
  } else {
    
  }
  geo_ = geo;
  // @@protoc_insertion_point(field_set_allocated:DataExample.geo)
}

// repeated .Caption caption = 1007 [(.heavy) = false];
inline int DataExample::caption_size() const {
  return caption_.size();
}
inline ::Caption* DataExample::mutable_caption(int index) {
  // @@protoc_insertion_point(field_mutable:DataExample.caption)
  return caption_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Caption >*
DataExample::mutable_caption() {
  // @@protoc_insertion_point(field_mutable_list:DataExample.caption)
  return &caption_;
}
inline const ::Caption& DataExample::caption(int index) const {
  // @@protoc_insertion_point(field_get:DataExample.caption)
  return caption_.Get(index);
}
inline ::Caption* DataExample::add_caption() {
  // @@protoc_insertion_point(field_add:DataExample.caption)
  return caption_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Caption >&
DataExample::caption() const {
  // @@protoc_insertion_point(field_list:DataExample.caption)
  return caption_;
}

// repeated .Region region = 1008 [(.heavy) = false];
inline int DataExample::region_size() const {
  return region_.size();
}
inline void DataExample::clear_region() {
  region_.Clear();
}
inline ::Region* DataExample::mutable_region(int index) {
  // @@protoc_insertion_point(field_mutable:DataExample.region)
  return region_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Region >*
DataExample::mutable_region() {
  // @@protoc_insertion_point(field_mutable_list:DataExample.region)
  return &region_;
}
inline const ::Region& DataExample::region(int index) const {
  // @@protoc_insertion_point(field_get:DataExample.region)
  return region_.Get(index);
}
inline ::Region* DataExample::add_region() {
  // @@protoc_insertion_point(field_add:DataExample.region)
  return region_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Region >&
DataExample::region() const {
  // @@protoc_insertion_point(field_list:DataExample.region)
  return region_;
}

// repeated .Face face = 1009 [(.heavy) = false];
inline int DataExample::face_size() const {
  return face_.size();
}
inline ::Face* DataExample::mutable_face(int index) {
  // @@protoc_insertion_point(field_mutable:DataExample.face)
  return face_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Face >*
DataExample::mutable_face() {
  // @@protoc_insertion_point(field_mutable_list:DataExample.face)
  return &face_;
}
inline const ::Face& DataExample::face(int index) const {
  // @@protoc_insertion_point(field_get:DataExample.face)
  return face_.Get(index);
}
inline ::Face* DataExample::add_face() {
  // @@protoc_insertion_point(field_add:DataExample.face)
  return face_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Face >&
DataExample::face() const {
  // @@protoc_insertion_point(field_list:DataExample.face)
  return face_;
}

// repeated .LOPQCode lopq_code = 1010 [(.heavy) = false];
inline int DataExample::lopq_code_size() const {
  return lopq_code_.size();
}
inline ::LOPQCode* DataExample::mutable_lopq_code(int index) {
  // @@protoc_insertion_point(field_mutable:DataExample.lopq_code)
  return lopq_code_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LOPQCode >*
DataExample::mutable_lopq_code() {
  // @@protoc_insertion_point(field_mutable_list:DataExample.lopq_code)
  return &lopq_code_;
}
inline const ::LOPQCode& DataExample::lopq_code(int index) const {
  // @@protoc_insertion_point(field_get:DataExample.lopq_code)
  return lopq_code_.Get(index);
}
inline ::LOPQCode* DataExample::add_lopq_code() {
  // @@protoc_insertion_point(field_add:DataExample.lopq_code)
  return lopq_code_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LOPQCode >&
DataExample::lopq_code() const {
  // @@protoc_insertion_point(field_list:DataExample.lopq_code)
  return lopq_code_;
}

// .ColorResult color_result = 1012 [(.heavy) = false];
inline bool DataExample::has_color_result() const {
  return this != internal_default_instance() && color_result_ != nullptr;
}
inline const ::ColorResult& DataExample::color_result() const {
  const ::ColorResult* p = color_result_;
  // @@protoc_insertion_point(field_get:DataExample.color_result)
  return p != nullptr ? *p : *reinterpret_cast<const ::ColorResult*>(
      &::_ColorResult_default_instance_);
}
inline ::ColorResult* DataExample::release_color_result() {
  // @@protoc_insertion_point(field_release:DataExample.color_result)
  
  ::ColorResult* temp = color_result_;
  color_result_ = nullptr;
  return temp;
}
inline ::ColorResult* DataExample::mutable_color_result() {
  
  if (color_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::ColorResult>(GetArenaNoVirtual());
    color_result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:DataExample.color_result)
  return color_result_;
}
inline void DataExample::set_allocated_color_result(::ColorResult* color_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(color_result_);
  }
  if (color_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      color_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color_result, submessage_arena);
    }
    
  } else {
    
  }
  color_result_ = color_result;
  // @@protoc_insertion_point(field_set_allocated:DataExample.color_result)
}

// repeated .TimeFrame frame = 1013 [(.heavy) = false];
inline int DataExample::frame_size() const {
  return frame_.size();
}
inline void DataExample::clear_frame() {
  frame_.Clear();
}
inline ::TimeFrame* DataExample::mutable_frame(int index) {
  // @@protoc_insertion_point(field_mutable:DataExample.frame)
  return frame_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TimeFrame >*
DataExample::mutable_frame() {
  // @@protoc_insertion_point(field_mutable_list:DataExample.frame)
  return &frame_;
}
inline const ::TimeFrame& DataExample::frame(int index) const {
  // @@protoc_insertion_point(field_get:DataExample.frame)
  return frame_.Get(index);
}
inline ::TimeFrame* DataExample::add_frame() {
  // @@protoc_insertion_point(field_add:DataExample.frame)
  return frame_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TimeFrame >&
DataExample::frame() const {
  // @@protoc_insertion_point(field_list:DataExample.frame)
  return frame_;
}

// .Text text = 1015 [(.heavy) = true];
inline bool DataExample::has_text() const {
  return this != internal_default_instance() && text_ != nullptr;
}
inline const ::Text& DataExample::text() const {
  const ::Text* p = text_;
  // @@protoc_insertion_point(field_get:DataExample.text)
  return p != nullptr ? *p : *reinterpret_cast<const ::Text*>(
      &::_Text_default_instance_);
}
inline ::Text* DataExample::release_text() {
  // @@protoc_insertion_point(field_release:DataExample.text)
  
  ::Text* temp = text_;
  text_ = nullptr;
  return temp;
}
inline ::Text* DataExample::mutable_text() {
  
  if (text_ == nullptr) {
    auto* p = CreateMaybeMessage<::Text>(GetArenaNoVirtual());
    text_ = p;
  }
  // @@protoc_insertion_point(field_mutable:DataExample.text)
  return text_;
}
inline void DataExample::set_allocated_text(::Text* text) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_);
  }
  if (text) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      text = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text, submessage_arena);
    }
    
  } else {
    
  }
  text_ = text;
  // @@protoc_insertion_point(field_set_allocated:DataExample.text)
}

// .google.protobuf.Struct metadata = 1016 [(.heavy) = false];
inline bool DataExample::has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline const PROTOBUF_NAMESPACE_ID::Struct& DataExample::metadata() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = metadata_;
  // @@protoc_insertion_point(field_get:DataExample.metadata)
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline PROTOBUF_NAMESPACE_ID::Struct* DataExample::release_metadata() {
  // @@protoc_insertion_point(field_release:DataExample.metadata)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* DataExample::mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArenaNoVirtual());
    metadata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:DataExample.metadata)
  return metadata_;
}
inline void DataExample::set_allocated_metadata(PROTOBUF_NAMESPACE_ID::Struct* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata)->GetArena();
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:DataExample.metadata)
}

// .Audio audio = 1017 [(.heavy) = true];
inline bool DataExample::has_audio() const {
  return this != internal_default_instance() && audio_ != nullptr;
}
inline const ::Audio& DataExample::audio() const {
  const ::Audio* p = audio_;
  // @@protoc_insertion_point(field_get:DataExample.audio)
  return p != nullptr ? *p : *reinterpret_cast<const ::Audio*>(
      &::_Audio_default_instance_);
}
inline ::Audio* DataExample::release_audio() {
  // @@protoc_insertion_point(field_release:DataExample.audio)
  
  ::Audio* temp = audio_;
  audio_ = nullptr;
  return temp;
}
inline ::Audio* DataExample::mutable_audio() {
  
  if (audio_ == nullptr) {
    auto* p = CreateMaybeMessage<::Audio>(GetArenaNoVirtual());
    audio_ = p;
  }
  // @@protoc_insertion_point(field_mutable:DataExample.audio)
  return audio_;
}
inline void DataExample::set_allocated_audio(::Audio* audio) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(audio_);
  }
  if (audio) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      audio = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, audio, submessage_arena);
    }
    
  } else {
    
  }
  audio_ = audio;
  // @@protoc_insertion_point(field_set_allocated:DataExample.audio)
}

// string cfid = 1100 [(.heavy) = false];
inline void DataExample::clear_cfid() {
  cfid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DataExample::cfid() const {
  // @@protoc_insertion_point(field_get:DataExample.cfid)
  return cfid_.GetNoArena();
}
inline void DataExample::set_cfid(const std::string& value) {
  
  cfid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DataExample.cfid)
}
inline void DataExample::set_cfid(std::string&& value) {
  
  cfid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DataExample.cfid)
}
inline void DataExample::set_cfid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cfid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataExample.cfid)
}
inline void DataExample::set_cfid(const char* value, size_t size) {
  
  cfid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataExample.cfid)
}
inline std::string* DataExample::mutable_cfid() {
  
  // @@protoc_insertion_point(field_mutable:DataExample.cfid)
  return cfid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DataExample::release_cfid() {
  // @@protoc_insertion_point(field_release:DataExample.cfid)
  
  return cfid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DataExample::set_allocated_cfid(std::string* cfid) {
  if (cfid != nullptr) {
    
  } else {
    
  }
  cfid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cfid);
  // @@protoc_insertion_point(field_set_allocated:DataExample.cfid)
}

// string hash = 1101 [(.heavy) = false];
inline void DataExample::clear_hash() {
  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DataExample::hash() const {
  // @@protoc_insertion_point(field_get:DataExample.hash)
  return hash_.GetNoArena();
}
inline void DataExample::set_hash(const std::string& value) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DataExample.hash)
}
inline void DataExample::set_hash(std::string&& value) {
  
  hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DataExample.hash)
}
inline void DataExample::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataExample.hash)
}
inline void DataExample::set_hash(const char* value, size_t size) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataExample.hash)
}
inline std::string* DataExample::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:DataExample.hash)
  return hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DataExample::release_hash() {
  // @@protoc_insertion_point(field_release:DataExample.hash)
  
  return hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DataExample::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:DataExample.hash)
}

// string asset_id = 1102 [(.heavy) = false];
inline void DataExample::clear_asset_id() {
  asset_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DataExample::asset_id() const {
  // @@protoc_insertion_point(field_get:DataExample.asset_id)
  return asset_id_.GetNoArena();
}
inline void DataExample::set_asset_id(const std::string& value) {
  
  asset_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DataExample.asset_id)
}
inline void DataExample::set_asset_id(std::string&& value) {
  
  asset_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DataExample.asset_id)
}
inline void DataExample::set_asset_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  asset_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataExample.asset_id)
}
inline void DataExample::set_asset_id(const char* value, size_t size) {
  
  asset_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataExample.asset_id)
}
inline std::string* DataExample::mutable_asset_id() {
  
  // @@protoc_insertion_point(field_mutable:DataExample.asset_id)
  return asset_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DataExample::release_asset_id() {
  // @@protoc_insertion_point(field_release:DataExample.asset_id)
  
  return asset_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DataExample::set_allocated_asset_id(std::string* asset_id) {
  if (asset_id != nullptr) {
    
  } else {
    
  }
  asset_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asset_id);
  // @@protoc_insertion_point(field_set_allocated:DataExample.asset_id)
}

// string asset_cfid = 1103 [(.heavy) = false];
inline void DataExample::clear_asset_cfid() {
  asset_cfid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DataExample::asset_cfid() const {
  // @@protoc_insertion_point(field_get:DataExample.asset_cfid)
  return asset_cfid_.GetNoArena();
}
inline void DataExample::set_asset_cfid(const std::string& value) {
  
  asset_cfid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DataExample.asset_cfid)
}
inline void DataExample::set_asset_cfid(std::string&& value) {
  
  asset_cfid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DataExample.asset_cfid)
}
inline void DataExample::set_asset_cfid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  asset_cfid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataExample.asset_cfid)
}
inline void DataExample::set_asset_cfid(const char* value, size_t size) {
  
  asset_cfid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataExample.asset_cfid)
}
inline std::string* DataExample::mutable_asset_cfid() {
  
  // @@protoc_insertion_point(field_mutable:DataExample.asset_cfid)
  return asset_cfid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DataExample::release_asset_cfid() {
  // @@protoc_insertion_point(field_release:DataExample.asset_cfid)
  
  return asset_cfid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DataExample::set_allocated_asset_cfid(std::string* asset_cfid) {
  if (asset_cfid != nullptr) {
    
  } else {
    
  }
  asset_cfid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asset_cfid);
  // @@protoc_insertion_point(field_set_allocated:DataExample.asset_cfid)
}

// .google.protobuf.Struct annotation_info = 1104 [(.heavy) = false];
inline bool DataExample::has_annotation_info() const {
  return this != internal_default_instance() && annotation_info_ != nullptr;
}
inline const PROTOBUF_NAMESPACE_ID::Struct& DataExample::annotation_info() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = annotation_info_;
  // @@protoc_insertion_point(field_get:DataExample.annotation_info)
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline PROTOBUF_NAMESPACE_ID::Struct* DataExample::release_annotation_info() {
  // @@protoc_insertion_point(field_release:DataExample.annotation_info)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = annotation_info_;
  annotation_info_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* DataExample::mutable_annotation_info() {
  
  if (annotation_info_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArenaNoVirtual());
    annotation_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:DataExample.annotation_info)
  return annotation_info_;
}
inline void DataExample::set_allocated_annotation_info(PROTOBUF_NAMESPACE_ID::Struct* annotation_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(annotation_info_);
  }
  if (annotation_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(annotation_info)->GetArena();
    if (message_arena != submessage_arena) {
      annotation_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, annotation_info, submessage_arena);
    }
    
  } else {
    
  }
  annotation_info_ = annotation_info;
  // @@protoc_insertion_point(field_set_allocated:DataExample.annotation_info)
}

// string dataset_name = 1105 [(.heavy) = false];
inline void DataExample::clear_dataset_name() {
  dataset_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DataExample::dataset_name() const {
  // @@protoc_insertion_point(field_get:DataExample.dataset_name)
  return dataset_name_.GetNoArena();
}
inline void DataExample::set_dataset_name(const std::string& value) {
  
  dataset_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DataExample.dataset_name)
}
inline void DataExample::set_dataset_name(std::string&& value) {
  
  dataset_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DataExample.dataset_name)
}
inline void DataExample::set_dataset_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dataset_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataExample.dataset_name)
}
inline void DataExample::set_dataset_name(const char* value, size_t size) {
  
  dataset_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataExample.dataset_name)
}
inline std::string* DataExample::mutable_dataset_name() {
  
  // @@protoc_insertion_point(field_mutable:DataExample.dataset_name)
  return dataset_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DataExample::release_dataset_name() {
  // @@protoc_insertion_point(field_release:DataExample.dataset_name)
  
  return dataset_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DataExample::set_allocated_dataset_name(std::string* dataset_name) {
  if (dataset_name != nullptr) {
    
  } else {
    
  }
  dataset_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dataset_name);
  // @@protoc_insertion_point(field_set_allocated:DataExample.dataset_name)
}

// -------------------------------------------------------------------

// Region_RegionInfo

// .BBox bounding_box = 1;
inline bool Region_RegionInfo::has_bounding_box() const {
  return this != internal_default_instance() && bounding_box_ != nullptr;
}
inline const ::BBox& Region_RegionInfo::bounding_box() const {
  const ::BBox* p = bounding_box_;
  // @@protoc_insertion_point(field_get:Region.RegionInfo.bounding_box)
  return p != nullptr ? *p : *reinterpret_cast<const ::BBox*>(
      &::_BBox_default_instance_);
}
inline ::BBox* Region_RegionInfo::release_bounding_box() {
  // @@protoc_insertion_point(field_release:Region.RegionInfo.bounding_box)
  
  ::BBox* temp = bounding_box_;
  bounding_box_ = nullptr;
  return temp;
}
inline ::BBox* Region_RegionInfo::mutable_bounding_box() {
  
  if (bounding_box_ == nullptr) {
    auto* p = CreateMaybeMessage<::BBox>(GetArenaNoVirtual());
    bounding_box_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Region.RegionInfo.bounding_box)
  return bounding_box_;
}
inline void Region_RegionInfo::set_allocated_bounding_box(::BBox* bounding_box) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bounding_box_);
  }
  if (bounding_box) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bounding_box = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bounding_box, submessage_arena);
    }
    
  } else {
    
  }
  bounding_box_ = bounding_box;
  // @@protoc_insertion_point(field_set_allocated:Region.RegionInfo.bounding_box)
}

// bytes mask = 2;
inline void Region_RegionInfo::clear_mask() {
  mask_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Region_RegionInfo::mask() const {
  // @@protoc_insertion_point(field_get:Region.RegionInfo.mask)
  return mask_.GetNoArena();
}
inline void Region_RegionInfo::set_mask(const std::string& value) {
  
  mask_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Region.RegionInfo.mask)
}
inline void Region_RegionInfo::set_mask(std::string&& value) {
  
  mask_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Region.RegionInfo.mask)
}
inline void Region_RegionInfo::set_mask(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mask_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Region.RegionInfo.mask)
}
inline void Region_RegionInfo::set_mask(const void* value, size_t size) {
  
  mask_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Region.RegionInfo.mask)
}
inline std::string* Region_RegionInfo::mutable_mask() {
  
  // @@protoc_insertion_point(field_mutable:Region.RegionInfo.mask)
  return mask_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Region_RegionInfo::release_mask() {
  // @@protoc_insertion_point(field_release:Region.RegionInfo.mask)
  
  return mask_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Region_RegionInfo::set_allocated_mask(std::string* mask) {
  if (mask != nullptr) {
    
  } else {
    
  }
  mask_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mask);
  // @@protoc_insertion_point(field_set_allocated:Region.RegionInfo.mask)
}

// .Point point = 3 [(.heavy) = false];
inline bool Region_RegionInfo::has_point() const {
  return this != internal_default_instance() && point_ != nullptr;
}
inline const ::Point& Region_RegionInfo::point() const {
  const ::Point* p = point_;
  // @@protoc_insertion_point(field_get:Region.RegionInfo.point)
  return p != nullptr ? *p : *reinterpret_cast<const ::Point*>(
      &::_Point_default_instance_);
}
inline ::Point* Region_RegionInfo::release_point() {
  // @@protoc_insertion_point(field_release:Region.RegionInfo.point)
  
  ::Point* temp = point_;
  point_ = nullptr;
  return temp;
}
inline ::Point* Region_RegionInfo::mutable_point() {
  
  if (point_ == nullptr) {
    auto* p = CreateMaybeMessage<::Point>(GetArenaNoVirtual());
    point_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Region.RegionInfo.point)
  return point_;
}
inline void Region_RegionInfo::set_allocated_point(::Point* point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(point_);
  }
  if (point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, point, submessage_arena);
    }
    
  } else {
    
  }
  point_ = point;
  // @@protoc_insertion_point(field_set_allocated:Region.RegionInfo.point)
}

// int32 relative_to = 4;
inline void Region_RegionInfo::clear_relative_to() {
  relative_to_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Region_RegionInfo::relative_to() const {
  // @@protoc_insertion_point(field_get:Region.RegionInfo.relative_to)
  return relative_to_;
}
inline void Region_RegionInfo::set_relative_to(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  relative_to_ = value;
  // @@protoc_insertion_point(field_set:Region.RegionInfo.relative_to)
}

// .Polygon polygon = 5;
inline bool Region_RegionInfo::has_polygon() const {
  return this != internal_default_instance() && polygon_ != nullptr;
}
inline const ::Polygon& Region_RegionInfo::polygon() const {
  const ::Polygon* p = polygon_;
  // @@protoc_insertion_point(field_get:Region.RegionInfo.polygon)
  return p != nullptr ? *p : *reinterpret_cast<const ::Polygon*>(
      &::_Polygon_default_instance_);
}
inline ::Polygon* Region_RegionInfo::release_polygon() {
  // @@protoc_insertion_point(field_release:Region.RegionInfo.polygon)
  
  ::Polygon* temp = polygon_;
  polygon_ = nullptr;
  return temp;
}
inline ::Polygon* Region_RegionInfo::mutable_polygon() {
  
  if (polygon_ == nullptr) {
    auto* p = CreateMaybeMessage<::Polygon>(GetArenaNoVirtual());
    polygon_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Region.RegionInfo.polygon)
  return polygon_;
}
inline void Region_RegionInfo::set_allocated_polygon(::Polygon* polygon) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(polygon_);
  }
  if (polygon) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      polygon = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, polygon, submessage_arena);
    }
    
  } else {
    
  }
  polygon_ = polygon;
  // @@protoc_insertion_point(field_set_allocated:Region.RegionInfo.polygon)
}

// -------------------------------------------------------------------

// Region

// string id = 1 [(.heavy) = false];
inline void Region::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Region::id() const {
  // @@protoc_insertion_point(field_get:Region.id)
  return id_.GetNoArena();
}
inline void Region::set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Region.id)
}
inline void Region::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Region.id)
}
inline void Region::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Region.id)
}
inline void Region::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Region.id)
}
inline std::string* Region::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:Region.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Region::release_id() {
  // @@protoc_insertion_point(field_release:Region.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Region::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:Region.id)
}

// .Region.RegionInfo region_info = 11;
inline bool Region::has_region_info() const {
  return this != internal_default_instance() && region_info_ != nullptr;
}
inline void Region::clear_region_info() {
  if (GetArenaNoVirtual() == nullptr && region_info_ != nullptr) {
    delete region_info_;
  }
  region_info_ = nullptr;
}
inline const ::Region_RegionInfo& Region::region_info() const {
  const ::Region_RegionInfo* p = region_info_;
  // @@protoc_insertion_point(field_get:Region.region_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::Region_RegionInfo*>(
      &::_Region_RegionInfo_default_instance_);
}
inline ::Region_RegionInfo* Region::release_region_info() {
  // @@protoc_insertion_point(field_release:Region.region_info)
  
  ::Region_RegionInfo* temp = region_info_;
  region_info_ = nullptr;
  return temp;
}
inline ::Region_RegionInfo* Region::mutable_region_info() {
  
  if (region_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Region_RegionInfo>(GetArenaNoVirtual());
    region_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Region.region_info)
  return region_info_;
}
inline void Region::set_allocated_region_info(::Region_RegionInfo* region_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete region_info_;
  }
  if (region_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      region_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, region_info, submessage_arena);
    }
    
  } else {
    
  }
  region_info_ = region_info;
  // @@protoc_insertion_point(field_set_allocated:Region.region_info)
}

// .DataExample data = 12;
inline bool Region::has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline void Region::clear_data() {
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::DataExample& Region::data() const {
  const ::DataExample* p = data_;
  // @@protoc_insertion_point(field_get:Region.data)
  return p != nullptr ? *p : *reinterpret_cast<const ::DataExample*>(
      &::_DataExample_default_instance_);
}
inline ::DataExample* Region::release_data() {
  // @@protoc_insertion_point(field_release:Region.data)
  
  ::DataExample* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::DataExample* Region::mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::DataExample>(GetArenaNoVirtual());
    data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Region.data)
  return data_;
}
inline void Region::set_allocated_data(::DataExample* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:Region.data)
}

// float value = 13;
inline void Region::clear_value() {
  value_ = 0;
}
inline float Region::value() const {
  // @@protoc_insertion_point(field_get:Region.value)
  return value_;
}
inline void Region::set_value(float value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:Region.value)
}

// string track_id = 14;
inline void Region::clear_track_id() {
  track_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Region::track_id() const {
  // @@protoc_insertion_point(field_get:Region.track_id)
  return track_id_.GetNoArena();
}
inline void Region::set_track_id(const std::string& value) {
  
  track_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Region.track_id)
}
inline void Region::set_track_id(std::string&& value) {
  
  track_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Region.track_id)
}
inline void Region::set_track_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  track_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Region.track_id)
}
inline void Region::set_track_id(const char* value, size_t size) {
  
  track_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Region.track_id)
}
inline std::string* Region::mutable_track_id() {
  
  // @@protoc_insertion_point(field_mutable:Region.track_id)
  return track_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Region::release_track_id() {
  // @@protoc_insertion_point(field_release:Region.track_id)
  
  return track_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Region::set_allocated_track_id(std::string* track_id) {
  if (track_id != nullptr) {
    
  } else {
    
  }
  track_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), track_id);
  // @@protoc_insertion_point(field_set_allocated:Region.track_id)
}

// -------------------------------------------------------------------

// TimeFrame_FrameInfo

// int32 num = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void TimeFrame_FrameInfo::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TimeFrame_FrameInfo::num() const {
  // @@protoc_insertion_point(field_get:TimeFrame.FrameInfo.num)
  return num_;
}
inline void TimeFrame_FrameInfo::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
  // @@protoc_insertion_point(field_set:TimeFrame.FrameInfo.num)
}

// .google.protobuf.Timestamp time = 2;
inline bool TimeFrame_FrameInfo::has_time() const {
  return this != internal_default_instance() && time_ != nullptr;
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TimeFrame_FrameInfo::time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = time_;
  // @@protoc_insertion_point(field_get:TimeFrame.FrameInfo.time)
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimeFrame_FrameInfo::release_time() {
  // @@protoc_insertion_point(field_release:TimeFrame.FrameInfo.time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = time_;
  time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimeFrame_FrameInfo::mutable_time() {
  
  if (time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TimeFrame.FrameInfo.time)
  return time_;
}
inline void TimeFrame_FrameInfo::set_allocated_time(PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time)->GetArena();
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    
  } else {
    
  }
  time_ = time;
  // @@protoc_insertion_point(field_set_allocated:TimeFrame.FrameInfo.time)
}

// -------------------------------------------------------------------

// TimeFrame

// string id = 1 [(.heavy) = false];
inline void TimeFrame::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TimeFrame::id() const {
  // @@protoc_insertion_point(field_get:TimeFrame.id)
  return id_.GetNoArena();
}
inline void TimeFrame::set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TimeFrame.id)
}
inline void TimeFrame::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TimeFrame.id)
}
inline void TimeFrame::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TimeFrame.id)
}
inline void TimeFrame::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TimeFrame.id)
}
inline std::string* TimeFrame::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:TimeFrame.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TimeFrame::release_id() {
  // @@protoc_insertion_point(field_release:TimeFrame.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TimeFrame::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:TimeFrame.id)
}

// .TimeFrame.FrameInfo frame_info = 11;
inline bool TimeFrame::has_frame_info() const {
  return this != internal_default_instance() && frame_info_ != nullptr;
}
inline void TimeFrame::clear_frame_info() {
  if (GetArenaNoVirtual() == nullptr && frame_info_ != nullptr) {
    delete frame_info_;
  }
  frame_info_ = nullptr;
}
inline const ::TimeFrame_FrameInfo& TimeFrame::frame_info() const {
  const ::TimeFrame_FrameInfo* p = frame_info_;
  // @@protoc_insertion_point(field_get:TimeFrame.frame_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::TimeFrame_FrameInfo*>(
      &::_TimeFrame_FrameInfo_default_instance_);
}
inline ::TimeFrame_FrameInfo* TimeFrame::release_frame_info() {
  // @@protoc_insertion_point(field_release:TimeFrame.frame_info)
  
  ::TimeFrame_FrameInfo* temp = frame_info_;
  frame_info_ = nullptr;
  return temp;
}
inline ::TimeFrame_FrameInfo* TimeFrame::mutable_frame_info() {
  
  if (frame_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TimeFrame_FrameInfo>(GetArenaNoVirtual());
    frame_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TimeFrame.frame_info)
  return frame_info_;
}
inline void TimeFrame::set_allocated_frame_info(::TimeFrame_FrameInfo* frame_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete frame_info_;
  }
  if (frame_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      frame_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, frame_info, submessage_arena);
    }
    
  } else {
    
  }
  frame_info_ = frame_info;
  // @@protoc_insertion_point(field_set_allocated:TimeFrame.frame_info)
}

// .DataExample data = 12;
inline bool TimeFrame::has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline void TimeFrame::clear_data() {
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::DataExample& TimeFrame::data() const {
  const ::DataExample* p = data_;
  // @@protoc_insertion_point(field_get:TimeFrame.data)
  return p != nullptr ? *p : *reinterpret_cast<const ::DataExample*>(
      &::_DataExample_default_instance_);
}
inline ::DataExample* TimeFrame::release_data() {
  // @@protoc_insertion_point(field_release:TimeFrame.data)
  
  ::DataExample* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::DataExample* TimeFrame::mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::DataExample>(GetArenaNoVirtual());
    data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TimeFrame.data)
  return data_;
}
inline void TimeFrame::set_allocated_data(::DataExample* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:TimeFrame.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2futils_2fdata_5fexample_2eproto
