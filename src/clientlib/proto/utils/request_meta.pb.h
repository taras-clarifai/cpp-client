// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/utils/request_meta.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2futils_2frequest_5fmeta_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2futils_2frequest_5fmeta_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/duration.pb.h>
#include "proto/clarifai/api/status/status_code.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2futils_2frequest_5fmeta_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2futils_2frequest_5fmeta_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2futils_2frequest_5fmeta_2eproto;
class RequestMeta;
class RequestMetaDefaultTypeInternal;
extern RequestMetaDefaultTypeInternal _RequestMeta_default_instance_;
class RequestMeta_MetadataEntry_DoNotUse;
class RequestMeta_MetadataEntry_DoNotUseDefaultTypeInternal;
extern RequestMeta_MetadataEntry_DoNotUseDefaultTypeInternal _RequestMeta_MetadataEntry_DoNotUse_default_instance_;
class ResponseStatus;
class ResponseStatusDefaultTypeInternal;
extern ResponseStatusDefaultTypeInternal _ResponseStatus_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::RequestMeta* Arena::CreateMaybeMessage<::RequestMeta>(Arena*);
template<> ::RequestMeta_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::RequestMeta_MetadataEntry_DoNotUse>(Arena*);
template<> ::ResponseStatus* Arena::CreateMaybeMessage<::ResponseStatus>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class ResponseStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ResponseStatus) */ {
 public:
  ResponseStatus();
  virtual ~ResponseStatus();

  ResponseStatus(const ResponseStatus& from);
  ResponseStatus(ResponseStatus&& from) noexcept
    : ResponseStatus() {
    *this = ::std::move(from);
  }

  inline ResponseStatus& operator=(const ResponseStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseStatus& operator=(ResponseStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResponseStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResponseStatus* internal_default_instance() {
    return reinterpret_cast<const ResponseStatus*>(
               &_ResponseStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ResponseStatus& a, ResponseStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResponseStatus* New() const final {
    return CreateMaybeMessage<ResponseStatus>(nullptr);
  }

  ResponseStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponseStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResponseStatus& from);
  void MergeFrom(const ResponseStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ResponseStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2frequest_5fmeta_2eproto);
    return ::descriptor_table_proto_2futils_2frequest_5fmeta_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserMsgFieldNumber = 3,
    kExceptionMsgFieldNumber = 4,
    kTraceFieldNumber = 5,
    kDurationFieldNumber = 1003,
    kOkFieldNumber = 1,
    kCodeFieldNumber = 2,
  };
  // string user_msg = 3;
  void clear_user_msg();
  const std::string& user_msg() const;
  void set_user_msg(const std::string& value);
  void set_user_msg(std::string&& value);
  void set_user_msg(const char* value);
  void set_user_msg(const char* value, size_t size);
  std::string* mutable_user_msg();
  std::string* release_user_msg();
  void set_allocated_user_msg(std::string* user_msg);

  // string exception_msg = 4;
  void clear_exception_msg();
  const std::string& exception_msg() const;
  void set_exception_msg(const std::string& value);
  void set_exception_msg(std::string&& value);
  void set_exception_msg(const char* value);
  void set_exception_msg(const char* value, size_t size);
  std::string* mutable_exception_msg();
  std::string* release_exception_msg();
  void set_allocated_exception_msg(std::string* exception_msg);

  // string trace = 5;
  void clear_trace();
  const std::string& trace() const;
  void set_trace(const std::string& value);
  void set_trace(std::string&& value);
  void set_trace(const char* value);
  void set_trace(const char* value, size_t size);
  std::string* mutable_trace();
  std::string* release_trace();
  void set_allocated_trace(std::string* trace);

  // .google.protobuf.Duration duration = 1003;
  bool has_duration() const;
  void clear_duration();
  const PROTOBUF_NAMESPACE_ID::Duration& duration() const;
  PROTOBUF_NAMESPACE_ID::Duration* release_duration();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_duration();
  void set_allocated_duration(PROTOBUF_NAMESPACE_ID::Duration* duration);

  // bool ok = 1;
  void clear_ok();
  bool ok() const;
  void set_ok(bool value);

  // .clarifai.api.status.StatusCode code = 2;
  void clear_code();
  ::clarifai::api::status::StatusCode code() const;
  void set_code(::clarifai::api::status::StatusCode value);

  // @@protoc_insertion_point(class_scope:ResponseStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exception_msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trace_;
  PROTOBUF_NAMESPACE_ID::Duration* duration_;
  bool ok_;
  int code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2frequest_5fmeta_2eproto;
};
// -------------------------------------------------------------------

class RequestMeta_MetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RequestMeta_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RequestMeta_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  RequestMeta_MetadataEntry_DoNotUse();
  RequestMeta_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const RequestMeta_MetadataEntry_DoNotUse& other);
  static const RequestMeta_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RequestMeta_MetadataEntry_DoNotUse*>(&_RequestMeta_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "RequestMeta.MetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "RequestMeta.MetadataEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2frequest_5fmeta_2eproto);
    return ::descriptor_table_proto_2futils_2frequest_5fmeta_2eproto.file_level_metadata[1];
  }

  public:
};

// -------------------------------------------------------------------

class RequestMeta :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RequestMeta) */ {
 public:
  RequestMeta();
  virtual ~RequestMeta();

  RequestMeta(const RequestMeta& from);
  RequestMeta(RequestMeta&& from) noexcept
    : RequestMeta() {
    *this = ::std::move(from);
  }

  inline RequestMeta& operator=(const RequestMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestMeta& operator=(RequestMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestMeta* internal_default_instance() {
    return reinterpret_cast<const RequestMeta*>(
               &_RequestMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RequestMeta& a, RequestMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestMeta* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestMeta* New() const final {
    return CreateMaybeMessage<RequestMeta>(nullptr);
  }

  RequestMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestMeta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestMeta& from);
  void MergeFrom(const RequestMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestMeta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RequestMeta";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2frequest_5fmeta_2eproto);
    return ::descriptor_table_proto_2futils_2frequest_5fmeta_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 2,
    kRequestIDFieldNumber = 1,
    kRequesterIDFieldNumber = 3,
  };
  // map<string, string> metadata = 2;
  int metadata_size() const;
  void clear_metadata();
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_metadata();

  // string requestID = 1;
  void clear_requestid();
  const std::string& requestid() const;
  void set_requestid(const std::string& value);
  void set_requestid(std::string&& value);
  void set_requestid(const char* value);
  void set_requestid(const char* value, size_t size);
  std::string* mutable_requestid();
  std::string* release_requestid();
  void set_allocated_requestid(std::string* requestid);

  // string requesterID = 3;
  void clear_requesterid();
  const std::string& requesterid() const;
  void set_requesterid(const std::string& value);
  void set_requesterid(std::string&& value);
  void set_requesterid(const char* value);
  void set_requesterid(const char* value, size_t size);
  std::string* mutable_requesterid();
  std::string* release_requesterid();
  void set_allocated_requesterid(std::string* requesterid);

  // @@protoc_insertion_point(class_scope:RequestMeta)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      RequestMeta_MetadataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requesterid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2frequest_5fmeta_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ResponseStatus

// bool ok = 1;
inline void ResponseStatus::clear_ok() {
  ok_ = false;
}
inline bool ResponseStatus::ok() const {
  // @@protoc_insertion_point(field_get:ResponseStatus.ok)
  return ok_;
}
inline void ResponseStatus::set_ok(bool value) {
  
  ok_ = value;
  // @@protoc_insertion_point(field_set:ResponseStatus.ok)
}

// .clarifai.api.status.StatusCode code = 2;
inline void ResponseStatus::clear_code() {
  code_ = 0;
}
inline ::clarifai::api::status::StatusCode ResponseStatus::code() const {
  // @@protoc_insertion_point(field_get:ResponseStatus.code)
  return static_cast< ::clarifai::api::status::StatusCode >(code_);
}
inline void ResponseStatus::set_code(::clarifai::api::status::StatusCode value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:ResponseStatus.code)
}

// string user_msg = 3;
inline void ResponseStatus::clear_user_msg() {
  user_msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ResponseStatus::user_msg() const {
  // @@protoc_insertion_point(field_get:ResponseStatus.user_msg)
  return user_msg_.GetNoArena();
}
inline void ResponseStatus::set_user_msg(const std::string& value) {
  
  user_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ResponseStatus.user_msg)
}
inline void ResponseStatus::set_user_msg(std::string&& value) {
  
  user_msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ResponseStatus.user_msg)
}
inline void ResponseStatus::set_user_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ResponseStatus.user_msg)
}
inline void ResponseStatus::set_user_msg(const char* value, size_t size) {
  
  user_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ResponseStatus.user_msg)
}
inline std::string* ResponseStatus::mutable_user_msg() {
  
  // @@protoc_insertion_point(field_mutable:ResponseStatus.user_msg)
  return user_msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ResponseStatus::release_user_msg() {
  // @@protoc_insertion_point(field_release:ResponseStatus.user_msg)
  
  return user_msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseStatus::set_allocated_user_msg(std::string* user_msg) {
  if (user_msg != nullptr) {
    
  } else {
    
  }
  user_msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_msg);
  // @@protoc_insertion_point(field_set_allocated:ResponseStatus.user_msg)
}

// string exception_msg = 4;
inline void ResponseStatus::clear_exception_msg() {
  exception_msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ResponseStatus::exception_msg() const {
  // @@protoc_insertion_point(field_get:ResponseStatus.exception_msg)
  return exception_msg_.GetNoArena();
}
inline void ResponseStatus::set_exception_msg(const std::string& value) {
  
  exception_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ResponseStatus.exception_msg)
}
inline void ResponseStatus::set_exception_msg(std::string&& value) {
  
  exception_msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ResponseStatus.exception_msg)
}
inline void ResponseStatus::set_exception_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exception_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ResponseStatus.exception_msg)
}
inline void ResponseStatus::set_exception_msg(const char* value, size_t size) {
  
  exception_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ResponseStatus.exception_msg)
}
inline std::string* ResponseStatus::mutable_exception_msg() {
  
  // @@protoc_insertion_point(field_mutable:ResponseStatus.exception_msg)
  return exception_msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ResponseStatus::release_exception_msg() {
  // @@protoc_insertion_point(field_release:ResponseStatus.exception_msg)
  
  return exception_msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseStatus::set_allocated_exception_msg(std::string* exception_msg) {
  if (exception_msg != nullptr) {
    
  } else {
    
  }
  exception_msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exception_msg);
  // @@protoc_insertion_point(field_set_allocated:ResponseStatus.exception_msg)
}

// string trace = 5;
inline void ResponseStatus::clear_trace() {
  trace_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ResponseStatus::trace() const {
  // @@protoc_insertion_point(field_get:ResponseStatus.trace)
  return trace_.GetNoArena();
}
inline void ResponseStatus::set_trace(const std::string& value) {
  
  trace_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ResponseStatus.trace)
}
inline void ResponseStatus::set_trace(std::string&& value) {
  
  trace_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ResponseStatus.trace)
}
inline void ResponseStatus::set_trace(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trace_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ResponseStatus.trace)
}
inline void ResponseStatus::set_trace(const char* value, size_t size) {
  
  trace_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ResponseStatus.trace)
}
inline std::string* ResponseStatus::mutable_trace() {
  
  // @@protoc_insertion_point(field_mutable:ResponseStatus.trace)
  return trace_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ResponseStatus::release_trace() {
  // @@protoc_insertion_point(field_release:ResponseStatus.trace)
  
  return trace_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseStatus::set_allocated_trace(std::string* trace) {
  if (trace != nullptr) {
    
  } else {
    
  }
  trace_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trace);
  // @@protoc_insertion_point(field_set_allocated:ResponseStatus.trace)
}

// .google.protobuf.Duration duration = 1003;
inline bool ResponseStatus::has_duration() const {
  return this != internal_default_instance() && duration_ != nullptr;
}
inline const PROTOBUF_NAMESPACE_ID::Duration& ResponseStatus::duration() const {
  const PROTOBUF_NAMESPACE_ID::Duration* p = duration_;
  // @@protoc_insertion_point(field_get:ResponseStatus.duration)
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Duration*>(
      &PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline PROTOBUF_NAMESPACE_ID::Duration* ResponseStatus::release_duration() {
  // @@protoc_insertion_point(field_release:ResponseStatus.duration)
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = duration_;
  duration_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* ResponseStatus::mutable_duration() {
  
  if (duration_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Duration>(GetArenaNoVirtual());
    duration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ResponseStatus.duration)
  return duration_;
}
inline void ResponseStatus::set_allocated_duration(PROTOBUF_NAMESPACE_ID::Duration* duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_);
  }
  if (duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration)->GetArena();
    if (message_arena != submessage_arena) {
      duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, duration, submessage_arena);
    }
    
  } else {
    
  }
  duration_ = duration;
  // @@protoc_insertion_point(field_set_allocated:ResponseStatus.duration)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// RequestMeta

// string requestID = 1;
inline void RequestMeta::clear_requestid() {
  requestid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RequestMeta::requestid() const {
  // @@protoc_insertion_point(field_get:RequestMeta.requestID)
  return requestid_.GetNoArena();
}
inline void RequestMeta::set_requestid(const std::string& value) {
  
  requestid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RequestMeta.requestID)
}
inline void RequestMeta::set_requestid(std::string&& value) {
  
  requestid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RequestMeta.requestID)
}
inline void RequestMeta::set_requestid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RequestMeta.requestID)
}
inline void RequestMeta::set_requestid(const char* value, size_t size) {
  
  requestid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RequestMeta.requestID)
}
inline std::string* RequestMeta::mutable_requestid() {
  
  // @@protoc_insertion_point(field_mutable:RequestMeta.requestID)
  return requestid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RequestMeta::release_requestid() {
  // @@protoc_insertion_point(field_release:RequestMeta.requestID)
  
  return requestid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RequestMeta::set_allocated_requestid(std::string* requestid) {
  if (requestid != nullptr) {
    
  } else {
    
  }
  requestid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestid);
  // @@protoc_insertion_point(field_set_allocated:RequestMeta.requestID)
}

// map<string, string> metadata = 2;
inline int RequestMeta::metadata_size() const {
  return metadata_.size();
}
inline void RequestMeta::clear_metadata() {
  metadata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
RequestMeta::metadata() const {
  // @@protoc_insertion_point(field_map:RequestMeta.metadata)
  return metadata_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
RequestMeta::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:RequestMeta.metadata)
  return metadata_.MutableMap();
}

// string requesterID = 3;
inline void RequestMeta::clear_requesterid() {
  requesterid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RequestMeta::requesterid() const {
  // @@protoc_insertion_point(field_get:RequestMeta.requesterID)
  return requesterid_.GetNoArena();
}
inline void RequestMeta::set_requesterid(const std::string& value) {
  
  requesterid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RequestMeta.requesterID)
}
inline void RequestMeta::set_requesterid(std::string&& value) {
  
  requesterid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RequestMeta.requesterID)
}
inline void RequestMeta::set_requesterid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requesterid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RequestMeta.requesterID)
}
inline void RequestMeta::set_requesterid(const char* value, size_t size) {
  
  requesterid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RequestMeta.requesterID)
}
inline std::string* RequestMeta::mutable_requesterid() {
  
  // @@protoc_insertion_point(field_mutable:RequestMeta.requesterID)
  return requesterid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RequestMeta::release_requesterid() {
  // @@protoc_insertion_point(field_release:RequestMeta.requesterID)
  
  return requesterid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RequestMeta::set_allocated_requesterid(std::string* requesterid) {
  if (requesterid != nullptr) {
    
  } else {
    
  }
  requesterid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requesterid);
  // @@protoc_insertion_point(field_set_allocated:RequestMeta.requesterID)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2futils_2frequest_5fmeta_2eproto
