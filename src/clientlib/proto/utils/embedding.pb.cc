// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/utils/embedding.proto

#include "proto/utils/embedding.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fbbox_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BBox_proto_2futils_2fbbox_2eproto;
class EmbeddingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Embedding> _instance;
} _Embedding_default_instance_;
static void InitDefaultsscc_info_Embedding_proto_2futils_2fembedding_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Embedding_default_instance_;
    new (ptr) ::Embedding();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Embedding::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Embedding_proto_2futils_2fembedding_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Embedding_proto_2futils_2fembedding_2eproto}, {
      &scc_info_BBox_proto_2futils_2fbbox_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2futils_2fembedding_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_proto_2futils_2fembedding_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2futils_2fembedding_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2futils_2fembedding_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Embedding, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Embedding, encoding_),
  PROTOBUF_FIELD_OFFSET(::Embedding, ndim_),
  PROTOBUF_FIELD_OFFSET(::Embedding, norm_),
  PROTOBUF_FIELD_OFFSET(::Embedding, float_array_),
  PROTOBUF_FIELD_OFFSET(::Embedding, min_),
  PROTOBUF_FIELD_OFFSET(::Embedding, max_),
  PROTOBUF_FIELD_OFFSET(::Embedding, nbits_),
  PROTOBUF_FIELD_OFFSET(::Embedding, byte_array_),
  PROTOBUF_FIELD_OFFSET(::Embedding, model_),
  PROTOBUF_FIELD_OFFSET(::Embedding, embed_box_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Embedding)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Embedding_default_instance_),
};

const char descriptor_table_protodef_proto_2futils_2fembedding_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033proto/utils/embedding.proto\032\026proto/uti"
  "ls/bbox.proto\"\210\002\n\tEmbedding\022%\n\010encoding\030"
  "\001 \001(\0162\023.Embedding.Encoding\022\014\n\004ndim\030\002 \001(\r"
  "\022\014\n\004norm\030\003 \001(\002\022\027\n\013float_array\030\004 \003(\002B\002\020\001\022"
  "\013\n\003min\030\005 \001(\002\022\013\n\003max\030\006 \001(\002\022\r\n\005nbits\030\007 \001(\r"
  "\022\022\n\nbyte_array\030\010 \001(\014\022\r\n\005model\030\t \001(\t\022\030\n\te"
  "mbed_box\030\n \001(\0132\005.BBox\"9\n\010Encoding\022\013\n\007INV"
  "ALID\020\000\022\n\n\006FLOATS\020\001\022\024\n\020QUANTIZED_MINMAX\020\002"
  "B\016\n\005utilsZ\005utilsb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2futils_2fembedding_2eproto_deps[1] = {
  &::descriptor_table_proto_2futils_2fbbox_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_2futils_2fembedding_2eproto_sccs[1] = {
  &scc_info_Embedding_proto_2futils_2fembedding_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2futils_2fembedding_2eproto_once;
static bool descriptor_table_proto_2futils_2fembedding_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2futils_2fembedding_2eproto = {
  &descriptor_table_proto_2futils_2fembedding_2eproto_initialized, descriptor_table_protodef_proto_2futils_2fembedding_2eproto, "proto/utils/embedding.proto", 344,
  &descriptor_table_proto_2futils_2fembedding_2eproto_once, descriptor_table_proto_2futils_2fembedding_2eproto_sccs, descriptor_table_proto_2futils_2fembedding_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_proto_2futils_2fembedding_2eproto::offsets,
  file_level_metadata_proto_2futils_2fembedding_2eproto, 1, file_level_enum_descriptors_proto_2futils_2fembedding_2eproto, file_level_service_descriptors_proto_2futils_2fembedding_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2futils_2fembedding_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_2futils_2fembedding_2eproto), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Embedding_Encoding_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2futils_2fembedding_2eproto);
  return file_level_enum_descriptors_proto_2futils_2fembedding_2eproto[0];
}
bool Embedding_Encoding_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Embedding_Encoding Embedding::INVALID;
constexpr Embedding_Encoding Embedding::FLOATS;
constexpr Embedding_Encoding Embedding::QUANTIZED_MINMAX;
constexpr Embedding_Encoding Embedding::Encoding_MIN;
constexpr Embedding_Encoding Embedding::Encoding_MAX;
constexpr int Embedding::Encoding_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Embedding::InitAsDefaultInstance() {
  ::_Embedding_default_instance_._instance.get_mutable()->embed_box_ = const_cast< ::BBox*>(
      ::BBox::internal_default_instance());
}
class Embedding::_Internal {
 public:
  static const ::BBox& embed_box(const Embedding* msg);
};

const ::BBox&
Embedding::_Internal::embed_box(const Embedding* msg) {
  return *msg->embed_box_;
}
void Embedding::clear_embed_box() {
  if (GetArenaNoVirtual() == nullptr && embed_box_ != nullptr) {
    delete embed_box_;
  }
  embed_box_ = nullptr;
}
Embedding::Embedding()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Embedding)
}
Embedding::Embedding(const Embedding& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      float_array_(from.float_array_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  byte_array_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.byte_array().empty()) {
    byte_array_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.byte_array_);
  }
  model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.model().empty()) {
    model_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
  if (from.has_embed_box()) {
    embed_box_ = new ::BBox(*from.embed_box_);
  } else {
    embed_box_ = nullptr;
  }
  ::memcpy(&encoding_, &from.encoding_,
    static_cast<size_t>(reinterpret_cast<char*>(&nbits_) -
    reinterpret_cast<char*>(&encoding_)) + sizeof(nbits_));
  // @@protoc_insertion_point(copy_constructor:Embedding)
}

void Embedding::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Embedding_proto_2futils_2fembedding_2eproto.base);
  byte_array_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&embed_box_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nbits_) -
      reinterpret_cast<char*>(&embed_box_)) + sizeof(nbits_));
}

Embedding::~Embedding() {
  // @@protoc_insertion_point(destructor:Embedding)
  SharedDtor();
}

void Embedding::SharedDtor() {
  byte_array_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete embed_box_;
}

void Embedding::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Embedding& Embedding::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Embedding_proto_2futils_2fembedding_2eproto.base);
  return *internal_default_instance();
}


void Embedding::Clear() {
// @@protoc_insertion_point(message_clear_start:Embedding)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  float_array_.Clear();
  byte_array_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && embed_box_ != nullptr) {
    delete embed_box_;
  }
  embed_box_ = nullptr;
  ::memset(&encoding_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nbits_) -
      reinterpret_cast<char*>(&encoding_)) + sizeof(nbits_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Embedding::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Embedding.Encoding encoding = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_encoding(static_cast<::Embedding_Encoding>(val));
        } else goto handle_unusual;
        continue;
      // uint32 ndim = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ndim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float norm = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          norm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float float_array = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_float_array(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          add_float_array(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float min = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float max = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 nbits = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          nbits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes byte_array = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_byte_array(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_model(), ptr, ctx, "Embedding.model");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BBox embed_box = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_embed_box(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Embedding::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Embedding)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Embedding.Encoding encoding = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_encoding(static_cast< ::Embedding_Encoding >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ndim = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ndim_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float norm = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &norm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float float_array = 4 [packed = true];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_float_array())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34u, input, this->mutable_float_array())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float min = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float max = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 nbits = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nbits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes byte_array = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_byte_array()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string model = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->model().data(), static_cast<int>(this->model().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Embedding.model"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .BBox embed_box = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_embed_box()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Embedding)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Embedding)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Embedding::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Embedding)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Embedding.Encoding encoding = 1;
  if (this->encoding() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->encoding(), output);
  }

  // uint32 ndim = 2;
  if (this->ndim() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->ndim(), output);
  }

  // float norm = 3;
  if (!(this->norm() <= 0 && this->norm() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->norm(), output);
  }

  // repeated float float_array = 4 [packed = true];
  if (this->float_array_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(4, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_float_array_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->float_array().data(), this->float_array_size(), output);
  }

  // float min = 5;
  if (!(this->min() <= 0 && this->min() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->min(), output);
  }

  // float max = 6;
  if (!(this->max() <= 0 && this->max() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->max(), output);
  }

  // uint32 nbits = 7;
  if (this->nbits() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(7, this->nbits(), output);
  }

  // bytes byte_array = 8;
  if (this->byte_array().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->byte_array(), output);
  }

  // string model = 9;
  if (this->model().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), static_cast<int>(this->model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Embedding.model");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->model(), output);
  }

  // .BBox embed_box = 10;
  if (this->has_embed_box()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, _Internal::embed_box(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Embedding)
}

::PROTOBUF_NAMESPACE_ID::uint8* Embedding::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Embedding)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Embedding.Encoding encoding = 1;
  if (this->encoding() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->encoding(), target);
  }

  // uint32 ndim = 2;
  if (this->ndim() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->ndim(), target);
  }

  // float norm = 3;
  if (!(this->norm() <= 0 && this->norm() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->norm(), target);
  }

  // repeated float float_array = 4 [packed = true];
  if (this->float_array_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      4,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _float_array_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->float_array_, target);
  }

  // float min = 5;
  if (!(this->min() <= 0 && this->min() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->min(), target);
  }

  // float max = 6;
  if (!(this->max() <= 0 && this->max() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->max(), target);
  }

  // uint32 nbits = 7;
  if (this->nbits() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->nbits(), target);
  }

  // bytes byte_array = 8;
  if (this->byte_array().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        8, this->byte_array(), target);
  }

  // string model = 9;
  if (this->model().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), static_cast<int>(this->model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Embedding.model");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        9, this->model(), target);
  }

  // .BBox embed_box = 10;
  if (this->has_embed_box()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::embed_box(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Embedding)
  return target;
}

size_t Embedding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Embedding)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float float_array = 4 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->float_array_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _float_array_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes byte_array = 8;
  if (this->byte_array().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->byte_array());
  }

  // string model = 9;
  if (this->model().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->model());
  }

  // .BBox embed_box = 10;
  if (this->has_embed_box()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *embed_box_);
  }

  // .Embedding.Encoding encoding = 1;
  if (this->encoding() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->encoding());
  }

  // uint32 ndim = 2;
  if (this->ndim() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->ndim());
  }

  // float norm = 3;
  if (!(this->norm() <= 0 && this->norm() >= 0)) {
    total_size += 1 + 4;
  }

  // float min = 5;
  if (!(this->min() <= 0 && this->min() >= 0)) {
    total_size += 1 + 4;
  }

  // float max = 6;
  if (!(this->max() <= 0 && this->max() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 nbits = 7;
  if (this->nbits() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->nbits());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Embedding::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Embedding)
  GOOGLE_DCHECK_NE(&from, this);
  const Embedding* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Embedding>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Embedding)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Embedding)
    MergeFrom(*source);
  }
}

void Embedding::MergeFrom(const Embedding& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Embedding)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  float_array_.MergeFrom(from.float_array_);
  if (from.byte_array().size() > 0) {

    byte_array_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.byte_array_);
  }
  if (from.model().size() > 0) {

    model_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
  if (from.has_embed_box()) {
    mutable_embed_box()->::BBox::MergeFrom(from.embed_box());
  }
  if (from.encoding() != 0) {
    set_encoding(from.encoding());
  }
  if (from.ndim() != 0) {
    set_ndim(from.ndim());
  }
  if (!(from.norm() <= 0 && from.norm() >= 0)) {
    set_norm(from.norm());
  }
  if (!(from.min() <= 0 && from.min() >= 0)) {
    set_min(from.min());
  }
  if (!(from.max() <= 0 && from.max() >= 0)) {
    set_max(from.max());
  }
  if (from.nbits() != 0) {
    set_nbits(from.nbits());
  }
}

void Embedding::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Embedding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Embedding::CopyFrom(const Embedding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Embedding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Embedding::IsInitialized() const {
  return true;
}

void Embedding::InternalSwap(Embedding* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  float_array_.InternalSwap(&other->float_array_);
  byte_array_.Swap(&other->byte_array_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  model_.Swap(&other->model_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(embed_box_, other->embed_box_);
  swap(encoding_, other->encoding_);
  swap(ndim_, other->ndim_);
  swap(norm_, other->norm_);
  swap(min_, other->min_);
  swap(max_, other->max_);
  swap(nbits_, other->nbits_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Embedding::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Embedding* Arena::CreateMaybeMessage< ::Embedding >(Arena* arena) {
  return Arena::CreateInternal< ::Embedding >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
