// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/utils/image.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2futils_2fimage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2futils_2fimage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "proto/utils/ndarray.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fimage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2futils_2fimage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2futils_2fimage_2eproto;
class Image;
class ImageDefaultTypeInternal;
extern ImageDefaultTypeInternal _Image_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Image* Arena::CreateMaybeMessage<::Image>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Image :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Image) */ {
 public:
  Image();
  virtual ~Image();

  Image(const Image& from);
  Image(Image&& from) noexcept
    : Image() {
    *this = ::std::move(from);
  }

  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }
  inline Image& operator=(Image&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Image& default_instance();

  enum DataCase {
    kEncodedBytes = 2,
    kNdarray = 3,
    kDecodedBytes = 5,
    DATA_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Image* internal_default_instance() {
    return reinterpret_cast<const Image*>(
               &_Image_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Image& a, Image& b) {
    a.Swap(&b);
  }
  inline void Swap(Image* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Image* New() const final {
    return CreateMaybeMessage<Image>(nullptr);
  }

  Image* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Image>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Image& from);
  void MergeFrom(const Image& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Image* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Image";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fimage_2eproto);
    return ::descriptor_table_proto_2futils_2fimage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kUrlFieldNumber = 4,
    kHostedOrigUrlFieldNumber = 6,
    kHostedSmallUrlFieldNumber = 7,
    kHostedLargeUrlFieldNumber = 8,
    kHostedTinyUrlFieldNumber = 9,
    kWidthFieldNumber = 1000,
    kHeightFieldNumber = 1001,
    kColorsFieldNumber = 1002,
    kMeanValueFieldNumber = 1003,
    kMinValueFieldNumber = 1004,
    kMaxValueFieldNumber = 1005,
    kEncodedBytesFieldNumber = 2,
    kNdarrayFieldNumber = 3,
    kDecodedBytesFieldNumber = 5,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string url = 4;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);

  // string hosted_orig_url = 6;
  void clear_hosted_orig_url();
  const std::string& hosted_orig_url() const;
  void set_hosted_orig_url(const std::string& value);
  void set_hosted_orig_url(std::string&& value);
  void set_hosted_orig_url(const char* value);
  void set_hosted_orig_url(const char* value, size_t size);
  std::string* mutable_hosted_orig_url();
  std::string* release_hosted_orig_url();
  void set_allocated_hosted_orig_url(std::string* hosted_orig_url);

  // string hosted_small_url = 7;
  void clear_hosted_small_url();
  const std::string& hosted_small_url() const;
  void set_hosted_small_url(const std::string& value);
  void set_hosted_small_url(std::string&& value);
  void set_hosted_small_url(const char* value);
  void set_hosted_small_url(const char* value, size_t size);
  std::string* mutable_hosted_small_url();
  std::string* release_hosted_small_url();
  void set_allocated_hosted_small_url(std::string* hosted_small_url);

  // string hosted_large_url = 8;
  void clear_hosted_large_url();
  const std::string& hosted_large_url() const;
  void set_hosted_large_url(const std::string& value);
  void set_hosted_large_url(std::string&& value);
  void set_hosted_large_url(const char* value);
  void set_hosted_large_url(const char* value, size_t size);
  std::string* mutable_hosted_large_url();
  std::string* release_hosted_large_url();
  void set_allocated_hosted_large_url(std::string* hosted_large_url);

  // string hosted_tiny_url = 9;
  void clear_hosted_tiny_url();
  const std::string& hosted_tiny_url() const;
  void set_hosted_tiny_url(const std::string& value);
  void set_hosted_tiny_url(std::string&& value);
  void set_hosted_tiny_url(const char* value);
  void set_hosted_tiny_url(const char* value, size_t size);
  std::string* mutable_hosted_tiny_url();
  std::string* release_hosted_tiny_url();
  void set_allocated_hosted_tiny_url(std::string* hosted_tiny_url);

  // int32 width = 1000;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 height = 1001;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 colors = 1002;
  void clear_colors();
  ::PROTOBUF_NAMESPACE_ID::int32 colors() const;
  void set_colors(::PROTOBUF_NAMESPACE_ID::int32 value);

  // float mean_value = 1003;
  void clear_mean_value();
  float mean_value() const;
  void set_mean_value(float value);

  // float min_value = 1004;
  void clear_min_value();
  float min_value() const;
  void set_min_value(float value);

  // float max_value = 1005;
  void clear_max_value();
  float max_value() const;
  void set_max_value(float value);

  // bytes encoded_bytes = 2;
  private:
  bool has_encoded_bytes() const;
  public:
  void clear_encoded_bytes();
  const std::string& encoded_bytes() const;
  void set_encoded_bytes(const std::string& value);
  void set_encoded_bytes(std::string&& value);
  void set_encoded_bytes(const char* value);
  void set_encoded_bytes(const void* value, size_t size);
  std::string* mutable_encoded_bytes();
  std::string* release_encoded_bytes();
  void set_allocated_encoded_bytes(std::string* encoded_bytes);

  // .NDArray ndarray = 3;
  bool has_ndarray() const;
  void clear_ndarray();
  const ::NDArray& ndarray() const;
  ::NDArray* release_ndarray();
  ::NDArray* mutable_ndarray();
  void set_allocated_ndarray(::NDArray* ndarray);

  // bytes decoded_bytes = 5;
  private:
  bool has_decoded_bytes() const;
  public:
  void clear_decoded_bytes();
  const std::string& decoded_bytes() const;
  void set_decoded_bytes(const std::string& value);
  void set_decoded_bytes(std::string&& value);
  void set_decoded_bytes(const char* value);
  void set_decoded_bytes(const void* value, size_t size);
  std::string* mutable_decoded_bytes();
  std::string* release_decoded_bytes();
  void set_allocated_decoded_bytes(std::string* decoded_bytes);

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:Image)
 private:
  class _Internal;
  void set_has_encoded_bytes();
  void set_has_ndarray();
  void set_has_decoded_bytes();

  inline bool has_data() const;
  inline void clear_has_data();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hosted_orig_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hosted_small_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hosted_large_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hosted_tiny_url_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::int32 colors_;
  float mean_value_;
  float min_value_;
  float max_value_;
  union DataUnion {
    DataUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encoded_bytes_;
    ::NDArray* ndarray_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr decoded_bytes_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_proto_2futils_2fimage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Image

// string name = 1;
inline void Image::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Image::name() const {
  // @@protoc_insertion_point(field_get:Image.name)
  return name_.GetNoArena();
}
inline void Image::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Image.name)
}
inline void Image::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Image.name)
}
inline void Image::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Image.name)
}
inline void Image::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Image.name)
}
inline std::string* Image::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Image.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Image::release_name() {
  // @@protoc_insertion_point(field_release:Image.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Image.name)
}

// bytes encoded_bytes = 2;
inline bool Image::has_encoded_bytes() const {
  return data_case() == kEncodedBytes;
}
inline void Image::set_has_encoded_bytes() {
  _oneof_case_[0] = kEncodedBytes;
}
inline void Image::clear_encoded_bytes() {
  if (has_encoded_bytes()) {
    data_.encoded_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_data();
  }
}
inline const std::string& Image::encoded_bytes() const {
  // @@protoc_insertion_point(field_get:Image.encoded_bytes)
  if (has_encoded_bytes()) {
    return data_.encoded_bytes_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Image::set_encoded_bytes(const std::string& value) {
  // @@protoc_insertion_point(field_set:Image.encoded_bytes)
  if (!has_encoded_bytes()) {
    clear_data();
    set_has_encoded_bytes();
    data_.encoded_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.encoded_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Image.encoded_bytes)
}
inline void Image::set_encoded_bytes(std::string&& value) {
  // @@protoc_insertion_point(field_set:Image.encoded_bytes)
  if (!has_encoded_bytes()) {
    clear_data();
    set_has_encoded_bytes();
    data_.encoded_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.encoded_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Image.encoded_bytes)
}
inline void Image::set_encoded_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_encoded_bytes()) {
    clear_data();
    set_has_encoded_bytes();
    data_.encoded_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.encoded_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Image.encoded_bytes)
}
inline void Image::set_encoded_bytes(const void* value, size_t size) {
  if (!has_encoded_bytes()) {
    clear_data();
    set_has_encoded_bytes();
    data_.encoded_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.encoded_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Image.encoded_bytes)
}
inline std::string* Image::mutable_encoded_bytes() {
  if (!has_encoded_bytes()) {
    clear_data();
    set_has_encoded_bytes();
    data_.encoded_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:Image.encoded_bytes)
  return data_.encoded_bytes_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Image::release_encoded_bytes() {
  // @@protoc_insertion_point(field_release:Image.encoded_bytes)
  if (has_encoded_bytes()) {
    clear_has_data();
    return data_.encoded_bytes_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void Image::set_allocated_encoded_bytes(std::string* encoded_bytes) {
  if (has_data()) {
    clear_data();
  }
  if (encoded_bytes != nullptr) {
    set_has_encoded_bytes();
    data_.encoded_bytes_.UnsafeSetDefault(encoded_bytes);
  }
  // @@protoc_insertion_point(field_set_allocated:Image.encoded_bytes)
}

// .NDArray ndarray = 3;
inline bool Image::has_ndarray() const {
  return data_case() == kNdarray;
}
inline void Image::set_has_ndarray() {
  _oneof_case_[0] = kNdarray;
}
inline ::NDArray* Image::release_ndarray() {
  // @@protoc_insertion_point(field_release:Image.ndarray)
  if (has_ndarray()) {
    clear_has_data();
      ::NDArray* temp = data_.ndarray_;
    data_.ndarray_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::NDArray& Image::ndarray() const {
  // @@protoc_insertion_point(field_get:Image.ndarray)
  return has_ndarray()
      ? *data_.ndarray_
      : *reinterpret_cast< ::NDArray*>(&::_NDArray_default_instance_);
}
inline ::NDArray* Image::mutable_ndarray() {
  if (!has_ndarray()) {
    clear_data();
    set_has_ndarray();
    data_.ndarray_ = CreateMaybeMessage< ::NDArray >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Image.ndarray)
  return data_.ndarray_;
}

// bytes decoded_bytes = 5;
inline bool Image::has_decoded_bytes() const {
  return data_case() == kDecodedBytes;
}
inline void Image::set_has_decoded_bytes() {
  _oneof_case_[0] = kDecodedBytes;
}
inline void Image::clear_decoded_bytes() {
  if (has_decoded_bytes()) {
    data_.decoded_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_data();
  }
}
inline const std::string& Image::decoded_bytes() const {
  // @@protoc_insertion_point(field_get:Image.decoded_bytes)
  if (has_decoded_bytes()) {
    return data_.decoded_bytes_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Image::set_decoded_bytes(const std::string& value) {
  // @@protoc_insertion_point(field_set:Image.decoded_bytes)
  if (!has_decoded_bytes()) {
    clear_data();
    set_has_decoded_bytes();
    data_.decoded_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.decoded_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Image.decoded_bytes)
}
inline void Image::set_decoded_bytes(std::string&& value) {
  // @@protoc_insertion_point(field_set:Image.decoded_bytes)
  if (!has_decoded_bytes()) {
    clear_data();
    set_has_decoded_bytes();
    data_.decoded_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.decoded_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Image.decoded_bytes)
}
inline void Image::set_decoded_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_decoded_bytes()) {
    clear_data();
    set_has_decoded_bytes();
    data_.decoded_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.decoded_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Image.decoded_bytes)
}
inline void Image::set_decoded_bytes(const void* value, size_t size) {
  if (!has_decoded_bytes()) {
    clear_data();
    set_has_decoded_bytes();
    data_.decoded_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.decoded_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Image.decoded_bytes)
}
inline std::string* Image::mutable_decoded_bytes() {
  if (!has_decoded_bytes()) {
    clear_data();
    set_has_decoded_bytes();
    data_.decoded_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:Image.decoded_bytes)
  return data_.decoded_bytes_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Image::release_decoded_bytes() {
  // @@protoc_insertion_point(field_release:Image.decoded_bytes)
  if (has_decoded_bytes()) {
    clear_has_data();
    return data_.decoded_bytes_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void Image::set_allocated_decoded_bytes(std::string* decoded_bytes) {
  if (has_data()) {
    clear_data();
  }
  if (decoded_bytes != nullptr) {
    set_has_decoded_bytes();
    data_.decoded_bytes_.UnsafeSetDefault(decoded_bytes);
  }
  // @@protoc_insertion_point(field_set_allocated:Image.decoded_bytes)
}

// string url = 4;
inline void Image::clear_url() {
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Image::url() const {
  // @@protoc_insertion_point(field_get:Image.url)
  return url_.GetNoArena();
}
inline void Image::set_url(const std::string& value) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Image.url)
}
inline void Image::set_url(std::string&& value) {
  
  url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Image.url)
}
inline void Image::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Image.url)
}
inline void Image::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Image.url)
}
inline std::string* Image::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:Image.url)
  return url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Image::release_url() {
  // @@protoc_insertion_point(field_release:Image.url)
  
  return url_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:Image.url)
}

// string hosted_orig_url = 6;
inline void Image::clear_hosted_orig_url() {
  hosted_orig_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Image::hosted_orig_url() const {
  // @@protoc_insertion_point(field_get:Image.hosted_orig_url)
  return hosted_orig_url_.GetNoArena();
}
inline void Image::set_hosted_orig_url(const std::string& value) {
  
  hosted_orig_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Image.hosted_orig_url)
}
inline void Image::set_hosted_orig_url(std::string&& value) {
  
  hosted_orig_url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Image.hosted_orig_url)
}
inline void Image::set_hosted_orig_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hosted_orig_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Image.hosted_orig_url)
}
inline void Image::set_hosted_orig_url(const char* value, size_t size) {
  
  hosted_orig_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Image.hosted_orig_url)
}
inline std::string* Image::mutable_hosted_orig_url() {
  
  // @@protoc_insertion_point(field_mutable:Image.hosted_orig_url)
  return hosted_orig_url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Image::release_hosted_orig_url() {
  // @@protoc_insertion_point(field_release:Image.hosted_orig_url)
  
  return hosted_orig_url_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_allocated_hosted_orig_url(std::string* hosted_orig_url) {
  if (hosted_orig_url != nullptr) {
    
  } else {
    
  }
  hosted_orig_url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hosted_orig_url);
  // @@protoc_insertion_point(field_set_allocated:Image.hosted_orig_url)
}

// string hosted_small_url = 7;
inline void Image::clear_hosted_small_url() {
  hosted_small_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Image::hosted_small_url() const {
  // @@protoc_insertion_point(field_get:Image.hosted_small_url)
  return hosted_small_url_.GetNoArena();
}
inline void Image::set_hosted_small_url(const std::string& value) {
  
  hosted_small_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Image.hosted_small_url)
}
inline void Image::set_hosted_small_url(std::string&& value) {
  
  hosted_small_url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Image.hosted_small_url)
}
inline void Image::set_hosted_small_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hosted_small_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Image.hosted_small_url)
}
inline void Image::set_hosted_small_url(const char* value, size_t size) {
  
  hosted_small_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Image.hosted_small_url)
}
inline std::string* Image::mutable_hosted_small_url() {
  
  // @@protoc_insertion_point(field_mutable:Image.hosted_small_url)
  return hosted_small_url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Image::release_hosted_small_url() {
  // @@protoc_insertion_point(field_release:Image.hosted_small_url)
  
  return hosted_small_url_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_allocated_hosted_small_url(std::string* hosted_small_url) {
  if (hosted_small_url != nullptr) {
    
  } else {
    
  }
  hosted_small_url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hosted_small_url);
  // @@protoc_insertion_point(field_set_allocated:Image.hosted_small_url)
}

// string hosted_large_url = 8;
inline void Image::clear_hosted_large_url() {
  hosted_large_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Image::hosted_large_url() const {
  // @@protoc_insertion_point(field_get:Image.hosted_large_url)
  return hosted_large_url_.GetNoArena();
}
inline void Image::set_hosted_large_url(const std::string& value) {
  
  hosted_large_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Image.hosted_large_url)
}
inline void Image::set_hosted_large_url(std::string&& value) {
  
  hosted_large_url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Image.hosted_large_url)
}
inline void Image::set_hosted_large_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hosted_large_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Image.hosted_large_url)
}
inline void Image::set_hosted_large_url(const char* value, size_t size) {
  
  hosted_large_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Image.hosted_large_url)
}
inline std::string* Image::mutable_hosted_large_url() {
  
  // @@protoc_insertion_point(field_mutable:Image.hosted_large_url)
  return hosted_large_url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Image::release_hosted_large_url() {
  // @@protoc_insertion_point(field_release:Image.hosted_large_url)
  
  return hosted_large_url_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_allocated_hosted_large_url(std::string* hosted_large_url) {
  if (hosted_large_url != nullptr) {
    
  } else {
    
  }
  hosted_large_url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hosted_large_url);
  // @@protoc_insertion_point(field_set_allocated:Image.hosted_large_url)
}

// string hosted_tiny_url = 9;
inline void Image::clear_hosted_tiny_url() {
  hosted_tiny_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Image::hosted_tiny_url() const {
  // @@protoc_insertion_point(field_get:Image.hosted_tiny_url)
  return hosted_tiny_url_.GetNoArena();
}
inline void Image::set_hosted_tiny_url(const std::string& value) {
  
  hosted_tiny_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Image.hosted_tiny_url)
}
inline void Image::set_hosted_tiny_url(std::string&& value) {
  
  hosted_tiny_url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Image.hosted_tiny_url)
}
inline void Image::set_hosted_tiny_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hosted_tiny_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Image.hosted_tiny_url)
}
inline void Image::set_hosted_tiny_url(const char* value, size_t size) {
  
  hosted_tiny_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Image.hosted_tiny_url)
}
inline std::string* Image::mutable_hosted_tiny_url() {
  
  // @@protoc_insertion_point(field_mutable:Image.hosted_tiny_url)
  return hosted_tiny_url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Image::release_hosted_tiny_url() {
  // @@protoc_insertion_point(field_release:Image.hosted_tiny_url)
  
  return hosted_tiny_url_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_allocated_hosted_tiny_url(std::string* hosted_tiny_url) {
  if (hosted_tiny_url != nullptr) {
    
  } else {
    
  }
  hosted_tiny_url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hosted_tiny_url);
  // @@protoc_insertion_point(field_set_allocated:Image.hosted_tiny_url)
}

// int32 width = 1000;
inline void Image::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Image::width() const {
  // @@protoc_insertion_point(field_get:Image.width)
  return width_;
}
inline void Image::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:Image.width)
}

// int32 height = 1001;
inline void Image::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Image::height() const {
  // @@protoc_insertion_point(field_get:Image.height)
  return height_;
}
inline void Image::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:Image.height)
}

// int32 colors = 1002;
inline void Image::clear_colors() {
  colors_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Image::colors() const {
  // @@protoc_insertion_point(field_get:Image.colors)
  return colors_;
}
inline void Image::set_colors(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  colors_ = value;
  // @@protoc_insertion_point(field_set:Image.colors)
}

// float mean_value = 1003;
inline void Image::clear_mean_value() {
  mean_value_ = 0;
}
inline float Image::mean_value() const {
  // @@protoc_insertion_point(field_get:Image.mean_value)
  return mean_value_;
}
inline void Image::set_mean_value(float value) {
  
  mean_value_ = value;
  // @@protoc_insertion_point(field_set:Image.mean_value)
}

// float min_value = 1004;
inline void Image::clear_min_value() {
  min_value_ = 0;
}
inline float Image::min_value() const {
  // @@protoc_insertion_point(field_get:Image.min_value)
  return min_value_;
}
inline void Image::set_min_value(float value) {
  
  min_value_ = value;
  // @@protoc_insertion_point(field_set:Image.min_value)
}

// float max_value = 1005;
inline void Image::clear_max_value() {
  max_value_ = 0;
}
inline float Image::max_value() const {
  // @@protoc_insertion_point(field_get:Image.max_value)
  return max_value_;
}
inline void Image::set_max_value(float value) {
  
  max_value_ = value;
  // @@protoc_insertion_point(field_set:Image.max_value)
}

inline bool Image::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void Image::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline Image::DataCase Image::data_case() const {
  return Image::DataCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2futils_2fimage_2eproto
