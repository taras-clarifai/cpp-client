// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/utils/lopq_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2futils_2flopq_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2futils_2flopq_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "proto/clarifai/api/utils/extensions.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2futils_2flopq_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2futils_2flopq_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2futils_2flopq_5fservice_2eproto;
class LOPQEvalResult;
class LOPQEvalResultDefaultTypeInternal;
extern LOPQEvalResultDefaultTypeInternal _LOPQEvalResult_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::LOPQEvalResult* Arena::CreateMaybeMessage<::LOPQEvalResult>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class LOPQEvalResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LOPQEvalResult) */ {
 public:
  LOPQEvalResult();
  virtual ~LOPQEvalResult();

  LOPQEvalResult(const LOPQEvalResult& from);
  LOPQEvalResult(LOPQEvalResult&& from) noexcept
    : LOPQEvalResult() {
    *this = ::std::move(from);
  }

  inline LOPQEvalResult& operator=(const LOPQEvalResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline LOPQEvalResult& operator=(LOPQEvalResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LOPQEvalResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LOPQEvalResult* internal_default_instance() {
    return reinterpret_cast<const LOPQEvalResult*>(
               &_LOPQEvalResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LOPQEvalResult& a, LOPQEvalResult& b) {
    a.Swap(&b);
  }
  inline void Swap(LOPQEvalResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LOPQEvalResult* New() const final {
    return CreateMaybeMessage<LOPQEvalResult>(nullptr);
  }

  LOPQEvalResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LOPQEvalResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LOPQEvalResult& from);
  void MergeFrom(const LOPQEvalResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LOPQEvalResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LOPQEvalResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2flopq_5fservice_2eproto);
    return ::descriptor_table_proto_2futils_2flopq_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKFieldNumber = 1,
    kRecallVsBruteForceFieldNumber = 2,
    kKendallTauVsBruteForceFieldNumber = 3,
    kMostFrequentCodePercentFieldNumber = 4,
    kLopqNdcgFieldNumber = 5,
    kBruteForceNdcgFieldNumber = 6,
  };
  // int32 k = 1;
  void clear_k();
  ::PROTOBUF_NAMESPACE_ID::int32 k() const;
  void set_k(::PROTOBUF_NAMESPACE_ID::int32 value);

  // float recall_vs_brute_force = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_recall_vs_brute_force();
  float recall_vs_brute_force() const;
  void set_recall_vs_brute_force(float value);

  // float kendall_tau_vs_brute_force = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_kendall_tau_vs_brute_force();
  float kendall_tau_vs_brute_force() const;
  void set_kendall_tau_vs_brute_force(float value);

  // float most_frequent_code_percent = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_most_frequent_code_percent();
  float most_frequent_code_percent() const;
  void set_most_frequent_code_percent(float value);

  // float lopq_ndcg = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_lopq_ndcg();
  float lopq_ndcg() const;
  void set_lopq_ndcg(float value);

  // float brute_force_ndcg = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_brute_force_ndcg();
  float brute_force_ndcg() const;
  void set_brute_force_ndcg(float value);

  // @@protoc_insertion_point(class_scope:LOPQEvalResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 k_;
  float recall_vs_brute_force_;
  float kendall_tau_vs_brute_force_;
  float most_frequent_code_percent_;
  float lopq_ndcg_;
  float brute_force_ndcg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2flopq_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LOPQEvalResult

// int32 k = 1;
inline void LOPQEvalResult::clear_k() {
  k_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LOPQEvalResult::k() const {
  // @@protoc_insertion_point(field_get:LOPQEvalResult.k)
  return k_;
}
inline void LOPQEvalResult::set_k(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  k_ = value;
  // @@protoc_insertion_point(field_set:LOPQEvalResult.k)
}

// float recall_vs_brute_force = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void LOPQEvalResult::clear_recall_vs_brute_force() {
  recall_vs_brute_force_ = 0;
}
inline float LOPQEvalResult::recall_vs_brute_force() const {
  // @@protoc_insertion_point(field_get:LOPQEvalResult.recall_vs_brute_force)
  return recall_vs_brute_force_;
}
inline void LOPQEvalResult::set_recall_vs_brute_force(float value) {
  
  recall_vs_brute_force_ = value;
  // @@protoc_insertion_point(field_set:LOPQEvalResult.recall_vs_brute_force)
}

// float kendall_tau_vs_brute_force = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void LOPQEvalResult::clear_kendall_tau_vs_brute_force() {
  kendall_tau_vs_brute_force_ = 0;
}
inline float LOPQEvalResult::kendall_tau_vs_brute_force() const {
  // @@protoc_insertion_point(field_get:LOPQEvalResult.kendall_tau_vs_brute_force)
  return kendall_tau_vs_brute_force_;
}
inline void LOPQEvalResult::set_kendall_tau_vs_brute_force(float value) {
  
  kendall_tau_vs_brute_force_ = value;
  // @@protoc_insertion_point(field_set:LOPQEvalResult.kendall_tau_vs_brute_force)
}

// float most_frequent_code_percent = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void LOPQEvalResult::clear_most_frequent_code_percent() {
  most_frequent_code_percent_ = 0;
}
inline float LOPQEvalResult::most_frequent_code_percent() const {
  // @@protoc_insertion_point(field_get:LOPQEvalResult.most_frequent_code_percent)
  return most_frequent_code_percent_;
}
inline void LOPQEvalResult::set_most_frequent_code_percent(float value) {
  
  most_frequent_code_percent_ = value;
  // @@protoc_insertion_point(field_set:LOPQEvalResult.most_frequent_code_percent)
}

// float lopq_ndcg = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void LOPQEvalResult::clear_lopq_ndcg() {
  lopq_ndcg_ = 0;
}
inline float LOPQEvalResult::lopq_ndcg() const {
  // @@protoc_insertion_point(field_get:LOPQEvalResult.lopq_ndcg)
  return lopq_ndcg_;
}
inline void LOPQEvalResult::set_lopq_ndcg(float value) {
  
  lopq_ndcg_ = value;
  // @@protoc_insertion_point(field_set:LOPQEvalResult.lopq_ndcg)
}

// float brute_force_ndcg = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void LOPQEvalResult::clear_brute_force_ndcg() {
  brute_force_ndcg_ = 0;
}
inline float LOPQEvalResult::brute_force_ndcg() const {
  // @@protoc_insertion_point(field_get:LOPQEvalResult.brute_force_ndcg)
  return brute_force_ndcg_;
}
inline void LOPQEvalResult::set_brute_force_ndcg(float value) {
  
  brute_force_ndcg_ = value;
  // @@protoc_insertion_point(field_set:LOPQEvalResult.brute_force_ndcg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2futils_2flopq_5fservice_2eproto
