// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/utils/checkpoint.proto

#include "proto/utils/checkpoint.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fcheckpoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelBytes_proto_2futils_2fcheckpoint_2eproto;
class LoadCheckpointScopeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadCheckpointScope> _instance;
  ::PROTOBUF_NAMESPACE_ID::int64 eid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr checkpoint_;
  const ::ModelBytes* model_bytes_;
} _LoadCheckpointScope_default_instance_;
class ModelBytesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelBytes> _instance;
} _ModelBytes_default_instance_;
static void InitDefaultsscc_info_LoadCheckpointScope_proto_2futils_2fcheckpoint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LoadCheckpointScope_default_instance_;
    new (ptr) ::LoadCheckpointScope();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LoadCheckpointScope::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoadCheckpointScope_proto_2futils_2fcheckpoint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_LoadCheckpointScope_proto_2futils_2fcheckpoint_2eproto}, {
      &scc_info_ModelBytes_proto_2futils_2fcheckpoint_2eproto.base,}};

static void InitDefaultsscc_info_ModelBytes_proto_2futils_2fcheckpoint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ModelBytes_default_instance_;
    new (ptr) ::ModelBytes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ModelBytes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelBytes_proto_2futils_2fcheckpoint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ModelBytes_proto_2futils_2fcheckpoint_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2futils_2fcheckpoint_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_proto_2futils_2fcheckpoint_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2futils_2fcheckpoint_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2futils_2fcheckpoint_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LoadCheckpointScope, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::LoadCheckpointScope, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::LoadCheckpointScopeDefaultTypeInternal, eid_),
  offsetof(::LoadCheckpointScopeDefaultTypeInternal, checkpoint_),
  offsetof(::LoadCheckpointScopeDefaultTypeInternal, model_bytes_),
  PROTOBUF_FIELD_OFFSET(::LoadCheckpointScope, regex_),
  PROTOBUF_FIELD_OFFSET(::LoadCheckpointScope, checkpoint_regex_),
  PROTOBUF_FIELD_OFFSET(::LoadCheckpointScope, exclude_regex_),
  PROTOBUF_FIELD_OFFSET(::LoadCheckpointScope, skip_missing_),
  PROTOBUF_FIELD_OFFSET(::LoadCheckpointScope, source_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ModelBytes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ModelBytes, frozen_meta_graph_),
  PROTOBUF_FIELD_OFFSET(::ModelBytes, mmapped_graph_def_),
  PROTOBUF_FIELD_OFFSET(::ModelBytes, model_format_),
  PROTOBUF_FIELD_OFFSET(::ModelBytes, serialized_trace_),
  PROTOBUF_FIELD_OFFSET(::ModelBytes, device_type_),
  PROTOBUF_FIELD_OFFSET(::ModelBytes, model_module_),
  PROTOBUF_FIELD_OFFSET(::ModelBytes, tokenizer_vocab_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::LoadCheckpointScope)},
  { 13, -1, sizeof(::ModelBytes)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LoadCheckpointScope_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ModelBytes_default_instance_),
};

const char descriptor_table_protodef_proto_2futils_2fcheckpoint_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034proto/utils/checkpoint.proto\"\276\001\n\023LoadC"
  "heckpointScope\022\r\n\003eid\030\001 \001(\003H\000\022\024\n\ncheckpo"
  "int\030\002 \001(\tH\000\022\"\n\013model_bytes\030\007 \001(\0132\013.Model"
  "BytesH\000\022\r\n\005regex\030\003 \001(\t\022\030\n\020checkpoint_reg"
  "ex\030\004 \001(\t\022\025\n\rexclude_regex\030\005 \001(\t\022\024\n\014skip_"
  "missing\030\006 \001(\010B\010\n\006source\"\304\001\n\nModelBytes\022\031"
  "\n\021frozen_meta_graph\030\001 \001(\014\022\031\n\021mmapped_gra"
  "ph_def\030\002 \001(\014\022\"\n\014model_format\030\003 \001(\0162\014.Mod"
  "elFormat\022\030\n\020serialized_trace\030\004 \001(\014\022\023\n\013de"
  "vice_type\030\005 \001(\t\022\024\n\014model_module\030\006 \001(\t\022\027\n"
  "\017tokenizer_vocab\030\007 \001(\t*w\n\013ModelFormat\022\n\n"
  "\006NotSet\020\000\022\016\n\nTensorFlow\020\001\022\r\n\tAmbarella\020\002"
  "\022\014\n\010TensorRT\020\003\022\022\n\016TensorFlowLite\020\004\022\016\n\nTF"
  "_STRAITE\020\005\022\013\n\007PyTorch\020\006B\016\n\005utilsZ\005utilsb"
  "\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2futils_2fcheckpoint_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_2futils_2fcheckpoint_2eproto_sccs[2] = {
  &scc_info_LoadCheckpointScope_proto_2futils_2fcheckpoint_2eproto.base,
  &scc_info_ModelBytes_proto_2futils_2fcheckpoint_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2futils_2fcheckpoint_2eproto_once;
static bool descriptor_table_proto_2futils_2fcheckpoint_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2futils_2fcheckpoint_2eproto = {
  &descriptor_table_proto_2futils_2fcheckpoint_2eproto_initialized, descriptor_table_protodef_proto_2futils_2fcheckpoint_2eproto, "proto/utils/checkpoint.proto", 567,
  &descriptor_table_proto_2futils_2fcheckpoint_2eproto_once, descriptor_table_proto_2futils_2fcheckpoint_2eproto_sccs, descriptor_table_proto_2futils_2fcheckpoint_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_proto_2futils_2fcheckpoint_2eproto::offsets,
  file_level_metadata_proto_2futils_2fcheckpoint_2eproto, 2, file_level_enum_descriptors_proto_2futils_2fcheckpoint_2eproto, file_level_service_descriptors_proto_2futils_2fcheckpoint_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2futils_2fcheckpoint_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_2futils_2fcheckpoint_2eproto), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ModelFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2futils_2fcheckpoint_2eproto);
  return file_level_enum_descriptors_proto_2futils_2fcheckpoint_2eproto[0];
}
bool ModelFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void LoadCheckpointScope::InitAsDefaultInstance() {
  ::_LoadCheckpointScope_default_instance_.eid_ = PROTOBUF_LONGLONG(0);
  ::_LoadCheckpointScope_default_instance_.checkpoint_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::_LoadCheckpointScope_default_instance_.model_bytes_ = const_cast< ::ModelBytes*>(
      ::ModelBytes::internal_default_instance());
}
class LoadCheckpointScope::_Internal {
 public:
  static const ::ModelBytes& model_bytes(const LoadCheckpointScope* msg);
};

const ::ModelBytes&
LoadCheckpointScope::_Internal::model_bytes(const LoadCheckpointScope* msg) {
  return *msg->source_.model_bytes_;
}
void LoadCheckpointScope::set_allocated_model_bytes(::ModelBytes* model_bytes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_source();
  if (model_bytes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      model_bytes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model_bytes, submessage_arena);
    }
    set_has_model_bytes();
    source_.model_bytes_ = model_bytes;
  }
  // @@protoc_insertion_point(field_set_allocated:LoadCheckpointScope.model_bytes)
}
LoadCheckpointScope::LoadCheckpointScope()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LoadCheckpointScope)
}
LoadCheckpointScope::LoadCheckpointScope(const LoadCheckpointScope& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  regex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.regex().empty()) {
    regex_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.regex_);
  }
  checkpoint_regex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.checkpoint_regex().empty()) {
    checkpoint_regex_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.checkpoint_regex_);
  }
  exclude_regex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.exclude_regex().empty()) {
    exclude_regex_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.exclude_regex_);
  }
  skip_missing_ = from.skip_missing_;
  clear_has_source();
  switch (from.source_case()) {
    case kEid: {
      set_eid(from.eid());
      break;
    }
    case kCheckpoint: {
      set_checkpoint(from.checkpoint());
      break;
    }
    case kModelBytes: {
      mutable_model_bytes()->::ModelBytes::MergeFrom(from.model_bytes());
      break;
    }
    case SOURCE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:LoadCheckpointScope)
}

void LoadCheckpointScope::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoadCheckpointScope_proto_2futils_2fcheckpoint_2eproto.base);
  regex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  checkpoint_regex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exclude_regex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  skip_missing_ = false;
  clear_has_source();
}

LoadCheckpointScope::~LoadCheckpointScope() {
  // @@protoc_insertion_point(destructor:LoadCheckpointScope)
  SharedDtor();
}

void LoadCheckpointScope::SharedDtor() {
  regex_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  checkpoint_regex_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exclude_regex_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_source()) {
    clear_source();
  }
}

void LoadCheckpointScope::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadCheckpointScope& LoadCheckpointScope::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoadCheckpointScope_proto_2futils_2fcheckpoint_2eproto.base);
  return *internal_default_instance();
}


void LoadCheckpointScope::clear_source() {
// @@protoc_insertion_point(one_of_clear_start:LoadCheckpointScope)
  switch (source_case()) {
    case kEid: {
      // No need to clear
      break;
    }
    case kCheckpoint: {
      source_.checkpoint_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kModelBytes: {
      delete source_.model_bytes_;
      break;
    }
    case SOURCE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SOURCE_NOT_SET;
}


void LoadCheckpointScope::Clear() {
// @@protoc_insertion_point(message_clear_start:LoadCheckpointScope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  regex_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  checkpoint_regex_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exclude_regex_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  skip_missing_ = false;
  clear_source();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LoadCheckpointScope::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 eid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          set_eid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string checkpoint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_checkpoint(), ptr, ctx, "LoadCheckpointScope.checkpoint");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string regex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_regex(), ptr, ctx, "LoadCheckpointScope.regex");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string checkpoint_regex = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_checkpoint_regex(), ptr, ctx, "LoadCheckpointScope.checkpoint_regex");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string exclude_regex = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_exclude_regex(), ptr, ctx, "LoadCheckpointScope.exclude_regex");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool skip_missing = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          skip_missing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ModelBytes model_bytes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_model_bytes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LoadCheckpointScope::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:LoadCheckpointScope)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 eid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          clear_source();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &source_.eid_)));
          set_has_eid();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string checkpoint = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_checkpoint()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->checkpoint().data(), static_cast<int>(this->checkpoint().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "LoadCheckpointScope.checkpoint"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string regex = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_regex()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->regex().data(), static_cast<int>(this->regex().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "LoadCheckpointScope.regex"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string checkpoint_regex = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_checkpoint_regex()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->checkpoint_regex().data(), static_cast<int>(this->checkpoint_regex().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "LoadCheckpointScope.checkpoint_regex"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string exclude_regex = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_exclude_regex()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->exclude_regex().data(), static_cast<int>(this->exclude_regex().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "LoadCheckpointScope.exclude_regex"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool skip_missing = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &skip_missing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ModelBytes model_bytes = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_model_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LoadCheckpointScope)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LoadCheckpointScope)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LoadCheckpointScope::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LoadCheckpointScope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 eid = 1;
  if (has_eid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->eid(), output);
  }

  // string checkpoint = 2;
  if (has_checkpoint()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->checkpoint().data(), static_cast<int>(this->checkpoint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LoadCheckpointScope.checkpoint");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->checkpoint(), output);
  }

  // string regex = 3;
  if (this->regex().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->regex().data(), static_cast<int>(this->regex().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LoadCheckpointScope.regex");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->regex(), output);
  }

  // string checkpoint_regex = 4;
  if (this->checkpoint_regex().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->checkpoint_regex().data(), static_cast<int>(this->checkpoint_regex().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LoadCheckpointScope.checkpoint_regex");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->checkpoint_regex(), output);
  }

  // string exclude_regex = 5;
  if (this->exclude_regex().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->exclude_regex().data(), static_cast<int>(this->exclude_regex().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LoadCheckpointScope.exclude_regex");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->exclude_regex(), output);
  }

  // bool skip_missing = 6;
  if (this->skip_missing() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->skip_missing(), output);
  }

  // .ModelBytes model_bytes = 7;
  if (has_model_bytes()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, _Internal::model_bytes(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LoadCheckpointScope)
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadCheckpointScope::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LoadCheckpointScope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 eid = 1;
  if (has_eid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->eid(), target);
  }

  // string checkpoint = 2;
  if (has_checkpoint()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->checkpoint().data(), static_cast<int>(this->checkpoint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LoadCheckpointScope.checkpoint");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->checkpoint(), target);
  }

  // string regex = 3;
  if (this->regex().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->regex().data(), static_cast<int>(this->regex().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LoadCheckpointScope.regex");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->regex(), target);
  }

  // string checkpoint_regex = 4;
  if (this->checkpoint_regex().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->checkpoint_regex().data(), static_cast<int>(this->checkpoint_regex().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LoadCheckpointScope.checkpoint_regex");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->checkpoint_regex(), target);
  }

  // string exclude_regex = 5;
  if (this->exclude_regex().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->exclude_regex().data(), static_cast<int>(this->exclude_regex().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LoadCheckpointScope.exclude_regex");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->exclude_regex(), target);
  }

  // bool skip_missing = 6;
  if (this->skip_missing() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->skip_missing(), target);
  }

  // .ModelBytes model_bytes = 7;
  if (has_model_bytes()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::model_bytes(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LoadCheckpointScope)
  return target;
}

size_t LoadCheckpointScope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LoadCheckpointScope)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string regex = 3;
  if (this->regex().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->regex());
  }

  // string checkpoint_regex = 4;
  if (this->checkpoint_regex().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->checkpoint_regex());
  }

  // string exclude_regex = 5;
  if (this->exclude_regex().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->exclude_regex());
  }

  // bool skip_missing = 6;
  if (this->skip_missing() != 0) {
    total_size += 1 + 1;
  }

  switch (source_case()) {
    // int64 eid = 1;
    case kEid: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->eid());
      break;
    }
    // string checkpoint = 2;
    case kCheckpoint: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->checkpoint());
      break;
    }
    // .ModelBytes model_bytes = 7;
    case kModelBytes: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *source_.model_bytes_);
      break;
    }
    case SOURCE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadCheckpointScope::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LoadCheckpointScope)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadCheckpointScope* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadCheckpointScope>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LoadCheckpointScope)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LoadCheckpointScope)
    MergeFrom(*source);
  }
}

void LoadCheckpointScope::MergeFrom(const LoadCheckpointScope& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LoadCheckpointScope)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.regex().size() > 0) {

    regex_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.regex_);
  }
  if (from.checkpoint_regex().size() > 0) {

    checkpoint_regex_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.checkpoint_regex_);
  }
  if (from.exclude_regex().size() > 0) {

    exclude_regex_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.exclude_regex_);
  }
  if (from.skip_missing() != 0) {
    set_skip_missing(from.skip_missing());
  }
  switch (from.source_case()) {
    case kEid: {
      set_eid(from.eid());
      break;
    }
    case kCheckpoint: {
      set_checkpoint(from.checkpoint());
      break;
    }
    case kModelBytes: {
      mutable_model_bytes()->::ModelBytes::MergeFrom(from.model_bytes());
      break;
    }
    case SOURCE_NOT_SET: {
      break;
    }
  }
}

void LoadCheckpointScope::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LoadCheckpointScope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadCheckpointScope::CopyFrom(const LoadCheckpointScope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LoadCheckpointScope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadCheckpointScope::IsInitialized() const {
  return true;
}

void LoadCheckpointScope::InternalSwap(LoadCheckpointScope* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  regex_.Swap(&other->regex_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  checkpoint_regex_.Swap(&other->checkpoint_regex_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exclude_regex_.Swap(&other->exclude_regex_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(skip_missing_, other->skip_missing_);
  swap(source_, other->source_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadCheckpointScope::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModelBytes::InitAsDefaultInstance() {
}
class ModelBytes::_Internal {
 public:
};

ModelBytes::ModelBytes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ModelBytes)
}
ModelBytes::ModelBytes(const ModelBytes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  frozen_meta_graph_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.frozen_meta_graph().empty()) {
    frozen_meta_graph_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.frozen_meta_graph_);
  }
  mmapped_graph_def_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.mmapped_graph_def().empty()) {
    mmapped_graph_def_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mmapped_graph_def_);
  }
  serialized_trace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.serialized_trace().empty()) {
    serialized_trace_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.serialized_trace_);
  }
  device_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.device_type().empty()) {
    device_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_type_);
  }
  model_module_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.model_module().empty()) {
    model_module_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_module_);
  }
  tokenizer_vocab_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.tokenizer_vocab().empty()) {
    tokenizer_vocab_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tokenizer_vocab_);
  }
  model_format_ = from.model_format_;
  // @@protoc_insertion_point(copy_constructor:ModelBytes)
}

void ModelBytes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelBytes_proto_2futils_2fcheckpoint_2eproto.base);
  frozen_meta_graph_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mmapped_graph_def_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serialized_trace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_module_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tokenizer_vocab_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_format_ = 0;
}

ModelBytes::~ModelBytes() {
  // @@protoc_insertion_point(destructor:ModelBytes)
  SharedDtor();
}

void ModelBytes::SharedDtor() {
  frozen_meta_graph_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mmapped_graph_def_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serialized_trace_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_module_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tokenizer_vocab_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ModelBytes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelBytes& ModelBytes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelBytes_proto_2futils_2fcheckpoint_2eproto.base);
  return *internal_default_instance();
}


void ModelBytes::Clear() {
// @@protoc_insertion_point(message_clear_start:ModelBytes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frozen_meta_graph_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mmapped_graph_def_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serialized_trace_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_module_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tokenizer_vocab_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_format_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ModelBytes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes frozen_meta_graph = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_frozen_meta_graph(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes mmapped_graph_def = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_mmapped_graph_def(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ModelFormat model_format = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_model_format(static_cast<::ModelFormat>(val));
        } else goto handle_unusual;
        continue;
      // bytes serialized_trace = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_serialized_trace(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_device_type(), ptr, ctx, "ModelBytes.device_type");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_module = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_model_module(), ptr, ctx, "ModelBytes.model_module");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tokenizer_vocab = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_tokenizer_vocab(), ptr, ctx, "ModelBytes.tokenizer_vocab");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ModelBytes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ModelBytes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes frozen_meta_graph = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_frozen_meta_graph()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes mmapped_graph_def = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mmapped_graph_def()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ModelFormat model_format = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_model_format(static_cast< ::ModelFormat >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes serialized_trace = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serialized_trace()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string device_type = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_device_type()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->device_type().data(), static_cast<int>(this->device_type().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ModelBytes.device_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string model_module = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_model_module()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->model_module().data(), static_cast<int>(this->model_module().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ModelBytes.model_module"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string tokenizer_vocab = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_tokenizer_vocab()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->tokenizer_vocab().data(), static_cast<int>(this->tokenizer_vocab().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ModelBytes.tokenizer_vocab"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ModelBytes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ModelBytes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ModelBytes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ModelBytes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes frozen_meta_graph = 1;
  if (this->frozen_meta_graph().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->frozen_meta_graph(), output);
  }

  // bytes mmapped_graph_def = 2;
  if (this->mmapped_graph_def().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->mmapped_graph_def(), output);
  }

  // .ModelFormat model_format = 3;
  if (this->model_format() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->model_format(), output);
  }

  // bytes serialized_trace = 4;
  if (this->serialized_trace().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->serialized_trace(), output);
  }

  // string device_type = 5;
  if (this->device_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->device_type().data(), static_cast<int>(this->device_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ModelBytes.device_type");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->device_type(), output);
  }

  // string model_module = 6;
  if (this->model_module().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->model_module().data(), static_cast<int>(this->model_module().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ModelBytes.model_module");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->model_module(), output);
  }

  // string tokenizer_vocab = 7;
  if (this->tokenizer_vocab().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->tokenizer_vocab().data(), static_cast<int>(this->tokenizer_vocab().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ModelBytes.tokenizer_vocab");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->tokenizer_vocab(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ModelBytes)
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelBytes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ModelBytes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes frozen_meta_graph = 1;
  if (this->frozen_meta_graph().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->frozen_meta_graph(), target);
  }

  // bytes mmapped_graph_def = 2;
  if (this->mmapped_graph_def().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->mmapped_graph_def(), target);
  }

  // .ModelFormat model_format = 3;
  if (this->model_format() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->model_format(), target);
  }

  // bytes serialized_trace = 4;
  if (this->serialized_trace().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        4, this->serialized_trace(), target);
  }

  // string device_type = 5;
  if (this->device_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->device_type().data(), static_cast<int>(this->device_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ModelBytes.device_type");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->device_type(), target);
  }

  // string model_module = 6;
  if (this->model_module().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->model_module().data(), static_cast<int>(this->model_module().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ModelBytes.model_module");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->model_module(), target);
  }

  // string tokenizer_vocab = 7;
  if (this->tokenizer_vocab().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->tokenizer_vocab().data(), static_cast<int>(this->tokenizer_vocab().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ModelBytes.tokenizer_vocab");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        7, this->tokenizer_vocab(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ModelBytes)
  return target;
}

size_t ModelBytes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ModelBytes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes frozen_meta_graph = 1;
  if (this->frozen_meta_graph().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->frozen_meta_graph());
  }

  // bytes mmapped_graph_def = 2;
  if (this->mmapped_graph_def().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->mmapped_graph_def());
  }

  // bytes serialized_trace = 4;
  if (this->serialized_trace().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->serialized_trace());
  }

  // string device_type = 5;
  if (this->device_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->device_type());
  }

  // string model_module = 6;
  if (this->model_module().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->model_module());
  }

  // string tokenizer_vocab = 7;
  if (this->tokenizer_vocab().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->tokenizer_vocab());
  }

  // .ModelFormat model_format = 3;
  if (this->model_format() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->model_format());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelBytes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ModelBytes)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelBytes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelBytes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ModelBytes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ModelBytes)
    MergeFrom(*source);
  }
}

void ModelBytes::MergeFrom(const ModelBytes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ModelBytes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.frozen_meta_graph().size() > 0) {

    frozen_meta_graph_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.frozen_meta_graph_);
  }
  if (from.mmapped_graph_def().size() > 0) {

    mmapped_graph_def_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mmapped_graph_def_);
  }
  if (from.serialized_trace().size() > 0) {

    serialized_trace_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.serialized_trace_);
  }
  if (from.device_type().size() > 0) {

    device_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_type_);
  }
  if (from.model_module().size() > 0) {

    model_module_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_module_);
  }
  if (from.tokenizer_vocab().size() > 0) {

    tokenizer_vocab_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tokenizer_vocab_);
  }
  if (from.model_format() != 0) {
    set_model_format(from.model_format());
  }
}

void ModelBytes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ModelBytes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelBytes::CopyFrom(const ModelBytes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ModelBytes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelBytes::IsInitialized() const {
  return true;
}

void ModelBytes::InternalSwap(ModelBytes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  frozen_meta_graph_.Swap(&other->frozen_meta_graph_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  mmapped_graph_def_.Swap(&other->mmapped_graph_def_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  serialized_trace_.Swap(&other->serialized_trace_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  device_type_.Swap(&other->device_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  model_module_.Swap(&other->model_module_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tokenizer_vocab_.Swap(&other->tokenizer_vocab_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(model_format_, other->model_format_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelBytes::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::LoadCheckpointScope* Arena::CreateMaybeMessage< ::LoadCheckpointScope >(Arena* arena) {
  return Arena::CreateInternal< ::LoadCheckpointScope >(arena);
}
template<> PROTOBUF_NOINLINE ::ModelBytes* Arena::CreateMaybeMessage< ::ModelBytes >(Arena* arena) {
  return Arena::CreateInternal< ::ModelBytes >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
