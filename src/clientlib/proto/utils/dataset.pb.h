// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/utils/dataset.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2futils_2fdataset_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2futils_2fdataset_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "proto/utils/vocab.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fdataset_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2futils_2fdataset_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2futils_2fdataset_2eproto;
class Dataset;
class DatasetDefaultTypeInternal;
extern DatasetDefaultTypeInternal _Dataset_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Dataset* Arena::CreateMaybeMessage<::Dataset>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Dataset :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Dataset) */ {
 public:
  Dataset();
  virtual ~Dataset();

  Dataset(const Dataset& from);
  Dataset(Dataset&& from) noexcept
    : Dataset() {
    *this = ::std::move(from);
  }

  inline Dataset& operator=(const Dataset& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dataset& operator=(Dataset&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Dataset& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Dataset* internal_default_instance() {
    return reinterpret_cast<const Dataset*>(
               &_Dataset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Dataset& a, Dataset& b) {
    a.Swap(&b);
  }
  inline void Swap(Dataset* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Dataset* New() const final {
    return CreateMaybeMessage<Dataset>(nullptr);
  }

  Dataset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Dataset>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Dataset& from);
  void MergeFrom(const Dataset& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dataset* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Dataset";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fdataset_2eproto);
    return ::descriptor_table_proto_2futils_2fdataset_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDataDirFieldNumber = 2,
    kMetaFilenameFieldNumber = 3,
    kDataProviderNameFieldNumber = 4,
    kVocabFieldNumber = 5,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string data_dir = 2;
  void clear_data_dir();
  const std::string& data_dir() const;
  void set_data_dir(const std::string& value);
  void set_data_dir(std::string&& value);
  void set_data_dir(const char* value);
  void set_data_dir(const char* value, size_t size);
  std::string* mutable_data_dir();
  std::string* release_data_dir();
  void set_allocated_data_dir(std::string* data_dir);

  // string meta_filename = 3;
  void clear_meta_filename();
  const std::string& meta_filename() const;
  void set_meta_filename(const std::string& value);
  void set_meta_filename(std::string&& value);
  void set_meta_filename(const char* value);
  void set_meta_filename(const char* value, size_t size);
  std::string* mutable_meta_filename();
  std::string* release_meta_filename();
  void set_allocated_meta_filename(std::string* meta_filename);

  // string data_provider_name = 4;
  void clear_data_provider_name();
  const std::string& data_provider_name() const;
  void set_data_provider_name(const std::string& value);
  void set_data_provider_name(std::string&& value);
  void set_data_provider_name(const char* value);
  void set_data_provider_name(const char* value, size_t size);
  std::string* mutable_data_provider_name();
  std::string* release_data_provider_name();
  void set_allocated_data_provider_name(std::string* data_provider_name);

  // .Vocab vocab = 5;
  bool has_vocab() const;
  void clear_vocab();
  const ::Vocab& vocab() const;
  ::Vocab* release_vocab();
  ::Vocab* mutable_vocab();
  void set_allocated_vocab(::Vocab* vocab);

  // @@protoc_insertion_point(class_scope:Dataset)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_dir_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr meta_filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_provider_name_;
  ::Vocab* vocab_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2fdataset_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Dataset

// string name = 1;
inline void Dataset::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Dataset::name() const {
  // @@protoc_insertion_point(field_get:Dataset.name)
  return name_.GetNoArena();
}
inline void Dataset::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Dataset.name)
}
inline void Dataset::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Dataset.name)
}
inline void Dataset::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Dataset.name)
}
inline void Dataset::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Dataset.name)
}
inline std::string* Dataset::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Dataset.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Dataset::release_name() {
  // @@protoc_insertion_point(field_release:Dataset.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Dataset::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Dataset.name)
}

// string data_dir = 2;
inline void Dataset::clear_data_dir() {
  data_dir_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Dataset::data_dir() const {
  // @@protoc_insertion_point(field_get:Dataset.data_dir)
  return data_dir_.GetNoArena();
}
inline void Dataset::set_data_dir(const std::string& value) {
  
  data_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Dataset.data_dir)
}
inline void Dataset::set_data_dir(std::string&& value) {
  
  data_dir_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Dataset.data_dir)
}
inline void Dataset::set_data_dir(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Dataset.data_dir)
}
inline void Dataset::set_data_dir(const char* value, size_t size) {
  
  data_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Dataset.data_dir)
}
inline std::string* Dataset::mutable_data_dir() {
  
  // @@protoc_insertion_point(field_mutable:Dataset.data_dir)
  return data_dir_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Dataset::release_data_dir() {
  // @@protoc_insertion_point(field_release:Dataset.data_dir)
  
  return data_dir_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Dataset::set_allocated_data_dir(std::string* data_dir) {
  if (data_dir != nullptr) {
    
  } else {
    
  }
  data_dir_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data_dir);
  // @@protoc_insertion_point(field_set_allocated:Dataset.data_dir)
}

// string meta_filename = 3;
inline void Dataset::clear_meta_filename() {
  meta_filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Dataset::meta_filename() const {
  // @@protoc_insertion_point(field_get:Dataset.meta_filename)
  return meta_filename_.GetNoArena();
}
inline void Dataset::set_meta_filename(const std::string& value) {
  
  meta_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Dataset.meta_filename)
}
inline void Dataset::set_meta_filename(std::string&& value) {
  
  meta_filename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Dataset.meta_filename)
}
inline void Dataset::set_meta_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  meta_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Dataset.meta_filename)
}
inline void Dataset::set_meta_filename(const char* value, size_t size) {
  
  meta_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Dataset.meta_filename)
}
inline std::string* Dataset::mutable_meta_filename() {
  
  // @@protoc_insertion_point(field_mutable:Dataset.meta_filename)
  return meta_filename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Dataset::release_meta_filename() {
  // @@protoc_insertion_point(field_release:Dataset.meta_filename)
  
  return meta_filename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Dataset::set_allocated_meta_filename(std::string* meta_filename) {
  if (meta_filename != nullptr) {
    
  } else {
    
  }
  meta_filename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), meta_filename);
  // @@protoc_insertion_point(field_set_allocated:Dataset.meta_filename)
}

// string data_provider_name = 4;
inline void Dataset::clear_data_provider_name() {
  data_provider_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Dataset::data_provider_name() const {
  // @@protoc_insertion_point(field_get:Dataset.data_provider_name)
  return data_provider_name_.GetNoArena();
}
inline void Dataset::set_data_provider_name(const std::string& value) {
  
  data_provider_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Dataset.data_provider_name)
}
inline void Dataset::set_data_provider_name(std::string&& value) {
  
  data_provider_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Dataset.data_provider_name)
}
inline void Dataset::set_data_provider_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_provider_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Dataset.data_provider_name)
}
inline void Dataset::set_data_provider_name(const char* value, size_t size) {
  
  data_provider_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Dataset.data_provider_name)
}
inline std::string* Dataset::mutable_data_provider_name() {
  
  // @@protoc_insertion_point(field_mutable:Dataset.data_provider_name)
  return data_provider_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Dataset::release_data_provider_name() {
  // @@protoc_insertion_point(field_release:Dataset.data_provider_name)
  
  return data_provider_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Dataset::set_allocated_data_provider_name(std::string* data_provider_name) {
  if (data_provider_name != nullptr) {
    
  } else {
    
  }
  data_provider_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data_provider_name);
  // @@protoc_insertion_point(field_set_allocated:Dataset.data_provider_name)
}

// .Vocab vocab = 5;
inline bool Dataset::has_vocab() const {
  return this != internal_default_instance() && vocab_ != nullptr;
}
inline const ::Vocab& Dataset::vocab() const {
  const ::Vocab* p = vocab_;
  // @@protoc_insertion_point(field_get:Dataset.vocab)
  return p != nullptr ? *p : *reinterpret_cast<const ::Vocab*>(
      &::_Vocab_default_instance_);
}
inline ::Vocab* Dataset::release_vocab() {
  // @@protoc_insertion_point(field_release:Dataset.vocab)
  
  ::Vocab* temp = vocab_;
  vocab_ = nullptr;
  return temp;
}
inline ::Vocab* Dataset::mutable_vocab() {
  
  if (vocab_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vocab>(GetArenaNoVirtual());
    vocab_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Dataset.vocab)
  return vocab_;
}
inline void Dataset::set_allocated_vocab(::Vocab* vocab) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vocab_);
  }
  if (vocab) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vocab = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vocab, submessage_arena);
    }
    
  } else {
    
  }
  vocab_ = vocab;
  // @@protoc_insertion_point(field_set_allocated:Dataset.vocab)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2futils_2fdataset_2eproto
