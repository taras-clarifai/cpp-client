// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/utils/bbox.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2futils_2fbbox_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2futils_2fbbox_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "proto/clarifai/api/utils/extensions.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fbbox_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2futils_2fbbox_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2futils_2fbbox_2eproto;
class BBox;
class BBoxDefaultTypeInternal;
extern BBoxDefaultTypeInternal _BBox_default_instance_;
class Mask;
class MaskDefaultTypeInternal;
extern MaskDefaultTypeInternal _Mask_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::BBox* Arena::CreateMaybeMessage<::BBox>(Arena*);
template<> ::Mask* Arena::CreateMaybeMessage<::Mask>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Mask :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Mask) */ {
 public:
  Mask();
  virtual ~Mask();

  Mask(const Mask& from);
  Mask(Mask&& from) noexcept
    : Mask() {
    *this = ::std::move(from);
  }

  inline Mask& operator=(const Mask& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mask& operator=(Mask&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Mask& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mask* internal_default_instance() {
    return reinterpret_cast<const Mask*>(
               &_Mask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Mask& a, Mask& b) {
    a.Swap(&b);
  }
  inline void Swap(Mask* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Mask* New() const final {
    return CreateMaybeMessage<Mask>(nullptr);
  }

  Mask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Mask>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Mask& from);
  void MergeFrom(const Mask& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mask* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Mask";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fbbox_2eproto);
    return ::descriptor_table_proto_2futils_2fbbox_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncodedBytesFieldNumber = 1,
  };
  // bytes encoded_bytes = 1;
  void clear_encoded_bytes();
  const std::string& encoded_bytes() const;
  void set_encoded_bytes(const std::string& value);
  void set_encoded_bytes(std::string&& value);
  void set_encoded_bytes(const char* value);
  void set_encoded_bytes(const void* value, size_t size);
  std::string* mutable_encoded_bytes();
  std::string* release_encoded_bytes();
  void set_allocated_encoded_bytes(std::string* encoded_bytes);

  // @@protoc_insertion_point(class_scope:Mask)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encoded_bytes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2fbbox_2eproto;
};
// -------------------------------------------------------------------

class BBox :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BBox) */ {
 public:
  BBox();
  virtual ~BBox();

  BBox(const BBox& from);
  BBox(BBox&& from) noexcept
    : BBox() {
    *this = ::std::move(from);
  }

  inline BBox& operator=(const BBox& from) {
    CopyFrom(from);
    return *this;
  }
  inline BBox& operator=(BBox&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BBox& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BBox* internal_default_instance() {
    return reinterpret_cast<const BBox*>(
               &_BBox_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BBox& a, BBox& b) {
    a.Swap(&b);
  }
  inline void Swap(BBox* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BBox* New() const final {
    return CreateMaybeMessage<BBox>(nullptr);
  }

  BBox* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BBox>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BBox& from);
  void MergeFrom(const BBox& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BBox* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BBox";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fbbox_2eproto);
    return ::descriptor_table_proto_2futils_2fbbox_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopRowFieldNumber = 3,
    kLeftColFieldNumber = 4,
    kBottomRowFieldNumber = 5,
    kRightColFieldNumber = 6,
  };
  // float top_row = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_top_row();
  float top_row() const;
  void set_top_row(float value);

  // float left_col = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_left_col();
  float left_col() const;
  void set_left_col(float value);

  // float bottom_row = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_bottom_row();
  float bottom_row() const;
  void set_bottom_row(float value);

  // float right_col = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_right_col();
  float right_col() const;
  void set_right_col(float value);

  // @@protoc_insertion_point(class_scope:BBox)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float top_row_;
  float left_col_;
  float bottom_row_;
  float right_col_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2futils_2fbbox_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Mask

// bytes encoded_bytes = 1;
inline void Mask::clear_encoded_bytes() {
  encoded_bytes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Mask::encoded_bytes() const {
  // @@protoc_insertion_point(field_get:Mask.encoded_bytes)
  return encoded_bytes_.GetNoArena();
}
inline void Mask::set_encoded_bytes(const std::string& value) {
  
  encoded_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Mask.encoded_bytes)
}
inline void Mask::set_encoded_bytes(std::string&& value) {
  
  encoded_bytes_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Mask.encoded_bytes)
}
inline void Mask::set_encoded_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  encoded_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mask.encoded_bytes)
}
inline void Mask::set_encoded_bytes(const void* value, size_t size) {
  
  encoded_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mask.encoded_bytes)
}
inline std::string* Mask::mutable_encoded_bytes() {
  
  // @@protoc_insertion_point(field_mutable:Mask.encoded_bytes)
  return encoded_bytes_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Mask::release_encoded_bytes() {
  // @@protoc_insertion_point(field_release:Mask.encoded_bytes)
  
  return encoded_bytes_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Mask::set_allocated_encoded_bytes(std::string* encoded_bytes) {
  if (encoded_bytes != nullptr) {
    
  } else {
    
  }
  encoded_bytes_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encoded_bytes);
  // @@protoc_insertion_point(field_set_allocated:Mask.encoded_bytes)
}

// -------------------------------------------------------------------

// BBox

// float top_row = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void BBox::clear_top_row() {
  top_row_ = 0;
}
inline float BBox::top_row() const {
  // @@protoc_insertion_point(field_get:BBox.top_row)
  return top_row_;
}
inline void BBox::set_top_row(float value) {
  
  top_row_ = value;
  // @@protoc_insertion_point(field_set:BBox.top_row)
}

// float left_col = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void BBox::clear_left_col() {
  left_col_ = 0;
}
inline float BBox::left_col() const {
  // @@protoc_insertion_point(field_get:BBox.left_col)
  return left_col_;
}
inline void BBox::set_left_col(float value) {
  
  left_col_ = value;
  // @@protoc_insertion_point(field_set:BBox.left_col)
}

// float bottom_row = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void BBox::clear_bottom_row() {
  bottom_row_ = 0;
}
inline float BBox::bottom_row() const {
  // @@protoc_insertion_point(field_get:BBox.bottom_row)
  return bottom_row_;
}
inline void BBox::set_bottom_row(float value) {
  
  bottom_row_ = value;
  // @@protoc_insertion_point(field_set:BBox.bottom_row)
}

// float right_col = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void BBox::clear_right_col() {
  right_col_ = 0;
}
inline float BBox::right_col() const {
  // @@protoc_insertion_point(field_get:BBox.right_col)
  return right_col_;
}
inline void BBox::set_right_col(float value) {
  
  right_col_ = value;
  // @@protoc_insertion_point(field_set:BBox.right_col)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2futils_2fbbox_2eproto
