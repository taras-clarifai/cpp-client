// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/utils/video.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2futils_2fvideo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2futils_2fvideo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/duration.pb.h>
#include "proto/utils/ndarray.pb.h"
#include "proto/utils/frame.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fvideo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2futils_2fvideo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2futils_2fvideo_2eproto;
class Video;
class VideoDefaultTypeInternal;
extern VideoDefaultTypeInternal _Video_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Video* Arena::CreateMaybeMessage<::Video>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Video :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Video) */ {
 public:
  Video();
  virtual ~Video();

  Video(const Video& from);
  Video(Video&& from) noexcept
    : Video() {
    *this = ::std::move(from);
  }

  inline Video& operator=(const Video& from) {
    CopyFrom(from);
    return *this;
  }
  inline Video& operator=(Video&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Video& default_instance();

  enum DataCase {
    kEncodedBytes = 2,
    kNdarray = 3,
    DATA_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Video* internal_default_instance() {
    return reinterpret_cast<const Video*>(
               &_Video_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Video& a, Video& b) {
    a.Swap(&b);
  }
  inline void Swap(Video* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Video* New() const final {
    return CreateMaybeMessage<Video>(nullptr);
  }

  Video* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Video>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Video& from);
  void MergeFrom(const Video& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Video* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Video";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2futils_2fvideo_2eproto);
    return ::descriptor_table_proto_2futils_2fvideo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFramesFieldNumber = 5,
    kOpticalFlowXFieldNumber = 6,
    kOpticalFlowYFieldNumber = 7,
    kNameFieldNumber = 1,
    kUrlFieldNumber = 4,
    kHostedOrigUrlFieldNumber = 9,
    kThumbnailFieldNumber = 8,
    kDurationFieldNumber = 1003,
    kWidthFieldNumber = 1000,
    kHeightFieldNumber = 1001,
    kColorsFieldNumber = 1002,
    kFpsFieldNumber = 1004,
    kEncodedBytesFieldNumber = 2,
    kNdarrayFieldNumber = 3,
  };
  // repeated .Frame frames = 5;
  int frames_size() const;
  void clear_frames();
  ::Frame* mutable_frames(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Frame >*
      mutable_frames();
  const ::Frame& frames(int index) const;
  ::Frame* add_frames();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Frame >&
      frames() const;

  // repeated .Frame optical_flow_x = 6;
  int optical_flow_x_size() const;
  void clear_optical_flow_x();
  ::Frame* mutable_optical_flow_x(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Frame >*
      mutable_optical_flow_x();
  const ::Frame& optical_flow_x(int index) const;
  ::Frame* add_optical_flow_x();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Frame >&
      optical_flow_x() const;

  // repeated .Frame optical_flow_y = 7;
  int optical_flow_y_size() const;
  void clear_optical_flow_y();
  ::Frame* mutable_optical_flow_y(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Frame >*
      mutable_optical_flow_y();
  const ::Frame& optical_flow_y(int index) const;
  ::Frame* add_optical_flow_y();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Frame >&
      optical_flow_y() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string url = 4;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);

  // string hosted_orig_url = 9;
  void clear_hosted_orig_url();
  const std::string& hosted_orig_url() const;
  void set_hosted_orig_url(const std::string& value);
  void set_hosted_orig_url(std::string&& value);
  void set_hosted_orig_url(const char* value);
  void set_hosted_orig_url(const char* value, size_t size);
  std::string* mutable_hosted_orig_url();
  std::string* release_hosted_orig_url();
  void set_allocated_hosted_orig_url(std::string* hosted_orig_url);

  // .Frame thumbnail = 8;
  bool has_thumbnail() const;
  void clear_thumbnail();
  const ::Frame& thumbnail() const;
  ::Frame* release_thumbnail();
  ::Frame* mutable_thumbnail();
  void set_allocated_thumbnail(::Frame* thumbnail);

  // .google.protobuf.Duration duration = 1003;
  bool has_duration() const;
  void clear_duration();
  const PROTOBUF_NAMESPACE_ID::Duration& duration() const;
  PROTOBUF_NAMESPACE_ID::Duration* release_duration();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_duration();
  void set_allocated_duration(PROTOBUF_NAMESPACE_ID::Duration* duration);

  // int32 width = 1000;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 height = 1001;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 colors = 1002;
  void clear_colors();
  ::PROTOBUF_NAMESPACE_ID::int32 colors() const;
  void set_colors(::PROTOBUF_NAMESPACE_ID::int32 value);

  // float fps = 1004;
  void clear_fps();
  float fps() const;
  void set_fps(float value);

  // bytes encoded_bytes = 2;
  private:
  bool has_encoded_bytes() const;
  public:
  void clear_encoded_bytes();
  const std::string& encoded_bytes() const;
  void set_encoded_bytes(const std::string& value);
  void set_encoded_bytes(std::string&& value);
  void set_encoded_bytes(const char* value);
  void set_encoded_bytes(const void* value, size_t size);
  std::string* mutable_encoded_bytes();
  std::string* release_encoded_bytes();
  void set_allocated_encoded_bytes(std::string* encoded_bytes);

  // .NDArray ndarray = 3;
  bool has_ndarray() const;
  void clear_ndarray();
  const ::NDArray& ndarray() const;
  ::NDArray* release_ndarray();
  ::NDArray* mutable_ndarray();
  void set_allocated_ndarray(::NDArray* ndarray);

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:Video)
 private:
  class _Internal;
  void set_has_encoded_bytes();
  void set_has_ndarray();

  inline bool has_data() const;
  inline void clear_has_data();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Frame > frames_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Frame > optical_flow_x_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Frame > optical_flow_y_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hosted_orig_url_;
  ::Frame* thumbnail_;
  PROTOBUF_NAMESPACE_ID::Duration* duration_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::int32 colors_;
  float fps_;
  union DataUnion {
    DataUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encoded_bytes_;
    ::NDArray* ndarray_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_proto_2futils_2fvideo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Video

// string name = 1;
inline void Video::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Video::name() const {
  // @@protoc_insertion_point(field_get:Video.name)
  return name_.GetNoArena();
}
inline void Video::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Video.name)
}
inline void Video::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Video.name)
}
inline void Video::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Video.name)
}
inline void Video::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Video.name)
}
inline std::string* Video::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Video.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Video::release_name() {
  // @@protoc_insertion_point(field_release:Video.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Video::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Video.name)
}

// bytes encoded_bytes = 2;
inline bool Video::has_encoded_bytes() const {
  return data_case() == kEncodedBytes;
}
inline void Video::set_has_encoded_bytes() {
  _oneof_case_[0] = kEncodedBytes;
}
inline void Video::clear_encoded_bytes() {
  if (has_encoded_bytes()) {
    data_.encoded_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_data();
  }
}
inline const std::string& Video::encoded_bytes() const {
  // @@protoc_insertion_point(field_get:Video.encoded_bytes)
  if (has_encoded_bytes()) {
    return data_.encoded_bytes_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Video::set_encoded_bytes(const std::string& value) {
  // @@protoc_insertion_point(field_set:Video.encoded_bytes)
  if (!has_encoded_bytes()) {
    clear_data();
    set_has_encoded_bytes();
    data_.encoded_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.encoded_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Video.encoded_bytes)
}
inline void Video::set_encoded_bytes(std::string&& value) {
  // @@protoc_insertion_point(field_set:Video.encoded_bytes)
  if (!has_encoded_bytes()) {
    clear_data();
    set_has_encoded_bytes();
    data_.encoded_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.encoded_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Video.encoded_bytes)
}
inline void Video::set_encoded_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_encoded_bytes()) {
    clear_data();
    set_has_encoded_bytes();
    data_.encoded_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.encoded_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Video.encoded_bytes)
}
inline void Video::set_encoded_bytes(const void* value, size_t size) {
  if (!has_encoded_bytes()) {
    clear_data();
    set_has_encoded_bytes();
    data_.encoded_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.encoded_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Video.encoded_bytes)
}
inline std::string* Video::mutable_encoded_bytes() {
  if (!has_encoded_bytes()) {
    clear_data();
    set_has_encoded_bytes();
    data_.encoded_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:Video.encoded_bytes)
  return data_.encoded_bytes_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Video::release_encoded_bytes() {
  // @@protoc_insertion_point(field_release:Video.encoded_bytes)
  if (has_encoded_bytes()) {
    clear_has_data();
    return data_.encoded_bytes_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void Video::set_allocated_encoded_bytes(std::string* encoded_bytes) {
  if (has_data()) {
    clear_data();
  }
  if (encoded_bytes != nullptr) {
    set_has_encoded_bytes();
    data_.encoded_bytes_.UnsafeSetDefault(encoded_bytes);
  }
  // @@protoc_insertion_point(field_set_allocated:Video.encoded_bytes)
}

// .NDArray ndarray = 3;
inline bool Video::has_ndarray() const {
  return data_case() == kNdarray;
}
inline void Video::set_has_ndarray() {
  _oneof_case_[0] = kNdarray;
}
inline ::NDArray* Video::release_ndarray() {
  // @@protoc_insertion_point(field_release:Video.ndarray)
  if (has_ndarray()) {
    clear_has_data();
      ::NDArray* temp = data_.ndarray_;
    data_.ndarray_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::NDArray& Video::ndarray() const {
  // @@protoc_insertion_point(field_get:Video.ndarray)
  return has_ndarray()
      ? *data_.ndarray_
      : *reinterpret_cast< ::NDArray*>(&::_NDArray_default_instance_);
}
inline ::NDArray* Video::mutable_ndarray() {
  if (!has_ndarray()) {
    clear_data();
    set_has_ndarray();
    data_.ndarray_ = CreateMaybeMessage< ::NDArray >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Video.ndarray)
  return data_.ndarray_;
}

// string url = 4;
inline void Video::clear_url() {
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Video::url() const {
  // @@protoc_insertion_point(field_get:Video.url)
  return url_.GetNoArena();
}
inline void Video::set_url(const std::string& value) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Video.url)
}
inline void Video::set_url(std::string&& value) {
  
  url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Video.url)
}
inline void Video::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Video.url)
}
inline void Video::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Video.url)
}
inline std::string* Video::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:Video.url)
  return url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Video::release_url() {
  // @@protoc_insertion_point(field_release:Video.url)
  
  return url_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Video::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:Video.url)
}

// repeated .Frame frames = 5;
inline int Video::frames_size() const {
  return frames_.size();
}
inline ::Frame* Video::mutable_frames(int index) {
  // @@protoc_insertion_point(field_mutable:Video.frames)
  return frames_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Frame >*
Video::mutable_frames() {
  // @@protoc_insertion_point(field_mutable_list:Video.frames)
  return &frames_;
}
inline const ::Frame& Video::frames(int index) const {
  // @@protoc_insertion_point(field_get:Video.frames)
  return frames_.Get(index);
}
inline ::Frame* Video::add_frames() {
  // @@protoc_insertion_point(field_add:Video.frames)
  return frames_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Frame >&
Video::frames() const {
  // @@protoc_insertion_point(field_list:Video.frames)
  return frames_;
}

// repeated .Frame optical_flow_x = 6;
inline int Video::optical_flow_x_size() const {
  return optical_flow_x_.size();
}
inline ::Frame* Video::mutable_optical_flow_x(int index) {
  // @@protoc_insertion_point(field_mutable:Video.optical_flow_x)
  return optical_flow_x_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Frame >*
Video::mutable_optical_flow_x() {
  // @@protoc_insertion_point(field_mutable_list:Video.optical_flow_x)
  return &optical_flow_x_;
}
inline const ::Frame& Video::optical_flow_x(int index) const {
  // @@protoc_insertion_point(field_get:Video.optical_flow_x)
  return optical_flow_x_.Get(index);
}
inline ::Frame* Video::add_optical_flow_x() {
  // @@protoc_insertion_point(field_add:Video.optical_flow_x)
  return optical_flow_x_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Frame >&
Video::optical_flow_x() const {
  // @@protoc_insertion_point(field_list:Video.optical_flow_x)
  return optical_flow_x_;
}

// repeated .Frame optical_flow_y = 7;
inline int Video::optical_flow_y_size() const {
  return optical_flow_y_.size();
}
inline ::Frame* Video::mutable_optical_flow_y(int index) {
  // @@protoc_insertion_point(field_mutable:Video.optical_flow_y)
  return optical_flow_y_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Frame >*
Video::mutable_optical_flow_y() {
  // @@protoc_insertion_point(field_mutable_list:Video.optical_flow_y)
  return &optical_flow_y_;
}
inline const ::Frame& Video::optical_flow_y(int index) const {
  // @@protoc_insertion_point(field_get:Video.optical_flow_y)
  return optical_flow_y_.Get(index);
}
inline ::Frame* Video::add_optical_flow_y() {
  // @@protoc_insertion_point(field_add:Video.optical_flow_y)
  return optical_flow_y_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Frame >&
Video::optical_flow_y() const {
  // @@protoc_insertion_point(field_list:Video.optical_flow_y)
  return optical_flow_y_;
}

// .Frame thumbnail = 8;
inline bool Video::has_thumbnail() const {
  return this != internal_default_instance() && thumbnail_ != nullptr;
}
inline const ::Frame& Video::thumbnail() const {
  const ::Frame* p = thumbnail_;
  // @@protoc_insertion_point(field_get:Video.thumbnail)
  return p != nullptr ? *p : *reinterpret_cast<const ::Frame*>(
      &::_Frame_default_instance_);
}
inline ::Frame* Video::release_thumbnail() {
  // @@protoc_insertion_point(field_release:Video.thumbnail)
  
  ::Frame* temp = thumbnail_;
  thumbnail_ = nullptr;
  return temp;
}
inline ::Frame* Video::mutable_thumbnail() {
  
  if (thumbnail_ == nullptr) {
    auto* p = CreateMaybeMessage<::Frame>(GetArenaNoVirtual());
    thumbnail_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Video.thumbnail)
  return thumbnail_;
}
inline void Video::set_allocated_thumbnail(::Frame* thumbnail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(thumbnail_);
  }
  if (thumbnail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      thumbnail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, thumbnail, submessage_arena);
    }
    
  } else {
    
  }
  thumbnail_ = thumbnail;
  // @@protoc_insertion_point(field_set_allocated:Video.thumbnail)
}

// string hosted_orig_url = 9;
inline void Video::clear_hosted_orig_url() {
  hosted_orig_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Video::hosted_orig_url() const {
  // @@protoc_insertion_point(field_get:Video.hosted_orig_url)
  return hosted_orig_url_.GetNoArena();
}
inline void Video::set_hosted_orig_url(const std::string& value) {
  
  hosted_orig_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Video.hosted_orig_url)
}
inline void Video::set_hosted_orig_url(std::string&& value) {
  
  hosted_orig_url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Video.hosted_orig_url)
}
inline void Video::set_hosted_orig_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hosted_orig_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Video.hosted_orig_url)
}
inline void Video::set_hosted_orig_url(const char* value, size_t size) {
  
  hosted_orig_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Video.hosted_orig_url)
}
inline std::string* Video::mutable_hosted_orig_url() {
  
  // @@protoc_insertion_point(field_mutable:Video.hosted_orig_url)
  return hosted_orig_url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Video::release_hosted_orig_url() {
  // @@protoc_insertion_point(field_release:Video.hosted_orig_url)
  
  return hosted_orig_url_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Video::set_allocated_hosted_orig_url(std::string* hosted_orig_url) {
  if (hosted_orig_url != nullptr) {
    
  } else {
    
  }
  hosted_orig_url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hosted_orig_url);
  // @@protoc_insertion_point(field_set_allocated:Video.hosted_orig_url)
}

// int32 width = 1000;
inline void Video::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Video::width() const {
  // @@protoc_insertion_point(field_get:Video.width)
  return width_;
}
inline void Video::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:Video.width)
}

// int32 height = 1001;
inline void Video::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Video::height() const {
  // @@protoc_insertion_point(field_get:Video.height)
  return height_;
}
inline void Video::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:Video.height)
}

// int32 colors = 1002;
inline void Video::clear_colors() {
  colors_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Video::colors() const {
  // @@protoc_insertion_point(field_get:Video.colors)
  return colors_;
}
inline void Video::set_colors(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  colors_ = value;
  // @@protoc_insertion_point(field_set:Video.colors)
}

// .google.protobuf.Duration duration = 1003;
inline bool Video::has_duration() const {
  return this != internal_default_instance() && duration_ != nullptr;
}
inline const PROTOBUF_NAMESPACE_ID::Duration& Video::duration() const {
  const PROTOBUF_NAMESPACE_ID::Duration* p = duration_;
  // @@protoc_insertion_point(field_get:Video.duration)
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Duration*>(
      &PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline PROTOBUF_NAMESPACE_ID::Duration* Video::release_duration() {
  // @@protoc_insertion_point(field_release:Video.duration)
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = duration_;
  duration_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* Video::mutable_duration() {
  
  if (duration_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Duration>(GetArenaNoVirtual());
    duration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Video.duration)
  return duration_;
}
inline void Video::set_allocated_duration(PROTOBUF_NAMESPACE_ID::Duration* duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_);
  }
  if (duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration)->GetArena();
    if (message_arena != submessage_arena) {
      duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, duration, submessage_arena);
    }
    
  } else {
    
  }
  duration_ = duration;
  // @@protoc_insertion_point(field_set_allocated:Video.duration)
}

// float fps = 1004;
inline void Video::clear_fps() {
  fps_ = 0;
}
inline float Video::fps() const {
  // @@protoc_insertion_point(field_get:Video.fps)
  return fps_;
}
inline void Video::set_fps(float value) {
  
  fps_ = value;
  // @@protoc_insertion_point(field_set:Video.fps)
}

inline bool Video::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void Video::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline Video::DataCase Video::data_case() const {
  return Video::DataCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2futils_2fvideo_2eproto
