// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/trainer/trainer.proto
#ifndef GRPC_proto_2ftrainer_2ftrainer_2eproto__INCLUDED
#define GRPC_proto_2ftrainer_2ftrainer_2eproto__INCLUDED

#include "proto/trainer/trainer.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

// Interface exported by the server.
class TrainingCoordinator final {
 public:
  static constexpr char const* service_full_name() {
    return "TrainingCoordinator";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Train a model
    virtual ::grpc::Status Train(::grpc::ClientContext* context, const ::TrainRequest& request, ::TrainResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TrainResponse>> AsyncTrain(::grpc::ClientContext* context, const ::TrainRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TrainResponse>>(AsyncTrainRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TrainResponse>> PrepareAsyncTrain(::grpc::ClientContext* context, const ::TrainRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TrainResponse>>(PrepareAsyncTrainRaw(context, request, cq));
    }
    // Get status of training job
    virtual ::grpc::Status GetStatus(::grpc::ClientContext* context, const ::GetStatusRequest& request, ::GetStatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetStatusResponse>> AsyncGetStatus(::grpc::ClientContext* context, const ::GetStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetStatusResponse>>(AsyncGetStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetStatusResponse>> PrepareAsyncGetStatus(::grpc::ClientContext* context, const ::GetStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetStatusResponse>>(PrepareAsyncGetStatusRaw(context, request, cq));
    }
    // Get evaluation metrics for the training job
    virtual ::grpc::Status GetEvaluations(::grpc::ClientContext* context, const ::GetEvaluationsRequest& request, ::GetEvaluationsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetEvaluationsResponse>> AsyncGetEvaluations(::grpc::ClientContext* context, const ::GetEvaluationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetEvaluationsResponse>>(AsyncGetEvaluationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetEvaluationsResponse>> PrepareAsyncGetEvaluations(::grpc::ClientContext* context, const ::GetEvaluationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetEvaluationsResponse>>(PrepareAsyncGetEvaluationsRaw(context, request, cq));
    }
    // List training templates and doc strings
    virtual ::grpc::Status ListTemplates(::grpc::ClientContext* context, const ::ListTemplatesRequest& request, ::ListTemplatesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ListTemplatesResponse>> AsyncListTemplates(::grpc::ClientContext* context, const ::ListTemplatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ListTemplatesResponse>>(AsyncListTemplatesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ListTemplatesResponse>> PrepareAsyncListTemplates(::grpc::ClientContext* context, const ::ListTemplatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ListTemplatesResponse>>(PrepareAsyncListTemplatesRaw(context, request, cq));
    }
    // Get spire name
    virtual ::grpc::Status GetSpireConfig(::grpc::ClientContext* context, const ::GetSpireConfigRequest& request, ::GetSpireConfigResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetSpireConfigResponse>> AsyncGetSpireConfig(::grpc::ClientContext* context, const ::GetSpireConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetSpireConfigResponse>>(AsyncGetSpireConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetSpireConfigResponse>> PrepareAsyncGetSpireConfig(::grpc::ClientContext* context, const ::GetSpireConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetSpireConfigResponse>>(PrepareAsyncGetSpireConfigRaw(context, request, cq));
    }
    // Cleanup files no longer needed
    virtual ::grpc::Status EidCleanUp(::grpc::ClientContext* context, const ::EidCleanUpRequest& request, ::EidCleanUpResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EidCleanUpResponse>> AsyncEidCleanUp(::grpc::ClientContext* context, const ::EidCleanUpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EidCleanUpResponse>>(AsyncEidCleanUpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EidCleanUpResponse>> PrepareAsyncEidCleanUp(::grpc::ClientContext* context, const ::EidCleanUpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EidCleanUpResponse>>(PrepareAsyncEidCleanUpRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Train a model
      virtual void Train(::grpc::ClientContext* context, const ::TrainRequest* request, ::TrainResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Train(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::TrainResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Train(::grpc::ClientContext* context, const ::TrainRequest* request, ::TrainResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Train(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::TrainResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Get status of training job
      virtual void GetStatus(::grpc::ClientContext* context, const ::GetStatusRequest* request, ::GetStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GetStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetStatus(::grpc::ClientContext* context, const ::GetStatusRequest* request, ::GetStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GetStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Get evaluation metrics for the training job
      virtual void GetEvaluations(::grpc::ClientContext* context, const ::GetEvaluationsRequest* request, ::GetEvaluationsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetEvaluations(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GetEvaluationsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetEvaluations(::grpc::ClientContext* context, const ::GetEvaluationsRequest* request, ::GetEvaluationsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetEvaluations(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GetEvaluationsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // List training templates and doc strings
      virtual void ListTemplates(::grpc::ClientContext* context, const ::ListTemplatesRequest* request, ::ListTemplatesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListTemplates(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ListTemplatesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListTemplates(::grpc::ClientContext* context, const ::ListTemplatesRequest* request, ::ListTemplatesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ListTemplates(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ListTemplatesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Get spire name
      virtual void GetSpireConfig(::grpc::ClientContext* context, const ::GetSpireConfigRequest* request, ::GetSpireConfigResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetSpireConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GetSpireConfigResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetSpireConfig(::grpc::ClientContext* context, const ::GetSpireConfigRequest* request, ::GetSpireConfigResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetSpireConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GetSpireConfigResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Cleanup files no longer needed
      virtual void EidCleanUp(::grpc::ClientContext* context, const ::EidCleanUpRequest* request, ::EidCleanUpResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void EidCleanUp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::EidCleanUpResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void EidCleanUp(::grpc::ClientContext* context, const ::EidCleanUpRequest* request, ::EidCleanUpResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void EidCleanUp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::EidCleanUpResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TrainResponse>* AsyncTrainRaw(::grpc::ClientContext* context, const ::TrainRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TrainResponse>* PrepareAsyncTrainRaw(::grpc::ClientContext* context, const ::TrainRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GetStatusResponse>* AsyncGetStatusRaw(::grpc::ClientContext* context, const ::GetStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GetStatusResponse>* PrepareAsyncGetStatusRaw(::grpc::ClientContext* context, const ::GetStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GetEvaluationsResponse>* AsyncGetEvaluationsRaw(::grpc::ClientContext* context, const ::GetEvaluationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GetEvaluationsResponse>* PrepareAsyncGetEvaluationsRaw(::grpc::ClientContext* context, const ::GetEvaluationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ListTemplatesResponse>* AsyncListTemplatesRaw(::grpc::ClientContext* context, const ::ListTemplatesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ListTemplatesResponse>* PrepareAsyncListTemplatesRaw(::grpc::ClientContext* context, const ::ListTemplatesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GetSpireConfigResponse>* AsyncGetSpireConfigRaw(::grpc::ClientContext* context, const ::GetSpireConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GetSpireConfigResponse>* PrepareAsyncGetSpireConfigRaw(::grpc::ClientContext* context, const ::GetSpireConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::EidCleanUpResponse>* AsyncEidCleanUpRaw(::grpc::ClientContext* context, const ::EidCleanUpRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::EidCleanUpResponse>* PrepareAsyncEidCleanUpRaw(::grpc::ClientContext* context, const ::EidCleanUpRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Train(::grpc::ClientContext* context, const ::TrainRequest& request, ::TrainResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TrainResponse>> AsyncTrain(::grpc::ClientContext* context, const ::TrainRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TrainResponse>>(AsyncTrainRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TrainResponse>> PrepareAsyncTrain(::grpc::ClientContext* context, const ::TrainRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TrainResponse>>(PrepareAsyncTrainRaw(context, request, cq));
    }
    ::grpc::Status GetStatus(::grpc::ClientContext* context, const ::GetStatusRequest& request, ::GetStatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetStatusResponse>> AsyncGetStatus(::grpc::ClientContext* context, const ::GetStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetStatusResponse>>(AsyncGetStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetStatusResponse>> PrepareAsyncGetStatus(::grpc::ClientContext* context, const ::GetStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetStatusResponse>>(PrepareAsyncGetStatusRaw(context, request, cq));
    }
    ::grpc::Status GetEvaluations(::grpc::ClientContext* context, const ::GetEvaluationsRequest& request, ::GetEvaluationsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetEvaluationsResponse>> AsyncGetEvaluations(::grpc::ClientContext* context, const ::GetEvaluationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetEvaluationsResponse>>(AsyncGetEvaluationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetEvaluationsResponse>> PrepareAsyncGetEvaluations(::grpc::ClientContext* context, const ::GetEvaluationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetEvaluationsResponse>>(PrepareAsyncGetEvaluationsRaw(context, request, cq));
    }
    ::grpc::Status ListTemplates(::grpc::ClientContext* context, const ::ListTemplatesRequest& request, ::ListTemplatesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ListTemplatesResponse>> AsyncListTemplates(::grpc::ClientContext* context, const ::ListTemplatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ListTemplatesResponse>>(AsyncListTemplatesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ListTemplatesResponse>> PrepareAsyncListTemplates(::grpc::ClientContext* context, const ::ListTemplatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ListTemplatesResponse>>(PrepareAsyncListTemplatesRaw(context, request, cq));
    }
    ::grpc::Status GetSpireConfig(::grpc::ClientContext* context, const ::GetSpireConfigRequest& request, ::GetSpireConfigResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetSpireConfigResponse>> AsyncGetSpireConfig(::grpc::ClientContext* context, const ::GetSpireConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetSpireConfigResponse>>(AsyncGetSpireConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetSpireConfigResponse>> PrepareAsyncGetSpireConfig(::grpc::ClientContext* context, const ::GetSpireConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetSpireConfigResponse>>(PrepareAsyncGetSpireConfigRaw(context, request, cq));
    }
    ::grpc::Status EidCleanUp(::grpc::ClientContext* context, const ::EidCleanUpRequest& request, ::EidCleanUpResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EidCleanUpResponse>> AsyncEidCleanUp(::grpc::ClientContext* context, const ::EidCleanUpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EidCleanUpResponse>>(AsyncEidCleanUpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EidCleanUpResponse>> PrepareAsyncEidCleanUp(::grpc::ClientContext* context, const ::EidCleanUpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EidCleanUpResponse>>(PrepareAsyncEidCleanUpRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Train(::grpc::ClientContext* context, const ::TrainRequest* request, ::TrainResponse* response, std::function<void(::grpc::Status)>) override;
      void Train(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::TrainResponse* response, std::function<void(::grpc::Status)>) override;
      void Train(::grpc::ClientContext* context, const ::TrainRequest* request, ::TrainResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Train(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::TrainResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetStatus(::grpc::ClientContext* context, const ::GetStatusRequest* request, ::GetStatusResponse* response, std::function<void(::grpc::Status)>) override;
      void GetStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GetStatusResponse* response, std::function<void(::grpc::Status)>) override;
      void GetStatus(::grpc::ClientContext* context, const ::GetStatusRequest* request, ::GetStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GetStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetEvaluations(::grpc::ClientContext* context, const ::GetEvaluationsRequest* request, ::GetEvaluationsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetEvaluations(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GetEvaluationsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetEvaluations(::grpc::ClientContext* context, const ::GetEvaluationsRequest* request, ::GetEvaluationsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetEvaluations(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GetEvaluationsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ListTemplates(::grpc::ClientContext* context, const ::ListTemplatesRequest* request, ::ListTemplatesResponse* response, std::function<void(::grpc::Status)>) override;
      void ListTemplates(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ListTemplatesResponse* response, std::function<void(::grpc::Status)>) override;
      void ListTemplates(::grpc::ClientContext* context, const ::ListTemplatesRequest* request, ::ListTemplatesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ListTemplates(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ListTemplatesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetSpireConfig(::grpc::ClientContext* context, const ::GetSpireConfigRequest* request, ::GetSpireConfigResponse* response, std::function<void(::grpc::Status)>) override;
      void GetSpireConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GetSpireConfigResponse* response, std::function<void(::grpc::Status)>) override;
      void GetSpireConfig(::grpc::ClientContext* context, const ::GetSpireConfigRequest* request, ::GetSpireConfigResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetSpireConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GetSpireConfigResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void EidCleanUp(::grpc::ClientContext* context, const ::EidCleanUpRequest* request, ::EidCleanUpResponse* response, std::function<void(::grpc::Status)>) override;
      void EidCleanUp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::EidCleanUpResponse* response, std::function<void(::grpc::Status)>) override;
      void EidCleanUp(::grpc::ClientContext* context, const ::EidCleanUpRequest* request, ::EidCleanUpResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void EidCleanUp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::EidCleanUpResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::TrainResponse>* AsyncTrainRaw(::grpc::ClientContext* context, const ::TrainRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TrainResponse>* PrepareAsyncTrainRaw(::grpc::ClientContext* context, const ::TrainRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GetStatusResponse>* AsyncGetStatusRaw(::grpc::ClientContext* context, const ::GetStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GetStatusResponse>* PrepareAsyncGetStatusRaw(::grpc::ClientContext* context, const ::GetStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GetEvaluationsResponse>* AsyncGetEvaluationsRaw(::grpc::ClientContext* context, const ::GetEvaluationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GetEvaluationsResponse>* PrepareAsyncGetEvaluationsRaw(::grpc::ClientContext* context, const ::GetEvaluationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ListTemplatesResponse>* AsyncListTemplatesRaw(::grpc::ClientContext* context, const ::ListTemplatesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ListTemplatesResponse>* PrepareAsyncListTemplatesRaw(::grpc::ClientContext* context, const ::ListTemplatesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GetSpireConfigResponse>* AsyncGetSpireConfigRaw(::grpc::ClientContext* context, const ::GetSpireConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GetSpireConfigResponse>* PrepareAsyncGetSpireConfigRaw(::grpc::ClientContext* context, const ::GetSpireConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::EidCleanUpResponse>* AsyncEidCleanUpRaw(::grpc::ClientContext* context, const ::EidCleanUpRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::EidCleanUpResponse>* PrepareAsyncEidCleanUpRaw(::grpc::ClientContext* context, const ::EidCleanUpRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Train_;
    const ::grpc::internal::RpcMethod rpcmethod_GetStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_GetEvaluations_;
    const ::grpc::internal::RpcMethod rpcmethod_ListTemplates_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSpireConfig_;
    const ::grpc::internal::RpcMethod rpcmethod_EidCleanUp_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Train a model
    virtual ::grpc::Status Train(::grpc::ServerContext* context, const ::TrainRequest* request, ::TrainResponse* response);
    // Get status of training job
    virtual ::grpc::Status GetStatus(::grpc::ServerContext* context, const ::GetStatusRequest* request, ::GetStatusResponse* response);
    // Get evaluation metrics for the training job
    virtual ::grpc::Status GetEvaluations(::grpc::ServerContext* context, const ::GetEvaluationsRequest* request, ::GetEvaluationsResponse* response);
    // List training templates and doc strings
    virtual ::grpc::Status ListTemplates(::grpc::ServerContext* context, const ::ListTemplatesRequest* request, ::ListTemplatesResponse* response);
    // Get spire name
    virtual ::grpc::Status GetSpireConfig(::grpc::ServerContext* context, const ::GetSpireConfigRequest* request, ::GetSpireConfigResponse* response);
    // Cleanup files no longer needed
    virtual ::grpc::Status EidCleanUp(::grpc::ServerContext* context, const ::EidCleanUpRequest* request, ::EidCleanUpResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Train : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Train() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Train() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Train(::grpc::ServerContext* context, const ::TrainRequest* request, ::TrainResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTrain(::grpc::ServerContext* context, ::TrainRequest* request, ::grpc::ServerAsyncResponseWriter< ::TrainResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetStatus() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* context, const ::GetStatusRequest* request, ::GetStatusResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStatus(::grpc::ServerContext* context, ::GetStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::GetStatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetEvaluations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetEvaluations() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetEvaluations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEvaluations(::grpc::ServerContext* context, const ::GetEvaluationsRequest* request, ::GetEvaluationsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEvaluations(::grpc::ServerContext* context, ::GetEvaluationsRequest* request, ::grpc::ServerAsyncResponseWriter< ::GetEvaluationsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListTemplates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListTemplates() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ListTemplates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTemplates(::grpc::ServerContext* context, const ::ListTemplatesRequest* request, ::ListTemplatesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListTemplates(::grpc::ServerContext* context, ::ListTemplatesRequest* request, ::grpc::ServerAsyncResponseWriter< ::ListTemplatesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSpireConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetSpireConfig() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetSpireConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpireConfig(::grpc::ServerContext* context, const ::GetSpireConfigRequest* request, ::GetSpireConfigResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSpireConfig(::grpc::ServerContext* context, ::GetSpireConfigRequest* request, ::grpc::ServerAsyncResponseWriter< ::GetSpireConfigResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EidCleanUp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_EidCleanUp() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_EidCleanUp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EidCleanUp(::grpc::ServerContext* context, const ::EidCleanUpRequest* request, ::EidCleanUpResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEidCleanUp(::grpc::ServerContext* context, ::EidCleanUpRequest* request, ::grpc::ServerAsyncResponseWriter< ::EidCleanUpResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Train<WithAsyncMethod_GetStatus<WithAsyncMethod_GetEvaluations<WithAsyncMethod_ListTemplates<WithAsyncMethod_GetSpireConfig<WithAsyncMethod_EidCleanUp<Service > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Train : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Train() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::TrainRequest, ::TrainResponse>(
          [this](::grpc::ServerContext* context,
                 const ::TrainRequest* request,
                 ::TrainResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Train(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Train(
        ::grpc::experimental::MessageAllocator< ::TrainRequest, ::TrainResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::TrainRequest, ::TrainResponse>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Train() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Train(::grpc::ServerContext* context, const ::TrainRequest* request, ::TrainResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Train(::grpc::ServerContext* context, const ::TrainRequest* request, ::TrainResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetStatus() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::GetStatusRequest, ::GetStatusResponse>(
          [this](::grpc::ServerContext* context,
                 const ::GetStatusRequest* request,
                 ::GetStatusResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetStatus(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetStatus(
        ::grpc::experimental::MessageAllocator< ::GetStatusRequest, ::GetStatusResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::GetStatusRequest, ::GetStatusResponse>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* context, const ::GetStatusRequest* request, ::GetStatusResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetStatus(::grpc::ServerContext* context, const ::GetStatusRequest* request, ::GetStatusResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetEvaluations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetEvaluations() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::GetEvaluationsRequest, ::GetEvaluationsResponse>(
          [this](::grpc::ServerContext* context,
                 const ::GetEvaluationsRequest* request,
                 ::GetEvaluationsResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetEvaluations(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetEvaluations(
        ::grpc::experimental::MessageAllocator< ::GetEvaluationsRequest, ::GetEvaluationsResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::GetEvaluationsRequest, ::GetEvaluationsResponse>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetEvaluations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEvaluations(::grpc::ServerContext* context, const ::GetEvaluationsRequest* request, ::GetEvaluationsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetEvaluations(::grpc::ServerContext* context, const ::GetEvaluationsRequest* request, ::GetEvaluationsResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListTemplates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ListTemplates() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::ListTemplatesRequest, ::ListTemplatesResponse>(
          [this](::grpc::ServerContext* context,
                 const ::ListTemplatesRequest* request,
                 ::ListTemplatesResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ListTemplates(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_ListTemplates(
        ::grpc::experimental::MessageAllocator< ::ListTemplatesRequest, ::ListTemplatesResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ListTemplatesRequest, ::ListTemplatesResponse>*>(
          ::grpc::Service::experimental().GetHandler(3))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListTemplates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTemplates(::grpc::ServerContext* context, const ::ListTemplatesRequest* request, ::ListTemplatesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ListTemplates(::grpc::ServerContext* context, const ::ListTemplatesRequest* request, ::ListTemplatesResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetSpireConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetSpireConfig() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::GetSpireConfigRequest, ::GetSpireConfigResponse>(
          [this](::grpc::ServerContext* context,
                 const ::GetSpireConfigRequest* request,
                 ::GetSpireConfigResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetSpireConfig(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetSpireConfig(
        ::grpc::experimental::MessageAllocator< ::GetSpireConfigRequest, ::GetSpireConfigResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::GetSpireConfigRequest, ::GetSpireConfigResponse>*>(
          ::grpc::Service::experimental().GetHandler(4))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetSpireConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpireConfig(::grpc::ServerContext* context, const ::GetSpireConfigRequest* request, ::GetSpireConfigResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetSpireConfig(::grpc::ServerContext* context, const ::GetSpireConfigRequest* request, ::GetSpireConfigResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_EidCleanUp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_EidCleanUp() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::EidCleanUpRequest, ::EidCleanUpResponse>(
          [this](::grpc::ServerContext* context,
                 const ::EidCleanUpRequest* request,
                 ::EidCleanUpResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->EidCleanUp(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_EidCleanUp(
        ::grpc::experimental::MessageAllocator< ::EidCleanUpRequest, ::EidCleanUpResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::EidCleanUpRequest, ::EidCleanUpResponse>*>(
          ::grpc::Service::experimental().GetHandler(5))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_EidCleanUp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EidCleanUp(::grpc::ServerContext* context, const ::EidCleanUpRequest* request, ::EidCleanUpResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void EidCleanUp(::grpc::ServerContext* context, const ::EidCleanUpRequest* request, ::EidCleanUpResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_Train<ExperimentalWithCallbackMethod_GetStatus<ExperimentalWithCallbackMethod_GetEvaluations<ExperimentalWithCallbackMethod_ListTemplates<ExperimentalWithCallbackMethod_GetSpireConfig<ExperimentalWithCallbackMethod_EidCleanUp<Service > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Train : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Train() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Train() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Train(::grpc::ServerContext* context, const ::TrainRequest* request, ::TrainResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetStatus() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* context, const ::GetStatusRequest* request, ::GetStatusResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetEvaluations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetEvaluations() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetEvaluations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEvaluations(::grpc::ServerContext* context, const ::GetEvaluationsRequest* request, ::GetEvaluationsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListTemplates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListTemplates() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ListTemplates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTemplates(::grpc::ServerContext* context, const ::ListTemplatesRequest* request, ::ListTemplatesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSpireConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetSpireConfig() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetSpireConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpireConfig(::grpc::ServerContext* context, const ::GetSpireConfigRequest* request, ::GetSpireConfigResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EidCleanUp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_EidCleanUp() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_EidCleanUp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EidCleanUp(::grpc::ServerContext* context, const ::EidCleanUpRequest* request, ::EidCleanUpResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Train : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Train() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Train() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Train(::grpc::ServerContext* context, const ::TrainRequest* request, ::TrainResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTrain(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetStatus() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* context, const ::GetStatusRequest* request, ::GetStatusResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetEvaluations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetEvaluations() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetEvaluations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEvaluations(::grpc::ServerContext* context, const ::GetEvaluationsRequest* request, ::GetEvaluationsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEvaluations(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListTemplates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ListTemplates() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ListTemplates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTemplates(::grpc::ServerContext* context, const ::ListTemplatesRequest* request, ::ListTemplatesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListTemplates(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSpireConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetSpireConfig() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetSpireConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpireConfig(::grpc::ServerContext* context, const ::GetSpireConfigRequest* request, ::GetSpireConfigResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSpireConfig(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_EidCleanUp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_EidCleanUp() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_EidCleanUp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EidCleanUp(::grpc::ServerContext* context, const ::EidCleanUpRequest* request, ::EidCleanUpResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEidCleanUp(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Train : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Train() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Train(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Train() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Train(::grpc::ServerContext* context, const ::TrainRequest* request, ::TrainResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Train(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetStatus() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetStatus(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* context, const ::GetStatusRequest* request, ::GetStatusResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetStatus(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetEvaluations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetEvaluations() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetEvaluations(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetEvaluations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEvaluations(::grpc::ServerContext* context, const ::GetEvaluationsRequest* request, ::GetEvaluationsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetEvaluations(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListTemplates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ListTemplates() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ListTemplates(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ListTemplates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTemplates(::grpc::ServerContext* context, const ::ListTemplatesRequest* request, ::ListTemplatesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ListTemplates(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetSpireConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetSpireConfig() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetSpireConfig(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetSpireConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpireConfig(::grpc::ServerContext* context, const ::GetSpireConfigRequest* request, ::GetSpireConfigResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetSpireConfig(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_EidCleanUp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_EidCleanUp() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->EidCleanUp(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_EidCleanUp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EidCleanUp(::grpc::ServerContext* context, const ::EidCleanUpRequest* request, ::EidCleanUpResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void EidCleanUp(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Train : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Train() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::TrainRequest, ::TrainResponse>(std::bind(&WithStreamedUnaryMethod_Train<BaseClass>::StreamedTrain, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Train() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Train(::grpc::ServerContext* context, const ::TrainRequest* request, ::TrainResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTrain(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::TrainRequest,::TrainResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetStatus() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::GetStatusRequest, ::GetStatusResponse>(std::bind(&WithStreamedUnaryMethod_GetStatus<BaseClass>::StreamedGetStatus, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* context, const ::GetStatusRequest* request, ::GetStatusResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GetStatusRequest,::GetStatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetEvaluations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetEvaluations() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::GetEvaluationsRequest, ::GetEvaluationsResponse>(std::bind(&WithStreamedUnaryMethod_GetEvaluations<BaseClass>::StreamedGetEvaluations, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetEvaluations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetEvaluations(::grpc::ServerContext* context, const ::GetEvaluationsRequest* request, ::GetEvaluationsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetEvaluations(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GetEvaluationsRequest,::GetEvaluationsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListTemplates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListTemplates() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::ListTemplatesRequest, ::ListTemplatesResponse>(std::bind(&WithStreamedUnaryMethod_ListTemplates<BaseClass>::StreamedListTemplates, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListTemplates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListTemplates(::grpc::ServerContext* context, const ::ListTemplatesRequest* request, ::ListTemplatesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListTemplates(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ListTemplatesRequest,::ListTemplatesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSpireConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetSpireConfig() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::GetSpireConfigRequest, ::GetSpireConfigResponse>(std::bind(&WithStreamedUnaryMethod_GetSpireConfig<BaseClass>::StreamedGetSpireConfig, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetSpireConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSpireConfig(::grpc::ServerContext* context, const ::GetSpireConfigRequest* request, ::GetSpireConfigResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSpireConfig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GetSpireConfigRequest,::GetSpireConfigResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_EidCleanUp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_EidCleanUp() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::EidCleanUpRequest, ::EidCleanUpResponse>(std::bind(&WithStreamedUnaryMethod_EidCleanUp<BaseClass>::StreamedEidCleanUp, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_EidCleanUp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EidCleanUp(::grpc::ServerContext* context, const ::EidCleanUpRequest* request, ::EidCleanUpResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEidCleanUp(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::EidCleanUpRequest,::EidCleanUpResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Train<WithStreamedUnaryMethod_GetStatus<WithStreamedUnaryMethod_GetEvaluations<WithStreamedUnaryMethod_ListTemplates<WithStreamedUnaryMethod_GetSpireConfig<WithStreamedUnaryMethod_EidCleanUp<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Train<WithStreamedUnaryMethod_GetStatus<WithStreamedUnaryMethod_GetEvaluations<WithStreamedUnaryMethod_ListTemplates<WithStreamedUnaryMethod_GetSpireConfig<WithStreamedUnaryMethod_EidCleanUp<Service > > > > > > StreamedService;
};


#endif  // GRPC_proto_2ftrainer_2ftrainer_2eproto__INCLUDED
