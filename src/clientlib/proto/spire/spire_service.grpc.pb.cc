// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/spire/spire_service.proto

#include "proto/spire/spire_service.pb.h"
#include "proto/spire/spire_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* SpireService_method_names[] = {
  "/SpireService/SpireGetState",
  "/SpireService/SpireGetConfig",
  "/SpireService/SpireSetConfig",
  "/SpireService/SpireMaybeJIT",
  "/SpireService/Check",
  "/SpireService/SpireStopServing",
  "/SpireService/SpireEmbedTag",
  "/SpireService/SpireSavedOutput",
  "/SpireService/SpireDetectEmbedTag",
  "/SpireService/SpireInstanceSegment",
};

std::unique_ptr< SpireService::Stub> SpireService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SpireService::Stub> stub(new SpireService::Stub(channel));
  return stub;
}

SpireService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SpireGetState_(SpireService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SpireGetConfig_(SpireService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SpireSetConfig_(SpireService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SpireMaybeJIT_(SpireService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Check_(SpireService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SpireStopServing_(SpireService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SpireEmbedTag_(SpireService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SpireSavedOutput_(SpireService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SpireDetectEmbedTag_(SpireService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SpireInstanceSegment_(SpireService_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SpireService::Stub::SpireGetState(::grpc::ClientContext* context, const ::SpireGetStateRequest& request, ::SpireGetStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SpireGetState_, context, request, response);
}

void SpireService::Stub::experimental_async::SpireGetState(::grpc::ClientContext* context, const ::SpireGetStateRequest* request, ::SpireGetStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SpireGetState_, context, request, response, std::move(f));
}

void SpireService::Stub::experimental_async::SpireGetState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireGetStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SpireGetState_, context, request, response, std::move(f));
}

void SpireService::Stub::experimental_async::SpireGetState(::grpc::ClientContext* context, const ::SpireGetStateRequest* request, ::SpireGetStateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SpireGetState_, context, request, response, reactor);
}

void SpireService::Stub::experimental_async::SpireGetState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireGetStateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SpireGetState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::SpireGetStateResponse>* SpireService::Stub::AsyncSpireGetStateRaw(::grpc::ClientContext* context, const ::SpireGetStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::SpireGetStateResponse>::Create(channel_.get(), cq, rpcmethod_SpireGetState_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::SpireGetStateResponse>* SpireService::Stub::PrepareAsyncSpireGetStateRaw(::grpc::ClientContext* context, const ::SpireGetStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::SpireGetStateResponse>::Create(channel_.get(), cq, rpcmethod_SpireGetState_, context, request, false);
}

::grpc::Status SpireService::Stub::SpireGetConfig(::grpc::ClientContext* context, const ::SpireGetConfigRequest& request, ::SpireGetConfigResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SpireGetConfig_, context, request, response);
}

void SpireService::Stub::experimental_async::SpireGetConfig(::grpc::ClientContext* context, const ::SpireGetConfigRequest* request, ::SpireGetConfigResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SpireGetConfig_, context, request, response, std::move(f));
}

void SpireService::Stub::experimental_async::SpireGetConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireGetConfigResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SpireGetConfig_, context, request, response, std::move(f));
}

void SpireService::Stub::experimental_async::SpireGetConfig(::grpc::ClientContext* context, const ::SpireGetConfigRequest* request, ::SpireGetConfigResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SpireGetConfig_, context, request, response, reactor);
}

void SpireService::Stub::experimental_async::SpireGetConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireGetConfigResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SpireGetConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::SpireGetConfigResponse>* SpireService::Stub::AsyncSpireGetConfigRaw(::grpc::ClientContext* context, const ::SpireGetConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::SpireGetConfigResponse>::Create(channel_.get(), cq, rpcmethod_SpireGetConfig_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::SpireGetConfigResponse>* SpireService::Stub::PrepareAsyncSpireGetConfigRaw(::grpc::ClientContext* context, const ::SpireGetConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::SpireGetConfigResponse>::Create(channel_.get(), cq, rpcmethod_SpireGetConfig_, context, request, false);
}

::grpc::Status SpireService::Stub::SpireSetConfig(::grpc::ClientContext* context, const ::SpireSetConfigRequest& request, ::SpireSetConfigResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SpireSetConfig_, context, request, response);
}

void SpireService::Stub::experimental_async::SpireSetConfig(::grpc::ClientContext* context, const ::SpireSetConfigRequest* request, ::SpireSetConfigResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SpireSetConfig_, context, request, response, std::move(f));
}

void SpireService::Stub::experimental_async::SpireSetConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireSetConfigResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SpireSetConfig_, context, request, response, std::move(f));
}

void SpireService::Stub::experimental_async::SpireSetConfig(::grpc::ClientContext* context, const ::SpireSetConfigRequest* request, ::SpireSetConfigResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SpireSetConfig_, context, request, response, reactor);
}

void SpireService::Stub::experimental_async::SpireSetConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireSetConfigResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SpireSetConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::SpireSetConfigResponse>* SpireService::Stub::AsyncSpireSetConfigRaw(::grpc::ClientContext* context, const ::SpireSetConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::SpireSetConfigResponse>::Create(channel_.get(), cq, rpcmethod_SpireSetConfig_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::SpireSetConfigResponse>* SpireService::Stub::PrepareAsyncSpireSetConfigRaw(::grpc::ClientContext* context, const ::SpireSetConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::SpireSetConfigResponse>::Create(channel_.get(), cq, rpcmethod_SpireSetConfig_, context, request, false);
}

::grpc::Status SpireService::Stub::SpireMaybeJIT(::grpc::ClientContext* context, const ::SpireMaybeJITRequest& request, ::SpireMaybeJITResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SpireMaybeJIT_, context, request, response);
}

void SpireService::Stub::experimental_async::SpireMaybeJIT(::grpc::ClientContext* context, const ::SpireMaybeJITRequest* request, ::SpireMaybeJITResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SpireMaybeJIT_, context, request, response, std::move(f));
}

void SpireService::Stub::experimental_async::SpireMaybeJIT(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireMaybeJITResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SpireMaybeJIT_, context, request, response, std::move(f));
}

void SpireService::Stub::experimental_async::SpireMaybeJIT(::grpc::ClientContext* context, const ::SpireMaybeJITRequest* request, ::SpireMaybeJITResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SpireMaybeJIT_, context, request, response, reactor);
}

void SpireService::Stub::experimental_async::SpireMaybeJIT(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireMaybeJITResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SpireMaybeJIT_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::SpireMaybeJITResponse>* SpireService::Stub::AsyncSpireMaybeJITRaw(::grpc::ClientContext* context, const ::SpireMaybeJITRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::SpireMaybeJITResponse>::Create(channel_.get(), cq, rpcmethod_SpireMaybeJIT_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::SpireMaybeJITResponse>* SpireService::Stub::PrepareAsyncSpireMaybeJITRaw(::grpc::ClientContext* context, const ::SpireMaybeJITRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::SpireMaybeJITResponse>::Create(channel_.get(), cq, rpcmethod_SpireMaybeJIT_, context, request, false);
}

::grpc::Status SpireService::Stub::Check(::grpc::ClientContext* context, const ::HealthCheckRequest& request, ::HealthCheckResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Check_, context, request, response);
}

void SpireService::Stub::experimental_async::Check(::grpc::ClientContext* context, const ::HealthCheckRequest* request, ::HealthCheckResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Check_, context, request, response, std::move(f));
}

void SpireService::Stub::experimental_async::Check(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::HealthCheckResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Check_, context, request, response, std::move(f));
}

void SpireService::Stub::experimental_async::Check(::grpc::ClientContext* context, const ::HealthCheckRequest* request, ::HealthCheckResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Check_, context, request, response, reactor);
}

void SpireService::Stub::experimental_async::Check(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::HealthCheckResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Check_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::HealthCheckResponse>* SpireService::Stub::AsyncCheckRaw(::grpc::ClientContext* context, const ::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::HealthCheckResponse>::Create(channel_.get(), cq, rpcmethod_Check_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::HealthCheckResponse>* SpireService::Stub::PrepareAsyncCheckRaw(::grpc::ClientContext* context, const ::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::HealthCheckResponse>::Create(channel_.get(), cq, rpcmethod_Check_, context, request, false);
}

::grpc::Status SpireService::Stub::SpireStopServing(::grpc::ClientContext* context, const ::SpireStopServingRequest& request, ::SpireStopServingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SpireStopServing_, context, request, response);
}

void SpireService::Stub::experimental_async::SpireStopServing(::grpc::ClientContext* context, const ::SpireStopServingRequest* request, ::SpireStopServingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SpireStopServing_, context, request, response, std::move(f));
}

void SpireService::Stub::experimental_async::SpireStopServing(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireStopServingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SpireStopServing_, context, request, response, std::move(f));
}

void SpireService::Stub::experimental_async::SpireStopServing(::grpc::ClientContext* context, const ::SpireStopServingRequest* request, ::SpireStopServingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SpireStopServing_, context, request, response, reactor);
}

void SpireService::Stub::experimental_async::SpireStopServing(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireStopServingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SpireStopServing_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::SpireStopServingResponse>* SpireService::Stub::AsyncSpireStopServingRaw(::grpc::ClientContext* context, const ::SpireStopServingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::SpireStopServingResponse>::Create(channel_.get(), cq, rpcmethod_SpireStopServing_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::SpireStopServingResponse>* SpireService::Stub::PrepareAsyncSpireStopServingRaw(::grpc::ClientContext* context, const ::SpireStopServingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::SpireStopServingResponse>::Create(channel_.get(), cq, rpcmethod_SpireStopServing_, context, request, false);
}

::grpc::Status SpireService::Stub::SpireEmbedTag(::grpc::ClientContext* context, const ::SpireEmbedTagRequest& request, ::SpireEmbedTagResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SpireEmbedTag_, context, request, response);
}

void SpireService::Stub::experimental_async::SpireEmbedTag(::grpc::ClientContext* context, const ::SpireEmbedTagRequest* request, ::SpireEmbedTagResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SpireEmbedTag_, context, request, response, std::move(f));
}

void SpireService::Stub::experimental_async::SpireEmbedTag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireEmbedTagResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SpireEmbedTag_, context, request, response, std::move(f));
}

void SpireService::Stub::experimental_async::SpireEmbedTag(::grpc::ClientContext* context, const ::SpireEmbedTagRequest* request, ::SpireEmbedTagResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SpireEmbedTag_, context, request, response, reactor);
}

void SpireService::Stub::experimental_async::SpireEmbedTag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireEmbedTagResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SpireEmbedTag_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::SpireEmbedTagResponse>* SpireService::Stub::AsyncSpireEmbedTagRaw(::grpc::ClientContext* context, const ::SpireEmbedTagRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::SpireEmbedTagResponse>::Create(channel_.get(), cq, rpcmethod_SpireEmbedTag_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::SpireEmbedTagResponse>* SpireService::Stub::PrepareAsyncSpireEmbedTagRaw(::grpc::ClientContext* context, const ::SpireEmbedTagRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::SpireEmbedTagResponse>::Create(channel_.get(), cq, rpcmethod_SpireEmbedTag_, context, request, false);
}

::grpc::Status SpireService::Stub::SpireSavedOutput(::grpc::ClientContext* context, const ::SpireSavedOutputRequest& request, ::SpireSavedOutputResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SpireSavedOutput_, context, request, response);
}

void SpireService::Stub::experimental_async::SpireSavedOutput(::grpc::ClientContext* context, const ::SpireSavedOutputRequest* request, ::SpireSavedOutputResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SpireSavedOutput_, context, request, response, std::move(f));
}

void SpireService::Stub::experimental_async::SpireSavedOutput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireSavedOutputResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SpireSavedOutput_, context, request, response, std::move(f));
}

void SpireService::Stub::experimental_async::SpireSavedOutput(::grpc::ClientContext* context, const ::SpireSavedOutputRequest* request, ::SpireSavedOutputResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SpireSavedOutput_, context, request, response, reactor);
}

void SpireService::Stub::experimental_async::SpireSavedOutput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireSavedOutputResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SpireSavedOutput_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::SpireSavedOutputResponse>* SpireService::Stub::AsyncSpireSavedOutputRaw(::grpc::ClientContext* context, const ::SpireSavedOutputRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::SpireSavedOutputResponse>::Create(channel_.get(), cq, rpcmethod_SpireSavedOutput_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::SpireSavedOutputResponse>* SpireService::Stub::PrepareAsyncSpireSavedOutputRaw(::grpc::ClientContext* context, const ::SpireSavedOutputRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::SpireSavedOutputResponse>::Create(channel_.get(), cq, rpcmethod_SpireSavedOutput_, context, request, false);
}

::grpc::Status SpireService::Stub::SpireDetectEmbedTag(::grpc::ClientContext* context, const ::SpireDetectEmbedTagRequest& request, ::SpireDetectEmbedTagResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SpireDetectEmbedTag_, context, request, response);
}

void SpireService::Stub::experimental_async::SpireDetectEmbedTag(::grpc::ClientContext* context, const ::SpireDetectEmbedTagRequest* request, ::SpireDetectEmbedTagResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SpireDetectEmbedTag_, context, request, response, std::move(f));
}

void SpireService::Stub::experimental_async::SpireDetectEmbedTag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireDetectEmbedTagResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SpireDetectEmbedTag_, context, request, response, std::move(f));
}

void SpireService::Stub::experimental_async::SpireDetectEmbedTag(::grpc::ClientContext* context, const ::SpireDetectEmbedTagRequest* request, ::SpireDetectEmbedTagResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SpireDetectEmbedTag_, context, request, response, reactor);
}

void SpireService::Stub::experimental_async::SpireDetectEmbedTag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireDetectEmbedTagResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SpireDetectEmbedTag_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::SpireDetectEmbedTagResponse>* SpireService::Stub::AsyncSpireDetectEmbedTagRaw(::grpc::ClientContext* context, const ::SpireDetectEmbedTagRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::SpireDetectEmbedTagResponse>::Create(channel_.get(), cq, rpcmethod_SpireDetectEmbedTag_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::SpireDetectEmbedTagResponse>* SpireService::Stub::PrepareAsyncSpireDetectEmbedTagRaw(::grpc::ClientContext* context, const ::SpireDetectEmbedTagRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::SpireDetectEmbedTagResponse>::Create(channel_.get(), cq, rpcmethod_SpireDetectEmbedTag_, context, request, false);
}

::grpc::Status SpireService::Stub::SpireInstanceSegment(::grpc::ClientContext* context, const ::SpireInstanceSegmentRequest& request, ::SpireInstanceSegmentResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SpireInstanceSegment_, context, request, response);
}

void SpireService::Stub::experimental_async::SpireInstanceSegment(::grpc::ClientContext* context, const ::SpireInstanceSegmentRequest* request, ::SpireInstanceSegmentResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SpireInstanceSegment_, context, request, response, std::move(f));
}

void SpireService::Stub::experimental_async::SpireInstanceSegment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireInstanceSegmentResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SpireInstanceSegment_, context, request, response, std::move(f));
}

void SpireService::Stub::experimental_async::SpireInstanceSegment(::grpc::ClientContext* context, const ::SpireInstanceSegmentRequest* request, ::SpireInstanceSegmentResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SpireInstanceSegment_, context, request, response, reactor);
}

void SpireService::Stub::experimental_async::SpireInstanceSegment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireInstanceSegmentResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SpireInstanceSegment_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::SpireInstanceSegmentResponse>* SpireService::Stub::AsyncSpireInstanceSegmentRaw(::grpc::ClientContext* context, const ::SpireInstanceSegmentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::SpireInstanceSegmentResponse>::Create(channel_.get(), cq, rpcmethod_SpireInstanceSegment_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::SpireInstanceSegmentResponse>* SpireService::Stub::PrepareAsyncSpireInstanceSegmentRaw(::grpc::ClientContext* context, const ::SpireInstanceSegmentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::SpireInstanceSegmentResponse>::Create(channel_.get(), cq, rpcmethod_SpireInstanceSegment_, context, request, false);
}

SpireService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpireService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpireService::Service, ::SpireGetStateRequest, ::SpireGetStateResponse>(
          std::mem_fn(&SpireService::Service::SpireGetState), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpireService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpireService::Service, ::SpireGetConfigRequest, ::SpireGetConfigResponse>(
          std::mem_fn(&SpireService::Service::SpireGetConfig), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpireService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpireService::Service, ::SpireSetConfigRequest, ::SpireSetConfigResponse>(
          std::mem_fn(&SpireService::Service::SpireSetConfig), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpireService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpireService::Service, ::SpireMaybeJITRequest, ::SpireMaybeJITResponse>(
          std::mem_fn(&SpireService::Service::SpireMaybeJIT), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpireService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpireService::Service, ::HealthCheckRequest, ::HealthCheckResponse>(
          std::mem_fn(&SpireService::Service::Check), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpireService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpireService::Service, ::SpireStopServingRequest, ::SpireStopServingResponse>(
          std::mem_fn(&SpireService::Service::SpireStopServing), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpireService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpireService::Service, ::SpireEmbedTagRequest, ::SpireEmbedTagResponse>(
          std::mem_fn(&SpireService::Service::SpireEmbedTag), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpireService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpireService::Service, ::SpireSavedOutputRequest, ::SpireSavedOutputResponse>(
          std::mem_fn(&SpireService::Service::SpireSavedOutput), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpireService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpireService::Service, ::SpireDetectEmbedTagRequest, ::SpireDetectEmbedTagResponse>(
          std::mem_fn(&SpireService::Service::SpireDetectEmbedTag), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpireService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpireService::Service, ::SpireInstanceSegmentRequest, ::SpireInstanceSegmentResponse>(
          std::mem_fn(&SpireService::Service::SpireInstanceSegment), this)));
}

SpireService::Service::~Service() {
}

::grpc::Status SpireService::Service::SpireGetState(::grpc::ServerContext* context, const ::SpireGetStateRequest* request, ::SpireGetStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpireService::Service::SpireGetConfig(::grpc::ServerContext* context, const ::SpireGetConfigRequest* request, ::SpireGetConfigResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpireService::Service::SpireSetConfig(::grpc::ServerContext* context, const ::SpireSetConfigRequest* request, ::SpireSetConfigResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpireService::Service::SpireMaybeJIT(::grpc::ServerContext* context, const ::SpireMaybeJITRequest* request, ::SpireMaybeJITResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpireService::Service::Check(::grpc::ServerContext* context, const ::HealthCheckRequest* request, ::HealthCheckResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpireService::Service::SpireStopServing(::grpc::ServerContext* context, const ::SpireStopServingRequest* request, ::SpireStopServingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpireService::Service::SpireEmbedTag(::grpc::ServerContext* context, const ::SpireEmbedTagRequest* request, ::SpireEmbedTagResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpireService::Service::SpireSavedOutput(::grpc::ServerContext* context, const ::SpireSavedOutputRequest* request, ::SpireSavedOutputResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpireService::Service::SpireDetectEmbedTag(::grpc::ServerContext* context, const ::SpireDetectEmbedTagRequest* request, ::SpireDetectEmbedTagResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpireService::Service::SpireInstanceSegment(::grpc::ServerContext* context, const ::SpireInstanceSegmentRequest* request, ::SpireInstanceSegmentResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


