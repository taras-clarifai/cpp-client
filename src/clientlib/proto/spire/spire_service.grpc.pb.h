// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/spire/spire_service.proto
#ifndef GRPC_proto_2fspire_2fspire_5fservice_2eproto__INCLUDED
#define GRPC_proto_2fspire_2fspire_5fservice_2eproto__INCLUDED

#include "proto/spire/spire_service.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

// Interface exported by the server.
class SpireService final {
 public:
  static constexpr char const* service_full_name() {
    return "SpireService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Means the net is set and already initialized (jitted).
    // This replaces is_ready and is_started which were always confusing.
    virtual ::grpc::Status SpireGetState(::grpc::ClientContext* context, const ::SpireGetStateRequest& request, ::SpireGetStateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireGetStateResponse>> AsyncSpireGetState(::grpc::ClientContext* context, const ::SpireGetStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireGetStateResponse>>(AsyncSpireGetStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireGetStateResponse>> PrepareAsyncSpireGetState(::grpc::ClientContext* context, const ::SpireGetStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireGetStateResponse>>(PrepareAsyncSpireGetStateRaw(context, request, cq));
    }
    // Predict given a trained model and embeddings from some examples
    virtual ::grpc::Status SpireGetConfig(::grpc::ClientContext* context, const ::SpireGetConfigRequest& request, ::SpireGetConfigResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireGetConfigResponse>> AsyncSpireGetConfig(::grpc::ClientContext* context, const ::SpireGetConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireGetConfigResponse>>(AsyncSpireGetConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireGetConfigResponse>> PrepareAsyncSpireGetConfig(::grpc::ClientContext* context, const ::SpireGetConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireGetConfigResponse>>(PrepareAsyncSpireGetConfigRaw(context, request, cq));
    }
    // Sets the spire config into the net and re-JITs with the new model.
    virtual ::grpc::Status SpireSetConfig(::grpc::ClientContext* context, const ::SpireSetConfigRequest& request, ::SpireSetConfigResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireSetConfigResponse>> AsyncSpireSetConfig(::grpc::ClientContext* context, const ::SpireSetConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireSetConfigResponse>>(AsyncSpireSetConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireSetConfigResponse>> PrepareAsyncSpireSetConfig(::grpc::ClientContext* context, const ::SpireSetConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireSetConfigResponse>>(PrepareAsyncSpireSetConfigRaw(context, request, cq));
    }
    // If the net is not JIT initialized then do it now.
    virtual ::grpc::Status SpireMaybeJIT(::grpc::ClientContext* context, const ::SpireMaybeJITRequest& request, ::SpireMaybeJITResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireMaybeJITResponse>> AsyncSpireMaybeJIT(::grpc::ClientContext* context, const ::SpireMaybeJITRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireMaybeJITResponse>>(AsyncSpireMaybeJITRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireMaybeJITResponse>> PrepareAsyncSpireMaybeJIT(::grpc::ClientContext* context, const ::SpireMaybeJITRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireMaybeJITResponse>>(PrepareAsyncSpireMaybeJITRaw(context, request, cq));
    }
    // Health check interface: Perform a prediction on a test batch
    virtual ::grpc::Status Check(::grpc::ClientContext* context, const ::HealthCheckRequest& request, ::HealthCheckResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HealthCheckResponse>> AsyncCheck(::grpc::ClientContext* context, const ::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HealthCheckResponse>>(AsyncCheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HealthCheckResponse>> PrepareAsyncCheck(::grpc::ClientContext* context, const ::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HealthCheckResponse>>(PrepareAsyncCheckRaw(context, request, cq));
    }
    // Tell the net to stop serving which shutdowns the spire neural net and flushes the socket.
    virtual ::grpc::Status SpireStopServing(::grpc::ClientContext* context, const ::SpireStopServingRequest& request, ::SpireStopServingResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireStopServingResponse>> AsyncSpireStopServing(::grpc::ClientContext* context, const ::SpireStopServingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireStopServingResponse>>(AsyncSpireStopServingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireStopServingResponse>> PrepareAsyncSpireStopServing(::grpc::ClientContext* context, const ::SpireStopServingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireStopServingResponse>>(PrepareAsyncSpireStopServingRaw(context, request, cq));
    }
    // This does 'tag' and 'embed' ops on the image or any combination of them.
    virtual ::grpc::Status SpireEmbedTag(::grpc::ClientContext* context, const ::SpireEmbedTagRequest& request, ::SpireEmbedTagResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireEmbedTagResponse>> AsyncSpireEmbedTag(::grpc::ClientContext* context, const ::SpireEmbedTagRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireEmbedTagResponse>>(AsyncSpireEmbedTagRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireEmbedTagResponse>> PrepareAsyncSpireEmbedTag(::grpc::ClientContext* context, const ::SpireEmbedTagRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireEmbedTagResponse>>(PrepareAsyncSpireEmbedTagRaw(context, request, cq));
    }
    // Get the saved outputs from the neural network.
    virtual ::grpc::Status SpireSavedOutput(::grpc::ClientContext* context, const ::SpireSavedOutputRequest& request, ::SpireSavedOutputResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireSavedOutputResponse>> AsyncSpireSavedOutput(::grpc::ClientContext* context, const ::SpireSavedOutputRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireSavedOutputResponse>>(AsyncSpireSavedOutputRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireSavedOutputResponse>> PrepareAsyncSpireSavedOutput(::grpc::ClientContext* context, const ::SpireSavedOutputRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireSavedOutputResponse>>(PrepareAsyncSpireSavedOutputRaw(context, request, cq));
    }
    // Face and object detection in a single endpoint.
    virtual ::grpc::Status SpireDetectEmbedTag(::grpc::ClientContext* context, const ::SpireDetectEmbedTagRequest& request, ::SpireDetectEmbedTagResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireDetectEmbedTagResponse>> AsyncSpireDetectEmbedTag(::grpc::ClientContext* context, const ::SpireDetectEmbedTagRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireDetectEmbedTagResponse>>(AsyncSpireDetectEmbedTagRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireDetectEmbedTagResponse>> PrepareAsyncSpireDetectEmbedTag(::grpc::ClientContext* context, const ::SpireDetectEmbedTagRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireDetectEmbedTagResponse>>(PrepareAsyncSpireDetectEmbedTagRaw(context, request, cq));
    }
    // Segmentation model rpc.
    virtual ::grpc::Status SpireInstanceSegment(::grpc::ClientContext* context, const ::SpireInstanceSegmentRequest& request, ::SpireInstanceSegmentResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireInstanceSegmentResponse>> AsyncSpireInstanceSegment(::grpc::ClientContext* context, const ::SpireInstanceSegmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireInstanceSegmentResponse>>(AsyncSpireInstanceSegmentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireInstanceSegmentResponse>> PrepareAsyncSpireInstanceSegment(::grpc::ClientContext* context, const ::SpireInstanceSegmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SpireInstanceSegmentResponse>>(PrepareAsyncSpireInstanceSegmentRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Means the net is set and already initialized (jitted).
      // This replaces is_ready and is_started which were always confusing.
      virtual void SpireGetState(::grpc::ClientContext* context, const ::SpireGetStateRequest* request, ::SpireGetStateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SpireGetState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireGetStateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SpireGetState(::grpc::ClientContext* context, const ::SpireGetStateRequest* request, ::SpireGetStateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SpireGetState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireGetStateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Predict given a trained model and embeddings from some examples
      virtual void SpireGetConfig(::grpc::ClientContext* context, const ::SpireGetConfigRequest* request, ::SpireGetConfigResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SpireGetConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireGetConfigResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SpireGetConfig(::grpc::ClientContext* context, const ::SpireGetConfigRequest* request, ::SpireGetConfigResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SpireGetConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireGetConfigResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Sets the spire config into the net and re-JITs with the new model.
      virtual void SpireSetConfig(::grpc::ClientContext* context, const ::SpireSetConfigRequest* request, ::SpireSetConfigResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SpireSetConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireSetConfigResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SpireSetConfig(::grpc::ClientContext* context, const ::SpireSetConfigRequest* request, ::SpireSetConfigResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SpireSetConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireSetConfigResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // If the net is not JIT initialized then do it now.
      virtual void SpireMaybeJIT(::grpc::ClientContext* context, const ::SpireMaybeJITRequest* request, ::SpireMaybeJITResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SpireMaybeJIT(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireMaybeJITResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SpireMaybeJIT(::grpc::ClientContext* context, const ::SpireMaybeJITRequest* request, ::SpireMaybeJITResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SpireMaybeJIT(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireMaybeJITResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Health check interface: Perform a prediction on a test batch
      virtual void Check(::grpc::ClientContext* context, const ::HealthCheckRequest* request, ::HealthCheckResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Check(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::HealthCheckResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Check(::grpc::ClientContext* context, const ::HealthCheckRequest* request, ::HealthCheckResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Check(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::HealthCheckResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Tell the net to stop serving which shutdowns the spire neural net and flushes the socket.
      virtual void SpireStopServing(::grpc::ClientContext* context, const ::SpireStopServingRequest* request, ::SpireStopServingResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SpireStopServing(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireStopServingResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SpireStopServing(::grpc::ClientContext* context, const ::SpireStopServingRequest* request, ::SpireStopServingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SpireStopServing(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireStopServingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // This does 'tag' and 'embed' ops on the image or any combination of them.
      virtual void SpireEmbedTag(::grpc::ClientContext* context, const ::SpireEmbedTagRequest* request, ::SpireEmbedTagResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SpireEmbedTag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireEmbedTagResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SpireEmbedTag(::grpc::ClientContext* context, const ::SpireEmbedTagRequest* request, ::SpireEmbedTagResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SpireEmbedTag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireEmbedTagResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Get the saved outputs from the neural network.
      virtual void SpireSavedOutput(::grpc::ClientContext* context, const ::SpireSavedOutputRequest* request, ::SpireSavedOutputResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SpireSavedOutput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireSavedOutputResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SpireSavedOutput(::grpc::ClientContext* context, const ::SpireSavedOutputRequest* request, ::SpireSavedOutputResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SpireSavedOutput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireSavedOutputResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Face and object detection in a single endpoint.
      virtual void SpireDetectEmbedTag(::grpc::ClientContext* context, const ::SpireDetectEmbedTagRequest* request, ::SpireDetectEmbedTagResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SpireDetectEmbedTag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireDetectEmbedTagResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SpireDetectEmbedTag(::grpc::ClientContext* context, const ::SpireDetectEmbedTagRequest* request, ::SpireDetectEmbedTagResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SpireDetectEmbedTag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireDetectEmbedTagResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Segmentation model rpc.
      virtual void SpireInstanceSegment(::grpc::ClientContext* context, const ::SpireInstanceSegmentRequest* request, ::SpireInstanceSegmentResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SpireInstanceSegment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireInstanceSegmentResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SpireInstanceSegment(::grpc::ClientContext* context, const ::SpireInstanceSegmentRequest* request, ::SpireInstanceSegmentResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SpireInstanceSegment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireInstanceSegmentResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SpireGetStateResponse>* AsyncSpireGetStateRaw(::grpc::ClientContext* context, const ::SpireGetStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SpireGetStateResponse>* PrepareAsyncSpireGetStateRaw(::grpc::ClientContext* context, const ::SpireGetStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SpireGetConfigResponse>* AsyncSpireGetConfigRaw(::grpc::ClientContext* context, const ::SpireGetConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SpireGetConfigResponse>* PrepareAsyncSpireGetConfigRaw(::grpc::ClientContext* context, const ::SpireGetConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SpireSetConfigResponse>* AsyncSpireSetConfigRaw(::grpc::ClientContext* context, const ::SpireSetConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SpireSetConfigResponse>* PrepareAsyncSpireSetConfigRaw(::grpc::ClientContext* context, const ::SpireSetConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SpireMaybeJITResponse>* AsyncSpireMaybeJITRaw(::grpc::ClientContext* context, const ::SpireMaybeJITRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SpireMaybeJITResponse>* PrepareAsyncSpireMaybeJITRaw(::grpc::ClientContext* context, const ::SpireMaybeJITRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HealthCheckResponse>* AsyncCheckRaw(::grpc::ClientContext* context, const ::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HealthCheckResponse>* PrepareAsyncCheckRaw(::grpc::ClientContext* context, const ::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SpireStopServingResponse>* AsyncSpireStopServingRaw(::grpc::ClientContext* context, const ::SpireStopServingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SpireStopServingResponse>* PrepareAsyncSpireStopServingRaw(::grpc::ClientContext* context, const ::SpireStopServingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SpireEmbedTagResponse>* AsyncSpireEmbedTagRaw(::grpc::ClientContext* context, const ::SpireEmbedTagRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SpireEmbedTagResponse>* PrepareAsyncSpireEmbedTagRaw(::grpc::ClientContext* context, const ::SpireEmbedTagRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SpireSavedOutputResponse>* AsyncSpireSavedOutputRaw(::grpc::ClientContext* context, const ::SpireSavedOutputRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SpireSavedOutputResponse>* PrepareAsyncSpireSavedOutputRaw(::grpc::ClientContext* context, const ::SpireSavedOutputRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SpireDetectEmbedTagResponse>* AsyncSpireDetectEmbedTagRaw(::grpc::ClientContext* context, const ::SpireDetectEmbedTagRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SpireDetectEmbedTagResponse>* PrepareAsyncSpireDetectEmbedTagRaw(::grpc::ClientContext* context, const ::SpireDetectEmbedTagRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SpireInstanceSegmentResponse>* AsyncSpireInstanceSegmentRaw(::grpc::ClientContext* context, const ::SpireInstanceSegmentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SpireInstanceSegmentResponse>* PrepareAsyncSpireInstanceSegmentRaw(::grpc::ClientContext* context, const ::SpireInstanceSegmentRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status SpireGetState(::grpc::ClientContext* context, const ::SpireGetStateRequest& request, ::SpireGetStateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireGetStateResponse>> AsyncSpireGetState(::grpc::ClientContext* context, const ::SpireGetStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireGetStateResponse>>(AsyncSpireGetStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireGetStateResponse>> PrepareAsyncSpireGetState(::grpc::ClientContext* context, const ::SpireGetStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireGetStateResponse>>(PrepareAsyncSpireGetStateRaw(context, request, cq));
    }
    ::grpc::Status SpireGetConfig(::grpc::ClientContext* context, const ::SpireGetConfigRequest& request, ::SpireGetConfigResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireGetConfigResponse>> AsyncSpireGetConfig(::grpc::ClientContext* context, const ::SpireGetConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireGetConfigResponse>>(AsyncSpireGetConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireGetConfigResponse>> PrepareAsyncSpireGetConfig(::grpc::ClientContext* context, const ::SpireGetConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireGetConfigResponse>>(PrepareAsyncSpireGetConfigRaw(context, request, cq));
    }
    ::grpc::Status SpireSetConfig(::grpc::ClientContext* context, const ::SpireSetConfigRequest& request, ::SpireSetConfigResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireSetConfigResponse>> AsyncSpireSetConfig(::grpc::ClientContext* context, const ::SpireSetConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireSetConfigResponse>>(AsyncSpireSetConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireSetConfigResponse>> PrepareAsyncSpireSetConfig(::grpc::ClientContext* context, const ::SpireSetConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireSetConfigResponse>>(PrepareAsyncSpireSetConfigRaw(context, request, cq));
    }
    ::grpc::Status SpireMaybeJIT(::grpc::ClientContext* context, const ::SpireMaybeJITRequest& request, ::SpireMaybeJITResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireMaybeJITResponse>> AsyncSpireMaybeJIT(::grpc::ClientContext* context, const ::SpireMaybeJITRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireMaybeJITResponse>>(AsyncSpireMaybeJITRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireMaybeJITResponse>> PrepareAsyncSpireMaybeJIT(::grpc::ClientContext* context, const ::SpireMaybeJITRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireMaybeJITResponse>>(PrepareAsyncSpireMaybeJITRaw(context, request, cq));
    }
    ::grpc::Status Check(::grpc::ClientContext* context, const ::HealthCheckRequest& request, ::HealthCheckResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HealthCheckResponse>> AsyncCheck(::grpc::ClientContext* context, const ::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HealthCheckResponse>>(AsyncCheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HealthCheckResponse>> PrepareAsyncCheck(::grpc::ClientContext* context, const ::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HealthCheckResponse>>(PrepareAsyncCheckRaw(context, request, cq));
    }
    ::grpc::Status SpireStopServing(::grpc::ClientContext* context, const ::SpireStopServingRequest& request, ::SpireStopServingResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireStopServingResponse>> AsyncSpireStopServing(::grpc::ClientContext* context, const ::SpireStopServingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireStopServingResponse>>(AsyncSpireStopServingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireStopServingResponse>> PrepareAsyncSpireStopServing(::grpc::ClientContext* context, const ::SpireStopServingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireStopServingResponse>>(PrepareAsyncSpireStopServingRaw(context, request, cq));
    }
    ::grpc::Status SpireEmbedTag(::grpc::ClientContext* context, const ::SpireEmbedTagRequest& request, ::SpireEmbedTagResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireEmbedTagResponse>> AsyncSpireEmbedTag(::grpc::ClientContext* context, const ::SpireEmbedTagRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireEmbedTagResponse>>(AsyncSpireEmbedTagRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireEmbedTagResponse>> PrepareAsyncSpireEmbedTag(::grpc::ClientContext* context, const ::SpireEmbedTagRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireEmbedTagResponse>>(PrepareAsyncSpireEmbedTagRaw(context, request, cq));
    }
    ::grpc::Status SpireSavedOutput(::grpc::ClientContext* context, const ::SpireSavedOutputRequest& request, ::SpireSavedOutputResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireSavedOutputResponse>> AsyncSpireSavedOutput(::grpc::ClientContext* context, const ::SpireSavedOutputRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireSavedOutputResponse>>(AsyncSpireSavedOutputRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireSavedOutputResponse>> PrepareAsyncSpireSavedOutput(::grpc::ClientContext* context, const ::SpireSavedOutputRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireSavedOutputResponse>>(PrepareAsyncSpireSavedOutputRaw(context, request, cq));
    }
    ::grpc::Status SpireDetectEmbedTag(::grpc::ClientContext* context, const ::SpireDetectEmbedTagRequest& request, ::SpireDetectEmbedTagResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireDetectEmbedTagResponse>> AsyncSpireDetectEmbedTag(::grpc::ClientContext* context, const ::SpireDetectEmbedTagRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireDetectEmbedTagResponse>>(AsyncSpireDetectEmbedTagRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireDetectEmbedTagResponse>> PrepareAsyncSpireDetectEmbedTag(::grpc::ClientContext* context, const ::SpireDetectEmbedTagRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireDetectEmbedTagResponse>>(PrepareAsyncSpireDetectEmbedTagRaw(context, request, cq));
    }
    ::grpc::Status SpireInstanceSegment(::grpc::ClientContext* context, const ::SpireInstanceSegmentRequest& request, ::SpireInstanceSegmentResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireInstanceSegmentResponse>> AsyncSpireInstanceSegment(::grpc::ClientContext* context, const ::SpireInstanceSegmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireInstanceSegmentResponse>>(AsyncSpireInstanceSegmentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireInstanceSegmentResponse>> PrepareAsyncSpireInstanceSegment(::grpc::ClientContext* context, const ::SpireInstanceSegmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SpireInstanceSegmentResponse>>(PrepareAsyncSpireInstanceSegmentRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void SpireGetState(::grpc::ClientContext* context, const ::SpireGetStateRequest* request, ::SpireGetStateResponse* response, std::function<void(::grpc::Status)>) override;
      void SpireGetState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireGetStateResponse* response, std::function<void(::grpc::Status)>) override;
      void SpireGetState(::grpc::ClientContext* context, const ::SpireGetStateRequest* request, ::SpireGetStateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SpireGetState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireGetStateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SpireGetConfig(::grpc::ClientContext* context, const ::SpireGetConfigRequest* request, ::SpireGetConfigResponse* response, std::function<void(::grpc::Status)>) override;
      void SpireGetConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireGetConfigResponse* response, std::function<void(::grpc::Status)>) override;
      void SpireGetConfig(::grpc::ClientContext* context, const ::SpireGetConfigRequest* request, ::SpireGetConfigResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SpireGetConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireGetConfigResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SpireSetConfig(::grpc::ClientContext* context, const ::SpireSetConfigRequest* request, ::SpireSetConfigResponse* response, std::function<void(::grpc::Status)>) override;
      void SpireSetConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireSetConfigResponse* response, std::function<void(::grpc::Status)>) override;
      void SpireSetConfig(::grpc::ClientContext* context, const ::SpireSetConfigRequest* request, ::SpireSetConfigResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SpireSetConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireSetConfigResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SpireMaybeJIT(::grpc::ClientContext* context, const ::SpireMaybeJITRequest* request, ::SpireMaybeJITResponse* response, std::function<void(::grpc::Status)>) override;
      void SpireMaybeJIT(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireMaybeJITResponse* response, std::function<void(::grpc::Status)>) override;
      void SpireMaybeJIT(::grpc::ClientContext* context, const ::SpireMaybeJITRequest* request, ::SpireMaybeJITResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SpireMaybeJIT(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireMaybeJITResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Check(::grpc::ClientContext* context, const ::HealthCheckRequest* request, ::HealthCheckResponse* response, std::function<void(::grpc::Status)>) override;
      void Check(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::HealthCheckResponse* response, std::function<void(::grpc::Status)>) override;
      void Check(::grpc::ClientContext* context, const ::HealthCheckRequest* request, ::HealthCheckResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Check(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::HealthCheckResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SpireStopServing(::grpc::ClientContext* context, const ::SpireStopServingRequest* request, ::SpireStopServingResponse* response, std::function<void(::grpc::Status)>) override;
      void SpireStopServing(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireStopServingResponse* response, std::function<void(::grpc::Status)>) override;
      void SpireStopServing(::grpc::ClientContext* context, const ::SpireStopServingRequest* request, ::SpireStopServingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SpireStopServing(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireStopServingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SpireEmbedTag(::grpc::ClientContext* context, const ::SpireEmbedTagRequest* request, ::SpireEmbedTagResponse* response, std::function<void(::grpc::Status)>) override;
      void SpireEmbedTag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireEmbedTagResponse* response, std::function<void(::grpc::Status)>) override;
      void SpireEmbedTag(::grpc::ClientContext* context, const ::SpireEmbedTagRequest* request, ::SpireEmbedTagResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SpireEmbedTag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireEmbedTagResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SpireSavedOutput(::grpc::ClientContext* context, const ::SpireSavedOutputRequest* request, ::SpireSavedOutputResponse* response, std::function<void(::grpc::Status)>) override;
      void SpireSavedOutput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireSavedOutputResponse* response, std::function<void(::grpc::Status)>) override;
      void SpireSavedOutput(::grpc::ClientContext* context, const ::SpireSavedOutputRequest* request, ::SpireSavedOutputResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SpireSavedOutput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireSavedOutputResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SpireDetectEmbedTag(::grpc::ClientContext* context, const ::SpireDetectEmbedTagRequest* request, ::SpireDetectEmbedTagResponse* response, std::function<void(::grpc::Status)>) override;
      void SpireDetectEmbedTag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireDetectEmbedTagResponse* response, std::function<void(::grpc::Status)>) override;
      void SpireDetectEmbedTag(::grpc::ClientContext* context, const ::SpireDetectEmbedTagRequest* request, ::SpireDetectEmbedTagResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SpireDetectEmbedTag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireDetectEmbedTagResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SpireInstanceSegment(::grpc::ClientContext* context, const ::SpireInstanceSegmentRequest* request, ::SpireInstanceSegmentResponse* response, std::function<void(::grpc::Status)>) override;
      void SpireInstanceSegment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireInstanceSegmentResponse* response, std::function<void(::grpc::Status)>) override;
      void SpireInstanceSegment(::grpc::ClientContext* context, const ::SpireInstanceSegmentRequest* request, ::SpireInstanceSegmentResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SpireInstanceSegment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SpireInstanceSegmentResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::SpireGetStateResponse>* AsyncSpireGetStateRaw(::grpc::ClientContext* context, const ::SpireGetStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SpireGetStateResponse>* PrepareAsyncSpireGetStateRaw(::grpc::ClientContext* context, const ::SpireGetStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SpireGetConfigResponse>* AsyncSpireGetConfigRaw(::grpc::ClientContext* context, const ::SpireGetConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SpireGetConfigResponse>* PrepareAsyncSpireGetConfigRaw(::grpc::ClientContext* context, const ::SpireGetConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SpireSetConfigResponse>* AsyncSpireSetConfigRaw(::grpc::ClientContext* context, const ::SpireSetConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SpireSetConfigResponse>* PrepareAsyncSpireSetConfigRaw(::grpc::ClientContext* context, const ::SpireSetConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SpireMaybeJITResponse>* AsyncSpireMaybeJITRaw(::grpc::ClientContext* context, const ::SpireMaybeJITRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SpireMaybeJITResponse>* PrepareAsyncSpireMaybeJITRaw(::grpc::ClientContext* context, const ::SpireMaybeJITRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::HealthCheckResponse>* AsyncCheckRaw(::grpc::ClientContext* context, const ::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::HealthCheckResponse>* PrepareAsyncCheckRaw(::grpc::ClientContext* context, const ::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SpireStopServingResponse>* AsyncSpireStopServingRaw(::grpc::ClientContext* context, const ::SpireStopServingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SpireStopServingResponse>* PrepareAsyncSpireStopServingRaw(::grpc::ClientContext* context, const ::SpireStopServingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SpireEmbedTagResponse>* AsyncSpireEmbedTagRaw(::grpc::ClientContext* context, const ::SpireEmbedTagRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SpireEmbedTagResponse>* PrepareAsyncSpireEmbedTagRaw(::grpc::ClientContext* context, const ::SpireEmbedTagRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SpireSavedOutputResponse>* AsyncSpireSavedOutputRaw(::grpc::ClientContext* context, const ::SpireSavedOutputRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SpireSavedOutputResponse>* PrepareAsyncSpireSavedOutputRaw(::grpc::ClientContext* context, const ::SpireSavedOutputRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SpireDetectEmbedTagResponse>* AsyncSpireDetectEmbedTagRaw(::grpc::ClientContext* context, const ::SpireDetectEmbedTagRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SpireDetectEmbedTagResponse>* PrepareAsyncSpireDetectEmbedTagRaw(::grpc::ClientContext* context, const ::SpireDetectEmbedTagRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SpireInstanceSegmentResponse>* AsyncSpireInstanceSegmentRaw(::grpc::ClientContext* context, const ::SpireInstanceSegmentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SpireInstanceSegmentResponse>* PrepareAsyncSpireInstanceSegmentRaw(::grpc::ClientContext* context, const ::SpireInstanceSegmentRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SpireGetState_;
    const ::grpc::internal::RpcMethod rpcmethod_SpireGetConfig_;
    const ::grpc::internal::RpcMethod rpcmethod_SpireSetConfig_;
    const ::grpc::internal::RpcMethod rpcmethod_SpireMaybeJIT_;
    const ::grpc::internal::RpcMethod rpcmethod_Check_;
    const ::grpc::internal::RpcMethod rpcmethod_SpireStopServing_;
    const ::grpc::internal::RpcMethod rpcmethod_SpireEmbedTag_;
    const ::grpc::internal::RpcMethod rpcmethod_SpireSavedOutput_;
    const ::grpc::internal::RpcMethod rpcmethod_SpireDetectEmbedTag_;
    const ::grpc::internal::RpcMethod rpcmethod_SpireInstanceSegment_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Means the net is set and already initialized (jitted).
    // This replaces is_ready and is_started which were always confusing.
    virtual ::grpc::Status SpireGetState(::grpc::ServerContext* context, const ::SpireGetStateRequest* request, ::SpireGetStateResponse* response);
    // Predict given a trained model and embeddings from some examples
    virtual ::grpc::Status SpireGetConfig(::grpc::ServerContext* context, const ::SpireGetConfigRequest* request, ::SpireGetConfigResponse* response);
    // Sets the spire config into the net and re-JITs with the new model.
    virtual ::grpc::Status SpireSetConfig(::grpc::ServerContext* context, const ::SpireSetConfigRequest* request, ::SpireSetConfigResponse* response);
    // If the net is not JIT initialized then do it now.
    virtual ::grpc::Status SpireMaybeJIT(::grpc::ServerContext* context, const ::SpireMaybeJITRequest* request, ::SpireMaybeJITResponse* response);
    // Health check interface: Perform a prediction on a test batch
    virtual ::grpc::Status Check(::grpc::ServerContext* context, const ::HealthCheckRequest* request, ::HealthCheckResponse* response);
    // Tell the net to stop serving which shutdowns the spire neural net and flushes the socket.
    virtual ::grpc::Status SpireStopServing(::grpc::ServerContext* context, const ::SpireStopServingRequest* request, ::SpireStopServingResponse* response);
    // This does 'tag' and 'embed' ops on the image or any combination of them.
    virtual ::grpc::Status SpireEmbedTag(::grpc::ServerContext* context, const ::SpireEmbedTagRequest* request, ::SpireEmbedTagResponse* response);
    // Get the saved outputs from the neural network.
    virtual ::grpc::Status SpireSavedOutput(::grpc::ServerContext* context, const ::SpireSavedOutputRequest* request, ::SpireSavedOutputResponse* response);
    // Face and object detection in a single endpoint.
    virtual ::grpc::Status SpireDetectEmbedTag(::grpc::ServerContext* context, const ::SpireDetectEmbedTagRequest* request, ::SpireDetectEmbedTagResponse* response);
    // Segmentation model rpc.
    virtual ::grpc::Status SpireInstanceSegment(::grpc::ServerContext* context, const ::SpireInstanceSegmentRequest* request, ::SpireInstanceSegmentResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SpireGetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SpireGetState() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SpireGetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireGetState(::grpc::ServerContext* context, const ::SpireGetStateRequest* request, ::SpireGetStateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpireGetState(::grpc::ServerContext* context, ::SpireGetStateRequest* request, ::grpc::ServerAsyncResponseWriter< ::SpireGetStateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SpireGetConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SpireGetConfig() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SpireGetConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireGetConfig(::grpc::ServerContext* context, const ::SpireGetConfigRequest* request, ::SpireGetConfigResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpireGetConfig(::grpc::ServerContext* context, ::SpireGetConfigRequest* request, ::grpc::ServerAsyncResponseWriter< ::SpireGetConfigResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SpireSetConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SpireSetConfig() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SpireSetConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireSetConfig(::grpc::ServerContext* context, const ::SpireSetConfigRequest* request, ::SpireSetConfigResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpireSetConfig(::grpc::ServerContext* context, ::SpireSetConfigRequest* request, ::grpc::ServerAsyncResponseWriter< ::SpireSetConfigResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SpireMaybeJIT : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SpireMaybeJIT() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SpireMaybeJIT() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireMaybeJIT(::grpc::ServerContext* context, const ::SpireMaybeJITRequest* request, ::SpireMaybeJITResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpireMaybeJIT(::grpc::ServerContext* context, ::SpireMaybeJITRequest* request, ::grpc::ServerAsyncResponseWriter< ::SpireMaybeJITResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Check : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Check() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Check() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Check(::grpc::ServerContext* context, const ::HealthCheckRequest* request, ::HealthCheckResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheck(::grpc::ServerContext* context, ::HealthCheckRequest* request, ::grpc::ServerAsyncResponseWriter< ::HealthCheckResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SpireStopServing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SpireStopServing() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_SpireStopServing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireStopServing(::grpc::ServerContext* context, const ::SpireStopServingRequest* request, ::SpireStopServingResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpireStopServing(::grpc::ServerContext* context, ::SpireStopServingRequest* request, ::grpc::ServerAsyncResponseWriter< ::SpireStopServingResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SpireEmbedTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SpireEmbedTag() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_SpireEmbedTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireEmbedTag(::grpc::ServerContext* context, const ::SpireEmbedTagRequest* request, ::SpireEmbedTagResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpireEmbedTag(::grpc::ServerContext* context, ::SpireEmbedTagRequest* request, ::grpc::ServerAsyncResponseWriter< ::SpireEmbedTagResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SpireSavedOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SpireSavedOutput() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_SpireSavedOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireSavedOutput(::grpc::ServerContext* context, const ::SpireSavedOutputRequest* request, ::SpireSavedOutputResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpireSavedOutput(::grpc::ServerContext* context, ::SpireSavedOutputRequest* request, ::grpc::ServerAsyncResponseWriter< ::SpireSavedOutputResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SpireDetectEmbedTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SpireDetectEmbedTag() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_SpireDetectEmbedTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireDetectEmbedTag(::grpc::ServerContext* context, const ::SpireDetectEmbedTagRequest* request, ::SpireDetectEmbedTagResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpireDetectEmbedTag(::grpc::ServerContext* context, ::SpireDetectEmbedTagRequest* request, ::grpc::ServerAsyncResponseWriter< ::SpireDetectEmbedTagResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SpireInstanceSegment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SpireInstanceSegment() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_SpireInstanceSegment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireInstanceSegment(::grpc::ServerContext* context, const ::SpireInstanceSegmentRequest* request, ::SpireInstanceSegmentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpireInstanceSegment(::grpc::ServerContext* context, ::SpireInstanceSegmentRequest* request, ::grpc::ServerAsyncResponseWriter< ::SpireInstanceSegmentResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SpireGetState<WithAsyncMethod_SpireGetConfig<WithAsyncMethod_SpireSetConfig<WithAsyncMethod_SpireMaybeJIT<WithAsyncMethod_Check<WithAsyncMethod_SpireStopServing<WithAsyncMethod_SpireEmbedTag<WithAsyncMethod_SpireSavedOutput<WithAsyncMethod_SpireDetectEmbedTag<WithAsyncMethod_SpireInstanceSegment<Service > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SpireGetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SpireGetState() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::SpireGetStateRequest, ::SpireGetStateResponse>(
          [this](::grpc::ServerContext* context,
                 const ::SpireGetStateRequest* request,
                 ::SpireGetStateResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SpireGetState(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SpireGetState(
        ::grpc::experimental::MessageAllocator< ::SpireGetStateRequest, ::SpireGetStateResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::SpireGetStateRequest, ::SpireGetStateResponse>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SpireGetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireGetState(::grpc::ServerContext* context, const ::SpireGetStateRequest* request, ::SpireGetStateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SpireGetState(::grpc::ServerContext* context, const ::SpireGetStateRequest* request, ::SpireGetStateResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SpireGetConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SpireGetConfig() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::SpireGetConfigRequest, ::SpireGetConfigResponse>(
          [this](::grpc::ServerContext* context,
                 const ::SpireGetConfigRequest* request,
                 ::SpireGetConfigResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SpireGetConfig(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SpireGetConfig(
        ::grpc::experimental::MessageAllocator< ::SpireGetConfigRequest, ::SpireGetConfigResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::SpireGetConfigRequest, ::SpireGetConfigResponse>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SpireGetConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireGetConfig(::grpc::ServerContext* context, const ::SpireGetConfigRequest* request, ::SpireGetConfigResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SpireGetConfig(::grpc::ServerContext* context, const ::SpireGetConfigRequest* request, ::SpireGetConfigResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SpireSetConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SpireSetConfig() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::SpireSetConfigRequest, ::SpireSetConfigResponse>(
          [this](::grpc::ServerContext* context,
                 const ::SpireSetConfigRequest* request,
                 ::SpireSetConfigResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SpireSetConfig(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SpireSetConfig(
        ::grpc::experimental::MessageAllocator< ::SpireSetConfigRequest, ::SpireSetConfigResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::SpireSetConfigRequest, ::SpireSetConfigResponse>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SpireSetConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireSetConfig(::grpc::ServerContext* context, const ::SpireSetConfigRequest* request, ::SpireSetConfigResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SpireSetConfig(::grpc::ServerContext* context, const ::SpireSetConfigRequest* request, ::SpireSetConfigResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SpireMaybeJIT : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SpireMaybeJIT() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::SpireMaybeJITRequest, ::SpireMaybeJITResponse>(
          [this](::grpc::ServerContext* context,
                 const ::SpireMaybeJITRequest* request,
                 ::SpireMaybeJITResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SpireMaybeJIT(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SpireMaybeJIT(
        ::grpc::experimental::MessageAllocator< ::SpireMaybeJITRequest, ::SpireMaybeJITResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::SpireMaybeJITRequest, ::SpireMaybeJITResponse>*>(
          ::grpc::Service::experimental().GetHandler(3))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SpireMaybeJIT() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireMaybeJIT(::grpc::ServerContext* context, const ::SpireMaybeJITRequest* request, ::SpireMaybeJITResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SpireMaybeJIT(::grpc::ServerContext* context, const ::SpireMaybeJITRequest* request, ::SpireMaybeJITResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Check : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Check() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::HealthCheckRequest, ::HealthCheckResponse>(
          [this](::grpc::ServerContext* context,
                 const ::HealthCheckRequest* request,
                 ::HealthCheckResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Check(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Check(
        ::grpc::experimental::MessageAllocator< ::HealthCheckRequest, ::HealthCheckResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::HealthCheckRequest, ::HealthCheckResponse>*>(
          ::grpc::Service::experimental().GetHandler(4))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Check() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Check(::grpc::ServerContext* context, const ::HealthCheckRequest* request, ::HealthCheckResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Check(::grpc::ServerContext* context, const ::HealthCheckRequest* request, ::HealthCheckResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SpireStopServing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SpireStopServing() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::SpireStopServingRequest, ::SpireStopServingResponse>(
          [this](::grpc::ServerContext* context,
                 const ::SpireStopServingRequest* request,
                 ::SpireStopServingResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SpireStopServing(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SpireStopServing(
        ::grpc::experimental::MessageAllocator< ::SpireStopServingRequest, ::SpireStopServingResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::SpireStopServingRequest, ::SpireStopServingResponse>*>(
          ::grpc::Service::experimental().GetHandler(5))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SpireStopServing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireStopServing(::grpc::ServerContext* context, const ::SpireStopServingRequest* request, ::SpireStopServingResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SpireStopServing(::grpc::ServerContext* context, const ::SpireStopServingRequest* request, ::SpireStopServingResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SpireEmbedTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SpireEmbedTag() {
      ::grpc::Service::experimental().MarkMethodCallback(6,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::SpireEmbedTagRequest, ::SpireEmbedTagResponse>(
          [this](::grpc::ServerContext* context,
                 const ::SpireEmbedTagRequest* request,
                 ::SpireEmbedTagResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SpireEmbedTag(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SpireEmbedTag(
        ::grpc::experimental::MessageAllocator< ::SpireEmbedTagRequest, ::SpireEmbedTagResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::SpireEmbedTagRequest, ::SpireEmbedTagResponse>*>(
          ::grpc::Service::experimental().GetHandler(6))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SpireEmbedTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireEmbedTag(::grpc::ServerContext* context, const ::SpireEmbedTagRequest* request, ::SpireEmbedTagResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SpireEmbedTag(::grpc::ServerContext* context, const ::SpireEmbedTagRequest* request, ::SpireEmbedTagResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SpireSavedOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SpireSavedOutput() {
      ::grpc::Service::experimental().MarkMethodCallback(7,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::SpireSavedOutputRequest, ::SpireSavedOutputResponse>(
          [this](::grpc::ServerContext* context,
                 const ::SpireSavedOutputRequest* request,
                 ::SpireSavedOutputResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SpireSavedOutput(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SpireSavedOutput(
        ::grpc::experimental::MessageAllocator< ::SpireSavedOutputRequest, ::SpireSavedOutputResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::SpireSavedOutputRequest, ::SpireSavedOutputResponse>*>(
          ::grpc::Service::experimental().GetHandler(7))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SpireSavedOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireSavedOutput(::grpc::ServerContext* context, const ::SpireSavedOutputRequest* request, ::SpireSavedOutputResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SpireSavedOutput(::grpc::ServerContext* context, const ::SpireSavedOutputRequest* request, ::SpireSavedOutputResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SpireDetectEmbedTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SpireDetectEmbedTag() {
      ::grpc::Service::experimental().MarkMethodCallback(8,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::SpireDetectEmbedTagRequest, ::SpireDetectEmbedTagResponse>(
          [this](::grpc::ServerContext* context,
                 const ::SpireDetectEmbedTagRequest* request,
                 ::SpireDetectEmbedTagResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SpireDetectEmbedTag(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SpireDetectEmbedTag(
        ::grpc::experimental::MessageAllocator< ::SpireDetectEmbedTagRequest, ::SpireDetectEmbedTagResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::SpireDetectEmbedTagRequest, ::SpireDetectEmbedTagResponse>*>(
          ::grpc::Service::experimental().GetHandler(8))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SpireDetectEmbedTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireDetectEmbedTag(::grpc::ServerContext* context, const ::SpireDetectEmbedTagRequest* request, ::SpireDetectEmbedTagResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SpireDetectEmbedTag(::grpc::ServerContext* context, const ::SpireDetectEmbedTagRequest* request, ::SpireDetectEmbedTagResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SpireInstanceSegment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SpireInstanceSegment() {
      ::grpc::Service::experimental().MarkMethodCallback(9,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::SpireInstanceSegmentRequest, ::SpireInstanceSegmentResponse>(
          [this](::grpc::ServerContext* context,
                 const ::SpireInstanceSegmentRequest* request,
                 ::SpireInstanceSegmentResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SpireInstanceSegment(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SpireInstanceSegment(
        ::grpc::experimental::MessageAllocator< ::SpireInstanceSegmentRequest, ::SpireInstanceSegmentResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::SpireInstanceSegmentRequest, ::SpireInstanceSegmentResponse>*>(
          ::grpc::Service::experimental().GetHandler(9))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SpireInstanceSegment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireInstanceSegment(::grpc::ServerContext* context, const ::SpireInstanceSegmentRequest* request, ::SpireInstanceSegmentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SpireInstanceSegment(::grpc::ServerContext* context, const ::SpireInstanceSegmentRequest* request, ::SpireInstanceSegmentResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_SpireGetState<ExperimentalWithCallbackMethod_SpireGetConfig<ExperimentalWithCallbackMethod_SpireSetConfig<ExperimentalWithCallbackMethod_SpireMaybeJIT<ExperimentalWithCallbackMethod_Check<ExperimentalWithCallbackMethod_SpireStopServing<ExperimentalWithCallbackMethod_SpireEmbedTag<ExperimentalWithCallbackMethod_SpireSavedOutput<ExperimentalWithCallbackMethod_SpireDetectEmbedTag<ExperimentalWithCallbackMethod_SpireInstanceSegment<Service > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SpireGetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SpireGetState() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SpireGetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireGetState(::grpc::ServerContext* context, const ::SpireGetStateRequest* request, ::SpireGetStateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SpireGetConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SpireGetConfig() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SpireGetConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireGetConfig(::grpc::ServerContext* context, const ::SpireGetConfigRequest* request, ::SpireGetConfigResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SpireSetConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SpireSetConfig() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SpireSetConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireSetConfig(::grpc::ServerContext* context, const ::SpireSetConfigRequest* request, ::SpireSetConfigResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SpireMaybeJIT : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SpireMaybeJIT() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SpireMaybeJIT() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireMaybeJIT(::grpc::ServerContext* context, const ::SpireMaybeJITRequest* request, ::SpireMaybeJITResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Check : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Check() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Check() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Check(::grpc::ServerContext* context, const ::HealthCheckRequest* request, ::HealthCheckResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SpireStopServing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SpireStopServing() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_SpireStopServing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireStopServing(::grpc::ServerContext* context, const ::SpireStopServingRequest* request, ::SpireStopServingResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SpireEmbedTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SpireEmbedTag() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_SpireEmbedTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireEmbedTag(::grpc::ServerContext* context, const ::SpireEmbedTagRequest* request, ::SpireEmbedTagResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SpireSavedOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SpireSavedOutput() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_SpireSavedOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireSavedOutput(::grpc::ServerContext* context, const ::SpireSavedOutputRequest* request, ::SpireSavedOutputResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SpireDetectEmbedTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SpireDetectEmbedTag() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_SpireDetectEmbedTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireDetectEmbedTag(::grpc::ServerContext* context, const ::SpireDetectEmbedTagRequest* request, ::SpireDetectEmbedTagResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SpireInstanceSegment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SpireInstanceSegment() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_SpireInstanceSegment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireInstanceSegment(::grpc::ServerContext* context, const ::SpireInstanceSegmentRequest* request, ::SpireInstanceSegmentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SpireGetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SpireGetState() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SpireGetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireGetState(::grpc::ServerContext* context, const ::SpireGetStateRequest* request, ::SpireGetStateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpireGetState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SpireGetConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SpireGetConfig() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SpireGetConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireGetConfig(::grpc::ServerContext* context, const ::SpireGetConfigRequest* request, ::SpireGetConfigResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpireGetConfig(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SpireSetConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SpireSetConfig() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SpireSetConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireSetConfig(::grpc::ServerContext* context, const ::SpireSetConfigRequest* request, ::SpireSetConfigResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpireSetConfig(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SpireMaybeJIT : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SpireMaybeJIT() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_SpireMaybeJIT() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireMaybeJIT(::grpc::ServerContext* context, const ::SpireMaybeJITRequest* request, ::SpireMaybeJITResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpireMaybeJIT(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Check : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Check() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Check() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Check(::grpc::ServerContext* context, const ::HealthCheckRequest* request, ::HealthCheckResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheck(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SpireStopServing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SpireStopServing() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_SpireStopServing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireStopServing(::grpc::ServerContext* context, const ::SpireStopServingRequest* request, ::SpireStopServingResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpireStopServing(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SpireEmbedTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SpireEmbedTag() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_SpireEmbedTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireEmbedTag(::grpc::ServerContext* context, const ::SpireEmbedTagRequest* request, ::SpireEmbedTagResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpireEmbedTag(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SpireSavedOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SpireSavedOutput() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_SpireSavedOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireSavedOutput(::grpc::ServerContext* context, const ::SpireSavedOutputRequest* request, ::SpireSavedOutputResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpireSavedOutput(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SpireDetectEmbedTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SpireDetectEmbedTag() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_SpireDetectEmbedTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireDetectEmbedTag(::grpc::ServerContext* context, const ::SpireDetectEmbedTagRequest* request, ::SpireDetectEmbedTagResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpireDetectEmbedTag(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SpireInstanceSegment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SpireInstanceSegment() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_SpireInstanceSegment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireInstanceSegment(::grpc::ServerContext* context, const ::SpireInstanceSegmentRequest* request, ::SpireInstanceSegmentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpireInstanceSegment(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SpireGetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SpireGetState() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SpireGetState(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SpireGetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireGetState(::grpc::ServerContext* context, const ::SpireGetStateRequest* request, ::SpireGetStateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SpireGetState(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SpireGetConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SpireGetConfig() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SpireGetConfig(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SpireGetConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireGetConfig(::grpc::ServerContext* context, const ::SpireGetConfigRequest* request, ::SpireGetConfigResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SpireGetConfig(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SpireSetConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SpireSetConfig() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SpireSetConfig(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SpireSetConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireSetConfig(::grpc::ServerContext* context, const ::SpireSetConfigRequest* request, ::SpireSetConfigResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SpireSetConfig(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SpireMaybeJIT : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SpireMaybeJIT() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SpireMaybeJIT(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SpireMaybeJIT() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireMaybeJIT(::grpc::ServerContext* context, const ::SpireMaybeJITRequest* request, ::SpireMaybeJITResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SpireMaybeJIT(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Check : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Check() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Check(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Check() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Check(::grpc::ServerContext* context, const ::HealthCheckRequest* request, ::HealthCheckResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Check(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SpireStopServing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SpireStopServing() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SpireStopServing(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SpireStopServing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireStopServing(::grpc::ServerContext* context, const ::SpireStopServingRequest* request, ::SpireStopServingResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SpireStopServing(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SpireEmbedTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SpireEmbedTag() {
      ::grpc::Service::experimental().MarkMethodRawCallback(6,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SpireEmbedTag(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SpireEmbedTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireEmbedTag(::grpc::ServerContext* context, const ::SpireEmbedTagRequest* request, ::SpireEmbedTagResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SpireEmbedTag(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SpireSavedOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SpireSavedOutput() {
      ::grpc::Service::experimental().MarkMethodRawCallback(7,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SpireSavedOutput(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SpireSavedOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireSavedOutput(::grpc::ServerContext* context, const ::SpireSavedOutputRequest* request, ::SpireSavedOutputResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SpireSavedOutput(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SpireDetectEmbedTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SpireDetectEmbedTag() {
      ::grpc::Service::experimental().MarkMethodRawCallback(8,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SpireDetectEmbedTag(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SpireDetectEmbedTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireDetectEmbedTag(::grpc::ServerContext* context, const ::SpireDetectEmbedTagRequest* request, ::SpireDetectEmbedTagResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SpireDetectEmbedTag(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SpireInstanceSegment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SpireInstanceSegment() {
      ::grpc::Service::experimental().MarkMethodRawCallback(9,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SpireInstanceSegment(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SpireInstanceSegment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpireInstanceSegment(::grpc::ServerContext* context, const ::SpireInstanceSegmentRequest* request, ::SpireInstanceSegmentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SpireInstanceSegment(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SpireGetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SpireGetState() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::SpireGetStateRequest, ::SpireGetStateResponse>(std::bind(&WithStreamedUnaryMethod_SpireGetState<BaseClass>::StreamedSpireGetState, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SpireGetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SpireGetState(::grpc::ServerContext* context, const ::SpireGetStateRequest* request, ::SpireGetStateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSpireGetState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::SpireGetStateRequest,::SpireGetStateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SpireGetConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SpireGetConfig() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::SpireGetConfigRequest, ::SpireGetConfigResponse>(std::bind(&WithStreamedUnaryMethod_SpireGetConfig<BaseClass>::StreamedSpireGetConfig, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SpireGetConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SpireGetConfig(::grpc::ServerContext* context, const ::SpireGetConfigRequest* request, ::SpireGetConfigResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSpireGetConfig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::SpireGetConfigRequest,::SpireGetConfigResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SpireSetConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SpireSetConfig() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::SpireSetConfigRequest, ::SpireSetConfigResponse>(std::bind(&WithStreamedUnaryMethod_SpireSetConfig<BaseClass>::StreamedSpireSetConfig, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SpireSetConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SpireSetConfig(::grpc::ServerContext* context, const ::SpireSetConfigRequest* request, ::SpireSetConfigResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSpireSetConfig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::SpireSetConfigRequest,::SpireSetConfigResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SpireMaybeJIT : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SpireMaybeJIT() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::SpireMaybeJITRequest, ::SpireMaybeJITResponse>(std::bind(&WithStreamedUnaryMethod_SpireMaybeJIT<BaseClass>::StreamedSpireMaybeJIT, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SpireMaybeJIT() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SpireMaybeJIT(::grpc::ServerContext* context, const ::SpireMaybeJITRequest* request, ::SpireMaybeJITResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSpireMaybeJIT(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::SpireMaybeJITRequest,::SpireMaybeJITResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Check : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Check() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::HealthCheckRequest, ::HealthCheckResponse>(std::bind(&WithStreamedUnaryMethod_Check<BaseClass>::StreamedCheck, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Check() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Check(::grpc::ServerContext* context, const ::HealthCheckRequest* request, ::HealthCheckResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheck(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::HealthCheckRequest,::HealthCheckResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SpireStopServing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SpireStopServing() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::SpireStopServingRequest, ::SpireStopServingResponse>(std::bind(&WithStreamedUnaryMethod_SpireStopServing<BaseClass>::StreamedSpireStopServing, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SpireStopServing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SpireStopServing(::grpc::ServerContext* context, const ::SpireStopServingRequest* request, ::SpireStopServingResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSpireStopServing(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::SpireStopServingRequest,::SpireStopServingResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SpireEmbedTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SpireEmbedTag() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::SpireEmbedTagRequest, ::SpireEmbedTagResponse>(std::bind(&WithStreamedUnaryMethod_SpireEmbedTag<BaseClass>::StreamedSpireEmbedTag, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SpireEmbedTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SpireEmbedTag(::grpc::ServerContext* context, const ::SpireEmbedTagRequest* request, ::SpireEmbedTagResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSpireEmbedTag(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::SpireEmbedTagRequest,::SpireEmbedTagResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SpireSavedOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SpireSavedOutput() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::SpireSavedOutputRequest, ::SpireSavedOutputResponse>(std::bind(&WithStreamedUnaryMethod_SpireSavedOutput<BaseClass>::StreamedSpireSavedOutput, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SpireSavedOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SpireSavedOutput(::grpc::ServerContext* context, const ::SpireSavedOutputRequest* request, ::SpireSavedOutputResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSpireSavedOutput(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::SpireSavedOutputRequest,::SpireSavedOutputResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SpireDetectEmbedTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SpireDetectEmbedTag() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::SpireDetectEmbedTagRequest, ::SpireDetectEmbedTagResponse>(std::bind(&WithStreamedUnaryMethod_SpireDetectEmbedTag<BaseClass>::StreamedSpireDetectEmbedTag, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SpireDetectEmbedTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SpireDetectEmbedTag(::grpc::ServerContext* context, const ::SpireDetectEmbedTagRequest* request, ::SpireDetectEmbedTagResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSpireDetectEmbedTag(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::SpireDetectEmbedTagRequest,::SpireDetectEmbedTagResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SpireInstanceSegment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SpireInstanceSegment() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::SpireInstanceSegmentRequest, ::SpireInstanceSegmentResponse>(std::bind(&WithStreamedUnaryMethod_SpireInstanceSegment<BaseClass>::StreamedSpireInstanceSegment, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SpireInstanceSegment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SpireInstanceSegment(::grpc::ServerContext* context, const ::SpireInstanceSegmentRequest* request, ::SpireInstanceSegmentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSpireInstanceSegment(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::SpireInstanceSegmentRequest,::SpireInstanceSegmentResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SpireGetState<WithStreamedUnaryMethod_SpireGetConfig<WithStreamedUnaryMethod_SpireSetConfig<WithStreamedUnaryMethod_SpireMaybeJIT<WithStreamedUnaryMethod_Check<WithStreamedUnaryMethod_SpireStopServing<WithStreamedUnaryMethod_SpireEmbedTag<WithStreamedUnaryMethod_SpireSavedOutput<WithStreamedUnaryMethod_SpireDetectEmbedTag<WithStreamedUnaryMethod_SpireInstanceSegment<Service > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SpireGetState<WithStreamedUnaryMethod_SpireGetConfig<WithStreamedUnaryMethod_SpireSetConfig<WithStreamedUnaryMethod_SpireMaybeJIT<WithStreamedUnaryMethod_Check<WithStreamedUnaryMethod_SpireStopServing<WithStreamedUnaryMethod_SpireEmbedTag<WithStreamedUnaryMethod_SpireSavedOutput<WithStreamedUnaryMethod_SpireDetectEmbedTag<WithStreamedUnaryMethod_SpireInstanceSegment<Service > > > > > > > > > > StreamedService;
};


#endif  // GRPC_proto_2fspire_2fspire_5fservice_2eproto__INCLUDED
