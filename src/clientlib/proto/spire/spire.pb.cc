// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/spire/spire.proto

#include "proto/spire/spire.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_proto_2fspire_2fspire_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BBoxCropConfig_proto_2fspire_2fspire_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fspire_2fspire_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CPUResources_proto_2fspire_2fspire_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fdatabatch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DataBatch_proto_2futils_2fdatabatch_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fdata_5fprovider_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<22> scc_info_DataProviderParams_proto_2futils_2fdata_5fprovider_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fspire_2fspire_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FaceDetectConfig_proto_2fspire_2fspire_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fcheckpoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoadCheckpointScope_proto_2futils_2fcheckpoint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fspire_2fspire_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MultiHeadConfig_proto_2fspire_2fspire_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fspire_2fspire_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Replicas_proto_2fspire_2fspire_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2frequest_5fmeta_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RequestMeta_proto_2futils_2frequest_5fmeta_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2frequest_5fmeta_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResponseStatus_proto_2futils_2frequest_5fmeta_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fspire_2fspire_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_SpireConfig_proto_2fspire_2fspire_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fspire_2fspire_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpireConfig_CpuResourcesEntry_DoNotUse_proto_2fspire_2fspire_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fspire_2fspire_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpireConfig_HeadsEntry_DoNotUse_proto_2fspire_2fspire_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fspire_2fspire_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpireConfig_ReplicasEntry_DoNotUse_proto_2fspire_2fspire_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fspire_2fspire_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpireMeta_proto_2fspire_2fspire_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2ftag_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Tag_proto_2futils_2ftag_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fvocab_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Vocab_proto_2futils_2fvocab_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
class FaceDetectConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FaceDetectConfig> _instance;
} _FaceDetectConfig_default_instance_;
class BBoxCropConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BBoxCropConfig> _instance;
} _BBoxCropConfig_default_instance_;
class MultiHeadConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiHeadConfig> _instance;
} _MultiHeadConfig_default_instance_;
class SpireConfig_HeadsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpireConfig_HeadsEntry_DoNotUse> _instance;
} _SpireConfig_HeadsEntry_DoNotUse_default_instance_;
class SpireConfig_CpuResourcesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpireConfig_CpuResourcesEntry_DoNotUse> _instance;
} _SpireConfig_CpuResourcesEntry_DoNotUse_default_instance_;
class SpireConfig_ReplicasEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpireConfig_ReplicasEntry_DoNotUse> _instance;
} _SpireConfig_ReplicasEntry_DoNotUse_default_instance_;
class SpireConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpireConfig> _instance;
} _SpireConfig_default_instance_;
class ReplicasDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Replicas> _instance;
} _Replicas_default_instance_;
class CPUResourcesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CPUResources> _instance;
} _CPUResources_default_instance_;
class SpireMetaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpireMeta> _instance;
} _SpireMeta_default_instance_;
class SpireGetConfigRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpireGetConfigRequest> _instance;
} _SpireGetConfigRequest_default_instance_;
class SpireGetConfigResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpireGetConfigResponse> _instance;
} _SpireGetConfigResponse_default_instance_;
class SpireSetConfigRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpireSetConfigRequest> _instance;
} _SpireSetConfigRequest_default_instance_;
class SpireSetConfigResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpireSetConfigResponse> _instance;
} _SpireSetConfigResponse_default_instance_;
class SpireGetStateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpireGetStateRequest> _instance;
} _SpireGetStateRequest_default_instance_;
class SpireGetStateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpireGetStateResponse> _instance;
} _SpireGetStateResponse_default_instance_;
class SpireMaybeJITRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpireMaybeJITRequest> _instance;
} _SpireMaybeJITRequest_default_instance_;
class SpireMaybeJITResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpireMaybeJITResponse> _instance;
} _SpireMaybeJITResponse_default_instance_;
class SpireStopServingRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpireStopServingRequest> _instance;
} _SpireStopServingRequest_default_instance_;
class SpireStopServingResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpireStopServingResponse> _instance;
} _SpireStopServingResponse_default_instance_;
class SpireEmbedTagRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpireEmbedTagRequest> _instance;
} _SpireEmbedTagRequest_default_instance_;
class SpireEmbedTagResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpireEmbedTagResponse> _instance;
} _SpireEmbedTagResponse_default_instance_;
class SpireSavedOutputRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpireSavedOutputRequest> _instance;
} _SpireSavedOutputRequest_default_instance_;
class SpireSavedOutputResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpireSavedOutputResponse> _instance;
} _SpireSavedOutputResponse_default_instance_;
class SpireInstanceSegmentRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpireInstanceSegmentRequest> _instance;
} _SpireInstanceSegmentRequest_default_instance_;
class SpireInstanceSegmentResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpireInstanceSegmentResponse> _instance;
} _SpireInstanceSegmentResponse_default_instance_;
class SpireDetectEmbedTagRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpireDetectEmbedTagRequest> _instance;
} _SpireDetectEmbedTagRequest_default_instance_;
class SpireDetectEmbedTagResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpireDetectEmbedTagResponse> _instance;
} _SpireDetectEmbedTagResponse_default_instance_;
static void InitDefaultsscc_info_BBoxCropConfig_proto_2fspire_2fspire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BBoxCropConfig_default_instance_;
    new (ptr) ::BBoxCropConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BBoxCropConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BBoxCropConfig_proto_2fspire_2fspire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BBoxCropConfig_proto_2fspire_2fspire_2eproto}, {}};

static void InitDefaultsscc_info_CPUResources_proto_2fspire_2fspire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CPUResources_default_instance_;
    new (ptr) ::CPUResources();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CPUResources::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CPUResources_proto_2fspire_2fspire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CPUResources_proto_2fspire_2fspire_2eproto}, {}};

static void InitDefaultsscc_info_FaceDetectConfig_proto_2fspire_2fspire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_FaceDetectConfig_default_instance_;
    new (ptr) ::FaceDetectConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::FaceDetectConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FaceDetectConfig_proto_2fspire_2fspire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_FaceDetectConfig_proto_2fspire_2fspire_2eproto}, {
      &scc_info_BBoxCropConfig_proto_2fspire_2fspire_2eproto.base,}};

static void InitDefaultsscc_info_MultiHeadConfig_proto_2fspire_2fspire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MultiHeadConfig_default_instance_;
    new (ptr) ::MultiHeadConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MultiHeadConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MultiHeadConfig_proto_2fspire_2fspire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MultiHeadConfig_proto_2fspire_2fspire_2eproto}, {
      &scc_info_Vocab_proto_2futils_2fvocab_2eproto.base,}};

static void InitDefaultsscc_info_Replicas_proto_2fspire_2fspire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Replicas_default_instance_;
    new (ptr) ::Replicas();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Replicas::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Replicas_proto_2fspire_2fspire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Replicas_proto_2fspire_2fspire_2eproto}, {}};

static void InitDefaultsscc_info_SpireConfig_proto_2fspire_2fspire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SpireConfig_default_instance_;
    new (ptr) ::SpireConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SpireConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_SpireConfig_proto_2fspire_2fspire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, InitDefaultsscc_info_SpireConfig_proto_2fspire_2fspire_2eproto}, {
      &scc_info_SpireConfig_HeadsEntry_DoNotUse_proto_2fspire_2fspire_2eproto.base,
      &scc_info_FaceDetectConfig_proto_2fspire_2fspire_2eproto.base,
      &scc_info_SpireMeta_proto_2fspire_2fspire_2eproto.base,
      &scc_info_DataProviderParams_proto_2futils_2fdata_5fprovider_2eproto.base,
      &scc_info_LoadCheckpointScope_proto_2futils_2fcheckpoint_2eproto.base,
      &scc_info_SpireConfig_CpuResourcesEntry_DoNotUse_proto_2fspire_2fspire_2eproto.base,
      &scc_info_SpireConfig_ReplicasEntry_DoNotUse_proto_2fspire_2fspire_2eproto.base,}};

static void InitDefaultsscc_info_SpireConfig_CpuResourcesEntry_DoNotUse_proto_2fspire_2fspire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SpireConfig_CpuResourcesEntry_DoNotUse_default_instance_;
    new (ptr) ::SpireConfig_CpuResourcesEntry_DoNotUse();
  }
  ::SpireConfig_CpuResourcesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpireConfig_CpuResourcesEntry_DoNotUse_proto_2fspire_2fspire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SpireConfig_CpuResourcesEntry_DoNotUse_proto_2fspire_2fspire_2eproto}, {
      &scc_info_CPUResources_proto_2fspire_2fspire_2eproto.base,}};

static void InitDefaultsscc_info_SpireConfig_HeadsEntry_DoNotUse_proto_2fspire_2fspire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SpireConfig_HeadsEntry_DoNotUse_default_instance_;
    new (ptr) ::SpireConfig_HeadsEntry_DoNotUse();
  }
  ::SpireConfig_HeadsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpireConfig_HeadsEntry_DoNotUse_proto_2fspire_2fspire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SpireConfig_HeadsEntry_DoNotUse_proto_2fspire_2fspire_2eproto}, {
      &scc_info_MultiHeadConfig_proto_2fspire_2fspire_2eproto.base,}};

static void InitDefaultsscc_info_SpireConfig_ReplicasEntry_DoNotUse_proto_2fspire_2fspire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SpireConfig_ReplicasEntry_DoNotUse_default_instance_;
    new (ptr) ::SpireConfig_ReplicasEntry_DoNotUse();
  }
  ::SpireConfig_ReplicasEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpireConfig_ReplicasEntry_DoNotUse_proto_2fspire_2fspire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SpireConfig_ReplicasEntry_DoNotUse_proto_2fspire_2fspire_2eproto}, {
      &scc_info_Replicas_proto_2fspire_2fspire_2eproto.base,}};

static void InitDefaultsscc_info_SpireDetectEmbedTagRequest_proto_2fspire_2fspire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SpireDetectEmbedTagRequest_default_instance_;
    new (ptr) ::SpireDetectEmbedTagRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SpireDetectEmbedTagRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SpireDetectEmbedTagRequest_proto_2fspire_2fspire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_SpireDetectEmbedTagRequest_proto_2fspire_2fspire_2eproto}, {
      &scc_info_RequestMeta_proto_2futils_2frequest_5fmeta_2eproto.base,
      &scc_info_DataBatch_proto_2futils_2fdatabatch_2eproto.base,
      &scc_info_Tag_proto_2futils_2ftag_2eproto.base,}};

static void InitDefaultsscc_info_SpireDetectEmbedTagResponse_proto_2fspire_2fspire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SpireDetectEmbedTagResponse_default_instance_;
    new (ptr) ::SpireDetectEmbedTagResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SpireDetectEmbedTagResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SpireDetectEmbedTagResponse_proto_2fspire_2fspire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_SpireDetectEmbedTagResponse_proto_2fspire_2fspire_2eproto}, {
      &scc_info_ResponseStatus_proto_2futils_2frequest_5fmeta_2eproto.base,
      &scc_info_DataBatch_proto_2futils_2fdatabatch_2eproto.base,}};

static void InitDefaultsscc_info_SpireEmbedTagRequest_proto_2fspire_2fspire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SpireEmbedTagRequest_default_instance_;
    new (ptr) ::SpireEmbedTagRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SpireEmbedTagRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SpireEmbedTagRequest_proto_2fspire_2fspire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_SpireEmbedTagRequest_proto_2fspire_2fspire_2eproto}, {
      &scc_info_RequestMeta_proto_2futils_2frequest_5fmeta_2eproto.base,
      &scc_info_DataBatch_proto_2futils_2fdatabatch_2eproto.base,
      &scc_info_Tag_proto_2futils_2ftag_2eproto.base,}};

static void InitDefaultsscc_info_SpireEmbedTagResponse_proto_2fspire_2fspire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SpireEmbedTagResponse_default_instance_;
    new (ptr) ::SpireEmbedTagResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SpireEmbedTagResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SpireEmbedTagResponse_proto_2fspire_2fspire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_SpireEmbedTagResponse_proto_2fspire_2fspire_2eproto}, {
      &scc_info_ResponseStatus_proto_2futils_2frequest_5fmeta_2eproto.base,
      &scc_info_DataBatch_proto_2futils_2fdatabatch_2eproto.base,}};

static void InitDefaultsscc_info_SpireGetConfigRequest_proto_2fspire_2fspire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SpireGetConfigRequest_default_instance_;
    new (ptr) ::SpireGetConfigRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SpireGetConfigRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpireGetConfigRequest_proto_2fspire_2fspire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SpireGetConfigRequest_proto_2fspire_2fspire_2eproto}, {
      &scc_info_RequestMeta_proto_2futils_2frequest_5fmeta_2eproto.base,}};

static void InitDefaultsscc_info_SpireGetConfigResponse_proto_2fspire_2fspire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SpireGetConfigResponse_default_instance_;
    new (ptr) ::SpireGetConfigResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SpireGetConfigResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SpireGetConfigResponse_proto_2fspire_2fspire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_SpireGetConfigResponse_proto_2fspire_2fspire_2eproto}, {
      &scc_info_ResponseStatus_proto_2futils_2frequest_5fmeta_2eproto.base,
      &scc_info_SpireConfig_proto_2fspire_2fspire_2eproto.base,}};

static void InitDefaultsscc_info_SpireGetStateRequest_proto_2fspire_2fspire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SpireGetStateRequest_default_instance_;
    new (ptr) ::SpireGetStateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SpireGetStateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpireGetStateRequest_proto_2fspire_2fspire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SpireGetStateRequest_proto_2fspire_2fspire_2eproto}, {
      &scc_info_RequestMeta_proto_2futils_2frequest_5fmeta_2eproto.base,}};

static void InitDefaultsscc_info_SpireGetStateResponse_proto_2fspire_2fspire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SpireGetStateResponse_default_instance_;
    new (ptr) ::SpireGetStateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SpireGetStateResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SpireGetStateResponse_proto_2fspire_2fspire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_SpireGetStateResponse_proto_2fspire_2fspire_2eproto}, {
      &scc_info_ResponseStatus_proto_2futils_2frequest_5fmeta_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_SpireInstanceSegmentRequest_proto_2fspire_2fspire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SpireInstanceSegmentRequest_default_instance_;
    new (ptr) ::SpireInstanceSegmentRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SpireInstanceSegmentRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SpireInstanceSegmentRequest_proto_2fspire_2fspire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_SpireInstanceSegmentRequest_proto_2fspire_2fspire_2eproto}, {
      &scc_info_RequestMeta_proto_2futils_2frequest_5fmeta_2eproto.base,
      &scc_info_DataBatch_proto_2futils_2fdatabatch_2eproto.base,
      &scc_info_Tag_proto_2futils_2ftag_2eproto.base,}};

static void InitDefaultsscc_info_SpireInstanceSegmentResponse_proto_2fspire_2fspire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SpireInstanceSegmentResponse_default_instance_;
    new (ptr) ::SpireInstanceSegmentResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SpireInstanceSegmentResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SpireInstanceSegmentResponse_proto_2fspire_2fspire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_SpireInstanceSegmentResponse_proto_2fspire_2fspire_2eproto}, {
      &scc_info_ResponseStatus_proto_2futils_2frequest_5fmeta_2eproto.base,
      &scc_info_DataBatch_proto_2futils_2fdatabatch_2eproto.base,}};

static void InitDefaultsscc_info_SpireMaybeJITRequest_proto_2fspire_2fspire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SpireMaybeJITRequest_default_instance_;
    new (ptr) ::SpireMaybeJITRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SpireMaybeJITRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpireMaybeJITRequest_proto_2fspire_2fspire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SpireMaybeJITRequest_proto_2fspire_2fspire_2eproto}, {
      &scc_info_RequestMeta_proto_2futils_2frequest_5fmeta_2eproto.base,}};

static void InitDefaultsscc_info_SpireMaybeJITResponse_proto_2fspire_2fspire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SpireMaybeJITResponse_default_instance_;
    new (ptr) ::SpireMaybeJITResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SpireMaybeJITResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpireMaybeJITResponse_proto_2fspire_2fspire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SpireMaybeJITResponse_proto_2fspire_2fspire_2eproto}, {
      &scc_info_ResponseStatus_proto_2futils_2frequest_5fmeta_2eproto.base,}};

static void InitDefaultsscc_info_SpireMeta_proto_2fspire_2fspire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SpireMeta_default_instance_;
    new (ptr) ::SpireMeta();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SpireMeta::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpireMeta_proto_2fspire_2fspire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SpireMeta_proto_2fspire_2fspire_2eproto}, {}};

static void InitDefaultsscc_info_SpireSavedOutputRequest_proto_2fspire_2fspire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SpireSavedOutputRequest_default_instance_;
    new (ptr) ::SpireSavedOutputRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SpireSavedOutputRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SpireSavedOutputRequest_proto_2fspire_2fspire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_SpireSavedOutputRequest_proto_2fspire_2fspire_2eproto}, {
      &scc_info_RequestMeta_proto_2futils_2frequest_5fmeta_2eproto.base,
      &scc_info_DataBatch_proto_2futils_2fdatabatch_2eproto.base,}};

static void InitDefaultsscc_info_SpireSavedOutputResponse_proto_2fspire_2fspire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SpireSavedOutputResponse_default_instance_;
    new (ptr) ::SpireSavedOutputResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SpireSavedOutputResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SpireSavedOutputResponse_proto_2fspire_2fspire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_SpireSavedOutputResponse_proto_2fspire_2fspire_2eproto}, {
      &scc_info_ResponseStatus_proto_2futils_2frequest_5fmeta_2eproto.base,
      &scc_info_DataBatch_proto_2futils_2fdatabatch_2eproto.base,}};

static void InitDefaultsscc_info_SpireSetConfigRequest_proto_2fspire_2fspire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SpireSetConfigRequest_default_instance_;
    new (ptr) ::SpireSetConfigRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SpireSetConfigRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SpireSetConfigRequest_proto_2fspire_2fspire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_SpireSetConfigRequest_proto_2fspire_2fspire_2eproto}, {
      &scc_info_RequestMeta_proto_2futils_2frequest_5fmeta_2eproto.base,
      &scc_info_SpireConfig_proto_2fspire_2fspire_2eproto.base,}};

static void InitDefaultsscc_info_SpireSetConfigResponse_proto_2fspire_2fspire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SpireSetConfigResponse_default_instance_;
    new (ptr) ::SpireSetConfigResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SpireSetConfigResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpireSetConfigResponse_proto_2fspire_2fspire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SpireSetConfigResponse_proto_2fspire_2fspire_2eproto}, {
      &scc_info_ResponseStatus_proto_2futils_2frequest_5fmeta_2eproto.base,}};

static void InitDefaultsscc_info_SpireStopServingRequest_proto_2fspire_2fspire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SpireStopServingRequest_default_instance_;
    new (ptr) ::SpireStopServingRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SpireStopServingRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpireStopServingRequest_proto_2fspire_2fspire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SpireStopServingRequest_proto_2fspire_2fspire_2eproto}, {
      &scc_info_RequestMeta_proto_2futils_2frequest_5fmeta_2eproto.base,}};

static void InitDefaultsscc_info_SpireStopServingResponse_proto_2fspire_2fspire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SpireStopServingResponse_default_instance_;
    new (ptr) ::SpireStopServingResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SpireStopServingResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpireStopServingResponse_proto_2fspire_2fspire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SpireStopServingResponse_proto_2fspire_2fspire_2eproto}, {
      &scc_info_ResponseStatus_proto_2futils_2frequest_5fmeta_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fspire_2fspire_2eproto[28];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_proto_2fspire_2fspire_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fspire_2fspire_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2fspire_2fspire_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FaceDetectConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FaceDetectConfig, type_),
  PROTOBUF_FIELD_OFFSET(::FaceDetectConfig, spire_config_),
  PROTOBUF_FIELD_OFFSET(::FaceDetectConfig, detect_threshold_),
  PROTOBUF_FIELD_OFFSET(::FaceDetectConfig, cascade_path_),
  PROTOBUF_FIELD_OFFSET(::FaceDetectConfig, min_size_),
  PROTOBUF_FIELD_OFFSET(::FaceDetectConfig, bbox_crop_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BBoxCropConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BBoxCropConfig, type_),
  PROTOBUF_FIELD_OFFSET(::BBoxCropConfig, margin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MultiHeadConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MultiHeadConfig, dataset_),
  PROTOBUF_FIELD_OFFSET(::MultiHeadConfig, face_key_),
  PROTOBUF_FIELD_OFFSET(::MultiHeadConfig, vocab_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig_HeadsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig_HeadsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpireConfig_HeadsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig_HeadsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::SpireConfig_CpuResourcesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig_CpuResourcesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpireConfig_CpuResourcesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig_CpuResourcesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::SpireConfig_ReplicasEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig_ReplicasEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpireConfig_ReplicasEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig_ReplicasEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SpireConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpireConfig, name_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig, eid_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig, exp_type_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig, dataset_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig, gpu_memory_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig, gpu_batch_size_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig, device_type_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig, num_devices_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig, detection_layer_name_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig, detection_score_threshold_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig, detection_max_bboxes_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig, embedding_layer_names_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig, denoise_video_embeddings_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig, is_multiheaded_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig, heads_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig, face_detect_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig, meta_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig, data_provider_params_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig, load_checkpoint_scopes_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig, timestamp_ms_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig, model_type_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig, compatibility_version_id_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig, uuid_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig, spatial_reduce_type_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig, cpu_resources_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig, replicas_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig, embeddings_spire_conf_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig, landmarks_spire_conf_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig, model_framework_),
  PROTOBUF_FIELD_OFFSET(::SpireConfig, landmark_points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Replicas, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Replicas, minimum_),
  PROTOBUF_FIELD_OFFSET(::Replicas, maximum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPUResources, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPUResources, cpu_core_request_),
  PROTOBUF_FIELD_OFFSET(::CPUResources, cpu_core_limit_),
  PROTOBUF_FIELD_OFFSET(::CPUResources, cpu_mem_request_),
  PROTOBUF_FIELD_OFFSET(::CPUResources, cpu_mem_limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SpireMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpireMeta, models_),
  PROTOBUF_FIELD_OFFSET(::SpireMeta, lopq_model_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SpireGetConfigRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpireGetConfigRequest, meta_),
  PROTOBUF_FIELD_OFFSET(::SpireGetConfigRequest, use_lock_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SpireGetConfigResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpireGetConfigResponse, status_),
  PROTOBUF_FIELD_OFFSET(::SpireGetConfigResponse, config_json_),
  PROTOBUF_FIELD_OFFSET(::SpireGetConfigResponse, config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SpireSetConfigRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpireSetConfigRequest, meta_),
  PROTOBUF_FIELD_OFFSET(::SpireSetConfigRequest, config_json_),
  PROTOBUF_FIELD_OFFSET(::SpireSetConfigRequest, config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SpireSetConfigResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpireSetConfigResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SpireGetStateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpireGetStateRequest, meta_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SpireGetStateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpireGetStateResponse, status_),
  PROTOBUF_FIELD_OFFSET(::SpireGetStateResponse, state_),
  PROTOBUF_FIELD_OFFSET(::SpireGetStateResponse, last_inference_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SpireMaybeJITRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpireMaybeJITRequest, meta_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SpireMaybeJITResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpireMaybeJITResponse, status_),
  PROTOBUF_FIELD_OFFSET(::SpireMaybeJITResponse, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SpireStopServingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpireStopServingRequest, meta_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SpireStopServingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpireStopServingResponse, status_),
  PROTOBUF_FIELD_OFFSET(::SpireStopServingResponse, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SpireEmbedTagRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpireEmbedTagRequest, meta_),
  PROTOBUF_FIELD_OFFSET(::SpireEmbedTagRequest, data_),
  PROTOBUF_FIELD_OFFSET(::SpireEmbedTagRequest, ops_),
  PROTOBUF_FIELD_OFFSET(::SpireEmbedTagRequest, topk_),
  PROTOBUF_FIELD_OFFSET(::SpireEmbedTagRequest, fps_),
  PROTOBUF_FIELD_OFFSET(::SpireEmbedTagRequest, tags_to_watch_),
  PROTOBUF_FIELD_OFFSET(::SpireEmbedTagRequest, language_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SpireEmbedTagResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpireEmbedTagResponse, status_),
  PROTOBUF_FIELD_OFFSET(::SpireEmbedTagResponse, results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SpireSavedOutputRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpireSavedOutputRequest, meta_),
  PROTOBUF_FIELD_OFFSET(::SpireSavedOutputRequest, data_),
  PROTOBUF_FIELD_OFFSET(::SpireSavedOutputRequest, store_layers_),
  PROTOBUF_FIELD_OFFSET(::SpireSavedOutputRequest, reduce_num_views_),
  PROTOBUF_FIELD_OFFSET(::SpireSavedOutputRequest, reduce_output_space_),
  PROTOBUF_FIELD_OFFSET(::SpireSavedOutputRequest, fps_),
  PROTOBUF_FIELD_OFFSET(::SpireSavedOutputRequest, topk_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SpireSavedOutputResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpireSavedOutputResponse, status_),
  PROTOBUF_FIELD_OFFSET(::SpireSavedOutputResponse, results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SpireInstanceSegmentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpireInstanceSegmentRequest, meta_),
  PROTOBUF_FIELD_OFFSET(::SpireInstanceSegmentRequest, data_),
  PROTOBUF_FIELD_OFFSET(::SpireInstanceSegmentRequest, ops_),
  PROTOBUF_FIELD_OFFSET(::SpireInstanceSegmentRequest, topk_),
  PROTOBUF_FIELD_OFFSET(::SpireInstanceSegmentRequest, fps_),
  PROTOBUF_FIELD_OFFSET(::SpireInstanceSegmentRequest, tags_to_watch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SpireInstanceSegmentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpireInstanceSegmentResponse, status_),
  PROTOBUF_FIELD_OFFSET(::SpireInstanceSegmentResponse, results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SpireDetectEmbedTagRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpireDetectEmbedTagRequest, meta_),
  PROTOBUF_FIELD_OFFSET(::SpireDetectEmbedTagRequest, data_),
  PROTOBUF_FIELD_OFFSET(::SpireDetectEmbedTagRequest, ops_),
  PROTOBUF_FIELD_OFFSET(::SpireDetectEmbedTagRequest, topk_),
  PROTOBUF_FIELD_OFFSET(::SpireDetectEmbedTagRequest, fps_),
  PROTOBUF_FIELD_OFFSET(::SpireDetectEmbedTagRequest, tags_to_watch_),
  PROTOBUF_FIELD_OFFSET(::SpireDetectEmbedTagRequest, detection_score_threshold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SpireDetectEmbedTagResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpireDetectEmbedTagResponse, status_),
  PROTOBUF_FIELD_OFFSET(::SpireDetectEmbedTagResponse, results_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::FaceDetectConfig)},
  { 11, -1, sizeof(::BBoxCropConfig)},
  { 18, -1, sizeof(::MultiHeadConfig)},
  { 26, 33, sizeof(::SpireConfig_HeadsEntry_DoNotUse)},
  { 35, 42, sizeof(::SpireConfig_CpuResourcesEntry_DoNotUse)},
  { 44, 51, sizeof(::SpireConfig_ReplicasEntry_DoNotUse)},
  { 53, -1, sizeof(::SpireConfig)},
  { 88, -1, sizeof(::Replicas)},
  { 95, -1, sizeof(::CPUResources)},
  { 104, -1, sizeof(::SpireMeta)},
  { 111, -1, sizeof(::SpireGetConfigRequest)},
  { 118, -1, sizeof(::SpireGetConfigResponse)},
  { 126, -1, sizeof(::SpireSetConfigRequest)},
  { 134, -1, sizeof(::SpireSetConfigResponse)},
  { 140, -1, sizeof(::SpireGetStateRequest)},
  { 146, -1, sizeof(::SpireGetStateResponse)},
  { 154, -1, sizeof(::SpireMaybeJITRequest)},
  { 160, -1, sizeof(::SpireMaybeJITResponse)},
  { 167, -1, sizeof(::SpireStopServingRequest)},
  { 173, -1, sizeof(::SpireStopServingResponse)},
  { 180, -1, sizeof(::SpireEmbedTagRequest)},
  { 192, -1, sizeof(::SpireEmbedTagResponse)},
  { 199, -1, sizeof(::SpireSavedOutputRequest)},
  { 211, -1, sizeof(::SpireSavedOutputResponse)},
  { 218, -1, sizeof(::SpireInstanceSegmentRequest)},
  { 229, -1, sizeof(::SpireInstanceSegmentResponse)},
  { 236, -1, sizeof(::SpireDetectEmbedTagRequest)},
  { 248, -1, sizeof(::SpireDetectEmbedTagResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FaceDetectConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BBoxCropConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MultiHeadConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SpireConfig_HeadsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SpireConfig_CpuResourcesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SpireConfig_ReplicasEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SpireConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Replicas_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPUResources_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SpireMeta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SpireGetConfigRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SpireGetConfigResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SpireSetConfigRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SpireSetConfigResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SpireGetStateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SpireGetStateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SpireMaybeJITRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SpireMaybeJITResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SpireStopServingRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SpireStopServingResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SpireEmbedTagRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SpireEmbedTagResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SpireSavedOutputRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SpireSavedOutputResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SpireInstanceSegmentRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SpireInstanceSegmentResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SpireDetectEmbedTagRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SpireDetectEmbedTagResponse_default_instance_),
};

const char descriptor_table_protodef_proto_2fspire_2fspire_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027proto/spire/spire.proto\032\037google/protob"
  "uf/timestamp.proto\032\034proto/utils/checkpoi"
  "nt.proto\032\036proto/utils/data_example.proto"
  "\032\037proto/utils/data_provider.proto\032\033proto"
  "/utils/databatch.proto\032\036proto/utils/requ"
  "est_meta.proto\032\025proto/utils/tag.proto\032\027p"
  "roto/utils/vocab.proto\"\234\001\n\020FaceDetectCon"
  "fig\022\014\n\004type\030\001 \001(\t\022\024\n\014spire_config\030\002 \001(\t\022"
  "\030\n\020detect_threshold\030\003 \001(\002\022\024\n\014cascade_pat"
  "h\030\004 \001(\t\022\020\n\010min_size\030\005 \001(\002\022\"\n\tbbox_crop\030\006"
  " \001(\0132\017.BBoxCropConfig\".\n\016BBoxCropConfig\022"
  "\014\n\004type\030\001 \001(\t\022\016\n\006margin\030\002 \001(\002\"O\n\017MultiHe"
  "adConfig\022\023\n\007dataset\030\001 \001(\tB\002\030\001\022\020\n\010face_ke"
  "y\030\002 \001(\t\022\025\n\005vocab\030\003 \001(\0132\006.Vocab\"\253\t\n\013Spire"
  "Config\022\014\n\004name\030\001 \001(\t\022\013\n\003eid\030\002 \001(\003\022\024\n\010exp"
  "_type\030\003 \001(\tB\002\030\001\022\023\n\007dataset\030\004 \001(\tB\002\030\001\022\022\n\n"
  "gpu_memory\030\005 \001(\003\022\026\n\016gpu_batch_size\030\006 \001(\005"
  "\022\023\n\013device_type\030\007 \001(\t\022\023\n\013num_devices\030\010 \001"
  "(\005\022\034\n\024detection_layer_name\030\t \001(\t\022!\n\031dete"
  "ction_score_threshold\030\n \001(\002\022\034\n\024detection"
  "_max_bboxes\030\032 \001(\005\022\035\n\025embedding_layer_nam"
  "es\030\013 \003(\t\022 \n\030denoise_video_embeddings\030\036 \001"
  "(\010\022\026\n\016is_multiheaded\030\014 \001(\010\022&\n\005heads\030\r \003("
  "\0132\027.SpireConfig.HeadsEntry\022&\n\013face_detec"
  "t\030\016 \001(\0132\021.FaceDetectConfig\022\030\n\004meta\030\017 \001(\013"
  "2\n.SpireMeta\0221\n\024data_provider_params\030\020 \001"
  "(\0132\023.DataProviderParams\0224\n\026load_checkpoi"
  "nt_scopes\030\021 \003(\0132\024.LoadCheckpointScope\022\024\n"
  "\014timestamp_ms\030\022 \001(\002\022#\n\nmodel_type\030\023 \001(\0162"
  "\017.SpireModelType\022 \n\030compatibility_versio"
  "n_id\030\024 \001(\003\022\014\n\004uuid\030\025 \001(\t\0224\n\023spatial_redu"
  "ce_type\030\026 \001(\0162\027.SpireSpatialReduceType\0225"
  "\n\rcpu_resources\030\027 \003(\0132\036.SpireConfig.CpuR"
  "esourcesEntry\022,\n\010replicas\030\030 \003(\0132\032.SpireC"
  "onfig.ReplicasEntry\022\035\n\025embeddings_spire_"
  "conf\030\031 \001(\t\022\034\n\024landmarks_spire_conf\030\034 \001(\t"
  "\022/\n\017model_framework\030\033 \001(\0162\026.SpireConfig."
  "Framework\022\027\n\017landmark_points\030\035 \003(\t\032>\n\nHe"
  "adsEntry\022\013\n\003key\030\001 \001(\t\022\037\n\005value\030\002 \001(\0132\020.M"
  "ultiHeadConfig:\0028\001\032B\n\021CpuResourcesEntry\022"
  "\013\n\003key\030\001 \001(\t\022\034\n\005value\030\002 \001(\0132\r.CPUResourc"
  "es:\0028\001\032:\n\rReplicasEntry\022\013\n\003key\030\001 \001(\t\022\030\n\005"
  "value\030\002 \001(\0132\t.Replicas:\0028\001\"(\n\tFramework\022"
  "\016\n\nTENSORFLOW\020\000\022\013\n\007PYTORCH\020\001\",\n\010Replicas"
  "\022\017\n\007minimum\030\001 \001(\005\022\017\n\007maximum\030\002 \001(\005\"p\n\014CP"
  "UResources\022\030\n\020cpu_core_request\030\001 \001(\t\022\026\n\016"
  "cpu_core_limit\030\002 \001(\t\022\027\n\017cpu_mem_request\030"
  "\003 \001(\t\022\025\n\rcpu_mem_limit\030\004 \001(\t\"/\n\tSpireMet"
  "a\022\016\n\006models\030\001 \003(\t\022\022\n\nlopq_model\030\002 \001(\t\"E\n"
  "\025SpireGetConfigRequest\022\032\n\004meta\030\001 \001(\0132\014.R"
  "equestMeta\022\020\n\010use_lock\030\002 \001(\010\"l\n\026SpireGet"
  "ConfigResponse\022\037\n\006status\030\001 \001(\0132\017.Respons"
  "eStatus\022\023\n\013config_json\030\002 \001(\t\022\034\n\006config\030\003"
  " \001(\0132\014.SpireConfig\"f\n\025SpireSetConfigRequ"
  "est\022\032\n\004meta\030\001 \001(\0132\014.RequestMeta\022\023\n\013confi"
  "g_json\030\002 \001(\t\022\034\n\006config\030\003 \001(\0132\014.SpireConf"
  "ig\"9\n\026SpireSetConfigResponse\022\037\n\006status\030\001"
  " \001(\0132\017.ResponseStatus\"2\n\024SpireGetStateRe"
  "quest\022\032\n\004meta\030\001 \001(\0132\014.RequestMeta\"\215\001\n\025Sp"
  "ireGetStateResponse\022\037\n\006status\030\001 \001(\0132\017.Re"
  "sponseStatus\022\032\n\005state\030\002 \001(\0162\013.SpireState"
  "\0227\n\023last_inference_time\030\003 \001(\0132\032.google.p"
  "rotobuf.Timestamp\"2\n\024SpireMaybeJITReques"
  "t\022\032\n\004meta\030\001 \001(\0132\014.RequestMeta\"T\n\025SpireMa"
  "ybeJITResponse\022\037\n\006status\030\001 \001(\0132\017.Respons"
  "eStatus\022\032\n\005state\030\002 \001(\0162\013.SpireState\"5\n\027S"
  "pireStopServingRequest\022\032\n\004meta\030\001 \001(\0132\014.R"
  "equestMeta\"W\n\030SpireStopServingResponse\022\037"
  "\n\006status\030\001 \001(\0132\017.ResponseStatus\022\032\n\005state"
  "\030\002 \001(\0162\013.SpireState\"\262\001\n\024SpireEmbedTagReq"
  "uest\022\032\n\004meta\030\001 \001(\0132\014.RequestMeta\022\030\n\004data"
  "\030\002 \001(\0132\n.DataBatch\022\026\n\003ops\030\003 \003(\0162\t.SpireO"
  "ps\022\014\n\004topk\030\004 \001(\005\022\013\n\003fps\030\005 \001(\002\022\033\n\rtags_to"
  "_watch\030\006 \003(\0132\004.Tag\022\024\n\010language\030\007 \001(\tB\002\030\001"
  "\"U\n\025SpireEmbedTagResponse\022\037\n\006status\030\001 \001("
  "\0132\017.ResponseStatus\022\033\n\007results\030\002 \001(\0132\n.Da"
  "taBatch\"\267\001\n\027SpireSavedOutputRequest\022\032\n\004m"
  "eta\030\001 \001(\0132\014.RequestMeta\022\030\n\004data\030\002 \001(\0132\n."
  "DataBatch\022\024\n\014store_layers\030\003 \003(\t\022\030\n\020reduc"
  "e_num_views\030\004 \001(\010\022\033\n\023reduce_output_space"
  "\030\005 \001(\010\022\013\n\003fps\030\006 \001(\002\022\014\n\004topk\030\007 \001(\005\"X\n\030Spi"
  "reSavedOutputResponse\022\037\n\006status\030\001 \001(\0132\017."
  "ResponseStatus\022\033\n\007results\030\002 \001(\0132\n.DataBa"
  "tch\"\243\001\n\033SpireInstanceSegmentRequest\022\032\n\004m"
  "eta\030\001 \001(\0132\014.RequestMeta\022\030\n\004data\030\002 \001(\0132\n."
  "DataBatch\022\026\n\003ops\030\003 \003(\0162\t.SpireOps\022\014\n\004top"
  "k\030\004 \001(\005\022\013\n\003fps\030\005 \001(\002\022\033\n\rtags_to_watch\030\006 "
  "\003(\0132\004.Tag\"\\\n\034SpireInstanceSegmentRespons"
  "e\022\037\n\006status\030\001 \001(\0132\017.ResponseStatus\022\033\n\007re"
  "sults\030\002 \001(\0132\n.DataBatch\"\305\001\n\032SpireDetectE"
  "mbedTagRequest\022\032\n\004meta\030\001 \001(\0132\014.RequestMe"
  "ta\022\030\n\004data\030\002 \001(\0132\n.DataBatch\022\026\n\003ops\030\003 \003("
  "\0162\t.SpireOps\022\014\n\004topk\030\004 \001(\005\022\013\n\003fps\030\005 \001(\002\022"
  "\033\n\rtags_to_watch\030\006 \003(\0132\004.Tag\022!\n\031detectio"
  "n_score_threshold\030\007 \001(\002\"[\n\033SpireDetectEm"
  "bedTagResponse\022\037\n\006status\030\001 \001(\0132\017.Respons"
  "eStatus\022\033\n\007results\030\002 \001(\0132\n.DataBatch*_\n\016"
  "SpireModelType\022\013\n\007NOT_SET\020\000\022\022\n\016CLASSIFIC"
  "ATION\020\001\022\r\n\tDETECTION\020\002\022\035\n\031EMBEDDINGS_CLA"
  "SSIFICATION\020\003*+\n\026SpireSpatialReduceType\022"
  "\010\n\004MEAN\020\000\022\007\n\003MAX\020\001*>\n\nSpireState\022\010\n\004NONE"
  "\020\000\022\020\n\014INITIALIZING\020\001\022\t\n\005READY\020\002\022\t\n\005ERROR"
  "\020\003*G\n\010SpireOps\022\007\n\003TAG\020\000\022\t\n\005EMBED\020\001\022\017\n\013FA"
  "CE_DETECT\020\002\022\007\n\003OCR\020\003\022\r\n\tLANDMARKS\020\004B\007Z\005s"
  "pireb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2fspire_2fspire_2eproto_deps[8] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_proto_2futils_2fcheckpoint_2eproto,
  &::descriptor_table_proto_2futils_2fdata_5fexample_2eproto,
  &::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto,
  &::descriptor_table_proto_2futils_2fdatabatch_2eproto,
  &::descriptor_table_proto_2futils_2frequest_5fmeta_2eproto,
  &::descriptor_table_proto_2futils_2ftag_2eproto,
  &::descriptor_table_proto_2futils_2fvocab_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_2fspire_2fspire_2eproto_sccs[28] = {
  &scc_info_BBoxCropConfig_proto_2fspire_2fspire_2eproto.base,
  &scc_info_CPUResources_proto_2fspire_2fspire_2eproto.base,
  &scc_info_FaceDetectConfig_proto_2fspire_2fspire_2eproto.base,
  &scc_info_MultiHeadConfig_proto_2fspire_2fspire_2eproto.base,
  &scc_info_Replicas_proto_2fspire_2fspire_2eproto.base,
  &scc_info_SpireConfig_proto_2fspire_2fspire_2eproto.base,
  &scc_info_SpireConfig_CpuResourcesEntry_DoNotUse_proto_2fspire_2fspire_2eproto.base,
  &scc_info_SpireConfig_HeadsEntry_DoNotUse_proto_2fspire_2fspire_2eproto.base,
  &scc_info_SpireConfig_ReplicasEntry_DoNotUse_proto_2fspire_2fspire_2eproto.base,
  &scc_info_SpireDetectEmbedTagRequest_proto_2fspire_2fspire_2eproto.base,
  &scc_info_SpireDetectEmbedTagResponse_proto_2fspire_2fspire_2eproto.base,
  &scc_info_SpireEmbedTagRequest_proto_2fspire_2fspire_2eproto.base,
  &scc_info_SpireEmbedTagResponse_proto_2fspire_2fspire_2eproto.base,
  &scc_info_SpireGetConfigRequest_proto_2fspire_2fspire_2eproto.base,
  &scc_info_SpireGetConfigResponse_proto_2fspire_2fspire_2eproto.base,
  &scc_info_SpireGetStateRequest_proto_2fspire_2fspire_2eproto.base,
  &scc_info_SpireGetStateResponse_proto_2fspire_2fspire_2eproto.base,
  &scc_info_SpireInstanceSegmentRequest_proto_2fspire_2fspire_2eproto.base,
  &scc_info_SpireInstanceSegmentResponse_proto_2fspire_2fspire_2eproto.base,
  &scc_info_SpireMaybeJITRequest_proto_2fspire_2fspire_2eproto.base,
  &scc_info_SpireMaybeJITResponse_proto_2fspire_2fspire_2eproto.base,
  &scc_info_SpireMeta_proto_2fspire_2fspire_2eproto.base,
  &scc_info_SpireSavedOutputRequest_proto_2fspire_2fspire_2eproto.base,
  &scc_info_SpireSavedOutputResponse_proto_2fspire_2fspire_2eproto.base,
  &scc_info_SpireSetConfigRequest_proto_2fspire_2fspire_2eproto.base,
  &scc_info_SpireSetConfigResponse_proto_2fspire_2fspire_2eproto.base,
  &scc_info_SpireStopServingRequest_proto_2fspire_2fspire_2eproto.base,
  &scc_info_SpireStopServingResponse_proto_2fspire_2fspire_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2fspire_2fspire_2eproto_once;
static bool descriptor_table_proto_2fspire_2fspire_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fspire_2fspire_2eproto = {
  &descriptor_table_proto_2fspire_2fspire_2eproto_initialized, descriptor_table_protodef_proto_2fspire_2fspire_2eproto, "proto/spire/spire.proto", 4172,
  &descriptor_table_proto_2fspire_2fspire_2eproto_once, descriptor_table_proto_2fspire_2fspire_2eproto_sccs, descriptor_table_proto_2fspire_2fspire_2eproto_deps, 28, 8,
  schemas, file_default_instances, TableStruct_proto_2fspire_2fspire_2eproto::offsets,
  file_level_metadata_proto_2fspire_2fspire_2eproto, 28, file_level_enum_descriptors_proto_2fspire_2fspire_2eproto, file_level_service_descriptors_proto_2fspire_2fspire_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2fspire_2fspire_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_2fspire_2fspire_2eproto), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SpireConfig_Framework_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fspire_2fspire_2eproto);
  return file_level_enum_descriptors_proto_2fspire_2fspire_2eproto[0];
}
bool SpireConfig_Framework_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SpireConfig_Framework SpireConfig::TENSORFLOW;
constexpr SpireConfig_Framework SpireConfig::PYTORCH;
constexpr SpireConfig_Framework SpireConfig::Framework_MIN;
constexpr SpireConfig_Framework SpireConfig::Framework_MAX;
constexpr int SpireConfig::Framework_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SpireModelType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fspire_2fspire_2eproto);
  return file_level_enum_descriptors_proto_2fspire_2fspire_2eproto[1];
}
bool SpireModelType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SpireSpatialReduceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fspire_2fspire_2eproto);
  return file_level_enum_descriptors_proto_2fspire_2fspire_2eproto[2];
}
bool SpireSpatialReduceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SpireState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fspire_2fspire_2eproto);
  return file_level_enum_descriptors_proto_2fspire_2fspire_2eproto[3];
}
bool SpireState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SpireOps_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fspire_2fspire_2eproto);
  return file_level_enum_descriptors_proto_2fspire_2fspire_2eproto[4];
}
bool SpireOps_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void FaceDetectConfig::InitAsDefaultInstance() {
  ::_FaceDetectConfig_default_instance_._instance.get_mutable()->bbox_crop_ = const_cast< ::BBoxCropConfig*>(
      ::BBoxCropConfig::internal_default_instance());
}
class FaceDetectConfig::_Internal {
 public:
  static const ::BBoxCropConfig& bbox_crop(const FaceDetectConfig* msg);
};

const ::BBoxCropConfig&
FaceDetectConfig::_Internal::bbox_crop(const FaceDetectConfig* msg) {
  return *msg->bbox_crop_;
}
FaceDetectConfig::FaceDetectConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FaceDetectConfig)
}
FaceDetectConfig::FaceDetectConfig(const FaceDetectConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.type().empty()) {
    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  spire_config_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.spire_config().empty()) {
    spire_config_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.spire_config_);
  }
  cascade_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.cascade_path().empty()) {
    cascade_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cascade_path_);
  }
  if (from.has_bbox_crop()) {
    bbox_crop_ = new ::BBoxCropConfig(*from.bbox_crop_);
  } else {
    bbox_crop_ = nullptr;
  }
  ::memcpy(&detect_threshold_, &from.detect_threshold_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_size_) -
    reinterpret_cast<char*>(&detect_threshold_)) + sizeof(min_size_));
  // @@protoc_insertion_point(copy_constructor:FaceDetectConfig)
}

void FaceDetectConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FaceDetectConfig_proto_2fspire_2fspire_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  spire_config_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cascade_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&bbox_crop_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_size_) -
      reinterpret_cast<char*>(&bbox_crop_)) + sizeof(min_size_));
}

FaceDetectConfig::~FaceDetectConfig() {
  // @@protoc_insertion_point(destructor:FaceDetectConfig)
  SharedDtor();
}

void FaceDetectConfig::SharedDtor() {
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  spire_config_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cascade_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete bbox_crop_;
}

void FaceDetectConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FaceDetectConfig& FaceDetectConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FaceDetectConfig_proto_2fspire_2fspire_2eproto.base);
  return *internal_default_instance();
}


void FaceDetectConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:FaceDetectConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  spire_config_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cascade_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && bbox_crop_ != nullptr) {
    delete bbox_crop_;
  }
  bbox_crop_ = nullptr;
  ::memset(&detect_threshold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_size_) -
      reinterpret_cast<char*>(&detect_threshold_)) + sizeof(min_size_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FaceDetectConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_type(), ptr, ctx, "FaceDetectConfig.type");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string spire_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_spire_config(), ptr, ctx, "FaceDetectConfig.spire_config");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float detect_threshold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          detect_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string cascade_path = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_cascade_path(), ptr, ctx, "FaceDetectConfig.cascade_path");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float min_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          min_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .BBoxCropConfig bbox_crop = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_bbox_crop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FaceDetectConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:FaceDetectConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), static_cast<int>(this->type().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "FaceDetectConfig.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string spire_config = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_spire_config()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->spire_config().data(), static_cast<int>(this->spire_config().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "FaceDetectConfig.spire_config"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float detect_threshold = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &detect_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cascade_path = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_cascade_path()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->cascade_path().data(), static_cast<int>(this->cascade_path().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "FaceDetectConfig.cascade_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float min_size = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .BBoxCropConfig bbox_crop = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_bbox_crop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FaceDetectConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FaceDetectConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FaceDetectConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FaceDetectConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FaceDetectConfig.type");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // string spire_config = 2;
  if (this->spire_config().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->spire_config().data(), static_cast<int>(this->spire_config().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FaceDetectConfig.spire_config");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->spire_config(), output);
  }

  // float detect_threshold = 3;
  if (!(this->detect_threshold() <= 0 && this->detect_threshold() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->detect_threshold(), output);
  }

  // string cascade_path = 4;
  if (this->cascade_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->cascade_path().data(), static_cast<int>(this->cascade_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FaceDetectConfig.cascade_path");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->cascade_path(), output);
  }

  // float min_size = 5;
  if (!(this->min_size() <= 0 && this->min_size() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->min_size(), output);
  }

  // .BBoxCropConfig bbox_crop = 6;
  if (this->has_bbox_crop()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::bbox_crop(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FaceDetectConfig)
}

::PROTOBUF_NAMESPACE_ID::uint8* FaceDetectConfig::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FaceDetectConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FaceDetectConfig.type");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // string spire_config = 2;
  if (this->spire_config().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->spire_config().data(), static_cast<int>(this->spire_config().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FaceDetectConfig.spire_config");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->spire_config(), target);
  }

  // float detect_threshold = 3;
  if (!(this->detect_threshold() <= 0 && this->detect_threshold() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->detect_threshold(), target);
  }

  // string cascade_path = 4;
  if (this->cascade_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->cascade_path().data(), static_cast<int>(this->cascade_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FaceDetectConfig.cascade_path");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->cascade_path(), target);
  }

  // float min_size = 5;
  if (!(this->min_size() <= 0 && this->min_size() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->min_size(), target);
  }

  // .BBoxCropConfig bbox_crop = 6;
  if (this->has_bbox_crop()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::bbox_crop(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FaceDetectConfig)
  return target;
}

size_t FaceDetectConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FaceDetectConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->type());
  }

  // string spire_config = 2;
  if (this->spire_config().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->spire_config());
  }

  // string cascade_path = 4;
  if (this->cascade_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->cascade_path());
  }

  // .BBoxCropConfig bbox_crop = 6;
  if (this->has_bbox_crop()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bbox_crop_);
  }

  // float detect_threshold = 3;
  if (!(this->detect_threshold() <= 0 && this->detect_threshold() >= 0)) {
    total_size += 1 + 4;
  }

  // float min_size = 5;
  if (!(this->min_size() <= 0 && this->min_size() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FaceDetectConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FaceDetectConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const FaceDetectConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FaceDetectConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FaceDetectConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FaceDetectConfig)
    MergeFrom(*source);
  }
}

void FaceDetectConfig::MergeFrom(const FaceDetectConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FaceDetectConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.spire_config().size() > 0) {

    spire_config_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.spire_config_);
  }
  if (from.cascade_path().size() > 0) {

    cascade_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cascade_path_);
  }
  if (from.has_bbox_crop()) {
    mutable_bbox_crop()->::BBoxCropConfig::MergeFrom(from.bbox_crop());
  }
  if (!(from.detect_threshold() <= 0 && from.detect_threshold() >= 0)) {
    set_detect_threshold(from.detect_threshold());
  }
  if (!(from.min_size() <= 0 && from.min_size() >= 0)) {
    set_min_size(from.min_size());
  }
}

void FaceDetectConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FaceDetectConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceDetectConfig::CopyFrom(const FaceDetectConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FaceDetectConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceDetectConfig::IsInitialized() const {
  return true;
}

void FaceDetectConfig::InternalSwap(FaceDetectConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  spire_config_.Swap(&other->spire_config_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cascade_path_.Swap(&other->cascade_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(bbox_crop_, other->bbox_crop_);
  swap(detect_threshold_, other->detect_threshold_);
  swap(min_size_, other->min_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FaceDetectConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BBoxCropConfig::InitAsDefaultInstance() {
}
class BBoxCropConfig::_Internal {
 public:
};

BBoxCropConfig::BBoxCropConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BBoxCropConfig)
}
BBoxCropConfig::BBoxCropConfig(const BBoxCropConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.type().empty()) {
    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  margin_ = from.margin_;
  // @@protoc_insertion_point(copy_constructor:BBoxCropConfig)
}

void BBoxCropConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BBoxCropConfig_proto_2fspire_2fspire_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  margin_ = 0;
}

BBoxCropConfig::~BBoxCropConfig() {
  // @@protoc_insertion_point(destructor:BBoxCropConfig)
  SharedDtor();
}

void BBoxCropConfig::SharedDtor() {
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BBoxCropConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BBoxCropConfig& BBoxCropConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BBoxCropConfig_proto_2fspire_2fspire_2eproto.base);
  return *internal_default_instance();
}


void BBoxCropConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:BBoxCropConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  margin_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BBoxCropConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_type(), ptr, ctx, "BBoxCropConfig.type");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float margin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          margin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BBoxCropConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:BBoxCropConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), static_cast<int>(this->type().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "BBoxCropConfig.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float margin = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &margin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BBoxCropConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BBoxCropConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BBoxCropConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BBoxCropConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BBoxCropConfig.type");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // float margin = 2;
  if (!(this->margin() <= 0 && this->margin() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->margin(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BBoxCropConfig)
}

::PROTOBUF_NAMESPACE_ID::uint8* BBoxCropConfig::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BBoxCropConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BBoxCropConfig.type");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // float margin = 2;
  if (!(this->margin() <= 0 && this->margin() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->margin(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BBoxCropConfig)
  return target;
}

size_t BBoxCropConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BBoxCropConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->type());
  }

  // float margin = 2;
  if (!(this->margin() <= 0 && this->margin() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BBoxCropConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BBoxCropConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const BBoxCropConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BBoxCropConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BBoxCropConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BBoxCropConfig)
    MergeFrom(*source);
  }
}

void BBoxCropConfig::MergeFrom(const BBoxCropConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BBoxCropConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (!(from.margin() <= 0 && from.margin() >= 0)) {
    set_margin(from.margin());
  }
}

void BBoxCropConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BBoxCropConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BBoxCropConfig::CopyFrom(const BBoxCropConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BBoxCropConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BBoxCropConfig::IsInitialized() const {
  return true;
}

void BBoxCropConfig::InternalSwap(BBoxCropConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(margin_, other->margin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BBoxCropConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiHeadConfig::InitAsDefaultInstance() {
  ::_MultiHeadConfig_default_instance_._instance.get_mutable()->vocab_ = const_cast< ::Vocab*>(
      ::Vocab::internal_default_instance());
}
class MultiHeadConfig::_Internal {
 public:
  static const ::Vocab& vocab(const MultiHeadConfig* msg);
};

const ::Vocab&
MultiHeadConfig::_Internal::vocab(const MultiHeadConfig* msg) {
  return *msg->vocab_;
}
void MultiHeadConfig::clear_vocab() {
  if (GetArenaNoVirtual() == nullptr && vocab_ != nullptr) {
    delete vocab_;
  }
  vocab_ = nullptr;
}
MultiHeadConfig::MultiHeadConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MultiHeadConfig)
}
MultiHeadConfig::MultiHeadConfig(const MultiHeadConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dataset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.dataset().empty()) {
    dataset_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dataset_);
  }
  face_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.face_key().empty()) {
    face_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.face_key_);
  }
  if (from.has_vocab()) {
    vocab_ = new ::Vocab(*from.vocab_);
  } else {
    vocab_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:MultiHeadConfig)
}

void MultiHeadConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiHeadConfig_proto_2fspire_2fspire_2eproto.base);
  dataset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  face_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vocab_ = nullptr;
}

MultiHeadConfig::~MultiHeadConfig() {
  // @@protoc_insertion_point(destructor:MultiHeadConfig)
  SharedDtor();
}

void MultiHeadConfig::SharedDtor() {
  dataset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  face_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete vocab_;
}

void MultiHeadConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiHeadConfig& MultiHeadConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiHeadConfig_proto_2fspire_2fspire_2eproto.base);
  return *internal_default_instance();
}


void MultiHeadConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:MultiHeadConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dataset_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  face_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && vocab_ != nullptr) {
    delete vocab_;
  }
  vocab_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MultiHeadConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string dataset = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_dataset(), ptr, ctx, "MultiHeadConfig.dataset");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string face_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_face_key(), ptr, ctx, "MultiHeadConfig.face_key");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Vocab vocab = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_vocab(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MultiHeadConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:MultiHeadConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string dataset = 1 [deprecated = true];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_dataset()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->dataset().data(), static_cast<int>(this->dataset().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "MultiHeadConfig.dataset"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string face_key = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_face_key()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->face_key().data(), static_cast<int>(this->face_key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "MultiHeadConfig.face_key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Vocab vocab = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_vocab()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MultiHeadConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MultiHeadConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MultiHeadConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MultiHeadConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dataset = 1 [deprecated = true];
  if (this->dataset().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->dataset().data(), static_cast<int>(this->dataset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MultiHeadConfig.dataset");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->dataset(), output);
  }

  // string face_key = 2;
  if (this->face_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->face_key().data(), static_cast<int>(this->face_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MultiHeadConfig.face_key");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->face_key(), output);
  }

  // .Vocab vocab = 3;
  if (this->has_vocab()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::vocab(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MultiHeadConfig)
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiHeadConfig::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MultiHeadConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dataset = 1 [deprecated = true];
  if (this->dataset().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->dataset().data(), static_cast<int>(this->dataset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MultiHeadConfig.dataset");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->dataset(), target);
  }

  // string face_key = 2;
  if (this->face_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->face_key().data(), static_cast<int>(this->face_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MultiHeadConfig.face_key");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->face_key(), target);
  }

  // .Vocab vocab = 3;
  if (this->has_vocab()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::vocab(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MultiHeadConfig)
  return target;
}

size_t MultiHeadConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MultiHeadConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dataset = 1 [deprecated = true];
  if (this->dataset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->dataset());
  }

  // string face_key = 2;
  if (this->face_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->face_key());
  }

  // .Vocab vocab = 3;
  if (this->has_vocab()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vocab_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiHeadConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MultiHeadConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiHeadConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiHeadConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MultiHeadConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MultiHeadConfig)
    MergeFrom(*source);
  }
}

void MultiHeadConfig::MergeFrom(const MultiHeadConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MultiHeadConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dataset().size() > 0) {

    dataset_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dataset_);
  }
  if (from.face_key().size() > 0) {

    face_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.face_key_);
  }
  if (from.has_vocab()) {
    mutable_vocab()->::Vocab::MergeFrom(from.vocab());
  }
}

void MultiHeadConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MultiHeadConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiHeadConfig::CopyFrom(const MultiHeadConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MultiHeadConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiHeadConfig::IsInitialized() const {
  return true;
}

void MultiHeadConfig::InternalSwap(MultiHeadConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  dataset_.Swap(&other->dataset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  face_key_.Swap(&other->face_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(vocab_, other->vocab_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiHeadConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

SpireConfig_HeadsEntry_DoNotUse::SpireConfig_HeadsEntry_DoNotUse() {}
SpireConfig_HeadsEntry_DoNotUse::SpireConfig_HeadsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SpireConfig_HeadsEntry_DoNotUse::MergeFrom(const SpireConfig_HeadsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SpireConfig_HeadsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void SpireConfig_HeadsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

SpireConfig_CpuResourcesEntry_DoNotUse::SpireConfig_CpuResourcesEntry_DoNotUse() {}
SpireConfig_CpuResourcesEntry_DoNotUse::SpireConfig_CpuResourcesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SpireConfig_CpuResourcesEntry_DoNotUse::MergeFrom(const SpireConfig_CpuResourcesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SpireConfig_CpuResourcesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void SpireConfig_CpuResourcesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

SpireConfig_ReplicasEntry_DoNotUse::SpireConfig_ReplicasEntry_DoNotUse() {}
SpireConfig_ReplicasEntry_DoNotUse::SpireConfig_ReplicasEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SpireConfig_ReplicasEntry_DoNotUse::MergeFrom(const SpireConfig_ReplicasEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SpireConfig_ReplicasEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void SpireConfig_ReplicasEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void SpireConfig::InitAsDefaultInstance() {
  ::_SpireConfig_default_instance_._instance.get_mutable()->face_detect_ = const_cast< ::FaceDetectConfig*>(
      ::FaceDetectConfig::internal_default_instance());
  ::_SpireConfig_default_instance_._instance.get_mutable()->meta_ = const_cast< ::SpireMeta*>(
      ::SpireMeta::internal_default_instance());
  ::_SpireConfig_default_instance_._instance.get_mutable()->data_provider_params_ = const_cast< ::DataProviderParams*>(
      ::DataProviderParams::internal_default_instance());
}
class SpireConfig::_Internal {
 public:
  static const ::FaceDetectConfig& face_detect(const SpireConfig* msg);
  static const ::SpireMeta& meta(const SpireConfig* msg);
  static const ::DataProviderParams& data_provider_params(const SpireConfig* msg);
};

const ::FaceDetectConfig&
SpireConfig::_Internal::face_detect(const SpireConfig* msg) {
  return *msg->face_detect_;
}
const ::SpireMeta&
SpireConfig::_Internal::meta(const SpireConfig* msg) {
  return *msg->meta_;
}
const ::DataProviderParams&
SpireConfig::_Internal::data_provider_params(const SpireConfig* msg) {
  return *msg->data_provider_params_;
}
void SpireConfig::clear_data_provider_params() {
  if (GetArenaNoVirtual() == nullptr && data_provider_params_ != nullptr) {
    delete data_provider_params_;
  }
  data_provider_params_ = nullptr;
}
void SpireConfig::clear_load_checkpoint_scopes() {
  load_checkpoint_scopes_.Clear();
}
SpireConfig::SpireConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SpireConfig)
}
SpireConfig::SpireConfig(const SpireConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      embedding_layer_names_(from.embedding_layer_names_),
      load_checkpoint_scopes_(from.load_checkpoint_scopes_),
      landmark_points_(from.landmark_points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  heads_.MergeFrom(from.heads_);
  cpu_resources_.MergeFrom(from.cpu_resources_);
  replicas_.MergeFrom(from.replicas_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  exp_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.exp_type().empty()) {
    exp_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.exp_type_);
  }
  dataset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.dataset().empty()) {
    dataset_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dataset_);
  }
  device_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.device_type().empty()) {
    device_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_type_);
  }
  detection_layer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.detection_layer_name().empty()) {
    detection_layer_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.detection_layer_name_);
  }
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.uuid().empty()) {
    uuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  embeddings_spire_conf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.embeddings_spire_conf().empty()) {
    embeddings_spire_conf_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.embeddings_spire_conf_);
  }
  landmarks_spire_conf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.landmarks_spire_conf().empty()) {
    landmarks_spire_conf_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.landmarks_spire_conf_);
  }
  if (from.has_face_detect()) {
    face_detect_ = new ::FaceDetectConfig(*from.face_detect_);
  } else {
    face_detect_ = nullptr;
  }
  if (from.has_meta()) {
    meta_ = new ::SpireMeta(*from.meta_);
  } else {
    meta_ = nullptr;
  }
  if (from.has_data_provider_params()) {
    data_provider_params_ = new ::DataProviderParams(*from.data_provider_params_);
  } else {
    data_provider_params_ = nullptr;
  }
  ::memcpy(&eid_, &from.eid_,
    static_cast<size_t>(reinterpret_cast<char*>(&model_framework_) -
    reinterpret_cast<char*>(&eid_)) + sizeof(model_framework_));
  // @@protoc_insertion_point(copy_constructor:SpireConfig)
}

void SpireConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpireConfig_proto_2fspire_2fspire_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exp_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dataset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  detection_layer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  embeddings_spire_conf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  landmarks_spire_conf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&face_detect_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&model_framework_) -
      reinterpret_cast<char*>(&face_detect_)) + sizeof(model_framework_));
}

SpireConfig::~SpireConfig() {
  // @@protoc_insertion_point(destructor:SpireConfig)
  SharedDtor();
}

void SpireConfig::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exp_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dataset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  detection_layer_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  embeddings_spire_conf_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  landmarks_spire_conf_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete face_detect_;
  if (this != internal_default_instance()) delete meta_;
  if (this != internal_default_instance()) delete data_provider_params_;
}

void SpireConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpireConfig& SpireConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpireConfig_proto_2fspire_2fspire_2eproto.base);
  return *internal_default_instance();
}


void SpireConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:SpireConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  embedding_layer_names_.Clear();
  heads_.Clear();
  load_checkpoint_scopes_.Clear();
  cpu_resources_.Clear();
  replicas_.Clear();
  landmark_points_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exp_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dataset_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  detection_layer_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  embeddings_spire_conf_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  landmarks_spire_conf_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && face_detect_ != nullptr) {
    delete face_detect_;
  }
  face_detect_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && data_provider_params_ != nullptr) {
    delete data_provider_params_;
  }
  data_provider_params_ = nullptr;
  ::memset(&eid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&model_framework_) -
      reinterpret_cast<char*>(&eid_)) + sizeof(model_framework_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SpireConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "SpireConfig.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 eid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          eid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string exp_type = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_exp_type(), ptr, ctx, "SpireConfig.exp_type");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string dataset = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_dataset(), ptr, ctx, "SpireConfig.dataset");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 gpu_memory = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          gpu_memory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gpu_batch_size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          gpu_batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_device_type(), ptr, ctx, "SpireConfig.device_type");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_devices = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          num_devices_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string detection_layer_name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_detection_layer_name(), ptr, ctx, "SpireConfig.detection_layer_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float detection_score_threshold = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          detection_score_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated string embedding_layer_names = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_embedding_layer_names(), ptr, ctx, "SpireConfig.embedding_layer_names");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 90);
        } else goto handle_unusual;
        continue;
      // bool is_multiheaded = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          is_multiheaded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .MultiHeadConfig> heads = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&heads_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 106);
        } else goto handle_unusual;
        continue;
      // .FaceDetectConfig face_detect = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_face_detect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SpireMeta meta = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DataProviderParams data_provider_params = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_data_provider_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .LoadCheckpointScope load_checkpoint_scopes = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_load_checkpoint_scopes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 394);
        } else goto handle_unusual;
        continue;
      // float timestamp_ms = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .SpireModelType model_type = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_model_type(static_cast<::SpireModelType>(val));
        } else goto handle_unusual;
        continue;
      // int64 compatibility_version_id = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          compatibility_version_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string uuid = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_uuid(), ptr, ctx, "SpireConfig.uuid");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SpireSpatialReduceType spatial_reduce_type = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_spatial_reduce_type(static_cast<::SpireSpatialReduceType>(val));
        } else goto handle_unusual;
        continue;
      // map<string, .CPUResources> cpu_resources = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&cpu_resources_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 442);
        } else goto handle_unusual;
        continue;
      // map<string, .Replicas> replicas = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&replicas_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 450);
        } else goto handle_unusual;
        continue;
      // string embeddings_spire_conf = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_embeddings_spire_conf(), ptr, ctx, "SpireConfig.embeddings_spire_conf");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 detection_max_bboxes = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          detection_max_bboxes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SpireConfig.Framework model_framework = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_model_framework(static_cast<::SpireConfig_Framework>(val));
        } else goto handle_unusual;
        continue;
      // string landmarks_spire_conf = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_landmarks_spire_conf(), ptr, ctx, "SpireConfig.landmarks_spire_conf");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string landmark_points = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_landmark_points(), ptr, ctx, "SpireConfig.landmark_points");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 490);
        } else goto handle_unusual;
        continue;
      // bool denoise_video_embeddings = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          denoise_video_embeddings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SpireConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SpireConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "SpireConfig.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 eid = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &eid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string exp_type = 3 [deprecated = true];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_exp_type()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->exp_type().data(), static_cast<int>(this->exp_type().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "SpireConfig.exp_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dataset = 4 [deprecated = true];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_dataset()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->dataset().data(), static_cast<int>(this->dataset().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "SpireConfig.dataset"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 gpu_memory = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &gpu_memory_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 gpu_batch_size = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &gpu_batch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string device_type = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_device_type()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->device_type().data(), static_cast<int>(this->device_type().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "SpireConfig.device_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_devices = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_devices_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string detection_layer_name = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_detection_layer_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->detection_layer_name().data(), static_cast<int>(this->detection_layer_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "SpireConfig.detection_layer_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float detection_score_threshold = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (85 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &detection_score_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string embedding_layer_names = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_embedding_layer_names()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->embedding_layer_names(this->embedding_layer_names_size() - 1).data(),
            static_cast<int>(this->embedding_layer_names(this->embedding_layer_names_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "SpireConfig.embedding_layer_names"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_multiheaded = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_multiheaded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .MultiHeadConfig> heads = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          SpireConfig_HeadsEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              SpireConfig_HeadsEntry_DoNotUse,
              std::string, ::MultiHeadConfig,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::MultiHeadConfig > > parser(&heads_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "SpireConfig.HeadsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .FaceDetectConfig face_detect = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_face_detect()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .SpireMeta meta = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_meta()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DataProviderParams data_provider_params = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_data_provider_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .LoadCheckpointScope load_checkpoint_scopes = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_load_checkpoint_scopes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float timestamp_ms = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (149 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .SpireModelType model_type = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_model_type(static_cast< ::SpireModelType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 compatibility_version_id = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (160 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &compatibility_version_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string uuid = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (170 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->uuid().data(), static_cast<int>(this->uuid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "SpireConfig.uuid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .SpireSpatialReduceType spatial_reduce_type = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (176 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_spatial_reduce_type(static_cast< ::SpireSpatialReduceType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .CPUResources> cpu_resources = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (186 & 0xFF)) {
          SpireConfig_CpuResourcesEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              SpireConfig_CpuResourcesEntry_DoNotUse,
              std::string, ::CPUResources,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::CPUResources > > parser(&cpu_resources_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "SpireConfig.CpuResourcesEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .Replicas> replicas = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (194 & 0xFF)) {
          SpireConfig_ReplicasEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              SpireConfig_ReplicasEntry_DoNotUse,
              std::string, ::Replicas,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Replicas > > parser(&replicas_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "SpireConfig.ReplicasEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string embeddings_spire_conf = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (202 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_embeddings_spire_conf()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->embeddings_spire_conf().data(), static_cast<int>(this->embeddings_spire_conf().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "SpireConfig.embeddings_spire_conf"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 detection_max_bboxes = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (208 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &detection_max_bboxes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .SpireConfig.Framework model_framework = 27;
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (216 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_model_framework(static_cast< ::SpireConfig_Framework >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string landmarks_spire_conf = 28;
      case 28: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (226 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_landmarks_spire_conf()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->landmarks_spire_conf().data(), static_cast<int>(this->landmarks_spire_conf().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "SpireConfig.landmarks_spire_conf"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string landmark_points = 29;
      case 29: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (234 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_landmark_points()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->landmark_points(this->landmark_points_size() - 1).data(),
            static_cast<int>(this->landmark_points(this->landmark_points_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "SpireConfig.landmark_points"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool denoise_video_embeddings = 30;
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (240 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &denoise_video_embeddings_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SpireConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SpireConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SpireConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SpireConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SpireConfig.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // int64 eid = 2;
  if (this->eid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->eid(), output);
  }

  // string exp_type = 3 [deprecated = true];
  if (this->exp_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->exp_type().data(), static_cast<int>(this->exp_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SpireConfig.exp_type");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->exp_type(), output);
  }

  // string dataset = 4 [deprecated = true];
  if (this->dataset().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->dataset().data(), static_cast<int>(this->dataset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SpireConfig.dataset");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->dataset(), output);
  }

  // int64 gpu_memory = 5;
  if (this->gpu_memory() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->gpu_memory(), output);
  }

  // int32 gpu_batch_size = 6;
  if (this->gpu_batch_size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->gpu_batch_size(), output);
  }

  // string device_type = 7;
  if (this->device_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->device_type().data(), static_cast<int>(this->device_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SpireConfig.device_type");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->device_type(), output);
  }

  // int32 num_devices = 8;
  if (this->num_devices() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->num_devices(), output);
  }

  // string detection_layer_name = 9;
  if (this->detection_layer_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->detection_layer_name().data(), static_cast<int>(this->detection_layer_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SpireConfig.detection_layer_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->detection_layer_name(), output);
  }

  // float detection_score_threshold = 10;
  if (!(this->detection_score_threshold() <= 0 && this->detection_score_threshold() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(10, this->detection_score_threshold(), output);
  }

  // repeated string embedding_layer_names = 11;
  for (int i = 0, n = this->embedding_layer_names_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->embedding_layer_names(i).data(), static_cast<int>(this->embedding_layer_names(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SpireConfig.embedding_layer_names");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      11, this->embedding_layer_names(i), output);
  }

  // bool is_multiheaded = 12;
  if (this->is_multiheaded() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(12, this->is_multiheaded(), output);
  }

  // map<string, .MultiHeadConfig> heads = 13;
  if (!this->heads().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::MultiHeadConfig >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "SpireConfig.HeadsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->heads().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->heads().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::MultiHeadConfig >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::MultiHeadConfig >::const_iterator
          it = this->heads().begin();
          it != this->heads().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        SpireConfig_HeadsEntry_DoNotUse::Funcs::SerializeToCodedStream(13, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::MultiHeadConfig >::const_iterator
          it = this->heads().begin();
          it != this->heads().end(); ++it) {
        SpireConfig_HeadsEntry_DoNotUse::Funcs::SerializeToCodedStream(13, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .FaceDetectConfig face_detect = 14;
  if (this->has_face_detect()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, _Internal::face_detect(this), output);
  }

  // .SpireMeta meta = 15;
  if (this->has_meta()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, _Internal::meta(this), output);
  }

  // .DataProviderParams data_provider_params = 16;
  if (this->has_data_provider_params()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, _Internal::data_provider_params(this), output);
  }

  // repeated .LoadCheckpointScope load_checkpoint_scopes = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->load_checkpoint_scopes_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      17,
      this->load_checkpoint_scopes(static_cast<int>(i)),
      output);
  }

  // float timestamp_ms = 18;
  if (!(this->timestamp_ms() <= 0 && this->timestamp_ms() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(18, this->timestamp_ms(), output);
  }

  // .SpireModelType model_type = 19;
  if (this->model_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      19, this->model_type(), output);
  }

  // int64 compatibility_version_id = 20;
  if (this->compatibility_version_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(20, this->compatibility_version_id(), output);
  }

  // string uuid = 21;
  if (this->uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), static_cast<int>(this->uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SpireConfig.uuid");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->uuid(), output);
  }

  // .SpireSpatialReduceType spatial_reduce_type = 22;
  if (this->spatial_reduce_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      22, this->spatial_reduce_type(), output);
  }

  // map<string, .CPUResources> cpu_resources = 23;
  if (!this->cpu_resources().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::CPUResources >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "SpireConfig.CpuResourcesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->cpu_resources().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->cpu_resources().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::CPUResources >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::CPUResources >::const_iterator
          it = this->cpu_resources().begin();
          it != this->cpu_resources().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        SpireConfig_CpuResourcesEntry_DoNotUse::Funcs::SerializeToCodedStream(23, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::CPUResources >::const_iterator
          it = this->cpu_resources().begin();
          it != this->cpu_resources().end(); ++it) {
        SpireConfig_CpuResourcesEntry_DoNotUse::Funcs::SerializeToCodedStream(23, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .Replicas> replicas = 24;
  if (!this->replicas().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Replicas >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "SpireConfig.ReplicasEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->replicas().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->replicas().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Replicas >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Replicas >::const_iterator
          it = this->replicas().begin();
          it != this->replicas().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        SpireConfig_ReplicasEntry_DoNotUse::Funcs::SerializeToCodedStream(24, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Replicas >::const_iterator
          it = this->replicas().begin();
          it != this->replicas().end(); ++it) {
        SpireConfig_ReplicasEntry_DoNotUse::Funcs::SerializeToCodedStream(24, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // string embeddings_spire_conf = 25;
  if (this->embeddings_spire_conf().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->embeddings_spire_conf().data(), static_cast<int>(this->embeddings_spire_conf().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SpireConfig.embeddings_spire_conf");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->embeddings_spire_conf(), output);
  }

  // int32 detection_max_bboxes = 26;
  if (this->detection_max_bboxes() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(26, this->detection_max_bboxes(), output);
  }

  // .SpireConfig.Framework model_framework = 27;
  if (this->model_framework() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      27, this->model_framework(), output);
  }

  // string landmarks_spire_conf = 28;
  if (this->landmarks_spire_conf().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->landmarks_spire_conf().data(), static_cast<int>(this->landmarks_spire_conf().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SpireConfig.landmarks_spire_conf");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      28, this->landmarks_spire_conf(), output);
  }

  // repeated string landmark_points = 29;
  for (int i = 0, n = this->landmark_points_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->landmark_points(i).data(), static_cast<int>(this->landmark_points(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SpireConfig.landmark_points");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      29, this->landmark_points(i), output);
  }

  // bool denoise_video_embeddings = 30;
  if (this->denoise_video_embeddings() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(30, this->denoise_video_embeddings(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SpireConfig)
}

::PROTOBUF_NAMESPACE_ID::uint8* SpireConfig::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpireConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SpireConfig.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // int64 eid = 2;
  if (this->eid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->eid(), target);
  }

  // string exp_type = 3 [deprecated = true];
  if (this->exp_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->exp_type().data(), static_cast<int>(this->exp_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SpireConfig.exp_type");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->exp_type(), target);
  }

  // string dataset = 4 [deprecated = true];
  if (this->dataset().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->dataset().data(), static_cast<int>(this->dataset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SpireConfig.dataset");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->dataset(), target);
  }

  // int64 gpu_memory = 5;
  if (this->gpu_memory() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->gpu_memory(), target);
  }

  // int32 gpu_batch_size = 6;
  if (this->gpu_batch_size() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->gpu_batch_size(), target);
  }

  // string device_type = 7;
  if (this->device_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->device_type().data(), static_cast<int>(this->device_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SpireConfig.device_type");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        7, this->device_type(), target);
  }

  // int32 num_devices = 8;
  if (this->num_devices() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->num_devices(), target);
  }

  // string detection_layer_name = 9;
  if (this->detection_layer_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->detection_layer_name().data(), static_cast<int>(this->detection_layer_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SpireConfig.detection_layer_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        9, this->detection_layer_name(), target);
  }

  // float detection_score_threshold = 10;
  if (!(this->detection_score_threshold() <= 0 && this->detection_score_threshold() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->detection_score_threshold(), target);
  }

  // repeated string embedding_layer_names = 11;
  for (int i = 0, n = this->embedding_layer_names_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->embedding_layer_names(i).data(), static_cast<int>(this->embedding_layer_names(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SpireConfig.embedding_layer_names");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(11, this->embedding_layer_names(i), target);
  }

  // bool is_multiheaded = 12;
  if (this->is_multiheaded() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->is_multiheaded(), target);
  }

  // map<string, .MultiHeadConfig> heads = 13;
  if (!this->heads().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::MultiHeadConfig >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "SpireConfig.HeadsEntry.key");
      }
    };

    if (false &&
        this->heads().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->heads().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::MultiHeadConfig >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::MultiHeadConfig >::const_iterator
          it = this->heads().begin();
          it != this->heads().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SpireConfig_HeadsEntry_DoNotUse::Funcs::SerializeToArray(13, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::MultiHeadConfig >::const_iterator
          it = this->heads().begin();
          it != this->heads().end(); ++it) {
        target = SpireConfig_HeadsEntry_DoNotUse::Funcs::SerializeToArray(13, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .FaceDetectConfig face_detect = 14;
  if (this->has_face_detect()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, _Internal::face_detect(this), target);
  }

  // .SpireMeta meta = 15;
  if (this->has_meta()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, _Internal::meta(this), target);
  }

  // .DataProviderParams data_provider_params = 16;
  if (this->has_data_provider_params()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, _Internal::data_provider_params(this), target);
  }

  // repeated .LoadCheckpointScope load_checkpoint_scopes = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->load_checkpoint_scopes_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, this->load_checkpoint_scopes(static_cast<int>(i)), target);
  }

  // float timestamp_ms = 18;
  if (!(this->timestamp_ms() <= 0 && this->timestamp_ms() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(18, this->timestamp_ms(), target);
  }

  // .SpireModelType model_type = 19;
  if (this->model_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      19, this->model_type(), target);
  }

  // int64 compatibility_version_id = 20;
  if (this->compatibility_version_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(20, this->compatibility_version_id(), target);
  }

  // string uuid = 21;
  if (this->uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), static_cast<int>(this->uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SpireConfig.uuid");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        21, this->uuid(), target);
  }

  // .SpireSpatialReduceType spatial_reduce_type = 22;
  if (this->spatial_reduce_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      22, this->spatial_reduce_type(), target);
  }

  // map<string, .CPUResources> cpu_resources = 23;
  if (!this->cpu_resources().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::CPUResources >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "SpireConfig.CpuResourcesEntry.key");
      }
    };

    if (false &&
        this->cpu_resources().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->cpu_resources().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::CPUResources >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::CPUResources >::const_iterator
          it = this->cpu_resources().begin();
          it != this->cpu_resources().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SpireConfig_CpuResourcesEntry_DoNotUse::Funcs::SerializeToArray(23, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::CPUResources >::const_iterator
          it = this->cpu_resources().begin();
          it != this->cpu_resources().end(); ++it) {
        target = SpireConfig_CpuResourcesEntry_DoNotUse::Funcs::SerializeToArray(23, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .Replicas> replicas = 24;
  if (!this->replicas().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Replicas >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "SpireConfig.ReplicasEntry.key");
      }
    };

    if (false &&
        this->replicas().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->replicas().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Replicas >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Replicas >::const_iterator
          it = this->replicas().begin();
          it != this->replicas().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SpireConfig_ReplicasEntry_DoNotUse::Funcs::SerializeToArray(24, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Replicas >::const_iterator
          it = this->replicas().begin();
          it != this->replicas().end(); ++it) {
        target = SpireConfig_ReplicasEntry_DoNotUse::Funcs::SerializeToArray(24, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // string embeddings_spire_conf = 25;
  if (this->embeddings_spire_conf().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->embeddings_spire_conf().data(), static_cast<int>(this->embeddings_spire_conf().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SpireConfig.embeddings_spire_conf");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        25, this->embeddings_spire_conf(), target);
  }

  // int32 detection_max_bboxes = 26;
  if (this->detection_max_bboxes() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(26, this->detection_max_bboxes(), target);
  }

  // .SpireConfig.Framework model_framework = 27;
  if (this->model_framework() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      27, this->model_framework(), target);
  }

  // string landmarks_spire_conf = 28;
  if (this->landmarks_spire_conf().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->landmarks_spire_conf().data(), static_cast<int>(this->landmarks_spire_conf().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SpireConfig.landmarks_spire_conf");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        28, this->landmarks_spire_conf(), target);
  }

  // repeated string landmark_points = 29;
  for (int i = 0, n = this->landmark_points_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->landmark_points(i).data(), static_cast<int>(this->landmark_points(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SpireConfig.landmark_points");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(29, this->landmark_points(i), target);
  }

  // bool denoise_video_embeddings = 30;
  if (this->denoise_video_embeddings() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(30, this->denoise_video_embeddings(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpireConfig)
  return target;
}

size_t SpireConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpireConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string embedding_layer_names = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->embedding_layer_names_size());
  for (int i = 0, n = this->embedding_layer_names_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->embedding_layer_names(i));
  }

  // map<string, .MultiHeadConfig> heads = 13;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->heads_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::MultiHeadConfig >::const_iterator
      it = this->heads().begin();
      it != this->heads().end(); ++it) {
    total_size += SpireConfig_HeadsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .LoadCheckpointScope load_checkpoint_scopes = 17;
  {
    unsigned int count = static_cast<unsigned int>(this->load_checkpoint_scopes_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->load_checkpoint_scopes(static_cast<int>(i)));
    }
  }

  // map<string, .CPUResources> cpu_resources = 23;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->cpu_resources_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::CPUResources >::const_iterator
      it = this->cpu_resources().begin();
      it != this->cpu_resources().end(); ++it) {
    total_size += SpireConfig_CpuResourcesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .Replicas> replicas = 24;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->replicas_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Replicas >::const_iterator
      it = this->replicas().begin();
      it != this->replicas().end(); ++it) {
    total_size += SpireConfig_ReplicasEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated string landmark_points = 29;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->landmark_points_size());
  for (int i = 0, n = this->landmark_points_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->landmark_points(i));
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string exp_type = 3 [deprecated = true];
  if (this->exp_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->exp_type());
  }

  // string dataset = 4 [deprecated = true];
  if (this->dataset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->dataset());
  }

  // string device_type = 7;
  if (this->device_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->device_type());
  }

  // string detection_layer_name = 9;
  if (this->detection_layer_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->detection_layer_name());
  }

  // string uuid = 21;
  if (this->uuid().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->uuid());
  }

  // string embeddings_spire_conf = 25;
  if (this->embeddings_spire_conf().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->embeddings_spire_conf());
  }

  // string landmarks_spire_conf = 28;
  if (this->landmarks_spire_conf().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->landmarks_spire_conf());
  }

  // .FaceDetectConfig face_detect = 14;
  if (this->has_face_detect()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *face_detect_);
  }

  // .SpireMeta meta = 15;
  if (this->has_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meta_);
  }

  // .DataProviderParams data_provider_params = 16;
  if (this->has_data_provider_params()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_provider_params_);
  }

  // int64 eid = 2;
  if (this->eid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->eid());
  }

  // int64 gpu_memory = 5;
  if (this->gpu_memory() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->gpu_memory());
  }

  // int32 gpu_batch_size = 6;
  if (this->gpu_batch_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->gpu_batch_size());
  }

  // int32 num_devices = 8;
  if (this->num_devices() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->num_devices());
  }

  // float detection_score_threshold = 10;
  if (!(this->detection_score_threshold() <= 0 && this->detection_score_threshold() >= 0)) {
    total_size += 1 + 4;
  }

  // float timestamp_ms = 18;
  if (!(this->timestamp_ms() <= 0 && this->timestamp_ms() >= 0)) {
    total_size += 2 + 4;
  }

  // int64 compatibility_version_id = 20;
  if (this->compatibility_version_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->compatibility_version_id());
  }

  // .SpireModelType model_type = 19;
  if (this->model_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->model_type());
  }

  // bool denoise_video_embeddings = 30;
  if (this->denoise_video_embeddings() != 0) {
    total_size += 2 + 1;
  }

  // bool is_multiheaded = 12;
  if (this->is_multiheaded() != 0) {
    total_size += 1 + 1;
  }

  // .SpireSpatialReduceType spatial_reduce_type = 22;
  if (this->spatial_reduce_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->spatial_reduce_type());
  }

  // int32 detection_max_bboxes = 26;
  if (this->detection_max_bboxes() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->detection_max_bboxes());
  }

  // .SpireConfig.Framework model_framework = 27;
  if (this->model_framework() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->model_framework());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpireConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpireConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const SpireConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpireConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpireConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpireConfig)
    MergeFrom(*source);
  }
}

void SpireConfig::MergeFrom(const SpireConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpireConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  embedding_layer_names_.MergeFrom(from.embedding_layer_names_);
  heads_.MergeFrom(from.heads_);
  load_checkpoint_scopes_.MergeFrom(from.load_checkpoint_scopes_);
  cpu_resources_.MergeFrom(from.cpu_resources_);
  replicas_.MergeFrom(from.replicas_);
  landmark_points_.MergeFrom(from.landmark_points_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.exp_type().size() > 0) {

    exp_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.exp_type_);
  }
  if (from.dataset().size() > 0) {

    dataset_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dataset_);
  }
  if (from.device_type().size() > 0) {

    device_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_type_);
  }
  if (from.detection_layer_name().size() > 0) {

    detection_layer_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.detection_layer_name_);
  }
  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.embeddings_spire_conf().size() > 0) {

    embeddings_spire_conf_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.embeddings_spire_conf_);
  }
  if (from.landmarks_spire_conf().size() > 0) {

    landmarks_spire_conf_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.landmarks_spire_conf_);
  }
  if (from.has_face_detect()) {
    mutable_face_detect()->::FaceDetectConfig::MergeFrom(from.face_detect());
  }
  if (from.has_meta()) {
    mutable_meta()->::SpireMeta::MergeFrom(from.meta());
  }
  if (from.has_data_provider_params()) {
    mutable_data_provider_params()->::DataProviderParams::MergeFrom(from.data_provider_params());
  }
  if (from.eid() != 0) {
    set_eid(from.eid());
  }
  if (from.gpu_memory() != 0) {
    set_gpu_memory(from.gpu_memory());
  }
  if (from.gpu_batch_size() != 0) {
    set_gpu_batch_size(from.gpu_batch_size());
  }
  if (from.num_devices() != 0) {
    set_num_devices(from.num_devices());
  }
  if (!(from.detection_score_threshold() <= 0 && from.detection_score_threshold() >= 0)) {
    set_detection_score_threshold(from.detection_score_threshold());
  }
  if (!(from.timestamp_ms() <= 0 && from.timestamp_ms() >= 0)) {
    set_timestamp_ms(from.timestamp_ms());
  }
  if (from.compatibility_version_id() != 0) {
    set_compatibility_version_id(from.compatibility_version_id());
  }
  if (from.model_type() != 0) {
    set_model_type(from.model_type());
  }
  if (from.denoise_video_embeddings() != 0) {
    set_denoise_video_embeddings(from.denoise_video_embeddings());
  }
  if (from.is_multiheaded() != 0) {
    set_is_multiheaded(from.is_multiheaded());
  }
  if (from.spatial_reduce_type() != 0) {
    set_spatial_reduce_type(from.spatial_reduce_type());
  }
  if (from.detection_max_bboxes() != 0) {
    set_detection_max_bboxes(from.detection_max_bboxes());
  }
  if (from.model_framework() != 0) {
    set_model_framework(from.model_framework());
  }
}

void SpireConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpireConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpireConfig::CopyFrom(const SpireConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpireConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpireConfig::IsInitialized() const {
  return true;
}

void SpireConfig::InternalSwap(SpireConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  embedding_layer_names_.InternalSwap(CastToBase(&other->embedding_layer_names_));
  heads_.Swap(&other->heads_);
  CastToBase(&load_checkpoint_scopes_)->InternalSwap(CastToBase(&other->load_checkpoint_scopes_));
  cpu_resources_.Swap(&other->cpu_resources_);
  replicas_.Swap(&other->replicas_);
  landmark_points_.InternalSwap(CastToBase(&other->landmark_points_));
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exp_type_.Swap(&other->exp_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  dataset_.Swap(&other->dataset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  device_type_.Swap(&other->device_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  detection_layer_name_.Swap(&other->detection_layer_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  uuid_.Swap(&other->uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  embeddings_spire_conf_.Swap(&other->embeddings_spire_conf_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  landmarks_spire_conf_.Swap(&other->landmarks_spire_conf_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(face_detect_, other->face_detect_);
  swap(meta_, other->meta_);
  swap(data_provider_params_, other->data_provider_params_);
  swap(eid_, other->eid_);
  swap(gpu_memory_, other->gpu_memory_);
  swap(gpu_batch_size_, other->gpu_batch_size_);
  swap(num_devices_, other->num_devices_);
  swap(detection_score_threshold_, other->detection_score_threshold_);
  swap(timestamp_ms_, other->timestamp_ms_);
  swap(compatibility_version_id_, other->compatibility_version_id_);
  swap(model_type_, other->model_type_);
  swap(denoise_video_embeddings_, other->denoise_video_embeddings_);
  swap(is_multiheaded_, other->is_multiheaded_);
  swap(spatial_reduce_type_, other->spatial_reduce_type_);
  swap(detection_max_bboxes_, other->detection_max_bboxes_);
  swap(model_framework_, other->model_framework_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpireConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Replicas::InitAsDefaultInstance() {
}
class Replicas::_Internal {
 public:
};

Replicas::Replicas()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Replicas)
}
Replicas::Replicas(const Replicas& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&minimum_, &from.minimum_,
    static_cast<size_t>(reinterpret_cast<char*>(&maximum_) -
    reinterpret_cast<char*>(&minimum_)) + sizeof(maximum_));
  // @@protoc_insertion_point(copy_constructor:Replicas)
}

void Replicas::SharedCtor() {
  ::memset(&minimum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maximum_) -
      reinterpret_cast<char*>(&minimum_)) + sizeof(maximum_));
}

Replicas::~Replicas() {
  // @@protoc_insertion_point(destructor:Replicas)
  SharedDtor();
}

void Replicas::SharedDtor() {
}

void Replicas::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Replicas& Replicas::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Replicas_proto_2fspire_2fspire_2eproto.base);
  return *internal_default_instance();
}


void Replicas::Clear() {
// @@protoc_insertion_point(message_clear_start:Replicas)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&minimum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maximum_) -
      reinterpret_cast<char*>(&minimum_)) + sizeof(maximum_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Replicas::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 minimum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          minimum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 maximum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          maximum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Replicas::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Replicas)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 minimum = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &minimum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 maximum = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &maximum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Replicas)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Replicas)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Replicas::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Replicas)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 minimum = 1;
  if (this->minimum() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->minimum(), output);
  }

  // int32 maximum = 2;
  if (this->maximum() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->maximum(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Replicas)
}

::PROTOBUF_NAMESPACE_ID::uint8* Replicas::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Replicas)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 minimum = 1;
  if (this->minimum() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->minimum(), target);
  }

  // int32 maximum = 2;
  if (this->maximum() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->maximum(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Replicas)
  return target;
}

size_t Replicas::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Replicas)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 minimum = 1;
  if (this->minimum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->minimum());
  }

  // int32 maximum = 2;
  if (this->maximum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->maximum());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Replicas::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Replicas)
  GOOGLE_DCHECK_NE(&from, this);
  const Replicas* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Replicas>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Replicas)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Replicas)
    MergeFrom(*source);
  }
}

void Replicas::MergeFrom(const Replicas& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Replicas)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.minimum() != 0) {
    set_minimum(from.minimum());
  }
  if (from.maximum() != 0) {
    set_maximum(from.maximum());
  }
}

void Replicas::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Replicas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Replicas::CopyFrom(const Replicas& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Replicas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Replicas::IsInitialized() const {
  return true;
}

void Replicas::InternalSwap(Replicas* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(minimum_, other->minimum_);
  swap(maximum_, other->maximum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Replicas::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CPUResources::InitAsDefaultInstance() {
}
class CPUResources::_Internal {
 public:
};

CPUResources::CPUResources()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CPUResources)
}
CPUResources::CPUResources(const CPUResources& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cpu_core_request_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.cpu_core_request().empty()) {
    cpu_core_request_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cpu_core_request_);
  }
  cpu_core_limit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.cpu_core_limit().empty()) {
    cpu_core_limit_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cpu_core_limit_);
  }
  cpu_mem_request_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.cpu_mem_request().empty()) {
    cpu_mem_request_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cpu_mem_request_);
  }
  cpu_mem_limit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.cpu_mem_limit().empty()) {
    cpu_mem_limit_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cpu_mem_limit_);
  }
  // @@protoc_insertion_point(copy_constructor:CPUResources)
}

void CPUResources::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CPUResources_proto_2fspire_2fspire_2eproto.base);
  cpu_core_request_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cpu_core_limit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cpu_mem_request_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cpu_mem_limit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CPUResources::~CPUResources() {
  // @@protoc_insertion_point(destructor:CPUResources)
  SharedDtor();
}

void CPUResources::SharedDtor() {
  cpu_core_request_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cpu_core_limit_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cpu_mem_request_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cpu_mem_limit_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CPUResources::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPUResources& CPUResources::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CPUResources_proto_2fspire_2fspire_2eproto.base);
  return *internal_default_instance();
}


void CPUResources::Clear() {
// @@protoc_insertion_point(message_clear_start:CPUResources)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cpu_core_request_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cpu_core_limit_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cpu_mem_request_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cpu_mem_limit_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CPUResources::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string cpu_core_request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_cpu_core_request(), ptr, ctx, "CPUResources.cpu_core_request");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cpu_core_limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_cpu_core_limit(), ptr, ctx, "CPUResources.cpu_core_limit");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cpu_mem_request = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_cpu_mem_request(), ptr, ctx, "CPUResources.cpu_mem_request");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cpu_mem_limit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_cpu_mem_limit(), ptr, ctx, "CPUResources.cpu_mem_limit");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CPUResources::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:CPUResources)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string cpu_core_request = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_cpu_core_request()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->cpu_core_request().data(), static_cast<int>(this->cpu_core_request().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "CPUResources.cpu_core_request"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cpu_core_limit = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_cpu_core_limit()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->cpu_core_limit().data(), static_cast<int>(this->cpu_core_limit().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "CPUResources.cpu_core_limit"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cpu_mem_request = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_cpu_mem_request()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->cpu_mem_request().data(), static_cast<int>(this->cpu_mem_request().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "CPUResources.cpu_mem_request"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cpu_mem_limit = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_cpu_mem_limit()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->cpu_mem_limit().data(), static_cast<int>(this->cpu_mem_limit().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "CPUResources.cpu_mem_limit"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CPUResources)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CPUResources)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CPUResources::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CPUResources)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cpu_core_request = 1;
  if (this->cpu_core_request().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->cpu_core_request().data(), static_cast<int>(this->cpu_core_request().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CPUResources.cpu_core_request");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cpu_core_request(), output);
  }

  // string cpu_core_limit = 2;
  if (this->cpu_core_limit().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->cpu_core_limit().data(), static_cast<int>(this->cpu_core_limit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CPUResources.cpu_core_limit");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cpu_core_limit(), output);
  }

  // string cpu_mem_request = 3;
  if (this->cpu_mem_request().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->cpu_mem_request().data(), static_cast<int>(this->cpu_mem_request().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CPUResources.cpu_mem_request");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cpu_mem_request(), output);
  }

  // string cpu_mem_limit = 4;
  if (this->cpu_mem_limit().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->cpu_mem_limit().data(), static_cast<int>(this->cpu_mem_limit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CPUResources.cpu_mem_limit");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->cpu_mem_limit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CPUResources)
}

::PROTOBUF_NAMESPACE_ID::uint8* CPUResources::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPUResources)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cpu_core_request = 1;
  if (this->cpu_core_request().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->cpu_core_request().data(), static_cast<int>(this->cpu_core_request().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CPUResources.cpu_core_request");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->cpu_core_request(), target);
  }

  // string cpu_core_limit = 2;
  if (this->cpu_core_limit().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->cpu_core_limit().data(), static_cast<int>(this->cpu_core_limit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CPUResources.cpu_core_limit");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->cpu_core_limit(), target);
  }

  // string cpu_mem_request = 3;
  if (this->cpu_mem_request().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->cpu_mem_request().data(), static_cast<int>(this->cpu_mem_request().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CPUResources.cpu_mem_request");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->cpu_mem_request(), target);
  }

  // string cpu_mem_limit = 4;
  if (this->cpu_mem_limit().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->cpu_mem_limit().data(), static_cast<int>(this->cpu_mem_limit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CPUResources.cpu_mem_limit");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->cpu_mem_limit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPUResources)
  return target;
}

size_t CPUResources::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPUResources)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cpu_core_request = 1;
  if (this->cpu_core_request().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->cpu_core_request());
  }

  // string cpu_core_limit = 2;
  if (this->cpu_core_limit().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->cpu_core_limit());
  }

  // string cpu_mem_request = 3;
  if (this->cpu_mem_request().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->cpu_mem_request());
  }

  // string cpu_mem_limit = 4;
  if (this->cpu_mem_limit().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->cpu_mem_limit());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPUResources::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPUResources)
  GOOGLE_DCHECK_NE(&from, this);
  const CPUResources* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPUResources>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPUResources)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPUResources)
    MergeFrom(*source);
  }
}

void CPUResources::MergeFrom(const CPUResources& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPUResources)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cpu_core_request().size() > 0) {

    cpu_core_request_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cpu_core_request_);
  }
  if (from.cpu_core_limit().size() > 0) {

    cpu_core_limit_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cpu_core_limit_);
  }
  if (from.cpu_mem_request().size() > 0) {

    cpu_mem_request_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cpu_mem_request_);
  }
  if (from.cpu_mem_limit().size() > 0) {

    cpu_mem_limit_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cpu_mem_limit_);
  }
}

void CPUResources::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPUResources)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPUResources::CopyFrom(const CPUResources& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPUResources)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPUResources::IsInitialized() const {
  return true;
}

void CPUResources::InternalSwap(CPUResources* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cpu_core_request_.Swap(&other->cpu_core_request_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cpu_core_limit_.Swap(&other->cpu_core_limit_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cpu_mem_request_.Swap(&other->cpu_mem_request_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cpu_mem_limit_.Swap(&other->cpu_mem_limit_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CPUResources::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpireMeta::InitAsDefaultInstance() {
}
class SpireMeta::_Internal {
 public:
};

SpireMeta::SpireMeta()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SpireMeta)
}
SpireMeta::SpireMeta(const SpireMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      models_(from.models_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lopq_model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.lopq_model().empty()) {
    lopq_model_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lopq_model_);
  }
  // @@protoc_insertion_point(copy_constructor:SpireMeta)
}

void SpireMeta::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpireMeta_proto_2fspire_2fspire_2eproto.base);
  lopq_model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SpireMeta::~SpireMeta() {
  // @@protoc_insertion_point(destructor:SpireMeta)
  SharedDtor();
}

void SpireMeta::SharedDtor() {
  lopq_model_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SpireMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpireMeta& SpireMeta::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpireMeta_proto_2fspire_2fspire_2eproto.base);
  return *internal_default_instance();
}


void SpireMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:SpireMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  models_.Clear();
  lopq_model_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SpireMeta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string models = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_models(), ptr, ctx, "SpireMeta.models");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // string lopq_model = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_lopq_model(), ptr, ctx, "SpireMeta.lopq_model");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SpireMeta::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SpireMeta)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string models = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_models()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->models(this->models_size() - 1).data(),
            static_cast<int>(this->models(this->models_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "SpireMeta.models"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string lopq_model = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_lopq_model()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->lopq_model().data(), static_cast<int>(this->lopq_model().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "SpireMeta.lopq_model"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SpireMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SpireMeta)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SpireMeta::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SpireMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string models = 1;
  for (int i = 0, n = this->models_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->models(i).data(), static_cast<int>(this->models(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SpireMeta.models");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      1, this->models(i), output);
  }

  // string lopq_model = 2;
  if (this->lopq_model().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->lopq_model().data(), static_cast<int>(this->lopq_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SpireMeta.lopq_model");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->lopq_model(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SpireMeta)
}

::PROTOBUF_NAMESPACE_ID::uint8* SpireMeta::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpireMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string models = 1;
  for (int i = 0, n = this->models_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->models(i).data(), static_cast<int>(this->models(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SpireMeta.models");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(1, this->models(i), target);
  }

  // string lopq_model = 2;
  if (this->lopq_model().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->lopq_model().data(), static_cast<int>(this->lopq_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SpireMeta.lopq_model");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->lopq_model(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpireMeta)
  return target;
}

size_t SpireMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpireMeta)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string models = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->models_size());
  for (int i = 0, n = this->models_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->models(i));
  }

  // string lopq_model = 2;
  if (this->lopq_model().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->lopq_model());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpireMeta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpireMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const SpireMeta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpireMeta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpireMeta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpireMeta)
    MergeFrom(*source);
  }
}

void SpireMeta::MergeFrom(const SpireMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpireMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  models_.MergeFrom(from.models_);
  if (from.lopq_model().size() > 0) {

    lopq_model_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lopq_model_);
  }
}

void SpireMeta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpireMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpireMeta::CopyFrom(const SpireMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpireMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpireMeta::IsInitialized() const {
  return true;
}

void SpireMeta::InternalSwap(SpireMeta* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  models_.InternalSwap(CastToBase(&other->models_));
  lopq_model_.Swap(&other->lopq_model_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SpireMeta::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpireGetConfigRequest::InitAsDefaultInstance() {
  ::_SpireGetConfigRequest_default_instance_._instance.get_mutable()->meta_ = const_cast< ::RequestMeta*>(
      ::RequestMeta::internal_default_instance());
}
class SpireGetConfigRequest::_Internal {
 public:
  static const ::RequestMeta& meta(const SpireGetConfigRequest* msg);
};

const ::RequestMeta&
SpireGetConfigRequest::_Internal::meta(const SpireGetConfigRequest* msg) {
  return *msg->meta_;
}
void SpireGetConfigRequest::clear_meta() {
  if (GetArenaNoVirtual() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
}
SpireGetConfigRequest::SpireGetConfigRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SpireGetConfigRequest)
}
SpireGetConfigRequest::SpireGetConfigRequest(const SpireGetConfigRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_meta()) {
    meta_ = new ::RequestMeta(*from.meta_);
  } else {
    meta_ = nullptr;
  }
  use_lock_ = from.use_lock_;
  // @@protoc_insertion_point(copy_constructor:SpireGetConfigRequest)
}

void SpireGetConfigRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpireGetConfigRequest_proto_2fspire_2fspire_2eproto.base);
  ::memset(&meta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_lock_) -
      reinterpret_cast<char*>(&meta_)) + sizeof(use_lock_));
}

SpireGetConfigRequest::~SpireGetConfigRequest() {
  // @@protoc_insertion_point(destructor:SpireGetConfigRequest)
  SharedDtor();
}

void SpireGetConfigRequest::SharedDtor() {
  if (this != internal_default_instance()) delete meta_;
}

void SpireGetConfigRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpireGetConfigRequest& SpireGetConfigRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpireGetConfigRequest_proto_2fspire_2fspire_2eproto.base);
  return *internal_default_instance();
}


void SpireGetConfigRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SpireGetConfigRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
  use_lock_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SpireGetConfigRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .RequestMeta meta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool use_lock = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          use_lock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SpireGetConfigRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SpireGetConfigRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .RequestMeta meta = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_meta()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_lock = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_lock_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SpireGetConfigRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SpireGetConfigRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SpireGetConfigRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SpireGetConfigRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::meta(this), output);
  }

  // bool use_lock = 2;
  if (this->use_lock() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->use_lock(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SpireGetConfigRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* SpireGetConfigRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpireGetConfigRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::meta(this), target);
  }

  // bool use_lock = 2;
  if (this->use_lock() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->use_lock(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpireGetConfigRequest)
  return target;
}

size_t SpireGetConfigRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpireGetConfigRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meta_);
  }

  // bool use_lock = 2;
  if (this->use_lock() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpireGetConfigRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpireGetConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SpireGetConfigRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpireGetConfigRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpireGetConfigRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpireGetConfigRequest)
    MergeFrom(*source);
  }
}

void SpireGetConfigRequest::MergeFrom(const SpireGetConfigRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpireGetConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_meta()) {
    mutable_meta()->::RequestMeta::MergeFrom(from.meta());
  }
  if (from.use_lock() != 0) {
    set_use_lock(from.use_lock());
  }
}

void SpireGetConfigRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpireGetConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpireGetConfigRequest::CopyFrom(const SpireGetConfigRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpireGetConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpireGetConfigRequest::IsInitialized() const {
  return true;
}

void SpireGetConfigRequest::InternalSwap(SpireGetConfigRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(meta_, other->meta_);
  swap(use_lock_, other->use_lock_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpireGetConfigRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpireGetConfigResponse::InitAsDefaultInstance() {
  ::_SpireGetConfigResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::ResponseStatus*>(
      ::ResponseStatus::internal_default_instance());
  ::_SpireGetConfigResponse_default_instance_._instance.get_mutable()->config_ = const_cast< ::SpireConfig*>(
      ::SpireConfig::internal_default_instance());
}
class SpireGetConfigResponse::_Internal {
 public:
  static const ::ResponseStatus& status(const SpireGetConfigResponse* msg);
  static const ::SpireConfig& config(const SpireGetConfigResponse* msg);
};

const ::ResponseStatus&
SpireGetConfigResponse::_Internal::status(const SpireGetConfigResponse* msg) {
  return *msg->status_;
}
const ::SpireConfig&
SpireGetConfigResponse::_Internal::config(const SpireGetConfigResponse* msg) {
  return *msg->config_;
}
void SpireGetConfigResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
SpireGetConfigResponse::SpireGetConfigResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SpireGetConfigResponse)
}
SpireGetConfigResponse::SpireGetConfigResponse(const SpireGetConfigResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  config_json_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.config_json().empty()) {
    config_json_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.config_json_);
  }
  if (from.has_status()) {
    status_ = new ::ResponseStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from.has_config()) {
    config_ = new ::SpireConfig(*from.config_);
  } else {
    config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SpireGetConfigResponse)
}

void SpireGetConfigResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpireGetConfigResponse_proto_2fspire_2fspire_2eproto.base);
  config_json_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&config_) -
      reinterpret_cast<char*>(&status_)) + sizeof(config_));
}

SpireGetConfigResponse::~SpireGetConfigResponse() {
  // @@protoc_insertion_point(destructor:SpireGetConfigResponse)
  SharedDtor();
}

void SpireGetConfigResponse::SharedDtor() {
  config_json_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete config_;
}

void SpireGetConfigResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpireGetConfigResponse& SpireGetConfigResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpireGetConfigResponse_proto_2fspire_2fspire_2eproto.base);
  return *internal_default_instance();
}


void SpireGetConfigResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SpireGetConfigResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  config_json_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SpireGetConfigResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ResponseStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string config_json = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_config_json(), ptr, ctx, "SpireGetConfigResponse.config_json");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SpireConfig config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SpireGetConfigResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SpireGetConfigResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ResponseStatus status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string config_json = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_config_json()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->config_json().data(), static_cast<int>(this->config_json().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "SpireGetConfigResponse.config_json"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .SpireConfig config = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SpireGetConfigResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SpireGetConfigResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SpireGetConfigResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SpireGetConfigResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::status(this), output);
  }

  // string config_json = 2;
  if (this->config_json().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->config_json().data(), static_cast<int>(this->config_json().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SpireGetConfigResponse.config_json");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->config_json(), output);
  }

  // .SpireConfig config = 3;
  if (this->has_config()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::config(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SpireGetConfigResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* SpireGetConfigResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpireGetConfigResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::status(this), target);
  }

  // string config_json = 2;
  if (this->config_json().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->config_json().data(), static_cast<int>(this->config_json().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SpireGetConfigResponse.config_json");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->config_json(), target);
  }

  // .SpireConfig config = 3;
  if (this->has_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::config(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpireGetConfigResponse)
  return target;
}

size_t SpireGetConfigResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpireGetConfigResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string config_json = 2;
  if (this->config_json().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->config_json());
  }

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .SpireConfig config = 3;
  if (this->has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpireGetConfigResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpireGetConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SpireGetConfigResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpireGetConfigResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpireGetConfigResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpireGetConfigResponse)
    MergeFrom(*source);
  }
}

void SpireGetConfigResponse::MergeFrom(const SpireGetConfigResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpireGetConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.config_json().size() > 0) {

    config_json_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.config_json_);
  }
  if (from.has_status()) {
    mutable_status()->::ResponseStatus::MergeFrom(from.status());
  }
  if (from.has_config()) {
    mutable_config()->::SpireConfig::MergeFrom(from.config());
  }
}

void SpireGetConfigResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpireGetConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpireGetConfigResponse::CopyFrom(const SpireGetConfigResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpireGetConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpireGetConfigResponse::IsInitialized() const {
  return true;
}

void SpireGetConfigResponse::InternalSwap(SpireGetConfigResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  config_json_.Swap(&other->config_json_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
  swap(config_, other->config_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpireGetConfigResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpireSetConfigRequest::InitAsDefaultInstance() {
  ::_SpireSetConfigRequest_default_instance_._instance.get_mutable()->meta_ = const_cast< ::RequestMeta*>(
      ::RequestMeta::internal_default_instance());
  ::_SpireSetConfigRequest_default_instance_._instance.get_mutable()->config_ = const_cast< ::SpireConfig*>(
      ::SpireConfig::internal_default_instance());
}
class SpireSetConfigRequest::_Internal {
 public:
  static const ::RequestMeta& meta(const SpireSetConfigRequest* msg);
  static const ::SpireConfig& config(const SpireSetConfigRequest* msg);
};

const ::RequestMeta&
SpireSetConfigRequest::_Internal::meta(const SpireSetConfigRequest* msg) {
  return *msg->meta_;
}
const ::SpireConfig&
SpireSetConfigRequest::_Internal::config(const SpireSetConfigRequest* msg) {
  return *msg->config_;
}
void SpireSetConfigRequest::clear_meta() {
  if (GetArenaNoVirtual() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
}
SpireSetConfigRequest::SpireSetConfigRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SpireSetConfigRequest)
}
SpireSetConfigRequest::SpireSetConfigRequest(const SpireSetConfigRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  config_json_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.config_json().empty()) {
    config_json_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.config_json_);
  }
  if (from.has_meta()) {
    meta_ = new ::RequestMeta(*from.meta_);
  } else {
    meta_ = nullptr;
  }
  if (from.has_config()) {
    config_ = new ::SpireConfig(*from.config_);
  } else {
    config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SpireSetConfigRequest)
}

void SpireSetConfigRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpireSetConfigRequest_proto_2fspire_2fspire_2eproto.base);
  config_json_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&meta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&config_) -
      reinterpret_cast<char*>(&meta_)) + sizeof(config_));
}

SpireSetConfigRequest::~SpireSetConfigRequest() {
  // @@protoc_insertion_point(destructor:SpireSetConfigRequest)
  SharedDtor();
}

void SpireSetConfigRequest::SharedDtor() {
  config_json_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete meta_;
  if (this != internal_default_instance()) delete config_;
}

void SpireSetConfigRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpireSetConfigRequest& SpireSetConfigRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpireSetConfigRequest_proto_2fspire_2fspire_2eproto.base);
  return *internal_default_instance();
}


void SpireSetConfigRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SpireSetConfigRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  config_json_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SpireSetConfigRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .RequestMeta meta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string config_json = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_config_json(), ptr, ctx, "SpireSetConfigRequest.config_json");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SpireConfig config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SpireSetConfigRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SpireSetConfigRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .RequestMeta meta = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_meta()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string config_json = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_config_json()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->config_json().data(), static_cast<int>(this->config_json().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "SpireSetConfigRequest.config_json"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .SpireConfig config = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SpireSetConfigRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SpireSetConfigRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SpireSetConfigRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SpireSetConfigRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::meta(this), output);
  }

  // string config_json = 2;
  if (this->config_json().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->config_json().data(), static_cast<int>(this->config_json().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SpireSetConfigRequest.config_json");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->config_json(), output);
  }

  // .SpireConfig config = 3;
  if (this->has_config()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::config(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SpireSetConfigRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* SpireSetConfigRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpireSetConfigRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::meta(this), target);
  }

  // string config_json = 2;
  if (this->config_json().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->config_json().data(), static_cast<int>(this->config_json().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SpireSetConfigRequest.config_json");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->config_json(), target);
  }

  // .SpireConfig config = 3;
  if (this->has_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::config(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpireSetConfigRequest)
  return target;
}

size_t SpireSetConfigRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpireSetConfigRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string config_json = 2;
  if (this->config_json().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->config_json());
  }

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meta_);
  }

  // .SpireConfig config = 3;
  if (this->has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpireSetConfigRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpireSetConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SpireSetConfigRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpireSetConfigRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpireSetConfigRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpireSetConfigRequest)
    MergeFrom(*source);
  }
}

void SpireSetConfigRequest::MergeFrom(const SpireSetConfigRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpireSetConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.config_json().size() > 0) {

    config_json_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.config_json_);
  }
  if (from.has_meta()) {
    mutable_meta()->::RequestMeta::MergeFrom(from.meta());
  }
  if (from.has_config()) {
    mutable_config()->::SpireConfig::MergeFrom(from.config());
  }
}

void SpireSetConfigRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpireSetConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpireSetConfigRequest::CopyFrom(const SpireSetConfigRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpireSetConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpireSetConfigRequest::IsInitialized() const {
  return true;
}

void SpireSetConfigRequest::InternalSwap(SpireSetConfigRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  config_json_.Swap(&other->config_json_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(meta_, other->meta_);
  swap(config_, other->config_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpireSetConfigRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpireSetConfigResponse::InitAsDefaultInstance() {
  ::_SpireSetConfigResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::ResponseStatus*>(
      ::ResponseStatus::internal_default_instance());
}
class SpireSetConfigResponse::_Internal {
 public:
  static const ::ResponseStatus& status(const SpireSetConfigResponse* msg);
};

const ::ResponseStatus&
SpireSetConfigResponse::_Internal::status(const SpireSetConfigResponse* msg) {
  return *msg->status_;
}
void SpireSetConfigResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
SpireSetConfigResponse::SpireSetConfigResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SpireSetConfigResponse)
}
SpireSetConfigResponse::SpireSetConfigResponse(const SpireSetConfigResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::ResponseStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SpireSetConfigResponse)
}

void SpireSetConfigResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpireSetConfigResponse_proto_2fspire_2fspire_2eproto.base);
  status_ = nullptr;
}

SpireSetConfigResponse::~SpireSetConfigResponse() {
  // @@protoc_insertion_point(destructor:SpireSetConfigResponse)
  SharedDtor();
}

void SpireSetConfigResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void SpireSetConfigResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpireSetConfigResponse& SpireSetConfigResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpireSetConfigResponse_proto_2fspire_2fspire_2eproto.base);
  return *internal_default_instance();
}


void SpireSetConfigResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SpireSetConfigResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SpireSetConfigResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ResponseStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SpireSetConfigResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SpireSetConfigResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ResponseStatus status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SpireSetConfigResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SpireSetConfigResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SpireSetConfigResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SpireSetConfigResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::status(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SpireSetConfigResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* SpireSetConfigResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpireSetConfigResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::status(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpireSetConfigResponse)
  return target;
}

size_t SpireSetConfigResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpireSetConfigResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpireSetConfigResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpireSetConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SpireSetConfigResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpireSetConfigResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpireSetConfigResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpireSetConfigResponse)
    MergeFrom(*source);
  }
}

void SpireSetConfigResponse::MergeFrom(const SpireSetConfigResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpireSetConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    mutable_status()->::ResponseStatus::MergeFrom(from.status());
  }
}

void SpireSetConfigResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpireSetConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpireSetConfigResponse::CopyFrom(const SpireSetConfigResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpireSetConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpireSetConfigResponse::IsInitialized() const {
  return true;
}

void SpireSetConfigResponse::InternalSwap(SpireSetConfigResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpireSetConfigResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpireGetStateRequest::InitAsDefaultInstance() {
  ::_SpireGetStateRequest_default_instance_._instance.get_mutable()->meta_ = const_cast< ::RequestMeta*>(
      ::RequestMeta::internal_default_instance());
}
class SpireGetStateRequest::_Internal {
 public:
  static const ::RequestMeta& meta(const SpireGetStateRequest* msg);
};

const ::RequestMeta&
SpireGetStateRequest::_Internal::meta(const SpireGetStateRequest* msg) {
  return *msg->meta_;
}
void SpireGetStateRequest::clear_meta() {
  if (GetArenaNoVirtual() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
}
SpireGetStateRequest::SpireGetStateRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SpireGetStateRequest)
}
SpireGetStateRequest::SpireGetStateRequest(const SpireGetStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_meta()) {
    meta_ = new ::RequestMeta(*from.meta_);
  } else {
    meta_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SpireGetStateRequest)
}

void SpireGetStateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpireGetStateRequest_proto_2fspire_2fspire_2eproto.base);
  meta_ = nullptr;
}

SpireGetStateRequest::~SpireGetStateRequest() {
  // @@protoc_insertion_point(destructor:SpireGetStateRequest)
  SharedDtor();
}

void SpireGetStateRequest::SharedDtor() {
  if (this != internal_default_instance()) delete meta_;
}

void SpireGetStateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpireGetStateRequest& SpireGetStateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpireGetStateRequest_proto_2fspire_2fspire_2eproto.base);
  return *internal_default_instance();
}


void SpireGetStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SpireGetStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SpireGetStateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .RequestMeta meta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SpireGetStateRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SpireGetStateRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .RequestMeta meta = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_meta()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SpireGetStateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SpireGetStateRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SpireGetStateRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SpireGetStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::meta(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SpireGetStateRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* SpireGetStateRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpireGetStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::meta(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpireGetStateRequest)
  return target;
}

size_t SpireGetStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpireGetStateRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meta_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpireGetStateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpireGetStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SpireGetStateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpireGetStateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpireGetStateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpireGetStateRequest)
    MergeFrom(*source);
  }
}

void SpireGetStateRequest::MergeFrom(const SpireGetStateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpireGetStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_meta()) {
    mutable_meta()->::RequestMeta::MergeFrom(from.meta());
  }
}

void SpireGetStateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpireGetStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpireGetStateRequest::CopyFrom(const SpireGetStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpireGetStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpireGetStateRequest::IsInitialized() const {
  return true;
}

void SpireGetStateRequest::InternalSwap(SpireGetStateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(meta_, other->meta_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpireGetStateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpireGetStateResponse::InitAsDefaultInstance() {
  ::_SpireGetStateResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::ResponseStatus*>(
      ::ResponseStatus::internal_default_instance());
  ::_SpireGetStateResponse_default_instance_._instance.get_mutable()->last_inference_time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class SpireGetStateResponse::_Internal {
 public:
  static const ::ResponseStatus& status(const SpireGetStateResponse* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& last_inference_time(const SpireGetStateResponse* msg);
};

const ::ResponseStatus&
SpireGetStateResponse::_Internal::status(const SpireGetStateResponse* msg) {
  return *msg->status_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
SpireGetStateResponse::_Internal::last_inference_time(const SpireGetStateResponse* msg) {
  return *msg->last_inference_time_;
}
void SpireGetStateResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SpireGetStateResponse::clear_last_inference_time() {
  if (GetArenaNoVirtual() == nullptr && last_inference_time_ != nullptr) {
    delete last_inference_time_;
  }
  last_inference_time_ = nullptr;
}
SpireGetStateResponse::SpireGetStateResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SpireGetStateResponse)
}
SpireGetStateResponse::SpireGetStateResponse(const SpireGetStateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::ResponseStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from.has_last_inference_time()) {
    last_inference_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.last_inference_time_);
  } else {
    last_inference_time_ = nullptr;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:SpireGetStateResponse)
}

void SpireGetStateResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpireGetStateResponse_proto_2fspire_2fspire_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&status_)) + sizeof(state_));
}

SpireGetStateResponse::~SpireGetStateResponse() {
  // @@protoc_insertion_point(destructor:SpireGetStateResponse)
  SharedDtor();
}

void SpireGetStateResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete last_inference_time_;
}

void SpireGetStateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpireGetStateResponse& SpireGetStateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpireGetStateResponse_proto_2fspire_2fspire_2eproto.base);
  return *internal_default_instance();
}


void SpireGetStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SpireGetStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && last_inference_time_ != nullptr) {
    delete last_inference_time_;
  }
  last_inference_time_ = nullptr;
  state_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SpireGetStateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ResponseStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SpireState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_state(static_cast<::SpireState>(val));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_inference_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_last_inference_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SpireGetStateResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SpireGetStateResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ResponseStatus status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .SpireState state = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::SpireState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp last_inference_time = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_last_inference_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SpireGetStateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SpireGetStateResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SpireGetStateResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SpireGetStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::status(this), output);
  }

  // .SpireState state = 2;
  if (this->state() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // .google.protobuf.Timestamp last_inference_time = 3;
  if (this->has_last_inference_time()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::last_inference_time(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SpireGetStateResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* SpireGetStateResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpireGetStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::status(this), target);
  }

  // .SpireState state = 2;
  if (this->state() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // .google.protobuf.Timestamp last_inference_time = 3;
  if (this->has_last_inference_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::last_inference_time(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpireGetStateResponse)
  return target;
}

size_t SpireGetStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpireGetStateResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .google.protobuf.Timestamp last_inference_time = 3;
  if (this->has_last_inference_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_inference_time_);
  }

  // .SpireState state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpireGetStateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpireGetStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SpireGetStateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpireGetStateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpireGetStateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpireGetStateResponse)
    MergeFrom(*source);
  }
}

void SpireGetStateResponse::MergeFrom(const SpireGetStateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpireGetStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    mutable_status()->::ResponseStatus::MergeFrom(from.status());
  }
  if (from.has_last_inference_time()) {
    mutable_last_inference_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from.last_inference_time());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void SpireGetStateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpireGetStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpireGetStateResponse::CopyFrom(const SpireGetStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpireGetStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpireGetStateResponse::IsInitialized() const {
  return true;
}

void SpireGetStateResponse::InternalSwap(SpireGetStateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(last_inference_time_, other->last_inference_time_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpireGetStateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpireMaybeJITRequest::InitAsDefaultInstance() {
  ::_SpireMaybeJITRequest_default_instance_._instance.get_mutable()->meta_ = const_cast< ::RequestMeta*>(
      ::RequestMeta::internal_default_instance());
}
class SpireMaybeJITRequest::_Internal {
 public:
  static const ::RequestMeta& meta(const SpireMaybeJITRequest* msg);
};

const ::RequestMeta&
SpireMaybeJITRequest::_Internal::meta(const SpireMaybeJITRequest* msg) {
  return *msg->meta_;
}
void SpireMaybeJITRequest::clear_meta() {
  if (GetArenaNoVirtual() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
}
SpireMaybeJITRequest::SpireMaybeJITRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SpireMaybeJITRequest)
}
SpireMaybeJITRequest::SpireMaybeJITRequest(const SpireMaybeJITRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_meta()) {
    meta_ = new ::RequestMeta(*from.meta_);
  } else {
    meta_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SpireMaybeJITRequest)
}

void SpireMaybeJITRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpireMaybeJITRequest_proto_2fspire_2fspire_2eproto.base);
  meta_ = nullptr;
}

SpireMaybeJITRequest::~SpireMaybeJITRequest() {
  // @@protoc_insertion_point(destructor:SpireMaybeJITRequest)
  SharedDtor();
}

void SpireMaybeJITRequest::SharedDtor() {
  if (this != internal_default_instance()) delete meta_;
}

void SpireMaybeJITRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpireMaybeJITRequest& SpireMaybeJITRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpireMaybeJITRequest_proto_2fspire_2fspire_2eproto.base);
  return *internal_default_instance();
}


void SpireMaybeJITRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SpireMaybeJITRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SpireMaybeJITRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .RequestMeta meta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SpireMaybeJITRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SpireMaybeJITRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .RequestMeta meta = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_meta()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SpireMaybeJITRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SpireMaybeJITRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SpireMaybeJITRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SpireMaybeJITRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::meta(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SpireMaybeJITRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* SpireMaybeJITRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpireMaybeJITRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::meta(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpireMaybeJITRequest)
  return target;
}

size_t SpireMaybeJITRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpireMaybeJITRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meta_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpireMaybeJITRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpireMaybeJITRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SpireMaybeJITRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpireMaybeJITRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpireMaybeJITRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpireMaybeJITRequest)
    MergeFrom(*source);
  }
}

void SpireMaybeJITRequest::MergeFrom(const SpireMaybeJITRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpireMaybeJITRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_meta()) {
    mutable_meta()->::RequestMeta::MergeFrom(from.meta());
  }
}

void SpireMaybeJITRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpireMaybeJITRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpireMaybeJITRequest::CopyFrom(const SpireMaybeJITRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpireMaybeJITRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpireMaybeJITRequest::IsInitialized() const {
  return true;
}

void SpireMaybeJITRequest::InternalSwap(SpireMaybeJITRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(meta_, other->meta_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpireMaybeJITRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpireMaybeJITResponse::InitAsDefaultInstance() {
  ::_SpireMaybeJITResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::ResponseStatus*>(
      ::ResponseStatus::internal_default_instance());
}
class SpireMaybeJITResponse::_Internal {
 public:
  static const ::ResponseStatus& status(const SpireMaybeJITResponse* msg);
};

const ::ResponseStatus&
SpireMaybeJITResponse::_Internal::status(const SpireMaybeJITResponse* msg) {
  return *msg->status_;
}
void SpireMaybeJITResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
SpireMaybeJITResponse::SpireMaybeJITResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SpireMaybeJITResponse)
}
SpireMaybeJITResponse::SpireMaybeJITResponse(const SpireMaybeJITResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::ResponseStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:SpireMaybeJITResponse)
}

void SpireMaybeJITResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpireMaybeJITResponse_proto_2fspire_2fspire_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&status_)) + sizeof(state_));
}

SpireMaybeJITResponse::~SpireMaybeJITResponse() {
  // @@protoc_insertion_point(destructor:SpireMaybeJITResponse)
  SharedDtor();
}

void SpireMaybeJITResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void SpireMaybeJITResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpireMaybeJITResponse& SpireMaybeJITResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpireMaybeJITResponse_proto_2fspire_2fspire_2eproto.base);
  return *internal_default_instance();
}


void SpireMaybeJITResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SpireMaybeJITResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  state_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SpireMaybeJITResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ResponseStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SpireState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_state(static_cast<::SpireState>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SpireMaybeJITResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SpireMaybeJITResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ResponseStatus status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .SpireState state = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::SpireState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SpireMaybeJITResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SpireMaybeJITResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SpireMaybeJITResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SpireMaybeJITResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::status(this), output);
  }

  // .SpireState state = 2;
  if (this->state() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SpireMaybeJITResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* SpireMaybeJITResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpireMaybeJITResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::status(this), target);
  }

  // .SpireState state = 2;
  if (this->state() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpireMaybeJITResponse)
  return target;
}

size_t SpireMaybeJITResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpireMaybeJITResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .SpireState state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpireMaybeJITResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpireMaybeJITResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SpireMaybeJITResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpireMaybeJITResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpireMaybeJITResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpireMaybeJITResponse)
    MergeFrom(*source);
  }
}

void SpireMaybeJITResponse::MergeFrom(const SpireMaybeJITResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpireMaybeJITResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    mutable_status()->::ResponseStatus::MergeFrom(from.status());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void SpireMaybeJITResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpireMaybeJITResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpireMaybeJITResponse::CopyFrom(const SpireMaybeJITResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpireMaybeJITResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpireMaybeJITResponse::IsInitialized() const {
  return true;
}

void SpireMaybeJITResponse::InternalSwap(SpireMaybeJITResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpireMaybeJITResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpireStopServingRequest::InitAsDefaultInstance() {
  ::_SpireStopServingRequest_default_instance_._instance.get_mutable()->meta_ = const_cast< ::RequestMeta*>(
      ::RequestMeta::internal_default_instance());
}
class SpireStopServingRequest::_Internal {
 public:
  static const ::RequestMeta& meta(const SpireStopServingRequest* msg);
};

const ::RequestMeta&
SpireStopServingRequest::_Internal::meta(const SpireStopServingRequest* msg) {
  return *msg->meta_;
}
void SpireStopServingRequest::clear_meta() {
  if (GetArenaNoVirtual() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
}
SpireStopServingRequest::SpireStopServingRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SpireStopServingRequest)
}
SpireStopServingRequest::SpireStopServingRequest(const SpireStopServingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_meta()) {
    meta_ = new ::RequestMeta(*from.meta_);
  } else {
    meta_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SpireStopServingRequest)
}

void SpireStopServingRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpireStopServingRequest_proto_2fspire_2fspire_2eproto.base);
  meta_ = nullptr;
}

SpireStopServingRequest::~SpireStopServingRequest() {
  // @@protoc_insertion_point(destructor:SpireStopServingRequest)
  SharedDtor();
}

void SpireStopServingRequest::SharedDtor() {
  if (this != internal_default_instance()) delete meta_;
}

void SpireStopServingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpireStopServingRequest& SpireStopServingRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpireStopServingRequest_proto_2fspire_2fspire_2eproto.base);
  return *internal_default_instance();
}


void SpireStopServingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SpireStopServingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SpireStopServingRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .RequestMeta meta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SpireStopServingRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SpireStopServingRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .RequestMeta meta = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_meta()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SpireStopServingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SpireStopServingRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SpireStopServingRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SpireStopServingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::meta(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SpireStopServingRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* SpireStopServingRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpireStopServingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::meta(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpireStopServingRequest)
  return target;
}

size_t SpireStopServingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpireStopServingRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meta_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpireStopServingRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpireStopServingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SpireStopServingRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpireStopServingRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpireStopServingRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpireStopServingRequest)
    MergeFrom(*source);
  }
}

void SpireStopServingRequest::MergeFrom(const SpireStopServingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpireStopServingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_meta()) {
    mutable_meta()->::RequestMeta::MergeFrom(from.meta());
  }
}

void SpireStopServingRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpireStopServingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpireStopServingRequest::CopyFrom(const SpireStopServingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpireStopServingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpireStopServingRequest::IsInitialized() const {
  return true;
}

void SpireStopServingRequest::InternalSwap(SpireStopServingRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(meta_, other->meta_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpireStopServingRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpireStopServingResponse::InitAsDefaultInstance() {
  ::_SpireStopServingResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::ResponseStatus*>(
      ::ResponseStatus::internal_default_instance());
}
class SpireStopServingResponse::_Internal {
 public:
  static const ::ResponseStatus& status(const SpireStopServingResponse* msg);
};

const ::ResponseStatus&
SpireStopServingResponse::_Internal::status(const SpireStopServingResponse* msg) {
  return *msg->status_;
}
void SpireStopServingResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
SpireStopServingResponse::SpireStopServingResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SpireStopServingResponse)
}
SpireStopServingResponse::SpireStopServingResponse(const SpireStopServingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::ResponseStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:SpireStopServingResponse)
}

void SpireStopServingResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpireStopServingResponse_proto_2fspire_2fspire_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&status_)) + sizeof(state_));
}

SpireStopServingResponse::~SpireStopServingResponse() {
  // @@protoc_insertion_point(destructor:SpireStopServingResponse)
  SharedDtor();
}

void SpireStopServingResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void SpireStopServingResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpireStopServingResponse& SpireStopServingResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpireStopServingResponse_proto_2fspire_2fspire_2eproto.base);
  return *internal_default_instance();
}


void SpireStopServingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SpireStopServingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  state_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SpireStopServingResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ResponseStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SpireState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_state(static_cast<::SpireState>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SpireStopServingResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SpireStopServingResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ResponseStatus status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .SpireState state = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::SpireState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SpireStopServingResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SpireStopServingResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SpireStopServingResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SpireStopServingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::status(this), output);
  }

  // .SpireState state = 2;
  if (this->state() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SpireStopServingResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* SpireStopServingResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpireStopServingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::status(this), target);
  }

  // .SpireState state = 2;
  if (this->state() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpireStopServingResponse)
  return target;
}

size_t SpireStopServingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpireStopServingResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .SpireState state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpireStopServingResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpireStopServingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SpireStopServingResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpireStopServingResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpireStopServingResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpireStopServingResponse)
    MergeFrom(*source);
  }
}

void SpireStopServingResponse::MergeFrom(const SpireStopServingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpireStopServingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    mutable_status()->::ResponseStatus::MergeFrom(from.status());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void SpireStopServingResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpireStopServingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpireStopServingResponse::CopyFrom(const SpireStopServingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpireStopServingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpireStopServingResponse::IsInitialized() const {
  return true;
}

void SpireStopServingResponse::InternalSwap(SpireStopServingResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpireStopServingResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpireEmbedTagRequest::InitAsDefaultInstance() {
  ::_SpireEmbedTagRequest_default_instance_._instance.get_mutable()->meta_ = const_cast< ::RequestMeta*>(
      ::RequestMeta::internal_default_instance());
  ::_SpireEmbedTagRequest_default_instance_._instance.get_mutable()->data_ = const_cast< ::DataBatch*>(
      ::DataBatch::internal_default_instance());
}
class SpireEmbedTagRequest::_Internal {
 public:
  static const ::RequestMeta& meta(const SpireEmbedTagRequest* msg);
  static const ::DataBatch& data(const SpireEmbedTagRequest* msg);
};

const ::RequestMeta&
SpireEmbedTagRequest::_Internal::meta(const SpireEmbedTagRequest* msg) {
  return *msg->meta_;
}
const ::DataBatch&
SpireEmbedTagRequest::_Internal::data(const SpireEmbedTagRequest* msg) {
  return *msg->data_;
}
void SpireEmbedTagRequest::clear_meta() {
  if (GetArenaNoVirtual() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
}
void SpireEmbedTagRequest::clear_data() {
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
void SpireEmbedTagRequest::clear_tags_to_watch() {
  tags_to_watch_.Clear();
}
SpireEmbedTagRequest::SpireEmbedTagRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SpireEmbedTagRequest)
}
SpireEmbedTagRequest::SpireEmbedTagRequest(const SpireEmbedTagRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ops_(from.ops_),
      tags_to_watch_(from.tags_to_watch_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.language().empty()) {
    language_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  if (from.has_meta()) {
    meta_ = new ::RequestMeta(*from.meta_);
  } else {
    meta_ = nullptr;
  }
  if (from.has_data()) {
    data_ = new ::DataBatch(*from.data_);
  } else {
    data_ = nullptr;
  }
  ::memcpy(&topk_, &from.topk_,
    static_cast<size_t>(reinterpret_cast<char*>(&fps_) -
    reinterpret_cast<char*>(&topk_)) + sizeof(fps_));
  // @@protoc_insertion_point(copy_constructor:SpireEmbedTagRequest)
}

void SpireEmbedTagRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpireEmbedTagRequest_proto_2fspire_2fspire_2eproto.base);
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&meta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fps_) -
      reinterpret_cast<char*>(&meta_)) + sizeof(fps_));
}

SpireEmbedTagRequest::~SpireEmbedTagRequest() {
  // @@protoc_insertion_point(destructor:SpireEmbedTagRequest)
  SharedDtor();
}

void SpireEmbedTagRequest::SharedDtor() {
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete meta_;
  if (this != internal_default_instance()) delete data_;
}

void SpireEmbedTagRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpireEmbedTagRequest& SpireEmbedTagRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpireEmbedTagRequest_proto_2fspire_2fspire_2eproto.base);
  return *internal_default_instance();
}


void SpireEmbedTagRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SpireEmbedTagRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ops_.Clear();
  tags_to_watch_.Clear();
  language_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  ::memset(&topk_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fps_) -
      reinterpret_cast<char*>(&topk_)) + sizeof(fps_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SpireEmbedTagRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .RequestMeta meta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DataBatch data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SpireOps ops = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_ops(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          add_ops(static_cast<::SpireOps>(val));
        } else goto handle_unusual;
        continue;
      // int32 topk = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          topk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float fps = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          fps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .Tag tags_to_watch = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_tags_to_watch(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // string language = 7 [deprecated = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_language(), ptr, ctx, "SpireEmbedTagRequest.language");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SpireEmbedTagRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SpireEmbedTagRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .RequestMeta meta = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_meta()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DataBatch data = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SpireOps ops = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          ::PROTOBUF_NAMESPACE_ID::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value = 0;
            DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_ops(static_cast< ::SpireOps >(value));
          }
          input->PopLimit(limit);
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_ops(static_cast< ::SpireOps >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 topk = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &topk_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fps = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Tag tags_to_watch = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_tags_to_watch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string language = 7 [deprecated = true];
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->language().data(), static_cast<int>(this->language().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "SpireEmbedTagRequest.language"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SpireEmbedTagRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SpireEmbedTagRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SpireEmbedTagRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SpireEmbedTagRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::meta(this), output);
  }

  // .DataBatch data = 2;
  if (this->has_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::data(this), output);
  }

  // repeated .SpireOps ops = 3;
  if (this->ops_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_ops_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->ops_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTag(
      this->ops(i), output);
  }

  // int32 topk = 4;
  if (this->topk() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->topk(), output);
  }

  // float fps = 5;
  if (!(this->fps() <= 0 && this->fps() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->fps(), output);
  }

  // repeated .Tag tags_to_watch = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tags_to_watch_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->tags_to_watch(static_cast<int>(i)),
      output);
  }

  // string language = 7 [deprecated = true];
  if (this->language().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->language().data(), static_cast<int>(this->language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SpireEmbedTagRequest.language");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->language(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SpireEmbedTagRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* SpireEmbedTagRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpireEmbedTagRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::meta(this), target);
  }

  // .DataBatch data = 2;
  if (this->has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::data(this), target);
  }

  // repeated .SpireOps ops = 3;
  if (this->ops_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(      _ops_cached_byte_size_.load(std::memory_order_relaxed),
        target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->ops_, target);
  }

  // int32 topk = 4;
  if (this->topk() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->topk(), target);
  }

  // float fps = 5;
  if (!(this->fps() <= 0 && this->fps() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->fps(), target);
  }

  // repeated .Tag tags_to_watch = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tags_to_watch_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->tags_to_watch(static_cast<int>(i)), target);
  }

  // string language = 7 [deprecated = true];
  if (this->language().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->language().data(), static_cast<int>(this->language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SpireEmbedTagRequest.language");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        7, this->language(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpireEmbedTagRequest)
  return target;
}

size_t SpireEmbedTagRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpireEmbedTagRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SpireOps ops = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->ops_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->ops(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ops_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .Tag tags_to_watch = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->tags_to_watch_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->tags_to_watch(static_cast<int>(i)));
    }
  }

  // string language = 7 [deprecated = true];
  if (this->language().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->language());
  }

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meta_);
  }

  // .DataBatch data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // int32 topk = 4;
  if (this->topk() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->topk());
  }

  // float fps = 5;
  if (!(this->fps() <= 0 && this->fps() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpireEmbedTagRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpireEmbedTagRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SpireEmbedTagRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpireEmbedTagRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpireEmbedTagRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpireEmbedTagRequest)
    MergeFrom(*source);
  }
}

void SpireEmbedTagRequest::MergeFrom(const SpireEmbedTagRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpireEmbedTagRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ops_.MergeFrom(from.ops_);
  tags_to_watch_.MergeFrom(from.tags_to_watch_);
  if (from.language().size() > 0) {

    language_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  if (from.has_meta()) {
    mutable_meta()->::RequestMeta::MergeFrom(from.meta());
  }
  if (from.has_data()) {
    mutable_data()->::DataBatch::MergeFrom(from.data());
  }
  if (from.topk() != 0) {
    set_topk(from.topk());
  }
  if (!(from.fps() <= 0 && from.fps() >= 0)) {
    set_fps(from.fps());
  }
}

void SpireEmbedTagRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpireEmbedTagRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpireEmbedTagRequest::CopyFrom(const SpireEmbedTagRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpireEmbedTagRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpireEmbedTagRequest::IsInitialized() const {
  return true;
}

void SpireEmbedTagRequest::InternalSwap(SpireEmbedTagRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ops_.InternalSwap(&other->ops_);
  CastToBase(&tags_to_watch_)->InternalSwap(CastToBase(&other->tags_to_watch_));
  language_.Swap(&other->language_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(meta_, other->meta_);
  swap(data_, other->data_);
  swap(topk_, other->topk_);
  swap(fps_, other->fps_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpireEmbedTagRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpireEmbedTagResponse::InitAsDefaultInstance() {
  ::_SpireEmbedTagResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::ResponseStatus*>(
      ::ResponseStatus::internal_default_instance());
  ::_SpireEmbedTagResponse_default_instance_._instance.get_mutable()->results_ = const_cast< ::DataBatch*>(
      ::DataBatch::internal_default_instance());
}
class SpireEmbedTagResponse::_Internal {
 public:
  static const ::ResponseStatus& status(const SpireEmbedTagResponse* msg);
  static const ::DataBatch& results(const SpireEmbedTagResponse* msg);
};

const ::ResponseStatus&
SpireEmbedTagResponse::_Internal::status(const SpireEmbedTagResponse* msg) {
  return *msg->status_;
}
const ::DataBatch&
SpireEmbedTagResponse::_Internal::results(const SpireEmbedTagResponse* msg) {
  return *msg->results_;
}
void SpireEmbedTagResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SpireEmbedTagResponse::clear_results() {
  if (GetArenaNoVirtual() == nullptr && results_ != nullptr) {
    delete results_;
  }
  results_ = nullptr;
}
SpireEmbedTagResponse::SpireEmbedTagResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SpireEmbedTagResponse)
}
SpireEmbedTagResponse::SpireEmbedTagResponse(const SpireEmbedTagResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::ResponseStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from.has_results()) {
    results_ = new ::DataBatch(*from.results_);
  } else {
    results_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SpireEmbedTagResponse)
}

void SpireEmbedTagResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpireEmbedTagResponse_proto_2fspire_2fspire_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&results_) -
      reinterpret_cast<char*>(&status_)) + sizeof(results_));
}

SpireEmbedTagResponse::~SpireEmbedTagResponse() {
  // @@protoc_insertion_point(destructor:SpireEmbedTagResponse)
  SharedDtor();
}

void SpireEmbedTagResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete results_;
}

void SpireEmbedTagResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpireEmbedTagResponse& SpireEmbedTagResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpireEmbedTagResponse_proto_2fspire_2fspire_2eproto.base);
  return *internal_default_instance();
}


void SpireEmbedTagResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SpireEmbedTagResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && results_ != nullptr) {
    delete results_;
  }
  results_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SpireEmbedTagResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ResponseStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DataBatch results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_results(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SpireEmbedTagResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SpireEmbedTagResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ResponseStatus status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DataBatch results = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SpireEmbedTagResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SpireEmbedTagResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SpireEmbedTagResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SpireEmbedTagResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::status(this), output);
  }

  // .DataBatch results = 2;
  if (this->has_results()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::results(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SpireEmbedTagResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* SpireEmbedTagResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpireEmbedTagResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::status(this), target);
  }

  // .DataBatch results = 2;
  if (this->has_results()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::results(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpireEmbedTagResponse)
  return target;
}

size_t SpireEmbedTagResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpireEmbedTagResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .DataBatch results = 2;
  if (this->has_results()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *results_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpireEmbedTagResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpireEmbedTagResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SpireEmbedTagResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpireEmbedTagResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpireEmbedTagResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpireEmbedTagResponse)
    MergeFrom(*source);
  }
}

void SpireEmbedTagResponse::MergeFrom(const SpireEmbedTagResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpireEmbedTagResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    mutable_status()->::ResponseStatus::MergeFrom(from.status());
  }
  if (from.has_results()) {
    mutable_results()->::DataBatch::MergeFrom(from.results());
  }
}

void SpireEmbedTagResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpireEmbedTagResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpireEmbedTagResponse::CopyFrom(const SpireEmbedTagResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpireEmbedTagResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpireEmbedTagResponse::IsInitialized() const {
  return true;
}

void SpireEmbedTagResponse::InternalSwap(SpireEmbedTagResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(results_, other->results_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpireEmbedTagResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpireSavedOutputRequest::InitAsDefaultInstance() {
  ::_SpireSavedOutputRequest_default_instance_._instance.get_mutable()->meta_ = const_cast< ::RequestMeta*>(
      ::RequestMeta::internal_default_instance());
  ::_SpireSavedOutputRequest_default_instance_._instance.get_mutable()->data_ = const_cast< ::DataBatch*>(
      ::DataBatch::internal_default_instance());
}
class SpireSavedOutputRequest::_Internal {
 public:
  static const ::RequestMeta& meta(const SpireSavedOutputRequest* msg);
  static const ::DataBatch& data(const SpireSavedOutputRequest* msg);
};

const ::RequestMeta&
SpireSavedOutputRequest::_Internal::meta(const SpireSavedOutputRequest* msg) {
  return *msg->meta_;
}
const ::DataBatch&
SpireSavedOutputRequest::_Internal::data(const SpireSavedOutputRequest* msg) {
  return *msg->data_;
}
void SpireSavedOutputRequest::clear_meta() {
  if (GetArenaNoVirtual() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
}
void SpireSavedOutputRequest::clear_data() {
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
SpireSavedOutputRequest::SpireSavedOutputRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SpireSavedOutputRequest)
}
SpireSavedOutputRequest::SpireSavedOutputRequest(const SpireSavedOutputRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      store_layers_(from.store_layers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_meta()) {
    meta_ = new ::RequestMeta(*from.meta_);
  } else {
    meta_ = nullptr;
  }
  if (from.has_data()) {
    data_ = new ::DataBatch(*from.data_);
  } else {
    data_ = nullptr;
  }
  ::memcpy(&reduce_num_views_, &from.reduce_num_views_,
    static_cast<size_t>(reinterpret_cast<char*>(&topk_) -
    reinterpret_cast<char*>(&reduce_num_views_)) + sizeof(topk_));
  // @@protoc_insertion_point(copy_constructor:SpireSavedOutputRequest)
}

void SpireSavedOutputRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpireSavedOutputRequest_proto_2fspire_2fspire_2eproto.base);
  ::memset(&meta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&topk_) -
      reinterpret_cast<char*>(&meta_)) + sizeof(topk_));
}

SpireSavedOutputRequest::~SpireSavedOutputRequest() {
  // @@protoc_insertion_point(destructor:SpireSavedOutputRequest)
  SharedDtor();
}

void SpireSavedOutputRequest::SharedDtor() {
  if (this != internal_default_instance()) delete meta_;
  if (this != internal_default_instance()) delete data_;
}

void SpireSavedOutputRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpireSavedOutputRequest& SpireSavedOutputRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpireSavedOutputRequest_proto_2fspire_2fspire_2eproto.base);
  return *internal_default_instance();
}


void SpireSavedOutputRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SpireSavedOutputRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  store_layers_.Clear();
  if (GetArenaNoVirtual() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  ::memset(&reduce_num_views_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&topk_) -
      reinterpret_cast<char*>(&reduce_num_views_)) + sizeof(topk_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SpireSavedOutputRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .RequestMeta meta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DataBatch data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string store_layers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_store_layers(), ptr, ctx, "SpireSavedOutputRequest.store_layers");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // bool reduce_num_views = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          reduce_num_views_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool reduce_output_space = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          reduce_output_space_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float fps = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          fps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 topk = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          topk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SpireSavedOutputRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SpireSavedOutputRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .RequestMeta meta = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_meta()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DataBatch data = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string store_layers = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_store_layers()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->store_layers(this->store_layers_size() - 1).data(),
            static_cast<int>(this->store_layers(this->store_layers_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "SpireSavedOutputRequest.store_layers"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool reduce_num_views = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reduce_num_views_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool reduce_output_space = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reduce_output_space_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fps = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 topk = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &topk_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SpireSavedOutputRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SpireSavedOutputRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SpireSavedOutputRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SpireSavedOutputRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::meta(this), output);
  }

  // .DataBatch data = 2;
  if (this->has_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::data(this), output);
  }

  // repeated string store_layers = 3;
  for (int i = 0, n = this->store_layers_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->store_layers(i).data(), static_cast<int>(this->store_layers(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SpireSavedOutputRequest.store_layers");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      3, this->store_layers(i), output);
  }

  // bool reduce_num_views = 4;
  if (this->reduce_num_views() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->reduce_num_views(), output);
  }

  // bool reduce_output_space = 5;
  if (this->reduce_output_space() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->reduce_output_space(), output);
  }

  // float fps = 6;
  if (!(this->fps() <= 0 && this->fps() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->fps(), output);
  }

  // int32 topk = 7;
  if (this->topk() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->topk(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SpireSavedOutputRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* SpireSavedOutputRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpireSavedOutputRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::meta(this), target);
  }

  // .DataBatch data = 2;
  if (this->has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::data(this), target);
  }

  // repeated string store_layers = 3;
  for (int i = 0, n = this->store_layers_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->store_layers(i).data(), static_cast<int>(this->store_layers(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SpireSavedOutputRequest.store_layers");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(3, this->store_layers(i), target);
  }

  // bool reduce_num_views = 4;
  if (this->reduce_num_views() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->reduce_num_views(), target);
  }

  // bool reduce_output_space = 5;
  if (this->reduce_output_space() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->reduce_output_space(), target);
  }

  // float fps = 6;
  if (!(this->fps() <= 0 && this->fps() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->fps(), target);
  }

  // int32 topk = 7;
  if (this->topk() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->topk(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpireSavedOutputRequest)
  return target;
}

size_t SpireSavedOutputRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpireSavedOutputRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string store_layers = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->store_layers_size());
  for (int i = 0, n = this->store_layers_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->store_layers(i));
  }

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meta_);
  }

  // .DataBatch data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // bool reduce_num_views = 4;
  if (this->reduce_num_views() != 0) {
    total_size += 1 + 1;
  }

  // bool reduce_output_space = 5;
  if (this->reduce_output_space() != 0) {
    total_size += 1 + 1;
  }

  // float fps = 6;
  if (!(this->fps() <= 0 && this->fps() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 topk = 7;
  if (this->topk() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->topk());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpireSavedOutputRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpireSavedOutputRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SpireSavedOutputRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpireSavedOutputRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpireSavedOutputRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpireSavedOutputRequest)
    MergeFrom(*source);
  }
}

void SpireSavedOutputRequest::MergeFrom(const SpireSavedOutputRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpireSavedOutputRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  store_layers_.MergeFrom(from.store_layers_);
  if (from.has_meta()) {
    mutable_meta()->::RequestMeta::MergeFrom(from.meta());
  }
  if (from.has_data()) {
    mutable_data()->::DataBatch::MergeFrom(from.data());
  }
  if (from.reduce_num_views() != 0) {
    set_reduce_num_views(from.reduce_num_views());
  }
  if (from.reduce_output_space() != 0) {
    set_reduce_output_space(from.reduce_output_space());
  }
  if (!(from.fps() <= 0 && from.fps() >= 0)) {
    set_fps(from.fps());
  }
  if (from.topk() != 0) {
    set_topk(from.topk());
  }
}

void SpireSavedOutputRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpireSavedOutputRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpireSavedOutputRequest::CopyFrom(const SpireSavedOutputRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpireSavedOutputRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpireSavedOutputRequest::IsInitialized() const {
  return true;
}

void SpireSavedOutputRequest::InternalSwap(SpireSavedOutputRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  store_layers_.InternalSwap(CastToBase(&other->store_layers_));
  swap(meta_, other->meta_);
  swap(data_, other->data_);
  swap(reduce_num_views_, other->reduce_num_views_);
  swap(reduce_output_space_, other->reduce_output_space_);
  swap(fps_, other->fps_);
  swap(topk_, other->topk_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpireSavedOutputRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpireSavedOutputResponse::InitAsDefaultInstance() {
  ::_SpireSavedOutputResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::ResponseStatus*>(
      ::ResponseStatus::internal_default_instance());
  ::_SpireSavedOutputResponse_default_instance_._instance.get_mutable()->results_ = const_cast< ::DataBatch*>(
      ::DataBatch::internal_default_instance());
}
class SpireSavedOutputResponse::_Internal {
 public:
  static const ::ResponseStatus& status(const SpireSavedOutputResponse* msg);
  static const ::DataBatch& results(const SpireSavedOutputResponse* msg);
};

const ::ResponseStatus&
SpireSavedOutputResponse::_Internal::status(const SpireSavedOutputResponse* msg) {
  return *msg->status_;
}
const ::DataBatch&
SpireSavedOutputResponse::_Internal::results(const SpireSavedOutputResponse* msg) {
  return *msg->results_;
}
void SpireSavedOutputResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SpireSavedOutputResponse::clear_results() {
  if (GetArenaNoVirtual() == nullptr && results_ != nullptr) {
    delete results_;
  }
  results_ = nullptr;
}
SpireSavedOutputResponse::SpireSavedOutputResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SpireSavedOutputResponse)
}
SpireSavedOutputResponse::SpireSavedOutputResponse(const SpireSavedOutputResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::ResponseStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from.has_results()) {
    results_ = new ::DataBatch(*from.results_);
  } else {
    results_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SpireSavedOutputResponse)
}

void SpireSavedOutputResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpireSavedOutputResponse_proto_2fspire_2fspire_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&results_) -
      reinterpret_cast<char*>(&status_)) + sizeof(results_));
}

SpireSavedOutputResponse::~SpireSavedOutputResponse() {
  // @@protoc_insertion_point(destructor:SpireSavedOutputResponse)
  SharedDtor();
}

void SpireSavedOutputResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete results_;
}

void SpireSavedOutputResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpireSavedOutputResponse& SpireSavedOutputResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpireSavedOutputResponse_proto_2fspire_2fspire_2eproto.base);
  return *internal_default_instance();
}


void SpireSavedOutputResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SpireSavedOutputResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && results_ != nullptr) {
    delete results_;
  }
  results_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SpireSavedOutputResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ResponseStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DataBatch results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_results(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SpireSavedOutputResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SpireSavedOutputResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ResponseStatus status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DataBatch results = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SpireSavedOutputResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SpireSavedOutputResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SpireSavedOutputResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SpireSavedOutputResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::status(this), output);
  }

  // .DataBatch results = 2;
  if (this->has_results()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::results(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SpireSavedOutputResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* SpireSavedOutputResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpireSavedOutputResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::status(this), target);
  }

  // .DataBatch results = 2;
  if (this->has_results()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::results(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpireSavedOutputResponse)
  return target;
}

size_t SpireSavedOutputResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpireSavedOutputResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .DataBatch results = 2;
  if (this->has_results()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *results_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpireSavedOutputResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpireSavedOutputResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SpireSavedOutputResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpireSavedOutputResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpireSavedOutputResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpireSavedOutputResponse)
    MergeFrom(*source);
  }
}

void SpireSavedOutputResponse::MergeFrom(const SpireSavedOutputResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpireSavedOutputResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    mutable_status()->::ResponseStatus::MergeFrom(from.status());
  }
  if (from.has_results()) {
    mutable_results()->::DataBatch::MergeFrom(from.results());
  }
}

void SpireSavedOutputResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpireSavedOutputResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpireSavedOutputResponse::CopyFrom(const SpireSavedOutputResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpireSavedOutputResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpireSavedOutputResponse::IsInitialized() const {
  return true;
}

void SpireSavedOutputResponse::InternalSwap(SpireSavedOutputResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(results_, other->results_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpireSavedOutputResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpireInstanceSegmentRequest::InitAsDefaultInstance() {
  ::_SpireInstanceSegmentRequest_default_instance_._instance.get_mutable()->meta_ = const_cast< ::RequestMeta*>(
      ::RequestMeta::internal_default_instance());
  ::_SpireInstanceSegmentRequest_default_instance_._instance.get_mutable()->data_ = const_cast< ::DataBatch*>(
      ::DataBatch::internal_default_instance());
}
class SpireInstanceSegmentRequest::_Internal {
 public:
  static const ::RequestMeta& meta(const SpireInstanceSegmentRequest* msg);
  static const ::DataBatch& data(const SpireInstanceSegmentRequest* msg);
};

const ::RequestMeta&
SpireInstanceSegmentRequest::_Internal::meta(const SpireInstanceSegmentRequest* msg) {
  return *msg->meta_;
}
const ::DataBatch&
SpireInstanceSegmentRequest::_Internal::data(const SpireInstanceSegmentRequest* msg) {
  return *msg->data_;
}
void SpireInstanceSegmentRequest::clear_meta() {
  if (GetArenaNoVirtual() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
}
void SpireInstanceSegmentRequest::clear_data() {
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
void SpireInstanceSegmentRequest::clear_tags_to_watch() {
  tags_to_watch_.Clear();
}
SpireInstanceSegmentRequest::SpireInstanceSegmentRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SpireInstanceSegmentRequest)
}
SpireInstanceSegmentRequest::SpireInstanceSegmentRequest(const SpireInstanceSegmentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ops_(from.ops_),
      tags_to_watch_(from.tags_to_watch_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_meta()) {
    meta_ = new ::RequestMeta(*from.meta_);
  } else {
    meta_ = nullptr;
  }
  if (from.has_data()) {
    data_ = new ::DataBatch(*from.data_);
  } else {
    data_ = nullptr;
  }
  ::memcpy(&topk_, &from.topk_,
    static_cast<size_t>(reinterpret_cast<char*>(&fps_) -
    reinterpret_cast<char*>(&topk_)) + sizeof(fps_));
  // @@protoc_insertion_point(copy_constructor:SpireInstanceSegmentRequest)
}

void SpireInstanceSegmentRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpireInstanceSegmentRequest_proto_2fspire_2fspire_2eproto.base);
  ::memset(&meta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fps_) -
      reinterpret_cast<char*>(&meta_)) + sizeof(fps_));
}

SpireInstanceSegmentRequest::~SpireInstanceSegmentRequest() {
  // @@protoc_insertion_point(destructor:SpireInstanceSegmentRequest)
  SharedDtor();
}

void SpireInstanceSegmentRequest::SharedDtor() {
  if (this != internal_default_instance()) delete meta_;
  if (this != internal_default_instance()) delete data_;
}

void SpireInstanceSegmentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpireInstanceSegmentRequest& SpireInstanceSegmentRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpireInstanceSegmentRequest_proto_2fspire_2fspire_2eproto.base);
  return *internal_default_instance();
}


void SpireInstanceSegmentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SpireInstanceSegmentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ops_.Clear();
  tags_to_watch_.Clear();
  if (GetArenaNoVirtual() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  ::memset(&topk_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fps_) -
      reinterpret_cast<char*>(&topk_)) + sizeof(fps_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SpireInstanceSegmentRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .RequestMeta meta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DataBatch data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SpireOps ops = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_ops(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          add_ops(static_cast<::SpireOps>(val));
        } else goto handle_unusual;
        continue;
      // int32 topk = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          topk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float fps = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          fps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .Tag tags_to_watch = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_tags_to_watch(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SpireInstanceSegmentRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SpireInstanceSegmentRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .RequestMeta meta = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_meta()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DataBatch data = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SpireOps ops = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          ::PROTOBUF_NAMESPACE_ID::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value = 0;
            DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_ops(static_cast< ::SpireOps >(value));
          }
          input->PopLimit(limit);
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_ops(static_cast< ::SpireOps >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 topk = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &topk_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fps = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Tag tags_to_watch = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_tags_to_watch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SpireInstanceSegmentRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SpireInstanceSegmentRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SpireInstanceSegmentRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SpireInstanceSegmentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::meta(this), output);
  }

  // .DataBatch data = 2;
  if (this->has_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::data(this), output);
  }

  // repeated .SpireOps ops = 3;
  if (this->ops_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_ops_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->ops_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTag(
      this->ops(i), output);
  }

  // int32 topk = 4;
  if (this->topk() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->topk(), output);
  }

  // float fps = 5;
  if (!(this->fps() <= 0 && this->fps() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->fps(), output);
  }

  // repeated .Tag tags_to_watch = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tags_to_watch_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->tags_to_watch(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SpireInstanceSegmentRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* SpireInstanceSegmentRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpireInstanceSegmentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::meta(this), target);
  }

  // .DataBatch data = 2;
  if (this->has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::data(this), target);
  }

  // repeated .SpireOps ops = 3;
  if (this->ops_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(      _ops_cached_byte_size_.load(std::memory_order_relaxed),
        target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->ops_, target);
  }

  // int32 topk = 4;
  if (this->topk() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->topk(), target);
  }

  // float fps = 5;
  if (!(this->fps() <= 0 && this->fps() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->fps(), target);
  }

  // repeated .Tag tags_to_watch = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tags_to_watch_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->tags_to_watch(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpireInstanceSegmentRequest)
  return target;
}

size_t SpireInstanceSegmentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpireInstanceSegmentRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SpireOps ops = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->ops_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->ops(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ops_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .Tag tags_to_watch = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->tags_to_watch_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->tags_to_watch(static_cast<int>(i)));
    }
  }

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meta_);
  }

  // .DataBatch data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // int32 topk = 4;
  if (this->topk() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->topk());
  }

  // float fps = 5;
  if (!(this->fps() <= 0 && this->fps() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpireInstanceSegmentRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpireInstanceSegmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SpireInstanceSegmentRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpireInstanceSegmentRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpireInstanceSegmentRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpireInstanceSegmentRequest)
    MergeFrom(*source);
  }
}

void SpireInstanceSegmentRequest::MergeFrom(const SpireInstanceSegmentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpireInstanceSegmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ops_.MergeFrom(from.ops_);
  tags_to_watch_.MergeFrom(from.tags_to_watch_);
  if (from.has_meta()) {
    mutable_meta()->::RequestMeta::MergeFrom(from.meta());
  }
  if (from.has_data()) {
    mutable_data()->::DataBatch::MergeFrom(from.data());
  }
  if (from.topk() != 0) {
    set_topk(from.topk());
  }
  if (!(from.fps() <= 0 && from.fps() >= 0)) {
    set_fps(from.fps());
  }
}

void SpireInstanceSegmentRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpireInstanceSegmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpireInstanceSegmentRequest::CopyFrom(const SpireInstanceSegmentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpireInstanceSegmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpireInstanceSegmentRequest::IsInitialized() const {
  return true;
}

void SpireInstanceSegmentRequest::InternalSwap(SpireInstanceSegmentRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ops_.InternalSwap(&other->ops_);
  CastToBase(&tags_to_watch_)->InternalSwap(CastToBase(&other->tags_to_watch_));
  swap(meta_, other->meta_);
  swap(data_, other->data_);
  swap(topk_, other->topk_);
  swap(fps_, other->fps_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpireInstanceSegmentRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpireInstanceSegmentResponse::InitAsDefaultInstance() {
  ::_SpireInstanceSegmentResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::ResponseStatus*>(
      ::ResponseStatus::internal_default_instance());
  ::_SpireInstanceSegmentResponse_default_instance_._instance.get_mutable()->results_ = const_cast< ::DataBatch*>(
      ::DataBatch::internal_default_instance());
}
class SpireInstanceSegmentResponse::_Internal {
 public:
  static const ::ResponseStatus& status(const SpireInstanceSegmentResponse* msg);
  static const ::DataBatch& results(const SpireInstanceSegmentResponse* msg);
};

const ::ResponseStatus&
SpireInstanceSegmentResponse::_Internal::status(const SpireInstanceSegmentResponse* msg) {
  return *msg->status_;
}
const ::DataBatch&
SpireInstanceSegmentResponse::_Internal::results(const SpireInstanceSegmentResponse* msg) {
  return *msg->results_;
}
void SpireInstanceSegmentResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SpireInstanceSegmentResponse::clear_results() {
  if (GetArenaNoVirtual() == nullptr && results_ != nullptr) {
    delete results_;
  }
  results_ = nullptr;
}
SpireInstanceSegmentResponse::SpireInstanceSegmentResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SpireInstanceSegmentResponse)
}
SpireInstanceSegmentResponse::SpireInstanceSegmentResponse(const SpireInstanceSegmentResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::ResponseStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from.has_results()) {
    results_ = new ::DataBatch(*from.results_);
  } else {
    results_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SpireInstanceSegmentResponse)
}

void SpireInstanceSegmentResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpireInstanceSegmentResponse_proto_2fspire_2fspire_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&results_) -
      reinterpret_cast<char*>(&status_)) + sizeof(results_));
}

SpireInstanceSegmentResponse::~SpireInstanceSegmentResponse() {
  // @@protoc_insertion_point(destructor:SpireInstanceSegmentResponse)
  SharedDtor();
}

void SpireInstanceSegmentResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete results_;
}

void SpireInstanceSegmentResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpireInstanceSegmentResponse& SpireInstanceSegmentResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpireInstanceSegmentResponse_proto_2fspire_2fspire_2eproto.base);
  return *internal_default_instance();
}


void SpireInstanceSegmentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SpireInstanceSegmentResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && results_ != nullptr) {
    delete results_;
  }
  results_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SpireInstanceSegmentResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ResponseStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DataBatch results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_results(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SpireInstanceSegmentResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SpireInstanceSegmentResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ResponseStatus status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DataBatch results = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SpireInstanceSegmentResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SpireInstanceSegmentResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SpireInstanceSegmentResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SpireInstanceSegmentResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::status(this), output);
  }

  // .DataBatch results = 2;
  if (this->has_results()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::results(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SpireInstanceSegmentResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* SpireInstanceSegmentResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpireInstanceSegmentResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::status(this), target);
  }

  // .DataBatch results = 2;
  if (this->has_results()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::results(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpireInstanceSegmentResponse)
  return target;
}

size_t SpireInstanceSegmentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpireInstanceSegmentResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .DataBatch results = 2;
  if (this->has_results()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *results_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpireInstanceSegmentResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpireInstanceSegmentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SpireInstanceSegmentResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpireInstanceSegmentResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpireInstanceSegmentResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpireInstanceSegmentResponse)
    MergeFrom(*source);
  }
}

void SpireInstanceSegmentResponse::MergeFrom(const SpireInstanceSegmentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpireInstanceSegmentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    mutable_status()->::ResponseStatus::MergeFrom(from.status());
  }
  if (from.has_results()) {
    mutable_results()->::DataBatch::MergeFrom(from.results());
  }
}

void SpireInstanceSegmentResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpireInstanceSegmentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpireInstanceSegmentResponse::CopyFrom(const SpireInstanceSegmentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpireInstanceSegmentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpireInstanceSegmentResponse::IsInitialized() const {
  return true;
}

void SpireInstanceSegmentResponse::InternalSwap(SpireInstanceSegmentResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(results_, other->results_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpireInstanceSegmentResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpireDetectEmbedTagRequest::InitAsDefaultInstance() {
  ::_SpireDetectEmbedTagRequest_default_instance_._instance.get_mutable()->meta_ = const_cast< ::RequestMeta*>(
      ::RequestMeta::internal_default_instance());
  ::_SpireDetectEmbedTagRequest_default_instance_._instance.get_mutable()->data_ = const_cast< ::DataBatch*>(
      ::DataBatch::internal_default_instance());
}
class SpireDetectEmbedTagRequest::_Internal {
 public:
  static const ::RequestMeta& meta(const SpireDetectEmbedTagRequest* msg);
  static const ::DataBatch& data(const SpireDetectEmbedTagRequest* msg);
};

const ::RequestMeta&
SpireDetectEmbedTagRequest::_Internal::meta(const SpireDetectEmbedTagRequest* msg) {
  return *msg->meta_;
}
const ::DataBatch&
SpireDetectEmbedTagRequest::_Internal::data(const SpireDetectEmbedTagRequest* msg) {
  return *msg->data_;
}
void SpireDetectEmbedTagRequest::clear_meta() {
  if (GetArenaNoVirtual() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
}
void SpireDetectEmbedTagRequest::clear_data() {
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
void SpireDetectEmbedTagRequest::clear_tags_to_watch() {
  tags_to_watch_.Clear();
}
SpireDetectEmbedTagRequest::SpireDetectEmbedTagRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SpireDetectEmbedTagRequest)
}
SpireDetectEmbedTagRequest::SpireDetectEmbedTagRequest(const SpireDetectEmbedTagRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ops_(from.ops_),
      tags_to_watch_(from.tags_to_watch_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_meta()) {
    meta_ = new ::RequestMeta(*from.meta_);
  } else {
    meta_ = nullptr;
  }
  if (from.has_data()) {
    data_ = new ::DataBatch(*from.data_);
  } else {
    data_ = nullptr;
  }
  ::memcpy(&topk_, &from.topk_,
    static_cast<size_t>(reinterpret_cast<char*>(&detection_score_threshold_) -
    reinterpret_cast<char*>(&topk_)) + sizeof(detection_score_threshold_));
  // @@protoc_insertion_point(copy_constructor:SpireDetectEmbedTagRequest)
}

void SpireDetectEmbedTagRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpireDetectEmbedTagRequest_proto_2fspire_2fspire_2eproto.base);
  ::memset(&meta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&detection_score_threshold_) -
      reinterpret_cast<char*>(&meta_)) + sizeof(detection_score_threshold_));
}

SpireDetectEmbedTagRequest::~SpireDetectEmbedTagRequest() {
  // @@protoc_insertion_point(destructor:SpireDetectEmbedTagRequest)
  SharedDtor();
}

void SpireDetectEmbedTagRequest::SharedDtor() {
  if (this != internal_default_instance()) delete meta_;
  if (this != internal_default_instance()) delete data_;
}

void SpireDetectEmbedTagRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpireDetectEmbedTagRequest& SpireDetectEmbedTagRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpireDetectEmbedTagRequest_proto_2fspire_2fspire_2eproto.base);
  return *internal_default_instance();
}


void SpireDetectEmbedTagRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SpireDetectEmbedTagRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ops_.Clear();
  tags_to_watch_.Clear();
  if (GetArenaNoVirtual() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  ::memset(&topk_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&detection_score_threshold_) -
      reinterpret_cast<char*>(&topk_)) + sizeof(detection_score_threshold_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SpireDetectEmbedTagRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .RequestMeta meta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DataBatch data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SpireOps ops = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_ops(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          add_ops(static_cast<::SpireOps>(val));
        } else goto handle_unusual;
        continue;
      // int32 topk = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          topk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float fps = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          fps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .Tag tags_to_watch = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_tags_to_watch(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // float detection_score_threshold = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          detection_score_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SpireDetectEmbedTagRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SpireDetectEmbedTagRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .RequestMeta meta = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_meta()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DataBatch data = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SpireOps ops = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          ::PROTOBUF_NAMESPACE_ID::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value = 0;
            DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_ops(static_cast< ::SpireOps >(value));
          }
          input->PopLimit(limit);
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_ops(static_cast< ::SpireOps >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 topk = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &topk_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fps = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Tag tags_to_watch = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_tags_to_watch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float detection_score_threshold = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (61 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &detection_score_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SpireDetectEmbedTagRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SpireDetectEmbedTagRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SpireDetectEmbedTagRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SpireDetectEmbedTagRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::meta(this), output);
  }

  // .DataBatch data = 2;
  if (this->has_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::data(this), output);
  }

  // repeated .SpireOps ops = 3;
  if (this->ops_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_ops_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->ops_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTag(
      this->ops(i), output);
  }

  // int32 topk = 4;
  if (this->topk() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->topk(), output);
  }

  // float fps = 5;
  if (!(this->fps() <= 0 && this->fps() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->fps(), output);
  }

  // repeated .Tag tags_to_watch = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tags_to_watch_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->tags_to_watch(static_cast<int>(i)),
      output);
  }

  // float detection_score_threshold = 7;
  if (!(this->detection_score_threshold() <= 0 && this->detection_score_threshold() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(7, this->detection_score_threshold(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SpireDetectEmbedTagRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* SpireDetectEmbedTagRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpireDetectEmbedTagRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::meta(this), target);
  }

  // .DataBatch data = 2;
  if (this->has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::data(this), target);
  }

  // repeated .SpireOps ops = 3;
  if (this->ops_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(      _ops_cached_byte_size_.load(std::memory_order_relaxed),
        target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->ops_, target);
  }

  // int32 topk = 4;
  if (this->topk() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->topk(), target);
  }

  // float fps = 5;
  if (!(this->fps() <= 0 && this->fps() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->fps(), target);
  }

  // repeated .Tag tags_to_watch = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tags_to_watch_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->tags_to_watch(static_cast<int>(i)), target);
  }

  // float detection_score_threshold = 7;
  if (!(this->detection_score_threshold() <= 0 && this->detection_score_threshold() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->detection_score_threshold(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpireDetectEmbedTagRequest)
  return target;
}

size_t SpireDetectEmbedTagRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpireDetectEmbedTagRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SpireOps ops = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->ops_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->ops(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ops_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .Tag tags_to_watch = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->tags_to_watch_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->tags_to_watch(static_cast<int>(i)));
    }
  }

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meta_);
  }

  // .DataBatch data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // int32 topk = 4;
  if (this->topk() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->topk());
  }

  // float fps = 5;
  if (!(this->fps() <= 0 && this->fps() >= 0)) {
    total_size += 1 + 4;
  }

  // float detection_score_threshold = 7;
  if (!(this->detection_score_threshold() <= 0 && this->detection_score_threshold() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpireDetectEmbedTagRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpireDetectEmbedTagRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SpireDetectEmbedTagRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpireDetectEmbedTagRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpireDetectEmbedTagRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpireDetectEmbedTagRequest)
    MergeFrom(*source);
  }
}

void SpireDetectEmbedTagRequest::MergeFrom(const SpireDetectEmbedTagRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpireDetectEmbedTagRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ops_.MergeFrom(from.ops_);
  tags_to_watch_.MergeFrom(from.tags_to_watch_);
  if (from.has_meta()) {
    mutable_meta()->::RequestMeta::MergeFrom(from.meta());
  }
  if (from.has_data()) {
    mutable_data()->::DataBatch::MergeFrom(from.data());
  }
  if (from.topk() != 0) {
    set_topk(from.topk());
  }
  if (!(from.fps() <= 0 && from.fps() >= 0)) {
    set_fps(from.fps());
  }
  if (!(from.detection_score_threshold() <= 0 && from.detection_score_threshold() >= 0)) {
    set_detection_score_threshold(from.detection_score_threshold());
  }
}

void SpireDetectEmbedTagRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpireDetectEmbedTagRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpireDetectEmbedTagRequest::CopyFrom(const SpireDetectEmbedTagRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpireDetectEmbedTagRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpireDetectEmbedTagRequest::IsInitialized() const {
  return true;
}

void SpireDetectEmbedTagRequest::InternalSwap(SpireDetectEmbedTagRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ops_.InternalSwap(&other->ops_);
  CastToBase(&tags_to_watch_)->InternalSwap(CastToBase(&other->tags_to_watch_));
  swap(meta_, other->meta_);
  swap(data_, other->data_);
  swap(topk_, other->topk_);
  swap(fps_, other->fps_);
  swap(detection_score_threshold_, other->detection_score_threshold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpireDetectEmbedTagRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpireDetectEmbedTagResponse::InitAsDefaultInstance() {
  ::_SpireDetectEmbedTagResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::ResponseStatus*>(
      ::ResponseStatus::internal_default_instance());
  ::_SpireDetectEmbedTagResponse_default_instance_._instance.get_mutable()->results_ = const_cast< ::DataBatch*>(
      ::DataBatch::internal_default_instance());
}
class SpireDetectEmbedTagResponse::_Internal {
 public:
  static const ::ResponseStatus& status(const SpireDetectEmbedTagResponse* msg);
  static const ::DataBatch& results(const SpireDetectEmbedTagResponse* msg);
};

const ::ResponseStatus&
SpireDetectEmbedTagResponse::_Internal::status(const SpireDetectEmbedTagResponse* msg) {
  return *msg->status_;
}
const ::DataBatch&
SpireDetectEmbedTagResponse::_Internal::results(const SpireDetectEmbedTagResponse* msg) {
  return *msg->results_;
}
void SpireDetectEmbedTagResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SpireDetectEmbedTagResponse::clear_results() {
  if (GetArenaNoVirtual() == nullptr && results_ != nullptr) {
    delete results_;
  }
  results_ = nullptr;
}
SpireDetectEmbedTagResponse::SpireDetectEmbedTagResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SpireDetectEmbedTagResponse)
}
SpireDetectEmbedTagResponse::SpireDetectEmbedTagResponse(const SpireDetectEmbedTagResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::ResponseStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from.has_results()) {
    results_ = new ::DataBatch(*from.results_);
  } else {
    results_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SpireDetectEmbedTagResponse)
}

void SpireDetectEmbedTagResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpireDetectEmbedTagResponse_proto_2fspire_2fspire_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&results_) -
      reinterpret_cast<char*>(&status_)) + sizeof(results_));
}

SpireDetectEmbedTagResponse::~SpireDetectEmbedTagResponse() {
  // @@protoc_insertion_point(destructor:SpireDetectEmbedTagResponse)
  SharedDtor();
}

void SpireDetectEmbedTagResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete results_;
}

void SpireDetectEmbedTagResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpireDetectEmbedTagResponse& SpireDetectEmbedTagResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpireDetectEmbedTagResponse_proto_2fspire_2fspire_2eproto.base);
  return *internal_default_instance();
}


void SpireDetectEmbedTagResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SpireDetectEmbedTagResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && results_ != nullptr) {
    delete results_;
  }
  results_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SpireDetectEmbedTagResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ResponseStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DataBatch results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_results(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SpireDetectEmbedTagResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SpireDetectEmbedTagResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ResponseStatus status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DataBatch results = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SpireDetectEmbedTagResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SpireDetectEmbedTagResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SpireDetectEmbedTagResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SpireDetectEmbedTagResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::status(this), output);
  }

  // .DataBatch results = 2;
  if (this->has_results()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::results(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SpireDetectEmbedTagResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* SpireDetectEmbedTagResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpireDetectEmbedTagResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::status(this), target);
  }

  // .DataBatch results = 2;
  if (this->has_results()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::results(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpireDetectEmbedTagResponse)
  return target;
}

size_t SpireDetectEmbedTagResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpireDetectEmbedTagResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .DataBatch results = 2;
  if (this->has_results()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *results_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpireDetectEmbedTagResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpireDetectEmbedTagResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SpireDetectEmbedTagResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpireDetectEmbedTagResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpireDetectEmbedTagResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpireDetectEmbedTagResponse)
    MergeFrom(*source);
  }
}

void SpireDetectEmbedTagResponse::MergeFrom(const SpireDetectEmbedTagResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpireDetectEmbedTagResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    mutable_status()->::ResponseStatus::MergeFrom(from.status());
  }
  if (from.has_results()) {
    mutable_results()->::DataBatch::MergeFrom(from.results());
  }
}

void SpireDetectEmbedTagResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpireDetectEmbedTagResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpireDetectEmbedTagResponse::CopyFrom(const SpireDetectEmbedTagResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpireDetectEmbedTagResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpireDetectEmbedTagResponse::IsInitialized() const {
  return true;
}

void SpireDetectEmbedTagResponse::InternalSwap(SpireDetectEmbedTagResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(results_, other->results_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpireDetectEmbedTagResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::FaceDetectConfig* Arena::CreateMaybeMessage< ::FaceDetectConfig >(Arena* arena) {
  return Arena::CreateInternal< ::FaceDetectConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::BBoxCropConfig* Arena::CreateMaybeMessage< ::BBoxCropConfig >(Arena* arena) {
  return Arena::CreateInternal< ::BBoxCropConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::MultiHeadConfig* Arena::CreateMaybeMessage< ::MultiHeadConfig >(Arena* arena) {
  return Arena::CreateInternal< ::MultiHeadConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::SpireConfig_HeadsEntry_DoNotUse* Arena::CreateMaybeMessage< ::SpireConfig_HeadsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::SpireConfig_HeadsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::SpireConfig_CpuResourcesEntry_DoNotUse* Arena::CreateMaybeMessage< ::SpireConfig_CpuResourcesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::SpireConfig_CpuResourcesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::SpireConfig_ReplicasEntry_DoNotUse* Arena::CreateMaybeMessage< ::SpireConfig_ReplicasEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::SpireConfig_ReplicasEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::SpireConfig* Arena::CreateMaybeMessage< ::SpireConfig >(Arena* arena) {
  return Arena::CreateInternal< ::SpireConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::Replicas* Arena::CreateMaybeMessage< ::Replicas >(Arena* arena) {
  return Arena::CreateInternal< ::Replicas >(arena);
}
template<> PROTOBUF_NOINLINE ::CPUResources* Arena::CreateMaybeMessage< ::CPUResources >(Arena* arena) {
  return Arena::CreateInternal< ::CPUResources >(arena);
}
template<> PROTOBUF_NOINLINE ::SpireMeta* Arena::CreateMaybeMessage< ::SpireMeta >(Arena* arena) {
  return Arena::CreateInternal< ::SpireMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::SpireGetConfigRequest* Arena::CreateMaybeMessage< ::SpireGetConfigRequest >(Arena* arena) {
  return Arena::CreateInternal< ::SpireGetConfigRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SpireGetConfigResponse* Arena::CreateMaybeMessage< ::SpireGetConfigResponse >(Arena* arena) {
  return Arena::CreateInternal< ::SpireGetConfigResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SpireSetConfigRequest* Arena::CreateMaybeMessage< ::SpireSetConfigRequest >(Arena* arena) {
  return Arena::CreateInternal< ::SpireSetConfigRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SpireSetConfigResponse* Arena::CreateMaybeMessage< ::SpireSetConfigResponse >(Arena* arena) {
  return Arena::CreateInternal< ::SpireSetConfigResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SpireGetStateRequest* Arena::CreateMaybeMessage< ::SpireGetStateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::SpireGetStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SpireGetStateResponse* Arena::CreateMaybeMessage< ::SpireGetStateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::SpireGetStateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SpireMaybeJITRequest* Arena::CreateMaybeMessage< ::SpireMaybeJITRequest >(Arena* arena) {
  return Arena::CreateInternal< ::SpireMaybeJITRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SpireMaybeJITResponse* Arena::CreateMaybeMessage< ::SpireMaybeJITResponse >(Arena* arena) {
  return Arena::CreateInternal< ::SpireMaybeJITResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SpireStopServingRequest* Arena::CreateMaybeMessage< ::SpireStopServingRequest >(Arena* arena) {
  return Arena::CreateInternal< ::SpireStopServingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SpireStopServingResponse* Arena::CreateMaybeMessage< ::SpireStopServingResponse >(Arena* arena) {
  return Arena::CreateInternal< ::SpireStopServingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SpireEmbedTagRequest* Arena::CreateMaybeMessage< ::SpireEmbedTagRequest >(Arena* arena) {
  return Arena::CreateInternal< ::SpireEmbedTagRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SpireEmbedTagResponse* Arena::CreateMaybeMessage< ::SpireEmbedTagResponse >(Arena* arena) {
  return Arena::CreateInternal< ::SpireEmbedTagResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SpireSavedOutputRequest* Arena::CreateMaybeMessage< ::SpireSavedOutputRequest >(Arena* arena) {
  return Arena::CreateInternal< ::SpireSavedOutputRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SpireSavedOutputResponse* Arena::CreateMaybeMessage< ::SpireSavedOutputResponse >(Arena* arena) {
  return Arena::CreateInternal< ::SpireSavedOutputResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SpireInstanceSegmentRequest* Arena::CreateMaybeMessage< ::SpireInstanceSegmentRequest >(Arena* arena) {
  return Arena::CreateInternal< ::SpireInstanceSegmentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SpireInstanceSegmentResponse* Arena::CreateMaybeMessage< ::SpireInstanceSegmentResponse >(Arena* arena) {
  return Arena::CreateInternal< ::SpireInstanceSegmentResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SpireDetectEmbedTagRequest* Arena::CreateMaybeMessage< ::SpireDetectEmbedTagRequest >(Arena* arena) {
  return Arena::CreateInternal< ::SpireDetectEmbedTagRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SpireDetectEmbedTagResponse* Arena::CreateMaybeMessage< ::SpireDetectEmbedTagResponse >(Arena* arena) {
  return Arena::CreateInternal< ::SpireDetectEmbedTagResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
