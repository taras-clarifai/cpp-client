// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/knowledge_graph/kg_py_service.proto

#include "proto/knowledge_graph/kg_py_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fdata_5fexample_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<17> scc_info_DataExample_proto_2futils_2fdata_5fexample_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2frequest_5fmeta_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RequestMeta_proto_2futils_2frequest_5fmeta_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2frequest_5fmeta_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResponseStatus_proto_2futils_2frequest_5fmeta_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Concept_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConceptEmbeddingDump_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConceptMap_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CustomerDataDump_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto;
namespace clarifai {
namespace api {
class ConceptMapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConceptMap> _instance;
} _ConceptMap_default_instance_;
class ConceptEmbeddingDumpDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConceptEmbeddingDump> _instance;
} _ConceptEmbeddingDump_default_instance_;
class CustomerDataDumpDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CustomerDataDump> _instance;
} _CustomerDataDump_default_instance_;
class PostKnowledgeGraphMatchRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostKnowledgeGraphMatchRequest> _instance;
} _PostKnowledgeGraphMatchRequest_default_instance_;
class PostKnowledgeGraphMatchResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostKnowledgeGraphMatchResponse> _instance;
} _PostKnowledgeGraphMatchResponse_default_instance_;
}  // namespace api
}  // namespace clarifai
static void InitDefaultsscc_info_ConceptEmbeddingDump_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ConceptEmbeddingDump_default_instance_;
    new (ptr) ::clarifai::api::ConceptEmbeddingDump();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ConceptEmbeddingDump::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConceptEmbeddingDump_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ConceptEmbeddingDump_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto}, {
      &scc_info_DataExample_proto_2futils_2fdata_5fexample_2eproto.base,}};

static void InitDefaultsscc_info_ConceptMap_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ConceptMap_default_instance_;
    new (ptr) ::clarifai::api::ConceptMap();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ConceptMap::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConceptMap_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ConceptMap_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto}, {
      &scc_info_Concept_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_CustomerDataDump_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_CustomerDataDump_default_instance_;
    new (ptr) ::clarifai::api::CustomerDataDump();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::CustomerDataDump::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CustomerDataDump_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_CustomerDataDump_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto}, {
      &scc_info_DataExample_proto_2futils_2fdata_5fexample_2eproto.base,}};

static void InitDefaultsscc_info_PostKnowledgeGraphMatchRequest_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostKnowledgeGraphMatchRequest_default_instance_;
    new (ptr) ::clarifai::api::PostKnowledgeGraphMatchRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostKnowledgeGraphMatchRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PostKnowledgeGraphMatchRequest_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_PostKnowledgeGraphMatchRequest_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto}, {
      &scc_info_RequestMeta_proto_2futils_2frequest_5fmeta_2eproto.base,
      &scc_info_CustomerDataDump_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto.base,
      &scc_info_ConceptEmbeddingDump_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_PostKnowledgeGraphMatchResponse_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostKnowledgeGraphMatchResponse_default_instance_;
    new (ptr) ::clarifai::api::PostKnowledgeGraphMatchResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostKnowledgeGraphMatchResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PostKnowledgeGraphMatchResponse_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_PostKnowledgeGraphMatchResponse_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto}, {
      &scc_info_ResponseStatus_proto_2futils_2frequest_5fmeta_2eproto.base,
      &scc_info_ConceptMap_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptMap, customer_concept_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptMap, golden_concept_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptEmbeddingDump, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptEmbeddingDump, location_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ConceptEmbeddingDump, example_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::CustomerDataDump, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::CustomerDataDump, locaiton_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::CustomerDataDump, example_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostKnowledgeGraphMatchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostKnowledgeGraphMatchRequest, meta_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostKnowledgeGraphMatchRequest, children_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostKnowledgeGraphMatchRequest, siblings_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostKnowledgeGraphMatchRequest, max_depth_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostKnowledgeGraphMatchRequest, max_width_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostKnowledgeGraphMatchRequest, customer_data_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostKnowledgeGraphMatchRequest, shareable_concept_embeddings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostKnowledgeGraphMatchResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostKnowledgeGraphMatchResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostKnowledgeGraphMatchResponse, concept_map_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::clarifai::api::ConceptMap)},
  { 7, -1, sizeof(::clarifai::api::ConceptEmbeddingDump)},
  { 14, -1, sizeof(::clarifai::api::CustomerDataDump)},
  { 21, -1, sizeof(::clarifai::api::PostKnowledgeGraphMatchRequest)},
  { 33, -1, sizeof(::clarifai::api::PostKnowledgeGraphMatchResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ConceptMap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ConceptEmbeddingDump_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_CustomerDataDump_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostKnowledgeGraphMatchRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostKnowledgeGraphMatchResponse_default_instance_),
};

const char descriptor_table_protodef_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)proto/knowledge_graph/kg_py_service.pr"
  "oto\022\014clarifai.api\032\"proto/clarifai/api/re"
  "sources.proto\032\036proto/utils/request_meta."
  "proto\032\036proto/utils/data_example.proto\"l\n"
  "\nConceptMap\022/\n\020customer_concept\030\001 \001(\0132\025."
  "clarifai.api.Concept\022-\n\016golden_concept\030\002"
  " \003(\0132\025.clarifai.api.Concept\"G\n\024ConceptEm"
  "beddingDump\022\020\n\010location\030\001 \001(\t\022\035\n\007example"
  "\030\002 \003(\0132\014.DataExample\"C\n\020CustomerDataDump"
  "\022\020\n\010locaiton\030\001 \001(\t\022\035\n\007example\030\002 \003(\0132\014.Da"
  "taExample\"\207\002\n\036PostKnowledgeGraphMatchReq"
  "uest\022\032\n\004meta\030\001 \001(\0132\014.RequestMeta\022\020\n\010chil"
  "dren\030\002 \001(\010\022\020\n\010siblings\030\003 \001(\010\022\021\n\tmax_dept"
  "h\030\004 \001(\005\022\021\n\tmax_width\030\005 \001(\005\0225\n\rcustomer_d"
  "ata\030\006 \001(\0132\036.clarifai.api.CustomerDataDum"
  "p\022H\n\034shareable_concept_embeddings\030\007 \003(\0132"
  "\".clarifai.api.ConceptEmbeddingDump\"q\n\037P"
  "ostKnowledgeGraphMatchResponse\022\037\n\006status"
  "\030\001 \001(\0132\017.ResponseStatus\022-\n\013concept_map\030\002"
  " \003(\0132\030.clarifai.api.ConceptMapB\014Z\003api\242\002\004"
  "CAIPb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto_deps[3] = {
  &::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto,
  &::descriptor_table_proto_2futils_2fdata_5fexample_2eproto,
  &::descriptor_table_proto_2futils_2frequest_5fmeta_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto_sccs[5] = {
  &scc_info_ConceptEmbeddingDump_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto.base,
  &scc_info_ConceptMap_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto.base,
  &scc_info_CustomerDataDump_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto.base,
  &scc_info_PostKnowledgeGraphMatchRequest_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto.base,
  &scc_info_PostKnowledgeGraphMatchResponse_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto_once;
static bool descriptor_table_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto = {
  &descriptor_table_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto_initialized, descriptor_table_protodef_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto, "proto/knowledge_graph/kg_py_service.proto", 812,
  &descriptor_table_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto_once, descriptor_table_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto_sccs, descriptor_table_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto_deps, 5, 3,
  schemas, file_default_instances, TableStruct_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto::offsets,
  file_level_metadata_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto, 5, file_level_enum_descriptors_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto, file_level_service_descriptors_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto), true);
namespace clarifai {
namespace api {

// ===================================================================

void ConceptMap::InitAsDefaultInstance() {
  ::clarifai::api::_ConceptMap_default_instance_._instance.get_mutable()->customer_concept_ = const_cast< ::clarifai::api::Concept*>(
      ::clarifai::api::Concept::internal_default_instance());
}
class ConceptMap::_Internal {
 public:
  static const ::clarifai::api::Concept& customer_concept(const ConceptMap* msg);
};

const ::clarifai::api::Concept&
ConceptMap::_Internal::customer_concept(const ConceptMap* msg) {
  return *msg->customer_concept_;
}
void ConceptMap::clear_customer_concept() {
  if (GetArenaNoVirtual() == nullptr && customer_concept_ != nullptr) {
    delete customer_concept_;
  }
  customer_concept_ = nullptr;
}
void ConceptMap::clear_golden_concept() {
  golden_concept_.Clear();
}
ConceptMap::ConceptMap()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ConceptMap)
}
ConceptMap::ConceptMap(const ConceptMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      golden_concept_(from.golden_concept_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_customer_concept()) {
    customer_concept_ = new ::clarifai::api::Concept(*from.customer_concept_);
  } else {
    customer_concept_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ConceptMap)
}

void ConceptMap::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConceptMap_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto.base);
  customer_concept_ = nullptr;
}

ConceptMap::~ConceptMap() {
  // @@protoc_insertion_point(destructor:clarifai.api.ConceptMap)
  SharedDtor();
}

void ConceptMap::SharedDtor() {
  if (this != internal_default_instance()) delete customer_concept_;
}

void ConceptMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConceptMap& ConceptMap::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConceptMap_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ConceptMap::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ConceptMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  golden_concept_.Clear();
  if (GetArenaNoVirtual() == nullptr && customer_concept_ != nullptr) {
    delete customer_concept_;
  }
  customer_concept_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConceptMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.Concept customer_concept = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_customer_concept(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Concept golden_concept = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_golden_concept(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConceptMap::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:clarifai.api.ConceptMap)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .clarifai.api.Concept customer_concept = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_customer_concept()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .clarifai.api.Concept golden_concept = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_golden_concept()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clarifai.api.ConceptMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clarifai.api.ConceptMap)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConceptMap::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clarifai.api.ConceptMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.Concept customer_concept = 1;
  if (this->has_customer_concept()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::customer_concept(this), output);
  }

  // repeated .clarifai.api.Concept golden_concept = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->golden_concept_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->golden_concept(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:clarifai.api.ConceptMap)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConceptMap::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ConceptMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.Concept customer_concept = 1;
  if (this->has_customer_concept()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::customer_concept(this), target);
  }

  // repeated .clarifai.api.Concept golden_concept = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->golden_concept_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->golden_concept(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ConceptMap)
  return target;
}

size_t ConceptMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ConceptMap)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Concept golden_concept = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->golden_concept_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->golden_concept(static_cast<int>(i)));
    }
  }

  // .clarifai.api.Concept customer_concept = 1;
  if (this->has_customer_concept()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *customer_concept_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConceptMap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ConceptMap)
  GOOGLE_DCHECK_NE(&from, this);
  const ConceptMap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConceptMap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ConceptMap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ConceptMap)
    MergeFrom(*source);
  }
}

void ConceptMap::MergeFrom(const ConceptMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ConceptMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  golden_concept_.MergeFrom(from.golden_concept_);
  if (from.has_customer_concept()) {
    mutable_customer_concept()->::clarifai::api::Concept::MergeFrom(from.customer_concept());
  }
}

void ConceptMap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ConceptMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConceptMap::CopyFrom(const ConceptMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ConceptMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConceptMap::IsInitialized() const {
  return true;
}

void ConceptMap::InternalSwap(ConceptMap* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&golden_concept_)->InternalSwap(CastToBase(&other->golden_concept_));
  swap(customer_concept_, other->customer_concept_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConceptMap::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConceptEmbeddingDump::InitAsDefaultInstance() {
}
class ConceptEmbeddingDump::_Internal {
 public:
};

void ConceptEmbeddingDump::clear_example() {
  example_.Clear();
}
ConceptEmbeddingDump::ConceptEmbeddingDump()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ConceptEmbeddingDump)
}
ConceptEmbeddingDump::ConceptEmbeddingDump(const ConceptEmbeddingDump& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      example_(from.example_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.location().empty()) {
    location_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.location_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ConceptEmbeddingDump)
}

void ConceptEmbeddingDump::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConceptEmbeddingDump_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto.base);
  location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ConceptEmbeddingDump::~ConceptEmbeddingDump() {
  // @@protoc_insertion_point(destructor:clarifai.api.ConceptEmbeddingDump)
  SharedDtor();
}

void ConceptEmbeddingDump::SharedDtor() {
  location_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConceptEmbeddingDump::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConceptEmbeddingDump& ConceptEmbeddingDump::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConceptEmbeddingDump_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ConceptEmbeddingDump::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ConceptEmbeddingDump)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  example_.Clear();
  location_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConceptEmbeddingDump::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_location(), ptr, ctx, "clarifai.api.ConceptEmbeddingDump.location");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .DataExample example = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_example(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConceptEmbeddingDump::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:clarifai.api.ConceptEmbeddingDump)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string location = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->location().data(), static_cast<int>(this->location().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "clarifai.api.ConceptEmbeddingDump.location"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .DataExample example = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_example()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clarifai.api.ConceptEmbeddingDump)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clarifai.api.ConceptEmbeddingDump)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConceptEmbeddingDump::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clarifai.api.ConceptEmbeddingDump)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string location = 1;
  if (this->location().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->location().data(), static_cast<int>(this->location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ConceptEmbeddingDump.location");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->location(), output);
  }

  // repeated .DataExample example = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->example_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->example(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:clarifai.api.ConceptEmbeddingDump)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConceptEmbeddingDump::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ConceptEmbeddingDump)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string location = 1;
  if (this->location().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->location().data(), static_cast<int>(this->location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ConceptEmbeddingDump.location");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->location(), target);
  }

  // repeated .DataExample example = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->example_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->example(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ConceptEmbeddingDump)
  return target;
}

size_t ConceptEmbeddingDump::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ConceptEmbeddingDump)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DataExample example = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->example_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->example(static_cast<int>(i)));
    }
  }

  // string location = 1;
  if (this->location().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->location());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConceptEmbeddingDump::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ConceptEmbeddingDump)
  GOOGLE_DCHECK_NE(&from, this);
  const ConceptEmbeddingDump* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConceptEmbeddingDump>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ConceptEmbeddingDump)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ConceptEmbeddingDump)
    MergeFrom(*source);
  }
}

void ConceptEmbeddingDump::MergeFrom(const ConceptEmbeddingDump& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ConceptEmbeddingDump)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  example_.MergeFrom(from.example_);
  if (from.location().size() > 0) {

    location_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.location_);
  }
}

void ConceptEmbeddingDump::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ConceptEmbeddingDump)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConceptEmbeddingDump::CopyFrom(const ConceptEmbeddingDump& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ConceptEmbeddingDump)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConceptEmbeddingDump::IsInitialized() const {
  return true;
}

void ConceptEmbeddingDump::InternalSwap(ConceptEmbeddingDump* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&example_)->InternalSwap(CastToBase(&other->example_));
  location_.Swap(&other->location_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ConceptEmbeddingDump::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CustomerDataDump::InitAsDefaultInstance() {
}
class CustomerDataDump::_Internal {
 public:
};

void CustomerDataDump::clear_example() {
  example_.Clear();
}
CustomerDataDump::CustomerDataDump()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.CustomerDataDump)
}
CustomerDataDump::CustomerDataDump(const CustomerDataDump& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      example_(from.example_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  locaiton_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.locaiton().empty()) {
    locaiton_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.locaiton_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.CustomerDataDump)
}

void CustomerDataDump::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CustomerDataDump_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto.base);
  locaiton_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CustomerDataDump::~CustomerDataDump() {
  // @@protoc_insertion_point(destructor:clarifai.api.CustomerDataDump)
  SharedDtor();
}

void CustomerDataDump::SharedDtor() {
  locaiton_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CustomerDataDump::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CustomerDataDump& CustomerDataDump::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CustomerDataDump_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto.base);
  return *internal_default_instance();
}


void CustomerDataDump::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.CustomerDataDump)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  example_.Clear();
  locaiton_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CustomerDataDump::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string locaiton = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_locaiton(), ptr, ctx, "clarifai.api.CustomerDataDump.locaiton");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .DataExample example = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_example(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CustomerDataDump::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:clarifai.api.CustomerDataDump)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string locaiton = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_locaiton()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->locaiton().data(), static_cast<int>(this->locaiton().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "clarifai.api.CustomerDataDump.locaiton"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .DataExample example = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_example()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clarifai.api.CustomerDataDump)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clarifai.api.CustomerDataDump)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CustomerDataDump::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clarifai.api.CustomerDataDump)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string locaiton = 1;
  if (this->locaiton().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->locaiton().data(), static_cast<int>(this->locaiton().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.CustomerDataDump.locaiton");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->locaiton(), output);
  }

  // repeated .DataExample example = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->example_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->example(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:clarifai.api.CustomerDataDump)
}

::PROTOBUF_NAMESPACE_ID::uint8* CustomerDataDump::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.CustomerDataDump)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string locaiton = 1;
  if (this->locaiton().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->locaiton().data(), static_cast<int>(this->locaiton().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.CustomerDataDump.locaiton");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->locaiton(), target);
  }

  // repeated .DataExample example = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->example_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->example(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.CustomerDataDump)
  return target;
}

size_t CustomerDataDump::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.CustomerDataDump)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DataExample example = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->example_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->example(static_cast<int>(i)));
    }
  }

  // string locaiton = 1;
  if (this->locaiton().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->locaiton());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CustomerDataDump::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.CustomerDataDump)
  GOOGLE_DCHECK_NE(&from, this);
  const CustomerDataDump* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CustomerDataDump>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.CustomerDataDump)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.CustomerDataDump)
    MergeFrom(*source);
  }
}

void CustomerDataDump::MergeFrom(const CustomerDataDump& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.CustomerDataDump)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  example_.MergeFrom(from.example_);
  if (from.locaiton().size() > 0) {

    locaiton_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.locaiton_);
  }
}

void CustomerDataDump::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.CustomerDataDump)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomerDataDump::CopyFrom(const CustomerDataDump& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.CustomerDataDump)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomerDataDump::IsInitialized() const {
  return true;
}

void CustomerDataDump::InternalSwap(CustomerDataDump* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&example_)->InternalSwap(CastToBase(&other->example_));
  locaiton_.Swap(&other->locaiton_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CustomerDataDump::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostKnowledgeGraphMatchRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostKnowledgeGraphMatchRequest_default_instance_._instance.get_mutable()->meta_ = const_cast< ::RequestMeta*>(
      ::RequestMeta::internal_default_instance());
  ::clarifai::api::_PostKnowledgeGraphMatchRequest_default_instance_._instance.get_mutable()->customer_data_ = const_cast< ::clarifai::api::CustomerDataDump*>(
      ::clarifai::api::CustomerDataDump::internal_default_instance());
}
class PostKnowledgeGraphMatchRequest::_Internal {
 public:
  static const ::RequestMeta& meta(const PostKnowledgeGraphMatchRequest* msg);
  static const ::clarifai::api::CustomerDataDump& customer_data(const PostKnowledgeGraphMatchRequest* msg);
};

const ::RequestMeta&
PostKnowledgeGraphMatchRequest::_Internal::meta(const PostKnowledgeGraphMatchRequest* msg) {
  return *msg->meta_;
}
const ::clarifai::api::CustomerDataDump&
PostKnowledgeGraphMatchRequest::_Internal::customer_data(const PostKnowledgeGraphMatchRequest* msg) {
  return *msg->customer_data_;
}
void PostKnowledgeGraphMatchRequest::clear_meta() {
  if (GetArenaNoVirtual() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
}
PostKnowledgeGraphMatchRequest::PostKnowledgeGraphMatchRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostKnowledgeGraphMatchRequest)
}
PostKnowledgeGraphMatchRequest::PostKnowledgeGraphMatchRequest(const PostKnowledgeGraphMatchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      shareable_concept_embeddings_(from.shareable_concept_embeddings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_meta()) {
    meta_ = new ::RequestMeta(*from.meta_);
  } else {
    meta_ = nullptr;
  }
  if (from.has_customer_data()) {
    customer_data_ = new ::clarifai::api::CustomerDataDump(*from.customer_data_);
  } else {
    customer_data_ = nullptr;
  }
  ::memcpy(&children_, &from.children_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_width_) -
    reinterpret_cast<char*>(&children_)) + sizeof(max_width_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostKnowledgeGraphMatchRequest)
}

void PostKnowledgeGraphMatchRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostKnowledgeGraphMatchRequest_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto.base);
  ::memset(&meta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_width_) -
      reinterpret_cast<char*>(&meta_)) + sizeof(max_width_));
}

PostKnowledgeGraphMatchRequest::~PostKnowledgeGraphMatchRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostKnowledgeGraphMatchRequest)
  SharedDtor();
}

void PostKnowledgeGraphMatchRequest::SharedDtor() {
  if (this != internal_default_instance()) delete meta_;
  if (this != internal_default_instance()) delete customer_data_;
}

void PostKnowledgeGraphMatchRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostKnowledgeGraphMatchRequest& PostKnowledgeGraphMatchRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostKnowledgeGraphMatchRequest_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto.base);
  return *internal_default_instance();
}


void PostKnowledgeGraphMatchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostKnowledgeGraphMatchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shareable_concept_embeddings_.Clear();
  if (GetArenaNoVirtual() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && customer_data_ != nullptr) {
    delete customer_data_;
  }
  customer_data_ = nullptr;
  ::memset(&children_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_width_) -
      reinterpret_cast<char*>(&children_)) + sizeof(max_width_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PostKnowledgeGraphMatchRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .RequestMeta meta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool children = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          children_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool siblings = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          siblings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_depth = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          max_depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_width = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          max_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.CustomerDataDump customer_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_customer_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.ConceptEmbeddingDump shareable_concept_embeddings = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_shareable_concept_embeddings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PostKnowledgeGraphMatchRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:clarifai.api.PostKnowledgeGraphMatchRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .RequestMeta meta = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_meta()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool children = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &children_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool siblings = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &siblings_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_depth = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_depth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_width = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .clarifai.api.CustomerDataDump customer_data = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_customer_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .clarifai.api.ConceptEmbeddingDump shareable_concept_embeddings = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_shareable_concept_embeddings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clarifai.api.PostKnowledgeGraphMatchRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clarifai.api.PostKnowledgeGraphMatchRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PostKnowledgeGraphMatchRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clarifai.api.PostKnowledgeGraphMatchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::meta(this), output);
  }

  // bool children = 2;
  if (this->children() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->children(), output);
  }

  // bool siblings = 3;
  if (this->siblings() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->siblings(), output);
  }

  // int32 max_depth = 4;
  if (this->max_depth() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->max_depth(), output);
  }

  // int32 max_width = 5;
  if (this->max_width() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->max_width(), output);
  }

  // .clarifai.api.CustomerDataDump customer_data = 6;
  if (this->has_customer_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::customer_data(this), output);
  }

  // repeated .clarifai.api.ConceptEmbeddingDump shareable_concept_embeddings = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->shareable_concept_embeddings_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->shareable_concept_embeddings(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:clarifai.api.PostKnowledgeGraphMatchRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* PostKnowledgeGraphMatchRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostKnowledgeGraphMatchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::meta(this), target);
  }

  // bool children = 2;
  if (this->children() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->children(), target);
  }

  // bool siblings = 3;
  if (this->siblings() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->siblings(), target);
  }

  // int32 max_depth = 4;
  if (this->max_depth() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->max_depth(), target);
  }

  // int32 max_width = 5;
  if (this->max_width() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->max_width(), target);
  }

  // .clarifai.api.CustomerDataDump customer_data = 6;
  if (this->has_customer_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::customer_data(this), target);
  }

  // repeated .clarifai.api.ConceptEmbeddingDump shareable_concept_embeddings = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->shareable_concept_embeddings_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->shareable_concept_embeddings(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostKnowledgeGraphMatchRequest)
  return target;
}

size_t PostKnowledgeGraphMatchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostKnowledgeGraphMatchRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ConceptEmbeddingDump shareable_concept_embeddings = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->shareable_concept_embeddings_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->shareable_concept_embeddings(static_cast<int>(i)));
    }
  }

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meta_);
  }

  // .clarifai.api.CustomerDataDump customer_data = 6;
  if (this->has_customer_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *customer_data_);
  }

  // bool children = 2;
  if (this->children() != 0) {
    total_size += 1 + 1;
  }

  // bool siblings = 3;
  if (this->siblings() != 0) {
    total_size += 1 + 1;
  }

  // int32 max_depth = 4;
  if (this->max_depth() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->max_depth());
  }

  // int32 max_width = 5;
  if (this->max_width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->max_width());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostKnowledgeGraphMatchRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostKnowledgeGraphMatchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostKnowledgeGraphMatchRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostKnowledgeGraphMatchRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostKnowledgeGraphMatchRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostKnowledgeGraphMatchRequest)
    MergeFrom(*source);
  }
}

void PostKnowledgeGraphMatchRequest::MergeFrom(const PostKnowledgeGraphMatchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostKnowledgeGraphMatchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shareable_concept_embeddings_.MergeFrom(from.shareable_concept_embeddings_);
  if (from.has_meta()) {
    mutable_meta()->::RequestMeta::MergeFrom(from.meta());
  }
  if (from.has_customer_data()) {
    mutable_customer_data()->::clarifai::api::CustomerDataDump::MergeFrom(from.customer_data());
  }
  if (from.children() != 0) {
    set_children(from.children());
  }
  if (from.siblings() != 0) {
    set_siblings(from.siblings());
  }
  if (from.max_depth() != 0) {
    set_max_depth(from.max_depth());
  }
  if (from.max_width() != 0) {
    set_max_width(from.max_width());
  }
}

void PostKnowledgeGraphMatchRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostKnowledgeGraphMatchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostKnowledgeGraphMatchRequest::CopyFrom(const PostKnowledgeGraphMatchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostKnowledgeGraphMatchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostKnowledgeGraphMatchRequest::IsInitialized() const {
  return true;
}

void PostKnowledgeGraphMatchRequest::InternalSwap(PostKnowledgeGraphMatchRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&shareable_concept_embeddings_)->InternalSwap(CastToBase(&other->shareable_concept_embeddings_));
  swap(meta_, other->meta_);
  swap(customer_data_, other->customer_data_);
  swap(children_, other->children_);
  swap(siblings_, other->siblings_);
  swap(max_depth_, other->max_depth_);
  swap(max_width_, other->max_width_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostKnowledgeGraphMatchRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostKnowledgeGraphMatchResponse::InitAsDefaultInstance() {
  ::clarifai::api::_PostKnowledgeGraphMatchResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::ResponseStatus*>(
      ::ResponseStatus::internal_default_instance());
}
class PostKnowledgeGraphMatchResponse::_Internal {
 public:
  static const ::ResponseStatus& status(const PostKnowledgeGraphMatchResponse* msg);
};

const ::ResponseStatus&
PostKnowledgeGraphMatchResponse::_Internal::status(const PostKnowledgeGraphMatchResponse* msg) {
  return *msg->status_;
}
void PostKnowledgeGraphMatchResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
PostKnowledgeGraphMatchResponse::PostKnowledgeGraphMatchResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostKnowledgeGraphMatchResponse)
}
PostKnowledgeGraphMatchResponse::PostKnowledgeGraphMatchResponse(const PostKnowledgeGraphMatchResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      concept_map_(from.concept_map_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::ResponseStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostKnowledgeGraphMatchResponse)
}

void PostKnowledgeGraphMatchResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostKnowledgeGraphMatchResponse_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto.base);
  status_ = nullptr;
}

PostKnowledgeGraphMatchResponse::~PostKnowledgeGraphMatchResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostKnowledgeGraphMatchResponse)
  SharedDtor();
}

void PostKnowledgeGraphMatchResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void PostKnowledgeGraphMatchResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostKnowledgeGraphMatchResponse& PostKnowledgeGraphMatchResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostKnowledgeGraphMatchResponse_proto_2fknowledge_5fgraph_2fkg_5fpy_5fservice_2eproto.base);
  return *internal_default_instance();
}


void PostKnowledgeGraphMatchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostKnowledgeGraphMatchResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concept_map_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PostKnowledgeGraphMatchResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ResponseStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.ConceptMap concept_map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_concept_map(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PostKnowledgeGraphMatchResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:clarifai.api.PostKnowledgeGraphMatchResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ResponseStatus status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .clarifai.api.ConceptMap concept_map = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_concept_map()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clarifai.api.PostKnowledgeGraphMatchResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clarifai.api.PostKnowledgeGraphMatchResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PostKnowledgeGraphMatchResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clarifai.api.PostKnowledgeGraphMatchResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::status(this), output);
  }

  // repeated .clarifai.api.ConceptMap concept_map = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->concept_map_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->concept_map(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:clarifai.api.PostKnowledgeGraphMatchResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* PostKnowledgeGraphMatchResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostKnowledgeGraphMatchResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::status(this), target);
  }

  // repeated .clarifai.api.ConceptMap concept_map = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->concept_map_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->concept_map(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostKnowledgeGraphMatchResponse)
  return target;
}

size_t PostKnowledgeGraphMatchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostKnowledgeGraphMatchResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ConceptMap concept_map = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->concept_map_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->concept_map(static_cast<int>(i)));
    }
  }

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostKnowledgeGraphMatchResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostKnowledgeGraphMatchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PostKnowledgeGraphMatchResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostKnowledgeGraphMatchResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostKnowledgeGraphMatchResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostKnowledgeGraphMatchResponse)
    MergeFrom(*source);
  }
}

void PostKnowledgeGraphMatchResponse::MergeFrom(const PostKnowledgeGraphMatchResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostKnowledgeGraphMatchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  concept_map_.MergeFrom(from.concept_map_);
  if (from.has_status()) {
    mutable_status()->::ResponseStatus::MergeFrom(from.status());
  }
}

void PostKnowledgeGraphMatchResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostKnowledgeGraphMatchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostKnowledgeGraphMatchResponse::CopyFrom(const PostKnowledgeGraphMatchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostKnowledgeGraphMatchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostKnowledgeGraphMatchResponse::IsInitialized() const {
  return true;
}

void PostKnowledgeGraphMatchResponse::InternalSwap(PostKnowledgeGraphMatchResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&concept_map_)->InternalSwap(CastToBase(&other->concept_map_));
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostKnowledgeGraphMatchResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace api
}  // namespace clarifai
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::clarifai::api::ConceptMap* Arena::CreateMaybeMessage< ::clarifai::api::ConceptMap >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ConceptMap >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ConceptEmbeddingDump* Arena::CreateMaybeMessage< ::clarifai::api::ConceptEmbeddingDump >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ConceptEmbeddingDump >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::CustomerDataDump* Arena::CreateMaybeMessage< ::clarifai::api::CustomerDataDump >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::CustomerDataDump >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostKnowledgeGraphMatchRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostKnowledgeGraphMatchRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostKnowledgeGraphMatchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostKnowledgeGraphMatchResponse* Arena::CreateMaybeMessage< ::clarifai::api::PostKnowledgeGraphMatchResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostKnowledgeGraphMatchResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
