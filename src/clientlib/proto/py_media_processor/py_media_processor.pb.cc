// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/py_media_processor/py_media_processor.proto

#include "proto/py_media_processor/py_media_processor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fdatabatch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DataBatch_proto_2futils_2fdatabatch_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fdata_5fprovider_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<22> scc_info_DataProviderParams_proto_2futils_2fdata_5fprovider_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2frequest_5fmeta_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RequestMeta_proto_2futils_2frequest_5fmeta_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2frequest_5fmeta_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResponseStatus_proto_2futils_2frequest_5fmeta_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TritonServerInfo_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TritonServerInfo_InputFieldsEntry_DoNotUse_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TritonServerInfo_OutputFieldsEntry_DoNotUse_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto;
class PredictRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PredictRequest> _instance;
} _PredictRequest_default_instance_;
class TritonServerInfo_InputFieldsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TritonServerInfo_InputFieldsEntry_DoNotUse> _instance;
} _TritonServerInfo_InputFieldsEntry_DoNotUse_default_instance_;
class TritonServerInfo_OutputFieldsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TritonServerInfo_OutputFieldsEntry_DoNotUse> _instance;
} _TritonServerInfo_OutputFieldsEntry_DoNotUse_default_instance_;
class TritonServerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TritonServerInfo> _instance;
} _TritonServerInfo_default_instance_;
class PredictResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PredictResponse> _instance;
} _PredictResponse_default_instance_;
static void InitDefaultsscc_info_PredictRequest_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PredictRequest_default_instance_;
    new (ptr) ::PredictRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PredictRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_PredictRequest_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_PredictRequest_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto}, {
      &scc_info_RequestMeta_proto_2futils_2frequest_5fmeta_2eproto.base,
      &scc_info_DataBatch_proto_2futils_2fdatabatch_2eproto.base,
      &scc_info_DataProviderParams_proto_2futils_2fdata_5fprovider_2eproto.base,
      &scc_info_TritonServerInfo_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto.base,}};

static void InitDefaultsscc_info_PredictResponse_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PredictResponse_default_instance_;
    new (ptr) ::PredictResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PredictResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PredictResponse_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_PredictResponse_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto}, {
      &scc_info_ResponseStatus_proto_2futils_2frequest_5fmeta_2eproto.base,
      &scc_info_DataBatch_proto_2futils_2fdatabatch_2eproto.base,}};

static void InitDefaultsscc_info_TritonServerInfo_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TritonServerInfo_default_instance_;
    new (ptr) ::TritonServerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TritonServerInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TritonServerInfo_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_TritonServerInfo_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto}, {
      &scc_info_TritonServerInfo_InputFieldsEntry_DoNotUse_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto.base,
      &scc_info_TritonServerInfo_OutputFieldsEntry_DoNotUse_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto.base,}};

static void InitDefaultsscc_info_TritonServerInfo_InputFieldsEntry_DoNotUse_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TritonServerInfo_InputFieldsEntry_DoNotUse_default_instance_;
    new (ptr) ::TritonServerInfo_InputFieldsEntry_DoNotUse();
  }
  ::TritonServerInfo_InputFieldsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TritonServerInfo_InputFieldsEntry_DoNotUse_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TritonServerInfo_InputFieldsEntry_DoNotUse_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto}, {}};

static void InitDefaultsscc_info_TritonServerInfo_OutputFieldsEntry_DoNotUse_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TritonServerInfo_OutputFieldsEntry_DoNotUse_default_instance_;
    new (ptr) ::TritonServerInfo_OutputFieldsEntry_DoNotUse();
  }
  ::TritonServerInfo_OutputFieldsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TritonServerInfo_OutputFieldsEntry_DoNotUse_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TritonServerInfo_OutputFieldsEntry_DoNotUse_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PredictRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PredictRequest, meta_),
  PROTOBUF_FIELD_OFFSET(::PredictRequest, data_),
  PROTOBUF_FIELD_OFFSET(::PredictRequest, data_provider_params_),
  PROTOBUF_FIELD_OFFSET(::PredictRequest, triton_server_info_),
  PROTOBUF_FIELD_OFFSET(::PredictRequest, topk_),
  PROTOBUF_FIELD_OFFSET(::PredictRequest, fps_),
  PROTOBUF_FIELD_OFFSET(::TritonServerInfo_InputFieldsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TritonServerInfo_InputFieldsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TritonServerInfo_InputFieldsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::TritonServerInfo_InputFieldsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TritonServerInfo_OutputFieldsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TritonServerInfo_OutputFieldsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TritonServerInfo_OutputFieldsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::TritonServerInfo_OutputFieldsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TritonServerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TritonServerInfo, eid_),
  PROTOBUF_FIELD_OFFSET(::TritonServerInfo, input_fields_),
  PROTOBUF_FIELD_OFFSET(::TritonServerInfo, output_fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PredictResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PredictResponse, status_),
  PROTOBUF_FIELD_OFFSET(::PredictResponse, results_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::PredictRequest)},
  { 11, 18, sizeof(::TritonServerInfo_InputFieldsEntry_DoNotUse)},
  { 20, 27, sizeof(::TritonServerInfo_OutputFieldsEntry_DoNotUse)},
  { 29, -1, sizeof(::TritonServerInfo)},
  { 37, -1, sizeof(::PredictResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PredictRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TritonServerInfo_InputFieldsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TritonServerInfo_OutputFieldsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TritonServerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PredictResponse_default_instance_),
};

const char descriptor_table_protodef_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n1proto/py_media_processor/py_media_proc"
  "essor.proto\032\033proto/utils/databatch.proto"
  "\032\036proto/utils/request_meta.proto\032\037proto/"
  "utils/data_provider.proto\"\303\001\n\016PredictReq"
  "uest\022\032\n\004meta\030\001 \001(\0132\014.RequestMeta\022\030\n\004data"
  "\030\002 \001(\0132\n.DataBatch\0221\n\024data_provider_para"
  "ms\030\003 \001(\0132\023.DataProviderParams\022-\n\022triton_"
  "server_info\030\004 \001(\0132\021.TritonServerInfo\022\014\n\004"
  "topk\030\005 \001(\005\022\013\n\003fps\030\006 \001(\002\"\376\001\n\020TritonServer"
  "Info\022\013\n\003eid\030\001 \001(\t\0228\n\014input_fields\030\002 \003(\0132"
  "\".TritonServerInfo.InputFieldsEntry\022:\n\ro"
  "utput_fields\030\003 \003(\0132#.TritonServerInfo.Ou"
  "tputFieldsEntry\0322\n\020InputFieldsEntry\022\013\n\003k"
  "ey\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\0323\n\021OutputFie"
  "ldsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001"
  "\"O\n\017PredictResponse\022\037\n\006status\030\001 \001(\0132\017.Re"
  "sponseStatus\022\033\n\007results\030\002 \001(\0132\n.DataBatc"
  "h2G\n\025MediaProcessorService\022.\n\007Predict\022\017."
  "PredictRequest\032\020.PredictResponse\"\000B\021Z\017me"
  "dia_processorb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto_deps[3] = {
  &::descriptor_table_proto_2futils_2fdata_5fprovider_2eproto,
  &::descriptor_table_proto_2futils_2fdatabatch_2eproto,
  &::descriptor_table_proto_2futils_2frequest_5fmeta_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto_sccs[5] = {
  &scc_info_PredictRequest_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto.base,
  &scc_info_PredictResponse_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto.base,
  &scc_info_TritonServerInfo_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto.base,
  &scc_info_TritonServerInfo_InputFieldsEntry_DoNotUse_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto.base,
  &scc_info_TritonServerInfo_OutputFieldsEntry_DoNotUse_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto_once;
static bool descriptor_table_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto = {
  &descriptor_table_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto_initialized, descriptor_table_protodef_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto, "proto/py_media_processor/py_media_processor.proto", 781,
  &descriptor_table_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto_once, descriptor_table_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto_sccs, descriptor_table_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto_deps, 5, 3,
  schemas, file_default_instances, TableStruct_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto::offsets,
  file_level_metadata_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto, 5, file_level_enum_descriptors_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto, file_level_service_descriptors_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto), true);

// ===================================================================

void PredictRequest::InitAsDefaultInstance() {
  ::_PredictRequest_default_instance_._instance.get_mutable()->meta_ = const_cast< ::RequestMeta*>(
      ::RequestMeta::internal_default_instance());
  ::_PredictRequest_default_instance_._instance.get_mutable()->data_ = const_cast< ::DataBatch*>(
      ::DataBatch::internal_default_instance());
  ::_PredictRequest_default_instance_._instance.get_mutable()->data_provider_params_ = const_cast< ::DataProviderParams*>(
      ::DataProviderParams::internal_default_instance());
  ::_PredictRequest_default_instance_._instance.get_mutable()->triton_server_info_ = const_cast< ::TritonServerInfo*>(
      ::TritonServerInfo::internal_default_instance());
}
class PredictRequest::_Internal {
 public:
  static const ::RequestMeta& meta(const PredictRequest* msg);
  static const ::DataBatch& data(const PredictRequest* msg);
  static const ::DataProviderParams& data_provider_params(const PredictRequest* msg);
  static const ::TritonServerInfo& triton_server_info(const PredictRequest* msg);
};

const ::RequestMeta&
PredictRequest::_Internal::meta(const PredictRequest* msg) {
  return *msg->meta_;
}
const ::DataBatch&
PredictRequest::_Internal::data(const PredictRequest* msg) {
  return *msg->data_;
}
const ::DataProviderParams&
PredictRequest::_Internal::data_provider_params(const PredictRequest* msg) {
  return *msg->data_provider_params_;
}
const ::TritonServerInfo&
PredictRequest::_Internal::triton_server_info(const PredictRequest* msg) {
  return *msg->triton_server_info_;
}
void PredictRequest::clear_meta() {
  if (GetArenaNoVirtual() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
}
void PredictRequest::clear_data() {
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
void PredictRequest::clear_data_provider_params() {
  if (GetArenaNoVirtual() == nullptr && data_provider_params_ != nullptr) {
    delete data_provider_params_;
  }
  data_provider_params_ = nullptr;
}
PredictRequest::PredictRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PredictRequest)
}
PredictRequest::PredictRequest(const PredictRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_meta()) {
    meta_ = new ::RequestMeta(*from.meta_);
  } else {
    meta_ = nullptr;
  }
  if (from.has_data()) {
    data_ = new ::DataBatch(*from.data_);
  } else {
    data_ = nullptr;
  }
  if (from.has_data_provider_params()) {
    data_provider_params_ = new ::DataProviderParams(*from.data_provider_params_);
  } else {
    data_provider_params_ = nullptr;
  }
  if (from.has_triton_server_info()) {
    triton_server_info_ = new ::TritonServerInfo(*from.triton_server_info_);
  } else {
    triton_server_info_ = nullptr;
  }
  ::memcpy(&topk_, &from.topk_,
    static_cast<size_t>(reinterpret_cast<char*>(&fps_) -
    reinterpret_cast<char*>(&topk_)) + sizeof(fps_));
  // @@protoc_insertion_point(copy_constructor:PredictRequest)
}

void PredictRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PredictRequest_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto.base);
  ::memset(&meta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fps_) -
      reinterpret_cast<char*>(&meta_)) + sizeof(fps_));
}

PredictRequest::~PredictRequest() {
  // @@protoc_insertion_point(destructor:PredictRequest)
  SharedDtor();
}

void PredictRequest::SharedDtor() {
  if (this != internal_default_instance()) delete meta_;
  if (this != internal_default_instance()) delete data_;
  if (this != internal_default_instance()) delete data_provider_params_;
  if (this != internal_default_instance()) delete triton_server_info_;
}

void PredictRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PredictRequest& PredictRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PredictRequest_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto.base);
  return *internal_default_instance();
}


void PredictRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:PredictRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && data_provider_params_ != nullptr) {
    delete data_provider_params_;
  }
  data_provider_params_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && triton_server_info_ != nullptr) {
    delete triton_server_info_;
  }
  triton_server_info_ = nullptr;
  ::memset(&topk_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fps_) -
      reinterpret_cast<char*>(&topk_)) + sizeof(fps_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PredictRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .RequestMeta meta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DataBatch data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DataProviderParams data_provider_params = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_data_provider_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TritonServerInfo triton_server_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_triton_server_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 topk = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          topk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float fps = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          fps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PredictRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:PredictRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .RequestMeta meta = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_meta()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DataBatch data = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DataProviderParams data_provider_params = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_data_provider_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TritonServerInfo triton_server_info = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_triton_server_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 topk = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &topk_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fps = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PredictRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PredictRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PredictRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PredictRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::meta(this), output);
  }

  // .DataBatch data = 2;
  if (this->has_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::data(this), output);
  }

  // .DataProviderParams data_provider_params = 3;
  if (this->has_data_provider_params()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::data_provider_params(this), output);
  }

  // .TritonServerInfo triton_server_info = 4;
  if (this->has_triton_server_info()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::triton_server_info(this), output);
  }

  // int32 topk = 5;
  if (this->topk() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->topk(), output);
  }

  // float fps = 6;
  if (!(this->fps() <= 0 && this->fps() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->fps(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PredictRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* PredictRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PredictRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::meta(this), target);
  }

  // .DataBatch data = 2;
  if (this->has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::data(this), target);
  }

  // .DataProviderParams data_provider_params = 3;
  if (this->has_data_provider_params()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::data_provider_params(this), target);
  }

  // .TritonServerInfo triton_server_info = 4;
  if (this->has_triton_server_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::triton_server_info(this), target);
  }

  // int32 topk = 5;
  if (this->topk() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->topk(), target);
  }

  // float fps = 6;
  if (!(this->fps() <= 0 && this->fps() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->fps(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PredictRequest)
  return target;
}

size_t PredictRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PredictRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meta_);
  }

  // .DataBatch data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // .DataProviderParams data_provider_params = 3;
  if (this->has_data_provider_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_provider_params_);
  }

  // .TritonServerInfo triton_server_info = 4;
  if (this->has_triton_server_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *triton_server_info_);
  }

  // int32 topk = 5;
  if (this->topk() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->topk());
  }

  // float fps = 6;
  if (!(this->fps() <= 0 && this->fps() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PredictRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PredictRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PredictRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PredictRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PredictRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PredictRequest)
    MergeFrom(*source);
  }
}

void PredictRequest::MergeFrom(const PredictRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PredictRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_meta()) {
    mutable_meta()->::RequestMeta::MergeFrom(from.meta());
  }
  if (from.has_data()) {
    mutable_data()->::DataBatch::MergeFrom(from.data());
  }
  if (from.has_data_provider_params()) {
    mutable_data_provider_params()->::DataProviderParams::MergeFrom(from.data_provider_params());
  }
  if (from.has_triton_server_info()) {
    mutable_triton_server_info()->::TritonServerInfo::MergeFrom(from.triton_server_info());
  }
  if (from.topk() != 0) {
    set_topk(from.topk());
  }
  if (!(from.fps() <= 0 && from.fps() >= 0)) {
    set_fps(from.fps());
  }
}

void PredictRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PredictRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PredictRequest::CopyFrom(const PredictRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PredictRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredictRequest::IsInitialized() const {
  return true;
}

void PredictRequest::InternalSwap(PredictRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(meta_, other->meta_);
  swap(data_, other->data_);
  swap(data_provider_params_, other->data_provider_params_);
  swap(triton_server_info_, other->triton_server_info_);
  swap(topk_, other->topk_);
  swap(fps_, other->fps_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PredictRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

TritonServerInfo_InputFieldsEntry_DoNotUse::TritonServerInfo_InputFieldsEntry_DoNotUse() {}
TritonServerInfo_InputFieldsEntry_DoNotUse::TritonServerInfo_InputFieldsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TritonServerInfo_InputFieldsEntry_DoNotUse::MergeFrom(const TritonServerInfo_InputFieldsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TritonServerInfo_InputFieldsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TritonServerInfo_InputFieldsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

TritonServerInfo_OutputFieldsEntry_DoNotUse::TritonServerInfo_OutputFieldsEntry_DoNotUse() {}
TritonServerInfo_OutputFieldsEntry_DoNotUse::TritonServerInfo_OutputFieldsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TritonServerInfo_OutputFieldsEntry_DoNotUse::MergeFrom(const TritonServerInfo_OutputFieldsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TritonServerInfo_OutputFieldsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TritonServerInfo_OutputFieldsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void TritonServerInfo::InitAsDefaultInstance() {
}
class TritonServerInfo::_Internal {
 public:
};

TritonServerInfo::TritonServerInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TritonServerInfo)
}
TritonServerInfo::TritonServerInfo(const TritonServerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  input_fields_.MergeFrom(from.input_fields_);
  output_fields_.MergeFrom(from.output_fields_);
  eid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.eid().empty()) {
    eid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.eid_);
  }
  // @@protoc_insertion_point(copy_constructor:TritonServerInfo)
}

void TritonServerInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TritonServerInfo_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto.base);
  eid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TritonServerInfo::~TritonServerInfo() {
  // @@protoc_insertion_point(destructor:TritonServerInfo)
  SharedDtor();
}

void TritonServerInfo::SharedDtor() {
  eid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TritonServerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TritonServerInfo& TritonServerInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TritonServerInfo_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto.base);
  return *internal_default_instance();
}


void TritonServerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:TritonServerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_fields_.Clear();
  output_fields_.Clear();
  eid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TritonServerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string eid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_eid(), ptr, ctx, "TritonServerInfo.eid");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> input_fields = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&input_fields_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // map<string, string> output_fields = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&output_fields_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TritonServerInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:TritonServerInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string eid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_eid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->eid().data(), static_cast<int>(this->eid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "TritonServerInfo.eid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> input_fields = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          TritonServerInfo_InputFieldsEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              TritonServerInfo_InputFieldsEntry_DoNotUse,
              std::string, std::string,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string > > parser(&input_fields_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "TritonServerInfo.InputFieldsEntry.key"));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "TritonServerInfo.InputFieldsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> output_fields = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          TritonServerInfo_OutputFieldsEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              TritonServerInfo_OutputFieldsEntry_DoNotUse,
              std::string, std::string,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string > > parser(&output_fields_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "TritonServerInfo.OutputFieldsEntry.key"));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "TritonServerInfo.OutputFieldsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TritonServerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TritonServerInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TritonServerInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TritonServerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string eid = 1;
  if (this->eid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->eid().data(), static_cast<int>(this->eid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TritonServerInfo.eid");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->eid(), output);
  }

  // map<string, string> input_fields = 2;
  if (!this->input_fields().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "TritonServerInfo.InputFieldsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "TritonServerInfo.InputFieldsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->input_fields().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->input_fields().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->input_fields().begin();
          it != this->input_fields().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        TritonServerInfo_InputFieldsEntry_DoNotUse::Funcs::SerializeToCodedStream(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->input_fields().begin();
          it != this->input_fields().end(); ++it) {
        TritonServerInfo_InputFieldsEntry_DoNotUse::Funcs::SerializeToCodedStream(2, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, string> output_fields = 3;
  if (!this->output_fields().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "TritonServerInfo.OutputFieldsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "TritonServerInfo.OutputFieldsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->output_fields().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->output_fields().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->output_fields().begin();
          it != this->output_fields().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        TritonServerInfo_OutputFieldsEntry_DoNotUse::Funcs::SerializeToCodedStream(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->output_fields().begin();
          it != this->output_fields().end(); ++it) {
        TritonServerInfo_OutputFieldsEntry_DoNotUse::Funcs::SerializeToCodedStream(3, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TritonServerInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* TritonServerInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TritonServerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string eid = 1;
  if (this->eid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->eid().data(), static_cast<int>(this->eid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TritonServerInfo.eid");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->eid(), target);
  }

  // map<string, string> input_fields = 2;
  if (!this->input_fields().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "TritonServerInfo.InputFieldsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "TritonServerInfo.InputFieldsEntry.value");
      }
    };

    if (false &&
        this->input_fields().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->input_fields().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->input_fields().begin();
          it != this->input_fields().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TritonServerInfo_InputFieldsEntry_DoNotUse::Funcs::SerializeToArray(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->input_fields().begin();
          it != this->input_fields().end(); ++it) {
        target = TritonServerInfo_InputFieldsEntry_DoNotUse::Funcs::SerializeToArray(2, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, string> output_fields = 3;
  if (!this->output_fields().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "TritonServerInfo.OutputFieldsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "TritonServerInfo.OutputFieldsEntry.value");
      }
    };

    if (false &&
        this->output_fields().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->output_fields().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->output_fields().begin();
          it != this->output_fields().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TritonServerInfo_OutputFieldsEntry_DoNotUse::Funcs::SerializeToArray(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->output_fields().begin();
          it != this->output_fields().end(); ++it) {
        target = TritonServerInfo_OutputFieldsEntry_DoNotUse::Funcs::SerializeToArray(3, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TritonServerInfo)
  return target;
}

size_t TritonServerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TritonServerInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> input_fields = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->input_fields_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->input_fields().begin();
      it != this->input_fields().end(); ++it) {
    total_size += TritonServerInfo_InputFieldsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> output_fields = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->output_fields_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->output_fields().begin();
      it != this->output_fields().end(); ++it) {
    total_size += TritonServerInfo_OutputFieldsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string eid = 1;
  if (this->eid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->eid());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TritonServerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TritonServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TritonServerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TritonServerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TritonServerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TritonServerInfo)
    MergeFrom(*source);
  }
}

void TritonServerInfo::MergeFrom(const TritonServerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TritonServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  input_fields_.MergeFrom(from.input_fields_);
  output_fields_.MergeFrom(from.output_fields_);
  if (from.eid().size() > 0) {

    eid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.eid_);
  }
}

void TritonServerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TritonServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TritonServerInfo::CopyFrom(const TritonServerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TritonServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TritonServerInfo::IsInitialized() const {
  return true;
}

void TritonServerInfo::InternalSwap(TritonServerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  input_fields_.Swap(&other->input_fields_);
  output_fields_.Swap(&other->output_fields_);
  eid_.Swap(&other->eid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata TritonServerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PredictResponse::InitAsDefaultInstance() {
  ::_PredictResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::ResponseStatus*>(
      ::ResponseStatus::internal_default_instance());
  ::_PredictResponse_default_instance_._instance.get_mutable()->results_ = const_cast< ::DataBatch*>(
      ::DataBatch::internal_default_instance());
}
class PredictResponse::_Internal {
 public:
  static const ::ResponseStatus& status(const PredictResponse* msg);
  static const ::DataBatch& results(const PredictResponse* msg);
};

const ::ResponseStatus&
PredictResponse::_Internal::status(const PredictResponse* msg) {
  return *msg->status_;
}
const ::DataBatch&
PredictResponse::_Internal::results(const PredictResponse* msg) {
  return *msg->results_;
}
void PredictResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void PredictResponse::clear_results() {
  if (GetArenaNoVirtual() == nullptr && results_ != nullptr) {
    delete results_;
  }
  results_ = nullptr;
}
PredictResponse::PredictResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PredictResponse)
}
PredictResponse::PredictResponse(const PredictResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::ResponseStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from.has_results()) {
    results_ = new ::DataBatch(*from.results_);
  } else {
    results_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PredictResponse)
}

void PredictResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PredictResponse_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&results_) -
      reinterpret_cast<char*>(&status_)) + sizeof(results_));
}

PredictResponse::~PredictResponse() {
  // @@protoc_insertion_point(destructor:PredictResponse)
  SharedDtor();
}

void PredictResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete results_;
}

void PredictResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PredictResponse& PredictResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PredictResponse_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto.base);
  return *internal_default_instance();
}


void PredictResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:PredictResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && results_ != nullptr) {
    delete results_;
  }
  results_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PredictResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ResponseStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DataBatch results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_results(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PredictResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:PredictResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ResponseStatus status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DataBatch results = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PredictResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PredictResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PredictResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PredictResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::status(this), output);
  }

  // .DataBatch results = 2;
  if (this->has_results()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::results(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PredictResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* PredictResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PredictResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::status(this), target);
  }

  // .DataBatch results = 2;
  if (this->has_results()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::results(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PredictResponse)
  return target;
}

size_t PredictResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PredictResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .DataBatch results = 2;
  if (this->has_results()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *results_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PredictResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PredictResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PredictResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PredictResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PredictResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PredictResponse)
    MergeFrom(*source);
  }
}

void PredictResponse::MergeFrom(const PredictResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PredictResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    mutable_status()->::ResponseStatus::MergeFrom(from.status());
  }
  if (from.has_results()) {
    mutable_results()->::DataBatch::MergeFrom(from.results());
  }
}

void PredictResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PredictResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PredictResponse::CopyFrom(const PredictResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PredictResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredictResponse::IsInitialized() const {
  return true;
}

void PredictResponse::InternalSwap(PredictResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(results_, other->results_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PredictResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PredictRequest* Arena::CreateMaybeMessage< ::PredictRequest >(Arena* arena) {
  return Arena::CreateInternal< ::PredictRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::TritonServerInfo_InputFieldsEntry_DoNotUse* Arena::CreateMaybeMessage< ::TritonServerInfo_InputFieldsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::TritonServerInfo_InputFieldsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::TritonServerInfo_OutputFieldsEntry_DoNotUse* Arena::CreateMaybeMessage< ::TritonServerInfo_OutputFieldsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::TritonServerInfo_OutputFieldsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::TritonServerInfo* Arena::CreateMaybeMessage< ::TritonServerInfo >(Arena* arena) {
  return Arena::CreateInternal< ::TritonServerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PredictResponse* Arena::CreateMaybeMessage< ::PredictResponse >(Arena* arena) {
  return Arena::CreateInternal< ::PredictResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
