// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/py_media_processor/py_media_processor.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "proto/utils/databatch.pb.h"
#include "proto/utils/request_meta.pb.h"
#include "proto/utils/data_provider.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto;
class PredictRequest;
class PredictRequestDefaultTypeInternal;
extern PredictRequestDefaultTypeInternal _PredictRequest_default_instance_;
class PredictResponse;
class PredictResponseDefaultTypeInternal;
extern PredictResponseDefaultTypeInternal _PredictResponse_default_instance_;
class TritonServerInfo;
class TritonServerInfoDefaultTypeInternal;
extern TritonServerInfoDefaultTypeInternal _TritonServerInfo_default_instance_;
class TritonServerInfo_InputFieldsEntry_DoNotUse;
class TritonServerInfo_InputFieldsEntry_DoNotUseDefaultTypeInternal;
extern TritonServerInfo_InputFieldsEntry_DoNotUseDefaultTypeInternal _TritonServerInfo_InputFieldsEntry_DoNotUse_default_instance_;
class TritonServerInfo_OutputFieldsEntry_DoNotUse;
class TritonServerInfo_OutputFieldsEntry_DoNotUseDefaultTypeInternal;
extern TritonServerInfo_OutputFieldsEntry_DoNotUseDefaultTypeInternal _TritonServerInfo_OutputFieldsEntry_DoNotUse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::PredictRequest* Arena::CreateMaybeMessage<::PredictRequest>(Arena*);
template<> ::PredictResponse* Arena::CreateMaybeMessage<::PredictResponse>(Arena*);
template<> ::TritonServerInfo* Arena::CreateMaybeMessage<::TritonServerInfo>(Arena*);
template<> ::TritonServerInfo_InputFieldsEntry_DoNotUse* Arena::CreateMaybeMessage<::TritonServerInfo_InputFieldsEntry_DoNotUse>(Arena*);
template<> ::TritonServerInfo_OutputFieldsEntry_DoNotUse* Arena::CreateMaybeMessage<::TritonServerInfo_OutputFieldsEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class PredictRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PredictRequest) */ {
 public:
  PredictRequest();
  virtual ~PredictRequest();

  PredictRequest(const PredictRequest& from);
  PredictRequest(PredictRequest&& from) noexcept
    : PredictRequest() {
    *this = ::std::move(from);
  }

  inline PredictRequest& operator=(const PredictRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PredictRequest& operator=(PredictRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PredictRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PredictRequest* internal_default_instance() {
    return reinterpret_cast<const PredictRequest*>(
               &_PredictRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PredictRequest& a, PredictRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PredictRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PredictRequest* New() const final {
    return CreateMaybeMessage<PredictRequest>(nullptr);
  }

  PredictRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PredictRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PredictRequest& from);
  void MergeFrom(const PredictRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PredictRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PredictRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto);
    return ::descriptor_table_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaFieldNumber = 1,
    kDataFieldNumber = 2,
    kDataProviderParamsFieldNumber = 3,
    kTritonServerInfoFieldNumber = 4,
    kTopkFieldNumber = 5,
    kFpsFieldNumber = 6,
  };
  // .RequestMeta meta = 1;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::RequestMeta& meta() const;
  ::RequestMeta* release_meta();
  ::RequestMeta* mutable_meta();
  void set_allocated_meta(::RequestMeta* meta);
  private:
  const ::RequestMeta& _internal_meta() const;
  ::RequestMeta* _internal_mutable_meta();
  public:

  // .DataBatch data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::DataBatch& data() const;
  ::DataBatch* release_data();
  ::DataBatch* mutable_data();
  void set_allocated_data(::DataBatch* data);
  private:
  const ::DataBatch& _internal_data() const;
  ::DataBatch* _internal_mutable_data();
  public:

  // .DataProviderParams data_provider_params = 3;
  bool has_data_provider_params() const;
  private:
  bool _internal_has_data_provider_params() const;
  public:
  void clear_data_provider_params();
  const ::DataProviderParams& data_provider_params() const;
  ::DataProviderParams* release_data_provider_params();
  ::DataProviderParams* mutable_data_provider_params();
  void set_allocated_data_provider_params(::DataProviderParams* data_provider_params);
  private:
  const ::DataProviderParams& _internal_data_provider_params() const;
  ::DataProviderParams* _internal_mutable_data_provider_params();
  public:

  // .TritonServerInfo triton_server_info = 4;
  bool has_triton_server_info() const;
  private:
  bool _internal_has_triton_server_info() const;
  public:
  void clear_triton_server_info();
  const ::TritonServerInfo& triton_server_info() const;
  ::TritonServerInfo* release_triton_server_info();
  ::TritonServerInfo* mutable_triton_server_info();
  void set_allocated_triton_server_info(::TritonServerInfo* triton_server_info);
  private:
  const ::TritonServerInfo& _internal_triton_server_info() const;
  ::TritonServerInfo* _internal_mutable_triton_server_info();
  public:

  // int32 topk = 5;
  void clear_topk();
  ::PROTOBUF_NAMESPACE_ID::int32 topk() const;
  void set_topk(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_topk() const;
  void _internal_set_topk(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float fps = 6;
  void clear_fps();
  float fps() const;
  void set_fps(float value);
  private:
  float _internal_fps() const;
  void _internal_set_fps(float value);
  public:

  // @@protoc_insertion_point(class_scope:PredictRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::RequestMeta* meta_;
  ::DataBatch* data_;
  ::DataProviderParams* data_provider_params_;
  ::TritonServerInfo* triton_server_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 topk_;
  float fps_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto;
};
// -------------------------------------------------------------------

class TritonServerInfo_InputFieldsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TritonServerInfo_InputFieldsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TritonServerInfo_InputFieldsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  TritonServerInfo_InputFieldsEntry_DoNotUse();
  TritonServerInfo_InputFieldsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TritonServerInfo_InputFieldsEntry_DoNotUse& other);
  static const TritonServerInfo_InputFieldsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TritonServerInfo_InputFieldsEntry_DoNotUse*>(&_TritonServerInfo_InputFieldsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "TritonServerInfo.InputFieldsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "TritonServerInfo.InputFieldsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto);
    return ::descriptor_table_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto.file_level_metadata[1];
  }

  public:
};

// -------------------------------------------------------------------

class TritonServerInfo_OutputFieldsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TritonServerInfo_OutputFieldsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TritonServerInfo_OutputFieldsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  TritonServerInfo_OutputFieldsEntry_DoNotUse();
  TritonServerInfo_OutputFieldsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TritonServerInfo_OutputFieldsEntry_DoNotUse& other);
  static const TritonServerInfo_OutputFieldsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TritonServerInfo_OutputFieldsEntry_DoNotUse*>(&_TritonServerInfo_OutputFieldsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "TritonServerInfo.OutputFieldsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "TritonServerInfo.OutputFieldsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto);
    return ::descriptor_table_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto.file_level_metadata[2];
  }

  public:
};

// -------------------------------------------------------------------

class TritonServerInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TritonServerInfo) */ {
 public:
  TritonServerInfo();
  virtual ~TritonServerInfo();

  TritonServerInfo(const TritonServerInfo& from);
  TritonServerInfo(TritonServerInfo&& from) noexcept
    : TritonServerInfo() {
    *this = ::std::move(from);
  }

  inline TritonServerInfo& operator=(const TritonServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TritonServerInfo& operator=(TritonServerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TritonServerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TritonServerInfo* internal_default_instance() {
    return reinterpret_cast<const TritonServerInfo*>(
               &_TritonServerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TritonServerInfo& a, TritonServerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TritonServerInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TritonServerInfo* New() const final {
    return CreateMaybeMessage<TritonServerInfo>(nullptr);
  }

  TritonServerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TritonServerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TritonServerInfo& from);
  void MergeFrom(const TritonServerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TritonServerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TritonServerInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto);
    return ::descriptor_table_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kInputFieldsFieldNumber = 2,
    kOutputFieldsFieldNumber = 3,
    kEidFieldNumber = 1,
  };
  // map<string, string> input_fields = 2;
  int input_fields_size() const;
  private:
  int _internal_input_fields_size() const;
  public:
  void clear_input_fields();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_input_fields() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_input_fields();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      input_fields() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_input_fields();

  // map<string, string> output_fields = 3;
  int output_fields_size() const;
  private:
  int _internal_output_fields_size() const;
  public:
  void clear_output_fields();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_output_fields() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_output_fields();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      output_fields() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_output_fields();

  // string eid = 1;
  void clear_eid();
  const std::string& eid() const;
  void set_eid(const std::string& value);
  void set_eid(std::string&& value);
  void set_eid(const char* value);
  void set_eid(const char* value, size_t size);
  std::string* mutable_eid();
  std::string* release_eid();
  void set_allocated_eid(std::string* eid);
  private:
  const std::string& _internal_eid() const;
  void _internal_set_eid(const std::string& value);
  std::string* _internal_mutable_eid();
  public:

  // @@protoc_insertion_point(class_scope:TritonServerInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      TritonServerInfo_InputFieldsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > input_fields_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      TritonServerInfo_OutputFieldsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > output_fields_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr eid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto;
};
// -------------------------------------------------------------------

class PredictResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PredictResponse) */ {
 public:
  PredictResponse();
  virtual ~PredictResponse();

  PredictResponse(const PredictResponse& from);
  PredictResponse(PredictResponse&& from) noexcept
    : PredictResponse() {
    *this = ::std::move(from);
  }

  inline PredictResponse& operator=(const PredictResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PredictResponse& operator=(PredictResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PredictResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PredictResponse* internal_default_instance() {
    return reinterpret_cast<const PredictResponse*>(
               &_PredictResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PredictResponse& a, PredictResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PredictResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PredictResponse* New() const final {
    return CreateMaybeMessage<PredictResponse>(nullptr);
  }

  PredictResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PredictResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PredictResponse& from);
  void MergeFrom(const PredictResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PredictResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PredictResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto);
    return ::descriptor_table_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kResultsFieldNumber = 2,
  };
  // .ResponseStatus status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::ResponseStatus& status() const;
  ::ResponseStatus* release_status();
  ::ResponseStatus* mutable_status();
  void set_allocated_status(::ResponseStatus* status);
  private:
  const ::ResponseStatus& _internal_status() const;
  ::ResponseStatus* _internal_mutable_status();
  public:

  // .DataBatch results = 2;
  bool has_results() const;
  private:
  bool _internal_has_results() const;
  public:
  void clear_results();
  const ::DataBatch& results() const;
  ::DataBatch* release_results();
  ::DataBatch* mutable_results();
  void set_allocated_results(::DataBatch* results);
  private:
  const ::DataBatch& _internal_results() const;
  ::DataBatch* _internal_mutable_results();
  public:

  // @@protoc_insertion_point(class_scope:PredictResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::ResponseStatus* status_;
  ::DataBatch* results_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PredictRequest

// .RequestMeta meta = 1;
inline bool PredictRequest::_internal_has_meta() const {
  return this != internal_default_instance() && meta_ != nullptr;
}
inline bool PredictRequest::has_meta() const {
  return _internal_has_meta();
}
inline const ::RequestMeta& PredictRequest::_internal_meta() const {
  const ::RequestMeta* p = meta_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RequestMeta*>(
      &::_RequestMeta_default_instance_);
}
inline const ::RequestMeta& PredictRequest::meta() const {
  // @@protoc_insertion_point(field_get:PredictRequest.meta)
  return _internal_meta();
}
inline ::RequestMeta* PredictRequest::release_meta() {
  // @@protoc_insertion_point(field_release:PredictRequest.meta)
  
  ::RequestMeta* temp = meta_;
  meta_ = nullptr;
  return temp;
}
inline ::RequestMeta* PredictRequest::_internal_mutable_meta() {
  
  if (meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::RequestMeta>(GetArenaNoVirtual());
    meta_ = p;
  }
  return meta_;
}
inline ::RequestMeta* PredictRequest::mutable_meta() {
  // @@protoc_insertion_point(field_mutable:PredictRequest.meta)
  return _internal_mutable_meta();
}
inline void PredictRequest::set_allocated_meta(::RequestMeta* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:PredictRequest.meta)
}

// .DataBatch data = 2;
inline bool PredictRequest::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool PredictRequest::has_data() const {
  return _internal_has_data();
}
inline const ::DataBatch& PredictRequest::_internal_data() const {
  const ::DataBatch* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DataBatch*>(
      &::_DataBatch_default_instance_);
}
inline const ::DataBatch& PredictRequest::data() const {
  // @@protoc_insertion_point(field_get:PredictRequest.data)
  return _internal_data();
}
inline ::DataBatch* PredictRequest::release_data() {
  // @@protoc_insertion_point(field_release:PredictRequest.data)
  
  ::DataBatch* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::DataBatch* PredictRequest::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::DataBatch>(GetArenaNoVirtual());
    data_ = p;
  }
  return data_;
}
inline ::DataBatch* PredictRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable:PredictRequest.data)
  return _internal_mutable_data();
}
inline void PredictRequest::set_allocated_data(::DataBatch* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:PredictRequest.data)
}

// .DataProviderParams data_provider_params = 3;
inline bool PredictRequest::_internal_has_data_provider_params() const {
  return this != internal_default_instance() && data_provider_params_ != nullptr;
}
inline bool PredictRequest::has_data_provider_params() const {
  return _internal_has_data_provider_params();
}
inline const ::DataProviderParams& PredictRequest::_internal_data_provider_params() const {
  const ::DataProviderParams* p = data_provider_params_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DataProviderParams*>(
      &::_DataProviderParams_default_instance_);
}
inline const ::DataProviderParams& PredictRequest::data_provider_params() const {
  // @@protoc_insertion_point(field_get:PredictRequest.data_provider_params)
  return _internal_data_provider_params();
}
inline ::DataProviderParams* PredictRequest::release_data_provider_params() {
  // @@protoc_insertion_point(field_release:PredictRequest.data_provider_params)
  
  ::DataProviderParams* temp = data_provider_params_;
  data_provider_params_ = nullptr;
  return temp;
}
inline ::DataProviderParams* PredictRequest::_internal_mutable_data_provider_params() {
  
  if (data_provider_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::DataProviderParams>(GetArenaNoVirtual());
    data_provider_params_ = p;
  }
  return data_provider_params_;
}
inline ::DataProviderParams* PredictRequest::mutable_data_provider_params() {
  // @@protoc_insertion_point(field_mutable:PredictRequest.data_provider_params)
  return _internal_mutable_data_provider_params();
}
inline void PredictRequest::set_allocated_data_provider_params(::DataProviderParams* data_provider_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_provider_params_);
  }
  if (data_provider_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data_provider_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_provider_params, submessage_arena);
    }
    
  } else {
    
  }
  data_provider_params_ = data_provider_params;
  // @@protoc_insertion_point(field_set_allocated:PredictRequest.data_provider_params)
}

// .TritonServerInfo triton_server_info = 4;
inline bool PredictRequest::_internal_has_triton_server_info() const {
  return this != internal_default_instance() && triton_server_info_ != nullptr;
}
inline bool PredictRequest::has_triton_server_info() const {
  return _internal_has_triton_server_info();
}
inline void PredictRequest::clear_triton_server_info() {
  if (GetArenaNoVirtual() == nullptr && triton_server_info_ != nullptr) {
    delete triton_server_info_;
  }
  triton_server_info_ = nullptr;
}
inline const ::TritonServerInfo& PredictRequest::_internal_triton_server_info() const {
  const ::TritonServerInfo* p = triton_server_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::TritonServerInfo*>(
      &::_TritonServerInfo_default_instance_);
}
inline const ::TritonServerInfo& PredictRequest::triton_server_info() const {
  // @@protoc_insertion_point(field_get:PredictRequest.triton_server_info)
  return _internal_triton_server_info();
}
inline ::TritonServerInfo* PredictRequest::release_triton_server_info() {
  // @@protoc_insertion_point(field_release:PredictRequest.triton_server_info)
  
  ::TritonServerInfo* temp = triton_server_info_;
  triton_server_info_ = nullptr;
  return temp;
}
inline ::TritonServerInfo* PredictRequest::_internal_mutable_triton_server_info() {
  
  if (triton_server_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TritonServerInfo>(GetArenaNoVirtual());
    triton_server_info_ = p;
  }
  return triton_server_info_;
}
inline ::TritonServerInfo* PredictRequest::mutable_triton_server_info() {
  // @@protoc_insertion_point(field_mutable:PredictRequest.triton_server_info)
  return _internal_mutable_triton_server_info();
}
inline void PredictRequest::set_allocated_triton_server_info(::TritonServerInfo* triton_server_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete triton_server_info_;
  }
  if (triton_server_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      triton_server_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, triton_server_info, submessage_arena);
    }
    
  } else {
    
  }
  triton_server_info_ = triton_server_info;
  // @@protoc_insertion_point(field_set_allocated:PredictRequest.triton_server_info)
}

// int32 topk = 5;
inline void PredictRequest::clear_topk() {
  topk_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PredictRequest::_internal_topk() const {
  return topk_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PredictRequest::topk() const {
  // @@protoc_insertion_point(field_get:PredictRequest.topk)
  return _internal_topk();
}
inline void PredictRequest::_internal_set_topk(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  topk_ = value;
}
inline void PredictRequest::set_topk(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_topk(value);
  // @@protoc_insertion_point(field_set:PredictRequest.topk)
}

// float fps = 6;
inline void PredictRequest::clear_fps() {
  fps_ = 0;
}
inline float PredictRequest::_internal_fps() const {
  return fps_;
}
inline float PredictRequest::fps() const {
  // @@protoc_insertion_point(field_get:PredictRequest.fps)
  return _internal_fps();
}
inline void PredictRequest::_internal_set_fps(float value) {
  
  fps_ = value;
}
inline void PredictRequest::set_fps(float value) {
  _internal_set_fps(value);
  // @@protoc_insertion_point(field_set:PredictRequest.fps)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TritonServerInfo

// string eid = 1;
inline void TritonServerInfo::clear_eid() {
  eid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TritonServerInfo::eid() const {
  // @@protoc_insertion_point(field_get:TritonServerInfo.eid)
  return _internal_eid();
}
inline void TritonServerInfo::set_eid(const std::string& value) {
  _internal_set_eid(value);
  // @@protoc_insertion_point(field_set:TritonServerInfo.eid)
}
inline std::string* TritonServerInfo::mutable_eid() {
  // @@protoc_insertion_point(field_mutable:TritonServerInfo.eid)
  return _internal_mutable_eid();
}
inline const std::string& TritonServerInfo::_internal_eid() const {
  return eid_.GetNoArena();
}
inline void TritonServerInfo::_internal_set_eid(const std::string& value) {
  
  eid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TritonServerInfo::set_eid(std::string&& value) {
  
  eid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TritonServerInfo.eid)
}
inline void TritonServerInfo::set_eid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  eid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TritonServerInfo.eid)
}
inline void TritonServerInfo::set_eid(const char* value, size_t size) {
  
  eid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TritonServerInfo.eid)
}
inline std::string* TritonServerInfo::_internal_mutable_eid() {
  
  return eid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TritonServerInfo::release_eid() {
  // @@protoc_insertion_point(field_release:TritonServerInfo.eid)
  
  return eid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TritonServerInfo::set_allocated_eid(std::string* eid) {
  if (eid != nullptr) {
    
  } else {
    
  }
  eid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), eid);
  // @@protoc_insertion_point(field_set_allocated:TritonServerInfo.eid)
}

// map<string, string> input_fields = 2;
inline int TritonServerInfo::_internal_input_fields_size() const {
  return input_fields_.size();
}
inline int TritonServerInfo::input_fields_size() const {
  return _internal_input_fields_size();
}
inline void TritonServerInfo::clear_input_fields() {
  input_fields_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
TritonServerInfo::_internal_input_fields() const {
  return input_fields_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
TritonServerInfo::input_fields() const {
  // @@protoc_insertion_point(field_map:TritonServerInfo.input_fields)
  return _internal_input_fields();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
TritonServerInfo::_internal_mutable_input_fields() {
  return input_fields_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
TritonServerInfo::mutable_input_fields() {
  // @@protoc_insertion_point(field_mutable_map:TritonServerInfo.input_fields)
  return _internal_mutable_input_fields();
}

// map<string, string> output_fields = 3;
inline int TritonServerInfo::_internal_output_fields_size() const {
  return output_fields_.size();
}
inline int TritonServerInfo::output_fields_size() const {
  return _internal_output_fields_size();
}
inline void TritonServerInfo::clear_output_fields() {
  output_fields_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
TritonServerInfo::_internal_output_fields() const {
  return output_fields_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
TritonServerInfo::output_fields() const {
  // @@protoc_insertion_point(field_map:TritonServerInfo.output_fields)
  return _internal_output_fields();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
TritonServerInfo::_internal_mutable_output_fields() {
  return output_fields_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
TritonServerInfo::mutable_output_fields() {
  // @@protoc_insertion_point(field_mutable_map:TritonServerInfo.output_fields)
  return _internal_mutable_output_fields();
}

// -------------------------------------------------------------------

// PredictResponse

// .ResponseStatus status = 1;
inline bool PredictResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool PredictResponse::has_status() const {
  return _internal_has_status();
}
inline const ::ResponseStatus& PredictResponse::_internal_status() const {
  const ::ResponseStatus* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ResponseStatus*>(
      &::_ResponseStatus_default_instance_);
}
inline const ::ResponseStatus& PredictResponse::status() const {
  // @@protoc_insertion_point(field_get:PredictResponse.status)
  return _internal_status();
}
inline ::ResponseStatus* PredictResponse::release_status() {
  // @@protoc_insertion_point(field_release:PredictResponse.status)
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::ResponseStatus* PredictResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::ResponseStatus>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::ResponseStatus* PredictResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:PredictResponse.status)
  return _internal_mutable_status();
}
inline void PredictResponse::set_allocated_status(::ResponseStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:PredictResponse.status)
}

// .DataBatch results = 2;
inline bool PredictResponse::_internal_has_results() const {
  return this != internal_default_instance() && results_ != nullptr;
}
inline bool PredictResponse::has_results() const {
  return _internal_has_results();
}
inline const ::DataBatch& PredictResponse::_internal_results() const {
  const ::DataBatch* p = results_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DataBatch*>(
      &::_DataBatch_default_instance_);
}
inline const ::DataBatch& PredictResponse::results() const {
  // @@protoc_insertion_point(field_get:PredictResponse.results)
  return _internal_results();
}
inline ::DataBatch* PredictResponse::release_results() {
  // @@protoc_insertion_point(field_release:PredictResponse.results)
  
  ::DataBatch* temp = results_;
  results_ = nullptr;
  return temp;
}
inline ::DataBatch* PredictResponse::_internal_mutable_results() {
  
  if (results_ == nullptr) {
    auto* p = CreateMaybeMessage<::DataBatch>(GetArenaNoVirtual());
    results_ = p;
  }
  return results_;
}
inline ::DataBatch* PredictResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable:PredictResponse.results)
  return _internal_mutable_results();
}
inline void PredictResponse::set_allocated_results(::DataBatch* results) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(results_);
  }
  if (results) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      results = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, results, submessage_arena);
    }
    
  } else {
    
  }
  results_ = results;
  // @@protoc_insertion_point(field_set_allocated:PredictResponse.results)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fpy_5fmedia_5fprocessor_2fpy_5fmedia_5fprocessor_2eproto
