// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/clarifai/analytics/service.proto

#include "proto/clarifai/analytics/service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto;
namespace clarifai {
namespace analytics {
class PostAnalyticsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostAnalyticsResponse> _instance;
} _PostAnalyticsResponse_default_instance_;
class GetHealthzRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetHealthzRequest> _instance;
} _GetHealthzRequest_default_instance_;
class GetHealthzResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetHealthzResponse> _instance;
} _GetHealthzResponse_default_instance_;
}  // namespace analytics
}  // namespace clarifai
static void InitDefaultsscc_info_GetHealthzRequest_proto_2fclarifai_2fanalytics_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::analytics::_GetHealthzRequest_default_instance_;
    new (ptr) ::clarifai::analytics::GetHealthzRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::analytics::GetHealthzRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetHealthzRequest_proto_2fclarifai_2fanalytics_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetHealthzRequest_proto_2fclarifai_2fanalytics_2fservice_2eproto}, {}};

static void InitDefaultsscc_info_GetHealthzResponse_proto_2fclarifai_2fanalytics_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::analytics::_GetHealthzResponse_default_instance_;
    new (ptr) ::clarifai::analytics::GetHealthzResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::analytics::GetHealthzResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetHealthzResponse_proto_2fclarifai_2fanalytics_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetHealthzResponse_proto_2fclarifai_2fanalytics_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,}};

static void InitDefaultsscc_info_PostAnalyticsResponse_proto_2fclarifai_2fanalytics_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::analytics::_PostAnalyticsResponse_default_instance_;
    new (ptr) ::clarifai::analytics::PostAnalyticsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::analytics::PostAnalyticsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PostAnalyticsResponse_proto_2fclarifai_2fanalytics_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PostAnalyticsResponse_proto_2fclarifai_2fanalytics_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fclarifai_2fanalytics_2fservice_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_proto_2fclarifai_2fanalytics_2fservice_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fclarifai_2fanalytics_2fservice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2fclarifai_2fanalytics_2fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::analytics::PostAnalyticsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::analytics::PostAnalyticsResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::analytics::GetHealthzRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::analytics::GetHealthzResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::analytics::GetHealthzResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::analytics::GetHealthzResponse, time_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::clarifai::analytics::PostAnalyticsResponse)},
  { 6, -1, sizeof(::clarifai::analytics::GetHealthzRequest)},
  { 11, -1, sizeof(::clarifai::analytics::GetHealthzResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::analytics::_PostAnalyticsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::analytics::_GetHealthzRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::analytics::_GetHealthzResponse_default_instance_),
};

const char descriptor_table_protodef_proto_2fclarifai_2fanalytics_2fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&proto/clarifai/analytics/service.proto"
  "\022\022clarifai.analytics\032(proto/clarifai/ana"
  "lytics/resources.proto\032&proto/clarifai/a"
  "pi/status/status.proto\032%proto/clarifai/a"
  "uth/scope/scope.proto\032(proto/clarifai/au"
  "th/util/extension.proto\032\034google/api/anno"
  "tations.proto\"D\n\025PostAnalyticsResponse\022+"
  "\n\006status\030\001 \001(\0132\033.clarifai.api.status.Sta"
  "tus\"\023\n\021GetHealthzRequest\"O\n\022GetHealthzRe"
  "sponse\022+\n\006status\030\001 \001(\0132\033.clarifai.api.st"
  "atus.Status\022\014\n\004time\030\002 \001(\t2\211\002\n\020AnalyticsS"
  "ervice\022{\n\nGetHealthz\022%.clarifai.analytic"
  "s.GetHealthzRequest\032&.clarifai.analytics"
  ".GetHealthzResponse\"\036\202\323\344\223\002\024\022\022/analytics/"
  "healthz\230\234\'\001\022x\n\rPostAnalytics\022\035.clarifai."
  "analytics.Analytics\032).clarifai.analytics"
  ".PostAnalyticsResponse\"\035\202\323\344\223\002\017\"\n/analyti"
  "cs:\001*\230\234\'\002\220\234\'\001B1\n\033com.clarifai.grpc.analy"
  "ticsP\001Z\tanalytics\242\002\004CAIPb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2fclarifai_2fanalytics_2fservice_2eproto_deps[5] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_proto_2fclarifai_2fanalytics_2fresources_2eproto,
  &::descriptor_table_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto,
  &::descriptor_table_proto_2fclarifai_2fauth_2fscope_2fscope_2eproto,
  &::descriptor_table_proto_2fclarifai_2fauth_2futil_2fextension_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_2fclarifai_2fanalytics_2fservice_2eproto_sccs[3] = {
  &scc_info_GetHealthzRequest_proto_2fclarifai_2fanalytics_2fservice_2eproto.base,
  &scc_info_GetHealthzResponse_proto_2fclarifai_2fanalytics_2fservice_2eproto.base,
  &scc_info_PostAnalyticsResponse_proto_2fclarifai_2fanalytics_2fservice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2fclarifai_2fanalytics_2fservice_2eproto_once;
static bool descriptor_table_proto_2fclarifai_2fanalytics_2fservice_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fclarifai_2fanalytics_2fservice_2eproto = {
  &descriptor_table_proto_2fclarifai_2fanalytics_2fservice_2eproto_initialized, descriptor_table_protodef_proto_2fclarifai_2fanalytics_2fservice_2eproto, "proto/clarifai/analytics/service.proto", 752,
  &descriptor_table_proto_2fclarifai_2fanalytics_2fservice_2eproto_once, descriptor_table_proto_2fclarifai_2fanalytics_2fservice_2eproto_sccs, descriptor_table_proto_2fclarifai_2fanalytics_2fservice_2eproto_deps, 3, 5,
  schemas, file_default_instances, TableStruct_proto_2fclarifai_2fanalytics_2fservice_2eproto::offsets,
  file_level_metadata_proto_2fclarifai_2fanalytics_2fservice_2eproto, 3, file_level_enum_descriptors_proto_2fclarifai_2fanalytics_2fservice_2eproto, file_level_service_descriptors_proto_2fclarifai_2fanalytics_2fservice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2fclarifai_2fanalytics_2fservice_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_2fclarifai_2fanalytics_2fservice_2eproto), true);
namespace clarifai {
namespace analytics {

// ===================================================================

void PostAnalyticsResponse::InitAsDefaultInstance() {
  ::clarifai::analytics::_PostAnalyticsResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class PostAnalyticsResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const PostAnalyticsResponse* msg);
};

const ::clarifai::api::status::Status&
PostAnalyticsResponse::_Internal::status(const PostAnalyticsResponse* msg) {
  return *msg->status_;
}
void PostAnalyticsResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
PostAnalyticsResponse::PostAnalyticsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.analytics.PostAnalyticsResponse)
}
PostAnalyticsResponse::PostAnalyticsResponse(const PostAnalyticsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.analytics.PostAnalyticsResponse)
}

void PostAnalyticsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostAnalyticsResponse_proto_2fclarifai_2fanalytics_2fservice_2eproto.base);
  status_ = nullptr;
}

PostAnalyticsResponse::~PostAnalyticsResponse() {
  // @@protoc_insertion_point(destructor:clarifai.analytics.PostAnalyticsResponse)
  SharedDtor();
}

void PostAnalyticsResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void PostAnalyticsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostAnalyticsResponse& PostAnalyticsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostAnalyticsResponse_proto_2fclarifai_2fanalytics_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostAnalyticsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.analytics.PostAnalyticsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostAnalyticsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostAnalyticsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.analytics.PostAnalyticsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.analytics.PostAnalyticsResponse)
  return target;
}

size_t PostAnalyticsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.analytics.PostAnalyticsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostAnalyticsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.analytics.PostAnalyticsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PostAnalyticsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostAnalyticsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.analytics.PostAnalyticsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.analytics.PostAnalyticsResponse)
    MergeFrom(*source);
  }
}

void PostAnalyticsResponse::MergeFrom(const PostAnalyticsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.analytics.PostAnalyticsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void PostAnalyticsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.analytics.PostAnalyticsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostAnalyticsResponse::CopyFrom(const PostAnalyticsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.analytics.PostAnalyticsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostAnalyticsResponse::IsInitialized() const {
  return true;
}

void PostAnalyticsResponse::InternalSwap(PostAnalyticsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostAnalyticsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetHealthzRequest::InitAsDefaultInstance() {
}
class GetHealthzRequest::_Internal {
 public:
};

GetHealthzRequest::GetHealthzRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.analytics.GetHealthzRequest)
}
GetHealthzRequest::GetHealthzRequest(const GetHealthzRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:clarifai.analytics.GetHealthzRequest)
}

void GetHealthzRequest::SharedCtor() {
}

GetHealthzRequest::~GetHealthzRequest() {
  // @@protoc_insertion_point(destructor:clarifai.analytics.GetHealthzRequest)
  SharedDtor();
}

void GetHealthzRequest::SharedDtor() {
}

void GetHealthzRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetHealthzRequest& GetHealthzRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetHealthzRequest_proto_2fclarifai_2fanalytics_2fservice_2eproto.base);
  return *internal_default_instance();
}


void GetHealthzRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.analytics.GetHealthzRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* GetHealthzRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetHealthzRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.analytics.GetHealthzRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.analytics.GetHealthzRequest)
  return target;
}

size_t GetHealthzRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.analytics.GetHealthzRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetHealthzRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.analytics.GetHealthzRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetHealthzRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetHealthzRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.analytics.GetHealthzRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.analytics.GetHealthzRequest)
    MergeFrom(*source);
  }
}

void GetHealthzRequest::MergeFrom(const GetHealthzRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.analytics.GetHealthzRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetHealthzRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.analytics.GetHealthzRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetHealthzRequest::CopyFrom(const GetHealthzRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.analytics.GetHealthzRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetHealthzRequest::IsInitialized() const {
  return true;
}

void GetHealthzRequest::InternalSwap(GetHealthzRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetHealthzRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetHealthzResponse::InitAsDefaultInstance() {
  ::clarifai::analytics::_GetHealthzResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class GetHealthzResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const GetHealthzResponse* msg);
};

const ::clarifai::api::status::Status&
GetHealthzResponse::_Internal::status(const GetHealthzResponse* msg) {
  return *msg->status_;
}
void GetHealthzResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
GetHealthzResponse::GetHealthzResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.analytics.GetHealthzResponse)
}
GetHealthzResponse::GetHealthzResponse(const GetHealthzResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_time().empty()) {
    time_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.time_);
  }
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.analytics.GetHealthzResponse)
}

void GetHealthzResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetHealthzResponse_proto_2fclarifai_2fanalytics_2fservice_2eproto.base);
  time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = nullptr;
}

GetHealthzResponse::~GetHealthzResponse() {
  // @@protoc_insertion_point(destructor:clarifai.analytics.GetHealthzResponse)
  SharedDtor();
}

void GetHealthzResponse::SharedDtor() {
  time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void GetHealthzResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetHealthzResponse& GetHealthzResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetHealthzResponse_proto_2fclarifai_2fanalytics_2fservice_2eproto.base);
  return *internal_default_instance();
}


void GetHealthzResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.analytics.GetHealthzResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  time_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetHealthzResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.analytics.GetHealthzResponse.time"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetHealthzResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.analytics.GetHealthzResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // string time = 2;
  if (this->time().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_time().data(), static_cast<int>(this->_internal_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.analytics.GetHealthzResponse.time");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.analytics.GetHealthzResponse)
  return target;
}

size_t GetHealthzResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.analytics.GetHealthzResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string time = 2;
  if (this->time().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_time());
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetHealthzResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.analytics.GetHealthzResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetHealthzResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetHealthzResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.analytics.GetHealthzResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.analytics.GetHealthzResponse)
    MergeFrom(*source);
  }
}

void GetHealthzResponse::MergeFrom(const GetHealthzResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.analytics.GetHealthzResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time().size() > 0) {

    time_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.time_);
  }
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void GetHealthzResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.analytics.GetHealthzResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetHealthzResponse::CopyFrom(const GetHealthzResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.analytics.GetHealthzResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetHealthzResponse::IsInitialized() const {
  return true;
}

void GetHealthzResponse::InternalSwap(GetHealthzResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  time_.Swap(&other->time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetHealthzResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace analytics
}  // namespace clarifai
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::clarifai::analytics::PostAnalyticsResponse* Arena::CreateMaybeMessage< ::clarifai::analytics::PostAnalyticsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::analytics::PostAnalyticsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::analytics::GetHealthzRequest* Arena::CreateMaybeMessage< ::clarifai::analytics::GetHealthzRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::analytics::GetHealthzRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::analytics::GetHealthzResponse* Arena::CreateMaybeMessage< ::clarifai::analytics::GetHealthzResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::analytics::GetHealthzResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
