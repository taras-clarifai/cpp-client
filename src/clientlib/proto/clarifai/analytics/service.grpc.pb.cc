// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/clarifai/analytics/service.proto

#include "proto/clarifai/analytics/service.pb.h"
#include "proto/clarifai/analytics/service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace clarifai {
namespace analytics {

static const char* AnalyticsService_method_names[] = {
  "/clarifai.analytics.AnalyticsService/GetHealthz",
  "/clarifai.analytics.AnalyticsService/PostAnalytics",
};

std::unique_ptr< AnalyticsService::Stub> AnalyticsService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AnalyticsService::Stub> stub(new AnalyticsService::Stub(channel));
  return stub;
}

AnalyticsService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetHealthz_(AnalyticsService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PostAnalytics_(AnalyticsService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status AnalyticsService::Stub::GetHealthz(::grpc::ClientContext* context, const ::clarifai::analytics::GetHealthzRequest& request, ::clarifai::analytics::GetHealthzResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetHealthz_, context, request, response);
}

void AnalyticsService::Stub::experimental_async::GetHealthz(::grpc::ClientContext* context, const ::clarifai::analytics::GetHealthzRequest* request, ::clarifai::analytics::GetHealthzResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetHealthz_, context, request, response, std::move(f));
}

void AnalyticsService::Stub::experimental_async::GetHealthz(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::analytics::GetHealthzResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetHealthz_, context, request, response, std::move(f));
}

void AnalyticsService::Stub::experimental_async::GetHealthz(::grpc::ClientContext* context, const ::clarifai::analytics::GetHealthzRequest* request, ::clarifai::analytics::GetHealthzResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetHealthz_, context, request, response, reactor);
}

void AnalyticsService::Stub::experimental_async::GetHealthz(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::analytics::GetHealthzResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetHealthz_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::analytics::GetHealthzResponse>* AnalyticsService::Stub::AsyncGetHealthzRaw(::grpc::ClientContext* context, const ::clarifai::analytics::GetHealthzRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::analytics::GetHealthzResponse>::Create(channel_.get(), cq, rpcmethod_GetHealthz_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::analytics::GetHealthzResponse>* AnalyticsService::Stub::PrepareAsyncGetHealthzRaw(::grpc::ClientContext* context, const ::clarifai::analytics::GetHealthzRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::analytics::GetHealthzResponse>::Create(channel_.get(), cq, rpcmethod_GetHealthz_, context, request, false);
}

::grpc::Status AnalyticsService::Stub::PostAnalytics(::grpc::ClientContext* context, const ::clarifai::analytics::Analytics& request, ::clarifai::analytics::PostAnalyticsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PostAnalytics_, context, request, response);
}

void AnalyticsService::Stub::experimental_async::PostAnalytics(::grpc::ClientContext* context, const ::clarifai::analytics::Analytics* request, ::clarifai::analytics::PostAnalyticsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostAnalytics_, context, request, response, std::move(f));
}

void AnalyticsService::Stub::experimental_async::PostAnalytics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::analytics::PostAnalyticsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostAnalytics_, context, request, response, std::move(f));
}

void AnalyticsService::Stub::experimental_async::PostAnalytics(::grpc::ClientContext* context, const ::clarifai::analytics::Analytics* request, ::clarifai::analytics::PostAnalyticsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostAnalytics_, context, request, response, reactor);
}

void AnalyticsService::Stub::experimental_async::PostAnalytics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::analytics::PostAnalyticsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostAnalytics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::analytics::PostAnalyticsResponse>* AnalyticsService::Stub::AsyncPostAnalyticsRaw(::grpc::ClientContext* context, const ::clarifai::analytics::Analytics& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::analytics::PostAnalyticsResponse>::Create(channel_.get(), cq, rpcmethod_PostAnalytics_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::analytics::PostAnalyticsResponse>* AnalyticsService::Stub::PrepareAsyncPostAnalyticsRaw(::grpc::ClientContext* context, const ::clarifai::analytics::Analytics& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::analytics::PostAnalyticsResponse>::Create(channel_.get(), cq, rpcmethod_PostAnalytics_, context, request, false);
}

AnalyticsService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AnalyticsService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AnalyticsService::Service, ::clarifai::analytics::GetHealthzRequest, ::clarifai::analytics::GetHealthzResponse>(
          std::mem_fn(&AnalyticsService::Service::GetHealthz), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AnalyticsService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AnalyticsService::Service, ::clarifai::analytics::Analytics, ::clarifai::analytics::PostAnalyticsResponse>(
          std::mem_fn(&AnalyticsService::Service::PostAnalytics), this)));
}

AnalyticsService::Service::~Service() {
}

::grpc::Status AnalyticsService::Service::GetHealthz(::grpc::ServerContext* context, const ::clarifai::analytics::GetHealthzRequest* request, ::clarifai::analytics::GetHealthzResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AnalyticsService::Service::PostAnalytics(::grpc::ServerContext* context, const ::clarifai::analytics::Analytics* request, ::clarifai::analytics::PostAnalyticsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace clarifai
}  // namespace analytics

