// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/clarifai/usage/event.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fclarifai_2fusage_2fevent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fclarifai_2fusage_2fevent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fusage_2fevent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fclarifai_2fusage_2fevent_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fclarifai_2fusage_2fevent_2eproto;
namespace clarifai {
namespace usage {
class AssetEvent;
class AssetEventDefaultTypeInternal;
extern AssetEventDefaultTypeInternal _AssetEvent_default_instance_;
class EventParam;
class EventParamDefaultTypeInternal;
extern EventParamDefaultTypeInternal _EventParam_default_instance_;
class Model;
class ModelDefaultTypeInternal;
extern ModelDefaultTypeInternal _Model_default_instance_;
class OtherEvent;
class OtherEventDefaultTypeInternal;
extern OtherEventDefaultTypeInternal _OtherEvent_default_instance_;
class PredictEvent;
class PredictEventDefaultTypeInternal;
extern PredictEventDefaultTypeInternal _PredictEvent_default_instance_;
class SearchEvent;
class SearchEventDefaultTypeInternal;
extern SearchEventDefaultTypeInternal _SearchEvent_default_instance_;
class TrainModelEvent;
class TrainModelEventDefaultTypeInternal;
extern TrainModelEventDefaultTypeInternal _TrainModelEvent_default_instance_;
}  // namespace usage
}  // namespace clarifai
PROTOBUF_NAMESPACE_OPEN
template<> ::clarifai::usage::AssetEvent* Arena::CreateMaybeMessage<::clarifai::usage::AssetEvent>(Arena*);
template<> ::clarifai::usage::EventParam* Arena::CreateMaybeMessage<::clarifai::usage::EventParam>(Arena*);
template<> ::clarifai::usage::Model* Arena::CreateMaybeMessage<::clarifai::usage::Model>(Arena*);
template<> ::clarifai::usage::OtherEvent* Arena::CreateMaybeMessage<::clarifai::usage::OtherEvent>(Arena*);
template<> ::clarifai::usage::PredictEvent* Arena::CreateMaybeMessage<::clarifai::usage::PredictEvent>(Arena*);
template<> ::clarifai::usage::SearchEvent* Arena::CreateMaybeMessage<::clarifai::usage::SearchEvent>(Arena*);
template<> ::clarifai::usage::TrainModelEvent* Arena::CreateMaybeMessage<::clarifai::usage::TrainModelEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace clarifai {
namespace usage {

enum EventType : int {
  TYPE_NOT_SET = 0,
  PREDICT = 1,
  SEARCH = 3,
  TRAIN = 4,
  OTHER = 5,
  ASSET = 6,
  EventType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EventType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EventType_IsValid(int value);
constexpr EventType EventType_MIN = TYPE_NOT_SET;
constexpr EventType EventType_MAX = ASSET;
constexpr int EventType_ARRAYSIZE = EventType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EventType_descriptor();
template<typename T>
inline const std::string& EventType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EventType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EventType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EventType_descriptor(), enum_t_value);
}
inline bool EventType_Parse(
    const std::string& name, EventType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EventType>(
    EventType_descriptor(), name, value);
}
enum Ownership : int {
  OWNERSHIP_UNSPECIFIED = 0,
  USER = 1,
  CLARIFAI = 2,
  Ownership_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Ownership_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Ownership_IsValid(int value);
constexpr Ownership Ownership_MIN = OWNERSHIP_UNSPECIFIED;
constexpr Ownership Ownership_MAX = CLARIFAI;
constexpr int Ownership_ARRAYSIZE = Ownership_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Ownership_descriptor();
template<typename T>
inline const std::string& Ownership_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Ownership>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Ownership_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Ownership_descriptor(), enum_t_value);
}
inline bool Ownership_Parse(
    const std::string& name, Ownership* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Ownership>(
    Ownership_descriptor(), name, value);
}
enum PredictType : int {
  PREDICT_TYPE_UNSPECIFIED = 0,
  REGULAR = 1,
  BASE = 2,
  CUSTOM = 3,
  ALGORITHMIC = 4,
  THIRD_PARTY = 5,
  PredictType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PredictType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PredictType_IsValid(int value);
constexpr PredictType PredictType_MIN = PREDICT_TYPE_UNSPECIFIED;
constexpr PredictType PredictType_MAX = THIRD_PARTY;
constexpr int PredictType_ARRAYSIZE = PredictType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PredictType_descriptor();
template<typename T>
inline const std::string& PredictType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PredictType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PredictType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PredictType_descriptor(), enum_t_value);
}
inline bool PredictType_Parse(
    const std::string& name, PredictType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PredictType>(
    PredictType_descriptor(), name, value);
}
// ===================================================================

class EventParam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.usage.EventParam) */ {
 public:
  EventParam();
  virtual ~EventParam();

  EventParam(const EventParam& from);
  EventParam(EventParam&& from) noexcept
    : EventParam() {
    *this = ::std::move(from);
  }

  inline EventParam& operator=(const EventParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventParam& operator=(EventParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EventParam& default_instance();

  enum EventCase {
    kPredict = 1,
    kSearch = 3,
    kTrain = 4,
    kOther = 5,
    kAsset = 6,
    EVENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventParam* internal_default_instance() {
    return reinterpret_cast<const EventParam*>(
               &_EventParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EventParam& a, EventParam& b) {
    a.Swap(&b);
  }
  inline void Swap(EventParam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventParam* New() const final {
    return CreateMaybeMessage<EventParam>(nullptr);
  }

  EventParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EventParam& from);
  void MergeFrom(const EventParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.usage.EventParam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fusage_2fevent_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fusage_2fevent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPredictFieldNumber = 1,
    kSearchFieldNumber = 3,
    kTrainFieldNumber = 4,
    kOtherFieldNumber = 5,
    kAssetFieldNumber = 6,
  };
  // .clarifai.usage.PredictEvent predict = 1;
  bool has_predict() const;
  void clear_predict();
  const ::clarifai::usage::PredictEvent& predict() const;
  ::clarifai::usage::PredictEvent* release_predict();
  ::clarifai::usage::PredictEvent* mutable_predict();
  void set_allocated_predict(::clarifai::usage::PredictEvent* predict);

  // .clarifai.usage.SearchEvent search = 3;
  bool has_search() const;
  void clear_search();
  const ::clarifai::usage::SearchEvent& search() const;
  ::clarifai::usage::SearchEvent* release_search();
  ::clarifai::usage::SearchEvent* mutable_search();
  void set_allocated_search(::clarifai::usage::SearchEvent* search);

  // .clarifai.usage.TrainModelEvent train = 4;
  bool has_train() const;
  void clear_train();
  const ::clarifai::usage::TrainModelEvent& train() const;
  ::clarifai::usage::TrainModelEvent* release_train();
  ::clarifai::usage::TrainModelEvent* mutable_train();
  void set_allocated_train(::clarifai::usage::TrainModelEvent* train);

  // .clarifai.usage.OtherEvent other = 5;
  bool has_other() const;
  void clear_other();
  const ::clarifai::usage::OtherEvent& other() const;
  ::clarifai::usage::OtherEvent* release_other();
  ::clarifai::usage::OtherEvent* mutable_other();
  void set_allocated_other(::clarifai::usage::OtherEvent* other);

  // .clarifai.usage.AssetEvent asset = 6;
  bool has_asset() const;
  void clear_asset();
  const ::clarifai::usage::AssetEvent& asset() const;
  ::clarifai::usage::AssetEvent* release_asset();
  ::clarifai::usage::AssetEvent* mutable_asset();
  void set_allocated_asset(::clarifai::usage::AssetEvent* asset);

  void clear_event();
  EventCase event_case() const;
  // @@protoc_insertion_point(class_scope:clarifai.usage.EventParam)
 private:
  class _Internal;
  void set_has_predict();
  void set_has_search();
  void set_has_train();
  void set_has_other();
  void set_has_asset();

  inline bool has_event() const;
  inline void clear_has_event();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union EventUnion {
    EventUnion() {}
    ::clarifai::usage::PredictEvent* predict_;
    ::clarifai::usage::SearchEvent* search_;
    ::clarifai::usage::TrainModelEvent* train_;
    ::clarifai::usage::OtherEvent* other_;
    ::clarifai::usage::AssetEvent* asset_;
  } event_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_proto_2fclarifai_2fusage_2fevent_2eproto;
};
// -------------------------------------------------------------------

class Model :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.usage.Model) */ {
 public:
  Model();
  virtual ~Model();

  Model(const Model& from);
  Model(Model&& from) noexcept
    : Model() {
    *this = ::std::move(from);
  }

  inline Model& operator=(const Model& from) {
    CopyFrom(from);
    return *this;
  }
  inline Model& operator=(Model&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Model& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Model* internal_default_instance() {
    return reinterpret_cast<const Model*>(
               &_Model_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Model& a, Model& b) {
    a.Swap(&b);
  }
  inline void Swap(Model* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Model* New() const final {
    return CreateMaybeMessage<Model>(nullptr);
  }

  Model* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Model>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Model& from);
  void MergeFrom(const Model& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Model* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.usage.Model";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fusage_2fevent_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fusage_2fevent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelIdFieldNumber = 1,
    kModelTypeFieldNumber = 2,
    kModelVersionIdFieldNumber = 4,
    kOwnershipFieldNumber = 5,
  };
  // string model_id = 1;
  void clear_model_id();
  const std::string& model_id() const;
  void set_model_id(const std::string& value);
  void set_model_id(std::string&& value);
  void set_model_id(const char* value);
  void set_model_id(const char* value, size_t size);
  std::string* mutable_model_id();
  std::string* release_model_id();
  void set_allocated_model_id(std::string* model_id);

  // string model_type = 2;
  void clear_model_type();
  const std::string& model_type() const;
  void set_model_type(const std::string& value);
  void set_model_type(std::string&& value);
  void set_model_type(const char* value);
  void set_model_type(const char* value, size_t size);
  std::string* mutable_model_type();
  std::string* release_model_type();
  void set_allocated_model_type(std::string* model_type);

  // string model_version_id = 4;
  void clear_model_version_id();
  const std::string& model_version_id() const;
  void set_model_version_id(const std::string& value);
  void set_model_version_id(std::string&& value);
  void set_model_version_id(const char* value);
  void set_model_version_id(const char* value, size_t size);
  std::string* mutable_model_version_id();
  std::string* release_model_version_id();
  void set_allocated_model_version_id(std::string* model_version_id);

  // .clarifai.usage.Ownership ownership = 5;
  void clear_ownership();
  ::clarifai::usage::Ownership ownership() const;
  void set_ownership(::clarifai::usage::Ownership value);

  // @@protoc_insertion_point(class_scope:clarifai.usage.Model)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_version_id_;
  int ownership_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fusage_2fevent_2eproto;
};
// -------------------------------------------------------------------

class PredictEvent :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.usage.PredictEvent) */ {
 public:
  PredictEvent();
  virtual ~PredictEvent();

  PredictEvent(const PredictEvent& from);
  PredictEvent(PredictEvent&& from) noexcept
    : PredictEvent() {
    *this = ::std::move(from);
  }

  inline PredictEvent& operator=(const PredictEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline PredictEvent& operator=(PredictEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PredictEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PredictEvent* internal_default_instance() {
    return reinterpret_cast<const PredictEvent*>(
               &_PredictEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PredictEvent& a, PredictEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(PredictEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PredictEvent* New() const final {
    return CreateMaybeMessage<PredictEvent>(nullptr);
  }

  PredictEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PredictEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PredictEvent& from);
  void MergeFrom(const PredictEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PredictEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.usage.PredictEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fusage_2fevent_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fusage_2fevent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputTypeFieldNumber = 2,
    kModelFieldNumber = 1,
    kPredictTypeFieldNumber = 3,
  };
  // string input_type = 2;
  void clear_input_type();
  const std::string& input_type() const;
  void set_input_type(const std::string& value);
  void set_input_type(std::string&& value);
  void set_input_type(const char* value);
  void set_input_type(const char* value, size_t size);
  std::string* mutable_input_type();
  std::string* release_input_type();
  void set_allocated_input_type(std::string* input_type);

  // .clarifai.usage.Model model = 1;
  bool has_model() const;
  void clear_model();
  const ::clarifai::usage::Model& model() const;
  ::clarifai::usage::Model* release_model();
  ::clarifai::usage::Model* mutable_model();
  void set_allocated_model(::clarifai::usage::Model* model);

  // .clarifai.usage.PredictType predict_type = 3;
  void clear_predict_type();
  ::clarifai::usage::PredictType predict_type() const;
  void set_predict_type(::clarifai::usage::PredictType value);

  // @@protoc_insertion_point(class_scope:clarifai.usage.PredictEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_type_;
  ::clarifai::usage::Model* model_;
  int predict_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fusage_2fevent_2eproto;
};
// -------------------------------------------------------------------

class SearchEvent :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.usage.SearchEvent) */ {
 public:
  SearchEvent();
  virtual ~SearchEvent();

  SearchEvent(const SearchEvent& from);
  SearchEvent(SearchEvent&& from) noexcept
    : SearchEvent() {
    *this = ::std::move(from);
  }

  inline SearchEvent& operator=(const SearchEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchEvent& operator=(SearchEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SearchEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchEvent* internal_default_instance() {
    return reinterpret_cast<const SearchEvent*>(
               &_SearchEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SearchEvent& a, SearchEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchEvent* New() const final {
    return CreateMaybeMessage<SearchEvent>(nullptr);
  }

  SearchEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SearchEvent& from);
  void MergeFrom(const SearchEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.usage.SearchEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fusage_2fevent_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fusage_2fevent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSearchTypeFieldNumber = 1,
  };
  // string search_type = 1;
  void clear_search_type();
  const std::string& search_type() const;
  void set_search_type(const std::string& value);
  void set_search_type(std::string&& value);
  void set_search_type(const char* value);
  void set_search_type(const char* value, size_t size);
  std::string* mutable_search_type();
  std::string* release_search_type();
  void set_allocated_search_type(std::string* search_type);

  // @@protoc_insertion_point(class_scope:clarifai.usage.SearchEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr search_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fusage_2fevent_2eproto;
};
// -------------------------------------------------------------------

class TrainModelEvent :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.usage.TrainModelEvent) */ {
 public:
  TrainModelEvent();
  virtual ~TrainModelEvent();

  TrainModelEvent(const TrainModelEvent& from);
  TrainModelEvent(TrainModelEvent&& from) noexcept
    : TrainModelEvent() {
    *this = ::std::move(from);
  }

  inline TrainModelEvent& operator=(const TrainModelEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrainModelEvent& operator=(TrainModelEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrainModelEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrainModelEvent* internal_default_instance() {
    return reinterpret_cast<const TrainModelEvent*>(
               &_TrainModelEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TrainModelEvent& a, TrainModelEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(TrainModelEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrainModelEvent* New() const final {
    return CreateMaybeMessage<TrainModelEvent>(nullptr);
  }

  TrainModelEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrainModelEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrainModelEvent& from);
  void MergeFrom(const TrainModelEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrainModelEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.usage.TrainModelEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fusage_2fevent_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fusage_2fevent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelFieldNumber = 1,
  };
  // .clarifai.usage.Model model = 1;
  bool has_model() const;
  void clear_model();
  const ::clarifai::usage::Model& model() const;
  ::clarifai::usage::Model* release_model();
  ::clarifai::usage::Model* mutable_model();
  void set_allocated_model(::clarifai::usage::Model* model);

  // @@protoc_insertion_point(class_scope:clarifai.usage.TrainModelEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::usage::Model* model_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fusage_2fevent_2eproto;
};
// -------------------------------------------------------------------

class OtherEvent :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.usage.OtherEvent) */ {
 public:
  OtherEvent();
  virtual ~OtherEvent();

  OtherEvent(const OtherEvent& from);
  OtherEvent(OtherEvent&& from) noexcept
    : OtherEvent() {
    *this = ::std::move(from);
  }

  inline OtherEvent& operator=(const OtherEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline OtherEvent& operator=(OtherEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OtherEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OtherEvent* internal_default_instance() {
    return reinterpret_cast<const OtherEvent*>(
               &_OtherEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(OtherEvent& a, OtherEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(OtherEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OtherEvent* New() const final {
    return CreateMaybeMessage<OtherEvent>(nullptr);
  }

  OtherEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OtherEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OtherEvent& from);
  void MergeFrom(const OtherEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OtherEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.usage.OtherEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fusage_2fevent_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fusage_2fevent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:clarifai.usage.OtherEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fusage_2fevent_2eproto;
};
// -------------------------------------------------------------------

class AssetEvent :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.usage.AssetEvent) */ {
 public:
  AssetEvent();
  virtual ~AssetEvent();

  AssetEvent(const AssetEvent& from);
  AssetEvent(AssetEvent&& from) noexcept
    : AssetEvent() {
    *this = ::std::move(from);
  }

  inline AssetEvent& operator=(const AssetEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssetEvent& operator=(AssetEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AssetEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AssetEvent* internal_default_instance() {
    return reinterpret_cast<const AssetEvent*>(
               &_AssetEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AssetEvent& a, AssetEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(AssetEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AssetEvent* New() const final {
    return CreateMaybeMessage<AssetEvent>(nullptr);
  }

  AssetEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AssetEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AssetEvent& from);
  void MergeFrom(const AssetEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssetEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.usage.AssetEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fusage_2fevent_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fusage_2fevent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:clarifai.usage.AssetEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fusage_2fevent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EventParam

// .clarifai.usage.PredictEvent predict = 1;
inline bool EventParam::has_predict() const {
  return event_case() == kPredict;
}
inline void EventParam::set_has_predict() {
  _oneof_case_[0] = kPredict;
}
inline void EventParam::clear_predict() {
  if (has_predict()) {
    delete event_.predict_;
    clear_has_event();
  }
}
inline ::clarifai::usage::PredictEvent* EventParam::release_predict() {
  // @@protoc_insertion_point(field_release:clarifai.usage.EventParam.predict)
  if (has_predict()) {
    clear_has_event();
      ::clarifai::usage::PredictEvent* temp = event_.predict_;
    event_.predict_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::clarifai::usage::PredictEvent& EventParam::predict() const {
  // @@protoc_insertion_point(field_get:clarifai.usage.EventParam.predict)
  return has_predict()
      ? *event_.predict_
      : *reinterpret_cast< ::clarifai::usage::PredictEvent*>(&::clarifai::usage::_PredictEvent_default_instance_);
}
inline ::clarifai::usage::PredictEvent* EventParam::mutable_predict() {
  if (!has_predict()) {
    clear_event();
    set_has_predict();
    event_.predict_ = CreateMaybeMessage< ::clarifai::usage::PredictEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:clarifai.usage.EventParam.predict)
  return event_.predict_;
}

// .clarifai.usage.SearchEvent search = 3;
inline bool EventParam::has_search() const {
  return event_case() == kSearch;
}
inline void EventParam::set_has_search() {
  _oneof_case_[0] = kSearch;
}
inline void EventParam::clear_search() {
  if (has_search()) {
    delete event_.search_;
    clear_has_event();
  }
}
inline ::clarifai::usage::SearchEvent* EventParam::release_search() {
  // @@protoc_insertion_point(field_release:clarifai.usage.EventParam.search)
  if (has_search()) {
    clear_has_event();
      ::clarifai::usage::SearchEvent* temp = event_.search_;
    event_.search_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::clarifai::usage::SearchEvent& EventParam::search() const {
  // @@protoc_insertion_point(field_get:clarifai.usage.EventParam.search)
  return has_search()
      ? *event_.search_
      : *reinterpret_cast< ::clarifai::usage::SearchEvent*>(&::clarifai::usage::_SearchEvent_default_instance_);
}
inline ::clarifai::usage::SearchEvent* EventParam::mutable_search() {
  if (!has_search()) {
    clear_event();
    set_has_search();
    event_.search_ = CreateMaybeMessage< ::clarifai::usage::SearchEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:clarifai.usage.EventParam.search)
  return event_.search_;
}

// .clarifai.usage.TrainModelEvent train = 4;
inline bool EventParam::has_train() const {
  return event_case() == kTrain;
}
inline void EventParam::set_has_train() {
  _oneof_case_[0] = kTrain;
}
inline void EventParam::clear_train() {
  if (has_train()) {
    delete event_.train_;
    clear_has_event();
  }
}
inline ::clarifai::usage::TrainModelEvent* EventParam::release_train() {
  // @@protoc_insertion_point(field_release:clarifai.usage.EventParam.train)
  if (has_train()) {
    clear_has_event();
      ::clarifai::usage::TrainModelEvent* temp = event_.train_;
    event_.train_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::clarifai::usage::TrainModelEvent& EventParam::train() const {
  // @@protoc_insertion_point(field_get:clarifai.usage.EventParam.train)
  return has_train()
      ? *event_.train_
      : *reinterpret_cast< ::clarifai::usage::TrainModelEvent*>(&::clarifai::usage::_TrainModelEvent_default_instance_);
}
inline ::clarifai::usage::TrainModelEvent* EventParam::mutable_train() {
  if (!has_train()) {
    clear_event();
    set_has_train();
    event_.train_ = CreateMaybeMessage< ::clarifai::usage::TrainModelEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:clarifai.usage.EventParam.train)
  return event_.train_;
}

// .clarifai.usage.OtherEvent other = 5;
inline bool EventParam::has_other() const {
  return event_case() == kOther;
}
inline void EventParam::set_has_other() {
  _oneof_case_[0] = kOther;
}
inline void EventParam::clear_other() {
  if (has_other()) {
    delete event_.other_;
    clear_has_event();
  }
}
inline ::clarifai::usage::OtherEvent* EventParam::release_other() {
  // @@protoc_insertion_point(field_release:clarifai.usage.EventParam.other)
  if (has_other()) {
    clear_has_event();
      ::clarifai::usage::OtherEvent* temp = event_.other_;
    event_.other_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::clarifai::usage::OtherEvent& EventParam::other() const {
  // @@protoc_insertion_point(field_get:clarifai.usage.EventParam.other)
  return has_other()
      ? *event_.other_
      : *reinterpret_cast< ::clarifai::usage::OtherEvent*>(&::clarifai::usage::_OtherEvent_default_instance_);
}
inline ::clarifai::usage::OtherEvent* EventParam::mutable_other() {
  if (!has_other()) {
    clear_event();
    set_has_other();
    event_.other_ = CreateMaybeMessage< ::clarifai::usage::OtherEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:clarifai.usage.EventParam.other)
  return event_.other_;
}

// .clarifai.usage.AssetEvent asset = 6;
inline bool EventParam::has_asset() const {
  return event_case() == kAsset;
}
inline void EventParam::set_has_asset() {
  _oneof_case_[0] = kAsset;
}
inline void EventParam::clear_asset() {
  if (has_asset()) {
    delete event_.asset_;
    clear_has_event();
  }
}
inline ::clarifai::usage::AssetEvent* EventParam::release_asset() {
  // @@protoc_insertion_point(field_release:clarifai.usage.EventParam.asset)
  if (has_asset()) {
    clear_has_event();
      ::clarifai::usage::AssetEvent* temp = event_.asset_;
    event_.asset_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::clarifai::usage::AssetEvent& EventParam::asset() const {
  // @@protoc_insertion_point(field_get:clarifai.usage.EventParam.asset)
  return has_asset()
      ? *event_.asset_
      : *reinterpret_cast< ::clarifai::usage::AssetEvent*>(&::clarifai::usage::_AssetEvent_default_instance_);
}
inline ::clarifai::usage::AssetEvent* EventParam::mutable_asset() {
  if (!has_asset()) {
    clear_event();
    set_has_asset();
    event_.asset_ = CreateMaybeMessage< ::clarifai::usage::AssetEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:clarifai.usage.EventParam.asset)
  return event_.asset_;
}

inline bool EventParam::has_event() const {
  return event_case() != EVENT_NOT_SET;
}
inline void EventParam::clear_has_event() {
  _oneof_case_[0] = EVENT_NOT_SET;
}
inline EventParam::EventCase EventParam::event_case() const {
  return EventParam::EventCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Model

// string model_id = 1;
inline void Model::clear_model_id() {
  model_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Model::model_id() const {
  // @@protoc_insertion_point(field_get:clarifai.usage.Model.model_id)
  return model_id_.GetNoArena();
}
inline void Model::set_model_id(const std::string& value) {
  
  model_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:clarifai.usage.Model.model_id)
}
inline void Model::set_model_id(std::string&& value) {
  
  model_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.usage.Model.model_id)
}
inline void Model::set_model_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.usage.Model.model_id)
}
inline void Model::set_model_id(const char* value, size_t size) {
  
  model_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.usage.Model.model_id)
}
inline std::string* Model::mutable_model_id() {
  
  // @@protoc_insertion_point(field_mutable:clarifai.usage.Model.model_id)
  return model_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Model::release_model_id() {
  // @@protoc_insertion_point(field_release:clarifai.usage.Model.model_id)
  
  return model_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Model::set_allocated_model_id(std::string* model_id) {
  if (model_id != nullptr) {
    
  } else {
    
  }
  model_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.usage.Model.model_id)
}

// string model_type = 2;
inline void Model::clear_model_type() {
  model_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Model::model_type() const {
  // @@protoc_insertion_point(field_get:clarifai.usage.Model.model_type)
  return model_type_.GetNoArena();
}
inline void Model::set_model_type(const std::string& value) {
  
  model_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:clarifai.usage.Model.model_type)
}
inline void Model::set_model_type(std::string&& value) {
  
  model_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.usage.Model.model_type)
}
inline void Model::set_model_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.usage.Model.model_type)
}
inline void Model::set_model_type(const char* value, size_t size) {
  
  model_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.usage.Model.model_type)
}
inline std::string* Model::mutable_model_type() {
  
  // @@protoc_insertion_point(field_mutable:clarifai.usage.Model.model_type)
  return model_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Model::release_model_type() {
  // @@protoc_insertion_point(field_release:clarifai.usage.Model.model_type)
  
  return model_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Model::set_allocated_model_type(std::string* model_type) {
  if (model_type != nullptr) {
    
  } else {
    
  }
  model_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_type);
  // @@protoc_insertion_point(field_set_allocated:clarifai.usage.Model.model_type)
}

// string model_version_id = 4;
inline void Model::clear_model_version_id() {
  model_version_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Model::model_version_id() const {
  // @@protoc_insertion_point(field_get:clarifai.usage.Model.model_version_id)
  return model_version_id_.GetNoArena();
}
inline void Model::set_model_version_id(const std::string& value) {
  
  model_version_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:clarifai.usage.Model.model_version_id)
}
inline void Model::set_model_version_id(std::string&& value) {
  
  model_version_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.usage.Model.model_version_id)
}
inline void Model::set_model_version_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_version_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.usage.Model.model_version_id)
}
inline void Model::set_model_version_id(const char* value, size_t size) {
  
  model_version_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.usage.Model.model_version_id)
}
inline std::string* Model::mutable_model_version_id() {
  
  // @@protoc_insertion_point(field_mutable:clarifai.usage.Model.model_version_id)
  return model_version_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Model::release_model_version_id() {
  // @@protoc_insertion_point(field_release:clarifai.usage.Model.model_version_id)
  
  return model_version_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Model::set_allocated_model_version_id(std::string* model_version_id) {
  if (model_version_id != nullptr) {
    
  } else {
    
  }
  model_version_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_version_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.usage.Model.model_version_id)
}

// .clarifai.usage.Ownership ownership = 5;
inline void Model::clear_ownership() {
  ownership_ = 0;
}
inline ::clarifai::usage::Ownership Model::ownership() const {
  // @@protoc_insertion_point(field_get:clarifai.usage.Model.ownership)
  return static_cast< ::clarifai::usage::Ownership >(ownership_);
}
inline void Model::set_ownership(::clarifai::usage::Ownership value) {
  
  ownership_ = value;
  // @@protoc_insertion_point(field_set:clarifai.usage.Model.ownership)
}

// -------------------------------------------------------------------

// PredictEvent

// .clarifai.usage.Model model = 1;
inline bool PredictEvent::has_model() const {
  return this != internal_default_instance() && model_ != nullptr;
}
inline void PredictEvent::clear_model() {
  if (GetArenaNoVirtual() == nullptr && model_ != nullptr) {
    delete model_;
  }
  model_ = nullptr;
}
inline const ::clarifai::usage::Model& PredictEvent::model() const {
  const ::clarifai::usage::Model* p = model_;
  // @@protoc_insertion_point(field_get:clarifai.usage.PredictEvent.model)
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::usage::Model*>(
      &::clarifai::usage::_Model_default_instance_);
}
inline ::clarifai::usage::Model* PredictEvent::release_model() {
  // @@protoc_insertion_point(field_release:clarifai.usage.PredictEvent.model)
  
  ::clarifai::usage::Model* temp = model_;
  model_ = nullptr;
  return temp;
}
inline ::clarifai::usage::Model* PredictEvent::mutable_model() {
  
  if (model_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::usage::Model>(GetArenaNoVirtual());
    model_ = p;
  }
  // @@protoc_insertion_point(field_mutable:clarifai.usage.PredictEvent.model)
  return model_;
}
inline void PredictEvent::set_allocated_model(::clarifai::usage::Model* model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete model_;
  }
  if (model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model, submessage_arena);
    }
    
  } else {
    
  }
  model_ = model;
  // @@protoc_insertion_point(field_set_allocated:clarifai.usage.PredictEvent.model)
}

// string input_type = 2;
inline void PredictEvent::clear_input_type() {
  input_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PredictEvent::input_type() const {
  // @@protoc_insertion_point(field_get:clarifai.usage.PredictEvent.input_type)
  return input_type_.GetNoArena();
}
inline void PredictEvent::set_input_type(const std::string& value) {
  
  input_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:clarifai.usage.PredictEvent.input_type)
}
inline void PredictEvent::set_input_type(std::string&& value) {
  
  input_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.usage.PredictEvent.input_type)
}
inline void PredictEvent::set_input_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  input_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.usage.PredictEvent.input_type)
}
inline void PredictEvent::set_input_type(const char* value, size_t size) {
  
  input_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.usage.PredictEvent.input_type)
}
inline std::string* PredictEvent::mutable_input_type() {
  
  // @@protoc_insertion_point(field_mutable:clarifai.usage.PredictEvent.input_type)
  return input_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PredictEvent::release_input_type() {
  // @@protoc_insertion_point(field_release:clarifai.usage.PredictEvent.input_type)
  
  return input_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PredictEvent::set_allocated_input_type(std::string* input_type) {
  if (input_type != nullptr) {
    
  } else {
    
  }
  input_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), input_type);
  // @@protoc_insertion_point(field_set_allocated:clarifai.usage.PredictEvent.input_type)
}

// .clarifai.usage.PredictType predict_type = 3;
inline void PredictEvent::clear_predict_type() {
  predict_type_ = 0;
}
inline ::clarifai::usage::PredictType PredictEvent::predict_type() const {
  // @@protoc_insertion_point(field_get:clarifai.usage.PredictEvent.predict_type)
  return static_cast< ::clarifai::usage::PredictType >(predict_type_);
}
inline void PredictEvent::set_predict_type(::clarifai::usage::PredictType value) {
  
  predict_type_ = value;
  // @@protoc_insertion_point(field_set:clarifai.usage.PredictEvent.predict_type)
}

// -------------------------------------------------------------------

// SearchEvent

// string search_type = 1;
inline void SearchEvent::clear_search_type() {
  search_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SearchEvent::search_type() const {
  // @@protoc_insertion_point(field_get:clarifai.usage.SearchEvent.search_type)
  return search_type_.GetNoArena();
}
inline void SearchEvent::set_search_type(const std::string& value) {
  
  search_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:clarifai.usage.SearchEvent.search_type)
}
inline void SearchEvent::set_search_type(std::string&& value) {
  
  search_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.usage.SearchEvent.search_type)
}
inline void SearchEvent::set_search_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  search_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.usage.SearchEvent.search_type)
}
inline void SearchEvent::set_search_type(const char* value, size_t size) {
  
  search_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.usage.SearchEvent.search_type)
}
inline std::string* SearchEvent::mutable_search_type() {
  
  // @@protoc_insertion_point(field_mutable:clarifai.usage.SearchEvent.search_type)
  return search_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SearchEvent::release_search_type() {
  // @@protoc_insertion_point(field_release:clarifai.usage.SearchEvent.search_type)
  
  return search_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SearchEvent::set_allocated_search_type(std::string* search_type) {
  if (search_type != nullptr) {
    
  } else {
    
  }
  search_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), search_type);
  // @@protoc_insertion_point(field_set_allocated:clarifai.usage.SearchEvent.search_type)
}

// -------------------------------------------------------------------

// TrainModelEvent

// .clarifai.usage.Model model = 1;
inline bool TrainModelEvent::has_model() const {
  return this != internal_default_instance() && model_ != nullptr;
}
inline void TrainModelEvent::clear_model() {
  if (GetArenaNoVirtual() == nullptr && model_ != nullptr) {
    delete model_;
  }
  model_ = nullptr;
}
inline const ::clarifai::usage::Model& TrainModelEvent::model() const {
  const ::clarifai::usage::Model* p = model_;
  // @@protoc_insertion_point(field_get:clarifai.usage.TrainModelEvent.model)
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::usage::Model*>(
      &::clarifai::usage::_Model_default_instance_);
}
inline ::clarifai::usage::Model* TrainModelEvent::release_model() {
  // @@protoc_insertion_point(field_release:clarifai.usage.TrainModelEvent.model)
  
  ::clarifai::usage::Model* temp = model_;
  model_ = nullptr;
  return temp;
}
inline ::clarifai::usage::Model* TrainModelEvent::mutable_model() {
  
  if (model_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::usage::Model>(GetArenaNoVirtual());
    model_ = p;
  }
  // @@protoc_insertion_point(field_mutable:clarifai.usage.TrainModelEvent.model)
  return model_;
}
inline void TrainModelEvent::set_allocated_model(::clarifai::usage::Model* model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete model_;
  }
  if (model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model, submessage_arena);
    }
    
  } else {
    
  }
  model_ = model;
  // @@protoc_insertion_point(field_set_allocated:clarifai.usage.TrainModelEvent.model)
}

// -------------------------------------------------------------------

// OtherEvent

// -------------------------------------------------------------------

// AssetEvent

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace usage
}  // namespace clarifai

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::clarifai::usage::EventType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::clarifai::usage::EventType>() {
  return ::clarifai::usage::EventType_descriptor();
}
template <> struct is_proto_enum< ::clarifai::usage::Ownership> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::clarifai::usage::Ownership>() {
  return ::clarifai::usage::Ownership_descriptor();
}
template <> struct is_proto_enum< ::clarifai::usage::PredictType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::clarifai::usage::PredictType>() {
  return ::clarifai::usage::PredictType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fclarifai_2fusage_2fevent_2eproto
