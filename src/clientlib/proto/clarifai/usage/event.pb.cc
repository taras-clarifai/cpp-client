// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/clarifai/usage/event.proto

#include "proto/clarifai/usage/event.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fusage_2fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AssetEvent_proto_2fclarifai_2fusage_2fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fusage_2fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Model_proto_2fclarifai_2fusage_2fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fusage_2fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OtherEvent_proto_2fclarifai_2fusage_2fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fusage_2fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PredictEvent_proto_2fclarifai_2fusage_2fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fusage_2fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SearchEvent_proto_2fclarifai_2fusage_2fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fusage_2fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrainModelEvent_proto_2fclarifai_2fusage_2fevent_2eproto;
namespace clarifai {
namespace usage {
class EventParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EventParam> _instance;
  const ::clarifai::usage::PredictEvent* predict_;
  const ::clarifai::usage::SearchEvent* search_;
  const ::clarifai::usage::TrainModelEvent* train_;
  const ::clarifai::usage::OtherEvent* other_;
  const ::clarifai::usage::AssetEvent* asset_;
} _EventParam_default_instance_;
class ModelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Model> _instance;
} _Model_default_instance_;
class PredictEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PredictEvent> _instance;
} _PredictEvent_default_instance_;
class SearchEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SearchEvent> _instance;
} _SearchEvent_default_instance_;
class TrainModelEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrainModelEvent> _instance;
} _TrainModelEvent_default_instance_;
class OtherEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OtherEvent> _instance;
} _OtherEvent_default_instance_;
class AssetEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AssetEvent> _instance;
} _AssetEvent_default_instance_;
}  // namespace usage
}  // namespace clarifai
static void InitDefaultsscc_info_AssetEvent_proto_2fclarifai_2fusage_2fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::usage::_AssetEvent_default_instance_;
    new (ptr) ::clarifai::usage::AssetEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::usage::AssetEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AssetEvent_proto_2fclarifai_2fusage_2fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AssetEvent_proto_2fclarifai_2fusage_2fevent_2eproto}, {}};

static void InitDefaultsscc_info_EventParam_proto_2fclarifai_2fusage_2fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::usage::_EventParam_default_instance_;
    new (ptr) ::clarifai::usage::EventParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::usage::EventParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_EventParam_proto_2fclarifai_2fusage_2fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_EventParam_proto_2fclarifai_2fusage_2fevent_2eproto}, {
      &scc_info_PredictEvent_proto_2fclarifai_2fusage_2fevent_2eproto.base,
      &scc_info_SearchEvent_proto_2fclarifai_2fusage_2fevent_2eproto.base,
      &scc_info_TrainModelEvent_proto_2fclarifai_2fusage_2fevent_2eproto.base,
      &scc_info_OtherEvent_proto_2fclarifai_2fusage_2fevent_2eproto.base,
      &scc_info_AssetEvent_proto_2fclarifai_2fusage_2fevent_2eproto.base,}};

static void InitDefaultsscc_info_Model_proto_2fclarifai_2fusage_2fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::usage::_Model_default_instance_;
    new (ptr) ::clarifai::usage::Model();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::usage::Model::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Model_proto_2fclarifai_2fusage_2fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Model_proto_2fclarifai_2fusage_2fevent_2eproto}, {}};

static void InitDefaultsscc_info_OtherEvent_proto_2fclarifai_2fusage_2fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::usage::_OtherEvent_default_instance_;
    new (ptr) ::clarifai::usage::OtherEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::usage::OtherEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OtherEvent_proto_2fclarifai_2fusage_2fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OtherEvent_proto_2fclarifai_2fusage_2fevent_2eproto}, {}};

static void InitDefaultsscc_info_PredictEvent_proto_2fclarifai_2fusage_2fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::usage::_PredictEvent_default_instance_;
    new (ptr) ::clarifai::usage::PredictEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::usage::PredictEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PredictEvent_proto_2fclarifai_2fusage_2fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PredictEvent_proto_2fclarifai_2fusage_2fevent_2eproto}, {
      &scc_info_Model_proto_2fclarifai_2fusage_2fevent_2eproto.base,}};

static void InitDefaultsscc_info_SearchEvent_proto_2fclarifai_2fusage_2fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::usage::_SearchEvent_default_instance_;
    new (ptr) ::clarifai::usage::SearchEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::usage::SearchEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SearchEvent_proto_2fclarifai_2fusage_2fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SearchEvent_proto_2fclarifai_2fusage_2fevent_2eproto}, {}};

static void InitDefaultsscc_info_TrainModelEvent_proto_2fclarifai_2fusage_2fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::usage::_TrainModelEvent_default_instance_;
    new (ptr) ::clarifai::usage::TrainModelEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::usage::TrainModelEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrainModelEvent_proto_2fclarifai_2fusage_2fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TrainModelEvent_proto_2fclarifai_2fusage_2fevent_2eproto}, {
      &scc_info_Model_proto_2fclarifai_2fusage_2fevent_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fclarifai_2fusage_2fevent_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_proto_2fclarifai_2fusage_2fevent_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fclarifai_2fusage_2fevent_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2fclarifai_2fusage_2fevent_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::usage::EventParam, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::clarifai::usage::EventParam, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::clarifai::usage::EventParamDefaultTypeInternal, predict_),
  offsetof(::clarifai::usage::EventParamDefaultTypeInternal, search_),
  offsetof(::clarifai::usage::EventParamDefaultTypeInternal, train_),
  offsetof(::clarifai::usage::EventParamDefaultTypeInternal, other_),
  offsetof(::clarifai::usage::EventParamDefaultTypeInternal, asset_),
  PROTOBUF_FIELD_OFFSET(::clarifai::usage::EventParam, event_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::usage::Model, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::usage::Model, model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::usage::Model, model_type_),
  PROTOBUF_FIELD_OFFSET(::clarifai::usage::Model, model_version_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::usage::Model, ownership_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::usage::PredictEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::usage::PredictEvent, model_),
  PROTOBUF_FIELD_OFFSET(::clarifai::usage::PredictEvent, input_type_),
  PROTOBUF_FIELD_OFFSET(::clarifai::usage::PredictEvent, predict_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::usage::SearchEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::usage::SearchEvent, search_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::usage::TrainModelEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::usage::TrainModelEvent, model_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::usage::OtherEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::usage::AssetEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::clarifai::usage::EventParam)},
  { 11, -1, sizeof(::clarifai::usage::Model)},
  { 20, -1, sizeof(::clarifai::usage::PredictEvent)},
  { 28, -1, sizeof(::clarifai::usage::SearchEvent)},
  { 34, -1, sizeof(::clarifai::usage::TrainModelEvent)},
  { 40, -1, sizeof(::clarifai::usage::OtherEvent)},
  { 45, -1, sizeof(::clarifai::usage::AssetEvent)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::usage::_EventParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::usage::_Model_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::usage::_PredictEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::usage::_SearchEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::usage::_TrainModelEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::usage::_OtherEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::usage::_AssetEvent_default_instance_),
};

const char descriptor_table_protodef_proto_2fclarifai_2fusage_2fevent_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n proto/clarifai/usage/event.proto\022\016clar"
  "ifai.usage\"\201\002\n\nEventParam\022/\n\007predict\030\001 \001"
  "(\0132\034.clarifai.usage.PredictEventH\000\022-\n\006se"
  "arch\030\003 \001(\0132\033.clarifai.usage.SearchEventH"
  "\000\0220\n\005train\030\004 \001(\0132\037.clarifai.usage.TrainM"
  "odelEventH\000\022+\n\005other\030\005 \001(\0132\032.clarifai.us"
  "age.OtherEventH\000\022+\n\005asset\030\006 \001(\0132\032.clarif"
  "ai.usage.AssetEventH\000B\007\n\005event\"u\n\005Model\022"
  "\020\n\010model_id\030\001 \001(\t\022\022\n\nmodel_type\030\002 \001(\t\022\030\n"
  "\020model_version_id\030\004 \001(\t\022,\n\townership\030\005 \001"
  "(\0162\031.clarifai.usage.Ownership\"{\n\014Predict"
  "Event\022$\n\005model\030\001 \001(\0132\025.clarifai.usage.Mo"
  "del\022\022\n\ninput_type\030\002 \001(\t\0221\n\014predict_type\030"
  "\003 \001(\0162\033.clarifai.usage.PredictType\"\"\n\013Se"
  "archEvent\022\023\n\013search_type\030\001 \001(\t\"7\n\017TrainM"
  "odelEvent\022$\n\005model\030\001 \001(\0132\025.clarifai.usag"
  "e.Model\"\014\n\nOtherEvent\"\014\n\nAssetEvent*W\n\tE"
  "ventType\022\020\n\014TYPE_NOT_SET\020\000\022\013\n\007PREDICT\020\001\022"
  "\n\n\006SEARCH\020\003\022\t\n\005TRAIN\020\004\022\t\n\005OTHER\020\005\022\t\n\005ASS"
  "ET\020\006*>\n\tOwnership\022\031\n\025OWNERSHIP_UNSPECIFI"
  "ED\020\000\022\010\n\004USER\020\001\022\014\n\010CLARIFAI\020\002*p\n\013PredictT"
  "ype\022\034\n\030PREDICT_TYPE_UNSPECIFIED\020\000\022\013\n\007REG"
  "ULAR\020\001\022\010\n\004BASE\020\002\022\n\n\006CUSTOM\020\003\022\017\n\013ALGORITH"
  "MIC\020\004\022\017\n\013THIRD_PARTY\020\005B)\n\027com.clarifai.g"
  "rpc.usageP\001Z\005usage\242\002\004CAIPb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2fclarifai_2fusage_2fevent_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_2fclarifai_2fusage_2fevent_2eproto_sccs[7] = {
  &scc_info_AssetEvent_proto_2fclarifai_2fusage_2fevent_2eproto.base,
  &scc_info_EventParam_proto_2fclarifai_2fusage_2fevent_2eproto.base,
  &scc_info_Model_proto_2fclarifai_2fusage_2fevent_2eproto.base,
  &scc_info_OtherEvent_proto_2fclarifai_2fusage_2fevent_2eproto.base,
  &scc_info_PredictEvent_proto_2fclarifai_2fusage_2fevent_2eproto.base,
  &scc_info_SearchEvent_proto_2fclarifai_2fusage_2fevent_2eproto.base,
  &scc_info_TrainModelEvent_proto_2fclarifai_2fusage_2fevent_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2fclarifai_2fusage_2fevent_2eproto_once;
static bool descriptor_table_proto_2fclarifai_2fusage_2fevent_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fclarifai_2fusage_2fevent_2eproto = {
  &descriptor_table_proto_2fclarifai_2fusage_2fevent_2eproto_initialized, descriptor_table_protodef_proto_2fclarifai_2fusage_2fevent_2eproto, "proto/clarifai/usage/event.proto", 993,
  &descriptor_table_proto_2fclarifai_2fusage_2fevent_2eproto_once, descriptor_table_proto_2fclarifai_2fusage_2fevent_2eproto_sccs, descriptor_table_proto_2fclarifai_2fusage_2fevent_2eproto_deps, 7, 0,
  schemas, file_default_instances, TableStruct_proto_2fclarifai_2fusage_2fevent_2eproto::offsets,
  file_level_metadata_proto_2fclarifai_2fusage_2fevent_2eproto, 7, file_level_enum_descriptors_proto_2fclarifai_2fusage_2fevent_2eproto, file_level_service_descriptors_proto_2fclarifai_2fusage_2fevent_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2fclarifai_2fusage_2fevent_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_2fclarifai_2fusage_2fevent_2eproto), true);
namespace clarifai {
namespace usage {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fusage_2fevent_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fusage_2fevent_2eproto[0];
}
bool EventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Ownership_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fusage_2fevent_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fusage_2fevent_2eproto[1];
}
bool Ownership_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PredictType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fusage_2fevent_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fusage_2fevent_2eproto[2];
}
bool PredictType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void EventParam::InitAsDefaultInstance() {
  ::clarifai::usage::_EventParam_default_instance_.predict_ = const_cast< ::clarifai::usage::PredictEvent*>(
      ::clarifai::usage::PredictEvent::internal_default_instance());
  ::clarifai::usage::_EventParam_default_instance_.search_ = const_cast< ::clarifai::usage::SearchEvent*>(
      ::clarifai::usage::SearchEvent::internal_default_instance());
  ::clarifai::usage::_EventParam_default_instance_.train_ = const_cast< ::clarifai::usage::TrainModelEvent*>(
      ::clarifai::usage::TrainModelEvent::internal_default_instance());
  ::clarifai::usage::_EventParam_default_instance_.other_ = const_cast< ::clarifai::usage::OtherEvent*>(
      ::clarifai::usage::OtherEvent::internal_default_instance());
  ::clarifai::usage::_EventParam_default_instance_.asset_ = const_cast< ::clarifai::usage::AssetEvent*>(
      ::clarifai::usage::AssetEvent::internal_default_instance());
}
class EventParam::_Internal {
 public:
  static const ::clarifai::usage::PredictEvent& predict(const EventParam* msg);
  static const ::clarifai::usage::SearchEvent& search(const EventParam* msg);
  static const ::clarifai::usage::TrainModelEvent& train(const EventParam* msg);
  static const ::clarifai::usage::OtherEvent& other(const EventParam* msg);
  static const ::clarifai::usage::AssetEvent& asset(const EventParam* msg);
};

const ::clarifai::usage::PredictEvent&
EventParam::_Internal::predict(const EventParam* msg) {
  return *msg->event_.predict_;
}
const ::clarifai::usage::SearchEvent&
EventParam::_Internal::search(const EventParam* msg) {
  return *msg->event_.search_;
}
const ::clarifai::usage::TrainModelEvent&
EventParam::_Internal::train(const EventParam* msg) {
  return *msg->event_.train_;
}
const ::clarifai::usage::OtherEvent&
EventParam::_Internal::other(const EventParam* msg) {
  return *msg->event_.other_;
}
const ::clarifai::usage::AssetEvent&
EventParam::_Internal::asset(const EventParam* msg) {
  return *msg->event_.asset_;
}
void EventParam::set_allocated_predict(::clarifai::usage::PredictEvent* predict) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (predict) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      predict = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, predict, submessage_arena);
    }
    set_has_predict();
    event_.predict_ = predict;
  }
  // @@protoc_insertion_point(field_set_allocated:clarifai.usage.EventParam.predict)
}
void EventParam::set_allocated_search(::clarifai::usage::SearchEvent* search) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (search) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      search = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, search, submessage_arena);
    }
    set_has_search();
    event_.search_ = search;
  }
  // @@protoc_insertion_point(field_set_allocated:clarifai.usage.EventParam.search)
}
void EventParam::set_allocated_train(::clarifai::usage::TrainModelEvent* train) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (train) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      train = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, train, submessage_arena);
    }
    set_has_train();
    event_.train_ = train;
  }
  // @@protoc_insertion_point(field_set_allocated:clarifai.usage.EventParam.train)
}
void EventParam::set_allocated_other(::clarifai::usage::OtherEvent* other) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (other) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      other = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, other, submessage_arena);
    }
    set_has_other();
    event_.other_ = other;
  }
  // @@protoc_insertion_point(field_set_allocated:clarifai.usage.EventParam.other)
}
void EventParam::set_allocated_asset(::clarifai::usage::AssetEvent* asset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (asset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      asset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, asset, submessage_arena);
    }
    set_has_asset();
    event_.asset_ = asset;
  }
  // @@protoc_insertion_point(field_set_allocated:clarifai.usage.EventParam.asset)
}
EventParam::EventParam()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.usage.EventParam)
}
EventParam::EventParam(const EventParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_event();
  switch (from.event_case()) {
    case kPredict: {
      _internal_mutable_predict()->::clarifai::usage::PredictEvent::MergeFrom(from._internal_predict());
      break;
    }
    case kSearch: {
      _internal_mutable_search()->::clarifai::usage::SearchEvent::MergeFrom(from._internal_search());
      break;
    }
    case kTrain: {
      _internal_mutable_train()->::clarifai::usage::TrainModelEvent::MergeFrom(from._internal_train());
      break;
    }
    case kOther: {
      _internal_mutable_other()->::clarifai::usage::OtherEvent::MergeFrom(from._internal_other());
      break;
    }
    case kAsset: {
      _internal_mutable_asset()->::clarifai::usage::AssetEvent::MergeFrom(from._internal_asset());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.usage.EventParam)
}

void EventParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EventParam_proto_2fclarifai_2fusage_2fevent_2eproto.base);
  clear_has_event();
}

EventParam::~EventParam() {
  // @@protoc_insertion_point(destructor:clarifai.usage.EventParam)
  SharedDtor();
}

void EventParam::SharedDtor() {
  if (has_event()) {
    clear_event();
  }
}

void EventParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EventParam& EventParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EventParam_proto_2fclarifai_2fusage_2fevent_2eproto.base);
  return *internal_default_instance();
}


void EventParam::clear_event() {
// @@protoc_insertion_point(one_of_clear_start:clarifai.usage.EventParam)
  switch (event_case()) {
    case kPredict: {
      delete event_.predict_;
      break;
    }
    case kSearch: {
      delete event_.search_;
      break;
    }
    case kTrain: {
      delete event_.train_;
      break;
    }
    case kOther: {
      delete event_.other_;
      break;
    }
    case kAsset: {
      delete event_.asset_;
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EVENT_NOT_SET;
}


void EventParam::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.usage.EventParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_event();
  _internal_metadata_.Clear();
}

const char* EventParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.usage.PredictEvent predict = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_predict(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.usage.SearchEvent search = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_search(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.usage.TrainModelEvent train = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_train(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.usage.OtherEvent other = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_other(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.usage.AssetEvent asset = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_asset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EventParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.usage.EventParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.usage.PredictEvent predict = 1;
  if (_internal_has_predict()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::predict(this), target, stream);
  }

  // .clarifai.usage.SearchEvent search = 3;
  if (_internal_has_search()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::search(this), target, stream);
  }

  // .clarifai.usage.TrainModelEvent train = 4;
  if (_internal_has_train()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::train(this), target, stream);
  }

  // .clarifai.usage.OtherEvent other = 5;
  if (_internal_has_other()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::other(this), target, stream);
  }

  // .clarifai.usage.AssetEvent asset = 6;
  if (_internal_has_asset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::asset(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.usage.EventParam)
  return target;
}

size_t EventParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.usage.EventParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (event_case()) {
    // .clarifai.usage.PredictEvent predict = 1;
    case kPredict: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.predict_);
      break;
    }
    // .clarifai.usage.SearchEvent search = 3;
    case kSearch: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.search_);
      break;
    }
    // .clarifai.usage.TrainModelEvent train = 4;
    case kTrain: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.train_);
      break;
    }
    // .clarifai.usage.OtherEvent other = 5;
    case kOther: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.other_);
      break;
    }
    // .clarifai.usage.AssetEvent asset = 6;
    case kAsset: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.asset_);
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.usage.EventParam)
  GOOGLE_DCHECK_NE(&from, this);
  const EventParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EventParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.usage.EventParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.usage.EventParam)
    MergeFrom(*source);
  }
}

void EventParam::MergeFrom(const EventParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.usage.EventParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.event_case()) {
    case kPredict: {
      _internal_mutable_predict()->::clarifai::usage::PredictEvent::MergeFrom(from._internal_predict());
      break;
    }
    case kSearch: {
      _internal_mutable_search()->::clarifai::usage::SearchEvent::MergeFrom(from._internal_search());
      break;
    }
    case kTrain: {
      _internal_mutable_train()->::clarifai::usage::TrainModelEvent::MergeFrom(from._internal_train());
      break;
    }
    case kOther: {
      _internal_mutable_other()->::clarifai::usage::OtherEvent::MergeFrom(from._internal_other());
      break;
    }
    case kAsset: {
      _internal_mutable_asset()->::clarifai::usage::AssetEvent::MergeFrom(from._internal_asset());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
}

void EventParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.usage.EventParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventParam::CopyFrom(const EventParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.usage.EventParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventParam::IsInitialized() const {
  return true;
}

void EventParam::InternalSwap(EventParam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(event_, other->event_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Model::InitAsDefaultInstance() {
}
class Model::_Internal {
 public:
};

Model::Model()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.usage.Model)
}
Model::Model(const Model& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_id().empty()) {
    model_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_id_);
  }
  model_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_type().empty()) {
    model_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_type_);
  }
  model_version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_version_id().empty()) {
    model_version_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_version_id_);
  }
  ownership_ = from.ownership_;
  // @@protoc_insertion_point(copy_constructor:clarifai.usage.Model)
}

void Model::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Model_proto_2fclarifai_2fusage_2fevent_2eproto.base);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ownership_ = 0;
}

Model::~Model() {
  // @@protoc_insertion_point(destructor:clarifai.usage.Model)
  SharedDtor();
}

void Model::SharedDtor() {
  model_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_version_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Model::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Model& Model::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Model_proto_2fclarifai_2fusage_2fevent_2eproto.base);
  return *internal_default_instance();
}


void Model::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.usage.Model)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_version_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ownership_ = 0;
  _internal_metadata_.Clear();
}

const char* Model::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string model_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_model_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.usage.Model.model_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_model_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.usage.Model.model_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_version_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_model_version_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.usage.Model.model_version_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.usage.Ownership ownership = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_ownership(static_cast<::clarifai::usage::Ownership>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Model::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.usage.Model)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string model_id = 1;
  if (this->model_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.usage.Model.model_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_model_id(), target);
  }

  // string model_type = 2;
  if (this->model_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_type().data(), static_cast<int>(this->_internal_model_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.usage.Model.model_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_type(), target);
  }

  // string model_version_id = 4;
  if (this->model_version_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_version_id().data(), static_cast<int>(this->_internal_model_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.usage.Model.model_version_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_model_version_id(), target);
  }

  // .clarifai.usage.Ownership ownership = 5;
  if (this->ownership() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_ownership(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.usage.Model)
  return target;
}

size_t Model::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.usage.Model)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model_id = 1;
  if (this->model_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string model_type = 2;
  if (this->model_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_type());
  }

  // string model_version_id = 4;
  if (this->model_version_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_version_id());
  }

  // .clarifai.usage.Ownership ownership = 5;
  if (this->ownership() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ownership());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Model::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.usage.Model)
  GOOGLE_DCHECK_NE(&from, this);
  const Model* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Model>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.usage.Model)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.usage.Model)
    MergeFrom(*source);
  }
}

void Model::MergeFrom(const Model& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.usage.Model)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.model_id().size() > 0) {

    model_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_id_);
  }
  if (from.model_type().size() > 0) {

    model_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_type_);
  }
  if (from.model_version_id().size() > 0) {

    model_version_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_version_id_);
  }
  if (from.ownership() != 0) {
    _internal_set_ownership(from._internal_ownership());
  }
}

void Model::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.usage.Model)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Model::CopyFrom(const Model& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.usage.Model)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Model::IsInitialized() const {
  return true;
}

void Model::InternalSwap(Model* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  model_id_.Swap(&other->model_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  model_type_.Swap(&other->model_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  model_version_id_.Swap(&other->model_version_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ownership_, other->ownership_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Model::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PredictEvent::InitAsDefaultInstance() {
  ::clarifai::usage::_PredictEvent_default_instance_._instance.get_mutable()->model_ = const_cast< ::clarifai::usage::Model*>(
      ::clarifai::usage::Model::internal_default_instance());
}
class PredictEvent::_Internal {
 public:
  static const ::clarifai::usage::Model& model(const PredictEvent* msg);
};

const ::clarifai::usage::Model&
PredictEvent::_Internal::model(const PredictEvent* msg) {
  return *msg->model_;
}
PredictEvent::PredictEvent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.usage.PredictEvent)
}
PredictEvent::PredictEvent(const PredictEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  input_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_input_type().empty()) {
    input_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.input_type_);
  }
  if (from._internal_has_model()) {
    model_ = new ::clarifai::usage::Model(*from.model_);
  } else {
    model_ = nullptr;
  }
  predict_type_ = from.predict_type_;
  // @@protoc_insertion_point(copy_constructor:clarifai.usage.PredictEvent)
}

void PredictEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PredictEvent_proto_2fclarifai_2fusage_2fevent_2eproto.base);
  input_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&model_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&predict_type_) -
      reinterpret_cast<char*>(&model_)) + sizeof(predict_type_));
}

PredictEvent::~PredictEvent() {
  // @@protoc_insertion_point(destructor:clarifai.usage.PredictEvent)
  SharedDtor();
}

void PredictEvent::SharedDtor() {
  input_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete model_;
}

void PredictEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PredictEvent& PredictEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PredictEvent_proto_2fclarifai_2fusage_2fevent_2eproto.base);
  return *internal_default_instance();
}


void PredictEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.usage.PredictEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && model_ != nullptr) {
    delete model_;
  }
  model_ = nullptr;
  predict_type_ = 0;
  _internal_metadata_.Clear();
}

const char* PredictEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.usage.Model model = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_model(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string input_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_input_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.usage.PredictEvent.input_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.usage.PredictType predict_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_predict_type(static_cast<::clarifai::usage::PredictType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PredictEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.usage.PredictEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.usage.Model model = 1;
  if (this->has_model()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::model(this), target, stream);
  }

  // string input_type = 2;
  if (this->input_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_input_type().data(), static_cast<int>(this->_internal_input_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.usage.PredictEvent.input_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_input_type(), target);
  }

  // .clarifai.usage.PredictType predict_type = 3;
  if (this->predict_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_predict_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.usage.PredictEvent)
  return target;
}

size_t PredictEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.usage.PredictEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string input_type = 2;
  if (this->input_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_input_type());
  }

  // .clarifai.usage.Model model = 1;
  if (this->has_model()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *model_);
  }

  // .clarifai.usage.PredictType predict_type = 3;
  if (this->predict_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_predict_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PredictEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.usage.PredictEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const PredictEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PredictEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.usage.PredictEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.usage.PredictEvent)
    MergeFrom(*source);
  }
}

void PredictEvent::MergeFrom(const PredictEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.usage.PredictEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.input_type().size() > 0) {

    input_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.input_type_);
  }
  if (from.has_model()) {
    _internal_mutable_model()->::clarifai::usage::Model::MergeFrom(from._internal_model());
  }
  if (from.predict_type() != 0) {
    _internal_set_predict_type(from._internal_predict_type());
  }
}

void PredictEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.usage.PredictEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PredictEvent::CopyFrom(const PredictEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.usage.PredictEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredictEvent::IsInitialized() const {
  return true;
}

void PredictEvent::InternalSwap(PredictEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  input_type_.Swap(&other->input_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(model_, other->model_);
  swap(predict_type_, other->predict_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PredictEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SearchEvent::InitAsDefaultInstance() {
}
class SearchEvent::_Internal {
 public:
};

SearchEvent::SearchEvent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.usage.SearchEvent)
}
SearchEvent::SearchEvent(const SearchEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  search_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_search_type().empty()) {
    search_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.search_type_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.usage.SearchEvent)
}

void SearchEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SearchEvent_proto_2fclarifai_2fusage_2fevent_2eproto.base);
  search_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SearchEvent::~SearchEvent() {
  // @@protoc_insertion_point(destructor:clarifai.usage.SearchEvent)
  SharedDtor();
}

void SearchEvent::SharedDtor() {
  search_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SearchEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SearchEvent& SearchEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SearchEvent_proto_2fclarifai_2fusage_2fevent_2eproto.base);
  return *internal_default_instance();
}


void SearchEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.usage.SearchEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  search_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* SearchEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string search_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_search_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.usage.SearchEvent.search_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SearchEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.usage.SearchEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string search_type = 1;
  if (this->search_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_search_type().data(), static_cast<int>(this->_internal_search_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.usage.SearchEvent.search_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_search_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.usage.SearchEvent)
  return target;
}

size_t SearchEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.usage.SearchEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string search_type = 1;
  if (this->search_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_search_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SearchEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.usage.SearchEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SearchEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.usage.SearchEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.usage.SearchEvent)
    MergeFrom(*source);
  }
}

void SearchEvent::MergeFrom(const SearchEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.usage.SearchEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.search_type().size() > 0) {

    search_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.search_type_);
  }
}

void SearchEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.usage.SearchEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchEvent::CopyFrom(const SearchEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.usage.SearchEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchEvent::IsInitialized() const {
  return true;
}

void SearchEvent::InternalSwap(SearchEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  search_type_.Swap(&other->search_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrainModelEvent::InitAsDefaultInstance() {
  ::clarifai::usage::_TrainModelEvent_default_instance_._instance.get_mutable()->model_ = const_cast< ::clarifai::usage::Model*>(
      ::clarifai::usage::Model::internal_default_instance());
}
class TrainModelEvent::_Internal {
 public:
  static const ::clarifai::usage::Model& model(const TrainModelEvent* msg);
};

const ::clarifai::usage::Model&
TrainModelEvent::_Internal::model(const TrainModelEvent* msg) {
  return *msg->model_;
}
TrainModelEvent::TrainModelEvent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.usage.TrainModelEvent)
}
TrainModelEvent::TrainModelEvent(const TrainModelEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_model()) {
    model_ = new ::clarifai::usage::Model(*from.model_);
  } else {
    model_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.usage.TrainModelEvent)
}

void TrainModelEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrainModelEvent_proto_2fclarifai_2fusage_2fevent_2eproto.base);
  model_ = nullptr;
}

TrainModelEvent::~TrainModelEvent() {
  // @@protoc_insertion_point(destructor:clarifai.usage.TrainModelEvent)
  SharedDtor();
}

void TrainModelEvent::SharedDtor() {
  if (this != internal_default_instance()) delete model_;
}

void TrainModelEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrainModelEvent& TrainModelEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrainModelEvent_proto_2fclarifai_2fusage_2fevent_2eproto.base);
  return *internal_default_instance();
}


void TrainModelEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.usage.TrainModelEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && model_ != nullptr) {
    delete model_;
  }
  model_ = nullptr;
  _internal_metadata_.Clear();
}

const char* TrainModelEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.usage.Model model = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_model(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrainModelEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.usage.TrainModelEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.usage.Model model = 1;
  if (this->has_model()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::model(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.usage.TrainModelEvent)
  return target;
}

size_t TrainModelEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.usage.TrainModelEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.usage.Model model = 1;
  if (this->has_model()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *model_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrainModelEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.usage.TrainModelEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const TrainModelEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrainModelEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.usage.TrainModelEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.usage.TrainModelEvent)
    MergeFrom(*source);
  }
}

void TrainModelEvent::MergeFrom(const TrainModelEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.usage.TrainModelEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_model()) {
    _internal_mutable_model()->::clarifai::usage::Model::MergeFrom(from._internal_model());
  }
}

void TrainModelEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.usage.TrainModelEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainModelEvent::CopyFrom(const TrainModelEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.usage.TrainModelEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainModelEvent::IsInitialized() const {
  return true;
}

void TrainModelEvent::InternalSwap(TrainModelEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(model_, other->model_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrainModelEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OtherEvent::InitAsDefaultInstance() {
}
class OtherEvent::_Internal {
 public:
};

OtherEvent::OtherEvent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.usage.OtherEvent)
}
OtherEvent::OtherEvent(const OtherEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:clarifai.usage.OtherEvent)
}

void OtherEvent::SharedCtor() {
}

OtherEvent::~OtherEvent() {
  // @@protoc_insertion_point(destructor:clarifai.usage.OtherEvent)
  SharedDtor();
}

void OtherEvent::SharedDtor() {
}

void OtherEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OtherEvent& OtherEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OtherEvent_proto_2fclarifai_2fusage_2fevent_2eproto.base);
  return *internal_default_instance();
}


void OtherEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.usage.OtherEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* OtherEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OtherEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.usage.OtherEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.usage.OtherEvent)
  return target;
}

size_t OtherEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.usage.OtherEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OtherEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.usage.OtherEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const OtherEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OtherEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.usage.OtherEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.usage.OtherEvent)
    MergeFrom(*source);
  }
}

void OtherEvent::MergeFrom(const OtherEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.usage.OtherEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void OtherEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.usage.OtherEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OtherEvent::CopyFrom(const OtherEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.usage.OtherEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OtherEvent::IsInitialized() const {
  return true;
}

void OtherEvent::InternalSwap(OtherEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OtherEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AssetEvent::InitAsDefaultInstance() {
}
class AssetEvent::_Internal {
 public:
};

AssetEvent::AssetEvent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.usage.AssetEvent)
}
AssetEvent::AssetEvent(const AssetEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:clarifai.usage.AssetEvent)
}

void AssetEvent::SharedCtor() {
}

AssetEvent::~AssetEvent() {
  // @@protoc_insertion_point(destructor:clarifai.usage.AssetEvent)
  SharedDtor();
}

void AssetEvent::SharedDtor() {
}

void AssetEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AssetEvent& AssetEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AssetEvent_proto_2fclarifai_2fusage_2fevent_2eproto.base);
  return *internal_default_instance();
}


void AssetEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.usage.AssetEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* AssetEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AssetEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.usage.AssetEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.usage.AssetEvent)
  return target;
}

size_t AssetEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.usage.AssetEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AssetEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.usage.AssetEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const AssetEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AssetEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.usage.AssetEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.usage.AssetEvent)
    MergeFrom(*source);
  }
}

void AssetEvent::MergeFrom(const AssetEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.usage.AssetEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AssetEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.usage.AssetEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssetEvent::CopyFrom(const AssetEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.usage.AssetEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssetEvent::IsInitialized() const {
  return true;
}

void AssetEvent::InternalSwap(AssetEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AssetEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace usage
}  // namespace clarifai
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::clarifai::usage::EventParam* Arena::CreateMaybeMessage< ::clarifai::usage::EventParam >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::usage::EventParam >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::usage::Model* Arena::CreateMaybeMessage< ::clarifai::usage::Model >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::usage::Model >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::usage::PredictEvent* Arena::CreateMaybeMessage< ::clarifai::usage::PredictEvent >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::usage::PredictEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::usage::SearchEvent* Arena::CreateMaybeMessage< ::clarifai::usage::SearchEvent >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::usage::SearchEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::usage::TrainModelEvent* Arena::CreateMaybeMessage< ::clarifai::usage::TrainModelEvent >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::usage::TrainModelEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::usage::OtherEvent* Arena::CreateMaybeMessage< ::clarifai::usage::OtherEvent >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::usage::OtherEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::usage::AssetEvent* Arena::CreateMaybeMessage< ::clarifai::usage::AssetEvent >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::usage::AssetEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
