// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/clarifai/api/service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fclarifai_2fapi_2fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fclarifai_2fapi_2fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "proto/clarifai/api/resources.pb.h"
#include "proto/clarifai/api/status/status.pb.h"
#include "proto/clarifai/api/utils/extensions.pb.h"
#include "proto/clarifai/auth/scope/scope.pb.h"
#include "proto/clarifai/auth/util/extension.pb.h"
#include "google/api/annotations.pb.h"
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/struct.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[239]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto;
namespace clarifai {
namespace api {
class CompleteResetPasswordRequest;
class CompleteResetPasswordRequestDefaultTypeInternal;
extern CompleteResetPasswordRequestDefaultTypeInternal _CompleteResetPasswordRequest_default_instance_;
class DeleteAnnotationRequest;
class DeleteAnnotationRequestDefaultTypeInternal;
extern DeleteAnnotationRequestDefaultTypeInternal _DeleteAnnotationRequest_default_instance_;
class DeleteAnnotationsRequest;
class DeleteAnnotationsRequestDefaultTypeInternal;
extern DeleteAnnotationsRequestDefaultTypeInternal _DeleteAnnotationsRequest_default_instance_;
class DeleteAppRequest;
class DeleteAppRequestDefaultTypeInternal;
extern DeleteAppRequestDefaultTypeInternal _DeleteAppRequest_default_instance_;
class DeleteCollaboratorsRequest;
class DeleteCollaboratorsRequestDefaultTypeInternal;
extern DeleteCollaboratorsRequestDefaultTypeInternal _DeleteCollaboratorsRequest_default_instance_;
class DeleteCollectorsRequest;
class DeleteCollectorsRequestDefaultTypeInternal;
extern DeleteCollectorsRequestDefaultTypeInternal _DeleteCollectorsRequest_default_instance_;
class DeleteConceptRelationsRequest;
class DeleteConceptRelationsRequestDefaultTypeInternal;
extern DeleteConceptRelationsRequestDefaultTypeInternal _DeleteConceptRelationsRequest_default_instance_;
class DeleteCreditCardRequest;
class DeleteCreditCardRequestDefaultTypeInternal;
extern DeleteCreditCardRequestDefaultTypeInternal _DeleteCreditCardRequest_default_instance_;
class DeleteEmailRequest;
class DeleteEmailRequestDefaultTypeInternal;
extern DeleteEmailRequestDefaultTypeInternal _DeleteEmailRequest_default_instance_;
class DeleteInputRequest;
class DeleteInputRequestDefaultTypeInternal;
extern DeleteInputRequestDefaultTypeInternal _DeleteInputRequest_default_instance_;
class DeleteInputsRequest;
class DeleteInputsRequestDefaultTypeInternal;
extern DeleteInputsRequestDefaultTypeInternal _DeleteInputsRequest_default_instance_;
class DeleteKeyRequest;
class DeleteKeyRequestDefaultTypeInternal;
extern DeleteKeyRequestDefaultTypeInternal _DeleteKeyRequest_default_instance_;
class DeleteModelRequest;
class DeleteModelRequestDefaultTypeInternal;
extern DeleteModelRequestDefaultTypeInternal _DeleteModelRequest_default_instance_;
class DeleteModelVersionRequest;
class DeleteModelVersionRequestDefaultTypeInternal;
extern DeleteModelVersionRequestDefaultTypeInternal _DeleteModelVersionRequest_default_instance_;
class DeleteModelVersionsDeploymentRequest;
class DeleteModelVersionsDeploymentRequestDefaultTypeInternal;
extern DeleteModelVersionsDeploymentRequestDefaultTypeInternal _DeleteModelVersionsDeploymentRequest_default_instance_;
class DeleteModelsRequest;
class DeleteModelsRequestDefaultTypeInternal;
extern DeleteModelsRequestDefaultTypeInternal _DeleteModelsRequest_default_instance_;
class DeletePasswordPoliciesRequest;
class DeletePasswordPoliciesRequestDefaultTypeInternal;
extern DeletePasswordPoliciesRequestDefaultTypeInternal _DeletePasswordPoliciesRequest_default_instance_;
class DeleteSearchRequest;
class DeleteSearchRequestDefaultTypeInternal;
extern DeleteSearchRequestDefaultTypeInternal _DeleteSearchRequest_default_instance_;
class DeleteTasksRequest;
class DeleteTasksRequestDefaultTypeInternal;
extern DeleteTasksRequestDefaultTypeInternal _DeleteTasksRequest_default_instance_;
class DeleteVocabConceptRequest;
class DeleteVocabConceptRequestDefaultTypeInternal;
extern DeleteVocabConceptRequestDefaultTypeInternal _DeleteVocabConceptRequest_default_instance_;
class DeleteVocabConceptsRequest;
class DeleteVocabConceptsRequestDefaultTypeInternal;
extern DeleteVocabConceptsRequestDefaultTypeInternal _DeleteVocabConceptsRequest_default_instance_;
class DeleteVocabRequest;
class DeleteVocabRequestDefaultTypeInternal;
extern DeleteVocabRequestDefaultTypeInternal _DeleteVocabRequest_default_instance_;
class DeleteVocabsRequest;
class DeleteVocabsRequestDefaultTypeInternal;
extern DeleteVocabsRequestDefaultTypeInternal _DeleteVocabsRequest_default_instance_;
class DeleteWorkflowRequest;
class DeleteWorkflowRequestDefaultTypeInternal;
extern DeleteWorkflowRequestDefaultTypeInternal _DeleteWorkflowRequest_default_instance_;
class DeleteWorkflowsRequest;
class DeleteWorkflowsRequestDefaultTypeInternal;
extern DeleteWorkflowsRequestDefaultTypeInternal _DeleteWorkflowsRequest_default_instance_;
class FetchLicenseRequest;
class FetchLicenseRequestDefaultTypeInternal;
extern FetchLicenseRequestDefaultTypeInternal _FetchLicenseRequest_default_instance_;
class FetchLicenseResponse;
class FetchLicenseResponseDefaultTypeInternal;
extern FetchLicenseResponseDefaultTypeInternal _FetchLicenseResponse_default_instance_;
class GetAnnotationRequest;
class GetAnnotationRequestDefaultTypeInternal;
extern GetAnnotationRequestDefaultTypeInternal _GetAnnotationRequest_default_instance_;
class GetAnnotationSearchMetricsRequest;
class GetAnnotationSearchMetricsRequestDefaultTypeInternal;
extern GetAnnotationSearchMetricsRequestDefaultTypeInternal _GetAnnotationSearchMetricsRequest_default_instance_;
class GetAppDuplicationRequest;
class GetAppDuplicationRequestDefaultTypeInternal;
extern GetAppDuplicationRequestDefaultTypeInternal _GetAppDuplicationRequest_default_instance_;
class GetAppRequest;
class GetAppRequestDefaultTypeInternal;
extern GetAppRequestDefaultTypeInternal _GetAppRequest_default_instance_;
class GetBillingUsageRequest;
class GetBillingUsageRequestDefaultTypeInternal;
extern GetBillingUsageRequestDefaultTypeInternal _GetBillingUsageRequest_default_instance_;
class GetBillingUsageResponse;
class GetBillingUsageResponseDefaultTypeInternal;
extern GetBillingUsageResponseDefaultTypeInternal _GetBillingUsageResponse_default_instance_;
class GetCollectorRequest;
class GetCollectorRequestDefaultTypeInternal;
extern GetCollectorRequestDefaultTypeInternal _GetCollectorRequest_default_instance_;
class GetConceptCountsRequest;
class GetConceptCountsRequestDefaultTypeInternal;
extern GetConceptCountsRequestDefaultTypeInternal _GetConceptCountsRequest_default_instance_;
class GetConceptLanguageRequest;
class GetConceptLanguageRequestDefaultTypeInternal;
extern GetConceptLanguageRequestDefaultTypeInternal _GetConceptLanguageRequest_default_instance_;
class GetConceptRequest;
class GetConceptRequestDefaultTypeInternal;
extern GetConceptRequestDefaultTypeInternal _GetConceptRequest_default_instance_;
class GetHealthzRequest;
class GetHealthzRequestDefaultTypeInternal;
extern GetHealthzRequestDefaultTypeInternal _GetHealthzRequest_default_instance_;
class GetHealthzResponse;
class GetHealthzResponseDefaultTypeInternal;
extern GetHealthzResponseDefaultTypeInternal _GetHealthzResponse_default_instance_;
class GetInputCountRequest;
class GetInputCountRequestDefaultTypeInternal;
extern GetInputCountRequestDefaultTypeInternal _GetInputCountRequest_default_instance_;
class GetInputRequest;
class GetInputRequestDefaultTypeInternal;
extern GetInputRequestDefaultTypeInternal _GetInputRequest_default_instance_;
class GetKeyRequest;
class GetKeyRequestDefaultTypeInternal;
extern GetKeyRequestDefaultTypeInternal _GetKeyRequest_default_instance_;
class GetLicenseRequest;
class GetLicenseRequestDefaultTypeInternal;
extern GetLicenseRequestDefaultTypeInternal _GetLicenseRequest_default_instance_;
class GetModelOutputInfoRequest;
class GetModelOutputInfoRequestDefaultTypeInternal;
extern GetModelOutputInfoRequestDefaultTypeInternal _GetModelOutputInfoRequest_default_instance_;
class GetModelRequest;
class GetModelRequestDefaultTypeInternal;
extern GetModelRequestDefaultTypeInternal _GetModelRequest_default_instance_;
class GetModelVersionMetricsRequest;
class GetModelVersionMetricsRequestDefaultTypeInternal;
extern GetModelVersionMetricsRequestDefaultTypeInternal _GetModelVersionMetricsRequest_default_instance_;
class GetModelVersionRequest;
class GetModelVersionRequestDefaultTypeInternal;
extern GetModelVersionRequestDefaultTypeInternal _GetModelVersionRequest_default_instance_;
class GetRealtimeUsageRequest;
class GetRealtimeUsageRequestDefaultTypeInternal;
extern GetRealtimeUsageRequestDefaultTypeInternal _GetRealtimeUsageRequest_default_instance_;
class GetRealtimeUsageResponse;
class GetRealtimeUsageResponseDefaultTypeInternal;
extern GetRealtimeUsageResponseDefaultTypeInternal _GetRealtimeUsageResponse_default_instance_;
class GetSearchRequest;
class GetSearchRequestDefaultTypeInternal;
extern GetSearchRequestDefaultTypeInternal _GetSearchRequest_default_instance_;
class GetStatusCodeRequest;
class GetStatusCodeRequestDefaultTypeInternal;
extern GetStatusCodeRequestDefaultTypeInternal _GetStatusCodeRequest_default_instance_;
class GetSubscriptionRequest;
class GetSubscriptionRequestDefaultTypeInternal;
extern GetSubscriptionRequestDefaultTypeInternal _GetSubscriptionRequest_default_instance_;
class GetTaskRequest;
class GetTaskRequestDefaultTypeInternal;
extern GetTaskRequestDefaultTypeInternal _GetTaskRequest_default_instance_;
class GetUserRequest;
class GetUserRequestDefaultTypeInternal;
extern GetUserRequestDefaultTypeInternal _GetUserRequest_default_instance_;
class GetVocabRequest;
class GetVocabRequestDefaultTypeInternal;
extern GetVocabRequestDefaultTypeInternal _GetVocabRequest_default_instance_;
class GetWorkflowRequest;
class GetWorkflowRequestDefaultTypeInternal;
extern GetWorkflowRequestDefaultTypeInternal _GetWorkflowRequest_default_instance_;
class ListAnnotationSearchMetricsRequest;
class ListAnnotationSearchMetricsRequestDefaultTypeInternal;
extern ListAnnotationSearchMetricsRequestDefaultTypeInternal _ListAnnotationSearchMetricsRequest_default_instance_;
class ListAnnotationsForClusterRequest;
class ListAnnotationsForClusterRequestDefaultTypeInternal;
extern ListAnnotationsForClusterRequestDefaultTypeInternal _ListAnnotationsForClusterRequest_default_instance_;
class ListAnnotationsRequest;
class ListAnnotationsRequestDefaultTypeInternal;
extern ListAnnotationsRequestDefaultTypeInternal _ListAnnotationsRequest_default_instance_;
class ListAppDuplicationsRequest;
class ListAppDuplicationsRequestDefaultTypeInternal;
extern ListAppDuplicationsRequestDefaultTypeInternal _ListAppDuplicationsRequest_default_instance_;
class ListAppKeysRequest;
class ListAppKeysRequestDefaultTypeInternal;
extern ListAppKeysRequestDefaultTypeInternal _ListAppKeysRequest_default_instance_;
class ListAppsRequest;
class ListAppsRequestDefaultTypeInternal;
extern ListAppsRequestDefaultTypeInternal _ListAppsRequest_default_instance_;
class ListAuthMethodsRequest;
class ListAuthMethodsRequestDefaultTypeInternal;
extern ListAuthMethodsRequestDefaultTypeInternal _ListAuthMethodsRequest_default_instance_;
class ListAuthMethodsResponse;
class ListAuthMethodsResponseDefaultTypeInternal;
extern ListAuthMethodsResponseDefaultTypeInternal _ListAuthMethodsResponse_default_instance_;
class ListClustersRequest;
class ListClustersRequestDefaultTypeInternal;
extern ListClustersRequestDefaultTypeInternal _ListClustersRequest_default_instance_;
class ListCollaborationsRequest;
class ListCollaborationsRequestDefaultTypeInternal;
extern ListCollaborationsRequestDefaultTypeInternal _ListCollaborationsRequest_default_instance_;
class ListCollaboratorsRequest;
class ListCollaboratorsRequestDefaultTypeInternal;
extern ListCollaboratorsRequestDefaultTypeInternal _ListCollaboratorsRequest_default_instance_;
class ListCollectorsRequest;
class ListCollectorsRequestDefaultTypeInternal;
extern ListCollectorsRequestDefaultTypeInternal _ListCollectorsRequest_default_instance_;
class ListConceptLanguagesRequest;
class ListConceptLanguagesRequestDefaultTypeInternal;
extern ListConceptLanguagesRequestDefaultTypeInternal _ListConceptLanguagesRequest_default_instance_;
class ListConceptMappingsRequest;
class ListConceptMappingsRequestDefaultTypeInternal;
extern ListConceptMappingsRequestDefaultTypeInternal _ListConceptMappingsRequest_default_instance_;
class ListConceptReferencesRequest;
class ListConceptReferencesRequestDefaultTypeInternal;
extern ListConceptReferencesRequestDefaultTypeInternal _ListConceptReferencesRequest_default_instance_;
class ListConceptRelationsRequest;
class ListConceptRelationsRequestDefaultTypeInternal;
extern ListConceptRelationsRequestDefaultTypeInternal _ListConceptRelationsRequest_default_instance_;
class ListConceptsRequest;
class ListConceptsRequestDefaultTypeInternal;
extern ListConceptsRequestDefaultTypeInternal _ListConceptsRequest_default_instance_;
class ListCreditCardsRequest;
class ListCreditCardsRequestDefaultTypeInternal;
extern ListCreditCardsRequestDefaultTypeInternal _ListCreditCardsRequest_default_instance_;
class ListEmailsRequest;
class ListEmailsRequestDefaultTypeInternal;
extern ListEmailsRequestDefaultTypeInternal _ListEmailsRequest_default_instance_;
class ListInputsRequest;
class ListInputsRequestDefaultTypeInternal;
extern ListInputsRequestDefaultTypeInternal _ListInputsRequest_default_instance_;
class ListKeysRequest;
class ListKeysRequestDefaultTypeInternal;
extern ListKeysRequestDefaultTypeInternal _ListKeysRequest_default_instance_;
class ListKnowledgeGraphsRequest;
class ListKnowledgeGraphsRequestDefaultTypeInternal;
extern ListKnowledgeGraphsRequestDefaultTypeInternal _ListKnowledgeGraphsRequest_default_instance_;
class ListLicensesRequest;
class ListLicensesRequestDefaultTypeInternal;
extern ListLicensesRequestDefaultTypeInternal _ListLicensesRequest_default_instance_;
class ListModelInputsRequest;
class ListModelInputsRequestDefaultTypeInternal;
extern ListModelInputsRequestDefaultTypeInternal _ListModelInputsRequest_default_instance_;
class ListModelVersionsRequest;
class ListModelVersionsRequestDefaultTypeInternal;
extern ListModelVersionsRequestDefaultTypeInternal _ListModelVersionsRequest_default_instance_;
class ListModelsRequest;
class ListModelsRequestDefaultTypeInternal;
extern ListModelsRequestDefaultTypeInternal _ListModelsRequest_default_instance_;
class ListPasswordPoliciesRequest;
class ListPasswordPoliciesRequestDefaultTypeInternal;
extern ListPasswordPoliciesRequestDefaultTypeInternal _ListPasswordPoliciesRequest_default_instance_;
class ListPublicWorkflowsRequest;
class ListPublicWorkflowsRequestDefaultTypeInternal;
extern ListPublicWorkflowsRequestDefaultTypeInternal _ListPublicWorkflowsRequest_default_instance_;
class ListScopesRequest;
class ListScopesRequestDefaultTypeInternal;
extern ListScopesRequestDefaultTypeInternal _ListScopesRequest_default_instance_;
class ListSearchesRequest;
class ListSearchesRequestDefaultTypeInternal;
extern ListSearchesRequestDefaultTypeInternal _ListSearchesRequest_default_instance_;
class ListStatusCodesRequest;
class ListStatusCodesRequestDefaultTypeInternal;
extern ListStatusCodesRequestDefaultTypeInternal _ListStatusCodesRequest_default_instance_;
class ListTasksRequest;
class ListTasksRequestDefaultTypeInternal;
extern ListTasksRequestDefaultTypeInternal _ListTasksRequest_default_instance_;
class ListTrainingTemplatesRequest;
class ListTrainingTemplatesRequestDefaultTypeInternal;
extern ListTrainingTemplatesRequestDefaultTypeInternal _ListTrainingTemplatesRequest_default_instance_;
class ListUsageIntervalsRequest;
class ListUsageIntervalsRequestDefaultTypeInternal;
extern ListUsageIntervalsRequestDefaultTypeInternal _ListUsageIntervalsRequest_default_instance_;
class ListUsageIntervalsResponse;
class ListUsageIntervalsResponseDefaultTypeInternal;
extern ListUsageIntervalsResponseDefaultTypeInternal _ListUsageIntervalsResponse_default_instance_;
class ListUserBillingCyclesRequest;
class ListUserBillingCyclesRequestDefaultTypeInternal;
extern ListUserBillingCyclesRequestDefaultTypeInternal _ListUserBillingCyclesRequest_default_instance_;
class ListUserBillingCyclesResponse;
class ListUserBillingCyclesResponseDefaultTypeInternal;
extern ListUserBillingCyclesResponseDefaultTypeInternal _ListUserBillingCyclesResponse_default_instance_;
class ListVocabConceptsRequest;
class ListVocabConceptsRequestDefaultTypeInternal;
extern ListVocabConceptsRequestDefaultTypeInternal _ListVocabConceptsRequest_default_instance_;
class ListVocabsRequest;
class ListVocabsRequestDefaultTypeInternal;
extern ListVocabsRequestDefaultTypeInternal _ListVocabsRequest_default_instance_;
class ListWorkflowsRequest;
class ListWorkflowsRequestDefaultTypeInternal;
extern ListWorkflowsRequestDefaultTypeInternal _ListWorkflowsRequest_default_instance_;
class MultiAnnotationResponse;
class MultiAnnotationResponseDefaultTypeInternal;
extern MultiAnnotationResponseDefaultTypeInternal _MultiAnnotationResponse_default_instance_;
class MultiAnnotationSearchMetricsResponse;
class MultiAnnotationSearchMetricsResponseDefaultTypeInternal;
extern MultiAnnotationSearchMetricsResponseDefaultTypeInternal _MultiAnnotationSearchMetricsResponse_default_instance_;
class MultiAppDuplicationsResponse;
class MultiAppDuplicationsResponseDefaultTypeInternal;
extern MultiAppDuplicationsResponseDefaultTypeInternal _MultiAppDuplicationsResponse_default_instance_;
class MultiAppResponse;
class MultiAppResponseDefaultTypeInternal;
extern MultiAppResponseDefaultTypeInternal _MultiAppResponse_default_instance_;
class MultiClusterResponse;
class MultiClusterResponseDefaultTypeInternal;
extern MultiClusterResponseDefaultTypeInternal _MultiClusterResponse_default_instance_;
class MultiCollaborationsResponse;
class MultiCollaborationsResponseDefaultTypeInternal;
extern MultiCollaborationsResponseDefaultTypeInternal _MultiCollaborationsResponse_default_instance_;
class MultiCollaboratorsResponse;
class MultiCollaboratorsResponseDefaultTypeInternal;
extern MultiCollaboratorsResponseDefaultTypeInternal _MultiCollaboratorsResponse_default_instance_;
class MultiCollectorResponse;
class MultiCollectorResponseDefaultTypeInternal;
extern MultiCollectorResponseDefaultTypeInternal _MultiCollectorResponse_default_instance_;
class MultiConceptCountResponse;
class MultiConceptCountResponseDefaultTypeInternal;
extern MultiConceptCountResponseDefaultTypeInternal _MultiConceptCountResponse_default_instance_;
class MultiConceptLanguageResponse;
class MultiConceptLanguageResponseDefaultTypeInternal;
extern MultiConceptLanguageResponseDefaultTypeInternal _MultiConceptLanguageResponse_default_instance_;
class MultiConceptMappingJobResponse;
class MultiConceptMappingJobResponseDefaultTypeInternal;
extern MultiConceptMappingJobResponseDefaultTypeInternal _MultiConceptMappingJobResponse_default_instance_;
class MultiConceptMappingResponse;
class MultiConceptMappingResponseDefaultTypeInternal;
extern MultiConceptMappingResponseDefaultTypeInternal _MultiConceptMappingResponse_default_instance_;
class MultiConceptReferenceResponse;
class MultiConceptReferenceResponseDefaultTypeInternal;
extern MultiConceptReferenceResponseDefaultTypeInternal _MultiConceptReferenceResponse_default_instance_;
class MultiConceptRelationResponse;
class MultiConceptRelationResponseDefaultTypeInternal;
extern MultiConceptRelationResponseDefaultTypeInternal _MultiConceptRelationResponse_default_instance_;
class MultiConceptResponse;
class MultiConceptResponseDefaultTypeInternal;
extern MultiConceptResponseDefaultTypeInternal _MultiConceptResponse_default_instance_;
class MultiInputResponse;
class MultiInputResponseDefaultTypeInternal;
extern MultiInputResponseDefaultTypeInternal _MultiInputResponse_default_instance_;
class MultiKeyResponse;
class MultiKeyResponseDefaultTypeInternal;
extern MultiKeyResponseDefaultTypeInternal _MultiKeyResponse_default_instance_;
class MultiKnowledgeGraphResponse;
class MultiKnowledgeGraphResponseDefaultTypeInternal;
extern MultiKnowledgeGraphResponseDefaultTypeInternal _MultiKnowledgeGraphResponse_default_instance_;
class MultiModelResponse;
class MultiModelResponseDefaultTypeInternal;
extern MultiModelResponseDefaultTypeInternal _MultiModelResponse_default_instance_;
class MultiModelVersionResponse;
class MultiModelVersionResponseDefaultTypeInternal;
extern MultiModelVersionResponseDefaultTypeInternal _MultiModelVersionResponse_default_instance_;
class MultiOutputResponse;
class MultiOutputResponseDefaultTypeInternal;
extern MultiOutputResponseDefaultTypeInternal _MultiOutputResponse_default_instance_;
class MultiScopeDepsResponse;
class MultiScopeDepsResponseDefaultTypeInternal;
extern MultiScopeDepsResponseDefaultTypeInternal _MultiScopeDepsResponse_default_instance_;
class MultiScopeResponse;
class MultiScopeResponseDefaultTypeInternal;
extern MultiScopeResponseDefaultTypeInternal _MultiScopeResponse_default_instance_;
class MultiSearchResponse;
class MultiSearchResponseDefaultTypeInternal;
extern MultiSearchResponseDefaultTypeInternal _MultiSearchResponse_default_instance_;
class MultiStatValueAggregateResponse;
class MultiStatValueAggregateResponseDefaultTypeInternal;
extern MultiStatValueAggregateResponseDefaultTypeInternal _MultiStatValueAggregateResponse_default_instance_;
class MultiStatValueResponse;
class MultiStatValueResponseDefaultTypeInternal;
extern MultiStatValueResponseDefaultTypeInternal _MultiStatValueResponse_default_instance_;
class MultiStatusCodeResponse;
class MultiStatusCodeResponseDefaultTypeInternal;
extern MultiStatusCodeResponseDefaultTypeInternal _MultiStatusCodeResponse_default_instance_;
class MultiTaskResponse;
class MultiTaskResponseDefaultTypeInternal;
extern MultiTaskResponseDefaultTypeInternal _MultiTaskResponse_default_instance_;
class MultiTrainingTemplatesResponse;
class MultiTrainingTemplatesResponseDefaultTypeInternal;
extern MultiTrainingTemplatesResponseDefaultTypeInternal _MultiTrainingTemplatesResponse_default_instance_;
class MultiUserResponse;
class MultiUserResponseDefaultTypeInternal;
extern MultiUserResponseDefaultTypeInternal _MultiUserResponse_default_instance_;
class MultiVocabResponse;
class MultiVocabResponseDefaultTypeInternal;
extern MultiVocabResponseDefaultTypeInternal _MultiVocabResponse_default_instance_;
class MultiWorkflowResponse;
class MultiWorkflowResponseDefaultTypeInternal;
extern MultiWorkflowResponseDefaultTypeInternal _MultiWorkflowResponse_default_instance_;
class MultipleCreditCardResponse;
class MultipleCreditCardResponseDefaultTypeInternal;
extern MultipleCreditCardResponseDefaultTypeInternal _MultipleCreditCardResponse_default_instance_;
class MultipleEmailResponse;
class MultipleEmailResponseDefaultTypeInternal;
extern MultipleEmailResponseDefaultTypeInternal _MultipleEmailResponse_default_instance_;
class MultipleLicensesResponse;
class MultipleLicensesResponseDefaultTypeInternal;
extern MultipleLicensesResponseDefaultTypeInternal _MultipleLicensesResponse_default_instance_;
class MultiplePasswordPoliciesResponse;
class MultiplePasswordPoliciesResponseDefaultTypeInternal;
extern MultiplePasswordPoliciesResponseDefaultTypeInternal _MultiplePasswordPoliciesResponse_default_instance_;
class MyScopesRequest;
class MyScopesRequestDefaultTypeInternal;
extern MyScopesRequestDefaultTypeInternal _MyScopesRequest_default_instance_;
class Pagination;
class PaginationDefaultTypeInternal;
extern PaginationDefaultTypeInternal _Pagination_default_instance_;
class PatchAnnotationsRequest;
class PatchAnnotationsRequestDefaultTypeInternal;
extern PatchAnnotationsRequestDefaultTypeInternal _PatchAnnotationsRequest_default_instance_;
class PatchAppsRequest;
class PatchAppsRequestDefaultTypeInternal;
extern PatchAppsRequestDefaultTypeInternal _PatchAppsRequest_default_instance_;
class PatchCollaboratorsRequest;
class PatchCollaboratorsRequestDefaultTypeInternal;
extern PatchCollaboratorsRequestDefaultTypeInternal _PatchCollaboratorsRequest_default_instance_;
class PatchCollectorsRequest;
class PatchCollectorsRequestDefaultTypeInternal;
extern PatchCollectorsRequestDefaultTypeInternal _PatchCollectorsRequest_default_instance_;
class PatchConceptLanguagesRequest;
class PatchConceptLanguagesRequestDefaultTypeInternal;
extern PatchConceptLanguagesRequestDefaultTypeInternal _PatchConceptLanguagesRequest_default_instance_;
class PatchConceptsRequest;
class PatchConceptsRequestDefaultTypeInternal;
extern PatchConceptsRequestDefaultTypeInternal _PatchConceptsRequest_default_instance_;
class PatchCreditCardsRequest;
class PatchCreditCardsRequestDefaultTypeInternal;
extern PatchCreditCardsRequestDefaultTypeInternal _PatchCreditCardsRequest_default_instance_;
class PatchInputsRequest;
class PatchInputsRequestDefaultTypeInternal;
extern PatchInputsRequestDefaultTypeInternal _PatchInputsRequest_default_instance_;
class PatchKeysRequest;
class PatchKeysRequestDefaultTypeInternal;
extern PatchKeysRequestDefaultTypeInternal _PatchKeysRequest_default_instance_;
class PatchModelsRequest;
class PatchModelsRequestDefaultTypeInternal;
extern PatchModelsRequestDefaultTypeInternal _PatchModelsRequest_default_instance_;
class PatchPasswordPoliciesRequest;
class PatchPasswordPoliciesRequestDefaultTypeInternal;
extern PatchPasswordPoliciesRequestDefaultTypeInternal _PatchPasswordPoliciesRequest_default_instance_;
class PatchTasksRequest;
class PatchTasksRequestDefaultTypeInternal;
extern PatchTasksRequestDefaultTypeInternal _PatchTasksRequest_default_instance_;
class PatchUserRequest;
class PatchUserRequestDefaultTypeInternal;
extern PatchUserRequestDefaultTypeInternal _PatchUserRequest_default_instance_;
class PatchVocabsRequest;
class PatchVocabsRequestDefaultTypeInternal;
extern PatchVocabsRequestDefaultTypeInternal _PatchVocabsRequest_default_instance_;
class PatchWorkflowsRequest;
class PatchWorkflowsRequestDefaultTypeInternal;
extern PatchWorkflowsRequestDefaultTypeInternal _PatchWorkflowsRequest_default_instance_;
class PostAnnotationSearchMetricsRequest;
class PostAnnotationSearchMetricsRequestDefaultTypeInternal;
extern PostAnnotationSearchMetricsRequestDefaultTypeInternal _PostAnnotationSearchMetricsRequest_default_instance_;
class PostAnnotationsRequest;
class PostAnnotationsRequestDefaultTypeInternal;
extern PostAnnotationsRequestDefaultTypeInternal _PostAnnotationsRequest_default_instance_;
class PostAnnotationsSearchesRequest;
class PostAnnotationsSearchesRequestDefaultTypeInternal;
extern PostAnnotationsSearchesRequestDefaultTypeInternal _PostAnnotationsSearchesRequest_default_instance_;
class PostAppDuplicationsRequest;
class PostAppDuplicationsRequestDefaultTypeInternal;
extern PostAppDuplicationsRequestDefaultTypeInternal _PostAppDuplicationsRequest_default_instance_;
class PostAppsRequest;
class PostAppsRequestDefaultTypeInternal;
extern PostAppsRequestDefaultTypeInternal _PostAppsRequest_default_instance_;
class PostAttributeSearchRequest;
class PostAttributeSearchRequestDefaultTypeInternal;
extern PostAttributeSearchRequestDefaultTypeInternal _PostAttributeSearchRequest_default_instance_;
class PostClustersSearchesRequest;
class PostClustersSearchesRequestDefaultTypeInternal;
extern PostClustersSearchesRequestDefaultTypeInternal _PostClustersSearchesRequest_default_instance_;
class PostCollaboratorsRequest;
class PostCollaboratorsRequestDefaultTypeInternal;
extern PostCollaboratorsRequestDefaultTypeInternal _PostCollaboratorsRequest_default_instance_;
class PostCollectorsRequest;
class PostCollectorsRequestDefaultTypeInternal;
extern PostCollectorsRequestDefaultTypeInternal _PostCollectorsRequest_default_instance_;
class PostConceptLanguagesRequest;
class PostConceptLanguagesRequestDefaultTypeInternal;
extern PostConceptLanguagesRequestDefaultTypeInternal _PostConceptLanguagesRequest_default_instance_;
class PostConceptMappingJobsRequest;
class PostConceptMappingJobsRequestDefaultTypeInternal;
extern PostConceptMappingJobsRequestDefaultTypeInternal _PostConceptMappingJobsRequest_default_instance_;
class PostConceptMappingsRequest;
class PostConceptMappingsRequestDefaultTypeInternal;
extern PostConceptMappingsRequestDefaultTypeInternal _PostConceptMappingsRequest_default_instance_;
class PostConceptRelationsRequest;
class PostConceptRelationsRequestDefaultTypeInternal;
extern PostConceptRelationsRequestDefaultTypeInternal _PostConceptRelationsRequest_default_instance_;
class PostConceptsRequest;
class PostConceptsRequestDefaultTypeInternal;
extern PostConceptsRequestDefaultTypeInternal _PostConceptsRequest_default_instance_;
class PostConceptsSearchesRequest;
class PostConceptsSearchesRequestDefaultTypeInternal;
extern PostConceptsSearchesRequestDefaultTypeInternal _PostConceptsSearchesRequest_default_instance_;
class PostCreditCardRequest;
class PostCreditCardRequestDefaultTypeInternal;
extern PostCreditCardRequestDefaultTypeInternal _PostCreditCardRequest_default_instance_;
class PostEmailsRequest;
class PostEmailsRequestDefaultTypeInternal;
extern PostEmailsRequestDefaultTypeInternal _PostEmailsRequest_default_instance_;
class PostHistoricalUsageRequest;
class PostHistoricalUsageRequestDefaultTypeInternal;
extern PostHistoricalUsageRequestDefaultTypeInternal _PostHistoricalUsageRequest_default_instance_;
class PostHistoricalUsageResponse;
class PostHistoricalUsageResponseDefaultTypeInternal;
extern PostHistoricalUsageResponseDefaultTypeInternal _PostHistoricalUsageResponse_default_instance_;
class PostInputsFileRequest;
class PostInputsFileRequestDefaultTypeInternal;
extern PostInputsFileRequestDefaultTypeInternal _PostInputsFileRequest_default_instance_;
class PostInputsNiFiRequest;
class PostInputsNiFiRequestDefaultTypeInternal;
extern PostInputsNiFiRequestDefaultTypeInternal _PostInputsNiFiRequest_default_instance_;
class PostInputsRequest;
class PostInputsRequestDefaultTypeInternal;
extern PostInputsRequestDefaultTypeInternal _PostInputsRequest_default_instance_;
class PostInputsSearchesRequest;
class PostInputsSearchesRequestDefaultTypeInternal;
extern PostInputsSearchesRequestDefaultTypeInternal _PostInputsSearchesRequest_default_instance_;
class PostKeysRequest;
class PostKeysRequestDefaultTypeInternal;
extern PostKeysRequestDefaultTypeInternal _PostKeysRequest_default_instance_;
class PostKnowledgeGraphsRequest;
class PostKnowledgeGraphsRequestDefaultTypeInternal;
extern PostKnowledgeGraphsRequestDefaultTypeInternal _PostKnowledgeGraphsRequest_default_instance_;
class PostLoginRequest;
class PostLoginRequestDefaultTypeInternal;
extern PostLoginRequestDefaultTypeInternal _PostLoginRequest_default_instance_;
class PostModelOutputsRequest;
class PostModelOutputsRequestDefaultTypeInternal;
extern PostModelOutputsRequestDefaultTypeInternal _PostModelOutputsRequest_default_instance_;
class PostModelVersionMetricsRequest;
class PostModelVersionMetricsRequestDefaultTypeInternal;
extern PostModelVersionMetricsRequestDefaultTypeInternal _PostModelVersionMetricsRequest_default_instance_;
class PostModelVersionsDeploymentRequest;
class PostModelVersionsDeploymentRequestDefaultTypeInternal;
extern PostModelVersionsDeploymentRequestDefaultTypeInternal _PostModelVersionsDeploymentRequest_default_instance_;
class PostModelVersionsRequest;
class PostModelVersionsRequestDefaultTypeInternal;
extern PostModelVersionsRequestDefaultTypeInternal _PostModelVersionsRequest_default_instance_;
class PostModelsRequest;
class PostModelsRequestDefaultTypeInternal;
extern PostModelsRequestDefaultTypeInternal _PostModelsRequest_default_instance_;
class PostModelsSearchesRequest;
class PostModelsSearchesRequestDefaultTypeInternal;
extern PostModelsSearchesRequestDefaultTypeInternal _PostModelsSearchesRequest_default_instance_;
class PostPasswordPoliciesRequest;
class PostPasswordPoliciesRequestDefaultTypeInternal;
extern PostPasswordPoliciesRequestDefaultTypeInternal _PostPasswordPoliciesRequest_default_instance_;
class PostPrimaryEmailRequest;
class PostPrimaryEmailRequestDefaultTypeInternal;
extern PostPrimaryEmailRequestDefaultTypeInternal _PostPrimaryEmailRequest_default_instance_;
class PostResendVerifyRequest;
class PostResendVerifyRequestDefaultTypeInternal;
extern PostResendVerifyRequestDefaultTypeInternal _PostResendVerifyRequest_default_instance_;
class PostSearchesByIDRequest;
class PostSearchesByIDRequestDefaultTypeInternal;
extern PostSearchesByIDRequestDefaultTypeInternal _PostSearchesByIDRequest_default_instance_;
class PostSearchesRequest;
class PostSearchesRequestDefaultTypeInternal;
extern PostSearchesRequestDefaultTypeInternal _PostSearchesRequest_default_instance_;
class PostSignupRequest;
class PostSignupRequestDefaultTypeInternal;
extern PostSignupRequestDefaultTypeInternal _PostSignupRequest_default_instance_;
class PostStatValuesAggregateRequest;
class PostStatValuesAggregateRequestDefaultTypeInternal;
extern PostStatValuesAggregateRequestDefaultTypeInternal _PostStatValuesAggregateRequest_default_instance_;
class PostStatValuesRequest;
class PostStatValuesRequestDefaultTypeInternal;
extern PostStatValuesRequestDefaultTypeInternal _PostStatValuesRequest_default_instance_;
class PostSubscriptionRequest;
class PostSubscriptionRequestDefaultTypeInternal;
extern PostSubscriptionRequestDefaultTypeInternal _PostSubscriptionRequest_default_instance_;
class PostTasksRequest;
class PostTasksRequestDefaultTypeInternal;
extern PostTasksRequestDefaultTypeInternal _PostTasksRequest_default_instance_;
class PostUsageRequest;
class PostUsageRequestDefaultTypeInternal;
extern PostUsageRequestDefaultTypeInternal _PostUsageRequest_default_instance_;
class PostUsageResponse;
class PostUsageResponseDefaultTypeInternal;
extern PostUsageResponseDefaultTypeInternal _PostUsageResponse_default_instance_;
class PostUserConsentRequest;
class PostUserConsentRequestDefaultTypeInternal;
extern PostUserConsentRequestDefaultTypeInternal _PostUserConsentRequest_default_instance_;
class PostValidatePasswordRequest;
class PostValidatePasswordRequestDefaultTypeInternal;
extern PostValidatePasswordRequestDefaultTypeInternal _PostValidatePasswordRequest_default_instance_;
class PostVerifyEmailRequest;
class PostVerifyEmailRequestDefaultTypeInternal;
extern PostVerifyEmailRequestDefaultTypeInternal _PostVerifyEmailRequest_default_instance_;
class PostVocabConceptsRequest;
class PostVocabConceptsRequestDefaultTypeInternal;
extern PostVocabConceptsRequestDefaultTypeInternal _PostVocabConceptsRequest_default_instance_;
class PostVocabsRequest;
class PostVocabsRequestDefaultTypeInternal;
extern PostVocabsRequestDefaultTypeInternal _PostVocabsRequest_default_instance_;
class PostWorkflowResultsRequest;
class PostWorkflowResultsRequestDefaultTypeInternal;
extern PostWorkflowResultsRequestDefaultTypeInternal _PostWorkflowResultsRequest_default_instance_;
class PostWorkflowResultsResponse;
class PostWorkflowResultsResponseDefaultTypeInternal;
extern PostWorkflowResultsResponseDefaultTypeInternal _PostWorkflowResultsResponse_default_instance_;
class PostWorkflowResultsSimilarityRequest;
class PostWorkflowResultsSimilarityRequestDefaultTypeInternal;
extern PostWorkflowResultsSimilarityRequestDefaultTypeInternal _PostWorkflowResultsSimilarityRequest_default_instance_;
class PostWorkflowResultsSimilarityResponse;
class PostWorkflowResultsSimilarityResponseDefaultTypeInternal;
extern PostWorkflowResultsSimilarityResponseDefaultTypeInternal _PostWorkflowResultsSimilarityResponse_default_instance_;
class PostWorkflowsRequest;
class PostWorkflowsRequestDefaultTypeInternal;
extern PostWorkflowsRequestDefaultTypeInternal _PostWorkflowsRequest_default_instance_;
class RequestResetPasswordRequest;
class RequestResetPasswordRequestDefaultTypeInternal;
extern RequestResetPasswordRequestDefaultTypeInternal _RequestResetPasswordRequest_default_instance_;
class SingleAnnotationResponse;
class SingleAnnotationResponseDefaultTypeInternal;
extern SingleAnnotationResponseDefaultTypeInternal _SingleAnnotationResponse_default_instance_;
class SingleAppDuplicationResponse;
class SingleAppDuplicationResponseDefaultTypeInternal;
extern SingleAppDuplicationResponseDefaultTypeInternal _SingleAppDuplicationResponse_default_instance_;
class SingleAppResponse;
class SingleAppResponseDefaultTypeInternal;
extern SingleAppResponseDefaultTypeInternal _SingleAppResponse_default_instance_;
class SingleCollectorResponse;
class SingleCollectorResponseDefaultTypeInternal;
extern SingleCollectorResponseDefaultTypeInternal _SingleCollectorResponse_default_instance_;
class SingleConceptLanguageResponse;
class SingleConceptLanguageResponseDefaultTypeInternal;
extern SingleConceptLanguageResponseDefaultTypeInternal _SingleConceptLanguageResponse_default_instance_;
class SingleConceptMappingJobResponse;
class SingleConceptMappingJobResponseDefaultTypeInternal;
extern SingleConceptMappingJobResponseDefaultTypeInternal _SingleConceptMappingJobResponse_default_instance_;
class SingleConceptMappingResponse;
class SingleConceptMappingResponseDefaultTypeInternal;
extern SingleConceptMappingResponseDefaultTypeInternal _SingleConceptMappingResponse_default_instance_;
class SingleConceptReferenceResponse;
class SingleConceptReferenceResponseDefaultTypeInternal;
extern SingleConceptReferenceResponseDefaultTypeInternal _SingleConceptReferenceResponse_default_instance_;
class SingleConceptRelationResponse;
class SingleConceptRelationResponseDefaultTypeInternal;
extern SingleConceptRelationResponseDefaultTypeInternal _SingleConceptRelationResponse_default_instance_;
class SingleConceptResponse;
class SingleConceptResponseDefaultTypeInternal;
extern SingleConceptResponseDefaultTypeInternal _SingleConceptResponse_default_instance_;
class SingleCreditCardResponse;
class SingleCreditCardResponseDefaultTypeInternal;
extern SingleCreditCardResponseDefaultTypeInternal _SingleCreditCardResponse_default_instance_;
class SingleEmailResponse;
class SingleEmailResponseDefaultTypeInternal;
extern SingleEmailResponseDefaultTypeInternal _SingleEmailResponse_default_instance_;
class SingleInputCountResponse;
class SingleInputCountResponseDefaultTypeInternal;
extern SingleInputCountResponseDefaultTypeInternal _SingleInputCountResponse_default_instance_;
class SingleInputResponse;
class SingleInputResponseDefaultTypeInternal;
extern SingleInputResponseDefaultTypeInternal _SingleInputResponse_default_instance_;
class SingleKeyResponse;
class SingleKeyResponseDefaultTypeInternal;
extern SingleKeyResponseDefaultTypeInternal _SingleKeyResponse_default_instance_;
class SingleKnowledgeGraphResponse;
class SingleKnowledgeGraphResponseDefaultTypeInternal;
extern SingleKnowledgeGraphResponseDefaultTypeInternal _SingleKnowledgeGraphResponse_default_instance_;
class SingleLicenseResponse;
class SingleLicenseResponseDefaultTypeInternal;
extern SingleLicenseResponseDefaultTypeInternal _SingleLicenseResponse_default_instance_;
class SingleLoginResponse;
class SingleLoginResponseDefaultTypeInternal;
extern SingleLoginResponseDefaultTypeInternal _SingleLoginResponse_default_instance_;
class SingleModelResponse;
class SingleModelResponseDefaultTypeInternal;
extern SingleModelResponseDefaultTypeInternal _SingleModelResponse_default_instance_;
class SingleModelVersionResponse;
class SingleModelVersionResponseDefaultTypeInternal;
extern SingleModelVersionResponseDefaultTypeInternal _SingleModelVersionResponse_default_instance_;
class SinglePasswordValidationResponse;
class SinglePasswordValidationResponseDefaultTypeInternal;
extern SinglePasswordValidationResponseDefaultTypeInternal _SinglePasswordValidationResponse_default_instance_;
class SingleResendVerifyResponse;
class SingleResendVerifyResponseDefaultTypeInternal;
extern SingleResendVerifyResponseDefaultTypeInternal _SingleResendVerifyResponse_default_instance_;
class SingleSearchResponse;
class SingleSearchResponseDefaultTypeInternal;
extern SingleSearchResponseDefaultTypeInternal _SingleSearchResponse_default_instance_;
class SingleStatusCodeResponse;
class SingleStatusCodeResponseDefaultTypeInternal;
extern SingleStatusCodeResponseDefaultTypeInternal _SingleStatusCodeResponse_default_instance_;
class SingleSubscriptionResponse;
class SingleSubscriptionResponseDefaultTypeInternal;
extern SingleSubscriptionResponseDefaultTypeInternal _SingleSubscriptionResponse_default_instance_;
class SingleTaskResponse;
class SingleTaskResponseDefaultTypeInternal;
extern SingleTaskResponseDefaultTypeInternal _SingleTaskResponse_default_instance_;
class SingleUserResponse;
class SingleUserResponseDefaultTypeInternal;
extern SingleUserResponseDefaultTypeInternal _SingleUserResponse_default_instance_;
class SingleVerifyEmailResponse;
class SingleVerifyEmailResponseDefaultTypeInternal;
extern SingleVerifyEmailResponseDefaultTypeInternal _SingleVerifyEmailResponse_default_instance_;
class SingleVocabResponse;
class SingleVocabResponseDefaultTypeInternal;
extern SingleVocabResponseDefaultTypeInternal _SingleVocabResponse_default_instance_;
class SingleWorkflowResponse;
class SingleWorkflowResponseDefaultTypeInternal;
extern SingleWorkflowResponseDefaultTypeInternal _SingleWorkflowResponse_default_instance_;
class StreamInputsRequest;
class StreamInputsRequestDefaultTypeInternal;
extern StreamInputsRequestDefaultTypeInternal _StreamInputsRequest_default_instance_;
class TestMessage;
class TestMessageDefaultTypeInternal;
extern TestMessageDefaultTypeInternal _TestMessage_default_instance_;
class TrainingTemplate;
class TrainingTemplateDefaultTypeInternal;
extern TrainingTemplateDefaultTypeInternal _TrainingTemplate_default_instance_;
class ValidateLicenseRequest;
class ValidateLicenseRequestDefaultTypeInternal;
extern ValidateLicenseRequestDefaultTypeInternal _ValidateLicenseRequest_default_instance_;
class ValidateLicenseResponse;
class ValidateLicenseResponseDefaultTypeInternal;
extern ValidateLicenseResponseDefaultTypeInternal _ValidateLicenseResponse_default_instance_;
}  // namespace api
}  // namespace clarifai
PROTOBUF_NAMESPACE_OPEN
template<> ::clarifai::api::CompleteResetPasswordRequest* Arena::CreateMaybeMessage<::clarifai::api::CompleteResetPasswordRequest>(Arena*);
template<> ::clarifai::api::DeleteAnnotationRequest* Arena::CreateMaybeMessage<::clarifai::api::DeleteAnnotationRequest>(Arena*);
template<> ::clarifai::api::DeleteAnnotationsRequest* Arena::CreateMaybeMessage<::clarifai::api::DeleteAnnotationsRequest>(Arena*);
template<> ::clarifai::api::DeleteAppRequest* Arena::CreateMaybeMessage<::clarifai::api::DeleteAppRequest>(Arena*);
template<> ::clarifai::api::DeleteCollaboratorsRequest* Arena::CreateMaybeMessage<::clarifai::api::DeleteCollaboratorsRequest>(Arena*);
template<> ::clarifai::api::DeleteCollectorsRequest* Arena::CreateMaybeMessage<::clarifai::api::DeleteCollectorsRequest>(Arena*);
template<> ::clarifai::api::DeleteConceptRelationsRequest* Arena::CreateMaybeMessage<::clarifai::api::DeleteConceptRelationsRequest>(Arena*);
template<> ::clarifai::api::DeleteCreditCardRequest* Arena::CreateMaybeMessage<::clarifai::api::DeleteCreditCardRequest>(Arena*);
template<> ::clarifai::api::DeleteEmailRequest* Arena::CreateMaybeMessage<::clarifai::api::DeleteEmailRequest>(Arena*);
template<> ::clarifai::api::DeleteInputRequest* Arena::CreateMaybeMessage<::clarifai::api::DeleteInputRequest>(Arena*);
template<> ::clarifai::api::DeleteInputsRequest* Arena::CreateMaybeMessage<::clarifai::api::DeleteInputsRequest>(Arena*);
template<> ::clarifai::api::DeleteKeyRequest* Arena::CreateMaybeMessage<::clarifai::api::DeleteKeyRequest>(Arena*);
template<> ::clarifai::api::DeleteModelRequest* Arena::CreateMaybeMessage<::clarifai::api::DeleteModelRequest>(Arena*);
template<> ::clarifai::api::DeleteModelVersionRequest* Arena::CreateMaybeMessage<::clarifai::api::DeleteModelVersionRequest>(Arena*);
template<> ::clarifai::api::DeleteModelVersionsDeploymentRequest* Arena::CreateMaybeMessage<::clarifai::api::DeleteModelVersionsDeploymentRequest>(Arena*);
template<> ::clarifai::api::DeleteModelsRequest* Arena::CreateMaybeMessage<::clarifai::api::DeleteModelsRequest>(Arena*);
template<> ::clarifai::api::DeletePasswordPoliciesRequest* Arena::CreateMaybeMessage<::clarifai::api::DeletePasswordPoliciesRequest>(Arena*);
template<> ::clarifai::api::DeleteSearchRequest* Arena::CreateMaybeMessage<::clarifai::api::DeleteSearchRequest>(Arena*);
template<> ::clarifai::api::DeleteTasksRequest* Arena::CreateMaybeMessage<::clarifai::api::DeleteTasksRequest>(Arena*);
template<> ::clarifai::api::DeleteVocabConceptRequest* Arena::CreateMaybeMessage<::clarifai::api::DeleteVocabConceptRequest>(Arena*);
template<> ::clarifai::api::DeleteVocabConceptsRequest* Arena::CreateMaybeMessage<::clarifai::api::DeleteVocabConceptsRequest>(Arena*);
template<> ::clarifai::api::DeleteVocabRequest* Arena::CreateMaybeMessage<::clarifai::api::DeleteVocabRequest>(Arena*);
template<> ::clarifai::api::DeleteVocabsRequest* Arena::CreateMaybeMessage<::clarifai::api::DeleteVocabsRequest>(Arena*);
template<> ::clarifai::api::DeleteWorkflowRequest* Arena::CreateMaybeMessage<::clarifai::api::DeleteWorkflowRequest>(Arena*);
template<> ::clarifai::api::DeleteWorkflowsRequest* Arena::CreateMaybeMessage<::clarifai::api::DeleteWorkflowsRequest>(Arena*);
template<> ::clarifai::api::FetchLicenseRequest* Arena::CreateMaybeMessage<::clarifai::api::FetchLicenseRequest>(Arena*);
template<> ::clarifai::api::FetchLicenseResponse* Arena::CreateMaybeMessage<::clarifai::api::FetchLicenseResponse>(Arena*);
template<> ::clarifai::api::GetAnnotationRequest* Arena::CreateMaybeMessage<::clarifai::api::GetAnnotationRequest>(Arena*);
template<> ::clarifai::api::GetAnnotationSearchMetricsRequest* Arena::CreateMaybeMessage<::clarifai::api::GetAnnotationSearchMetricsRequest>(Arena*);
template<> ::clarifai::api::GetAppDuplicationRequest* Arena::CreateMaybeMessage<::clarifai::api::GetAppDuplicationRequest>(Arena*);
template<> ::clarifai::api::GetAppRequest* Arena::CreateMaybeMessage<::clarifai::api::GetAppRequest>(Arena*);
template<> ::clarifai::api::GetBillingUsageRequest* Arena::CreateMaybeMessage<::clarifai::api::GetBillingUsageRequest>(Arena*);
template<> ::clarifai::api::GetBillingUsageResponse* Arena::CreateMaybeMessage<::clarifai::api::GetBillingUsageResponse>(Arena*);
template<> ::clarifai::api::GetCollectorRequest* Arena::CreateMaybeMessage<::clarifai::api::GetCollectorRequest>(Arena*);
template<> ::clarifai::api::GetConceptCountsRequest* Arena::CreateMaybeMessage<::clarifai::api::GetConceptCountsRequest>(Arena*);
template<> ::clarifai::api::GetConceptLanguageRequest* Arena::CreateMaybeMessage<::clarifai::api::GetConceptLanguageRequest>(Arena*);
template<> ::clarifai::api::GetConceptRequest* Arena::CreateMaybeMessage<::clarifai::api::GetConceptRequest>(Arena*);
template<> ::clarifai::api::GetHealthzRequest* Arena::CreateMaybeMessage<::clarifai::api::GetHealthzRequest>(Arena*);
template<> ::clarifai::api::GetHealthzResponse* Arena::CreateMaybeMessage<::clarifai::api::GetHealthzResponse>(Arena*);
template<> ::clarifai::api::GetInputCountRequest* Arena::CreateMaybeMessage<::clarifai::api::GetInputCountRequest>(Arena*);
template<> ::clarifai::api::GetInputRequest* Arena::CreateMaybeMessage<::clarifai::api::GetInputRequest>(Arena*);
template<> ::clarifai::api::GetKeyRequest* Arena::CreateMaybeMessage<::clarifai::api::GetKeyRequest>(Arena*);
template<> ::clarifai::api::GetLicenseRequest* Arena::CreateMaybeMessage<::clarifai::api::GetLicenseRequest>(Arena*);
template<> ::clarifai::api::GetModelOutputInfoRequest* Arena::CreateMaybeMessage<::clarifai::api::GetModelOutputInfoRequest>(Arena*);
template<> ::clarifai::api::GetModelRequest* Arena::CreateMaybeMessage<::clarifai::api::GetModelRequest>(Arena*);
template<> ::clarifai::api::GetModelVersionMetricsRequest* Arena::CreateMaybeMessage<::clarifai::api::GetModelVersionMetricsRequest>(Arena*);
template<> ::clarifai::api::GetModelVersionRequest* Arena::CreateMaybeMessage<::clarifai::api::GetModelVersionRequest>(Arena*);
template<> ::clarifai::api::GetRealtimeUsageRequest* Arena::CreateMaybeMessage<::clarifai::api::GetRealtimeUsageRequest>(Arena*);
template<> ::clarifai::api::GetRealtimeUsageResponse* Arena::CreateMaybeMessage<::clarifai::api::GetRealtimeUsageResponse>(Arena*);
template<> ::clarifai::api::GetSearchRequest* Arena::CreateMaybeMessage<::clarifai::api::GetSearchRequest>(Arena*);
template<> ::clarifai::api::GetStatusCodeRequest* Arena::CreateMaybeMessage<::clarifai::api::GetStatusCodeRequest>(Arena*);
template<> ::clarifai::api::GetSubscriptionRequest* Arena::CreateMaybeMessage<::clarifai::api::GetSubscriptionRequest>(Arena*);
template<> ::clarifai::api::GetTaskRequest* Arena::CreateMaybeMessage<::clarifai::api::GetTaskRequest>(Arena*);
template<> ::clarifai::api::GetUserRequest* Arena::CreateMaybeMessage<::clarifai::api::GetUserRequest>(Arena*);
template<> ::clarifai::api::GetVocabRequest* Arena::CreateMaybeMessage<::clarifai::api::GetVocabRequest>(Arena*);
template<> ::clarifai::api::GetWorkflowRequest* Arena::CreateMaybeMessage<::clarifai::api::GetWorkflowRequest>(Arena*);
template<> ::clarifai::api::ListAnnotationSearchMetricsRequest* Arena::CreateMaybeMessage<::clarifai::api::ListAnnotationSearchMetricsRequest>(Arena*);
template<> ::clarifai::api::ListAnnotationsForClusterRequest* Arena::CreateMaybeMessage<::clarifai::api::ListAnnotationsForClusterRequest>(Arena*);
template<> ::clarifai::api::ListAnnotationsRequest* Arena::CreateMaybeMessage<::clarifai::api::ListAnnotationsRequest>(Arena*);
template<> ::clarifai::api::ListAppDuplicationsRequest* Arena::CreateMaybeMessage<::clarifai::api::ListAppDuplicationsRequest>(Arena*);
template<> ::clarifai::api::ListAppKeysRequest* Arena::CreateMaybeMessage<::clarifai::api::ListAppKeysRequest>(Arena*);
template<> ::clarifai::api::ListAppsRequest* Arena::CreateMaybeMessage<::clarifai::api::ListAppsRequest>(Arena*);
template<> ::clarifai::api::ListAuthMethodsRequest* Arena::CreateMaybeMessage<::clarifai::api::ListAuthMethodsRequest>(Arena*);
template<> ::clarifai::api::ListAuthMethodsResponse* Arena::CreateMaybeMessage<::clarifai::api::ListAuthMethodsResponse>(Arena*);
template<> ::clarifai::api::ListClustersRequest* Arena::CreateMaybeMessage<::clarifai::api::ListClustersRequest>(Arena*);
template<> ::clarifai::api::ListCollaborationsRequest* Arena::CreateMaybeMessage<::clarifai::api::ListCollaborationsRequest>(Arena*);
template<> ::clarifai::api::ListCollaboratorsRequest* Arena::CreateMaybeMessage<::clarifai::api::ListCollaboratorsRequest>(Arena*);
template<> ::clarifai::api::ListCollectorsRequest* Arena::CreateMaybeMessage<::clarifai::api::ListCollectorsRequest>(Arena*);
template<> ::clarifai::api::ListConceptLanguagesRequest* Arena::CreateMaybeMessage<::clarifai::api::ListConceptLanguagesRequest>(Arena*);
template<> ::clarifai::api::ListConceptMappingsRequest* Arena::CreateMaybeMessage<::clarifai::api::ListConceptMappingsRequest>(Arena*);
template<> ::clarifai::api::ListConceptReferencesRequest* Arena::CreateMaybeMessage<::clarifai::api::ListConceptReferencesRequest>(Arena*);
template<> ::clarifai::api::ListConceptRelationsRequest* Arena::CreateMaybeMessage<::clarifai::api::ListConceptRelationsRequest>(Arena*);
template<> ::clarifai::api::ListConceptsRequest* Arena::CreateMaybeMessage<::clarifai::api::ListConceptsRequest>(Arena*);
template<> ::clarifai::api::ListCreditCardsRequest* Arena::CreateMaybeMessage<::clarifai::api::ListCreditCardsRequest>(Arena*);
template<> ::clarifai::api::ListEmailsRequest* Arena::CreateMaybeMessage<::clarifai::api::ListEmailsRequest>(Arena*);
template<> ::clarifai::api::ListInputsRequest* Arena::CreateMaybeMessage<::clarifai::api::ListInputsRequest>(Arena*);
template<> ::clarifai::api::ListKeysRequest* Arena::CreateMaybeMessage<::clarifai::api::ListKeysRequest>(Arena*);
template<> ::clarifai::api::ListKnowledgeGraphsRequest* Arena::CreateMaybeMessage<::clarifai::api::ListKnowledgeGraphsRequest>(Arena*);
template<> ::clarifai::api::ListLicensesRequest* Arena::CreateMaybeMessage<::clarifai::api::ListLicensesRequest>(Arena*);
template<> ::clarifai::api::ListModelInputsRequest* Arena::CreateMaybeMessage<::clarifai::api::ListModelInputsRequest>(Arena*);
template<> ::clarifai::api::ListModelVersionsRequest* Arena::CreateMaybeMessage<::clarifai::api::ListModelVersionsRequest>(Arena*);
template<> ::clarifai::api::ListModelsRequest* Arena::CreateMaybeMessage<::clarifai::api::ListModelsRequest>(Arena*);
template<> ::clarifai::api::ListPasswordPoliciesRequest* Arena::CreateMaybeMessage<::clarifai::api::ListPasswordPoliciesRequest>(Arena*);
template<> ::clarifai::api::ListPublicWorkflowsRequest* Arena::CreateMaybeMessage<::clarifai::api::ListPublicWorkflowsRequest>(Arena*);
template<> ::clarifai::api::ListScopesRequest* Arena::CreateMaybeMessage<::clarifai::api::ListScopesRequest>(Arena*);
template<> ::clarifai::api::ListSearchesRequest* Arena::CreateMaybeMessage<::clarifai::api::ListSearchesRequest>(Arena*);
template<> ::clarifai::api::ListStatusCodesRequest* Arena::CreateMaybeMessage<::clarifai::api::ListStatusCodesRequest>(Arena*);
template<> ::clarifai::api::ListTasksRequest* Arena::CreateMaybeMessage<::clarifai::api::ListTasksRequest>(Arena*);
template<> ::clarifai::api::ListTrainingTemplatesRequest* Arena::CreateMaybeMessage<::clarifai::api::ListTrainingTemplatesRequest>(Arena*);
template<> ::clarifai::api::ListUsageIntervalsRequest* Arena::CreateMaybeMessage<::clarifai::api::ListUsageIntervalsRequest>(Arena*);
template<> ::clarifai::api::ListUsageIntervalsResponse* Arena::CreateMaybeMessage<::clarifai::api::ListUsageIntervalsResponse>(Arena*);
template<> ::clarifai::api::ListUserBillingCyclesRequest* Arena::CreateMaybeMessage<::clarifai::api::ListUserBillingCyclesRequest>(Arena*);
template<> ::clarifai::api::ListUserBillingCyclesResponse* Arena::CreateMaybeMessage<::clarifai::api::ListUserBillingCyclesResponse>(Arena*);
template<> ::clarifai::api::ListVocabConceptsRequest* Arena::CreateMaybeMessage<::clarifai::api::ListVocabConceptsRequest>(Arena*);
template<> ::clarifai::api::ListVocabsRequest* Arena::CreateMaybeMessage<::clarifai::api::ListVocabsRequest>(Arena*);
template<> ::clarifai::api::ListWorkflowsRequest* Arena::CreateMaybeMessage<::clarifai::api::ListWorkflowsRequest>(Arena*);
template<> ::clarifai::api::MultiAnnotationResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiAnnotationResponse>(Arena*);
template<> ::clarifai::api::MultiAnnotationSearchMetricsResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiAnnotationSearchMetricsResponse>(Arena*);
template<> ::clarifai::api::MultiAppDuplicationsResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiAppDuplicationsResponse>(Arena*);
template<> ::clarifai::api::MultiAppResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiAppResponse>(Arena*);
template<> ::clarifai::api::MultiClusterResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiClusterResponse>(Arena*);
template<> ::clarifai::api::MultiCollaborationsResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiCollaborationsResponse>(Arena*);
template<> ::clarifai::api::MultiCollaboratorsResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiCollaboratorsResponse>(Arena*);
template<> ::clarifai::api::MultiCollectorResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiCollectorResponse>(Arena*);
template<> ::clarifai::api::MultiConceptCountResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiConceptCountResponse>(Arena*);
template<> ::clarifai::api::MultiConceptLanguageResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiConceptLanguageResponse>(Arena*);
template<> ::clarifai::api::MultiConceptMappingJobResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiConceptMappingJobResponse>(Arena*);
template<> ::clarifai::api::MultiConceptMappingResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiConceptMappingResponse>(Arena*);
template<> ::clarifai::api::MultiConceptReferenceResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiConceptReferenceResponse>(Arena*);
template<> ::clarifai::api::MultiConceptRelationResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiConceptRelationResponse>(Arena*);
template<> ::clarifai::api::MultiConceptResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiConceptResponse>(Arena*);
template<> ::clarifai::api::MultiInputResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiInputResponse>(Arena*);
template<> ::clarifai::api::MultiKeyResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiKeyResponse>(Arena*);
template<> ::clarifai::api::MultiKnowledgeGraphResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiKnowledgeGraphResponse>(Arena*);
template<> ::clarifai::api::MultiModelResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiModelResponse>(Arena*);
template<> ::clarifai::api::MultiModelVersionResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiModelVersionResponse>(Arena*);
template<> ::clarifai::api::MultiOutputResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiOutputResponse>(Arena*);
template<> ::clarifai::api::MultiScopeDepsResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiScopeDepsResponse>(Arena*);
template<> ::clarifai::api::MultiScopeResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiScopeResponse>(Arena*);
template<> ::clarifai::api::MultiSearchResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiSearchResponse>(Arena*);
template<> ::clarifai::api::MultiStatValueAggregateResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiStatValueAggregateResponse>(Arena*);
template<> ::clarifai::api::MultiStatValueResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiStatValueResponse>(Arena*);
template<> ::clarifai::api::MultiStatusCodeResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiStatusCodeResponse>(Arena*);
template<> ::clarifai::api::MultiTaskResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiTaskResponse>(Arena*);
template<> ::clarifai::api::MultiTrainingTemplatesResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiTrainingTemplatesResponse>(Arena*);
template<> ::clarifai::api::MultiUserResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiUserResponse>(Arena*);
template<> ::clarifai::api::MultiVocabResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiVocabResponse>(Arena*);
template<> ::clarifai::api::MultiWorkflowResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiWorkflowResponse>(Arena*);
template<> ::clarifai::api::MultipleCreditCardResponse* Arena::CreateMaybeMessage<::clarifai::api::MultipleCreditCardResponse>(Arena*);
template<> ::clarifai::api::MultipleEmailResponse* Arena::CreateMaybeMessage<::clarifai::api::MultipleEmailResponse>(Arena*);
template<> ::clarifai::api::MultipleLicensesResponse* Arena::CreateMaybeMessage<::clarifai::api::MultipleLicensesResponse>(Arena*);
template<> ::clarifai::api::MultiplePasswordPoliciesResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiplePasswordPoliciesResponse>(Arena*);
template<> ::clarifai::api::MyScopesRequest* Arena::CreateMaybeMessage<::clarifai::api::MyScopesRequest>(Arena*);
template<> ::clarifai::api::Pagination* Arena::CreateMaybeMessage<::clarifai::api::Pagination>(Arena*);
template<> ::clarifai::api::PatchAnnotationsRequest* Arena::CreateMaybeMessage<::clarifai::api::PatchAnnotationsRequest>(Arena*);
template<> ::clarifai::api::PatchAppsRequest* Arena::CreateMaybeMessage<::clarifai::api::PatchAppsRequest>(Arena*);
template<> ::clarifai::api::PatchCollaboratorsRequest* Arena::CreateMaybeMessage<::clarifai::api::PatchCollaboratorsRequest>(Arena*);
template<> ::clarifai::api::PatchCollectorsRequest* Arena::CreateMaybeMessage<::clarifai::api::PatchCollectorsRequest>(Arena*);
template<> ::clarifai::api::PatchConceptLanguagesRequest* Arena::CreateMaybeMessage<::clarifai::api::PatchConceptLanguagesRequest>(Arena*);
template<> ::clarifai::api::PatchConceptsRequest* Arena::CreateMaybeMessage<::clarifai::api::PatchConceptsRequest>(Arena*);
template<> ::clarifai::api::PatchCreditCardsRequest* Arena::CreateMaybeMessage<::clarifai::api::PatchCreditCardsRequest>(Arena*);
template<> ::clarifai::api::PatchInputsRequest* Arena::CreateMaybeMessage<::clarifai::api::PatchInputsRequest>(Arena*);
template<> ::clarifai::api::PatchKeysRequest* Arena::CreateMaybeMessage<::clarifai::api::PatchKeysRequest>(Arena*);
template<> ::clarifai::api::PatchModelsRequest* Arena::CreateMaybeMessage<::clarifai::api::PatchModelsRequest>(Arena*);
template<> ::clarifai::api::PatchPasswordPoliciesRequest* Arena::CreateMaybeMessage<::clarifai::api::PatchPasswordPoliciesRequest>(Arena*);
template<> ::clarifai::api::PatchTasksRequest* Arena::CreateMaybeMessage<::clarifai::api::PatchTasksRequest>(Arena*);
template<> ::clarifai::api::PatchUserRequest* Arena::CreateMaybeMessage<::clarifai::api::PatchUserRequest>(Arena*);
template<> ::clarifai::api::PatchVocabsRequest* Arena::CreateMaybeMessage<::clarifai::api::PatchVocabsRequest>(Arena*);
template<> ::clarifai::api::PatchWorkflowsRequest* Arena::CreateMaybeMessage<::clarifai::api::PatchWorkflowsRequest>(Arena*);
template<> ::clarifai::api::PostAnnotationSearchMetricsRequest* Arena::CreateMaybeMessage<::clarifai::api::PostAnnotationSearchMetricsRequest>(Arena*);
template<> ::clarifai::api::PostAnnotationsRequest* Arena::CreateMaybeMessage<::clarifai::api::PostAnnotationsRequest>(Arena*);
template<> ::clarifai::api::PostAnnotationsSearchesRequest* Arena::CreateMaybeMessage<::clarifai::api::PostAnnotationsSearchesRequest>(Arena*);
template<> ::clarifai::api::PostAppDuplicationsRequest* Arena::CreateMaybeMessage<::clarifai::api::PostAppDuplicationsRequest>(Arena*);
template<> ::clarifai::api::PostAppsRequest* Arena::CreateMaybeMessage<::clarifai::api::PostAppsRequest>(Arena*);
template<> ::clarifai::api::PostAttributeSearchRequest* Arena::CreateMaybeMessage<::clarifai::api::PostAttributeSearchRequest>(Arena*);
template<> ::clarifai::api::PostClustersSearchesRequest* Arena::CreateMaybeMessage<::clarifai::api::PostClustersSearchesRequest>(Arena*);
template<> ::clarifai::api::PostCollaboratorsRequest* Arena::CreateMaybeMessage<::clarifai::api::PostCollaboratorsRequest>(Arena*);
template<> ::clarifai::api::PostCollectorsRequest* Arena::CreateMaybeMessage<::clarifai::api::PostCollectorsRequest>(Arena*);
template<> ::clarifai::api::PostConceptLanguagesRequest* Arena::CreateMaybeMessage<::clarifai::api::PostConceptLanguagesRequest>(Arena*);
template<> ::clarifai::api::PostConceptMappingJobsRequest* Arena::CreateMaybeMessage<::clarifai::api::PostConceptMappingJobsRequest>(Arena*);
template<> ::clarifai::api::PostConceptMappingsRequest* Arena::CreateMaybeMessage<::clarifai::api::PostConceptMappingsRequest>(Arena*);
template<> ::clarifai::api::PostConceptRelationsRequest* Arena::CreateMaybeMessage<::clarifai::api::PostConceptRelationsRequest>(Arena*);
template<> ::clarifai::api::PostConceptsRequest* Arena::CreateMaybeMessage<::clarifai::api::PostConceptsRequest>(Arena*);
template<> ::clarifai::api::PostConceptsSearchesRequest* Arena::CreateMaybeMessage<::clarifai::api::PostConceptsSearchesRequest>(Arena*);
template<> ::clarifai::api::PostCreditCardRequest* Arena::CreateMaybeMessage<::clarifai::api::PostCreditCardRequest>(Arena*);
template<> ::clarifai::api::PostEmailsRequest* Arena::CreateMaybeMessage<::clarifai::api::PostEmailsRequest>(Arena*);
template<> ::clarifai::api::PostHistoricalUsageRequest* Arena::CreateMaybeMessage<::clarifai::api::PostHistoricalUsageRequest>(Arena*);
template<> ::clarifai::api::PostHistoricalUsageResponse* Arena::CreateMaybeMessage<::clarifai::api::PostHistoricalUsageResponse>(Arena*);
template<> ::clarifai::api::PostInputsFileRequest* Arena::CreateMaybeMessage<::clarifai::api::PostInputsFileRequest>(Arena*);
template<> ::clarifai::api::PostInputsNiFiRequest* Arena::CreateMaybeMessage<::clarifai::api::PostInputsNiFiRequest>(Arena*);
template<> ::clarifai::api::PostInputsRequest* Arena::CreateMaybeMessage<::clarifai::api::PostInputsRequest>(Arena*);
template<> ::clarifai::api::PostInputsSearchesRequest* Arena::CreateMaybeMessage<::clarifai::api::PostInputsSearchesRequest>(Arena*);
template<> ::clarifai::api::PostKeysRequest* Arena::CreateMaybeMessage<::clarifai::api::PostKeysRequest>(Arena*);
template<> ::clarifai::api::PostKnowledgeGraphsRequest* Arena::CreateMaybeMessage<::clarifai::api::PostKnowledgeGraphsRequest>(Arena*);
template<> ::clarifai::api::PostLoginRequest* Arena::CreateMaybeMessage<::clarifai::api::PostLoginRequest>(Arena*);
template<> ::clarifai::api::PostModelOutputsRequest* Arena::CreateMaybeMessage<::clarifai::api::PostModelOutputsRequest>(Arena*);
template<> ::clarifai::api::PostModelVersionMetricsRequest* Arena::CreateMaybeMessage<::clarifai::api::PostModelVersionMetricsRequest>(Arena*);
template<> ::clarifai::api::PostModelVersionsDeploymentRequest* Arena::CreateMaybeMessage<::clarifai::api::PostModelVersionsDeploymentRequest>(Arena*);
template<> ::clarifai::api::PostModelVersionsRequest* Arena::CreateMaybeMessage<::clarifai::api::PostModelVersionsRequest>(Arena*);
template<> ::clarifai::api::PostModelsRequest* Arena::CreateMaybeMessage<::clarifai::api::PostModelsRequest>(Arena*);
template<> ::clarifai::api::PostModelsSearchesRequest* Arena::CreateMaybeMessage<::clarifai::api::PostModelsSearchesRequest>(Arena*);
template<> ::clarifai::api::PostPasswordPoliciesRequest* Arena::CreateMaybeMessage<::clarifai::api::PostPasswordPoliciesRequest>(Arena*);
template<> ::clarifai::api::PostPrimaryEmailRequest* Arena::CreateMaybeMessage<::clarifai::api::PostPrimaryEmailRequest>(Arena*);
template<> ::clarifai::api::PostResendVerifyRequest* Arena::CreateMaybeMessage<::clarifai::api::PostResendVerifyRequest>(Arena*);
template<> ::clarifai::api::PostSearchesByIDRequest* Arena::CreateMaybeMessage<::clarifai::api::PostSearchesByIDRequest>(Arena*);
template<> ::clarifai::api::PostSearchesRequest* Arena::CreateMaybeMessage<::clarifai::api::PostSearchesRequest>(Arena*);
template<> ::clarifai::api::PostSignupRequest* Arena::CreateMaybeMessage<::clarifai::api::PostSignupRequest>(Arena*);
template<> ::clarifai::api::PostStatValuesAggregateRequest* Arena::CreateMaybeMessage<::clarifai::api::PostStatValuesAggregateRequest>(Arena*);
template<> ::clarifai::api::PostStatValuesRequest* Arena::CreateMaybeMessage<::clarifai::api::PostStatValuesRequest>(Arena*);
template<> ::clarifai::api::PostSubscriptionRequest* Arena::CreateMaybeMessage<::clarifai::api::PostSubscriptionRequest>(Arena*);
template<> ::clarifai::api::PostTasksRequest* Arena::CreateMaybeMessage<::clarifai::api::PostTasksRequest>(Arena*);
template<> ::clarifai::api::PostUsageRequest* Arena::CreateMaybeMessage<::clarifai::api::PostUsageRequest>(Arena*);
template<> ::clarifai::api::PostUsageResponse* Arena::CreateMaybeMessage<::clarifai::api::PostUsageResponse>(Arena*);
template<> ::clarifai::api::PostUserConsentRequest* Arena::CreateMaybeMessage<::clarifai::api::PostUserConsentRequest>(Arena*);
template<> ::clarifai::api::PostValidatePasswordRequest* Arena::CreateMaybeMessage<::clarifai::api::PostValidatePasswordRequest>(Arena*);
template<> ::clarifai::api::PostVerifyEmailRequest* Arena::CreateMaybeMessage<::clarifai::api::PostVerifyEmailRequest>(Arena*);
template<> ::clarifai::api::PostVocabConceptsRequest* Arena::CreateMaybeMessage<::clarifai::api::PostVocabConceptsRequest>(Arena*);
template<> ::clarifai::api::PostVocabsRequest* Arena::CreateMaybeMessage<::clarifai::api::PostVocabsRequest>(Arena*);
template<> ::clarifai::api::PostWorkflowResultsRequest* Arena::CreateMaybeMessage<::clarifai::api::PostWorkflowResultsRequest>(Arena*);
template<> ::clarifai::api::PostWorkflowResultsResponse* Arena::CreateMaybeMessage<::clarifai::api::PostWorkflowResultsResponse>(Arena*);
template<> ::clarifai::api::PostWorkflowResultsSimilarityRequest* Arena::CreateMaybeMessage<::clarifai::api::PostWorkflowResultsSimilarityRequest>(Arena*);
template<> ::clarifai::api::PostWorkflowResultsSimilarityResponse* Arena::CreateMaybeMessage<::clarifai::api::PostWorkflowResultsSimilarityResponse>(Arena*);
template<> ::clarifai::api::PostWorkflowsRequest* Arena::CreateMaybeMessage<::clarifai::api::PostWorkflowsRequest>(Arena*);
template<> ::clarifai::api::RequestResetPasswordRequest* Arena::CreateMaybeMessage<::clarifai::api::RequestResetPasswordRequest>(Arena*);
template<> ::clarifai::api::SingleAnnotationResponse* Arena::CreateMaybeMessage<::clarifai::api::SingleAnnotationResponse>(Arena*);
template<> ::clarifai::api::SingleAppDuplicationResponse* Arena::CreateMaybeMessage<::clarifai::api::SingleAppDuplicationResponse>(Arena*);
template<> ::clarifai::api::SingleAppResponse* Arena::CreateMaybeMessage<::clarifai::api::SingleAppResponse>(Arena*);
template<> ::clarifai::api::SingleCollectorResponse* Arena::CreateMaybeMessage<::clarifai::api::SingleCollectorResponse>(Arena*);
template<> ::clarifai::api::SingleConceptLanguageResponse* Arena::CreateMaybeMessage<::clarifai::api::SingleConceptLanguageResponse>(Arena*);
template<> ::clarifai::api::SingleConceptMappingJobResponse* Arena::CreateMaybeMessage<::clarifai::api::SingleConceptMappingJobResponse>(Arena*);
template<> ::clarifai::api::SingleConceptMappingResponse* Arena::CreateMaybeMessage<::clarifai::api::SingleConceptMappingResponse>(Arena*);
template<> ::clarifai::api::SingleConceptReferenceResponse* Arena::CreateMaybeMessage<::clarifai::api::SingleConceptReferenceResponse>(Arena*);
template<> ::clarifai::api::SingleConceptRelationResponse* Arena::CreateMaybeMessage<::clarifai::api::SingleConceptRelationResponse>(Arena*);
template<> ::clarifai::api::SingleConceptResponse* Arena::CreateMaybeMessage<::clarifai::api::SingleConceptResponse>(Arena*);
template<> ::clarifai::api::SingleCreditCardResponse* Arena::CreateMaybeMessage<::clarifai::api::SingleCreditCardResponse>(Arena*);
template<> ::clarifai::api::SingleEmailResponse* Arena::CreateMaybeMessage<::clarifai::api::SingleEmailResponse>(Arena*);
template<> ::clarifai::api::SingleInputCountResponse* Arena::CreateMaybeMessage<::clarifai::api::SingleInputCountResponse>(Arena*);
template<> ::clarifai::api::SingleInputResponse* Arena::CreateMaybeMessage<::clarifai::api::SingleInputResponse>(Arena*);
template<> ::clarifai::api::SingleKeyResponse* Arena::CreateMaybeMessage<::clarifai::api::SingleKeyResponse>(Arena*);
template<> ::clarifai::api::SingleKnowledgeGraphResponse* Arena::CreateMaybeMessage<::clarifai::api::SingleKnowledgeGraphResponse>(Arena*);
template<> ::clarifai::api::SingleLicenseResponse* Arena::CreateMaybeMessage<::clarifai::api::SingleLicenseResponse>(Arena*);
template<> ::clarifai::api::SingleLoginResponse* Arena::CreateMaybeMessage<::clarifai::api::SingleLoginResponse>(Arena*);
template<> ::clarifai::api::SingleModelResponse* Arena::CreateMaybeMessage<::clarifai::api::SingleModelResponse>(Arena*);
template<> ::clarifai::api::SingleModelVersionResponse* Arena::CreateMaybeMessage<::clarifai::api::SingleModelVersionResponse>(Arena*);
template<> ::clarifai::api::SinglePasswordValidationResponse* Arena::CreateMaybeMessage<::clarifai::api::SinglePasswordValidationResponse>(Arena*);
template<> ::clarifai::api::SingleResendVerifyResponse* Arena::CreateMaybeMessage<::clarifai::api::SingleResendVerifyResponse>(Arena*);
template<> ::clarifai::api::SingleSearchResponse* Arena::CreateMaybeMessage<::clarifai::api::SingleSearchResponse>(Arena*);
template<> ::clarifai::api::SingleStatusCodeResponse* Arena::CreateMaybeMessage<::clarifai::api::SingleStatusCodeResponse>(Arena*);
template<> ::clarifai::api::SingleSubscriptionResponse* Arena::CreateMaybeMessage<::clarifai::api::SingleSubscriptionResponse>(Arena*);
template<> ::clarifai::api::SingleTaskResponse* Arena::CreateMaybeMessage<::clarifai::api::SingleTaskResponse>(Arena*);
template<> ::clarifai::api::SingleUserResponse* Arena::CreateMaybeMessage<::clarifai::api::SingleUserResponse>(Arena*);
template<> ::clarifai::api::SingleVerifyEmailResponse* Arena::CreateMaybeMessage<::clarifai::api::SingleVerifyEmailResponse>(Arena*);
template<> ::clarifai::api::SingleVocabResponse* Arena::CreateMaybeMessage<::clarifai::api::SingleVocabResponse>(Arena*);
template<> ::clarifai::api::SingleWorkflowResponse* Arena::CreateMaybeMessage<::clarifai::api::SingleWorkflowResponse>(Arena*);
template<> ::clarifai::api::StreamInputsRequest* Arena::CreateMaybeMessage<::clarifai::api::StreamInputsRequest>(Arena*);
template<> ::clarifai::api::TestMessage* Arena::CreateMaybeMessage<::clarifai::api::TestMessage>(Arena*);
template<> ::clarifai::api::TrainingTemplate* Arena::CreateMaybeMessage<::clarifai::api::TrainingTemplate>(Arena*);
template<> ::clarifai::api::ValidateLicenseRequest* Arena::CreateMaybeMessage<::clarifai::api::ValidateLicenseRequest>(Arena*);
template<> ::clarifai::api::ValidateLicenseResponse* Arena::CreateMaybeMessage<::clarifai::api::ValidateLicenseResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace clarifai {
namespace api {

// ===================================================================

class TestMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.TestMessage) */ {
 public:
  TestMessage();
  virtual ~TestMessage();

  TestMessage(const TestMessage& from);
  TestMessage(TestMessage&& from) noexcept
    : TestMessage() {
    *this = ::std::move(from);
  }

  inline TestMessage& operator=(const TestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestMessage& operator=(TestMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestMessage* internal_default_instance() {
    return reinterpret_cast<const TestMessage*>(
               &_TestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TestMessage& a, TestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TestMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestMessage* New() const final {
    return CreateMaybeMessage<TestMessage>(nullptr);
  }

  TestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestMessage& from);
  void MergeFrom(const TestMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.TestMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kBytsFieldNumber = 3,
    kStatusFieldNumber = 1,
    kSFieldNumber = 8,
    kInt64FieldNumber = 5,
    kInt32FieldNumber = 4,
    kF32FieldNumber = 6,
    kF64FieldNumber = 7,
  };
  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // bytes byts = 3;
  void clear_byts();
  const std::string& byts() const;
  void set_byts(const std::string& value);
  void set_byts(std::string&& value);
  void set_byts(const char* value);
  void set_byts(const void* value, size_t size);
  std::string* mutable_byts();
  std::string* release_byts();
  void set_allocated_byts(std::string* byts);
  private:
  const std::string& _internal_byts() const;
  void _internal_set_byts(const std::string& value);
  std::string* _internal_mutable_byts();
  public:

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // .google.protobuf.Struct s = 8;
  bool has_s() const;
  private:
  bool _internal_has_s() const;
  public:
  void clear_s();
  const PROTOBUF_NAMESPACE_ID::Struct& s() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_s();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_s();
  void set_allocated_s(PROTOBUF_NAMESPACE_ID::Struct* s);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_s() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_s();
  public:

  // uint64 int_64 = 5;
  void clear_int_64();
  ::PROTOBUF_NAMESPACE_ID::uint64 int_64() const;
  void set_int_64(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_int_64() const;
  void _internal_set_int_64(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 int_32 = 4;
  void clear_int_32();
  ::PROTOBUF_NAMESPACE_ID::uint32 int_32() const;
  void set_int_32(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_int_32() const;
  void _internal_set_int_32(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float f_32 = 6;
  void clear_f_32();
  float f_32() const;
  void set_f_32(float value);
  private:
  float _internal_f_32() const;
  void _internal_set_f_32(float value);
  public:

  // double f_64 = 7;
  void clear_f_64();
  double f_64() const;
  void set_f_64(double value);
  private:
  double _internal_f_64() const;
  void _internal_set_f_64(double value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.TestMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr byts_;
  ::clarifai::api::status::Status* status_;
  PROTOBUF_NAMESPACE_ID::Struct* s_;
  ::PROTOBUF_NAMESPACE_ID::uint64 int_64_;
  ::PROTOBUF_NAMESPACE_ID::uint32 int_32_;
  float f_32_;
  double f_64_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class Pagination :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Pagination) */ {
 public:
  Pagination();
  virtual ~Pagination();

  Pagination(const Pagination& from);
  Pagination(Pagination&& from) noexcept
    : Pagination() {
    *this = ::std::move(from);
  }

  inline Pagination& operator=(const Pagination& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pagination& operator=(Pagination&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pagination& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pagination* internal_default_instance() {
    return reinterpret_cast<const Pagination*>(
               &_Pagination_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Pagination& a, Pagination& b) {
    a.Swap(&b);
  }
  inline void Swap(Pagination* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pagination* New() const final {
    return CreateMaybeMessage<Pagination>(nullptr);
  }

  Pagination* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pagination>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pagination& from);
  void MergeFrom(const Pagination& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pagination* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Pagination";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPageFieldNumber = 1,
    kPerPageFieldNumber = 2,
  };
  // uint32 page = 1;
  void clear_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 page() const;
  void set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_page() const;
  void _internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 per_page = 2;
  void clear_per_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 per_page() const;
  void set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_per_page() const;
  void _internal_set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.Pagination)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 page_;
  ::PROTOBUF_NAMESPACE_ID::uint32 per_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class GetAnnotationRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.GetAnnotationRequest) */ {
 public:
  GetAnnotationRequest();
  virtual ~GetAnnotationRequest();

  GetAnnotationRequest(const GetAnnotationRequest& from);
  GetAnnotationRequest(GetAnnotationRequest&& from) noexcept
    : GetAnnotationRequest() {
    *this = ::std::move(from);
  }

  inline GetAnnotationRequest& operator=(const GetAnnotationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAnnotationRequest& operator=(GetAnnotationRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAnnotationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAnnotationRequest* internal_default_instance() {
    return reinterpret_cast<const GetAnnotationRequest*>(
               &_GetAnnotationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetAnnotationRequest& a, GetAnnotationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAnnotationRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAnnotationRequest* New() const final {
    return CreateMaybeMessage<GetAnnotationRequest>(nullptr);
  }

  GetAnnotationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAnnotationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAnnotationRequest& from);
  void MergeFrom(const GetAnnotationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAnnotationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.GetAnnotationRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnnotationIdFieldNumber = 2,
    kInputIdFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
  };
  // string annotation_id = 2;
  void clear_annotation_id();
  const std::string& annotation_id() const;
  void set_annotation_id(const std::string& value);
  void set_annotation_id(std::string&& value);
  void set_annotation_id(const char* value);
  void set_annotation_id(const char* value, size_t size);
  std::string* mutable_annotation_id();
  std::string* release_annotation_id();
  void set_allocated_annotation_id(std::string* annotation_id);
  private:
  const std::string& _internal_annotation_id() const;
  void _internal_set_annotation_id(const std::string& value);
  std::string* _internal_mutable_annotation_id();
  public:

  // string input_id = 3;
  void clear_input_id();
  const std::string& input_id() const;
  void set_input_id(const std::string& value);
  void set_input_id(std::string&& value);
  void set_input_id(const char* value);
  void set_input_id(const char* value, size_t size);
  std::string* mutable_input_id();
  std::string* release_input_id();
  void set_allocated_input_id(std::string* input_id);
  private:
  const std::string& _internal_input_id() const;
  void _internal_set_input_id(const std::string& value);
  std::string* _internal_mutable_input_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.GetAnnotationRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr annotation_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListAnnotationsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListAnnotationsRequest) */ {
 public:
  ListAnnotationsRequest();
  virtual ~ListAnnotationsRequest();

  ListAnnotationsRequest(const ListAnnotationsRequest& from);
  ListAnnotationsRequest(ListAnnotationsRequest&& from) noexcept
    : ListAnnotationsRequest() {
    *this = ::std::move(from);
  }

  inline ListAnnotationsRequest& operator=(const ListAnnotationsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListAnnotationsRequest& operator=(ListAnnotationsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListAnnotationsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListAnnotationsRequest* internal_default_instance() {
    return reinterpret_cast<const ListAnnotationsRequest*>(
               &_ListAnnotationsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ListAnnotationsRequest& a, ListAnnotationsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListAnnotationsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListAnnotationsRequest* New() const final {
    return CreateMaybeMessage<ListAnnotationsRequest>(nullptr);
  }

  ListAnnotationsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListAnnotationsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListAnnotationsRequest& from);
  void MergeFrom(const ListAnnotationsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListAnnotationsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListAnnotationsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 2,
    kInputIdsFieldNumber = 3,
    kStatusesFieldNumber = 5,
    kUserIdsFieldNumber = 9,
    kModelVersionIdsFieldNumber = 10,
    kUserAppIdFieldNumber = 1,
    kListAllAnnotationsFieldNumber = 6,
    kPageFieldNumber = 7,
    kPerPageFieldNumber = 8,
  };
  // repeated string ids = 2;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  const std::string& ids(int index) const;
  std::string* mutable_ids(int index);
  void set_ids(int index, const std::string& value);
  void set_ids(int index, std::string&& value);
  void set_ids(int index, const char* value);
  void set_ids(int index, const char* value, size_t size);
  std::string* add_ids();
  void add_ids(const std::string& value);
  void add_ids(std::string&& value);
  void add_ids(const char* value);
  void add_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ids();
  private:
  const std::string& _internal_ids(int index) const;
  std::string* _internal_add_ids();
  public:

  // repeated string input_ids = 3;
  int input_ids_size() const;
  private:
  int _internal_input_ids_size() const;
  public:
  void clear_input_ids();
  const std::string& input_ids(int index) const;
  std::string* mutable_input_ids(int index);
  void set_input_ids(int index, const std::string& value);
  void set_input_ids(int index, std::string&& value);
  void set_input_ids(int index, const char* value);
  void set_input_ids(int index, const char* value, size_t size);
  std::string* add_input_ids();
  void add_input_ids(const std::string& value);
  void add_input_ids(std::string&& value);
  void add_input_ids(const char* value);
  void add_input_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& input_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_input_ids();
  private:
  const std::string& _internal_input_ids(int index) const;
  std::string* _internal_add_input_ids();
  public:

  // repeated .clarifai.api.status.Status statuses = 5;
  int statuses_size() const;
  private:
  int _internal_statuses_size() const;
  public:
  void clear_statuses();
  ::clarifai::api::status::Status* mutable_statuses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::status::Status >*
      mutable_statuses();
  private:
  const ::clarifai::api::status::Status& _internal_statuses(int index) const;
  ::clarifai::api::status::Status* _internal_add_statuses();
  public:
  const ::clarifai::api::status::Status& statuses(int index) const;
  ::clarifai::api::status::Status* add_statuses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::status::Status >&
      statuses() const;

  // repeated string user_ids = 9;
  int user_ids_size() const;
  private:
  int _internal_user_ids_size() const;
  public:
  void clear_user_ids();
  const std::string& user_ids(int index) const;
  std::string* mutable_user_ids(int index);
  void set_user_ids(int index, const std::string& value);
  void set_user_ids(int index, std::string&& value);
  void set_user_ids(int index, const char* value);
  void set_user_ids(int index, const char* value, size_t size);
  std::string* add_user_ids();
  void add_user_ids(const std::string& value);
  void add_user_ids(std::string&& value);
  void add_user_ids(const char* value);
  void add_user_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& user_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_user_ids();
  private:
  const std::string& _internal_user_ids(int index) const;
  std::string* _internal_add_user_ids();
  public:

  // repeated string model_version_ids = 10;
  int model_version_ids_size() const;
  private:
  int _internal_model_version_ids_size() const;
  public:
  void clear_model_version_ids();
  const std::string& model_version_ids(int index) const;
  std::string* mutable_model_version_ids(int index);
  void set_model_version_ids(int index, const std::string& value);
  void set_model_version_ids(int index, std::string&& value);
  void set_model_version_ids(int index, const char* value);
  void set_model_version_ids(int index, const char* value, size_t size);
  std::string* add_model_version_ids();
  void add_model_version_ids(const std::string& value);
  void add_model_version_ids(std::string&& value);
  void add_model_version_ids(const char* value);
  void add_model_version_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& model_version_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_model_version_ids();
  private:
  const std::string& _internal_model_version_ids(int index) const;
  std::string* _internal_add_model_version_ids();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // bool list_all_annotations = 6;
  void clear_list_all_annotations();
  bool list_all_annotations() const;
  void set_list_all_annotations(bool value);
  private:
  bool _internal_list_all_annotations() const;
  void _internal_set_list_all_annotations(bool value);
  public:

  // uint32 page = 7;
  void clear_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 page() const;
  void set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_page() const;
  void _internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 per_page = 8;
  void clear_per_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 per_page() const;
  void set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_per_page() const;
  void _internal_set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ListAnnotationsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> input_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::status::Status > statuses_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> user_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> model_version_ids_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  bool list_all_annotations_;
  ::PROTOBUF_NAMESPACE_ID::uint32 page_;
  ::PROTOBUF_NAMESPACE_ID::uint32 per_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostAnnotationsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostAnnotationsRequest) */ {
 public:
  PostAnnotationsRequest();
  virtual ~PostAnnotationsRequest();

  PostAnnotationsRequest(const PostAnnotationsRequest& from);
  PostAnnotationsRequest(PostAnnotationsRequest&& from) noexcept
    : PostAnnotationsRequest() {
    *this = ::std::move(from);
  }

  inline PostAnnotationsRequest& operator=(const PostAnnotationsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostAnnotationsRequest& operator=(PostAnnotationsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostAnnotationsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostAnnotationsRequest* internal_default_instance() {
    return reinterpret_cast<const PostAnnotationsRequest*>(
               &_PostAnnotationsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PostAnnotationsRequest& a, PostAnnotationsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostAnnotationsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostAnnotationsRequest* New() const final {
    return CreateMaybeMessage<PostAnnotationsRequest>(nullptr);
  }

  PostAnnotationsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostAnnotationsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostAnnotationsRequest& from);
  void MergeFrom(const PostAnnotationsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostAnnotationsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostAnnotationsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnnotationsFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.Annotation annotations = 2;
  int annotations_size() const;
  private:
  int _internal_annotations_size() const;
  public:
  void clear_annotations();
  ::clarifai::api::Annotation* mutable_annotations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Annotation >*
      mutable_annotations();
  private:
  const ::clarifai::api::Annotation& _internal_annotations(int index) const;
  ::clarifai::api::Annotation* _internal_add_annotations();
  public:
  const ::clarifai::api::Annotation& annotations(int index) const;
  ::clarifai::api::Annotation* add_annotations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Annotation >&
      annotations() const;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PostAnnotationsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Annotation > annotations_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PatchAnnotationsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PatchAnnotationsRequest) */ {
 public:
  PatchAnnotationsRequest();
  virtual ~PatchAnnotationsRequest();

  PatchAnnotationsRequest(const PatchAnnotationsRequest& from);
  PatchAnnotationsRequest(PatchAnnotationsRequest&& from) noexcept
    : PatchAnnotationsRequest() {
    *this = ::std::move(from);
  }

  inline PatchAnnotationsRequest& operator=(const PatchAnnotationsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatchAnnotationsRequest& operator=(PatchAnnotationsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PatchAnnotationsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PatchAnnotationsRequest* internal_default_instance() {
    return reinterpret_cast<const PatchAnnotationsRequest*>(
               &_PatchAnnotationsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PatchAnnotationsRequest& a, PatchAnnotationsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PatchAnnotationsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PatchAnnotationsRequest* New() const final {
    return CreateMaybeMessage<PatchAnnotationsRequest>(nullptr);
  }

  PatchAnnotationsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PatchAnnotationsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PatchAnnotationsRequest& from);
  void MergeFrom(const PatchAnnotationsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatchAnnotationsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PatchAnnotationsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnnotationsFieldNumber = 2,
    kActionFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.Annotation annotations = 2;
  int annotations_size() const;
  private:
  int _internal_annotations_size() const;
  public:
  void clear_annotations();
  ::clarifai::api::Annotation* mutable_annotations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Annotation >*
      mutable_annotations();
  private:
  const ::clarifai::api::Annotation& _internal_annotations(int index) const;
  ::clarifai::api::Annotation* _internal_add_annotations();
  public:
  const ::clarifai::api::Annotation& annotations(int index) const;
  ::clarifai::api::Annotation* add_annotations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Annotation >&
      annotations() const;

  // string action = 3;
  void clear_action();
  const std::string& action() const;
  void set_action(const std::string& value);
  void set_action(std::string&& value);
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  std::string* mutable_action();
  std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PatchAnnotationsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Annotation > annotations_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteAnnotationRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.DeleteAnnotationRequest) */ {
 public:
  DeleteAnnotationRequest();
  virtual ~DeleteAnnotationRequest();

  DeleteAnnotationRequest(const DeleteAnnotationRequest& from);
  DeleteAnnotationRequest(DeleteAnnotationRequest&& from) noexcept
    : DeleteAnnotationRequest() {
    *this = ::std::move(from);
  }

  inline DeleteAnnotationRequest& operator=(const DeleteAnnotationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteAnnotationRequest& operator=(DeleteAnnotationRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteAnnotationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteAnnotationRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteAnnotationRequest*>(
               &_DeleteAnnotationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DeleteAnnotationRequest& a, DeleteAnnotationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteAnnotationRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteAnnotationRequest* New() const final {
    return CreateMaybeMessage<DeleteAnnotationRequest>(nullptr);
  }

  DeleteAnnotationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteAnnotationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteAnnotationRequest& from);
  void MergeFrom(const DeleteAnnotationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteAnnotationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.DeleteAnnotationRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputIdFieldNumber = 2,
    kAnnotationIdFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
  };
  // string input_id = 2;
  void clear_input_id();
  const std::string& input_id() const;
  void set_input_id(const std::string& value);
  void set_input_id(std::string&& value);
  void set_input_id(const char* value);
  void set_input_id(const char* value, size_t size);
  std::string* mutable_input_id();
  std::string* release_input_id();
  void set_allocated_input_id(std::string* input_id);
  private:
  const std::string& _internal_input_id() const;
  void _internal_set_input_id(const std::string& value);
  std::string* _internal_mutable_input_id();
  public:

  // string annotation_id = 3;
  void clear_annotation_id();
  const std::string& annotation_id() const;
  void set_annotation_id(const std::string& value);
  void set_annotation_id(std::string&& value);
  void set_annotation_id(const char* value);
  void set_annotation_id(const char* value, size_t size);
  std::string* mutable_annotation_id();
  std::string* release_annotation_id();
  void set_allocated_annotation_id(std::string* annotation_id);
  private:
  const std::string& _internal_annotation_id() const;
  void _internal_set_annotation_id(const std::string& value);
  std::string* _internal_mutable_annotation_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.DeleteAnnotationRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr annotation_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteAnnotationsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.DeleteAnnotationsRequest) */ {
 public:
  DeleteAnnotationsRequest();
  virtual ~DeleteAnnotationsRequest();

  DeleteAnnotationsRequest(const DeleteAnnotationsRequest& from);
  DeleteAnnotationsRequest(DeleteAnnotationsRequest&& from) noexcept
    : DeleteAnnotationsRequest() {
    *this = ::std::move(from);
  }

  inline DeleteAnnotationsRequest& operator=(const DeleteAnnotationsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteAnnotationsRequest& operator=(DeleteAnnotationsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteAnnotationsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteAnnotationsRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteAnnotationsRequest*>(
               &_DeleteAnnotationsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DeleteAnnotationsRequest& a, DeleteAnnotationsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteAnnotationsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteAnnotationsRequest* New() const final {
    return CreateMaybeMessage<DeleteAnnotationsRequest>(nullptr);
  }

  DeleteAnnotationsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteAnnotationsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteAnnotationsRequest& from);
  void MergeFrom(const DeleteAnnotationsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteAnnotationsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.DeleteAnnotationsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 2,
    kInputIdsFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
  };
  // repeated string ids = 2;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  const std::string& ids(int index) const;
  std::string* mutable_ids(int index);
  void set_ids(int index, const std::string& value);
  void set_ids(int index, std::string&& value);
  void set_ids(int index, const char* value);
  void set_ids(int index, const char* value, size_t size);
  std::string* add_ids();
  void add_ids(const std::string& value);
  void add_ids(std::string&& value);
  void add_ids(const char* value);
  void add_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ids();
  private:
  const std::string& _internal_ids(int index) const;
  std::string* _internal_add_ids();
  public:

  // repeated string input_ids = 3;
  int input_ids_size() const;
  private:
  int _internal_input_ids_size() const;
  public:
  void clear_input_ids();
  const std::string& input_ids(int index) const;
  std::string* mutable_input_ids(int index);
  void set_input_ids(int index, const std::string& value);
  void set_input_ids(int index, std::string&& value);
  void set_input_ids(int index, const char* value);
  void set_input_ids(int index, const char* value, size_t size);
  std::string* add_input_ids();
  void add_input_ids(const std::string& value);
  void add_input_ids(std::string&& value);
  void add_input_ids(const char* value);
  void add_input_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& input_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_input_ids();
  private:
  const std::string& _internal_input_ids(int index) const;
  std::string* _internal_add_input_ids();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.DeleteAnnotationsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> input_ids_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class SingleAnnotationResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.SingleAnnotationResponse) */ {
 public:
  SingleAnnotationResponse();
  virtual ~SingleAnnotationResponse();

  SingleAnnotationResponse(const SingleAnnotationResponse& from);
  SingleAnnotationResponse(SingleAnnotationResponse&& from) noexcept
    : SingleAnnotationResponse() {
    *this = ::std::move(from);
  }

  inline SingleAnnotationResponse& operator=(const SingleAnnotationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleAnnotationResponse& operator=(SingleAnnotationResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SingleAnnotationResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SingleAnnotationResponse* internal_default_instance() {
    return reinterpret_cast<const SingleAnnotationResponse*>(
               &_SingleAnnotationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SingleAnnotationResponse& a, SingleAnnotationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleAnnotationResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SingleAnnotationResponse* New() const final {
    return CreateMaybeMessage<SingleAnnotationResponse>(nullptr);
  }

  SingleAnnotationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SingleAnnotationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SingleAnnotationResponse& from);
  void MergeFrom(const SingleAnnotationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleAnnotationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.SingleAnnotationResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kAnnotationFieldNumber = 2,
  };
  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // .clarifai.api.Annotation annotation = 2;
  bool has_annotation() const;
  private:
  bool _internal_has_annotation() const;
  public:
  void clear_annotation();
  const ::clarifai::api::Annotation& annotation() const;
  ::clarifai::api::Annotation* release_annotation();
  ::clarifai::api::Annotation* mutable_annotation();
  void set_allocated_annotation(::clarifai::api::Annotation* annotation);
  private:
  const ::clarifai::api::Annotation& _internal_annotation() const;
  ::clarifai::api::Annotation* _internal_mutable_annotation();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.SingleAnnotationResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::status::Status* status_;
  ::clarifai::api::Annotation* annotation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiAnnotationResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiAnnotationResponse) */ {
 public:
  MultiAnnotationResponse();
  virtual ~MultiAnnotationResponse();

  MultiAnnotationResponse(const MultiAnnotationResponse& from);
  MultiAnnotationResponse(MultiAnnotationResponse&& from) noexcept
    : MultiAnnotationResponse() {
    *this = ::std::move(from);
  }

  inline MultiAnnotationResponse& operator=(const MultiAnnotationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiAnnotationResponse& operator=(MultiAnnotationResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiAnnotationResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiAnnotationResponse* internal_default_instance() {
    return reinterpret_cast<const MultiAnnotationResponse*>(
               &_MultiAnnotationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(MultiAnnotationResponse& a, MultiAnnotationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiAnnotationResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiAnnotationResponse* New() const final {
    return CreateMaybeMessage<MultiAnnotationResponse>(nullptr);
  }

  MultiAnnotationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiAnnotationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiAnnotationResponse& from);
  void MergeFrom(const MultiAnnotationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiAnnotationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiAnnotationResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnnotationsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.Annotation annotations = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int annotations_size() const;
  private:
  int _internal_annotations_size() const;
  public:
  void clear_annotations();
  ::clarifai::api::Annotation* mutable_annotations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Annotation >*
      mutable_annotations();
  private:
  const ::clarifai::api::Annotation& _internal_annotations(int index) const;
  ::clarifai::api::Annotation* _internal_add_annotations();
  public:
  const ::clarifai::api::Annotation& annotations(int index) const;
  ::clarifai::api::Annotation* add_annotations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Annotation >&
      annotations() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiAnnotationResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Annotation > annotations_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class GetAppRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.GetAppRequest) */ {
 public:
  GetAppRequest();
  virtual ~GetAppRequest();

  GetAppRequest(const GetAppRequest& from);
  GetAppRequest(GetAppRequest&& from) noexcept
    : GetAppRequest() {
    *this = ::std::move(from);
  }

  inline GetAppRequest& operator=(const GetAppRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAppRequest& operator=(GetAppRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAppRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAppRequest* internal_default_instance() {
    return reinterpret_cast<const GetAppRequest*>(
               &_GetAppRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetAppRequest& a, GetAppRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAppRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAppRequest* New() const final {
    return CreateMaybeMessage<GetAppRequest>(nullptr);
  }

  GetAppRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAppRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAppRequest& from);
  void MergeFrom(const GetAppRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAppRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.GetAppRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserAppIdFieldNumber = 1,
  };
  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.GetAppRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListAppsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListAppsRequest) */ {
 public:
  ListAppsRequest();
  virtual ~ListAppsRequest();

  ListAppsRequest(const ListAppsRequest& from);
  ListAppsRequest(ListAppsRequest&& from) noexcept
    : ListAppsRequest() {
    *this = ::std::move(from);
  }

  inline ListAppsRequest& operator=(const ListAppsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListAppsRequest& operator=(ListAppsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListAppsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListAppsRequest* internal_default_instance() {
    return reinterpret_cast<const ListAppsRequest*>(
               &_ListAppsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ListAppsRequest& a, ListAppsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListAppsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListAppsRequest* New() const final {
    return CreateMaybeMessage<ListAppsRequest>(nullptr);
  }

  ListAppsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListAppsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListAppsRequest& from);
  void MergeFrom(const ListAppsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListAppsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListAppsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserAppIdFieldNumber = 1,
    kPageFieldNumber = 2,
    kPerPageFieldNumber = 3,
  };
  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // uint32 page = 2;
  void clear_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 page() const;
  void set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_page() const;
  void _internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 per_page = 3;
  void clear_per_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 per_page() const;
  void set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_per_page() const;
  void _internal_set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ListAppsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 page_;
  ::PROTOBUF_NAMESPACE_ID::uint32 per_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostAppsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostAppsRequest) */ {
 public:
  PostAppsRequest();
  virtual ~PostAppsRequest();

  PostAppsRequest(const PostAppsRequest& from);
  PostAppsRequest(PostAppsRequest&& from) noexcept
    : PostAppsRequest() {
    *this = ::std::move(from);
  }

  inline PostAppsRequest& operator=(const PostAppsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostAppsRequest& operator=(PostAppsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostAppsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostAppsRequest* internal_default_instance() {
    return reinterpret_cast<const PostAppsRequest*>(
               &_PostAppsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(PostAppsRequest& a, PostAppsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostAppsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostAppsRequest* New() const final {
    return CreateMaybeMessage<PostAppsRequest>(nullptr);
  }

  PostAppsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostAppsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostAppsRequest& from);
  void MergeFrom(const PostAppsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostAppsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostAppsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppsFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.App apps = 2;
  int apps_size() const;
  private:
  int _internal_apps_size() const;
  public:
  void clear_apps();
  ::clarifai::api::App* mutable_apps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::App >*
      mutable_apps();
  private:
  const ::clarifai::api::App& _internal_apps(int index) const;
  ::clarifai::api::App* _internal_add_apps();
  public:
  const ::clarifai::api::App& apps(int index) const;
  ::clarifai::api::App* add_apps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::App >&
      apps() const;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PostAppsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::App > apps_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteAppRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.DeleteAppRequest) */ {
 public:
  DeleteAppRequest();
  virtual ~DeleteAppRequest();

  DeleteAppRequest(const DeleteAppRequest& from);
  DeleteAppRequest(DeleteAppRequest&& from) noexcept
    : DeleteAppRequest() {
    *this = ::std::move(from);
  }

  inline DeleteAppRequest& operator=(const DeleteAppRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteAppRequest& operator=(DeleteAppRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteAppRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteAppRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteAppRequest*>(
               &_DeleteAppRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(DeleteAppRequest& a, DeleteAppRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteAppRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteAppRequest* New() const final {
    return CreateMaybeMessage<DeleteAppRequest>(nullptr);
  }

  DeleteAppRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteAppRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteAppRequest& from);
  void MergeFrom(const DeleteAppRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteAppRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.DeleteAppRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserAppIdFieldNumber = 1,
  };
  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.DeleteAppRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PatchAppsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PatchAppsRequest) */ {
 public:
  PatchAppsRequest();
  virtual ~PatchAppsRequest();

  PatchAppsRequest(const PatchAppsRequest& from);
  PatchAppsRequest(PatchAppsRequest&& from) noexcept
    : PatchAppsRequest() {
    *this = ::std::move(from);
  }

  inline PatchAppsRequest& operator=(const PatchAppsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatchAppsRequest& operator=(PatchAppsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PatchAppsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PatchAppsRequest* internal_default_instance() {
    return reinterpret_cast<const PatchAppsRequest*>(
               &_PatchAppsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(PatchAppsRequest& a, PatchAppsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PatchAppsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PatchAppsRequest* New() const final {
    return CreateMaybeMessage<PatchAppsRequest>(nullptr);
  }

  PatchAppsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PatchAppsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PatchAppsRequest& from);
  void MergeFrom(const PatchAppsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatchAppsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PatchAppsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppsFieldNumber = 2,
    kActionFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
    kMetadataActionFieldNumber = 4,
    kReindexFieldNumber = 5,
  };
  // repeated .clarifai.api.App apps = 2;
  int apps_size() const;
  private:
  int _internal_apps_size() const;
  public:
  void clear_apps();
  ::clarifai::api::App* mutable_apps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::App >*
      mutable_apps();
  private:
  const ::clarifai::api::App& _internal_apps(int index) const;
  ::clarifai::api::App* _internal_add_apps();
  public:
  const ::clarifai::api::App& apps(int index) const;
  ::clarifai::api::App* add_apps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::App >&
      apps() const;

  // string action = 3;
  void clear_action();
  const std::string& action() const;
  void set_action(const std::string& value);
  void set_action(std::string&& value);
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  std::string* mutable_action();
  std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // .clarifai.api.PatchAction metadata_action = 4;
  bool has_metadata_action() const;
  private:
  bool _internal_has_metadata_action() const;
  public:
  void clear_metadata_action();
  const ::clarifai::api::PatchAction& metadata_action() const;
  ::clarifai::api::PatchAction* release_metadata_action();
  ::clarifai::api::PatchAction* mutable_metadata_action();
  void set_allocated_metadata_action(::clarifai::api::PatchAction* metadata_action);
  private:
  const ::clarifai::api::PatchAction& _internal_metadata_action() const;
  ::clarifai::api::PatchAction* _internal_mutable_metadata_action();
  public:

  // bool reindex = 5;
  void clear_reindex();
  bool reindex() const;
  void set_reindex(bool value);
  private:
  bool _internal_reindex() const;
  void _internal_set_reindex(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PatchAppsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::App > apps_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::clarifai::api::PatchAction* metadata_action_;
  bool reindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class SingleAppResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.SingleAppResponse) */ {
 public:
  SingleAppResponse();
  virtual ~SingleAppResponse();

  SingleAppResponse(const SingleAppResponse& from);
  SingleAppResponse(SingleAppResponse&& from) noexcept
    : SingleAppResponse() {
    *this = ::std::move(from);
  }

  inline SingleAppResponse& operator=(const SingleAppResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleAppResponse& operator=(SingleAppResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SingleAppResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SingleAppResponse* internal_default_instance() {
    return reinterpret_cast<const SingleAppResponse*>(
               &_SingleAppResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SingleAppResponse& a, SingleAppResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleAppResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SingleAppResponse* New() const final {
    return CreateMaybeMessage<SingleAppResponse>(nullptr);
  }

  SingleAppResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SingleAppResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SingleAppResponse& from);
  void MergeFrom(const SingleAppResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleAppResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.SingleAppResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kAppFieldNumber = 2,
  };
  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // .clarifai.api.App app = 2;
  bool has_app() const;
  private:
  bool _internal_has_app() const;
  public:
  void clear_app();
  const ::clarifai::api::App& app() const;
  ::clarifai::api::App* release_app();
  ::clarifai::api::App* mutable_app();
  void set_allocated_app(::clarifai::api::App* app);
  private:
  const ::clarifai::api::App& _internal_app() const;
  ::clarifai::api::App* _internal_mutable_app();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.SingleAppResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::status::Status* status_;
  ::clarifai::api::App* app_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiAppResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiAppResponse) */ {
 public:
  MultiAppResponse();
  virtual ~MultiAppResponse();

  MultiAppResponse(const MultiAppResponse& from);
  MultiAppResponse(MultiAppResponse&& from) noexcept
    : MultiAppResponse() {
    *this = ::std::move(from);
  }

  inline MultiAppResponse& operator=(const MultiAppResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiAppResponse& operator=(MultiAppResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiAppResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiAppResponse* internal_default_instance() {
    return reinterpret_cast<const MultiAppResponse*>(
               &_MultiAppResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(MultiAppResponse& a, MultiAppResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiAppResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiAppResponse* New() const final {
    return CreateMaybeMessage<MultiAppResponse>(nullptr);
  }

  MultiAppResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiAppResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiAppResponse& from);
  void MergeFrom(const MultiAppResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiAppResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiAppResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.App apps = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int apps_size() const;
  private:
  int _internal_apps_size() const;
  public:
  void clear_apps();
  ::clarifai::api::App* mutable_apps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::App >*
      mutable_apps();
  private:
  const ::clarifai::api::App& _internal_apps(int index) const;
  ::clarifai::api::App* _internal_add_apps();
  public:
  const ::clarifai::api::App& apps(int index) const;
  ::clarifai::api::App* add_apps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::App >&
      apps() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiAppResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::App > apps_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListCollaboratorsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListCollaboratorsRequest) */ {
 public:
  ListCollaboratorsRequest();
  virtual ~ListCollaboratorsRequest();

  ListCollaboratorsRequest(const ListCollaboratorsRequest& from);
  ListCollaboratorsRequest(ListCollaboratorsRequest&& from) noexcept
    : ListCollaboratorsRequest() {
    *this = ::std::move(from);
  }

  inline ListCollaboratorsRequest& operator=(const ListCollaboratorsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListCollaboratorsRequest& operator=(ListCollaboratorsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListCollaboratorsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListCollaboratorsRequest* internal_default_instance() {
    return reinterpret_cast<const ListCollaboratorsRequest*>(
               &_ListCollaboratorsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ListCollaboratorsRequest& a, ListCollaboratorsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListCollaboratorsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListCollaboratorsRequest* New() const final {
    return CreateMaybeMessage<ListCollaboratorsRequest>(nullptr);
  }

  ListCollaboratorsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListCollaboratorsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListCollaboratorsRequest& from);
  void MergeFrom(const ListCollaboratorsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListCollaboratorsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListCollaboratorsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserAppIdFieldNumber = 1,
    kListAllCollaboratorsFieldNumber = 2,
  };
  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // bool list_all_collaborators = 2;
  void clear_list_all_collaborators();
  bool list_all_collaborators() const;
  void set_list_all_collaborators(bool value);
  private:
  bool _internal_list_all_collaborators() const;
  void _internal_set_list_all_collaborators(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ListCollaboratorsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  bool list_all_collaborators_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostCollaboratorsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostCollaboratorsRequest) */ {
 public:
  PostCollaboratorsRequest();
  virtual ~PostCollaboratorsRequest();

  PostCollaboratorsRequest(const PostCollaboratorsRequest& from);
  PostCollaboratorsRequest(PostCollaboratorsRequest&& from) noexcept
    : PostCollaboratorsRequest() {
    *this = ::std::move(from);
  }

  inline PostCollaboratorsRequest& operator=(const PostCollaboratorsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostCollaboratorsRequest& operator=(PostCollaboratorsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostCollaboratorsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostCollaboratorsRequest* internal_default_instance() {
    return reinterpret_cast<const PostCollaboratorsRequest*>(
               &_PostCollaboratorsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(PostCollaboratorsRequest& a, PostCollaboratorsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostCollaboratorsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostCollaboratorsRequest* New() const final {
    return CreateMaybeMessage<PostCollaboratorsRequest>(nullptr);
  }

  PostCollaboratorsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostCollaboratorsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostCollaboratorsRequest& from);
  void MergeFrom(const PostCollaboratorsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostCollaboratorsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostCollaboratorsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollaboratorsFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.Collaborator collaborators = 2;
  int collaborators_size() const;
  private:
  int _internal_collaborators_size() const;
  public:
  void clear_collaborators();
  ::clarifai::api::Collaborator* mutable_collaborators(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collaborator >*
      mutable_collaborators();
  private:
  const ::clarifai::api::Collaborator& _internal_collaborators(int index) const;
  ::clarifai::api::Collaborator* _internal_add_collaborators();
  public:
  const ::clarifai::api::Collaborator& collaborators(int index) const;
  ::clarifai::api::Collaborator* add_collaborators();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collaborator >&
      collaborators() const;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PostCollaboratorsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collaborator > collaborators_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PatchCollaboratorsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PatchCollaboratorsRequest) */ {
 public:
  PatchCollaboratorsRequest();
  virtual ~PatchCollaboratorsRequest();

  PatchCollaboratorsRequest(const PatchCollaboratorsRequest& from);
  PatchCollaboratorsRequest(PatchCollaboratorsRequest&& from) noexcept
    : PatchCollaboratorsRequest() {
    *this = ::std::move(from);
  }

  inline PatchCollaboratorsRequest& operator=(const PatchCollaboratorsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatchCollaboratorsRequest& operator=(PatchCollaboratorsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PatchCollaboratorsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PatchCollaboratorsRequest* internal_default_instance() {
    return reinterpret_cast<const PatchCollaboratorsRequest*>(
               &_PatchCollaboratorsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(PatchCollaboratorsRequest& a, PatchCollaboratorsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PatchCollaboratorsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PatchCollaboratorsRequest* New() const final {
    return CreateMaybeMessage<PatchCollaboratorsRequest>(nullptr);
  }

  PatchCollaboratorsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PatchCollaboratorsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PatchCollaboratorsRequest& from);
  void MergeFrom(const PatchCollaboratorsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatchCollaboratorsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PatchCollaboratorsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollaboratorsFieldNumber = 2,
    kActionFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.Collaborator collaborators = 2;
  int collaborators_size() const;
  private:
  int _internal_collaborators_size() const;
  public:
  void clear_collaborators();
  ::clarifai::api::Collaborator* mutable_collaborators(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collaborator >*
      mutable_collaborators();
  private:
  const ::clarifai::api::Collaborator& _internal_collaborators(int index) const;
  ::clarifai::api::Collaborator* _internal_add_collaborators();
  public:
  const ::clarifai::api::Collaborator& collaborators(int index) const;
  ::clarifai::api::Collaborator* add_collaborators();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collaborator >&
      collaborators() const;

  // string action = 3;
  void clear_action();
  const std::string& action() const;
  void set_action(const std::string& value);
  void set_action(std::string&& value);
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  std::string* mutable_action();
  std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PatchCollaboratorsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collaborator > collaborators_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteCollaboratorsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.DeleteCollaboratorsRequest) */ {
 public:
  DeleteCollaboratorsRequest();
  virtual ~DeleteCollaboratorsRequest();

  DeleteCollaboratorsRequest(const DeleteCollaboratorsRequest& from);
  DeleteCollaboratorsRequest(DeleteCollaboratorsRequest&& from) noexcept
    : DeleteCollaboratorsRequest() {
    *this = ::std::move(from);
  }

  inline DeleteCollaboratorsRequest& operator=(const DeleteCollaboratorsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteCollaboratorsRequest& operator=(DeleteCollaboratorsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteCollaboratorsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteCollaboratorsRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteCollaboratorsRequest*>(
               &_DeleteCollaboratorsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(DeleteCollaboratorsRequest& a, DeleteCollaboratorsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteCollaboratorsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteCollaboratorsRequest* New() const final {
    return CreateMaybeMessage<DeleteCollaboratorsRequest>(nullptr);
  }

  DeleteCollaboratorsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteCollaboratorsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteCollaboratorsRequest& from);
  void MergeFrom(const DeleteCollaboratorsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteCollaboratorsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.DeleteCollaboratorsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollaboratorIdsFieldNumber = 2,
    kUserEmailsFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
  };
  // repeated string collaborator_ids = 2;
  int collaborator_ids_size() const;
  private:
  int _internal_collaborator_ids_size() const;
  public:
  void clear_collaborator_ids();
  const std::string& collaborator_ids(int index) const;
  std::string* mutable_collaborator_ids(int index);
  void set_collaborator_ids(int index, const std::string& value);
  void set_collaborator_ids(int index, std::string&& value);
  void set_collaborator_ids(int index, const char* value);
  void set_collaborator_ids(int index, const char* value, size_t size);
  std::string* add_collaborator_ids();
  void add_collaborator_ids(const std::string& value);
  void add_collaborator_ids(std::string&& value);
  void add_collaborator_ids(const char* value);
  void add_collaborator_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& collaborator_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_collaborator_ids();
  private:
  const std::string& _internal_collaborator_ids(int index) const;
  std::string* _internal_add_collaborator_ids();
  public:

  // repeated string user_emails = 3;
  int user_emails_size() const;
  private:
  int _internal_user_emails_size() const;
  public:
  void clear_user_emails();
  const std::string& user_emails(int index) const;
  std::string* mutable_user_emails(int index);
  void set_user_emails(int index, const std::string& value);
  void set_user_emails(int index, std::string&& value);
  void set_user_emails(int index, const char* value);
  void set_user_emails(int index, const char* value, size_t size);
  std::string* add_user_emails();
  void add_user_emails(const std::string& value);
  void add_user_emails(std::string&& value);
  void add_user_emails(const char* value);
  void add_user_emails(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& user_emails() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_user_emails();
  private:
  const std::string& _internal_user_emails(int index) const;
  std::string* _internal_add_user_emails();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.DeleteCollaboratorsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> collaborator_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> user_emails_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiCollaboratorsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiCollaboratorsResponse) */ {
 public:
  MultiCollaboratorsResponse();
  virtual ~MultiCollaboratorsResponse();

  MultiCollaboratorsResponse(const MultiCollaboratorsResponse& from);
  MultiCollaboratorsResponse(MultiCollaboratorsResponse&& from) noexcept
    : MultiCollaboratorsResponse() {
    *this = ::std::move(from);
  }

  inline MultiCollaboratorsResponse& operator=(const MultiCollaboratorsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiCollaboratorsResponse& operator=(MultiCollaboratorsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiCollaboratorsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiCollaboratorsResponse* internal_default_instance() {
    return reinterpret_cast<const MultiCollaboratorsResponse*>(
               &_MultiCollaboratorsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(MultiCollaboratorsResponse& a, MultiCollaboratorsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiCollaboratorsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiCollaboratorsResponse* New() const final {
    return CreateMaybeMessage<MultiCollaboratorsResponse>(nullptr);
  }

  MultiCollaboratorsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiCollaboratorsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiCollaboratorsResponse& from);
  void MergeFrom(const MultiCollaboratorsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiCollaboratorsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiCollaboratorsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollaboratorsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.Collaborator collaborators = 2;
  int collaborators_size() const;
  private:
  int _internal_collaborators_size() const;
  public:
  void clear_collaborators();
  ::clarifai::api::Collaborator* mutable_collaborators(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collaborator >*
      mutable_collaborators();
  private:
  const ::clarifai::api::Collaborator& _internal_collaborators(int index) const;
  ::clarifai::api::Collaborator* _internal_add_collaborators();
  public:
  const ::clarifai::api::Collaborator& collaborators(int index) const;
  ::clarifai::api::Collaborator* add_collaborators();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collaborator >&
      collaborators() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiCollaboratorsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collaborator > collaborators_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListCollaborationsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListCollaborationsRequest) */ {
 public:
  ListCollaborationsRequest();
  virtual ~ListCollaborationsRequest();

  ListCollaborationsRequest(const ListCollaborationsRequest& from);
  ListCollaborationsRequest(ListCollaborationsRequest&& from) noexcept
    : ListCollaborationsRequest() {
    *this = ::std::move(from);
  }

  inline ListCollaborationsRequest& operator=(const ListCollaborationsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListCollaborationsRequest& operator=(ListCollaborationsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListCollaborationsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListCollaborationsRequest* internal_default_instance() {
    return reinterpret_cast<const ListCollaborationsRequest*>(
               &_ListCollaborationsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(ListCollaborationsRequest& a, ListCollaborationsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListCollaborationsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListCollaborationsRequest* New() const final {
    return CreateMaybeMessage<ListCollaborationsRequest>(nullptr);
  }

  ListCollaborationsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListCollaborationsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListCollaborationsRequest& from);
  void MergeFrom(const ListCollaborationsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListCollaborationsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListCollaborationsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserAppIdFieldNumber = 1,
    kPageFieldNumber = 2,
    kPerPageFieldNumber = 3,
  };
  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // uint32 page = 2;
  void clear_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 page() const;
  void set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_page() const;
  void _internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 per_page = 3;
  void clear_per_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 per_page() const;
  void set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_per_page() const;
  void _internal_set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ListCollaborationsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 page_;
  ::PROTOBUF_NAMESPACE_ID::uint32 per_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiCollaborationsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiCollaborationsResponse) */ {
 public:
  MultiCollaborationsResponse();
  virtual ~MultiCollaborationsResponse();

  MultiCollaborationsResponse(const MultiCollaborationsResponse& from);
  MultiCollaborationsResponse(MultiCollaborationsResponse&& from) noexcept
    : MultiCollaborationsResponse() {
    *this = ::std::move(from);
  }

  inline MultiCollaborationsResponse& operator=(const MultiCollaborationsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiCollaborationsResponse& operator=(MultiCollaborationsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiCollaborationsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiCollaborationsResponse* internal_default_instance() {
    return reinterpret_cast<const MultiCollaborationsResponse*>(
               &_MultiCollaborationsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(MultiCollaborationsResponse& a, MultiCollaborationsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiCollaborationsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiCollaborationsResponse* New() const final {
    return CreateMaybeMessage<MultiCollaborationsResponse>(nullptr);
  }

  MultiCollaborationsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiCollaborationsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiCollaborationsResponse& from);
  void MergeFrom(const MultiCollaborationsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiCollaborationsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiCollaborationsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollaborationsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.Collaboration collaborations = 2;
  int collaborations_size() const;
  private:
  int _internal_collaborations_size() const;
  public:
  void clear_collaborations();
  ::clarifai::api::Collaboration* mutable_collaborations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collaboration >*
      mutable_collaborations();
  private:
  const ::clarifai::api::Collaboration& _internal_collaborations(int index) const;
  ::clarifai::api::Collaboration* _internal_add_collaborations();
  public:
  const ::clarifai::api::Collaboration& collaborations(int index) const;
  ::clarifai::api::Collaboration* add_collaborations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collaboration >&
      collaborations() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiCollaborationsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collaboration > collaborations_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostVerifyEmailRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostVerifyEmailRequest) */ {
 public:
  PostVerifyEmailRequest();
  virtual ~PostVerifyEmailRequest();

  PostVerifyEmailRequest(const PostVerifyEmailRequest& from);
  PostVerifyEmailRequest(PostVerifyEmailRequest&& from) noexcept
    : PostVerifyEmailRequest() {
    *this = ::std::move(from);
  }

  inline PostVerifyEmailRequest& operator=(const PostVerifyEmailRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostVerifyEmailRequest& operator=(PostVerifyEmailRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostVerifyEmailRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostVerifyEmailRequest* internal_default_instance() {
    return reinterpret_cast<const PostVerifyEmailRequest*>(
               &_PostVerifyEmailRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(PostVerifyEmailRequest& a, PostVerifyEmailRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostVerifyEmailRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostVerifyEmailRequest* New() const final {
    return CreateMaybeMessage<PostVerifyEmailRequest>(nullptr);
  }

  PostVerifyEmailRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostVerifyEmailRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostVerifyEmailRequest& from);
  void MergeFrom(const PostVerifyEmailRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostVerifyEmailRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostVerifyEmailRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PostVerifyEmailRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class SingleVerifyEmailResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.SingleVerifyEmailResponse) */ {
 public:
  SingleVerifyEmailResponse();
  virtual ~SingleVerifyEmailResponse();

  SingleVerifyEmailResponse(const SingleVerifyEmailResponse& from);
  SingleVerifyEmailResponse(SingleVerifyEmailResponse&& from) noexcept
    : SingleVerifyEmailResponse() {
    *this = ::std::move(from);
  }

  inline SingleVerifyEmailResponse& operator=(const SingleVerifyEmailResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleVerifyEmailResponse& operator=(SingleVerifyEmailResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SingleVerifyEmailResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SingleVerifyEmailResponse* internal_default_instance() {
    return reinterpret_cast<const SingleVerifyEmailResponse*>(
               &_SingleVerifyEmailResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(SingleVerifyEmailResponse& a, SingleVerifyEmailResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleVerifyEmailResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SingleVerifyEmailResponse* New() const final {
    return CreateMaybeMessage<SingleVerifyEmailResponse>(nullptr);
  }

  SingleVerifyEmailResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SingleVerifyEmailResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SingleVerifyEmailResponse& from);
  void MergeFrom(const SingleVerifyEmailResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleVerifyEmailResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.SingleVerifyEmailResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.SingleVerifyEmailResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListAuthMethodsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListAuthMethodsRequest) */ {
 public:
  ListAuthMethodsRequest();
  virtual ~ListAuthMethodsRequest();

  ListAuthMethodsRequest(const ListAuthMethodsRequest& from);
  ListAuthMethodsRequest(ListAuthMethodsRequest&& from) noexcept
    : ListAuthMethodsRequest() {
    *this = ::std::move(from);
  }

  inline ListAuthMethodsRequest& operator=(const ListAuthMethodsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListAuthMethodsRequest& operator=(ListAuthMethodsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListAuthMethodsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListAuthMethodsRequest* internal_default_instance() {
    return reinterpret_cast<const ListAuthMethodsRequest*>(
               &_ListAuthMethodsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(ListAuthMethodsRequest& a, ListAuthMethodsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListAuthMethodsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListAuthMethodsRequest* New() const final {
    return CreateMaybeMessage<ListAuthMethodsRequest>(nullptr);
  }

  ListAuthMethodsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListAuthMethodsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListAuthMethodsRequest& from);
  void MergeFrom(const ListAuthMethodsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListAuthMethodsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListAuthMethodsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:clarifai.api.ListAuthMethodsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListAuthMethodsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListAuthMethodsResponse) */ {
 public:
  ListAuthMethodsResponse();
  virtual ~ListAuthMethodsResponse();

  ListAuthMethodsResponse(const ListAuthMethodsResponse& from);
  ListAuthMethodsResponse(ListAuthMethodsResponse&& from) noexcept
    : ListAuthMethodsResponse() {
    *this = ::std::move(from);
  }

  inline ListAuthMethodsResponse& operator=(const ListAuthMethodsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListAuthMethodsResponse& operator=(ListAuthMethodsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListAuthMethodsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListAuthMethodsResponse* internal_default_instance() {
    return reinterpret_cast<const ListAuthMethodsResponse*>(
               &_ListAuthMethodsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(ListAuthMethodsResponse& a, ListAuthMethodsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListAuthMethodsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListAuthMethodsResponse* New() const final {
    return CreateMaybeMessage<ListAuthMethodsResponse>(nullptr);
  }

  ListAuthMethodsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListAuthMethodsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListAuthMethodsResponse& from);
  void MergeFrom(const ListAuthMethodsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListAuthMethodsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListAuthMethodsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthMethodsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.AuthMethod auth_methods = 2;
  int auth_methods_size() const;
  private:
  int _internal_auth_methods_size() const;
  public:
  void clear_auth_methods();
  ::clarifai::api::AuthMethod* mutable_auth_methods(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::AuthMethod >*
      mutable_auth_methods();
  private:
  const ::clarifai::api::AuthMethod& _internal_auth_methods(int index) const;
  ::clarifai::api::AuthMethod* _internal_add_auth_methods();
  public:
  const ::clarifai::api::AuthMethod& auth_methods(int index) const;
  ::clarifai::api::AuthMethod* add_auth_methods();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::AuthMethod >&
      auth_methods() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ListAuthMethodsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::AuthMethod > auth_methods_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class RequestResetPasswordRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.RequestResetPasswordRequest) */ {
 public:
  RequestResetPasswordRequest();
  virtual ~RequestResetPasswordRequest();

  RequestResetPasswordRequest(const RequestResetPasswordRequest& from);
  RequestResetPasswordRequest(RequestResetPasswordRequest&& from) noexcept
    : RequestResetPasswordRequest() {
    *this = ::std::move(from);
  }

  inline RequestResetPasswordRequest& operator=(const RequestResetPasswordRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestResetPasswordRequest& operator=(RequestResetPasswordRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestResetPasswordRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestResetPasswordRequest* internal_default_instance() {
    return reinterpret_cast<const RequestResetPasswordRequest*>(
               &_RequestResetPasswordRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(RequestResetPasswordRequest& a, RequestResetPasswordRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestResetPasswordRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestResetPasswordRequest* New() const final {
    return CreateMaybeMessage<RequestResetPasswordRequest>(nullptr);
  }

  RequestResetPasswordRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestResetPasswordRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestResetPasswordRequest& from);
  void MergeFrom(const RequestResetPasswordRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestResetPasswordRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.RequestResetPasswordRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 1,
  };
  // string email = 1;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.RequestResetPasswordRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class CompleteResetPasswordRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.CompleteResetPasswordRequest) */ {
 public:
  CompleteResetPasswordRequest();
  virtual ~CompleteResetPasswordRequest();

  CompleteResetPasswordRequest(const CompleteResetPasswordRequest& from);
  CompleteResetPasswordRequest(CompleteResetPasswordRequest&& from) noexcept
    : CompleteResetPasswordRequest() {
    *this = ::std::move(from);
  }

  inline CompleteResetPasswordRequest& operator=(const CompleteResetPasswordRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompleteResetPasswordRequest& operator=(CompleteResetPasswordRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CompleteResetPasswordRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CompleteResetPasswordRequest* internal_default_instance() {
    return reinterpret_cast<const CompleteResetPasswordRequest*>(
               &_CompleteResetPasswordRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(CompleteResetPasswordRequest& a, CompleteResetPasswordRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CompleteResetPasswordRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CompleteResetPasswordRequest* New() const final {
    return CreateMaybeMessage<CompleteResetPasswordRequest>(nullptr);
  }

  CompleteResetPasswordRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompleteResetPasswordRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CompleteResetPasswordRequest& from);
  void MergeFrom(const CompleteResetPasswordRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompleteResetPasswordRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.CompleteResetPasswordRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kNewPasswordFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string new_password = 2;
  void clear_new_password();
  const std::string& new_password() const;
  void set_new_password(const std::string& value);
  void set_new_password(std::string&& value);
  void set_new_password(const char* value);
  void set_new_password(const char* value, size_t size);
  std::string* mutable_new_password();
  std::string* release_new_password();
  void set_allocated_new_password(std::string* new_password);
  private:
  const std::string& _internal_new_password() const;
  void _internal_set_new_password(const std::string& value);
  std::string* _internal_mutable_new_password();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.CompleteResetPasswordRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr new_password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostLoginRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostLoginRequest) */ {
 public:
  PostLoginRequest();
  virtual ~PostLoginRequest();

  PostLoginRequest(const PostLoginRequest& from);
  PostLoginRequest(PostLoginRequest&& from) noexcept
    : PostLoginRequest() {
    *this = ::std::move(from);
  }

  inline PostLoginRequest& operator=(const PostLoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostLoginRequest& operator=(PostLoginRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostLoginRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostLoginRequest* internal_default_instance() {
    return reinterpret_cast<const PostLoginRequest*>(
               &_PostLoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(PostLoginRequest& a, PostLoginRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostLoginRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostLoginRequest* New() const final {
    return CreateMaybeMessage<PostLoginRequest>(nullptr);
  }

  PostLoginRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostLoginRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostLoginRequest& from);
  void MergeFrom(const PostLoginRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostLoginRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostLoginRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kLongLivedFieldNumber = 3,
  };
  // string email = 1;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // bool long_lived = 3;
  void clear_long_lived();
  bool long_lived() const;
  void set_long_lived(bool value);
  private:
  bool _internal_long_lived() const;
  void _internal_set_long_lived(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PostLoginRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  bool long_lived_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostSignupRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostSignupRequest) */ {
 public:
  PostSignupRequest();
  virtual ~PostSignupRequest();

  PostSignupRequest(const PostSignupRequest& from);
  PostSignupRequest(PostSignupRequest&& from) noexcept
    : PostSignupRequest() {
    *this = ::std::move(from);
  }

  inline PostSignupRequest& operator=(const PostSignupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostSignupRequest& operator=(PostSignupRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostSignupRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostSignupRequest* internal_default_instance() {
    return reinterpret_cast<const PostSignupRequest*>(
               &_PostSignupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(PostSignupRequest& a, PostSignupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostSignupRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostSignupRequest* New() const final {
    return CreateMaybeMessage<PostSignupRequest>(nullptr);
  }

  PostSignupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostSignupRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostSignupRequest& from);
  void MergeFrom(const PostSignupRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostSignupRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostSignupRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kFirstNameFieldNumber = 3,
    kLastNameFieldNumber = 4,
    kCompanyNameFieldNumber = 5,
    kCaptchaResponseTokenFieldNumber = 6,
    kAwsRegistrationTokenFieldNumber = 7,
    kGdprConsentFieldNumber = 8,
    kTosConsentFieldNumber = 9,
    kMarketingConsentFieldNumber = 10,
  };
  // string email = 1;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // string first_name = 3;
  void clear_first_name();
  const std::string& first_name() const;
  void set_first_name(const std::string& value);
  void set_first_name(std::string&& value);
  void set_first_name(const char* value);
  void set_first_name(const char* value, size_t size);
  std::string* mutable_first_name();
  std::string* release_first_name();
  void set_allocated_first_name(std::string* first_name);
  private:
  const std::string& _internal_first_name() const;
  void _internal_set_first_name(const std::string& value);
  std::string* _internal_mutable_first_name();
  public:

  // string last_name = 4;
  void clear_last_name();
  const std::string& last_name() const;
  void set_last_name(const std::string& value);
  void set_last_name(std::string&& value);
  void set_last_name(const char* value);
  void set_last_name(const char* value, size_t size);
  std::string* mutable_last_name();
  std::string* release_last_name();
  void set_allocated_last_name(std::string* last_name);
  private:
  const std::string& _internal_last_name() const;
  void _internal_set_last_name(const std::string& value);
  std::string* _internal_mutable_last_name();
  public:

  // string company_name = 5;
  void clear_company_name();
  const std::string& company_name() const;
  void set_company_name(const std::string& value);
  void set_company_name(std::string&& value);
  void set_company_name(const char* value);
  void set_company_name(const char* value, size_t size);
  std::string* mutable_company_name();
  std::string* release_company_name();
  void set_allocated_company_name(std::string* company_name);
  private:
  const std::string& _internal_company_name() const;
  void _internal_set_company_name(const std::string& value);
  std::string* _internal_mutable_company_name();
  public:

  // string captcha_response_token = 6;
  void clear_captcha_response_token();
  const std::string& captcha_response_token() const;
  void set_captcha_response_token(const std::string& value);
  void set_captcha_response_token(std::string&& value);
  void set_captcha_response_token(const char* value);
  void set_captcha_response_token(const char* value, size_t size);
  std::string* mutable_captcha_response_token();
  std::string* release_captcha_response_token();
  void set_allocated_captcha_response_token(std::string* captcha_response_token);
  private:
  const std::string& _internal_captcha_response_token() const;
  void _internal_set_captcha_response_token(const std::string& value);
  std::string* _internal_mutable_captcha_response_token();
  public:

  // string aws_registration_token = 7;
  void clear_aws_registration_token();
  const std::string& aws_registration_token() const;
  void set_aws_registration_token(const std::string& value);
  void set_aws_registration_token(std::string&& value);
  void set_aws_registration_token(const char* value);
  void set_aws_registration_token(const char* value, size_t size);
  std::string* mutable_aws_registration_token();
  std::string* release_aws_registration_token();
  void set_allocated_aws_registration_token(std::string* aws_registration_token);
  private:
  const std::string& _internal_aws_registration_token() const;
  void _internal_set_aws_registration_token(const std::string& value);
  std::string* _internal_mutable_aws_registration_token();
  public:

  // bool gdpr_consent = 8;
  void clear_gdpr_consent();
  bool gdpr_consent() const;
  void set_gdpr_consent(bool value);
  private:
  bool _internal_gdpr_consent() const;
  void _internal_set_gdpr_consent(bool value);
  public:

  // bool tos_consent = 9;
  void clear_tos_consent();
  bool tos_consent() const;
  void set_tos_consent(bool value);
  private:
  bool _internal_tos_consent() const;
  void _internal_set_tos_consent(bool value);
  public:

  // bool marketing_consent = 10;
  void clear_marketing_consent();
  bool marketing_consent() const;
  void set_marketing_consent(bool value);
  private:
  bool _internal_marketing_consent() const;
  void _internal_set_marketing_consent(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PostSignupRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr first_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr company_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr captcha_response_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr aws_registration_token_;
  bool gdpr_consent_;
  bool tos_consent_;
  bool marketing_consent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class SingleLoginResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.SingleLoginResponse) */ {
 public:
  SingleLoginResponse();
  virtual ~SingleLoginResponse();

  SingleLoginResponse(const SingleLoginResponse& from);
  SingleLoginResponse(SingleLoginResponse&& from) noexcept
    : SingleLoginResponse() {
    *this = ::std::move(from);
  }

  inline SingleLoginResponse& operator=(const SingleLoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleLoginResponse& operator=(SingleLoginResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SingleLoginResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SingleLoginResponse* internal_default_instance() {
    return reinterpret_cast<const SingleLoginResponse*>(
               &_SingleLoginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(SingleLoginResponse& a, SingleLoginResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleLoginResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SingleLoginResponse* New() const final {
    return CreateMaybeMessage<SingleLoginResponse>(nullptr);
  }

  SingleLoginResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SingleLoginResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SingleLoginResponse& from);
  void MergeFrom(const SingleLoginResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleLoginResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.SingleLoginResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailAddressesFieldNumber = 8,
    kEmailFieldNumber = 2,
    kFirstNameFieldNumber = 3,
    kLastNameFieldNumber = 4,
    kCompanyNameFieldNumber = 5,
    kDateJoinedFieldNumber = 6,
    kSessionTokenFieldNumber = 9,
    kTokenExpiresFieldNumber = 10,
    kV2UserIdFieldNumber = 11,
    kDateGdprConsentFieldNumber = 12,
    kDateTosConsentFieldNumber = 13,
    kDateMarketingConsentFieldNumber = 14,
    kPasswordExpiredAtFieldNumber = 15,
    kStatusFieldNumber = 1,
    kIsNewUserFieldNumber = 16,
  };
  // repeated .clarifai.api.EmailAddress email_addresses = 8;
  int email_addresses_size() const;
  private:
  int _internal_email_addresses_size() const;
  public:
  void clear_email_addresses();
  ::clarifai::api::EmailAddress* mutable_email_addresses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::EmailAddress >*
      mutable_email_addresses();
  private:
  const ::clarifai::api::EmailAddress& _internal_email_addresses(int index) const;
  ::clarifai::api::EmailAddress* _internal_add_email_addresses();
  public:
  const ::clarifai::api::EmailAddress& email_addresses(int index) const;
  ::clarifai::api::EmailAddress* add_email_addresses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::EmailAddress >&
      email_addresses() const;

  // string email = 2;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string first_name = 3;
  void clear_first_name();
  const std::string& first_name() const;
  void set_first_name(const std::string& value);
  void set_first_name(std::string&& value);
  void set_first_name(const char* value);
  void set_first_name(const char* value, size_t size);
  std::string* mutable_first_name();
  std::string* release_first_name();
  void set_allocated_first_name(std::string* first_name);
  private:
  const std::string& _internal_first_name() const;
  void _internal_set_first_name(const std::string& value);
  std::string* _internal_mutable_first_name();
  public:

  // string last_name = 4;
  void clear_last_name();
  const std::string& last_name() const;
  void set_last_name(const std::string& value);
  void set_last_name(std::string&& value);
  void set_last_name(const char* value);
  void set_last_name(const char* value, size_t size);
  std::string* mutable_last_name();
  std::string* release_last_name();
  void set_allocated_last_name(std::string* last_name);
  private:
  const std::string& _internal_last_name() const;
  void _internal_set_last_name(const std::string& value);
  std::string* _internal_mutable_last_name();
  public:

  // string company_name = 5;
  void clear_company_name();
  const std::string& company_name() const;
  void set_company_name(const std::string& value);
  void set_company_name(std::string&& value);
  void set_company_name(const char* value);
  void set_company_name(const char* value, size_t size);
  std::string* mutable_company_name();
  std::string* release_company_name();
  void set_allocated_company_name(std::string* company_name);
  private:
  const std::string& _internal_company_name() const;
  void _internal_set_company_name(const std::string& value);
  std::string* _internal_mutable_company_name();
  public:

  // string date_joined = 6;
  void clear_date_joined();
  const std::string& date_joined() const;
  void set_date_joined(const std::string& value);
  void set_date_joined(std::string&& value);
  void set_date_joined(const char* value);
  void set_date_joined(const char* value, size_t size);
  std::string* mutable_date_joined();
  std::string* release_date_joined();
  void set_allocated_date_joined(std::string* date_joined);
  private:
  const std::string& _internal_date_joined() const;
  void _internal_set_date_joined(const std::string& value);
  std::string* _internal_mutable_date_joined();
  public:

  // string session_token = 9;
  void clear_session_token();
  const std::string& session_token() const;
  void set_session_token(const std::string& value);
  void set_session_token(std::string&& value);
  void set_session_token(const char* value);
  void set_session_token(const char* value, size_t size);
  std::string* mutable_session_token();
  std::string* release_session_token();
  void set_allocated_session_token(std::string* session_token);
  private:
  const std::string& _internal_session_token() const;
  void _internal_set_session_token(const std::string& value);
  std::string* _internal_mutable_session_token();
  public:

  // string token_expires = 10;
  void clear_token_expires();
  const std::string& token_expires() const;
  void set_token_expires(const std::string& value);
  void set_token_expires(std::string&& value);
  void set_token_expires(const char* value);
  void set_token_expires(const char* value, size_t size);
  std::string* mutable_token_expires();
  std::string* release_token_expires();
  void set_allocated_token_expires(std::string* token_expires);
  private:
  const std::string& _internal_token_expires() const;
  void _internal_set_token_expires(const std::string& value);
  std::string* _internal_mutable_token_expires();
  public:

  // string v2_user_id = 11;
  void clear_v2_user_id();
  const std::string& v2_user_id() const;
  void set_v2_user_id(const std::string& value);
  void set_v2_user_id(std::string&& value);
  void set_v2_user_id(const char* value);
  void set_v2_user_id(const char* value, size_t size);
  std::string* mutable_v2_user_id();
  std::string* release_v2_user_id();
  void set_allocated_v2_user_id(std::string* v2_user_id);
  private:
  const std::string& _internal_v2_user_id() const;
  void _internal_set_v2_user_id(const std::string& value);
  std::string* _internal_mutable_v2_user_id();
  public:

  // string date_gdpr_consent = 12;
  void clear_date_gdpr_consent();
  const std::string& date_gdpr_consent() const;
  void set_date_gdpr_consent(const std::string& value);
  void set_date_gdpr_consent(std::string&& value);
  void set_date_gdpr_consent(const char* value);
  void set_date_gdpr_consent(const char* value, size_t size);
  std::string* mutable_date_gdpr_consent();
  std::string* release_date_gdpr_consent();
  void set_allocated_date_gdpr_consent(std::string* date_gdpr_consent);
  private:
  const std::string& _internal_date_gdpr_consent() const;
  void _internal_set_date_gdpr_consent(const std::string& value);
  std::string* _internal_mutable_date_gdpr_consent();
  public:

  // string date_tos_consent = 13;
  void clear_date_tos_consent();
  const std::string& date_tos_consent() const;
  void set_date_tos_consent(const std::string& value);
  void set_date_tos_consent(std::string&& value);
  void set_date_tos_consent(const char* value);
  void set_date_tos_consent(const char* value, size_t size);
  std::string* mutable_date_tos_consent();
  std::string* release_date_tos_consent();
  void set_allocated_date_tos_consent(std::string* date_tos_consent);
  private:
  const std::string& _internal_date_tos_consent() const;
  void _internal_set_date_tos_consent(const std::string& value);
  std::string* _internal_mutable_date_tos_consent();
  public:

  // string date_marketing_consent = 14;
  void clear_date_marketing_consent();
  const std::string& date_marketing_consent() const;
  void set_date_marketing_consent(const std::string& value);
  void set_date_marketing_consent(std::string&& value);
  void set_date_marketing_consent(const char* value);
  void set_date_marketing_consent(const char* value, size_t size);
  std::string* mutable_date_marketing_consent();
  std::string* release_date_marketing_consent();
  void set_allocated_date_marketing_consent(std::string* date_marketing_consent);
  private:
  const std::string& _internal_date_marketing_consent() const;
  void _internal_set_date_marketing_consent(const std::string& value);
  std::string* _internal_mutable_date_marketing_consent();
  public:

  // string password_expired_at = 15;
  void clear_password_expired_at();
  const std::string& password_expired_at() const;
  void set_password_expired_at(const std::string& value);
  void set_password_expired_at(std::string&& value);
  void set_password_expired_at(const char* value);
  void set_password_expired_at(const char* value, size_t size);
  std::string* mutable_password_expired_at();
  std::string* release_password_expired_at();
  void set_allocated_password_expired_at(std::string* password_expired_at);
  private:
  const std::string& _internal_password_expired_at() const;
  void _internal_set_password_expired_at(const std::string& value);
  std::string* _internal_mutable_password_expired_at();
  public:

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // bool is_new_user = 16;
  void clear_is_new_user();
  bool is_new_user() const;
  void set_is_new_user(bool value);
  private:
  bool _internal_is_new_user() const;
  void _internal_set_is_new_user(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.SingleLoginResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::EmailAddress > email_addresses_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr first_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr company_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_joined_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_expires_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr v2_user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_gdpr_consent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_tos_consent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_marketing_consent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_expired_at_;
  ::clarifai::api::status::Status* status_;
  bool is_new_user_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class GetBillingUsageRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.GetBillingUsageRequest) */ {
 public:
  GetBillingUsageRequest();
  virtual ~GetBillingUsageRequest();

  GetBillingUsageRequest(const GetBillingUsageRequest& from);
  GetBillingUsageRequest(GetBillingUsageRequest&& from) noexcept
    : GetBillingUsageRequest() {
    *this = ::std::move(from);
  }

  inline GetBillingUsageRequest& operator=(const GetBillingUsageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBillingUsageRequest& operator=(GetBillingUsageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBillingUsageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBillingUsageRequest* internal_default_instance() {
    return reinterpret_cast<const GetBillingUsageRequest*>(
               &_GetBillingUsageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(GetBillingUsageRequest& a, GetBillingUsageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBillingUsageRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBillingUsageRequest* New() const final {
    return CreateMaybeMessage<GetBillingUsageRequest>(nullptr);
  }

  GetBillingUsageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBillingUsageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBillingUsageRequest& from);
  void MergeFrom(const GetBillingUsageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBillingUsageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.GetBillingUsageRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:clarifai.api.GetBillingUsageRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class GetBillingUsageResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.GetBillingUsageResponse) */ {
 public:
  GetBillingUsageResponse();
  virtual ~GetBillingUsageResponse();

  GetBillingUsageResponse(const GetBillingUsageResponse& from);
  GetBillingUsageResponse(GetBillingUsageResponse&& from) noexcept
    : GetBillingUsageResponse() {
    *this = ::std::move(from);
  }

  inline GetBillingUsageResponse& operator=(const GetBillingUsageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBillingUsageResponse& operator=(GetBillingUsageResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBillingUsageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBillingUsageResponse* internal_default_instance() {
    return reinterpret_cast<const GetBillingUsageResponse*>(
               &_GetBillingUsageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(GetBillingUsageResponse& a, GetBillingUsageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBillingUsageResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBillingUsageResponse* New() const final {
    return CreateMaybeMessage<GetBillingUsageResponse>(nullptr);
  }

  GetBillingUsageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBillingUsageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBillingUsageResponse& from);
  void MergeFrom(const GetBillingUsageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBillingUsageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.GetBillingUsageResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInvoiceItemsFieldNumber = 2,
    kStatusFieldNumber = 1,
    kBillingCycleFieldNumber = 3,
  };
  // repeated .clarifai.api.InvoiceItem invoice_items = 2;
  int invoice_items_size() const;
  private:
  int _internal_invoice_items_size() const;
  public:
  void clear_invoice_items();
  ::clarifai::api::InvoiceItem* mutable_invoice_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::InvoiceItem >*
      mutable_invoice_items();
  private:
  const ::clarifai::api::InvoiceItem& _internal_invoice_items(int index) const;
  ::clarifai::api::InvoiceItem* _internal_add_invoice_items();
  public:
  const ::clarifai::api::InvoiceItem& invoice_items(int index) const;
  ::clarifai::api::InvoiceItem* add_invoice_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::InvoiceItem >&
      invoice_items() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // .clarifai.api.BillingCycle billing_cycle = 3;
  bool has_billing_cycle() const;
  private:
  bool _internal_has_billing_cycle() const;
  public:
  void clear_billing_cycle();
  const ::clarifai::api::BillingCycle& billing_cycle() const;
  ::clarifai::api::BillingCycle* release_billing_cycle();
  ::clarifai::api::BillingCycle* mutable_billing_cycle();
  void set_allocated_billing_cycle(::clarifai::api::BillingCycle* billing_cycle);
  private:
  const ::clarifai::api::BillingCycle& _internal_billing_cycle() const;
  ::clarifai::api::BillingCycle* _internal_mutable_billing_cycle();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.GetBillingUsageResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::InvoiceItem > invoice_items_;
  ::clarifai::api::status::Status* status_;
  ::clarifai::api::BillingCycle* billing_cycle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class GetStatusCodeRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.GetStatusCodeRequest) */ {
 public:
  GetStatusCodeRequest();
  virtual ~GetStatusCodeRequest();

  GetStatusCodeRequest(const GetStatusCodeRequest& from);
  GetStatusCodeRequest(GetStatusCodeRequest&& from) noexcept
    : GetStatusCodeRequest() {
    *this = ::std::move(from);
  }

  inline GetStatusCodeRequest& operator=(const GetStatusCodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStatusCodeRequest& operator=(GetStatusCodeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetStatusCodeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetStatusCodeRequest* internal_default_instance() {
    return reinterpret_cast<const GetStatusCodeRequest*>(
               &_GetStatusCodeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(GetStatusCodeRequest& a, GetStatusCodeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStatusCodeRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetStatusCodeRequest* New() const final {
    return CreateMaybeMessage<GetStatusCodeRequest>(nullptr);
  }

  GetStatusCodeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetStatusCodeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetStatusCodeRequest& from);
  void MergeFrom(const GetStatusCodeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStatusCodeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.GetStatusCodeRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusCodeIdFieldNumber = 1,
  };
  // string status_code_id = 1;
  void clear_status_code_id();
  const std::string& status_code_id() const;
  void set_status_code_id(const std::string& value);
  void set_status_code_id(std::string&& value);
  void set_status_code_id(const char* value);
  void set_status_code_id(const char* value, size_t size);
  std::string* mutable_status_code_id();
  std::string* release_status_code_id();
  void set_allocated_status_code_id(std::string* status_code_id);
  private:
  const std::string& _internal_status_code_id() const;
  void _internal_set_status_code_id(const std::string& value);
  std::string* _internal_mutable_status_code_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.GetStatusCodeRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_code_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListStatusCodesRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListStatusCodesRequest) */ {
 public:
  ListStatusCodesRequest();
  virtual ~ListStatusCodesRequest();

  ListStatusCodesRequest(const ListStatusCodesRequest& from);
  ListStatusCodesRequest(ListStatusCodesRequest&& from) noexcept
    : ListStatusCodesRequest() {
    *this = ::std::move(from);
  }

  inline ListStatusCodesRequest& operator=(const ListStatusCodesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListStatusCodesRequest& operator=(ListStatusCodesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListStatusCodesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListStatusCodesRequest* internal_default_instance() {
    return reinterpret_cast<const ListStatusCodesRequest*>(
               &_ListStatusCodesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(ListStatusCodesRequest& a, ListStatusCodesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListStatusCodesRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListStatusCodesRequest* New() const final {
    return CreateMaybeMessage<ListStatusCodesRequest>(nullptr);
  }

  ListStatusCodesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListStatusCodesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListStatusCodesRequest& from);
  void MergeFrom(const ListStatusCodesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListStatusCodesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListStatusCodesRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:clarifai.api.ListStatusCodesRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class SingleStatusCodeResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.SingleStatusCodeResponse) */ {
 public:
  SingleStatusCodeResponse();
  virtual ~SingleStatusCodeResponse();

  SingleStatusCodeResponse(const SingleStatusCodeResponse& from);
  SingleStatusCodeResponse(SingleStatusCodeResponse&& from) noexcept
    : SingleStatusCodeResponse() {
    *this = ::std::move(from);
  }

  inline SingleStatusCodeResponse& operator=(const SingleStatusCodeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleStatusCodeResponse& operator=(SingleStatusCodeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SingleStatusCodeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SingleStatusCodeResponse* internal_default_instance() {
    return reinterpret_cast<const SingleStatusCodeResponse*>(
               &_SingleStatusCodeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(SingleStatusCodeResponse& a, SingleStatusCodeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleStatusCodeResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SingleStatusCodeResponse* New() const final {
    return CreateMaybeMessage<SingleStatusCodeResponse>(nullptr);
  }

  SingleStatusCodeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SingleStatusCodeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SingleStatusCodeResponse& from);
  void MergeFrom(const SingleStatusCodeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleStatusCodeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.SingleStatusCodeResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.SingleStatusCodeResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiStatusCodeResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiStatusCodeResponse) */ {
 public:
  MultiStatusCodeResponse();
  virtual ~MultiStatusCodeResponse();

  MultiStatusCodeResponse(const MultiStatusCodeResponse& from);
  MultiStatusCodeResponse(MultiStatusCodeResponse&& from) noexcept
    : MultiStatusCodeResponse() {
    *this = ::std::move(from);
  }

  inline MultiStatusCodeResponse& operator=(const MultiStatusCodeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiStatusCodeResponse& operator=(MultiStatusCodeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiStatusCodeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiStatusCodeResponse* internal_default_instance() {
    return reinterpret_cast<const MultiStatusCodeResponse*>(
               &_MultiStatusCodeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(MultiStatusCodeResponse& a, MultiStatusCodeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiStatusCodeResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiStatusCodeResponse* New() const final {
    return CreateMaybeMessage<MultiStatusCodeResponse>(nullptr);
  }

  MultiStatusCodeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiStatusCodeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiStatusCodeResponse& from);
  void MergeFrom(const MultiStatusCodeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiStatusCodeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiStatusCodeResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusesFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.status.Status statuses = 2;
  int statuses_size() const;
  private:
  int _internal_statuses_size() const;
  public:
  void clear_statuses();
  ::clarifai::api::status::Status* mutable_statuses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::status::Status >*
      mutable_statuses();
  private:
  const ::clarifai::api::status::Status& _internal_statuses(int index) const;
  ::clarifai::api::status::Status* _internal_add_statuses();
  public:
  const ::clarifai::api::status::Status& statuses(int index) const;
  ::clarifai::api::status::Status* add_statuses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::status::Status >&
      statuses() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiStatusCodeResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::status::Status > statuses_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class GetConceptRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.GetConceptRequest) */ {
 public:
  GetConceptRequest();
  virtual ~GetConceptRequest();

  GetConceptRequest(const GetConceptRequest& from);
  GetConceptRequest(GetConceptRequest&& from) noexcept
    : GetConceptRequest() {
    *this = ::std::move(from);
  }

  inline GetConceptRequest& operator=(const GetConceptRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetConceptRequest& operator=(GetConceptRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetConceptRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetConceptRequest* internal_default_instance() {
    return reinterpret_cast<const GetConceptRequest*>(
               &_GetConceptRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(GetConceptRequest& a, GetConceptRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetConceptRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetConceptRequest* New() const final {
    return CreateMaybeMessage<GetConceptRequest>(nullptr);
  }

  GetConceptRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetConceptRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetConceptRequest& from);
  void MergeFrom(const GetConceptRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetConceptRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.GetConceptRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConceptIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // string concept_id = 2;
  void clear_concept_id();
  const std::string& concept_id() const;
  void set_concept_id(const std::string& value);
  void set_concept_id(std::string&& value);
  void set_concept_id(const char* value);
  void set_concept_id(const char* value, size_t size);
  std::string* mutable_concept_id();
  std::string* release_concept_id();
  void set_allocated_concept_id(std::string* concept_id);
  private:
  const std::string& _internal_concept_id() const;
  void _internal_set_concept_id(const std::string& value);
  std::string* _internal_mutable_concept_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.GetConceptRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr concept_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListConceptsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListConceptsRequest) */ {
 public:
  ListConceptsRequest();
  virtual ~ListConceptsRequest();

  ListConceptsRequest(const ListConceptsRequest& from);
  ListConceptsRequest(ListConceptsRequest&& from) noexcept
    : ListConceptsRequest() {
    *this = ::std::move(from);
  }

  inline ListConceptsRequest& operator=(const ListConceptsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListConceptsRequest& operator=(ListConceptsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListConceptsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListConceptsRequest* internal_default_instance() {
    return reinterpret_cast<const ListConceptsRequest*>(
               &_ListConceptsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(ListConceptsRequest& a, ListConceptsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListConceptsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListConceptsRequest* New() const final {
    return CreateMaybeMessage<ListConceptsRequest>(nullptr);
  }

  ListConceptsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListConceptsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListConceptsRequest& from);
  void MergeFrom(const ListConceptsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListConceptsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListConceptsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserAppIdFieldNumber = 1,
    kPageFieldNumber = 2,
    kPerPageFieldNumber = 3,
  };
  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // uint32 page = 2;
  void clear_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 page() const;
  void set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_page() const;
  void _internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 per_page = 3;
  void clear_per_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 per_page() const;
  void set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_per_page() const;
  void _internal_set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ListConceptsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 page_;
  ::PROTOBUF_NAMESPACE_ID::uint32 per_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostConceptsSearchesRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostConceptsSearchesRequest) */ {
 public:
  PostConceptsSearchesRequest();
  virtual ~PostConceptsSearchesRequest();

  PostConceptsSearchesRequest(const PostConceptsSearchesRequest& from);
  PostConceptsSearchesRequest(PostConceptsSearchesRequest&& from) noexcept
    : PostConceptsSearchesRequest() {
    *this = ::std::move(from);
  }

  inline PostConceptsSearchesRequest& operator=(const PostConceptsSearchesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostConceptsSearchesRequest& operator=(PostConceptsSearchesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostConceptsSearchesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostConceptsSearchesRequest* internal_default_instance() {
    return reinterpret_cast<const PostConceptsSearchesRequest*>(
               &_PostConceptsSearchesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(PostConceptsSearchesRequest& a, PostConceptsSearchesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostConceptsSearchesRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostConceptsSearchesRequest* New() const final {
    return CreateMaybeMessage<PostConceptsSearchesRequest>(nullptr);
  }

  PostConceptsSearchesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostConceptsSearchesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostConceptsSearchesRequest& from);
  void MergeFrom(const PostConceptsSearchesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostConceptsSearchesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostConceptsSearchesRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserAppIdFieldNumber = 1,
    kConceptQueryFieldNumber = 2,
    kPaginationFieldNumber = 3,
  };
  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // .clarifai.api.ConceptQuery concept_query = 2;
  bool has_concept_query() const;
  private:
  bool _internal_has_concept_query() const;
  public:
  void clear_concept_query();
  const ::clarifai::api::ConceptQuery& concept_query() const;
  ::clarifai::api::ConceptQuery* release_concept_query();
  ::clarifai::api::ConceptQuery* mutable_concept_query();
  void set_allocated_concept_query(::clarifai::api::ConceptQuery* concept_query);
  private:
  const ::clarifai::api::ConceptQuery& _internal_concept_query() const;
  ::clarifai::api::ConceptQuery* _internal_mutable_concept_query();
  public:

  // .clarifai.api.Pagination pagination = 3;
  bool has_pagination() const;
  private:
  bool _internal_has_pagination() const;
  public:
  void clear_pagination();
  const ::clarifai::api::Pagination& pagination() const;
  ::clarifai::api::Pagination* release_pagination();
  ::clarifai::api::Pagination* mutable_pagination();
  void set_allocated_pagination(::clarifai::api::Pagination* pagination);
  private:
  const ::clarifai::api::Pagination& _internal_pagination() const;
  ::clarifai::api::Pagination* _internal_mutable_pagination();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PostConceptsSearchesRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::clarifai::api::ConceptQuery* concept_query_;
  ::clarifai::api::Pagination* pagination_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostConceptsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostConceptsRequest) */ {
 public:
  PostConceptsRequest();
  virtual ~PostConceptsRequest();

  PostConceptsRequest(const PostConceptsRequest& from);
  PostConceptsRequest(PostConceptsRequest&& from) noexcept
    : PostConceptsRequest() {
    *this = ::std::move(from);
  }

  inline PostConceptsRequest& operator=(const PostConceptsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostConceptsRequest& operator=(PostConceptsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostConceptsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostConceptsRequest* internal_default_instance() {
    return reinterpret_cast<const PostConceptsRequest*>(
               &_PostConceptsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(PostConceptsRequest& a, PostConceptsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostConceptsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostConceptsRequest* New() const final {
    return CreateMaybeMessage<PostConceptsRequest>(nullptr);
  }

  PostConceptsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostConceptsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostConceptsRequest& from);
  void MergeFrom(const PostConceptsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostConceptsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostConceptsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConceptsFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.Concept concepts = 2;
  int concepts_size() const;
  private:
  int _internal_concepts_size() const;
  public:
  void clear_concepts();
  ::clarifai::api::Concept* mutable_concepts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >*
      mutable_concepts();
  private:
  const ::clarifai::api::Concept& _internal_concepts(int index) const;
  ::clarifai::api::Concept* _internal_add_concepts();
  public:
  const ::clarifai::api::Concept& concepts(int index) const;
  ::clarifai::api::Concept* add_concepts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >&
      concepts() const;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PostConceptsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept > concepts_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PatchConceptsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PatchConceptsRequest) */ {
 public:
  PatchConceptsRequest();
  virtual ~PatchConceptsRequest();

  PatchConceptsRequest(const PatchConceptsRequest& from);
  PatchConceptsRequest(PatchConceptsRequest&& from) noexcept
    : PatchConceptsRequest() {
    *this = ::std::move(from);
  }

  inline PatchConceptsRequest& operator=(const PatchConceptsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatchConceptsRequest& operator=(PatchConceptsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PatchConceptsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PatchConceptsRequest* internal_default_instance() {
    return reinterpret_cast<const PatchConceptsRequest*>(
               &_PatchConceptsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(PatchConceptsRequest& a, PatchConceptsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PatchConceptsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PatchConceptsRequest* New() const final {
    return CreateMaybeMessage<PatchConceptsRequest>(nullptr);
  }

  PatchConceptsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PatchConceptsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PatchConceptsRequest& from);
  void MergeFrom(const PatchConceptsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatchConceptsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PatchConceptsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConceptsFieldNumber = 2,
    kActionFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.Concept concepts = 2;
  int concepts_size() const;
  private:
  int _internal_concepts_size() const;
  public:
  void clear_concepts();
  ::clarifai::api::Concept* mutable_concepts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >*
      mutable_concepts();
  private:
  const ::clarifai::api::Concept& _internal_concepts(int index) const;
  ::clarifai::api::Concept* _internal_add_concepts();
  public:
  const ::clarifai::api::Concept& concepts(int index) const;
  ::clarifai::api::Concept* add_concepts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >&
      concepts() const;

  // string action = 3;
  void clear_action();
  const std::string& action() const;
  void set_action(const std::string& value);
  void set_action(std::string&& value);
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  std::string* mutable_action();
  std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PatchConceptsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept > concepts_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class GetConceptCountsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.GetConceptCountsRequest) */ {
 public:
  GetConceptCountsRequest();
  virtual ~GetConceptCountsRequest();

  GetConceptCountsRequest(const GetConceptCountsRequest& from);
  GetConceptCountsRequest(GetConceptCountsRequest&& from) noexcept
    : GetConceptCountsRequest() {
    *this = ::std::move(from);
  }

  inline GetConceptCountsRequest& operator=(const GetConceptCountsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetConceptCountsRequest& operator=(GetConceptCountsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetConceptCountsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetConceptCountsRequest* internal_default_instance() {
    return reinterpret_cast<const GetConceptCountsRequest*>(
               &_GetConceptCountsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(GetConceptCountsRequest& a, GetConceptCountsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetConceptCountsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetConceptCountsRequest* New() const final {
    return CreateMaybeMessage<GetConceptCountsRequest>(nullptr);
  }

  GetConceptCountsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetConceptCountsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetConceptCountsRequest& from);
  void MergeFrom(const GetConceptCountsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetConceptCountsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.GetConceptCountsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserAppIdFieldNumber = 1,
    kPageFieldNumber = 2,
    kPerPageFieldNumber = 3,
  };
  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // uint32 page = 2;
  void clear_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 page() const;
  void set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_page() const;
  void _internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 per_page = 3;
  void clear_per_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 per_page() const;
  void set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_per_page() const;
  void _internal_set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.GetConceptCountsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 page_;
  ::PROTOBUF_NAMESPACE_ID::uint32 per_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class SingleConceptResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.SingleConceptResponse) */ {
 public:
  SingleConceptResponse();
  virtual ~SingleConceptResponse();

  SingleConceptResponse(const SingleConceptResponse& from);
  SingleConceptResponse(SingleConceptResponse&& from) noexcept
    : SingleConceptResponse() {
    *this = ::std::move(from);
  }

  inline SingleConceptResponse& operator=(const SingleConceptResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleConceptResponse& operator=(SingleConceptResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SingleConceptResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SingleConceptResponse* internal_default_instance() {
    return reinterpret_cast<const SingleConceptResponse*>(
               &_SingleConceptResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(SingleConceptResponse& a, SingleConceptResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleConceptResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SingleConceptResponse* New() const final {
    return CreateMaybeMessage<SingleConceptResponse>(nullptr);
  }

  SingleConceptResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SingleConceptResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SingleConceptResponse& from);
  void MergeFrom(const SingleConceptResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleConceptResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.SingleConceptResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kConceptFieldNumber = 2,
  };
  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // .clarifai.api.Concept concept = 2;
  bool has_concept() const;
  private:
  bool _internal_has_concept() const;
  public:
  void clear_concept();
  const ::clarifai::api::Concept& concept() const;
  ::clarifai::api::Concept* release_concept();
  ::clarifai::api::Concept* mutable_concept();
  void set_allocated_concept(::clarifai::api::Concept* concept);
  private:
  const ::clarifai::api::Concept& _internal_concept() const;
  ::clarifai::api::Concept* _internal_mutable_concept();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.SingleConceptResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::status::Status* status_;
  ::clarifai::api::Concept* concept_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiConceptResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiConceptResponse) */ {
 public:
  MultiConceptResponse();
  virtual ~MultiConceptResponse();

  MultiConceptResponse(const MultiConceptResponse& from);
  MultiConceptResponse(MultiConceptResponse&& from) noexcept
    : MultiConceptResponse() {
    *this = ::std::move(from);
  }

  inline MultiConceptResponse& operator=(const MultiConceptResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiConceptResponse& operator=(MultiConceptResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiConceptResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiConceptResponse* internal_default_instance() {
    return reinterpret_cast<const MultiConceptResponse*>(
               &_MultiConceptResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(MultiConceptResponse& a, MultiConceptResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiConceptResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiConceptResponse* New() const final {
    return CreateMaybeMessage<MultiConceptResponse>(nullptr);
  }

  MultiConceptResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiConceptResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiConceptResponse& from);
  void MergeFrom(const MultiConceptResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiConceptResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiConceptResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConceptsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.Concept concepts = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int concepts_size() const;
  private:
  int _internal_concepts_size() const;
  public:
  void clear_concepts();
  ::clarifai::api::Concept* mutable_concepts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >*
      mutable_concepts();
  private:
  const ::clarifai::api::Concept& _internal_concepts(int index) const;
  ::clarifai::api::Concept* _internal_add_concepts();
  public:
  const ::clarifai::api::Concept& concepts(int index) const;
  ::clarifai::api::Concept* add_concepts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >&
      concepts() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiConceptResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept > concepts_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiConceptCountResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiConceptCountResponse) */ {
 public:
  MultiConceptCountResponse();
  virtual ~MultiConceptCountResponse();

  MultiConceptCountResponse(const MultiConceptCountResponse& from);
  MultiConceptCountResponse(MultiConceptCountResponse&& from) noexcept
    : MultiConceptCountResponse() {
    *this = ::std::move(from);
  }

  inline MultiConceptCountResponse& operator=(const MultiConceptCountResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiConceptCountResponse& operator=(MultiConceptCountResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiConceptCountResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiConceptCountResponse* internal_default_instance() {
    return reinterpret_cast<const MultiConceptCountResponse*>(
               &_MultiConceptCountResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(MultiConceptCountResponse& a, MultiConceptCountResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiConceptCountResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiConceptCountResponse* New() const final {
    return CreateMaybeMessage<MultiConceptCountResponse>(nullptr);
  }

  MultiConceptCountResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiConceptCountResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiConceptCountResponse& from);
  void MergeFrom(const MultiConceptCountResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiConceptCountResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiConceptCountResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConceptCountsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.ConceptCount concept_counts = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int concept_counts_size() const;
  private:
  int _internal_concept_counts_size() const;
  public:
  void clear_concept_counts();
  ::clarifai::api::ConceptCount* mutable_concept_counts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptCount >*
      mutable_concept_counts();
  private:
  const ::clarifai::api::ConceptCount& _internal_concept_counts(int index) const;
  ::clarifai::api::ConceptCount* _internal_add_concept_counts();
  public:
  const ::clarifai::api::ConceptCount& concept_counts(int index) const;
  ::clarifai::api::ConceptCount* add_concept_counts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptCount >&
      concept_counts() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiConceptCountResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptCount > concept_counts_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListConceptRelationsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListConceptRelationsRequest) */ {
 public:
  ListConceptRelationsRequest();
  virtual ~ListConceptRelationsRequest();

  ListConceptRelationsRequest(const ListConceptRelationsRequest& from);
  ListConceptRelationsRequest(ListConceptRelationsRequest&& from) noexcept
    : ListConceptRelationsRequest() {
    *this = ::std::move(from);
  }

  inline ListConceptRelationsRequest& operator=(const ListConceptRelationsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListConceptRelationsRequest& operator=(ListConceptRelationsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListConceptRelationsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListConceptRelationsRequest* internal_default_instance() {
    return reinterpret_cast<const ListConceptRelationsRequest*>(
               &_ListConceptRelationsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(ListConceptRelationsRequest& a, ListConceptRelationsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListConceptRelationsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListConceptRelationsRequest* New() const final {
    return CreateMaybeMessage<ListConceptRelationsRequest>(nullptr);
  }

  ListConceptRelationsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListConceptRelationsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListConceptRelationsRequest& from);
  void MergeFrom(const ListConceptRelationsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListConceptRelationsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListConceptRelationsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConceptIdFieldNumber = 2,
    kPredicateFieldNumber = 3,
    kKnowledgeGraphIdFieldNumber = 4,
    kUserAppIdFieldNumber = 1,
    kPageFieldNumber = 5,
    kPerPageFieldNumber = 6,
  };
  // string concept_id = 2;
  void clear_concept_id();
  const std::string& concept_id() const;
  void set_concept_id(const std::string& value);
  void set_concept_id(std::string&& value);
  void set_concept_id(const char* value);
  void set_concept_id(const char* value, size_t size);
  std::string* mutable_concept_id();
  std::string* release_concept_id();
  void set_allocated_concept_id(std::string* concept_id);
  private:
  const std::string& _internal_concept_id() const;
  void _internal_set_concept_id(const std::string& value);
  std::string* _internal_mutable_concept_id();
  public:

  // string predicate = 3;
  void clear_predicate();
  const std::string& predicate() const;
  void set_predicate(const std::string& value);
  void set_predicate(std::string&& value);
  void set_predicate(const char* value);
  void set_predicate(const char* value, size_t size);
  std::string* mutable_predicate();
  std::string* release_predicate();
  void set_allocated_predicate(std::string* predicate);
  private:
  const std::string& _internal_predicate() const;
  void _internal_set_predicate(const std::string& value);
  std::string* _internal_mutable_predicate();
  public:

  // string knowledge_graph_id = 4;
  void clear_knowledge_graph_id();
  const std::string& knowledge_graph_id() const;
  void set_knowledge_graph_id(const std::string& value);
  void set_knowledge_graph_id(std::string&& value);
  void set_knowledge_graph_id(const char* value);
  void set_knowledge_graph_id(const char* value, size_t size);
  std::string* mutable_knowledge_graph_id();
  std::string* release_knowledge_graph_id();
  void set_allocated_knowledge_graph_id(std::string* knowledge_graph_id);
  private:
  const std::string& _internal_knowledge_graph_id() const;
  void _internal_set_knowledge_graph_id(const std::string& value);
  std::string* _internal_mutable_knowledge_graph_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // uint32 page = 5;
  void clear_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 page() const;
  void set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_page() const;
  void _internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 per_page = 6;
  void clear_per_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 per_page() const;
  void set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_per_page() const;
  void _internal_set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ListConceptRelationsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr concept_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr predicate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr knowledge_graph_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 page_;
  ::PROTOBUF_NAMESPACE_ID::uint32 per_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostConceptRelationsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostConceptRelationsRequest) */ {
 public:
  PostConceptRelationsRequest();
  virtual ~PostConceptRelationsRequest();

  PostConceptRelationsRequest(const PostConceptRelationsRequest& from);
  PostConceptRelationsRequest(PostConceptRelationsRequest&& from) noexcept
    : PostConceptRelationsRequest() {
    *this = ::std::move(from);
  }

  inline PostConceptRelationsRequest& operator=(const PostConceptRelationsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostConceptRelationsRequest& operator=(PostConceptRelationsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostConceptRelationsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostConceptRelationsRequest* internal_default_instance() {
    return reinterpret_cast<const PostConceptRelationsRequest*>(
               &_PostConceptRelationsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(PostConceptRelationsRequest& a, PostConceptRelationsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostConceptRelationsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostConceptRelationsRequest* New() const final {
    return CreateMaybeMessage<PostConceptRelationsRequest>(nullptr);
  }

  PostConceptRelationsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostConceptRelationsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostConceptRelationsRequest& from);
  void MergeFrom(const PostConceptRelationsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostConceptRelationsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostConceptRelationsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConceptRelationsFieldNumber = 3,
    kConceptIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.ConceptRelation concept_relations = 3;
  int concept_relations_size() const;
  private:
  int _internal_concept_relations_size() const;
  public:
  void clear_concept_relations();
  ::clarifai::api::ConceptRelation* mutable_concept_relations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptRelation >*
      mutable_concept_relations();
  private:
  const ::clarifai::api::ConceptRelation& _internal_concept_relations(int index) const;
  ::clarifai::api::ConceptRelation* _internal_add_concept_relations();
  public:
  const ::clarifai::api::ConceptRelation& concept_relations(int index) const;
  ::clarifai::api::ConceptRelation* add_concept_relations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptRelation >&
      concept_relations() const;

  // string concept_id = 2;
  void clear_concept_id();
  const std::string& concept_id() const;
  void set_concept_id(const std::string& value);
  void set_concept_id(std::string&& value);
  void set_concept_id(const char* value);
  void set_concept_id(const char* value, size_t size);
  std::string* mutable_concept_id();
  std::string* release_concept_id();
  void set_allocated_concept_id(std::string* concept_id);
  private:
  const std::string& _internal_concept_id() const;
  void _internal_set_concept_id(const std::string& value);
  std::string* _internal_mutable_concept_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PostConceptRelationsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptRelation > concept_relations_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr concept_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteConceptRelationsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.DeleteConceptRelationsRequest) */ {
 public:
  DeleteConceptRelationsRequest();
  virtual ~DeleteConceptRelationsRequest();

  DeleteConceptRelationsRequest(const DeleteConceptRelationsRequest& from);
  DeleteConceptRelationsRequest(DeleteConceptRelationsRequest&& from) noexcept
    : DeleteConceptRelationsRequest() {
    *this = ::std::move(from);
  }

  inline DeleteConceptRelationsRequest& operator=(const DeleteConceptRelationsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteConceptRelationsRequest& operator=(DeleteConceptRelationsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteConceptRelationsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteConceptRelationsRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteConceptRelationsRequest*>(
               &_DeleteConceptRelationsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(DeleteConceptRelationsRequest& a, DeleteConceptRelationsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteConceptRelationsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteConceptRelationsRequest* New() const final {
    return CreateMaybeMessage<DeleteConceptRelationsRequest>(nullptr);
  }

  DeleteConceptRelationsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteConceptRelationsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteConceptRelationsRequest& from);
  void MergeFrom(const DeleteConceptRelationsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteConceptRelationsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.DeleteConceptRelationsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 3,
    kConceptIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // repeated string ids = 3;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  const std::string& ids(int index) const;
  std::string* mutable_ids(int index);
  void set_ids(int index, const std::string& value);
  void set_ids(int index, std::string&& value);
  void set_ids(int index, const char* value);
  void set_ids(int index, const char* value, size_t size);
  std::string* add_ids();
  void add_ids(const std::string& value);
  void add_ids(std::string&& value);
  void add_ids(const char* value);
  void add_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ids();
  private:
  const std::string& _internal_ids(int index) const;
  std::string* _internal_add_ids();
  public:

  // string concept_id = 2;
  void clear_concept_id();
  const std::string& concept_id() const;
  void set_concept_id(const std::string& value);
  void set_concept_id(std::string&& value);
  void set_concept_id(const char* value);
  void set_concept_id(const char* value, size_t size);
  std::string* mutable_concept_id();
  std::string* release_concept_id();
  void set_allocated_concept_id(std::string* concept_id);
  private:
  const std::string& _internal_concept_id() const;
  void _internal_set_concept_id(const std::string& value);
  std::string* _internal_mutable_concept_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.DeleteConceptRelationsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr concept_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListKnowledgeGraphsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListKnowledgeGraphsRequest) */ {
 public:
  ListKnowledgeGraphsRequest();
  virtual ~ListKnowledgeGraphsRequest();

  ListKnowledgeGraphsRequest(const ListKnowledgeGraphsRequest& from);
  ListKnowledgeGraphsRequest(ListKnowledgeGraphsRequest&& from) noexcept
    : ListKnowledgeGraphsRequest() {
    *this = ::std::move(from);
  }

  inline ListKnowledgeGraphsRequest& operator=(const ListKnowledgeGraphsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListKnowledgeGraphsRequest& operator=(ListKnowledgeGraphsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListKnowledgeGraphsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListKnowledgeGraphsRequest* internal_default_instance() {
    return reinterpret_cast<const ListKnowledgeGraphsRequest*>(
               &_ListKnowledgeGraphsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(ListKnowledgeGraphsRequest& a, ListKnowledgeGraphsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListKnowledgeGraphsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListKnowledgeGraphsRequest* New() const final {
    return CreateMaybeMessage<ListKnowledgeGraphsRequest>(nullptr);
  }

  ListKnowledgeGraphsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListKnowledgeGraphsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListKnowledgeGraphsRequest& from);
  void MergeFrom(const ListKnowledgeGraphsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListKnowledgeGraphsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListKnowledgeGraphsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserAppIdFieldNumber = 1,
  };
  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ListKnowledgeGraphsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostKnowledgeGraphsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostKnowledgeGraphsRequest) */ {
 public:
  PostKnowledgeGraphsRequest();
  virtual ~PostKnowledgeGraphsRequest();

  PostKnowledgeGraphsRequest(const PostKnowledgeGraphsRequest& from);
  PostKnowledgeGraphsRequest(PostKnowledgeGraphsRequest&& from) noexcept
    : PostKnowledgeGraphsRequest() {
    *this = ::std::move(from);
  }

  inline PostKnowledgeGraphsRequest& operator=(const PostKnowledgeGraphsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostKnowledgeGraphsRequest& operator=(PostKnowledgeGraphsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostKnowledgeGraphsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostKnowledgeGraphsRequest* internal_default_instance() {
    return reinterpret_cast<const PostKnowledgeGraphsRequest*>(
               &_PostKnowledgeGraphsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(PostKnowledgeGraphsRequest& a, PostKnowledgeGraphsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostKnowledgeGraphsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostKnowledgeGraphsRequest* New() const final {
    return CreateMaybeMessage<PostKnowledgeGraphsRequest>(nullptr);
  }

  PostKnowledgeGraphsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostKnowledgeGraphsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostKnowledgeGraphsRequest& from);
  void MergeFrom(const PostKnowledgeGraphsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostKnowledgeGraphsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostKnowledgeGraphsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKnowledgeGraphsFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.KnowledgeGraph knowledge_graphs = 2;
  int knowledge_graphs_size() const;
  private:
  int _internal_knowledge_graphs_size() const;
  public:
  void clear_knowledge_graphs();
  ::clarifai::api::KnowledgeGraph* mutable_knowledge_graphs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::KnowledgeGraph >*
      mutable_knowledge_graphs();
  private:
  const ::clarifai::api::KnowledgeGraph& _internal_knowledge_graphs(int index) const;
  ::clarifai::api::KnowledgeGraph* _internal_add_knowledge_graphs();
  public:
  const ::clarifai::api::KnowledgeGraph& knowledge_graphs(int index) const;
  ::clarifai::api::KnowledgeGraph* add_knowledge_graphs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::KnowledgeGraph >&
      knowledge_graphs() const;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PostKnowledgeGraphsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::KnowledgeGraph > knowledge_graphs_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListConceptMappingsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListConceptMappingsRequest) */ {
 public:
  ListConceptMappingsRequest();
  virtual ~ListConceptMappingsRequest();

  ListConceptMappingsRequest(const ListConceptMappingsRequest& from);
  ListConceptMappingsRequest(ListConceptMappingsRequest&& from) noexcept
    : ListConceptMappingsRequest() {
    *this = ::std::move(from);
  }

  inline ListConceptMappingsRequest& operator=(const ListConceptMappingsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListConceptMappingsRequest& operator=(ListConceptMappingsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListConceptMappingsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListConceptMappingsRequest* internal_default_instance() {
    return reinterpret_cast<const ListConceptMappingsRequest*>(
               &_ListConceptMappingsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(ListConceptMappingsRequest& a, ListConceptMappingsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListConceptMappingsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListConceptMappingsRequest* New() const final {
    return CreateMaybeMessage<ListConceptMappingsRequest>(nullptr);
  }

  ListConceptMappingsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListConceptMappingsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListConceptMappingsRequest& from);
  void MergeFrom(const ListConceptMappingsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListConceptMappingsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListConceptMappingsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserAppIdFieldNumber = 1,
    kPageFieldNumber = 2,
    kPerPageFieldNumber = 3,
  };
  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // uint32 page = 2;
  void clear_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 page() const;
  void set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_page() const;
  void _internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 per_page = 3;
  void clear_per_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 per_page() const;
  void set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_per_page() const;
  void _internal_set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ListConceptMappingsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 page_;
  ::PROTOBUF_NAMESPACE_ID::uint32 per_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostConceptMappingsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostConceptMappingsRequest) */ {
 public:
  PostConceptMappingsRequest();
  virtual ~PostConceptMappingsRequest();

  PostConceptMappingsRequest(const PostConceptMappingsRequest& from);
  PostConceptMappingsRequest(PostConceptMappingsRequest&& from) noexcept
    : PostConceptMappingsRequest() {
    *this = ::std::move(from);
  }

  inline PostConceptMappingsRequest& operator=(const PostConceptMappingsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostConceptMappingsRequest& operator=(PostConceptMappingsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostConceptMappingsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostConceptMappingsRequest* internal_default_instance() {
    return reinterpret_cast<const PostConceptMappingsRequest*>(
               &_PostConceptMappingsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(PostConceptMappingsRequest& a, PostConceptMappingsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostConceptMappingsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostConceptMappingsRequest* New() const final {
    return CreateMaybeMessage<PostConceptMappingsRequest>(nullptr);
  }

  PostConceptMappingsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostConceptMappingsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostConceptMappingsRequest& from);
  void MergeFrom(const PostConceptMappingsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostConceptMappingsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostConceptMappingsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConceptMappingsFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
    kKnowledgeGraphFieldNumber = 3,
  };
  // repeated .clarifai.api.ConceptMapping concept_mappings = 2;
  int concept_mappings_size() const;
  private:
  int _internal_concept_mappings_size() const;
  public:
  void clear_concept_mappings();
  ::clarifai::api::ConceptMapping* mutable_concept_mappings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptMapping >*
      mutable_concept_mappings();
  private:
  const ::clarifai::api::ConceptMapping& _internal_concept_mappings(int index) const;
  ::clarifai::api::ConceptMapping* _internal_add_concept_mappings();
  public:
  const ::clarifai::api::ConceptMapping& concept_mappings(int index) const;
  ::clarifai::api::ConceptMapping* add_concept_mappings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptMapping >&
      concept_mappings() const;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // .clarifai.api.KnowledgeGraph knowledge_graph = 3;
  bool has_knowledge_graph() const;
  private:
  bool _internal_has_knowledge_graph() const;
  public:
  void clear_knowledge_graph();
  const ::clarifai::api::KnowledgeGraph& knowledge_graph() const;
  ::clarifai::api::KnowledgeGraph* release_knowledge_graph();
  ::clarifai::api::KnowledgeGraph* mutable_knowledge_graph();
  void set_allocated_knowledge_graph(::clarifai::api::KnowledgeGraph* knowledge_graph);
  private:
  const ::clarifai::api::KnowledgeGraph& _internal_knowledge_graph() const;
  ::clarifai::api::KnowledgeGraph* _internal_mutable_knowledge_graph();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PostConceptMappingsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptMapping > concept_mappings_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::clarifai::api::KnowledgeGraph* knowledge_graph_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostConceptMappingJobsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostConceptMappingJobsRequest) */ {
 public:
  PostConceptMappingJobsRequest();
  virtual ~PostConceptMappingJobsRequest();

  PostConceptMappingJobsRequest(const PostConceptMappingJobsRequest& from);
  PostConceptMappingJobsRequest(PostConceptMappingJobsRequest&& from) noexcept
    : PostConceptMappingJobsRequest() {
    *this = ::std::move(from);
  }

  inline PostConceptMappingJobsRequest& operator=(const PostConceptMappingJobsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostConceptMappingJobsRequest& operator=(PostConceptMappingJobsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostConceptMappingJobsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostConceptMappingJobsRequest* internal_default_instance() {
    return reinterpret_cast<const PostConceptMappingJobsRequest*>(
               &_PostConceptMappingJobsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(PostConceptMappingJobsRequest& a, PostConceptMappingJobsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostConceptMappingJobsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostConceptMappingJobsRequest* New() const final {
    return CreateMaybeMessage<PostConceptMappingJobsRequest>(nullptr);
  }

  PostConceptMappingJobsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostConceptMappingJobsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostConceptMappingJobsRequest& from);
  void MergeFrom(const PostConceptMappingJobsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostConceptMappingJobsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostConceptMappingJobsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConceptMappingJobsFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.ConceptMappingJob concept_mapping_jobs = 2;
  int concept_mapping_jobs_size() const;
  private:
  int _internal_concept_mapping_jobs_size() const;
  public:
  void clear_concept_mapping_jobs();
  ::clarifai::api::ConceptMappingJob* mutable_concept_mapping_jobs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptMappingJob >*
      mutable_concept_mapping_jobs();
  private:
  const ::clarifai::api::ConceptMappingJob& _internal_concept_mapping_jobs(int index) const;
  ::clarifai::api::ConceptMappingJob* _internal_add_concept_mapping_jobs();
  public:
  const ::clarifai::api::ConceptMappingJob& concept_mapping_jobs(int index) const;
  ::clarifai::api::ConceptMappingJob* add_concept_mapping_jobs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptMappingJob >&
      concept_mapping_jobs() const;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PostConceptMappingJobsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptMappingJob > concept_mapping_jobs_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class SingleConceptRelationResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.SingleConceptRelationResponse) */ {
 public:
  SingleConceptRelationResponse();
  virtual ~SingleConceptRelationResponse();

  SingleConceptRelationResponse(const SingleConceptRelationResponse& from);
  SingleConceptRelationResponse(SingleConceptRelationResponse&& from) noexcept
    : SingleConceptRelationResponse() {
    *this = ::std::move(from);
  }

  inline SingleConceptRelationResponse& operator=(const SingleConceptRelationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleConceptRelationResponse& operator=(SingleConceptRelationResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SingleConceptRelationResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SingleConceptRelationResponse* internal_default_instance() {
    return reinterpret_cast<const SingleConceptRelationResponse*>(
               &_SingleConceptRelationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(SingleConceptRelationResponse& a, SingleConceptRelationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleConceptRelationResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SingleConceptRelationResponse* New() const final {
    return CreateMaybeMessage<SingleConceptRelationResponse>(nullptr);
  }

  SingleConceptRelationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SingleConceptRelationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SingleConceptRelationResponse& from);
  void MergeFrom(const SingleConceptRelationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleConceptRelationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.SingleConceptRelationResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kConceptRelationFieldNumber = 2,
  };
  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // .clarifai.api.ConceptRelation concept_relation = 2;
  bool has_concept_relation() const;
  private:
  bool _internal_has_concept_relation() const;
  public:
  void clear_concept_relation();
  const ::clarifai::api::ConceptRelation& concept_relation() const;
  ::clarifai::api::ConceptRelation* release_concept_relation();
  ::clarifai::api::ConceptRelation* mutable_concept_relation();
  void set_allocated_concept_relation(::clarifai::api::ConceptRelation* concept_relation);
  private:
  const ::clarifai::api::ConceptRelation& _internal_concept_relation() const;
  ::clarifai::api::ConceptRelation* _internal_mutable_concept_relation();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.SingleConceptRelationResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::status::Status* status_;
  ::clarifai::api::ConceptRelation* concept_relation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiConceptRelationResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiConceptRelationResponse) */ {
 public:
  MultiConceptRelationResponse();
  virtual ~MultiConceptRelationResponse();

  MultiConceptRelationResponse(const MultiConceptRelationResponse& from);
  MultiConceptRelationResponse(MultiConceptRelationResponse&& from) noexcept
    : MultiConceptRelationResponse() {
    *this = ::std::move(from);
  }

  inline MultiConceptRelationResponse& operator=(const MultiConceptRelationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiConceptRelationResponse& operator=(MultiConceptRelationResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiConceptRelationResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiConceptRelationResponse* internal_default_instance() {
    return reinterpret_cast<const MultiConceptRelationResponse*>(
               &_MultiConceptRelationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(MultiConceptRelationResponse& a, MultiConceptRelationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiConceptRelationResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiConceptRelationResponse* New() const final {
    return CreateMaybeMessage<MultiConceptRelationResponse>(nullptr);
  }

  MultiConceptRelationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiConceptRelationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiConceptRelationResponse& from);
  void MergeFrom(const MultiConceptRelationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiConceptRelationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiConceptRelationResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConceptRelationsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.ConceptRelation concept_relations = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int concept_relations_size() const;
  private:
  int _internal_concept_relations_size() const;
  public:
  void clear_concept_relations();
  ::clarifai::api::ConceptRelation* mutable_concept_relations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptRelation >*
      mutable_concept_relations();
  private:
  const ::clarifai::api::ConceptRelation& _internal_concept_relations(int index) const;
  ::clarifai::api::ConceptRelation* _internal_add_concept_relations();
  public:
  const ::clarifai::api::ConceptRelation& concept_relations(int index) const;
  ::clarifai::api::ConceptRelation* add_concept_relations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptRelation >&
      concept_relations() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiConceptRelationResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptRelation > concept_relations_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class SingleKnowledgeGraphResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.SingleKnowledgeGraphResponse) */ {
 public:
  SingleKnowledgeGraphResponse();
  virtual ~SingleKnowledgeGraphResponse();

  SingleKnowledgeGraphResponse(const SingleKnowledgeGraphResponse& from);
  SingleKnowledgeGraphResponse(SingleKnowledgeGraphResponse&& from) noexcept
    : SingleKnowledgeGraphResponse() {
    *this = ::std::move(from);
  }

  inline SingleKnowledgeGraphResponse& operator=(const SingleKnowledgeGraphResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleKnowledgeGraphResponse& operator=(SingleKnowledgeGraphResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SingleKnowledgeGraphResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SingleKnowledgeGraphResponse* internal_default_instance() {
    return reinterpret_cast<const SingleKnowledgeGraphResponse*>(
               &_SingleKnowledgeGraphResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(SingleKnowledgeGraphResponse& a, SingleKnowledgeGraphResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleKnowledgeGraphResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SingleKnowledgeGraphResponse* New() const final {
    return CreateMaybeMessage<SingleKnowledgeGraphResponse>(nullptr);
  }

  SingleKnowledgeGraphResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SingleKnowledgeGraphResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SingleKnowledgeGraphResponse& from);
  void MergeFrom(const SingleKnowledgeGraphResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleKnowledgeGraphResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.SingleKnowledgeGraphResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kKnowledgeGraphFieldNumber = 2,
  };
  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // .clarifai.api.KnowledgeGraph knowledge_graph = 2;
  bool has_knowledge_graph() const;
  private:
  bool _internal_has_knowledge_graph() const;
  public:
  void clear_knowledge_graph();
  const ::clarifai::api::KnowledgeGraph& knowledge_graph() const;
  ::clarifai::api::KnowledgeGraph* release_knowledge_graph();
  ::clarifai::api::KnowledgeGraph* mutable_knowledge_graph();
  void set_allocated_knowledge_graph(::clarifai::api::KnowledgeGraph* knowledge_graph);
  private:
  const ::clarifai::api::KnowledgeGraph& _internal_knowledge_graph() const;
  ::clarifai::api::KnowledgeGraph* _internal_mutable_knowledge_graph();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.SingleKnowledgeGraphResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::status::Status* status_;
  ::clarifai::api::KnowledgeGraph* knowledge_graph_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiKnowledgeGraphResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiKnowledgeGraphResponse) */ {
 public:
  MultiKnowledgeGraphResponse();
  virtual ~MultiKnowledgeGraphResponse();

  MultiKnowledgeGraphResponse(const MultiKnowledgeGraphResponse& from);
  MultiKnowledgeGraphResponse(MultiKnowledgeGraphResponse&& from) noexcept
    : MultiKnowledgeGraphResponse() {
    *this = ::std::move(from);
  }

  inline MultiKnowledgeGraphResponse& operator=(const MultiKnowledgeGraphResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiKnowledgeGraphResponse& operator=(MultiKnowledgeGraphResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiKnowledgeGraphResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiKnowledgeGraphResponse* internal_default_instance() {
    return reinterpret_cast<const MultiKnowledgeGraphResponse*>(
               &_MultiKnowledgeGraphResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(MultiKnowledgeGraphResponse& a, MultiKnowledgeGraphResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiKnowledgeGraphResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiKnowledgeGraphResponse* New() const final {
    return CreateMaybeMessage<MultiKnowledgeGraphResponse>(nullptr);
  }

  MultiKnowledgeGraphResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiKnowledgeGraphResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiKnowledgeGraphResponse& from);
  void MergeFrom(const MultiKnowledgeGraphResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiKnowledgeGraphResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiKnowledgeGraphResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKnowledgeGraphsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.KnowledgeGraph knowledge_graphs = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int knowledge_graphs_size() const;
  private:
  int _internal_knowledge_graphs_size() const;
  public:
  void clear_knowledge_graphs();
  ::clarifai::api::KnowledgeGraph* mutable_knowledge_graphs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::KnowledgeGraph >*
      mutable_knowledge_graphs();
  private:
  const ::clarifai::api::KnowledgeGraph& _internal_knowledge_graphs(int index) const;
  ::clarifai::api::KnowledgeGraph* _internal_add_knowledge_graphs();
  public:
  const ::clarifai::api::KnowledgeGraph& knowledge_graphs(int index) const;
  ::clarifai::api::KnowledgeGraph* add_knowledge_graphs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::KnowledgeGraph >&
      knowledge_graphs() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiKnowledgeGraphResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::KnowledgeGraph > knowledge_graphs_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class SingleConceptMappingResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.SingleConceptMappingResponse) */ {
 public:
  SingleConceptMappingResponse();
  virtual ~SingleConceptMappingResponse();

  SingleConceptMappingResponse(const SingleConceptMappingResponse& from);
  SingleConceptMappingResponse(SingleConceptMappingResponse&& from) noexcept
    : SingleConceptMappingResponse() {
    *this = ::std::move(from);
  }

  inline SingleConceptMappingResponse& operator=(const SingleConceptMappingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleConceptMappingResponse& operator=(SingleConceptMappingResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SingleConceptMappingResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SingleConceptMappingResponse* internal_default_instance() {
    return reinterpret_cast<const SingleConceptMappingResponse*>(
               &_SingleConceptMappingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(SingleConceptMappingResponse& a, SingleConceptMappingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleConceptMappingResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SingleConceptMappingResponse* New() const final {
    return CreateMaybeMessage<SingleConceptMappingResponse>(nullptr);
  }

  SingleConceptMappingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SingleConceptMappingResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SingleConceptMappingResponse& from);
  void MergeFrom(const SingleConceptMappingResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleConceptMappingResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.SingleConceptMappingResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kConceptMappingFieldNumber = 2,
  };
  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // .clarifai.api.ConceptMapping concept_mapping = 2;
  bool has_concept_mapping() const;
  private:
  bool _internal_has_concept_mapping() const;
  public:
  void clear_concept_mapping();
  const ::clarifai::api::ConceptMapping& concept_mapping() const;
  ::clarifai::api::ConceptMapping* release_concept_mapping();
  ::clarifai::api::ConceptMapping* mutable_concept_mapping();
  void set_allocated_concept_mapping(::clarifai::api::ConceptMapping* concept_mapping);
  private:
  const ::clarifai::api::ConceptMapping& _internal_concept_mapping() const;
  ::clarifai::api::ConceptMapping* _internal_mutable_concept_mapping();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.SingleConceptMappingResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::status::Status* status_;
  ::clarifai::api::ConceptMapping* concept_mapping_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiConceptMappingResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiConceptMappingResponse) */ {
 public:
  MultiConceptMappingResponse();
  virtual ~MultiConceptMappingResponse();

  MultiConceptMappingResponse(const MultiConceptMappingResponse& from);
  MultiConceptMappingResponse(MultiConceptMappingResponse&& from) noexcept
    : MultiConceptMappingResponse() {
    *this = ::std::move(from);
  }

  inline MultiConceptMappingResponse& operator=(const MultiConceptMappingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiConceptMappingResponse& operator=(MultiConceptMappingResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiConceptMappingResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiConceptMappingResponse* internal_default_instance() {
    return reinterpret_cast<const MultiConceptMappingResponse*>(
               &_MultiConceptMappingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(MultiConceptMappingResponse& a, MultiConceptMappingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiConceptMappingResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiConceptMappingResponse* New() const final {
    return CreateMaybeMessage<MultiConceptMappingResponse>(nullptr);
  }

  MultiConceptMappingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiConceptMappingResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiConceptMappingResponse& from);
  void MergeFrom(const MultiConceptMappingResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiConceptMappingResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiConceptMappingResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConceptMappingsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.ConceptMapping concept_mappings = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int concept_mappings_size() const;
  private:
  int _internal_concept_mappings_size() const;
  public:
  void clear_concept_mappings();
  ::clarifai::api::ConceptMapping* mutable_concept_mappings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptMapping >*
      mutable_concept_mappings();
  private:
  const ::clarifai::api::ConceptMapping& _internal_concept_mappings(int index) const;
  ::clarifai::api::ConceptMapping* _internal_add_concept_mappings();
  public:
  const ::clarifai::api::ConceptMapping& concept_mappings(int index) const;
  ::clarifai::api::ConceptMapping* add_concept_mappings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptMapping >&
      concept_mappings() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiConceptMappingResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptMapping > concept_mappings_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class SingleConceptMappingJobResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.SingleConceptMappingJobResponse) */ {
 public:
  SingleConceptMappingJobResponse();
  virtual ~SingleConceptMappingJobResponse();

  SingleConceptMappingJobResponse(const SingleConceptMappingJobResponse& from);
  SingleConceptMappingJobResponse(SingleConceptMappingJobResponse&& from) noexcept
    : SingleConceptMappingJobResponse() {
    *this = ::std::move(from);
  }

  inline SingleConceptMappingJobResponse& operator=(const SingleConceptMappingJobResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleConceptMappingJobResponse& operator=(SingleConceptMappingJobResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SingleConceptMappingJobResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SingleConceptMappingJobResponse* internal_default_instance() {
    return reinterpret_cast<const SingleConceptMappingJobResponse*>(
               &_SingleConceptMappingJobResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(SingleConceptMappingJobResponse& a, SingleConceptMappingJobResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleConceptMappingJobResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SingleConceptMappingJobResponse* New() const final {
    return CreateMaybeMessage<SingleConceptMappingJobResponse>(nullptr);
  }

  SingleConceptMappingJobResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SingleConceptMappingJobResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SingleConceptMappingJobResponse& from);
  void MergeFrom(const SingleConceptMappingJobResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleConceptMappingJobResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.SingleConceptMappingJobResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string id = 2;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.SingleConceptMappingJobResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiConceptMappingJobResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiConceptMappingJobResponse) */ {
 public:
  MultiConceptMappingJobResponse();
  virtual ~MultiConceptMappingJobResponse();

  MultiConceptMappingJobResponse(const MultiConceptMappingJobResponse& from);
  MultiConceptMappingJobResponse(MultiConceptMappingJobResponse&& from) noexcept
    : MultiConceptMappingJobResponse() {
    *this = ::std::move(from);
  }

  inline MultiConceptMappingJobResponse& operator=(const MultiConceptMappingJobResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiConceptMappingJobResponse& operator=(MultiConceptMappingJobResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiConceptMappingJobResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiConceptMappingJobResponse* internal_default_instance() {
    return reinterpret_cast<const MultiConceptMappingJobResponse*>(
               &_MultiConceptMappingJobResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(MultiConceptMappingJobResponse& a, MultiConceptMappingJobResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiConceptMappingJobResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiConceptMappingJobResponse* New() const final {
    return CreateMaybeMessage<MultiConceptMappingJobResponse>(nullptr);
  }

  MultiConceptMappingJobResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiConceptMappingJobResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiConceptMappingJobResponse& from);
  void MergeFrom(const MultiConceptMappingJobResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiConceptMappingJobResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiConceptMappingJobResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated string ids = 2;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  const std::string& ids(int index) const;
  std::string* mutable_ids(int index);
  void set_ids(int index, const std::string& value);
  void set_ids(int index, std::string&& value);
  void set_ids(int index, const char* value);
  void set_ids(int index, const char* value, size_t size);
  std::string* add_ids();
  void add_ids(const std::string& value);
  void add_ids(std::string&& value);
  void add_ids(const char* value);
  void add_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ids();
  private:
  const std::string& _internal_ids(int index) const;
  std::string* _internal_add_ids();
  public:

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiConceptMappingJobResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ids_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class GetConceptLanguageRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.GetConceptLanguageRequest) */ {
 public:
  GetConceptLanguageRequest();
  virtual ~GetConceptLanguageRequest();

  GetConceptLanguageRequest(const GetConceptLanguageRequest& from);
  GetConceptLanguageRequest(GetConceptLanguageRequest&& from) noexcept
    : GetConceptLanguageRequest() {
    *this = ::std::move(from);
  }

  inline GetConceptLanguageRequest& operator=(const GetConceptLanguageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetConceptLanguageRequest& operator=(GetConceptLanguageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetConceptLanguageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetConceptLanguageRequest* internal_default_instance() {
    return reinterpret_cast<const GetConceptLanguageRequest*>(
               &_GetConceptLanguageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(GetConceptLanguageRequest& a, GetConceptLanguageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetConceptLanguageRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetConceptLanguageRequest* New() const final {
    return CreateMaybeMessage<GetConceptLanguageRequest>(nullptr);
  }

  GetConceptLanguageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetConceptLanguageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetConceptLanguageRequest& from);
  void MergeFrom(const GetConceptLanguageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetConceptLanguageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.GetConceptLanguageRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConceptIdFieldNumber = 2,
    kLanguageFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
  };
  // string concept_id = 2;
  void clear_concept_id();
  const std::string& concept_id() const;
  void set_concept_id(const std::string& value);
  void set_concept_id(std::string&& value);
  void set_concept_id(const char* value);
  void set_concept_id(const char* value, size_t size);
  std::string* mutable_concept_id();
  std::string* release_concept_id();
  void set_allocated_concept_id(std::string* concept_id);
  private:
  const std::string& _internal_concept_id() const;
  void _internal_set_concept_id(const std::string& value);
  std::string* _internal_mutable_concept_id();
  public:

  // string language = 3;
  void clear_language();
  const std::string& language() const;
  void set_language(const std::string& value);
  void set_language(std::string&& value);
  void set_language(const char* value);
  void set_language(const char* value, size_t size);
  std::string* mutable_language();
  std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.GetConceptLanguageRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr concept_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListConceptLanguagesRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListConceptLanguagesRequest) */ {
 public:
  ListConceptLanguagesRequest();
  virtual ~ListConceptLanguagesRequest();

  ListConceptLanguagesRequest(const ListConceptLanguagesRequest& from);
  ListConceptLanguagesRequest(ListConceptLanguagesRequest&& from) noexcept
    : ListConceptLanguagesRequest() {
    *this = ::std::move(from);
  }

  inline ListConceptLanguagesRequest& operator=(const ListConceptLanguagesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListConceptLanguagesRequest& operator=(ListConceptLanguagesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListConceptLanguagesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListConceptLanguagesRequest* internal_default_instance() {
    return reinterpret_cast<const ListConceptLanguagesRequest*>(
               &_ListConceptLanguagesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(ListConceptLanguagesRequest& a, ListConceptLanguagesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListConceptLanguagesRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListConceptLanguagesRequest* New() const final {
    return CreateMaybeMessage<ListConceptLanguagesRequest>(nullptr);
  }

  ListConceptLanguagesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListConceptLanguagesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListConceptLanguagesRequest& from);
  void MergeFrom(const ListConceptLanguagesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListConceptLanguagesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListConceptLanguagesRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConceptIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
    kPageFieldNumber = 3,
    kPerPageFieldNumber = 4,
  };
  // string concept_id = 2;
  void clear_concept_id();
  const std::string& concept_id() const;
  void set_concept_id(const std::string& value);
  void set_concept_id(std::string&& value);
  void set_concept_id(const char* value);
  void set_concept_id(const char* value, size_t size);
  std::string* mutable_concept_id();
  std::string* release_concept_id();
  void set_allocated_concept_id(std::string* concept_id);
  private:
  const std::string& _internal_concept_id() const;
  void _internal_set_concept_id(const std::string& value);
  std::string* _internal_mutable_concept_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // uint32 page = 3;
  void clear_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 page() const;
  void set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_page() const;
  void _internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 per_page = 4;
  void clear_per_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 per_page() const;
  void set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_per_page() const;
  void _internal_set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ListConceptLanguagesRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr concept_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 page_;
  ::PROTOBUF_NAMESPACE_ID::uint32 per_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PatchConceptLanguagesRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PatchConceptLanguagesRequest) */ {
 public:
  PatchConceptLanguagesRequest();
  virtual ~PatchConceptLanguagesRequest();

  PatchConceptLanguagesRequest(const PatchConceptLanguagesRequest& from);
  PatchConceptLanguagesRequest(PatchConceptLanguagesRequest&& from) noexcept
    : PatchConceptLanguagesRequest() {
    *this = ::std::move(from);
  }

  inline PatchConceptLanguagesRequest& operator=(const PatchConceptLanguagesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatchConceptLanguagesRequest& operator=(PatchConceptLanguagesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PatchConceptLanguagesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PatchConceptLanguagesRequest* internal_default_instance() {
    return reinterpret_cast<const PatchConceptLanguagesRequest*>(
               &_PatchConceptLanguagesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(PatchConceptLanguagesRequest& a, PatchConceptLanguagesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PatchConceptLanguagesRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PatchConceptLanguagesRequest* New() const final {
    return CreateMaybeMessage<PatchConceptLanguagesRequest>(nullptr);
  }

  PatchConceptLanguagesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PatchConceptLanguagesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PatchConceptLanguagesRequest& from);
  void MergeFrom(const PatchConceptLanguagesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatchConceptLanguagesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PatchConceptLanguagesRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConceptLanguagesFieldNumber = 3,
    kConceptIdFieldNumber = 2,
    kActionFieldNumber = 4,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.ConceptLanguage concept_languages = 3;
  int concept_languages_size() const;
  private:
  int _internal_concept_languages_size() const;
  public:
  void clear_concept_languages();
  ::clarifai::api::ConceptLanguage* mutable_concept_languages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptLanguage >*
      mutable_concept_languages();
  private:
  const ::clarifai::api::ConceptLanguage& _internal_concept_languages(int index) const;
  ::clarifai::api::ConceptLanguage* _internal_add_concept_languages();
  public:
  const ::clarifai::api::ConceptLanguage& concept_languages(int index) const;
  ::clarifai::api::ConceptLanguage* add_concept_languages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptLanguage >&
      concept_languages() const;

  // string concept_id = 2;
  void clear_concept_id();
  const std::string& concept_id() const;
  void set_concept_id(const std::string& value);
  void set_concept_id(std::string&& value);
  void set_concept_id(const char* value);
  void set_concept_id(const char* value, size_t size);
  std::string* mutable_concept_id();
  std::string* release_concept_id();
  void set_allocated_concept_id(std::string* concept_id);
  private:
  const std::string& _internal_concept_id() const;
  void _internal_set_concept_id(const std::string& value);
  std::string* _internal_mutable_concept_id();
  public:

  // string action = 4;
  void clear_action();
  const std::string& action() const;
  void set_action(const std::string& value);
  void set_action(std::string&& value);
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  std::string* mutable_action();
  std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PatchConceptLanguagesRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptLanguage > concept_languages_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr concept_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostConceptLanguagesRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostConceptLanguagesRequest) */ {
 public:
  PostConceptLanguagesRequest();
  virtual ~PostConceptLanguagesRequest();

  PostConceptLanguagesRequest(const PostConceptLanguagesRequest& from);
  PostConceptLanguagesRequest(PostConceptLanguagesRequest&& from) noexcept
    : PostConceptLanguagesRequest() {
    *this = ::std::move(from);
  }

  inline PostConceptLanguagesRequest& operator=(const PostConceptLanguagesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostConceptLanguagesRequest& operator=(PostConceptLanguagesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostConceptLanguagesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostConceptLanguagesRequest* internal_default_instance() {
    return reinterpret_cast<const PostConceptLanguagesRequest*>(
               &_PostConceptLanguagesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(PostConceptLanguagesRequest& a, PostConceptLanguagesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostConceptLanguagesRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostConceptLanguagesRequest* New() const final {
    return CreateMaybeMessage<PostConceptLanguagesRequest>(nullptr);
  }

  PostConceptLanguagesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostConceptLanguagesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostConceptLanguagesRequest& from);
  void MergeFrom(const PostConceptLanguagesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostConceptLanguagesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostConceptLanguagesRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConceptLanguagesFieldNumber = 3,
    kConceptIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.ConceptLanguage concept_languages = 3;
  int concept_languages_size() const;
  private:
  int _internal_concept_languages_size() const;
  public:
  void clear_concept_languages();
  ::clarifai::api::ConceptLanguage* mutable_concept_languages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptLanguage >*
      mutable_concept_languages();
  private:
  const ::clarifai::api::ConceptLanguage& _internal_concept_languages(int index) const;
  ::clarifai::api::ConceptLanguage* _internal_add_concept_languages();
  public:
  const ::clarifai::api::ConceptLanguage& concept_languages(int index) const;
  ::clarifai::api::ConceptLanguage* add_concept_languages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptLanguage >&
      concept_languages() const;

  // string concept_id = 2;
  void clear_concept_id();
  const std::string& concept_id() const;
  void set_concept_id(const std::string& value);
  void set_concept_id(std::string&& value);
  void set_concept_id(const char* value);
  void set_concept_id(const char* value, size_t size);
  std::string* mutable_concept_id();
  std::string* release_concept_id();
  void set_allocated_concept_id(std::string* concept_id);
  private:
  const std::string& _internal_concept_id() const;
  void _internal_set_concept_id(const std::string& value);
  std::string* _internal_mutable_concept_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PostConceptLanguagesRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptLanguage > concept_languages_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr concept_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class SingleConceptLanguageResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.SingleConceptLanguageResponse) */ {
 public:
  SingleConceptLanguageResponse();
  virtual ~SingleConceptLanguageResponse();

  SingleConceptLanguageResponse(const SingleConceptLanguageResponse& from);
  SingleConceptLanguageResponse(SingleConceptLanguageResponse&& from) noexcept
    : SingleConceptLanguageResponse() {
    *this = ::std::move(from);
  }

  inline SingleConceptLanguageResponse& operator=(const SingleConceptLanguageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleConceptLanguageResponse& operator=(SingleConceptLanguageResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SingleConceptLanguageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SingleConceptLanguageResponse* internal_default_instance() {
    return reinterpret_cast<const SingleConceptLanguageResponse*>(
               &_SingleConceptLanguageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(SingleConceptLanguageResponse& a, SingleConceptLanguageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleConceptLanguageResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SingleConceptLanguageResponse* New() const final {
    return CreateMaybeMessage<SingleConceptLanguageResponse>(nullptr);
  }

  SingleConceptLanguageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SingleConceptLanguageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SingleConceptLanguageResponse& from);
  void MergeFrom(const SingleConceptLanguageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleConceptLanguageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.SingleConceptLanguageResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kConceptLanguageFieldNumber = 2,
  };
  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // .clarifai.api.ConceptLanguage concept_language = 2;
  bool has_concept_language() const;
  private:
  bool _internal_has_concept_language() const;
  public:
  void clear_concept_language();
  const ::clarifai::api::ConceptLanguage& concept_language() const;
  ::clarifai::api::ConceptLanguage* release_concept_language();
  ::clarifai::api::ConceptLanguage* mutable_concept_language();
  void set_allocated_concept_language(::clarifai::api::ConceptLanguage* concept_language);
  private:
  const ::clarifai::api::ConceptLanguage& _internal_concept_language() const;
  ::clarifai::api::ConceptLanguage* _internal_mutable_concept_language();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.SingleConceptLanguageResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::status::Status* status_;
  ::clarifai::api::ConceptLanguage* concept_language_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiConceptLanguageResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiConceptLanguageResponse) */ {
 public:
  MultiConceptLanguageResponse();
  virtual ~MultiConceptLanguageResponse();

  MultiConceptLanguageResponse(const MultiConceptLanguageResponse& from);
  MultiConceptLanguageResponse(MultiConceptLanguageResponse&& from) noexcept
    : MultiConceptLanguageResponse() {
    *this = ::std::move(from);
  }

  inline MultiConceptLanguageResponse& operator=(const MultiConceptLanguageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiConceptLanguageResponse& operator=(MultiConceptLanguageResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiConceptLanguageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiConceptLanguageResponse* internal_default_instance() {
    return reinterpret_cast<const MultiConceptLanguageResponse*>(
               &_MultiConceptLanguageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(MultiConceptLanguageResponse& a, MultiConceptLanguageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiConceptLanguageResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiConceptLanguageResponse* New() const final {
    return CreateMaybeMessage<MultiConceptLanguageResponse>(nullptr);
  }

  MultiConceptLanguageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiConceptLanguageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiConceptLanguageResponse& from);
  void MergeFrom(const MultiConceptLanguageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiConceptLanguageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiConceptLanguageResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConceptLanguagesFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.ConceptLanguage concept_languages = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int concept_languages_size() const;
  private:
  int _internal_concept_languages_size() const;
  public:
  void clear_concept_languages();
  ::clarifai::api::ConceptLanguage* mutable_concept_languages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptLanguage >*
      mutable_concept_languages();
  private:
  const ::clarifai::api::ConceptLanguage& _internal_concept_languages(int index) const;
  ::clarifai::api::ConceptLanguage* _internal_add_concept_languages();
  public:
  const ::clarifai::api::ConceptLanguage& concept_languages(int index) const;
  ::clarifai::api::ConceptLanguage* add_concept_languages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptLanguage >&
      concept_languages() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiConceptLanguageResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptLanguage > concept_languages_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListConceptReferencesRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListConceptReferencesRequest) */ {
 public:
  ListConceptReferencesRequest();
  virtual ~ListConceptReferencesRequest();

  ListConceptReferencesRequest(const ListConceptReferencesRequest& from);
  ListConceptReferencesRequest(ListConceptReferencesRequest&& from) noexcept
    : ListConceptReferencesRequest() {
    *this = ::std::move(from);
  }

  inline ListConceptReferencesRequest& operator=(const ListConceptReferencesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListConceptReferencesRequest& operator=(ListConceptReferencesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListConceptReferencesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListConceptReferencesRequest* internal_default_instance() {
    return reinterpret_cast<const ListConceptReferencesRequest*>(
               &_ListConceptReferencesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(ListConceptReferencesRequest& a, ListConceptReferencesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListConceptReferencesRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListConceptReferencesRequest* New() const final {
    return CreateMaybeMessage<ListConceptReferencesRequest>(nullptr);
  }

  ListConceptReferencesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListConceptReferencesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListConceptReferencesRequest& from);
  void MergeFrom(const ListConceptReferencesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListConceptReferencesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListConceptReferencesRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConceptIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
    kPageFieldNumber = 3,
    kPerPageFieldNumber = 4,
  };
  // string concept_id = 2;
  void clear_concept_id();
  const std::string& concept_id() const;
  void set_concept_id(const std::string& value);
  void set_concept_id(std::string&& value);
  void set_concept_id(const char* value);
  void set_concept_id(const char* value, size_t size);
  std::string* mutable_concept_id();
  std::string* release_concept_id();
  void set_allocated_concept_id(std::string* concept_id);
  private:
  const std::string& _internal_concept_id() const;
  void _internal_set_concept_id(const std::string& value);
  std::string* _internal_mutable_concept_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // uint32 page = 3;
  void clear_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 page() const;
  void set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_page() const;
  void _internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 per_page = 4;
  void clear_per_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 per_page() const;
  void set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_per_page() const;
  void _internal_set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ListConceptReferencesRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr concept_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 page_;
  ::PROTOBUF_NAMESPACE_ID::uint32 per_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class SingleConceptReferenceResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.SingleConceptReferenceResponse) */ {
 public:
  SingleConceptReferenceResponse();
  virtual ~SingleConceptReferenceResponse();

  SingleConceptReferenceResponse(const SingleConceptReferenceResponse& from);
  SingleConceptReferenceResponse(SingleConceptReferenceResponse&& from) noexcept
    : SingleConceptReferenceResponse() {
    *this = ::std::move(from);
  }

  inline SingleConceptReferenceResponse& operator=(const SingleConceptReferenceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleConceptReferenceResponse& operator=(SingleConceptReferenceResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SingleConceptReferenceResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SingleConceptReferenceResponse* internal_default_instance() {
    return reinterpret_cast<const SingleConceptReferenceResponse*>(
               &_SingleConceptReferenceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(SingleConceptReferenceResponse& a, SingleConceptReferenceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleConceptReferenceResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SingleConceptReferenceResponse* New() const final {
    return CreateMaybeMessage<SingleConceptReferenceResponse>(nullptr);
  }

  SingleConceptReferenceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SingleConceptReferenceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SingleConceptReferenceResponse& from);
  void MergeFrom(const SingleConceptReferenceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleConceptReferenceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.SingleConceptReferenceResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kConceptReferenceFieldNumber = 2,
  };
  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // .clarifai.api.ConceptReference concept_reference = 2;
  bool has_concept_reference() const;
  private:
  bool _internal_has_concept_reference() const;
  public:
  void clear_concept_reference();
  const ::clarifai::api::ConceptReference& concept_reference() const;
  ::clarifai::api::ConceptReference* release_concept_reference();
  ::clarifai::api::ConceptReference* mutable_concept_reference();
  void set_allocated_concept_reference(::clarifai::api::ConceptReference* concept_reference);
  private:
  const ::clarifai::api::ConceptReference& _internal_concept_reference() const;
  ::clarifai::api::ConceptReference* _internal_mutable_concept_reference();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.SingleConceptReferenceResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::status::Status* status_;
  ::clarifai::api::ConceptReference* concept_reference_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiConceptReferenceResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiConceptReferenceResponse) */ {
 public:
  MultiConceptReferenceResponse();
  virtual ~MultiConceptReferenceResponse();

  MultiConceptReferenceResponse(const MultiConceptReferenceResponse& from);
  MultiConceptReferenceResponse(MultiConceptReferenceResponse&& from) noexcept
    : MultiConceptReferenceResponse() {
    *this = ::std::move(from);
  }

  inline MultiConceptReferenceResponse& operator=(const MultiConceptReferenceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiConceptReferenceResponse& operator=(MultiConceptReferenceResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiConceptReferenceResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiConceptReferenceResponse* internal_default_instance() {
    return reinterpret_cast<const MultiConceptReferenceResponse*>(
               &_MultiConceptReferenceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(MultiConceptReferenceResponse& a, MultiConceptReferenceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiConceptReferenceResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiConceptReferenceResponse* New() const final {
    return CreateMaybeMessage<MultiConceptReferenceResponse>(nullptr);
  }

  MultiConceptReferenceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiConceptReferenceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiConceptReferenceResponse& from);
  void MergeFrom(const MultiConceptReferenceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiConceptReferenceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiConceptReferenceResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConceptReferencesFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.ConceptReference concept_references = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int concept_references_size() const;
  private:
  int _internal_concept_references_size() const;
  public:
  void clear_concept_references();
  ::clarifai::api::ConceptReference* mutable_concept_references(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptReference >*
      mutable_concept_references();
  private:
  const ::clarifai::api::ConceptReference& _internal_concept_references(int index) const;
  ::clarifai::api::ConceptReference* _internal_add_concept_references();
  public:
  const ::clarifai::api::ConceptReference& concept_references(int index) const;
  ::clarifai::api::ConceptReference* add_concept_references();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptReference >&
      concept_references() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiConceptReferenceResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptReference > concept_references_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class GetHealthzRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.GetHealthzRequest) */ {
 public:
  GetHealthzRequest();
  virtual ~GetHealthzRequest();

  GetHealthzRequest(const GetHealthzRequest& from);
  GetHealthzRequest(GetHealthzRequest&& from) noexcept
    : GetHealthzRequest() {
    *this = ::std::move(from);
  }

  inline GetHealthzRequest& operator=(const GetHealthzRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetHealthzRequest& operator=(GetHealthzRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetHealthzRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetHealthzRequest* internal_default_instance() {
    return reinterpret_cast<const GetHealthzRequest*>(
               &_GetHealthzRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(GetHealthzRequest& a, GetHealthzRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetHealthzRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetHealthzRequest* New() const final {
    return CreateMaybeMessage<GetHealthzRequest>(nullptr);
  }

  GetHealthzRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetHealthzRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetHealthzRequest& from);
  void MergeFrom(const GetHealthzRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetHealthzRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.GetHealthzRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:clarifai.api.GetHealthzRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class GetHealthzResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.GetHealthzResponse) */ {
 public:
  GetHealthzResponse();
  virtual ~GetHealthzResponse();

  GetHealthzResponse(const GetHealthzResponse& from);
  GetHealthzResponse(GetHealthzResponse&& from) noexcept
    : GetHealthzResponse() {
    *this = ::std::move(from);
  }

  inline GetHealthzResponse& operator=(const GetHealthzResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetHealthzResponse& operator=(GetHealthzResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetHealthzResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetHealthzResponse* internal_default_instance() {
    return reinterpret_cast<const GetHealthzResponse*>(
               &_GetHealthzResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(GetHealthzResponse& a, GetHealthzResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetHealthzResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetHealthzResponse* New() const final {
    return CreateMaybeMessage<GetHealthzResponse>(nullptr);
  }

  GetHealthzResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetHealthzResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetHealthzResponse& from);
  void MergeFrom(const GetHealthzResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetHealthzResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.GetHealthzResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string time = 2;
  void clear_time();
  const std::string& time() const;
  void set_time(const std::string& value);
  void set_time(std::string&& value);
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  std::string* mutable_time();
  std::string* release_time();
  void set_allocated_time(std::string* time);
  private:
  const std::string& _internal_time() const;
  void _internal_set_time(const std::string& value);
  std::string* _internal_mutable_time();
  public:

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.GetHealthzResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class GetInputRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.GetInputRequest) */ {
 public:
  GetInputRequest();
  virtual ~GetInputRequest();

  GetInputRequest(const GetInputRequest& from);
  GetInputRequest(GetInputRequest&& from) noexcept
    : GetInputRequest() {
    *this = ::std::move(from);
  }

  inline GetInputRequest& operator=(const GetInputRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInputRequest& operator=(GetInputRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetInputRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetInputRequest* internal_default_instance() {
    return reinterpret_cast<const GetInputRequest*>(
               &_GetInputRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(GetInputRequest& a, GetInputRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInputRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetInputRequest* New() const final {
    return CreateMaybeMessage<GetInputRequest>(nullptr);
  }

  GetInputRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetInputRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetInputRequest& from);
  void MergeFrom(const GetInputRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInputRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.GetInputRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // string input_id = 2;
  void clear_input_id();
  const std::string& input_id() const;
  void set_input_id(const std::string& value);
  void set_input_id(std::string&& value);
  void set_input_id(const char* value);
  void set_input_id(const char* value, size_t size);
  std::string* mutable_input_id();
  std::string* release_input_id();
  void set_allocated_input_id(std::string* input_id);
  private:
  const std::string& _internal_input_id() const;
  void _internal_set_input_id(const std::string& value);
  std::string* _internal_mutable_input_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.GetInputRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListInputsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListInputsRequest) */ {
 public:
  ListInputsRequest();
  virtual ~ListInputsRequest();

  ListInputsRequest(const ListInputsRequest& from);
  ListInputsRequest(ListInputsRequest&& from) noexcept
    : ListInputsRequest() {
    *this = ::std::move(from);
  }

  inline ListInputsRequest& operator=(const ListInputsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListInputsRequest& operator=(ListInputsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListInputsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListInputsRequest* internal_default_instance() {
    return reinterpret_cast<const ListInputsRequest*>(
               &_ListInputsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(ListInputsRequest& a, ListInputsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListInputsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListInputsRequest* New() const final {
    return CreateMaybeMessage<ListInputsRequest>(nullptr);
  }

  ListInputsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListInputsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListInputsRequest& from);
  void MergeFrom(const ListInputsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListInputsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListInputsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 4,
    kUserAppIdFieldNumber = 1,
    kStatusFieldNumber = 5,
    kPageFieldNumber = 2,
    kPerPageFieldNumber = 3,
  };
  // repeated string ids = 4;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  const std::string& ids(int index) const;
  std::string* mutable_ids(int index);
  void set_ids(int index, const std::string& value);
  void set_ids(int index, std::string&& value);
  void set_ids(int index, const char* value);
  void set_ids(int index, const char* value, size_t size);
  std::string* add_ids();
  void add_ids(const std::string& value);
  void add_ids(std::string&& value);
  void add_ids(const char* value);
  void add_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ids();
  private:
  const std::string& _internal_ids(int index) const;
  std::string* _internal_add_ids();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // .clarifai.api.status.Status status = 5;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // uint32 page = 2;
  void clear_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 page() const;
  void set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_page() const;
  void _internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 per_page = 3;
  void clear_per_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 per_page() const;
  void set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_per_page() const;
  void _internal_set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ListInputsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ids_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::clarifai::api::status::Status* status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 page_;
  ::PROTOBUF_NAMESPACE_ID::uint32 per_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class StreamInputsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.StreamInputsRequest) */ {
 public:
  StreamInputsRequest();
  virtual ~StreamInputsRequest();

  StreamInputsRequest(const StreamInputsRequest& from);
  StreamInputsRequest(StreamInputsRequest&& from) noexcept
    : StreamInputsRequest() {
    *this = ::std::move(from);
  }

  inline StreamInputsRequest& operator=(const StreamInputsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamInputsRequest& operator=(StreamInputsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamInputsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamInputsRequest* internal_default_instance() {
    return reinterpret_cast<const StreamInputsRequest*>(
               &_StreamInputsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(StreamInputsRequest& a, StreamInputsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamInputsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamInputsRequest* New() const final {
    return CreateMaybeMessage<StreamInputsRequest>(nullptr);
  }

  StreamInputsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamInputsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamInputsRequest& from);
  void MergeFrom(const StreamInputsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamInputsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.StreamInputsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLastIdFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
    kPerPageFieldNumber = 2,
    kDescendingFieldNumber = 4,
  };
  // string last_id = 3;
  void clear_last_id();
  const std::string& last_id() const;
  void set_last_id(const std::string& value);
  void set_last_id(std::string&& value);
  void set_last_id(const char* value);
  void set_last_id(const char* value, size_t size);
  std::string* mutable_last_id();
  std::string* release_last_id();
  void set_allocated_last_id(std::string* last_id);
  private:
  const std::string& _internal_last_id() const;
  void _internal_set_last_id(const std::string& value);
  std::string* _internal_mutable_last_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // uint32 per_page = 2;
  void clear_per_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 per_page() const;
  void set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_per_page() const;
  void _internal_set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool descending = 4;
  void clear_descending();
  bool descending() const;
  void set_descending(bool value);
  private:
  bool _internal_descending() const;
  void _internal_set_descending(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.StreamInputsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 per_page_;
  bool descending_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostInputsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostInputsRequest) */ {
 public:
  PostInputsRequest();
  virtual ~PostInputsRequest();

  PostInputsRequest(const PostInputsRequest& from);
  PostInputsRequest(PostInputsRequest&& from) noexcept
    : PostInputsRequest() {
    *this = ::std::move(from);
  }

  inline PostInputsRequest& operator=(const PostInputsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostInputsRequest& operator=(PostInputsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostInputsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostInputsRequest* internal_default_instance() {
    return reinterpret_cast<const PostInputsRequest*>(
               &_PostInputsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(PostInputsRequest& a, PostInputsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostInputsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostInputsRequest* New() const final {
    return CreateMaybeMessage<PostInputsRequest>(nullptr);
  }

  PostInputsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostInputsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostInputsRequest& from);
  void MergeFrom(const PostInputsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostInputsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostInputsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputsFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.Input inputs = 2;
  int inputs_size() const;
  private:
  int _internal_inputs_size() const;
  public:
  void clear_inputs();
  ::clarifai::api::Input* mutable_inputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input >*
      mutable_inputs();
  private:
  const ::clarifai::api::Input& _internal_inputs(int index) const;
  ::clarifai::api::Input* _internal_add_inputs();
  public:
  const ::clarifai::api::Input& inputs(int index) const;
  ::clarifai::api::Input* add_inputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input >&
      inputs() const;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PostInputsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input > inputs_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostInputsFileRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostInputsFileRequest) */ {
 public:
  PostInputsFileRequest();
  virtual ~PostInputsFileRequest();

  PostInputsFileRequest(const PostInputsFileRequest& from);
  PostInputsFileRequest(PostInputsFileRequest&& from) noexcept
    : PostInputsFileRequest() {
    *this = ::std::move(from);
  }

  inline PostInputsFileRequest& operator=(const PostInputsFileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostInputsFileRequest& operator=(PostInputsFileRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostInputsFileRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostInputsFileRequest* internal_default_instance() {
    return reinterpret_cast<const PostInputsFileRequest*>(
               &_PostInputsFileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(PostInputsFileRequest& a, PostInputsFileRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostInputsFileRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostInputsFileRequest* New() const final {
    return CreateMaybeMessage<PostInputsFileRequest>(nullptr);
  }

  PostInputsFileRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostInputsFileRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostInputsFileRequest& from);
  void MergeFrom(const PostInputsFileRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostInputsFileRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostInputsFileRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 2,
    kFiletypeFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
  };
  // string url = 2;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // string filetype = 3;
  void clear_filetype();
  const std::string& filetype() const;
  void set_filetype(const std::string& value);
  void set_filetype(std::string&& value);
  void set_filetype(const char* value);
  void set_filetype(const char* value, size_t size);
  std::string* mutable_filetype();
  std::string* release_filetype();
  void set_allocated_filetype(std::string* filetype);
  private:
  const std::string& _internal_filetype() const;
  void _internal_set_filetype(const std::string& value);
  std::string* _internal_mutable_filetype();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PostInputsFileRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filetype_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostInputsNiFiRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostInputsNiFiRequest) */ {
 public:
  PostInputsNiFiRequest();
  virtual ~PostInputsNiFiRequest();

  PostInputsNiFiRequest(const PostInputsNiFiRequest& from);
  PostInputsNiFiRequest(PostInputsNiFiRequest&& from) noexcept
    : PostInputsNiFiRequest() {
    *this = ::std::move(from);
  }

  inline PostInputsNiFiRequest& operator=(const PostInputsNiFiRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostInputsNiFiRequest& operator=(PostInputsNiFiRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostInputsNiFiRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostInputsNiFiRequest* internal_default_instance() {
    return reinterpret_cast<const PostInputsNiFiRequest*>(
               &_PostInputsNiFiRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(PostInputsNiFiRequest& a, PostInputsNiFiRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostInputsNiFiRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostInputsNiFiRequest* New() const final {
    return CreateMaybeMessage<PostInputsNiFiRequest>(nullptr);
  }

  PostInputsNiFiRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostInputsNiFiRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostInputsNiFiRequest& from);
  void MergeFrom(const PostInputsNiFiRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostInputsNiFiRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostInputsNiFiRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserAppIdFieldNumber = 1,
    kUrlsFieldNumber = 2,
    kMetadataFieldNumber = 3,
    kParamsFieldNumber = 4,
  };
  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // .google.protobuf.ListValue urls = 2;
  bool has_urls() const;
  private:
  bool _internal_has_urls() const;
  public:
  void clear_urls();
  const PROTOBUF_NAMESPACE_ID::ListValue& urls() const;
  PROTOBUF_NAMESPACE_ID::ListValue* release_urls();
  PROTOBUF_NAMESPACE_ID::ListValue* mutable_urls();
  void set_allocated_urls(PROTOBUF_NAMESPACE_ID::ListValue* urls);
  private:
  const PROTOBUF_NAMESPACE_ID::ListValue& _internal_urls() const;
  PROTOBUF_NAMESPACE_ID::ListValue* _internal_mutable_urls();
  public:

  // .google.protobuf.Struct metadata = 3;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const PROTOBUF_NAMESPACE_ID::Struct& metadata() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_metadata();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_metadata();
  void set_allocated_metadata(PROTOBUF_NAMESPACE_ID::Struct* metadata);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_metadata() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_metadata();
  public:

  // .google.protobuf.Struct params = 4;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const PROTOBUF_NAMESPACE_ID::Struct& params() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_params();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_params();
  void set_allocated_params(PROTOBUF_NAMESPACE_ID::Struct* params);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_params() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_params();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PostInputsNiFiRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  PROTOBUF_NAMESPACE_ID::ListValue* urls_;
  PROTOBUF_NAMESPACE_ID::Struct* metadata_;
  PROTOBUF_NAMESPACE_ID::Struct* params_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PatchInputsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PatchInputsRequest) */ {
 public:
  PatchInputsRequest();
  virtual ~PatchInputsRequest();

  PatchInputsRequest(const PatchInputsRequest& from);
  PatchInputsRequest(PatchInputsRequest&& from) noexcept
    : PatchInputsRequest() {
    *this = ::std::move(from);
  }

  inline PatchInputsRequest& operator=(const PatchInputsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatchInputsRequest& operator=(PatchInputsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PatchInputsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PatchInputsRequest* internal_default_instance() {
    return reinterpret_cast<const PatchInputsRequest*>(
               &_PatchInputsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(PatchInputsRequest& a, PatchInputsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PatchInputsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PatchInputsRequest* New() const final {
    return CreateMaybeMessage<PatchInputsRequest>(nullptr);
  }

  PatchInputsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PatchInputsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PatchInputsRequest& from);
  void MergeFrom(const PatchInputsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatchInputsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PatchInputsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputsFieldNumber = 2,
    kActionFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.Input inputs = 2;
  int inputs_size() const;
  private:
  int _internal_inputs_size() const;
  public:
  void clear_inputs();
  ::clarifai::api::Input* mutable_inputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input >*
      mutable_inputs();
  private:
  const ::clarifai::api::Input& _internal_inputs(int index) const;
  ::clarifai::api::Input* _internal_add_inputs();
  public:
  const ::clarifai::api::Input& inputs(int index) const;
  ::clarifai::api::Input* add_inputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input >&
      inputs() const;

  // string action = 3;
  void clear_action();
  const std::string& action() const;
  void set_action(const std::string& value);
  void set_action(std::string&& value);
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  std::string* mutable_action();
  std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PatchInputsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input > inputs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteInputRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.DeleteInputRequest) */ {
 public:
  DeleteInputRequest();
  virtual ~DeleteInputRequest();

  DeleteInputRequest(const DeleteInputRequest& from);
  DeleteInputRequest(DeleteInputRequest&& from) noexcept
    : DeleteInputRequest() {
    *this = ::std::move(from);
  }

  inline DeleteInputRequest& operator=(const DeleteInputRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteInputRequest& operator=(DeleteInputRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteInputRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteInputRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteInputRequest*>(
               &_DeleteInputRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(DeleteInputRequest& a, DeleteInputRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteInputRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteInputRequest* New() const final {
    return CreateMaybeMessage<DeleteInputRequest>(nullptr);
  }

  DeleteInputRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteInputRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteInputRequest& from);
  void MergeFrom(const DeleteInputRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteInputRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.DeleteInputRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // string input_id = 2;
  void clear_input_id();
  const std::string& input_id() const;
  void set_input_id(const std::string& value);
  void set_input_id(std::string&& value);
  void set_input_id(const char* value);
  void set_input_id(const char* value, size_t size);
  std::string* mutable_input_id();
  std::string* release_input_id();
  void set_allocated_input_id(std::string* input_id);
  private:
  const std::string& _internal_input_id() const;
  void _internal_set_input_id(const std::string& value);
  std::string* _internal_mutable_input_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.DeleteInputRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteInputsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.DeleteInputsRequest) */ {
 public:
  DeleteInputsRequest();
  virtual ~DeleteInputsRequest();

  DeleteInputsRequest(const DeleteInputsRequest& from);
  DeleteInputsRequest(DeleteInputsRequest&& from) noexcept
    : DeleteInputsRequest() {
    *this = ::std::move(from);
  }

  inline DeleteInputsRequest& operator=(const DeleteInputsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteInputsRequest& operator=(DeleteInputsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteInputsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteInputsRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteInputsRequest*>(
               &_DeleteInputsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(DeleteInputsRequest& a, DeleteInputsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteInputsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteInputsRequest* New() const final {
    return CreateMaybeMessage<DeleteInputsRequest>(nullptr);
  }

  DeleteInputsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteInputsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteInputsRequest& from);
  void MergeFrom(const DeleteInputsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteInputsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.DeleteInputsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
    kDeleteAllFieldNumber = 3,
  };
  // repeated string ids = 2;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  const std::string& ids(int index) const;
  std::string* mutable_ids(int index);
  void set_ids(int index, const std::string& value);
  void set_ids(int index, std::string&& value);
  void set_ids(int index, const char* value);
  void set_ids(int index, const char* value, size_t size);
  std::string* add_ids();
  void add_ids(const std::string& value);
  void add_ids(std::string&& value);
  void add_ids(const char* value);
  void add_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ids();
  private:
  const std::string& _internal_ids(int index) const;
  std::string* _internal_add_ids();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // bool delete_all = 3;
  void clear_delete_all();
  bool delete_all() const;
  void set_delete_all(bool value);
  private:
  bool _internal_delete_all() const;
  void _internal_set_delete_all(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.DeleteInputsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ids_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  bool delete_all_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class SingleInputResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.SingleInputResponse) */ {
 public:
  SingleInputResponse();
  virtual ~SingleInputResponse();

  SingleInputResponse(const SingleInputResponse& from);
  SingleInputResponse(SingleInputResponse&& from) noexcept
    : SingleInputResponse() {
    *this = ::std::move(from);
  }

  inline SingleInputResponse& operator=(const SingleInputResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleInputResponse& operator=(SingleInputResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SingleInputResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SingleInputResponse* internal_default_instance() {
    return reinterpret_cast<const SingleInputResponse*>(
               &_SingleInputResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(SingleInputResponse& a, SingleInputResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleInputResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SingleInputResponse* New() const final {
    return CreateMaybeMessage<SingleInputResponse>(nullptr);
  }

  SingleInputResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SingleInputResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SingleInputResponse& from);
  void MergeFrom(const SingleInputResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleInputResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.SingleInputResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kInputFieldNumber = 2,
  };
  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // .clarifai.api.Input input = 2;
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  const ::clarifai::api::Input& input() const;
  ::clarifai::api::Input* release_input();
  ::clarifai::api::Input* mutable_input();
  void set_allocated_input(::clarifai::api::Input* input);
  private:
  const ::clarifai::api::Input& _internal_input() const;
  ::clarifai::api::Input* _internal_mutable_input();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.SingleInputResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::status::Status* status_;
  ::clarifai::api::Input* input_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiInputResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiInputResponse) */ {
 public:
  MultiInputResponse();
  virtual ~MultiInputResponse();

  MultiInputResponse(const MultiInputResponse& from);
  MultiInputResponse(MultiInputResponse&& from) noexcept
    : MultiInputResponse() {
    *this = ::std::move(from);
  }

  inline MultiInputResponse& operator=(const MultiInputResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiInputResponse& operator=(MultiInputResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiInputResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiInputResponse* internal_default_instance() {
    return reinterpret_cast<const MultiInputResponse*>(
               &_MultiInputResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(MultiInputResponse& a, MultiInputResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiInputResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiInputResponse* New() const final {
    return CreateMaybeMessage<MultiInputResponse>(nullptr);
  }

  MultiInputResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiInputResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiInputResponse& from);
  void MergeFrom(const MultiInputResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiInputResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiInputResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.Input inputs = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int inputs_size() const;
  private:
  int _internal_inputs_size() const;
  public:
  void clear_inputs();
  ::clarifai::api::Input* mutable_inputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input >*
      mutable_inputs();
  private:
  const ::clarifai::api::Input& _internal_inputs(int index) const;
  ::clarifai::api::Input* _internal_add_inputs();
  public:
  const ::clarifai::api::Input& inputs(int index) const;
  ::clarifai::api::Input* add_inputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input >&
      inputs() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiInputResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input > inputs_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class SingleInputCountResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.SingleInputCountResponse) */ {
 public:
  SingleInputCountResponse();
  virtual ~SingleInputCountResponse();

  SingleInputCountResponse(const SingleInputCountResponse& from);
  SingleInputCountResponse(SingleInputCountResponse&& from) noexcept
    : SingleInputCountResponse() {
    *this = ::std::move(from);
  }

  inline SingleInputCountResponse& operator=(const SingleInputCountResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleInputCountResponse& operator=(SingleInputCountResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SingleInputCountResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SingleInputCountResponse* internal_default_instance() {
    return reinterpret_cast<const SingleInputCountResponse*>(
               &_SingleInputCountResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(SingleInputCountResponse& a, SingleInputCountResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleInputCountResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SingleInputCountResponse* New() const final {
    return CreateMaybeMessage<SingleInputCountResponse>(nullptr);
  }

  SingleInputCountResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SingleInputCountResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SingleInputCountResponse& from);
  void MergeFrom(const SingleInputCountResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleInputCountResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.SingleInputCountResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kCountsFieldNumber = 2,
  };
  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // .clarifai.api.InputCount counts = 2;
  bool has_counts() const;
  private:
  bool _internal_has_counts() const;
  public:
  void clear_counts();
  const ::clarifai::api::InputCount& counts() const;
  ::clarifai::api::InputCount* release_counts();
  ::clarifai::api::InputCount* mutable_counts();
  void set_allocated_counts(::clarifai::api::InputCount* counts);
  private:
  const ::clarifai::api::InputCount& _internal_counts() const;
  ::clarifai::api::InputCount* _internal_mutable_counts();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.SingleInputCountResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::status::Status* status_;
  ::clarifai::api::InputCount* counts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class GetInputCountRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.GetInputCountRequest) */ {
 public:
  GetInputCountRequest();
  virtual ~GetInputCountRequest();

  GetInputCountRequest(const GetInputCountRequest& from);
  GetInputCountRequest(GetInputCountRequest&& from) noexcept
    : GetInputCountRequest() {
    *this = ::std::move(from);
  }

  inline GetInputCountRequest& operator=(const GetInputCountRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInputCountRequest& operator=(GetInputCountRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetInputCountRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetInputCountRequest* internal_default_instance() {
    return reinterpret_cast<const GetInputCountRequest*>(
               &_GetInputCountRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(GetInputCountRequest& a, GetInputCountRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInputCountRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetInputCountRequest* New() const final {
    return CreateMaybeMessage<GetInputCountRequest>(nullptr);
  }

  GetInputCountRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetInputCountRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetInputCountRequest& from);
  void MergeFrom(const GetInputCountRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInputCountRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.GetInputCountRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserAppIdFieldNumber = 1,
  };
  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.GetInputCountRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostModelOutputsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostModelOutputsRequest) */ {
 public:
  PostModelOutputsRequest();
  virtual ~PostModelOutputsRequest();

  PostModelOutputsRequest(const PostModelOutputsRequest& from);
  PostModelOutputsRequest(PostModelOutputsRequest&& from) noexcept
    : PostModelOutputsRequest() {
    *this = ::std::move(from);
  }

  inline PostModelOutputsRequest& operator=(const PostModelOutputsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostModelOutputsRequest& operator=(PostModelOutputsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostModelOutputsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostModelOutputsRequest* internal_default_instance() {
    return reinterpret_cast<const PostModelOutputsRequest*>(
               &_PostModelOutputsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(PostModelOutputsRequest& a, PostModelOutputsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostModelOutputsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostModelOutputsRequest* New() const final {
    return CreateMaybeMessage<PostModelOutputsRequest>(nullptr);
  }

  PostModelOutputsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostModelOutputsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostModelOutputsRequest& from);
  void MergeFrom(const PostModelOutputsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostModelOutputsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostModelOutputsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputsFieldNumber = 4,
    kModelIdFieldNumber = 2,
    kVersionIdFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
    kModelFieldNumber = 5,
  };
  // repeated .clarifai.api.Input inputs = 4;
  int inputs_size() const;
  private:
  int _internal_inputs_size() const;
  public:
  void clear_inputs();
  ::clarifai::api::Input* mutable_inputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input >*
      mutable_inputs();
  private:
  const ::clarifai::api::Input& _internal_inputs(int index) const;
  ::clarifai::api::Input* _internal_add_inputs();
  public:
  const ::clarifai::api::Input& inputs(int index) const;
  ::clarifai::api::Input* add_inputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input >&
      inputs() const;

  // string model_id = 2;
  void clear_model_id();
  const std::string& model_id() const;
  void set_model_id(const std::string& value);
  void set_model_id(std::string&& value);
  void set_model_id(const char* value);
  void set_model_id(const char* value, size_t size);
  std::string* mutable_model_id();
  std::string* release_model_id();
  void set_allocated_model_id(std::string* model_id);
  private:
  const std::string& _internal_model_id() const;
  void _internal_set_model_id(const std::string& value);
  std::string* _internal_mutable_model_id();
  public:

  // string version_id = 3;
  void clear_version_id();
  const std::string& version_id() const;
  void set_version_id(const std::string& value);
  void set_version_id(std::string&& value);
  void set_version_id(const char* value);
  void set_version_id(const char* value, size_t size);
  std::string* mutable_version_id();
  std::string* release_version_id();
  void set_allocated_version_id(std::string* version_id);
  private:
  const std::string& _internal_version_id() const;
  void _internal_set_version_id(const std::string& value);
  std::string* _internal_mutable_version_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // .clarifai.api.Model model = 5;
  bool has_model() const;
  private:
  bool _internal_has_model() const;
  public:
  void clear_model();
  const ::clarifai::api::Model& model() const;
  ::clarifai::api::Model* release_model();
  ::clarifai::api::Model* mutable_model();
  void set_allocated_model(::clarifai::api::Model* model);
  private:
  const ::clarifai::api::Model& _internal_model() const;
  ::clarifai::api::Model* _internal_mutable_model();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PostModelOutputsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input > inputs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::clarifai::api::Model* model_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListModelInputsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListModelInputsRequest) */ {
 public:
  ListModelInputsRequest();
  virtual ~ListModelInputsRequest();

  ListModelInputsRequest(const ListModelInputsRequest& from);
  ListModelInputsRequest(ListModelInputsRequest&& from) noexcept
    : ListModelInputsRequest() {
    *this = ::std::move(from);
  }

  inline ListModelInputsRequest& operator=(const ListModelInputsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListModelInputsRequest& operator=(ListModelInputsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListModelInputsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListModelInputsRequest* internal_default_instance() {
    return reinterpret_cast<const ListModelInputsRequest*>(
               &_ListModelInputsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(ListModelInputsRequest& a, ListModelInputsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListModelInputsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListModelInputsRequest* New() const final {
    return CreateMaybeMessage<ListModelInputsRequest>(nullptr);
  }

  ListModelInputsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListModelInputsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListModelInputsRequest& from);
  void MergeFrom(const ListModelInputsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListModelInputsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListModelInputsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelIdFieldNumber = 2,
    kVersionIdFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
    kPageFieldNumber = 4,
    kPerPageFieldNumber = 5,
  };
  // string model_id = 2;
  void clear_model_id();
  const std::string& model_id() const;
  void set_model_id(const std::string& value);
  void set_model_id(std::string&& value);
  void set_model_id(const char* value);
  void set_model_id(const char* value, size_t size);
  std::string* mutable_model_id();
  std::string* release_model_id();
  void set_allocated_model_id(std::string* model_id);
  private:
  const std::string& _internal_model_id() const;
  void _internal_set_model_id(const std::string& value);
  std::string* _internal_mutable_model_id();
  public:

  // string version_id = 3;
  void clear_version_id();
  const std::string& version_id() const;
  void set_version_id(const std::string& value);
  void set_version_id(std::string&& value);
  void set_version_id(const char* value);
  void set_version_id(const char* value, size_t size);
  std::string* mutable_version_id();
  std::string* release_version_id();
  void set_allocated_version_id(std::string* version_id);
  private:
  const std::string& _internal_version_id() const;
  void _internal_set_version_id(const std::string& value);
  std::string* _internal_mutable_version_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // uint32 page = 4;
  void clear_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 page() const;
  void set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_page() const;
  void _internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 per_page = 5;
  void clear_per_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 per_page() const;
  void set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_per_page() const;
  void _internal_set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ListModelInputsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 page_;
  ::PROTOBUF_NAMESPACE_ID::uint32 per_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class GetKeyRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.GetKeyRequest) */ {
 public:
  GetKeyRequest();
  virtual ~GetKeyRequest();

  GetKeyRequest(const GetKeyRequest& from);
  GetKeyRequest(GetKeyRequest&& from) noexcept
    : GetKeyRequest() {
    *this = ::std::move(from);
  }

  inline GetKeyRequest& operator=(const GetKeyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetKeyRequest& operator=(GetKeyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetKeyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetKeyRequest* internal_default_instance() {
    return reinterpret_cast<const GetKeyRequest*>(
               &_GetKeyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(GetKeyRequest& a, GetKeyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetKeyRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetKeyRequest* New() const final {
    return CreateMaybeMessage<GetKeyRequest>(nullptr);
  }

  GetKeyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetKeyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetKeyRequest& from);
  void MergeFrom(const GetKeyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetKeyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.GetKeyRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // string key_id = 2;
  void clear_key_id();
  const std::string& key_id() const;
  void set_key_id(const std::string& value);
  void set_key_id(std::string&& value);
  void set_key_id(const char* value);
  void set_key_id(const char* value, size_t size);
  std::string* mutable_key_id();
  std::string* release_key_id();
  void set_allocated_key_id(std::string* key_id);
  private:
  const std::string& _internal_key_id() const;
  void _internal_set_key_id(const std::string& value);
  std::string* _internal_mutable_key_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.GetKeyRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListKeysRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListKeysRequest) */ {
 public:
  ListKeysRequest();
  virtual ~ListKeysRequest();

  ListKeysRequest(const ListKeysRequest& from);
  ListKeysRequest(ListKeysRequest&& from) noexcept
    : ListKeysRequest() {
    *this = ::std::move(from);
  }

  inline ListKeysRequest& operator=(const ListKeysRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListKeysRequest& operator=(ListKeysRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListKeysRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListKeysRequest* internal_default_instance() {
    return reinterpret_cast<const ListKeysRequest*>(
               &_ListKeysRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(ListKeysRequest& a, ListKeysRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListKeysRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListKeysRequest* New() const final {
    return CreateMaybeMessage<ListKeysRequest>(nullptr);
  }

  ListKeysRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListKeysRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListKeysRequest& from);
  void MergeFrom(const ListKeysRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListKeysRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListKeysRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserAppIdFieldNumber = 1,
    kPageFieldNumber = 2,
    kPerPageFieldNumber = 3,
  };
  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // uint32 page = 2;
  void clear_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 page() const;
  void set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_page() const;
  void _internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 per_page = 3;
  void clear_per_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 per_page() const;
  void set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_per_page() const;
  void _internal_set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ListKeysRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 page_;
  ::PROTOBUF_NAMESPACE_ID::uint32 per_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListAppKeysRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListAppKeysRequest) */ {
 public:
  ListAppKeysRequest();
  virtual ~ListAppKeysRequest();

  ListAppKeysRequest(const ListAppKeysRequest& from);
  ListAppKeysRequest(ListAppKeysRequest&& from) noexcept
    : ListAppKeysRequest() {
    *this = ::std::move(from);
  }

  inline ListAppKeysRequest& operator=(const ListAppKeysRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListAppKeysRequest& operator=(ListAppKeysRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListAppKeysRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListAppKeysRequest* internal_default_instance() {
    return reinterpret_cast<const ListAppKeysRequest*>(
               &_ListAppKeysRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(ListAppKeysRequest& a, ListAppKeysRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListAppKeysRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListAppKeysRequest* New() const final {
    return CreateMaybeMessage<ListAppKeysRequest>(nullptr);
  }

  ListAppKeysRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListAppKeysRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListAppKeysRequest& from);
  void MergeFrom(const ListAppKeysRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListAppKeysRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListAppKeysRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserAppIdFieldNumber = 1,
    kPageFieldNumber = 2,
    kPerPageFieldNumber = 3,
  };
  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // uint32 page = 2;
  void clear_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 page() const;
  void set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_page() const;
  void _internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 per_page = 3;
  void clear_per_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 per_page() const;
  void set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_per_page() const;
  void _internal_set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ListAppKeysRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 page_;
  ::PROTOBUF_NAMESPACE_ID::uint32 per_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostKeysRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostKeysRequest) */ {
 public:
  PostKeysRequest();
  virtual ~PostKeysRequest();

  PostKeysRequest(const PostKeysRequest& from);
  PostKeysRequest(PostKeysRequest&& from) noexcept
    : PostKeysRequest() {
    *this = ::std::move(from);
  }

  inline PostKeysRequest& operator=(const PostKeysRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostKeysRequest& operator=(PostKeysRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostKeysRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostKeysRequest* internal_default_instance() {
    return reinterpret_cast<const PostKeysRequest*>(
               &_PostKeysRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(PostKeysRequest& a, PostKeysRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostKeysRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostKeysRequest* New() const final {
    return CreateMaybeMessage<PostKeysRequest>(nullptr);
  }

  PostKeysRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostKeysRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostKeysRequest& from);
  void MergeFrom(const PostKeysRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostKeysRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostKeysRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.Key keys = 2;
  int keys_size() const;
  private:
  int _internal_keys_size() const;
  public:
  void clear_keys();
  ::clarifai::api::Key* mutable_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Key >*
      mutable_keys();
  private:
  const ::clarifai::api::Key& _internal_keys(int index) const;
  ::clarifai::api::Key* _internal_add_keys();
  public:
  const ::clarifai::api::Key& keys(int index) const;
  ::clarifai::api::Key* add_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Key >&
      keys() const;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PostKeysRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Key > keys_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteKeyRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.DeleteKeyRequest) */ {
 public:
  DeleteKeyRequest();
  virtual ~DeleteKeyRequest();

  DeleteKeyRequest(const DeleteKeyRequest& from);
  DeleteKeyRequest(DeleteKeyRequest&& from) noexcept
    : DeleteKeyRequest() {
    *this = ::std::move(from);
  }

  inline DeleteKeyRequest& operator=(const DeleteKeyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteKeyRequest& operator=(DeleteKeyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteKeyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteKeyRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteKeyRequest*>(
               &_DeleteKeyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(DeleteKeyRequest& a, DeleteKeyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteKeyRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteKeyRequest* New() const final {
    return CreateMaybeMessage<DeleteKeyRequest>(nullptr);
  }

  DeleteKeyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteKeyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteKeyRequest& from);
  void MergeFrom(const DeleteKeyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteKeyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.DeleteKeyRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // string key_id = 2;
  void clear_key_id();
  const std::string& key_id() const;
  void set_key_id(const std::string& value);
  void set_key_id(std::string&& value);
  void set_key_id(const char* value);
  void set_key_id(const char* value, size_t size);
  std::string* mutable_key_id();
  std::string* release_key_id();
  void set_allocated_key_id(std::string* key_id);
  private:
  const std::string& _internal_key_id() const;
  void _internal_set_key_id(const std::string& value);
  std::string* _internal_mutable_key_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.DeleteKeyRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PatchKeysRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PatchKeysRequest) */ {
 public:
  PatchKeysRequest();
  virtual ~PatchKeysRequest();

  PatchKeysRequest(const PatchKeysRequest& from);
  PatchKeysRequest(PatchKeysRequest&& from) noexcept
    : PatchKeysRequest() {
    *this = ::std::move(from);
  }

  inline PatchKeysRequest& operator=(const PatchKeysRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatchKeysRequest& operator=(PatchKeysRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PatchKeysRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PatchKeysRequest* internal_default_instance() {
    return reinterpret_cast<const PatchKeysRequest*>(
               &_PatchKeysRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(PatchKeysRequest& a, PatchKeysRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PatchKeysRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PatchKeysRequest* New() const final {
    return CreateMaybeMessage<PatchKeysRequest>(nullptr);
  }

  PatchKeysRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PatchKeysRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PatchKeysRequest& from);
  void MergeFrom(const PatchKeysRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatchKeysRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PatchKeysRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 2,
    kActionFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.Key keys = 2;
  int keys_size() const;
  private:
  int _internal_keys_size() const;
  public:
  void clear_keys();
  ::clarifai::api::Key* mutable_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Key >*
      mutable_keys();
  private:
  const ::clarifai::api::Key& _internal_keys(int index) const;
  ::clarifai::api::Key* _internal_add_keys();
  public:
  const ::clarifai::api::Key& keys(int index) const;
  ::clarifai::api::Key* add_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Key >&
      keys() const;

  // string action = 3;
  void clear_action();
  const std::string& action() const;
  void set_action(const std::string& value);
  void set_action(std::string&& value);
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  std::string* mutable_action();
  std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PatchKeysRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Key > keys_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class SingleKeyResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.SingleKeyResponse) */ {
 public:
  SingleKeyResponse();
  virtual ~SingleKeyResponse();

  SingleKeyResponse(const SingleKeyResponse& from);
  SingleKeyResponse(SingleKeyResponse&& from) noexcept
    : SingleKeyResponse() {
    *this = ::std::move(from);
  }

  inline SingleKeyResponse& operator=(const SingleKeyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleKeyResponse& operator=(SingleKeyResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SingleKeyResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SingleKeyResponse* internal_default_instance() {
    return reinterpret_cast<const SingleKeyResponse*>(
               &_SingleKeyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(SingleKeyResponse& a, SingleKeyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleKeyResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SingleKeyResponse* New() const final {
    return CreateMaybeMessage<SingleKeyResponse>(nullptr);
  }

  SingleKeyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SingleKeyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SingleKeyResponse& from);
  void MergeFrom(const SingleKeyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleKeyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.SingleKeyResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kKeyFieldNumber = 2,
  };
  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // .clarifai.api.Key key = 2;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const ::clarifai::api::Key& key() const;
  ::clarifai::api::Key* release_key();
  ::clarifai::api::Key* mutable_key();
  void set_allocated_key(::clarifai::api::Key* key);
  private:
  const ::clarifai::api::Key& _internal_key() const;
  ::clarifai::api::Key* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.SingleKeyResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::status::Status* status_;
  ::clarifai::api::Key* key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiKeyResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiKeyResponse) */ {
 public:
  MultiKeyResponse();
  virtual ~MultiKeyResponse();

  MultiKeyResponse(const MultiKeyResponse& from);
  MultiKeyResponse(MultiKeyResponse&& from) noexcept
    : MultiKeyResponse() {
    *this = ::std::move(from);
  }

  inline MultiKeyResponse& operator=(const MultiKeyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiKeyResponse& operator=(MultiKeyResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiKeyResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiKeyResponse* internal_default_instance() {
    return reinterpret_cast<const MultiKeyResponse*>(
               &_MultiKeyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(MultiKeyResponse& a, MultiKeyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiKeyResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiKeyResponse* New() const final {
    return CreateMaybeMessage<MultiKeyResponse>(nullptr);
  }

  MultiKeyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiKeyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiKeyResponse& from);
  void MergeFrom(const MultiKeyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiKeyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiKeyResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.Key keys = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int keys_size() const;
  private:
  int _internal_keys_size() const;
  public:
  void clear_keys();
  ::clarifai::api::Key* mutable_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Key >*
      mutable_keys();
  private:
  const ::clarifai::api::Key& _internal_keys(int index) const;
  ::clarifai::api::Key* _internal_add_keys();
  public:
  const ::clarifai::api::Key& keys(int index) const;
  ::clarifai::api::Key* add_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Key >&
      keys() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiKeyResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Key > keys_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class FetchLicenseRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.FetchLicenseRequest) */ {
 public:
  FetchLicenseRequest();
  virtual ~FetchLicenseRequest();

  FetchLicenseRequest(const FetchLicenseRequest& from);
  FetchLicenseRequest(FetchLicenseRequest&& from) noexcept
    : FetchLicenseRequest() {
    *this = ::std::move(from);
  }

  inline FetchLicenseRequest& operator=(const FetchLicenseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchLicenseRequest& operator=(FetchLicenseRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FetchLicenseRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FetchLicenseRequest* internal_default_instance() {
    return reinterpret_cast<const FetchLicenseRequest*>(
               &_FetchLicenseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(FetchLicenseRequest& a, FetchLicenseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchLicenseRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FetchLicenseRequest* New() const final {
    return CreateMaybeMessage<FetchLicenseRequest>(nullptr);
  }

  FetchLicenseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FetchLicenseRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FetchLicenseRequest& from);
  void MergeFrom(const FetchLicenseRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchLicenseRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.FetchLicenseRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLicenseIdFieldNumber = 1,
    kPublicKeyFieldNumber = 2,
    kSignatureFieldNumber = 3,
  };
  // string license_id = 1;
  void clear_license_id();
  const std::string& license_id() const;
  void set_license_id(const std::string& value);
  void set_license_id(std::string&& value);
  void set_license_id(const char* value);
  void set_license_id(const char* value, size_t size);
  std::string* mutable_license_id();
  std::string* release_license_id();
  void set_allocated_license_id(std::string* license_id);
  private:
  const std::string& _internal_license_id() const;
  void _internal_set_license_id(const std::string& value);
  std::string* _internal_mutable_license_id();
  public:

  // string public_key = 2;
  void clear_public_key();
  const std::string& public_key() const;
  void set_public_key(const std::string& value);
  void set_public_key(std::string&& value);
  void set_public_key(const char* value);
  void set_public_key(const char* value, size_t size);
  std::string* mutable_public_key();
  std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);
  private:
  const std::string& _internal_public_key() const;
  void _internal_set_public_key(const std::string& value);
  std::string* _internal_mutable_public_key();
  public:

  // bytes signature = 3;
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.FetchLicenseRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr license_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class FetchLicenseResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.FetchLicenseResponse) */ {
 public:
  FetchLicenseResponse();
  virtual ~FetchLicenseResponse();

  FetchLicenseResponse(const FetchLicenseResponse& from);
  FetchLicenseResponse(FetchLicenseResponse&& from) noexcept
    : FetchLicenseResponse() {
    *this = ::std::move(from);
  }

  inline FetchLicenseResponse& operator=(const FetchLicenseResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchLicenseResponse& operator=(FetchLicenseResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FetchLicenseResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FetchLicenseResponse* internal_default_instance() {
    return reinterpret_cast<const FetchLicenseResponse*>(
               &_FetchLicenseResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(FetchLicenseResponse& a, FetchLicenseResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchLicenseResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FetchLicenseResponse* New() const final {
    return CreateMaybeMessage<FetchLicenseResponse>(nullptr);
  }

  FetchLicenseResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FetchLicenseResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FetchLicenseResponse& from);
  void MergeFrom(const FetchLicenseResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchLicenseResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.FetchLicenseResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncryptedBytesFieldNumber = 2,
    kPublicKeyFieldNumber = 4,
    kSignatureFieldNumber = 5,
    kStatusFieldNumber = 1,
    kActivatedAtFieldNumber = 3,
  };
  // bytes encrypted_bytes = 2;
  void clear_encrypted_bytes();
  const std::string& encrypted_bytes() const;
  void set_encrypted_bytes(const std::string& value);
  void set_encrypted_bytes(std::string&& value);
  void set_encrypted_bytes(const char* value);
  void set_encrypted_bytes(const void* value, size_t size);
  std::string* mutable_encrypted_bytes();
  std::string* release_encrypted_bytes();
  void set_allocated_encrypted_bytes(std::string* encrypted_bytes);
  private:
  const std::string& _internal_encrypted_bytes() const;
  void _internal_set_encrypted_bytes(const std::string& value);
  std::string* _internal_mutable_encrypted_bytes();
  public:

  // string public_key = 4;
  void clear_public_key();
  const std::string& public_key() const;
  void set_public_key(const std::string& value);
  void set_public_key(std::string&& value);
  void set_public_key(const char* value);
  void set_public_key(const char* value, size_t size);
  std::string* mutable_public_key();
  std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);
  private:
  const std::string& _internal_public_key() const;
  void _internal_set_public_key(const std::string& value);
  std::string* _internal_mutable_public_key();
  public:

  // bytes signature = 5;
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // .google.protobuf.Timestamp activated_at = 3;
  bool has_activated_at() const;
  private:
  bool _internal_has_activated_at() const;
  public:
  void clear_activated_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& activated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_activated_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_activated_at();
  void set_allocated_activated_at(PROTOBUF_NAMESPACE_ID::Timestamp* activated_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_activated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_activated_at();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.FetchLicenseResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encrypted_bytes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::clarifai::api::status::Status* status_;
  PROTOBUF_NAMESPACE_ID::Timestamp* activated_at_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ValidateLicenseRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ValidateLicenseRequest) */ {
 public:
  ValidateLicenseRequest();
  virtual ~ValidateLicenseRequest();

  ValidateLicenseRequest(const ValidateLicenseRequest& from);
  ValidateLicenseRequest(ValidateLicenseRequest&& from) noexcept
    : ValidateLicenseRequest() {
    *this = ::std::move(from);
  }

  inline ValidateLicenseRequest& operator=(const ValidateLicenseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidateLicenseRequest& operator=(ValidateLicenseRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ValidateLicenseRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValidateLicenseRequest* internal_default_instance() {
    return reinterpret_cast<const ValidateLicenseRequest*>(
               &_ValidateLicenseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  friend void swap(ValidateLicenseRequest& a, ValidateLicenseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidateLicenseRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValidateLicenseRequest* New() const final {
    return CreateMaybeMessage<ValidateLicenseRequest>(nullptr);
  }

  ValidateLicenseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValidateLicenseRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ValidateLicenseRequest& from);
  void MergeFrom(const ValidateLicenseRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidateLicenseRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ValidateLicenseRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLicenseIdFieldNumber = 1,
    kRequestIdFieldNumber = 2,
    kPublicKeyFieldNumber = 4,
    kSignatureFieldNumber = 5,
    kActivatedAtFieldNumber = 3,
  };
  // string license_id = 1;
  void clear_license_id();
  const std::string& license_id() const;
  void set_license_id(const std::string& value);
  void set_license_id(std::string&& value);
  void set_license_id(const char* value);
  void set_license_id(const char* value, size_t size);
  std::string* mutable_license_id();
  std::string* release_license_id();
  void set_allocated_license_id(std::string* license_id);
  private:
  const std::string& _internal_license_id() const;
  void _internal_set_license_id(const std::string& value);
  std::string* _internal_mutable_license_id();
  public:

  // string request_id = 2;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string public_key = 4;
  void clear_public_key();
  const std::string& public_key() const;
  void set_public_key(const std::string& value);
  void set_public_key(std::string&& value);
  void set_public_key(const char* value);
  void set_public_key(const char* value, size_t size);
  std::string* mutable_public_key();
  std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);
  private:
  const std::string& _internal_public_key() const;
  void _internal_set_public_key(const std::string& value);
  std::string* _internal_mutable_public_key();
  public:

  // bytes signature = 5;
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // .google.protobuf.Timestamp activated_at = 3;
  bool has_activated_at() const;
  private:
  bool _internal_has_activated_at() const;
  public:
  void clear_activated_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& activated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_activated_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_activated_at();
  void set_allocated_activated_at(PROTOBUF_NAMESPACE_ID::Timestamp* activated_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_activated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_activated_at();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ValidateLicenseRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr license_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  PROTOBUF_NAMESPACE_ID::Timestamp* activated_at_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ValidateLicenseResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ValidateLicenseResponse) */ {
 public:
  ValidateLicenseResponse();
  virtual ~ValidateLicenseResponse();

  ValidateLicenseResponse(const ValidateLicenseResponse& from);
  ValidateLicenseResponse(ValidateLicenseResponse&& from) noexcept
    : ValidateLicenseResponse() {
    *this = ::std::move(from);
  }

  inline ValidateLicenseResponse& operator=(const ValidateLicenseResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidateLicenseResponse& operator=(ValidateLicenseResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ValidateLicenseResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValidateLicenseResponse* internal_default_instance() {
    return reinterpret_cast<const ValidateLicenseResponse*>(
               &_ValidateLicenseResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(ValidateLicenseResponse& a, ValidateLicenseResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidateLicenseResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValidateLicenseResponse* New() const final {
    return CreateMaybeMessage<ValidateLicenseResponse>(nullptr);
  }

  ValidateLicenseResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValidateLicenseResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ValidateLicenseResponse& from);
  void MergeFrom(const ValidateLicenseResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidateLicenseResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ValidateLicenseResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLimitsFieldNumber = 3,
    kRequestIdFieldNumber = 2,
    kSignatureFieldNumber = 4,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.LicenseLimit limits = 3;
  int limits_size() const;
  private:
  int _internal_limits_size() const;
  public:
  void clear_limits();
  ::clarifai::api::LicenseLimit* mutable_limits(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::LicenseLimit >*
      mutable_limits();
  private:
  const ::clarifai::api::LicenseLimit& _internal_limits(int index) const;
  ::clarifai::api::LicenseLimit* _internal_add_limits();
  public:
  const ::clarifai::api::LicenseLimit& limits(int index) const;
  ::clarifai::api::LicenseLimit* add_limits();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::LicenseLimit >&
      limits() const;

  // string request_id = 2;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // bytes signature = 4;
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ValidateLicenseResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::LicenseLimit > limits_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListLicensesRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListLicensesRequest) */ {
 public:
  ListLicensesRequest();
  virtual ~ListLicensesRequest();

  ListLicensesRequest(const ListLicensesRequest& from);
  ListLicensesRequest(ListLicensesRequest&& from) noexcept
    : ListLicensesRequest() {
    *this = ::std::move(from);
  }

  inline ListLicensesRequest& operator=(const ListLicensesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListLicensesRequest& operator=(ListLicensesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListLicensesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListLicensesRequest* internal_default_instance() {
    return reinterpret_cast<const ListLicensesRequest*>(
               &_ListLicensesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  friend void swap(ListLicensesRequest& a, ListLicensesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListLicensesRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListLicensesRequest* New() const final {
    return CreateMaybeMessage<ListLicensesRequest>(nullptr);
  }

  ListLicensesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListLicensesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListLicensesRequest& from);
  void MergeFrom(const ListLicensesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListLicensesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListLicensesRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserAppIdFieldNumber = 1,
  };
  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ListLicensesRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class GetLicenseRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.GetLicenseRequest) */ {
 public:
  GetLicenseRequest();
  virtual ~GetLicenseRequest();

  GetLicenseRequest(const GetLicenseRequest& from);
  GetLicenseRequest(GetLicenseRequest&& from) noexcept
    : GetLicenseRequest() {
    *this = ::std::move(from);
  }

  inline GetLicenseRequest& operator=(const GetLicenseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLicenseRequest& operator=(GetLicenseRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLicenseRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLicenseRequest* internal_default_instance() {
    return reinterpret_cast<const GetLicenseRequest*>(
               &_GetLicenseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  friend void swap(GetLicenseRequest& a, GetLicenseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLicenseRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLicenseRequest* New() const final {
    return CreateMaybeMessage<GetLicenseRequest>(nullptr);
  }

  GetLicenseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLicenseRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLicenseRequest& from);
  void MergeFrom(const GetLicenseRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLicenseRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.GetLicenseRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLicenseIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // string license_id = 2;
  void clear_license_id();
  const std::string& license_id() const;
  void set_license_id(const std::string& value);
  void set_license_id(std::string&& value);
  void set_license_id(const char* value);
  void set_license_id(const char* value, size_t size);
  std::string* mutable_license_id();
  std::string* release_license_id();
  void set_allocated_license_id(std::string* license_id);
  private:
  const std::string& _internal_license_id() const;
  void _internal_set_license_id(const std::string& value);
  std::string* _internal_mutable_license_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.GetLicenseRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr license_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class SingleLicenseResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.SingleLicenseResponse) */ {
 public:
  SingleLicenseResponse();
  virtual ~SingleLicenseResponse();

  SingleLicenseResponse(const SingleLicenseResponse& from);
  SingleLicenseResponse(SingleLicenseResponse&& from) noexcept
    : SingleLicenseResponse() {
    *this = ::std::move(from);
  }

  inline SingleLicenseResponse& operator=(const SingleLicenseResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleLicenseResponse& operator=(SingleLicenseResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SingleLicenseResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SingleLicenseResponse* internal_default_instance() {
    return reinterpret_cast<const SingleLicenseResponse*>(
               &_SingleLicenseResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  friend void swap(SingleLicenseResponse& a, SingleLicenseResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleLicenseResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SingleLicenseResponse* New() const final {
    return CreateMaybeMessage<SingleLicenseResponse>(nullptr);
  }

  SingleLicenseResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SingleLicenseResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SingleLicenseResponse& from);
  void MergeFrom(const SingleLicenseResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleLicenseResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.SingleLicenseResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kLicenseFieldNumber = 2,
  };
  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // .clarifai.api.License license = 2;
  bool has_license() const;
  private:
  bool _internal_has_license() const;
  public:
  void clear_license();
  const ::clarifai::api::License& license() const;
  ::clarifai::api::License* release_license();
  ::clarifai::api::License* mutable_license();
  void set_allocated_license(::clarifai::api::License* license);
  private:
  const ::clarifai::api::License& _internal_license() const;
  ::clarifai::api::License* _internal_mutable_license();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.SingleLicenseResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::status::Status* status_;
  ::clarifai::api::License* license_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultipleLicensesResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultipleLicensesResponse) */ {
 public:
  MultipleLicensesResponse();
  virtual ~MultipleLicensesResponse();

  MultipleLicensesResponse(const MultipleLicensesResponse& from);
  MultipleLicensesResponse(MultipleLicensesResponse&& from) noexcept
    : MultipleLicensesResponse() {
    *this = ::std::move(from);
  }

  inline MultipleLicensesResponse& operator=(const MultipleLicensesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultipleLicensesResponse& operator=(MultipleLicensesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultipleLicensesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultipleLicensesResponse* internal_default_instance() {
    return reinterpret_cast<const MultipleLicensesResponse*>(
               &_MultipleLicensesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  friend void swap(MultipleLicensesResponse& a, MultipleLicensesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultipleLicensesResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultipleLicensesResponse* New() const final {
    return CreateMaybeMessage<MultipleLicensesResponse>(nullptr);
  }

  MultipleLicensesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultipleLicensesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultipleLicensesResponse& from);
  void MergeFrom(const MultipleLicensesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultipleLicensesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultipleLicensesResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLicensesFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.License licenses = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int licenses_size() const;
  private:
  int _internal_licenses_size() const;
  public:
  void clear_licenses();
  ::clarifai::api::License* mutable_licenses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::License >*
      mutable_licenses();
  private:
  const ::clarifai::api::License& _internal_licenses(int index) const;
  ::clarifai::api::License* _internal_add_licenses();
  public:
  const ::clarifai::api::License& licenses(int index) const;
  ::clarifai::api::License* add_licenses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::License >&
      licenses() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.MultipleLicensesResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::License > licenses_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class GetModelRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.GetModelRequest) */ {
 public:
  GetModelRequest();
  virtual ~GetModelRequest();

  GetModelRequest(const GetModelRequest& from);
  GetModelRequest(GetModelRequest&& from) noexcept
    : GetModelRequest() {
    *this = ::std::move(from);
  }

  inline GetModelRequest& operator=(const GetModelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetModelRequest& operator=(GetModelRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetModelRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetModelRequest* internal_default_instance() {
    return reinterpret_cast<const GetModelRequest*>(
               &_GetModelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  friend void swap(GetModelRequest& a, GetModelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetModelRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetModelRequest* New() const final {
    return CreateMaybeMessage<GetModelRequest>(nullptr);
  }

  GetModelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetModelRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetModelRequest& from);
  void MergeFrom(const GetModelRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetModelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.GetModelRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelIdFieldNumber = 2,
    kVersionIdFieldNumber = 3,
    kLanguageFieldNumber = 4,
    kUserAppIdFieldNumber = 1,
    kTrainedBeforeFieldNumber = 5,
  };
  // string model_id = 2;
  void clear_model_id();
  const std::string& model_id() const;
  void set_model_id(const std::string& value);
  void set_model_id(std::string&& value);
  void set_model_id(const char* value);
  void set_model_id(const char* value, size_t size);
  std::string* mutable_model_id();
  std::string* release_model_id();
  void set_allocated_model_id(std::string* model_id);
  private:
  const std::string& _internal_model_id() const;
  void _internal_set_model_id(const std::string& value);
  std::string* _internal_mutable_model_id();
  public:

  // string version_id = 3;
  void clear_version_id();
  const std::string& version_id() const;
  void set_version_id(const std::string& value);
  void set_version_id(std::string&& value);
  void set_version_id(const char* value);
  void set_version_id(const char* value, size_t size);
  std::string* mutable_version_id();
  std::string* release_version_id();
  void set_allocated_version_id(std::string* version_id);
  private:
  const std::string& _internal_version_id() const;
  void _internal_set_version_id(const std::string& value);
  std::string* _internal_mutable_version_id();
  public:

  // string language = 4;
  void clear_language();
  const std::string& language() const;
  void set_language(const std::string& value);
  void set_language(std::string&& value);
  void set_language(const char* value);
  void set_language(const char* value, size_t size);
  std::string* mutable_language();
  std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // bool trained_before = 5;
  void clear_trained_before();
  bool trained_before() const;
  void set_trained_before(bool value);
  private:
  bool _internal_trained_before() const;
  void _internal_set_trained_before(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.GetModelRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  bool trained_before_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class GetModelOutputInfoRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.GetModelOutputInfoRequest) */ {
 public:
  GetModelOutputInfoRequest();
  virtual ~GetModelOutputInfoRequest();

  GetModelOutputInfoRequest(const GetModelOutputInfoRequest& from);
  GetModelOutputInfoRequest(GetModelOutputInfoRequest&& from) noexcept
    : GetModelOutputInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetModelOutputInfoRequest& operator=(const GetModelOutputInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetModelOutputInfoRequest& operator=(GetModelOutputInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetModelOutputInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetModelOutputInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetModelOutputInfoRequest*>(
               &_GetModelOutputInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  friend void swap(GetModelOutputInfoRequest& a, GetModelOutputInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetModelOutputInfoRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetModelOutputInfoRequest* New() const final {
    return CreateMaybeMessage<GetModelOutputInfoRequest>(nullptr);
  }

  GetModelOutputInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetModelOutputInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetModelOutputInfoRequest& from);
  void MergeFrom(const GetModelOutputInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetModelOutputInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.GetModelOutputInfoRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelIdFieldNumber = 2,
    kVersionIdFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
  };
  // string model_id = 2;
  void clear_model_id();
  const std::string& model_id() const;
  void set_model_id(const std::string& value);
  void set_model_id(std::string&& value);
  void set_model_id(const char* value);
  void set_model_id(const char* value, size_t size);
  std::string* mutable_model_id();
  std::string* release_model_id();
  void set_allocated_model_id(std::string* model_id);
  private:
  const std::string& _internal_model_id() const;
  void _internal_set_model_id(const std::string& value);
  std::string* _internal_mutable_model_id();
  public:

  // string version_id = 3;
  void clear_version_id();
  const std::string& version_id() const;
  void set_version_id(const std::string& value);
  void set_version_id(std::string&& value);
  void set_version_id(const char* value);
  void set_version_id(const char* value, size_t size);
  std::string* mutable_version_id();
  std::string* release_version_id();
  void set_allocated_version_id(std::string* version_id);
  private:
  const std::string& _internal_version_id() const;
  void _internal_set_version_id(const std::string& value);
  std::string* _internal_mutable_version_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.GetModelOutputInfoRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListModelsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListModelsRequest) */ {
 public:
  ListModelsRequest();
  virtual ~ListModelsRequest();

  ListModelsRequest(const ListModelsRequest& from);
  ListModelsRequest(ListModelsRequest&& from) noexcept
    : ListModelsRequest() {
    *this = ::std::move(from);
  }

  inline ListModelsRequest& operator=(const ListModelsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListModelsRequest& operator=(ListModelsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListModelsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListModelsRequest* internal_default_instance() {
    return reinterpret_cast<const ListModelsRequest*>(
               &_ListModelsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  friend void swap(ListModelsRequest& a, ListModelsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListModelsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListModelsRequest* New() const final {
    return CreateMaybeMessage<ListModelsRequest>(nullptr);
  }

  ListModelsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListModelsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListModelsRequest& from);
  void MergeFrom(const ListModelsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListModelsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListModelsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 4,
    kUserAppIdFieldNumber = 1,
    kPageFieldNumber = 2,
    kPerPageFieldNumber = 3,
  };
  // repeated string ids = 4;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  const std::string& ids(int index) const;
  std::string* mutable_ids(int index);
  void set_ids(int index, const std::string& value);
  void set_ids(int index, std::string&& value);
  void set_ids(int index, const char* value);
  void set_ids(int index, const char* value, size_t size);
  std::string* add_ids();
  void add_ids(const std::string& value);
  void add_ids(std::string&& value);
  void add_ids(const char* value);
  void add_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ids();
  private:
  const std::string& _internal_ids(int index) const;
  std::string* _internal_add_ids();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // uint32 page = 2;
  void clear_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 page() const;
  void set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_page() const;
  void _internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 per_page = 3;
  void clear_per_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 per_page() const;
  void set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_per_page() const;
  void _internal_set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ListModelsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ids_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 page_;
  ::PROTOBUF_NAMESPACE_ID::uint32 per_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostModelsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostModelsRequest) */ {
 public:
  PostModelsRequest();
  virtual ~PostModelsRequest();

  PostModelsRequest(const PostModelsRequest& from);
  PostModelsRequest(PostModelsRequest&& from) noexcept
    : PostModelsRequest() {
    *this = ::std::move(from);
  }

  inline PostModelsRequest& operator=(const PostModelsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostModelsRequest& operator=(PostModelsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostModelsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostModelsRequest* internal_default_instance() {
    return reinterpret_cast<const PostModelsRequest*>(
               &_PostModelsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    109;

  friend void swap(PostModelsRequest& a, PostModelsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostModelsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostModelsRequest* New() const final {
    return CreateMaybeMessage<PostModelsRequest>(nullptr);
  }

  PostModelsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostModelsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostModelsRequest& from);
  void MergeFrom(const PostModelsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostModelsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostModelsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelsFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
    kModelFieldNumber = 2,
  };
  // repeated .clarifai.api.Model models = 3;
  int models_size() const;
  private:
  int _internal_models_size() const;
  public:
  void clear_models();
  ::clarifai::api::Model* mutable_models(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Model >*
      mutable_models();
  private:
  const ::clarifai::api::Model& _internal_models(int index) const;
  ::clarifai::api::Model* _internal_add_models();
  public:
  const ::clarifai::api::Model& models(int index) const;
  ::clarifai::api::Model* add_models();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Model >&
      models() const;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // .clarifai.api.Model model = 2 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_model() const;
  private:
  bool _internal_has_model() const;
  public:
  PROTOBUF_DEPRECATED void clear_model();
  PROTOBUF_DEPRECATED const ::clarifai::api::Model& model() const;
  PROTOBUF_DEPRECATED ::clarifai::api::Model* release_model();
  PROTOBUF_DEPRECATED ::clarifai::api::Model* mutable_model();
  PROTOBUF_DEPRECATED void set_allocated_model(::clarifai::api::Model* model);
  private:
  const ::clarifai::api::Model& _internal_model() const;
  ::clarifai::api::Model* _internal_mutable_model();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PostModelsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Model > models_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::clarifai::api::Model* model_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PatchModelsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PatchModelsRequest) */ {
 public:
  PatchModelsRequest();
  virtual ~PatchModelsRequest();

  PatchModelsRequest(const PatchModelsRequest& from);
  PatchModelsRequest(PatchModelsRequest&& from) noexcept
    : PatchModelsRequest() {
    *this = ::std::move(from);
  }

  inline PatchModelsRequest& operator=(const PatchModelsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatchModelsRequest& operator=(PatchModelsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PatchModelsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PatchModelsRequest* internal_default_instance() {
    return reinterpret_cast<const PatchModelsRequest*>(
               &_PatchModelsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    110;

  friend void swap(PatchModelsRequest& a, PatchModelsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PatchModelsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PatchModelsRequest* New() const final {
    return CreateMaybeMessage<PatchModelsRequest>(nullptr);
  }

  PatchModelsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PatchModelsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PatchModelsRequest& from);
  void MergeFrom(const PatchModelsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatchModelsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PatchModelsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelsFieldNumber = 2,
    kActionFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.Model models = 2;
  int models_size() const;
  private:
  int _internal_models_size() const;
  public:
  void clear_models();
  ::clarifai::api::Model* mutable_models(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Model >*
      mutable_models();
  private:
  const ::clarifai::api::Model& _internal_models(int index) const;
  ::clarifai::api::Model* _internal_add_models();
  public:
  const ::clarifai::api::Model& models(int index) const;
  ::clarifai::api::Model* add_models();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Model >&
      models() const;

  // string action = 3;
  void clear_action();
  const std::string& action() const;
  void set_action(const std::string& value);
  void set_action(std::string&& value);
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  std::string* mutable_action();
  std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PatchModelsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Model > models_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteModelRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.DeleteModelRequest) */ {
 public:
  DeleteModelRequest();
  virtual ~DeleteModelRequest();

  DeleteModelRequest(const DeleteModelRequest& from);
  DeleteModelRequest(DeleteModelRequest&& from) noexcept
    : DeleteModelRequest() {
    *this = ::std::move(from);
  }

  inline DeleteModelRequest& operator=(const DeleteModelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteModelRequest& operator=(DeleteModelRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteModelRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteModelRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteModelRequest*>(
               &_DeleteModelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    111;

  friend void swap(DeleteModelRequest& a, DeleteModelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteModelRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteModelRequest* New() const final {
    return CreateMaybeMessage<DeleteModelRequest>(nullptr);
  }

  DeleteModelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteModelRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteModelRequest& from);
  void MergeFrom(const DeleteModelRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteModelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.DeleteModelRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // string model_id = 2;
  void clear_model_id();
  const std::string& model_id() const;
  void set_model_id(const std::string& value);
  void set_model_id(std::string&& value);
  void set_model_id(const char* value);
  void set_model_id(const char* value, size_t size);
  std::string* mutable_model_id();
  std::string* release_model_id();
  void set_allocated_model_id(std::string* model_id);
  private:
  const std::string& _internal_model_id() const;
  void _internal_set_model_id(const std::string& value);
  std::string* _internal_mutable_model_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.DeleteModelRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteModelsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.DeleteModelsRequest) */ {
 public:
  DeleteModelsRequest();
  virtual ~DeleteModelsRequest();

  DeleteModelsRequest(const DeleteModelsRequest& from);
  DeleteModelsRequest(DeleteModelsRequest&& from) noexcept
    : DeleteModelsRequest() {
    *this = ::std::move(from);
  }

  inline DeleteModelsRequest& operator=(const DeleteModelsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteModelsRequest& operator=(DeleteModelsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteModelsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteModelsRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteModelsRequest*>(
               &_DeleteModelsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    112;

  friend void swap(DeleteModelsRequest& a, DeleteModelsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteModelsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteModelsRequest* New() const final {
    return CreateMaybeMessage<DeleteModelsRequest>(nullptr);
  }

  DeleteModelsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteModelsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteModelsRequest& from);
  void MergeFrom(const DeleteModelsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteModelsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.DeleteModelsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
    kDeleteAllFieldNumber = 3,
  };
  // repeated string ids = 2;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  const std::string& ids(int index) const;
  std::string* mutable_ids(int index);
  void set_ids(int index, const std::string& value);
  void set_ids(int index, std::string&& value);
  void set_ids(int index, const char* value);
  void set_ids(int index, const char* value, size_t size);
  std::string* add_ids();
  void add_ids(const std::string& value);
  void add_ids(std::string&& value);
  void add_ids(const char* value);
  void add_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ids();
  private:
  const std::string& _internal_ids(int index) const;
  std::string* _internal_add_ids();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // bool delete_all = 3;
  void clear_delete_all();
  bool delete_all() const;
  void set_delete_all(bool value);
  private:
  bool _internal_delete_all() const;
  void _internal_set_delete_all(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.DeleteModelsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ids_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  bool delete_all_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostModelsSearchesRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostModelsSearchesRequest) */ {
 public:
  PostModelsSearchesRequest();
  virtual ~PostModelsSearchesRequest();

  PostModelsSearchesRequest(const PostModelsSearchesRequest& from);
  PostModelsSearchesRequest(PostModelsSearchesRequest&& from) noexcept
    : PostModelsSearchesRequest() {
    *this = ::std::move(from);
  }

  inline PostModelsSearchesRequest& operator=(const PostModelsSearchesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostModelsSearchesRequest& operator=(PostModelsSearchesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostModelsSearchesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostModelsSearchesRequest* internal_default_instance() {
    return reinterpret_cast<const PostModelsSearchesRequest*>(
               &_PostModelsSearchesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    113;

  friend void swap(PostModelsSearchesRequest& a, PostModelsSearchesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostModelsSearchesRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostModelsSearchesRequest* New() const final {
    return CreateMaybeMessage<PostModelsSearchesRequest>(nullptr);
  }

  PostModelsSearchesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostModelsSearchesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostModelsSearchesRequest& from);
  void MergeFrom(const PostModelsSearchesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostModelsSearchesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostModelsSearchesRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserAppIdFieldNumber = 1,
    kModelQueryFieldNumber = 2,
    kPaginationFieldNumber = 3,
  };
  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // .clarifai.api.ModelQuery model_query = 2;
  bool has_model_query() const;
  private:
  bool _internal_has_model_query() const;
  public:
  void clear_model_query();
  const ::clarifai::api::ModelQuery& model_query() const;
  ::clarifai::api::ModelQuery* release_model_query();
  ::clarifai::api::ModelQuery* mutable_model_query();
  void set_allocated_model_query(::clarifai::api::ModelQuery* model_query);
  private:
  const ::clarifai::api::ModelQuery& _internal_model_query() const;
  ::clarifai::api::ModelQuery* _internal_mutable_model_query();
  public:

  // .clarifai.api.Pagination pagination = 3;
  bool has_pagination() const;
  private:
  bool _internal_has_pagination() const;
  public:
  void clear_pagination();
  const ::clarifai::api::Pagination& pagination() const;
  ::clarifai::api::Pagination* release_pagination();
  ::clarifai::api::Pagination* mutable_pagination();
  void set_allocated_pagination(::clarifai::api::Pagination* pagination);
  private:
  const ::clarifai::api::Pagination& _internal_pagination() const;
  ::clarifai::api::Pagination* _internal_mutable_pagination();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PostModelsSearchesRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::clarifai::api::ModelQuery* model_query_;
  ::clarifai::api::Pagination* pagination_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class SingleModelResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.SingleModelResponse) */ {
 public:
  SingleModelResponse();
  virtual ~SingleModelResponse();

  SingleModelResponse(const SingleModelResponse& from);
  SingleModelResponse(SingleModelResponse&& from) noexcept
    : SingleModelResponse() {
    *this = ::std::move(from);
  }

  inline SingleModelResponse& operator=(const SingleModelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleModelResponse& operator=(SingleModelResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SingleModelResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SingleModelResponse* internal_default_instance() {
    return reinterpret_cast<const SingleModelResponse*>(
               &_SingleModelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    114;

  friend void swap(SingleModelResponse& a, SingleModelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleModelResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SingleModelResponse* New() const final {
    return CreateMaybeMessage<SingleModelResponse>(nullptr);
  }

  SingleModelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SingleModelResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SingleModelResponse& from);
  void MergeFrom(const SingleModelResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleModelResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.SingleModelResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kModelFieldNumber = 2,
  };
  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // .clarifai.api.Model model = 2;
  bool has_model() const;
  private:
  bool _internal_has_model() const;
  public:
  void clear_model();
  const ::clarifai::api::Model& model() const;
  ::clarifai::api::Model* release_model();
  ::clarifai::api::Model* mutable_model();
  void set_allocated_model(::clarifai::api::Model* model);
  private:
  const ::clarifai::api::Model& _internal_model() const;
  ::clarifai::api::Model* _internal_mutable_model();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.SingleModelResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::status::Status* status_;
  ::clarifai::api::Model* model_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiModelResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiModelResponse) */ {
 public:
  MultiModelResponse();
  virtual ~MultiModelResponse();

  MultiModelResponse(const MultiModelResponse& from);
  MultiModelResponse(MultiModelResponse&& from) noexcept
    : MultiModelResponse() {
    *this = ::std::move(from);
  }

  inline MultiModelResponse& operator=(const MultiModelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiModelResponse& operator=(MultiModelResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiModelResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiModelResponse* internal_default_instance() {
    return reinterpret_cast<const MultiModelResponse*>(
               &_MultiModelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    115;

  friend void swap(MultiModelResponse& a, MultiModelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiModelResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiModelResponse* New() const final {
    return CreateMaybeMessage<MultiModelResponse>(nullptr);
  }

  MultiModelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiModelResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiModelResponse& from);
  void MergeFrom(const MultiModelResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiModelResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiModelResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.Model models = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int models_size() const;
  private:
  int _internal_models_size() const;
  public:
  void clear_models();
  ::clarifai::api::Model* mutable_models(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Model >*
      mutable_models();
  private:
  const ::clarifai::api::Model& _internal_models(int index) const;
  ::clarifai::api::Model* _internal_add_models();
  public:
  const ::clarifai::api::Model& models(int index) const;
  ::clarifai::api::Model* add_models();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Model >&
      models() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiModelResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Model > models_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class GetModelVersionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.GetModelVersionRequest) */ {
 public:
  GetModelVersionRequest();
  virtual ~GetModelVersionRequest();

  GetModelVersionRequest(const GetModelVersionRequest& from);
  GetModelVersionRequest(GetModelVersionRequest&& from) noexcept
    : GetModelVersionRequest() {
    *this = ::std::move(from);
  }

  inline GetModelVersionRequest& operator=(const GetModelVersionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetModelVersionRequest& operator=(GetModelVersionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetModelVersionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetModelVersionRequest* internal_default_instance() {
    return reinterpret_cast<const GetModelVersionRequest*>(
               &_GetModelVersionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    116;

  friend void swap(GetModelVersionRequest& a, GetModelVersionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetModelVersionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetModelVersionRequest* New() const final {
    return CreateMaybeMessage<GetModelVersionRequest>(nullptr);
  }

  GetModelVersionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetModelVersionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetModelVersionRequest& from);
  void MergeFrom(const GetModelVersionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetModelVersionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.GetModelVersionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelIdFieldNumber = 2,
    kVersionIdFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
  };
  // string model_id = 2;
  void clear_model_id();
  const std::string& model_id() const;
  void set_model_id(const std::string& value);
  void set_model_id(std::string&& value);
  void set_model_id(const char* value);
  void set_model_id(const char* value, size_t size);
  std::string* mutable_model_id();
  std::string* release_model_id();
  void set_allocated_model_id(std::string* model_id);
  private:
  const std::string& _internal_model_id() const;
  void _internal_set_model_id(const std::string& value);
  std::string* _internal_mutable_model_id();
  public:

  // string version_id = 3;
  void clear_version_id();
  const std::string& version_id() const;
  void set_version_id(const std::string& value);
  void set_version_id(std::string&& value);
  void set_version_id(const char* value);
  void set_version_id(const char* value, size_t size);
  std::string* mutable_version_id();
  std::string* release_version_id();
  void set_allocated_version_id(std::string* version_id);
  private:
  const std::string& _internal_version_id() const;
  void _internal_set_version_id(const std::string& value);
  std::string* _internal_mutable_version_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.GetModelVersionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListModelVersionsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListModelVersionsRequest) */ {
 public:
  ListModelVersionsRequest();
  virtual ~ListModelVersionsRequest();

  ListModelVersionsRequest(const ListModelVersionsRequest& from);
  ListModelVersionsRequest(ListModelVersionsRequest&& from) noexcept
    : ListModelVersionsRequest() {
    *this = ::std::move(from);
  }

  inline ListModelVersionsRequest& operator=(const ListModelVersionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListModelVersionsRequest& operator=(ListModelVersionsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListModelVersionsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListModelVersionsRequest* internal_default_instance() {
    return reinterpret_cast<const ListModelVersionsRequest*>(
               &_ListModelVersionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    117;

  friend void swap(ListModelVersionsRequest& a, ListModelVersionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListModelVersionsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListModelVersionsRequest* New() const final {
    return CreateMaybeMessage<ListModelVersionsRequest>(nullptr);
  }

  ListModelVersionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListModelVersionsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListModelVersionsRequest& from);
  void MergeFrom(const ListModelVersionsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListModelVersionsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListModelVersionsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConceptIdsFieldNumber = 5,
    kModelIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
    kPageFieldNumber = 3,
    kPerPageFieldNumber = 4,
  };
  // repeated string concept_ids = 5;
  int concept_ids_size() const;
  private:
  int _internal_concept_ids_size() const;
  public:
  void clear_concept_ids();
  const std::string& concept_ids(int index) const;
  std::string* mutable_concept_ids(int index);
  void set_concept_ids(int index, const std::string& value);
  void set_concept_ids(int index, std::string&& value);
  void set_concept_ids(int index, const char* value);
  void set_concept_ids(int index, const char* value, size_t size);
  std::string* add_concept_ids();
  void add_concept_ids(const std::string& value);
  void add_concept_ids(std::string&& value);
  void add_concept_ids(const char* value);
  void add_concept_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& concept_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_concept_ids();
  private:
  const std::string& _internal_concept_ids(int index) const;
  std::string* _internal_add_concept_ids();
  public:

  // string model_id = 2;
  void clear_model_id();
  const std::string& model_id() const;
  void set_model_id(const std::string& value);
  void set_model_id(std::string&& value);
  void set_model_id(const char* value);
  void set_model_id(const char* value, size_t size);
  std::string* mutable_model_id();
  std::string* release_model_id();
  void set_allocated_model_id(std::string* model_id);
  private:
  const std::string& _internal_model_id() const;
  void _internal_set_model_id(const std::string& value);
  std::string* _internal_mutable_model_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // uint32 page = 3;
  void clear_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 page() const;
  void set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_page() const;
  void _internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 per_page = 4;
  void clear_per_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 per_page() const;
  void set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_per_page() const;
  void _internal_set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ListModelVersionsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> concept_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 page_;
  ::PROTOBUF_NAMESPACE_ID::uint32 per_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteModelVersionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.DeleteModelVersionRequest) */ {
 public:
  DeleteModelVersionRequest();
  virtual ~DeleteModelVersionRequest();

  DeleteModelVersionRequest(const DeleteModelVersionRequest& from);
  DeleteModelVersionRequest(DeleteModelVersionRequest&& from) noexcept
    : DeleteModelVersionRequest() {
    *this = ::std::move(from);
  }

  inline DeleteModelVersionRequest& operator=(const DeleteModelVersionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteModelVersionRequest& operator=(DeleteModelVersionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteModelVersionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteModelVersionRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteModelVersionRequest*>(
               &_DeleteModelVersionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    118;

  friend void swap(DeleteModelVersionRequest& a, DeleteModelVersionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteModelVersionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteModelVersionRequest* New() const final {
    return CreateMaybeMessage<DeleteModelVersionRequest>(nullptr);
  }

  DeleteModelVersionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteModelVersionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteModelVersionRequest& from);
  void MergeFrom(const DeleteModelVersionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteModelVersionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.DeleteModelVersionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelIdFieldNumber = 3,
    kVersionIdFieldNumber = 4,
    kUserAppIdFieldNumber = 1,
  };
  // string model_id = 3;
  void clear_model_id();
  const std::string& model_id() const;
  void set_model_id(const std::string& value);
  void set_model_id(std::string&& value);
  void set_model_id(const char* value);
  void set_model_id(const char* value, size_t size);
  std::string* mutable_model_id();
  std::string* release_model_id();
  void set_allocated_model_id(std::string* model_id);
  private:
  const std::string& _internal_model_id() const;
  void _internal_set_model_id(const std::string& value);
  std::string* _internal_mutable_model_id();
  public:

  // string version_id = 4;
  void clear_version_id();
  const std::string& version_id() const;
  void set_version_id(const std::string& value);
  void set_version_id(std::string&& value);
  void set_version_id(const char* value);
  void set_version_id(const char* value, size_t size);
  std::string* mutable_version_id();
  std::string* release_version_id();
  void set_allocated_version_id(std::string* version_id);
  private:
  const std::string& _internal_version_id() const;
  void _internal_set_version_id(const std::string& value);
  std::string* _internal_mutable_version_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.DeleteModelVersionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class SingleModelVersionResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.SingleModelVersionResponse) */ {
 public:
  SingleModelVersionResponse();
  virtual ~SingleModelVersionResponse();

  SingleModelVersionResponse(const SingleModelVersionResponse& from);
  SingleModelVersionResponse(SingleModelVersionResponse&& from) noexcept
    : SingleModelVersionResponse() {
    *this = ::std::move(from);
  }

  inline SingleModelVersionResponse& operator=(const SingleModelVersionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleModelVersionResponse& operator=(SingleModelVersionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SingleModelVersionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SingleModelVersionResponse* internal_default_instance() {
    return reinterpret_cast<const SingleModelVersionResponse*>(
               &_SingleModelVersionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    119;

  friend void swap(SingleModelVersionResponse& a, SingleModelVersionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleModelVersionResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SingleModelVersionResponse* New() const final {
    return CreateMaybeMessage<SingleModelVersionResponse>(nullptr);
  }

  SingleModelVersionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SingleModelVersionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SingleModelVersionResponse& from);
  void MergeFrom(const SingleModelVersionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleModelVersionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.SingleModelVersionResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kModelVersionFieldNumber = 2,
  };
  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // .clarifai.api.ModelVersion model_version = 2;
  bool has_model_version() const;
  private:
  bool _internal_has_model_version() const;
  public:
  void clear_model_version();
  const ::clarifai::api::ModelVersion& model_version() const;
  ::clarifai::api::ModelVersion* release_model_version();
  ::clarifai::api::ModelVersion* mutable_model_version();
  void set_allocated_model_version(::clarifai::api::ModelVersion* model_version);
  private:
  const ::clarifai::api::ModelVersion& _internal_model_version() const;
  ::clarifai::api::ModelVersion* _internal_mutable_model_version();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.SingleModelVersionResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::status::Status* status_;
  ::clarifai::api::ModelVersion* model_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiModelVersionResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiModelVersionResponse) */ {
 public:
  MultiModelVersionResponse();
  virtual ~MultiModelVersionResponse();

  MultiModelVersionResponse(const MultiModelVersionResponse& from);
  MultiModelVersionResponse(MultiModelVersionResponse&& from) noexcept
    : MultiModelVersionResponse() {
    *this = ::std::move(from);
  }

  inline MultiModelVersionResponse& operator=(const MultiModelVersionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiModelVersionResponse& operator=(MultiModelVersionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiModelVersionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiModelVersionResponse* internal_default_instance() {
    return reinterpret_cast<const MultiModelVersionResponse*>(
               &_MultiModelVersionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    120;

  friend void swap(MultiModelVersionResponse& a, MultiModelVersionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiModelVersionResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiModelVersionResponse* New() const final {
    return CreateMaybeMessage<MultiModelVersionResponse>(nullptr);
  }

  MultiModelVersionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiModelVersionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiModelVersionResponse& from);
  void MergeFrom(const MultiModelVersionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiModelVersionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiModelVersionResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelVersionsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.ModelVersion model_versions = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int model_versions_size() const;
  private:
  int _internal_model_versions_size() const;
  public:
  void clear_model_versions();
  ::clarifai::api::ModelVersion* mutable_model_versions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelVersion >*
      mutable_model_versions();
  private:
  const ::clarifai::api::ModelVersion& _internal_model_versions(int index) const;
  ::clarifai::api::ModelVersion* _internal_add_model_versions();
  public:
  const ::clarifai::api::ModelVersion& model_versions(int index) const;
  ::clarifai::api::ModelVersion* add_model_versions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelVersion >&
      model_versions() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiModelVersionResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelVersion > model_versions_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostModelVersionsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostModelVersionsRequest) */ {
 public:
  PostModelVersionsRequest();
  virtual ~PostModelVersionsRequest();

  PostModelVersionsRequest(const PostModelVersionsRequest& from);
  PostModelVersionsRequest(PostModelVersionsRequest&& from) noexcept
    : PostModelVersionsRequest() {
    *this = ::std::move(from);
  }

  inline PostModelVersionsRequest& operator=(const PostModelVersionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostModelVersionsRequest& operator=(PostModelVersionsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostModelVersionsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostModelVersionsRequest* internal_default_instance() {
    return reinterpret_cast<const PostModelVersionsRequest*>(
               &_PostModelVersionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    121;

  friend void swap(PostModelVersionsRequest& a, PostModelVersionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostModelVersionsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostModelVersionsRequest* New() const final {
    return CreateMaybeMessage<PostModelVersionsRequest>(nullptr);
  }

  PostModelVersionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostModelVersionsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostModelVersionsRequest& from);
  void MergeFrom(const PostModelVersionsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostModelVersionsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostModelVersionsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelVersionsFieldNumber = 3,
    kModelIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
    kSearchFieldNumber = 4,
    kTrainSearchFieldNumber = 5,
    kTestSearchFieldNumber = 6,
    kEvaluateAfterTrainingFieldNumber = 7,
  };
  // repeated .clarifai.api.ModelVersion model_versions = 3;
  int model_versions_size() const;
  private:
  int _internal_model_versions_size() const;
  public:
  void clear_model_versions();
  ::clarifai::api::ModelVersion* mutable_model_versions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelVersion >*
      mutable_model_versions();
  private:
  const ::clarifai::api::ModelVersion& _internal_model_versions(int index) const;
  ::clarifai::api::ModelVersion* _internal_add_model_versions();
  public:
  const ::clarifai::api::ModelVersion& model_versions(int index) const;
  ::clarifai::api::ModelVersion* add_model_versions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelVersion >&
      model_versions() const;

  // string model_id = 2;
  void clear_model_id();
  const std::string& model_id() const;
  void set_model_id(const std::string& value);
  void set_model_id(std::string&& value);
  void set_model_id(const char* value);
  void set_model_id(const char* value, size_t size);
  std::string* mutable_model_id();
  std::string* release_model_id();
  void set_allocated_model_id(std::string* model_id);
  private:
  const std::string& _internal_model_id() const;
  void _internal_set_model_id(const std::string& value);
  std::string* _internal_mutable_model_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // .clarifai.api.Search search = 4 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_search() const;
  private:
  bool _internal_has_search() const;
  public:
  PROTOBUF_DEPRECATED void clear_search();
  PROTOBUF_DEPRECATED const ::clarifai::api::Search& search() const;
  PROTOBUF_DEPRECATED ::clarifai::api::Search* release_search();
  PROTOBUF_DEPRECATED ::clarifai::api::Search* mutable_search();
  PROTOBUF_DEPRECATED void set_allocated_search(::clarifai::api::Search* search);
  private:
  const ::clarifai::api::Search& _internal_search() const;
  ::clarifai::api::Search* _internal_mutable_search();
  public:

  // .clarifai.api.Search train_search = 5;
  bool has_train_search() const;
  private:
  bool _internal_has_train_search() const;
  public:
  void clear_train_search();
  const ::clarifai::api::Search& train_search() const;
  ::clarifai::api::Search* release_train_search();
  ::clarifai::api::Search* mutable_train_search();
  void set_allocated_train_search(::clarifai::api::Search* train_search);
  private:
  const ::clarifai::api::Search& _internal_train_search() const;
  ::clarifai::api::Search* _internal_mutable_train_search();
  public:

  // .clarifai.api.Search test_search = 6;
  bool has_test_search() const;
  private:
  bool _internal_has_test_search() const;
  public:
  void clear_test_search();
  const ::clarifai::api::Search& test_search() const;
  ::clarifai::api::Search* release_test_search();
  ::clarifai::api::Search* mutable_test_search();
  void set_allocated_test_search(::clarifai::api::Search* test_search);
  private:
  const ::clarifai::api::Search& _internal_test_search() const;
  ::clarifai::api::Search* _internal_mutable_test_search();
  public:

  // bool evaluate_after_training = 7;
  void clear_evaluate_after_training();
  bool evaluate_after_training() const;
  void set_evaluate_after_training(bool value);
  private:
  bool _internal_evaluate_after_training() const;
  void _internal_set_evaluate_after_training(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PostModelVersionsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelVersion > model_versions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::clarifai::api::Search* search_;
  ::clarifai::api::Search* train_search_;
  ::clarifai::api::Search* test_search_;
  bool evaluate_after_training_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostModelVersionMetricsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostModelVersionMetricsRequest) */ {
 public:
  PostModelVersionMetricsRequest();
  virtual ~PostModelVersionMetricsRequest();

  PostModelVersionMetricsRequest(const PostModelVersionMetricsRequest& from);
  PostModelVersionMetricsRequest(PostModelVersionMetricsRequest&& from) noexcept
    : PostModelVersionMetricsRequest() {
    *this = ::std::move(from);
  }

  inline PostModelVersionMetricsRequest& operator=(const PostModelVersionMetricsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostModelVersionMetricsRequest& operator=(PostModelVersionMetricsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostModelVersionMetricsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostModelVersionMetricsRequest* internal_default_instance() {
    return reinterpret_cast<const PostModelVersionMetricsRequest*>(
               &_PostModelVersionMetricsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    122;

  friend void swap(PostModelVersionMetricsRequest& a, PostModelVersionMetricsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostModelVersionMetricsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostModelVersionMetricsRequest* New() const final {
    return CreateMaybeMessage<PostModelVersionMetricsRequest>(nullptr);
  }

  PostModelVersionMetricsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostModelVersionMetricsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostModelVersionMetricsRequest& from);
  void MergeFrom(const PostModelVersionMetricsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostModelVersionMetricsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostModelVersionMetricsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelIdFieldNumber = 2,
    kVersionIdFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
    kTestSearchFieldNumber = 5,
    kMaxExamplesFieldNumber = 4,
  };
  // string model_id = 2;
  void clear_model_id();
  const std::string& model_id() const;
  void set_model_id(const std::string& value);
  void set_model_id(std::string&& value);
  void set_model_id(const char* value);
  void set_model_id(const char* value, size_t size);
  std::string* mutable_model_id();
  std::string* release_model_id();
  void set_allocated_model_id(std::string* model_id);
  private:
  const std::string& _internal_model_id() const;
  void _internal_set_model_id(const std::string& value);
  std::string* _internal_mutable_model_id();
  public:

  // string version_id = 3;
  void clear_version_id();
  const std::string& version_id() const;
  void set_version_id(const std::string& value);
  void set_version_id(std::string&& value);
  void set_version_id(const char* value);
  void set_version_id(const char* value, size_t size);
  std::string* mutable_version_id();
  std::string* release_version_id();
  void set_allocated_version_id(std::string* version_id);
  private:
  const std::string& _internal_version_id() const;
  void _internal_set_version_id(const std::string& value);
  std::string* _internal_mutable_version_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // .clarifai.api.Search test_search = 5;
  bool has_test_search() const;
  private:
  bool _internal_has_test_search() const;
  public:
  void clear_test_search();
  const ::clarifai::api::Search& test_search() const;
  ::clarifai::api::Search* release_test_search();
  ::clarifai::api::Search* mutable_test_search();
  void set_allocated_test_search(::clarifai::api::Search* test_search);
  private:
  const ::clarifai::api::Search& _internal_test_search() const;
  ::clarifai::api::Search* _internal_mutable_test_search();
  public:

  // uint32 max_examples = 4;
  void clear_max_examples();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_examples() const;
  void set_max_examples(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_examples() const;
  void _internal_set_max_examples(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PostModelVersionMetricsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::clarifai::api::Search* test_search_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_examples_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostModelVersionsDeploymentRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostModelVersionsDeploymentRequest) */ {
 public:
  PostModelVersionsDeploymentRequest();
  virtual ~PostModelVersionsDeploymentRequest();

  PostModelVersionsDeploymentRequest(const PostModelVersionsDeploymentRequest& from);
  PostModelVersionsDeploymentRequest(PostModelVersionsDeploymentRequest&& from) noexcept
    : PostModelVersionsDeploymentRequest() {
    *this = ::std::move(from);
  }

  inline PostModelVersionsDeploymentRequest& operator=(const PostModelVersionsDeploymentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostModelVersionsDeploymentRequest& operator=(PostModelVersionsDeploymentRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostModelVersionsDeploymentRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostModelVersionsDeploymentRequest* internal_default_instance() {
    return reinterpret_cast<const PostModelVersionsDeploymentRequest*>(
               &_PostModelVersionsDeploymentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    123;

  friend void swap(PostModelVersionsDeploymentRequest& a, PostModelVersionsDeploymentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostModelVersionsDeploymentRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostModelVersionsDeploymentRequest* New() const final {
    return CreateMaybeMessage<PostModelVersionsDeploymentRequest>(nullptr);
  }

  PostModelVersionsDeploymentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostModelVersionsDeploymentRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostModelVersionsDeploymentRequest& from);
  void MergeFrom(const PostModelVersionsDeploymentRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostModelVersionsDeploymentRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostModelVersionsDeploymentRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionIdsFieldNumber = 3,
    kModelIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // repeated string version_ids = 3;
  int version_ids_size() const;
  private:
  int _internal_version_ids_size() const;
  public:
  void clear_version_ids();
  const std::string& version_ids(int index) const;
  std::string* mutable_version_ids(int index);
  void set_version_ids(int index, const std::string& value);
  void set_version_ids(int index, std::string&& value);
  void set_version_ids(int index, const char* value);
  void set_version_ids(int index, const char* value, size_t size);
  std::string* add_version_ids();
  void add_version_ids(const std::string& value);
  void add_version_ids(std::string&& value);
  void add_version_ids(const char* value);
  void add_version_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& version_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_version_ids();
  private:
  const std::string& _internal_version_ids(int index) const;
  std::string* _internal_add_version_ids();
  public:

  // string model_id = 2;
  void clear_model_id();
  const std::string& model_id() const;
  void set_model_id(const std::string& value);
  void set_model_id(std::string&& value);
  void set_model_id(const char* value);
  void set_model_id(const char* value, size_t size);
  std::string* mutable_model_id();
  std::string* release_model_id();
  void set_allocated_model_id(std::string* model_id);
  private:
  const std::string& _internal_model_id() const;
  void _internal_set_model_id(const std::string& value);
  std::string* _internal_mutable_model_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PostModelVersionsDeploymentRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> version_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteModelVersionsDeploymentRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.DeleteModelVersionsDeploymentRequest) */ {
 public:
  DeleteModelVersionsDeploymentRequest();
  virtual ~DeleteModelVersionsDeploymentRequest();

  DeleteModelVersionsDeploymentRequest(const DeleteModelVersionsDeploymentRequest& from);
  DeleteModelVersionsDeploymentRequest(DeleteModelVersionsDeploymentRequest&& from) noexcept
    : DeleteModelVersionsDeploymentRequest() {
    *this = ::std::move(from);
  }

  inline DeleteModelVersionsDeploymentRequest& operator=(const DeleteModelVersionsDeploymentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteModelVersionsDeploymentRequest& operator=(DeleteModelVersionsDeploymentRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteModelVersionsDeploymentRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteModelVersionsDeploymentRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteModelVersionsDeploymentRequest*>(
               &_DeleteModelVersionsDeploymentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    124;

  friend void swap(DeleteModelVersionsDeploymentRequest& a, DeleteModelVersionsDeploymentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteModelVersionsDeploymentRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteModelVersionsDeploymentRequest* New() const final {
    return CreateMaybeMessage<DeleteModelVersionsDeploymentRequest>(nullptr);
  }

  DeleteModelVersionsDeploymentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteModelVersionsDeploymentRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteModelVersionsDeploymentRequest& from);
  void MergeFrom(const DeleteModelVersionsDeploymentRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteModelVersionsDeploymentRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.DeleteModelVersionsDeploymentRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionIdsFieldNumber = 3,
    kModelIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // repeated string version_ids = 3;
  int version_ids_size() const;
  private:
  int _internal_version_ids_size() const;
  public:
  void clear_version_ids();
  const std::string& version_ids(int index) const;
  std::string* mutable_version_ids(int index);
  void set_version_ids(int index, const std::string& value);
  void set_version_ids(int index, std::string&& value);
  void set_version_ids(int index, const char* value);
  void set_version_ids(int index, const char* value, size_t size);
  std::string* add_version_ids();
  void add_version_ids(const std::string& value);
  void add_version_ids(std::string&& value);
  void add_version_ids(const char* value);
  void add_version_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& version_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_version_ids();
  private:
  const std::string& _internal_version_ids(int index) const;
  std::string* _internal_add_version_ids();
  public:

  // string model_id = 2;
  void clear_model_id();
  const std::string& model_id() const;
  void set_model_id(const std::string& value);
  void set_model_id(std::string&& value);
  void set_model_id(const char* value);
  void set_model_id(const char* value, size_t size);
  std::string* mutable_model_id();
  std::string* release_model_id();
  void set_allocated_model_id(std::string* model_id);
  private:
  const std::string& _internal_model_id() const;
  void _internal_set_model_id(const std::string& value);
  std::string* _internal_mutable_model_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.DeleteModelVersionsDeploymentRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> version_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class GetModelVersionMetricsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.GetModelVersionMetricsRequest) */ {
 public:
  GetModelVersionMetricsRequest();
  virtual ~GetModelVersionMetricsRequest();

  GetModelVersionMetricsRequest(const GetModelVersionMetricsRequest& from);
  GetModelVersionMetricsRequest(GetModelVersionMetricsRequest&& from) noexcept
    : GetModelVersionMetricsRequest() {
    *this = ::std::move(from);
  }

  inline GetModelVersionMetricsRequest& operator=(const GetModelVersionMetricsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetModelVersionMetricsRequest& operator=(GetModelVersionMetricsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetModelVersionMetricsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetModelVersionMetricsRequest* internal_default_instance() {
    return reinterpret_cast<const GetModelVersionMetricsRequest*>(
               &_GetModelVersionMetricsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    125;

  friend void swap(GetModelVersionMetricsRequest& a, GetModelVersionMetricsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetModelVersionMetricsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetModelVersionMetricsRequest* New() const final {
    return CreateMaybeMessage<GetModelVersionMetricsRequest>(nullptr);
  }

  GetModelVersionMetricsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetModelVersionMetricsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetModelVersionMetricsRequest& from);
  void MergeFrom(const GetModelVersionMetricsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetModelVersionMetricsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.GetModelVersionMetricsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelIdFieldNumber = 2,
    kVersionIdFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
    kFieldsFieldNumber = 4,
  };
  // string model_id = 2;
  void clear_model_id();
  const std::string& model_id() const;
  void set_model_id(const std::string& value);
  void set_model_id(std::string&& value);
  void set_model_id(const char* value);
  void set_model_id(const char* value, size_t size);
  std::string* mutable_model_id();
  std::string* release_model_id();
  void set_allocated_model_id(std::string* model_id);
  private:
  const std::string& _internal_model_id() const;
  void _internal_set_model_id(const std::string& value);
  std::string* _internal_mutable_model_id();
  public:

  // string version_id = 3;
  void clear_version_id();
  const std::string& version_id() const;
  void set_version_id(const std::string& value);
  void set_version_id(std::string&& value);
  void set_version_id(const char* value);
  void set_version_id(const char* value, size_t size);
  std::string* mutable_version_id();
  std::string* release_version_id();
  void set_allocated_version_id(std::string* version_id);
  private:
  const std::string& _internal_version_id() const;
  void _internal_set_version_id(const std::string& value);
  std::string* _internal_mutable_version_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // .clarifai.api.FieldsValue fields = 4;
  bool has_fields() const;
  private:
  bool _internal_has_fields() const;
  public:
  void clear_fields();
  const ::clarifai::api::FieldsValue& fields() const;
  ::clarifai::api::FieldsValue* release_fields();
  ::clarifai::api::FieldsValue* mutable_fields();
  void set_allocated_fields(::clarifai::api::FieldsValue* fields);
  private:
  const ::clarifai::api::FieldsValue& _internal_fields() const;
  ::clarifai::api::FieldsValue* _internal_mutable_fields();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.GetModelVersionMetricsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::clarifai::api::FieldsValue* fields_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiOutputResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiOutputResponse) */ {
 public:
  MultiOutputResponse();
  virtual ~MultiOutputResponse();

  MultiOutputResponse(const MultiOutputResponse& from);
  MultiOutputResponse(MultiOutputResponse&& from) noexcept
    : MultiOutputResponse() {
    *this = ::std::move(from);
  }

  inline MultiOutputResponse& operator=(const MultiOutputResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiOutputResponse& operator=(MultiOutputResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiOutputResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiOutputResponse* internal_default_instance() {
    return reinterpret_cast<const MultiOutputResponse*>(
               &_MultiOutputResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    126;

  friend void swap(MultiOutputResponse& a, MultiOutputResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiOutputResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiOutputResponse* New() const final {
    return CreateMaybeMessage<MultiOutputResponse>(nullptr);
  }

  MultiOutputResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiOutputResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiOutputResponse& from);
  void MergeFrom(const MultiOutputResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiOutputResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiOutputResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.Output outputs = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int outputs_size() const;
  private:
  int _internal_outputs_size() const;
  public:
  void clear_outputs();
  ::clarifai::api::Output* mutable_outputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Output >*
      mutable_outputs();
  private:
  const ::clarifai::api::Output& _internal_outputs(int index) const;
  ::clarifai::api::Output* _internal_add_outputs();
  public:
  const ::clarifai::api::Output& outputs(int index) const;
  ::clarifai::api::Output* add_outputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Output >&
      outputs() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiOutputResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Output > outputs_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListScopesRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListScopesRequest) */ {
 public:
  ListScopesRequest();
  virtual ~ListScopesRequest();

  ListScopesRequest(const ListScopesRequest& from);
  ListScopesRequest(ListScopesRequest&& from) noexcept
    : ListScopesRequest() {
    *this = ::std::move(from);
  }

  inline ListScopesRequest& operator=(const ListScopesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListScopesRequest& operator=(ListScopesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListScopesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListScopesRequest* internal_default_instance() {
    return reinterpret_cast<const ListScopesRequest*>(
               &_ListScopesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    127;

  friend void swap(ListScopesRequest& a, ListScopesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListScopesRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListScopesRequest* New() const final {
    return CreateMaybeMessage<ListScopesRequest>(nullptr);
  }

  ListScopesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListScopesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListScopesRequest& from);
  void MergeFrom(const ListScopesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListScopesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListScopesRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyTypeFieldNumber = 1,
  };
  // string key_type = 1;
  void clear_key_type();
  const std::string& key_type() const;
  void set_key_type(const std::string& value);
  void set_key_type(std::string&& value);
  void set_key_type(const char* value);
  void set_key_type(const char* value, size_t size);
  std::string* mutable_key_type();
  std::string* release_key_type();
  void set_allocated_key_type(std::string* key_type);
  private:
  const std::string& _internal_key_type() const;
  void _internal_set_key_type(const std::string& value);
  std::string* _internal_mutable_key_type();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ListScopesRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MyScopesRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MyScopesRequest) */ {
 public:
  MyScopesRequest();
  virtual ~MyScopesRequest();

  MyScopesRequest(const MyScopesRequest& from);
  MyScopesRequest(MyScopesRequest&& from) noexcept
    : MyScopesRequest() {
    *this = ::std::move(from);
  }

  inline MyScopesRequest& operator=(const MyScopesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MyScopesRequest& operator=(MyScopesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MyScopesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MyScopesRequest* internal_default_instance() {
    return reinterpret_cast<const MyScopesRequest*>(
               &_MyScopesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    128;

  friend void swap(MyScopesRequest& a, MyScopesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MyScopesRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MyScopesRequest* New() const final {
    return CreateMaybeMessage<MyScopesRequest>(nullptr);
  }

  MyScopesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MyScopesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MyScopesRequest& from);
  void MergeFrom(const MyScopesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MyScopesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MyScopesRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserAppIdFieldNumber = 1,
  };
  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.MyScopesRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiScopeDepsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiScopeDepsResponse) */ {
 public:
  MultiScopeDepsResponse();
  virtual ~MultiScopeDepsResponse();

  MultiScopeDepsResponse(const MultiScopeDepsResponse& from);
  MultiScopeDepsResponse(MultiScopeDepsResponse&& from) noexcept
    : MultiScopeDepsResponse() {
    *this = ::std::move(from);
  }

  inline MultiScopeDepsResponse& operator=(const MultiScopeDepsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiScopeDepsResponse& operator=(MultiScopeDepsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiScopeDepsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiScopeDepsResponse* internal_default_instance() {
    return reinterpret_cast<const MultiScopeDepsResponse*>(
               &_MultiScopeDepsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    129;

  friend void swap(MultiScopeDepsResponse& a, MultiScopeDepsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiScopeDepsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiScopeDepsResponse* New() const final {
    return CreateMaybeMessage<MultiScopeDepsResponse>(nullptr);
  }

  MultiScopeDepsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiScopeDepsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiScopeDepsResponse& from);
  void MergeFrom(const MultiScopeDepsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiScopeDepsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiScopeDepsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScopeDepsFieldNumber = 2,
    kEndpointDepsFieldNumber = 3,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.ScopeDeps scope_deps = 2;
  int scope_deps_size() const;
  private:
  int _internal_scope_deps_size() const;
  public:
  void clear_scope_deps();
  ::clarifai::api::ScopeDeps* mutable_scope_deps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ScopeDeps >*
      mutable_scope_deps();
  private:
  const ::clarifai::api::ScopeDeps& _internal_scope_deps(int index) const;
  ::clarifai::api::ScopeDeps* _internal_add_scope_deps();
  public:
  const ::clarifai::api::ScopeDeps& scope_deps(int index) const;
  ::clarifai::api::ScopeDeps* add_scope_deps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ScopeDeps >&
      scope_deps() const;

  // repeated .clarifai.api.EndpointDeps endpoint_deps = 3;
  int endpoint_deps_size() const;
  private:
  int _internal_endpoint_deps_size() const;
  public:
  void clear_endpoint_deps();
  ::clarifai::api::EndpointDeps* mutable_endpoint_deps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::EndpointDeps >*
      mutable_endpoint_deps();
  private:
  const ::clarifai::api::EndpointDeps& _internal_endpoint_deps(int index) const;
  ::clarifai::api::EndpointDeps* _internal_add_endpoint_deps();
  public:
  const ::clarifai::api::EndpointDeps& endpoint_deps(int index) const;
  ::clarifai::api::EndpointDeps* add_endpoint_deps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::EndpointDeps >&
      endpoint_deps() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiScopeDepsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ScopeDeps > scope_deps_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::EndpointDeps > endpoint_deps_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiScopeResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiScopeResponse) */ {
 public:
  MultiScopeResponse();
  virtual ~MultiScopeResponse();

  MultiScopeResponse(const MultiScopeResponse& from);
  MultiScopeResponse(MultiScopeResponse&& from) noexcept
    : MultiScopeResponse() {
    *this = ::std::move(from);
  }

  inline MultiScopeResponse& operator=(const MultiScopeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiScopeResponse& operator=(MultiScopeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiScopeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiScopeResponse* internal_default_instance() {
    return reinterpret_cast<const MultiScopeResponse*>(
               &_MultiScopeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    130;

  friend void swap(MultiScopeResponse& a, MultiScopeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiScopeResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiScopeResponse* New() const final {
    return CreateMaybeMessage<MultiScopeResponse>(nullptr);
  }

  MultiScopeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiScopeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiScopeResponse& from);
  void MergeFrom(const MultiScopeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiScopeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiScopeResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScopesFieldNumber = 2,
    kEndpointsFieldNumber = 4,
    kStatusFieldNumber = 1,
    kAppFieldNumber = 3,
  };
  // repeated string scopes = 2;
  int scopes_size() const;
  private:
  int _internal_scopes_size() const;
  public:
  void clear_scopes();
  const std::string& scopes(int index) const;
  std::string* mutable_scopes(int index);
  void set_scopes(int index, const std::string& value);
  void set_scopes(int index, std::string&& value);
  void set_scopes(int index, const char* value);
  void set_scopes(int index, const char* value, size_t size);
  std::string* add_scopes();
  void add_scopes(const std::string& value);
  void add_scopes(std::string&& value);
  void add_scopes(const char* value);
  void add_scopes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& scopes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_scopes();
  private:
  const std::string& _internal_scopes(int index) const;
  std::string* _internal_add_scopes();
  public:

  // repeated string endpoints = 4;
  int endpoints_size() const;
  private:
  int _internal_endpoints_size() const;
  public:
  void clear_endpoints();
  const std::string& endpoints(int index) const;
  std::string* mutable_endpoints(int index);
  void set_endpoints(int index, const std::string& value);
  void set_endpoints(int index, std::string&& value);
  void set_endpoints(int index, const char* value);
  void set_endpoints(int index, const char* value, size_t size);
  std::string* add_endpoints();
  void add_endpoints(const std::string& value);
  void add_endpoints(std::string&& value);
  void add_endpoints(const char* value);
  void add_endpoints(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& endpoints() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_endpoints();
  private:
  const std::string& _internal_endpoints(int index) const;
  std::string* _internal_add_endpoints();
  public:

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // .clarifai.api.App app = 3;
  bool has_app() const;
  private:
  bool _internal_has_app() const;
  public:
  void clear_app();
  const ::clarifai::api::App& app() const;
  ::clarifai::api::App* release_app();
  ::clarifai::api::App* mutable_app();
  void set_allocated_app(::clarifai::api::App* app);
  private:
  const ::clarifai::api::App& _internal_app() const;
  ::clarifai::api::App* _internal_mutable_app();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiScopeResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> scopes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> endpoints_;
  ::clarifai::api::status::Status* status_;
  ::clarifai::api::App* app_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class GetSearchRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.GetSearchRequest) */ {
 public:
  GetSearchRequest();
  virtual ~GetSearchRequest();

  GetSearchRequest(const GetSearchRequest& from);
  GetSearchRequest(GetSearchRequest&& from) noexcept
    : GetSearchRequest() {
    *this = ::std::move(from);
  }

  inline GetSearchRequest& operator=(const GetSearchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSearchRequest& operator=(GetSearchRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSearchRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSearchRequest* internal_default_instance() {
    return reinterpret_cast<const GetSearchRequest*>(
               &_GetSearchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    131;

  friend void swap(GetSearchRequest& a, GetSearchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSearchRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSearchRequest* New() const final {
    return CreateMaybeMessage<GetSearchRequest>(nullptr);
  }

  GetSearchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSearchRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSearchRequest& from);
  void MergeFrom(const GetSearchRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSearchRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.GetSearchRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // string id = 2;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.GetSearchRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListSearchesRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListSearchesRequest) */ {
 public:
  ListSearchesRequest();
  virtual ~ListSearchesRequest();

  ListSearchesRequest(const ListSearchesRequest& from);
  ListSearchesRequest(ListSearchesRequest&& from) noexcept
    : ListSearchesRequest() {
    *this = ::std::move(from);
  }

  inline ListSearchesRequest& operator=(const ListSearchesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSearchesRequest& operator=(ListSearchesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListSearchesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListSearchesRequest* internal_default_instance() {
    return reinterpret_cast<const ListSearchesRequest*>(
               &_ListSearchesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    132;

  friend void swap(ListSearchesRequest& a, ListSearchesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSearchesRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListSearchesRequest* New() const final {
    return CreateMaybeMessage<ListSearchesRequest>(nullptr);
  }

  ListSearchesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListSearchesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListSearchesRequest& from);
  void MergeFrom(const ListSearchesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSearchesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListSearchesRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserAppIdFieldNumber = 1,
    kPageFieldNumber = 2,
    kPerPageFieldNumber = 3,
  };
  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // uint32 page = 2;
  void clear_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 page() const;
  void set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_page() const;
  void _internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 per_page = 3;
  void clear_per_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 per_page() const;
  void set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_per_page() const;
  void _internal_set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ListSearchesRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 page_;
  ::PROTOBUF_NAMESPACE_ID::uint32 per_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostSearchesRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostSearchesRequest) */ {
 public:
  PostSearchesRequest();
  virtual ~PostSearchesRequest();

  PostSearchesRequest(const PostSearchesRequest& from);
  PostSearchesRequest(PostSearchesRequest&& from) noexcept
    : PostSearchesRequest() {
    *this = ::std::move(from);
  }

  inline PostSearchesRequest& operator=(const PostSearchesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostSearchesRequest& operator=(PostSearchesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostSearchesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostSearchesRequest* internal_default_instance() {
    return reinterpret_cast<const PostSearchesRequest*>(
               &_PostSearchesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    133;

  friend void swap(PostSearchesRequest& a, PostSearchesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostSearchesRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostSearchesRequest* New() const final {
    return CreateMaybeMessage<PostSearchesRequest>(nullptr);
  }

  PostSearchesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostSearchesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostSearchesRequest& from);
  void MergeFrom(const PostSearchesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostSearchesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostSearchesRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSearchesFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
    kQueryFieldNumber = 2,
    kPaginationFieldNumber = 4,
  };
  // repeated .clarifai.api.Search searches = 3;
  int searches_size() const;
  private:
  int _internal_searches_size() const;
  public:
  void clear_searches();
  ::clarifai::api::Search* mutable_searches(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search >*
      mutable_searches();
  private:
  const ::clarifai::api::Search& _internal_searches(int index) const;
  ::clarifai::api::Search* _internal_add_searches();
  public:
  const ::clarifai::api::Search& searches(int index) const;
  ::clarifai::api::Search* add_searches();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search >&
      searches() const;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // .clarifai.api.Query query = 2 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_query() const;
  private:
  bool _internal_has_query() const;
  public:
  PROTOBUF_DEPRECATED void clear_query();
  PROTOBUF_DEPRECATED const ::clarifai::api::Query& query() const;
  PROTOBUF_DEPRECATED ::clarifai::api::Query* release_query();
  PROTOBUF_DEPRECATED ::clarifai::api::Query* mutable_query();
  PROTOBUF_DEPRECATED void set_allocated_query(::clarifai::api::Query* query);
  private:
  const ::clarifai::api::Query& _internal_query() const;
  ::clarifai::api::Query* _internal_mutable_query();
  public:

  // .clarifai.api.Pagination pagination = 4;
  bool has_pagination() const;
  private:
  bool _internal_has_pagination() const;
  public:
  void clear_pagination();
  const ::clarifai::api::Pagination& pagination() const;
  ::clarifai::api::Pagination* release_pagination();
  ::clarifai::api::Pagination* mutable_pagination();
  void set_allocated_pagination(::clarifai::api::Pagination* pagination);
  private:
  const ::clarifai::api::Pagination& _internal_pagination() const;
  ::clarifai::api::Pagination* _internal_mutable_pagination();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PostSearchesRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search > searches_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::clarifai::api::Query* query_;
  ::clarifai::api::Pagination* pagination_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostSearchesByIDRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostSearchesByIDRequest) */ {
 public:
  PostSearchesByIDRequest();
  virtual ~PostSearchesByIDRequest();

  PostSearchesByIDRequest(const PostSearchesByIDRequest& from);
  PostSearchesByIDRequest(PostSearchesByIDRequest&& from) noexcept
    : PostSearchesByIDRequest() {
    *this = ::std::move(from);
  }

  inline PostSearchesByIDRequest& operator=(const PostSearchesByIDRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostSearchesByIDRequest& operator=(PostSearchesByIDRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostSearchesByIDRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostSearchesByIDRequest* internal_default_instance() {
    return reinterpret_cast<const PostSearchesByIDRequest*>(
               &_PostSearchesByIDRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    134;

  friend void swap(PostSearchesByIDRequest& a, PostSearchesByIDRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostSearchesByIDRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostSearchesByIDRequest* New() const final {
    return CreateMaybeMessage<PostSearchesByIDRequest>(nullptr);
  }

  PostSearchesByIDRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostSearchesByIDRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostSearchesByIDRequest& from);
  void MergeFrom(const PostSearchesByIDRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostSearchesByIDRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostSearchesByIDRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
    kPaginationFieldNumber = 3,
  };
  // string id = 2;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // .clarifai.api.Pagination pagination = 3;
  bool has_pagination() const;
  private:
  bool _internal_has_pagination() const;
  public:
  void clear_pagination();
  const ::clarifai::api::Pagination& pagination() const;
  ::clarifai::api::Pagination* release_pagination();
  ::clarifai::api::Pagination* mutable_pagination();
  void set_allocated_pagination(::clarifai::api::Pagination* pagination);
  private:
  const ::clarifai::api::Pagination& _internal_pagination() const;
  ::clarifai::api::Pagination* _internal_mutable_pagination();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PostSearchesByIDRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::clarifai::api::Pagination* pagination_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteSearchRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.DeleteSearchRequest) */ {
 public:
  DeleteSearchRequest();
  virtual ~DeleteSearchRequest();

  DeleteSearchRequest(const DeleteSearchRequest& from);
  DeleteSearchRequest(DeleteSearchRequest&& from) noexcept
    : DeleteSearchRequest() {
    *this = ::std::move(from);
  }

  inline DeleteSearchRequest& operator=(const DeleteSearchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteSearchRequest& operator=(DeleteSearchRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteSearchRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteSearchRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteSearchRequest*>(
               &_DeleteSearchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    135;

  friend void swap(DeleteSearchRequest& a, DeleteSearchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteSearchRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteSearchRequest* New() const final {
    return CreateMaybeMessage<DeleteSearchRequest>(nullptr);
  }

  DeleteSearchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteSearchRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteSearchRequest& from);
  void MergeFrom(const DeleteSearchRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteSearchRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.DeleteSearchRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // string id = 2;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.DeleteSearchRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostAttributeSearchRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostAttributeSearchRequest) */ {
 public:
  PostAttributeSearchRequest();
  virtual ~PostAttributeSearchRequest();

  PostAttributeSearchRequest(const PostAttributeSearchRequest& from);
  PostAttributeSearchRequest(PostAttributeSearchRequest&& from) noexcept
    : PostAttributeSearchRequest() {
    *this = ::std::move(from);
  }

  inline PostAttributeSearchRequest& operator=(const PostAttributeSearchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostAttributeSearchRequest& operator=(PostAttributeSearchRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostAttributeSearchRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostAttributeSearchRequest* internal_default_instance() {
    return reinterpret_cast<const PostAttributeSearchRequest*>(
               &_PostAttributeSearchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    136;

  friend void swap(PostAttributeSearchRequest& a, PostAttributeSearchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostAttributeSearchRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostAttributeSearchRequest* New() const final {
    return CreateMaybeMessage<PostAttributeSearchRequest>(nullptr);
  }

  PostAttributeSearchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostAttributeSearchRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostAttributeSearchRequest& from);
  void MergeFrom(const PostAttributeSearchRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostAttributeSearchRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostAttributeSearchRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserAppIdFieldNumber = 1,
    kPaginationFieldNumber = 3,
    kAttributeQueryFieldNumber = 5,
    kBruteForceFieldNumber = 4,
    kMinValueFieldNumber = 6,
  };
  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // .clarifai.api.Pagination pagination = 3;
  bool has_pagination() const;
  private:
  bool _internal_has_pagination() const;
  public:
  void clear_pagination();
  const ::clarifai::api::Pagination& pagination() const;
  ::clarifai::api::Pagination* release_pagination();
  ::clarifai::api::Pagination* mutable_pagination();
  void set_allocated_pagination(::clarifai::api::Pagination* pagination);
  private:
  const ::clarifai::api::Pagination& _internal_pagination() const;
  ::clarifai::api::Pagination* _internal_mutable_pagination();
  public:

  // .clarifai.api.AttributeQuery attribute_query = 5;
  bool has_attribute_query() const;
  private:
  bool _internal_has_attribute_query() const;
  public:
  void clear_attribute_query();
  const ::clarifai::api::AttributeQuery& attribute_query() const;
  ::clarifai::api::AttributeQuery* release_attribute_query();
  ::clarifai::api::AttributeQuery* mutable_attribute_query();
  void set_allocated_attribute_query(::clarifai::api::AttributeQuery* attribute_query);
  private:
  const ::clarifai::api::AttributeQuery& _internal_attribute_query() const;
  ::clarifai::api::AttributeQuery* _internal_mutable_attribute_query();
  public:

  // bool brute_force = 4;
  void clear_brute_force();
  bool brute_force() const;
  void set_brute_force(bool value);
  private:
  bool _internal_brute_force() const;
  void _internal_set_brute_force(bool value);
  public:

  // float min_value = 6;
  void clear_min_value();
  float min_value() const;
  void set_min_value(float value);
  private:
  float _internal_min_value() const;
  void _internal_set_min_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PostAttributeSearchRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::clarifai::api::Pagination* pagination_;
  ::clarifai::api::AttributeQuery* attribute_query_;
  bool brute_force_;
  float min_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostAnnotationsSearchesRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostAnnotationsSearchesRequest) */ {
 public:
  PostAnnotationsSearchesRequest();
  virtual ~PostAnnotationsSearchesRequest();

  PostAnnotationsSearchesRequest(const PostAnnotationsSearchesRequest& from);
  PostAnnotationsSearchesRequest(PostAnnotationsSearchesRequest&& from) noexcept
    : PostAnnotationsSearchesRequest() {
    *this = ::std::move(from);
  }

  inline PostAnnotationsSearchesRequest& operator=(const PostAnnotationsSearchesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostAnnotationsSearchesRequest& operator=(PostAnnotationsSearchesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostAnnotationsSearchesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostAnnotationsSearchesRequest* internal_default_instance() {
    return reinterpret_cast<const PostAnnotationsSearchesRequest*>(
               &_PostAnnotationsSearchesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    137;

  friend void swap(PostAnnotationsSearchesRequest& a, PostAnnotationsSearchesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostAnnotationsSearchesRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostAnnotationsSearchesRequest* New() const final {
    return CreateMaybeMessage<PostAnnotationsSearchesRequest>(nullptr);
  }

  PostAnnotationsSearchesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostAnnotationsSearchesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostAnnotationsSearchesRequest& from);
  void MergeFrom(const PostAnnotationsSearchesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostAnnotationsSearchesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostAnnotationsSearchesRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSearchesFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
    kPaginationFieldNumber = 3,
  };
  // repeated .clarifai.api.Search searches = 2;
  int searches_size() const;
  private:
  int _internal_searches_size() const;
  public:
  void clear_searches();
  ::clarifai::api::Search* mutable_searches(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search >*
      mutable_searches();
  private:
  const ::clarifai::api::Search& _internal_searches(int index) const;
  ::clarifai::api::Search* _internal_add_searches();
  public:
  const ::clarifai::api::Search& searches(int index) const;
  ::clarifai::api::Search* add_searches();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search >&
      searches() const;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // .clarifai.api.Pagination pagination = 3;
  bool has_pagination() const;
  private:
  bool _internal_has_pagination() const;
  public:
  void clear_pagination();
  const ::clarifai::api::Pagination& pagination() const;
  ::clarifai::api::Pagination* release_pagination();
  ::clarifai::api::Pagination* mutable_pagination();
  void set_allocated_pagination(::clarifai::api::Pagination* pagination);
  private:
  const ::clarifai::api::Pagination& _internal_pagination() const;
  ::clarifai::api::Pagination* _internal_mutable_pagination();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PostAnnotationsSearchesRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search > searches_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::clarifai::api::Pagination* pagination_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostInputsSearchesRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostInputsSearchesRequest) */ {
 public:
  PostInputsSearchesRequest();
  virtual ~PostInputsSearchesRequest();

  PostInputsSearchesRequest(const PostInputsSearchesRequest& from);
  PostInputsSearchesRequest(PostInputsSearchesRequest&& from) noexcept
    : PostInputsSearchesRequest() {
    *this = ::std::move(from);
  }

  inline PostInputsSearchesRequest& operator=(const PostInputsSearchesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostInputsSearchesRequest& operator=(PostInputsSearchesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostInputsSearchesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostInputsSearchesRequest* internal_default_instance() {
    return reinterpret_cast<const PostInputsSearchesRequest*>(
               &_PostInputsSearchesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    138;

  friend void swap(PostInputsSearchesRequest& a, PostInputsSearchesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostInputsSearchesRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostInputsSearchesRequest* New() const final {
    return CreateMaybeMessage<PostInputsSearchesRequest>(nullptr);
  }

  PostInputsSearchesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostInputsSearchesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostInputsSearchesRequest& from);
  void MergeFrom(const PostInputsSearchesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostInputsSearchesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostInputsSearchesRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSearchesFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
    kPaginationFieldNumber = 3,
  };
  // repeated .clarifai.api.Search searches = 2;
  int searches_size() const;
  private:
  int _internal_searches_size() const;
  public:
  void clear_searches();
  ::clarifai::api::Search* mutable_searches(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search >*
      mutable_searches();
  private:
  const ::clarifai::api::Search& _internal_searches(int index) const;
  ::clarifai::api::Search* _internal_add_searches();
  public:
  const ::clarifai::api::Search& searches(int index) const;
  ::clarifai::api::Search* add_searches();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search >&
      searches() const;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // .clarifai.api.Pagination pagination = 3;
  bool has_pagination() const;
  private:
  bool _internal_has_pagination() const;
  public:
  void clear_pagination();
  const ::clarifai::api::Pagination& pagination() const;
  ::clarifai::api::Pagination* release_pagination();
  ::clarifai::api::Pagination* mutable_pagination();
  void set_allocated_pagination(::clarifai::api::Pagination* pagination);
  private:
  const ::clarifai::api::Pagination& _internal_pagination() const;
  ::clarifai::api::Pagination* _internal_mutable_pagination();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PostInputsSearchesRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search > searches_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::clarifai::api::Pagination* pagination_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class SingleSearchResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.SingleSearchResponse) */ {
 public:
  SingleSearchResponse();
  virtual ~SingleSearchResponse();

  SingleSearchResponse(const SingleSearchResponse& from);
  SingleSearchResponse(SingleSearchResponse&& from) noexcept
    : SingleSearchResponse() {
    *this = ::std::move(from);
  }

  inline SingleSearchResponse& operator=(const SingleSearchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleSearchResponse& operator=(SingleSearchResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SingleSearchResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SingleSearchResponse* internal_default_instance() {
    return reinterpret_cast<const SingleSearchResponse*>(
               &_SingleSearchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    139;

  friend void swap(SingleSearchResponse& a, SingleSearchResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleSearchResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SingleSearchResponse* New() const final {
    return CreateMaybeMessage<SingleSearchResponse>(nullptr);
  }

  SingleSearchResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SingleSearchResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SingleSearchResponse& from);
  void MergeFrom(const SingleSearchResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleSearchResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.SingleSearchResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kSearchFieldNumber = 5,
  };
  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // .clarifai.api.Search search = 5;
  bool has_search() const;
  private:
  bool _internal_has_search() const;
  public:
  void clear_search();
  const ::clarifai::api::Search& search() const;
  ::clarifai::api::Search* release_search();
  ::clarifai::api::Search* mutable_search();
  void set_allocated_search(::clarifai::api::Search* search);
  private:
  const ::clarifai::api::Search& _internal_search() const;
  ::clarifai::api::Search* _internal_mutable_search();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.SingleSearchResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::status::Status* status_;
  ::clarifai::api::Search* search_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiSearchResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiSearchResponse) */ {
 public:
  MultiSearchResponse();
  virtual ~MultiSearchResponse();

  MultiSearchResponse(const MultiSearchResponse& from);
  MultiSearchResponse(MultiSearchResponse&& from) noexcept
    : MultiSearchResponse() {
    *this = ::std::move(from);
  }

  inline MultiSearchResponse& operator=(const MultiSearchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiSearchResponse& operator=(MultiSearchResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiSearchResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiSearchResponse* internal_default_instance() {
    return reinterpret_cast<const MultiSearchResponse*>(
               &_MultiSearchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    140;

  friend void swap(MultiSearchResponse& a, MultiSearchResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiSearchResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiSearchResponse* New() const final {
    return CreateMaybeMessage<MultiSearchResponse>(nullptr);
  }

  MultiSearchResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiSearchResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiSearchResponse& from);
  void MergeFrom(const MultiSearchResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiSearchResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiSearchResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHitsFieldNumber = 3,
    kSearchesFieldNumber = 5,
    kIdFieldNumber = 2,
    kStatusFieldNumber = 1,
    kQueryFieldNumber = 4,
  };
  // repeated .clarifai.api.Hit hits = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int hits_size() const;
  private:
  int _internal_hits_size() const;
  public:
  void clear_hits();
  ::clarifai::api::Hit* mutable_hits(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Hit >*
      mutable_hits();
  private:
  const ::clarifai::api::Hit& _internal_hits(int index) const;
  ::clarifai::api::Hit* _internal_add_hits();
  public:
  const ::clarifai::api::Hit& hits(int index) const;
  ::clarifai::api::Hit* add_hits();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Hit >&
      hits() const;

  // repeated .clarifai.api.Search searches = 5;
  int searches_size() const;
  private:
  int _internal_searches_size() const;
  public:
  void clear_searches();
  ::clarifai::api::Search* mutable_searches(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search >*
      mutable_searches();
  private:
  const ::clarifai::api::Search& _internal_searches(int index) const;
  ::clarifai::api::Search* _internal_add_searches();
  public:
  const ::clarifai::api::Search& searches(int index) const;
  ::clarifai::api::Search* add_searches();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search >&
      searches() const;

  // string id = 2;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // .clarifai.api.Query query = 4;
  bool has_query() const;
  private:
  bool _internal_has_query() const;
  public:
  void clear_query();
  const ::clarifai::api::Query& query() const;
  ::clarifai::api::Query* release_query();
  ::clarifai::api::Query* mutable_query();
  void set_allocated_query(::clarifai::api::Query* query);
  private:
  const ::clarifai::api::Query& _internal_query() const;
  ::clarifai::api::Query* _internal_mutable_query();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiSearchResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Hit > hits_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search > searches_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::clarifai::api::status::Status* status_;
  ::clarifai::api::Query* query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostAnnotationSearchMetricsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostAnnotationSearchMetricsRequest) */ {
 public:
  PostAnnotationSearchMetricsRequest();
  virtual ~PostAnnotationSearchMetricsRequest();

  PostAnnotationSearchMetricsRequest(const PostAnnotationSearchMetricsRequest& from);
  PostAnnotationSearchMetricsRequest(PostAnnotationSearchMetricsRequest&& from) noexcept
    : PostAnnotationSearchMetricsRequest() {
    *this = ::std::move(from);
  }

  inline PostAnnotationSearchMetricsRequest& operator=(const PostAnnotationSearchMetricsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostAnnotationSearchMetricsRequest& operator=(PostAnnotationSearchMetricsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostAnnotationSearchMetricsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostAnnotationSearchMetricsRequest* internal_default_instance() {
    return reinterpret_cast<const PostAnnotationSearchMetricsRequest*>(
               &_PostAnnotationSearchMetricsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    141;

  friend void swap(PostAnnotationSearchMetricsRequest& a, PostAnnotationSearchMetricsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostAnnotationSearchMetricsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostAnnotationSearchMetricsRequest* New() const final {
    return CreateMaybeMessage<PostAnnotationSearchMetricsRequest>(nullptr);
  }

  PostAnnotationSearchMetricsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostAnnotationSearchMetricsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostAnnotationSearchMetricsRequest& from);
  void MergeFrom(const PostAnnotationSearchMetricsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostAnnotationSearchMetricsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostAnnotationSearchMetricsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
    kGroundTruthFieldNumber = 3,
    kSearchToEvalFieldNumber = 4,
    kDataFieldNumber = 5,
    kEvaluationTypeFieldNumber = 6,
  };
  // string id = 2;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // .clarifai.api.Search ground_truth = 3;
  bool has_ground_truth() const;
  private:
  bool _internal_has_ground_truth() const;
  public:
  void clear_ground_truth();
  const ::clarifai::api::Search& ground_truth() const;
  ::clarifai::api::Search* release_ground_truth();
  ::clarifai::api::Search* mutable_ground_truth();
  void set_allocated_ground_truth(::clarifai::api::Search* ground_truth);
  private:
  const ::clarifai::api::Search& _internal_ground_truth() const;
  ::clarifai::api::Search* _internal_mutable_ground_truth();
  public:

  // .clarifai.api.Search search_to_eval = 4;
  bool has_search_to_eval() const;
  private:
  bool _internal_has_search_to_eval() const;
  public:
  void clear_search_to_eval();
  const ::clarifai::api::Search& search_to_eval() const;
  ::clarifai::api::Search* release_search_to_eval();
  ::clarifai::api::Search* mutable_search_to_eval();
  void set_allocated_search_to_eval(::clarifai::api::Search* search_to_eval);
  private:
  const ::clarifai::api::Search& _internal_search_to_eval() const;
  ::clarifai::api::Search* _internal_mutable_search_to_eval();
  public:

  // .clarifai.api.Data data = 5;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::clarifai::api::Data& data() const;
  ::clarifai::api::Data* release_data();
  ::clarifai::api::Data* mutable_data();
  void set_allocated_data(::clarifai::api::Data* data);
  private:
  const ::clarifai::api::Data& _internal_data() const;
  ::clarifai::api::Data* _internal_mutable_data();
  public:

  // .clarifai.api.EvaluationType evaluation_type = 6;
  void clear_evaluation_type();
  ::clarifai::api::EvaluationType evaluation_type() const;
  void set_evaluation_type(::clarifai::api::EvaluationType value);
  private:
  ::clarifai::api::EvaluationType _internal_evaluation_type() const;
  void _internal_set_evaluation_type(::clarifai::api::EvaluationType value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PostAnnotationSearchMetricsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::clarifai::api::Search* ground_truth_;
  ::clarifai::api::Search* search_to_eval_;
  ::clarifai::api::Data* data_;
  int evaluation_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class GetAnnotationSearchMetricsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.GetAnnotationSearchMetricsRequest) */ {
 public:
  GetAnnotationSearchMetricsRequest();
  virtual ~GetAnnotationSearchMetricsRequest();

  GetAnnotationSearchMetricsRequest(const GetAnnotationSearchMetricsRequest& from);
  GetAnnotationSearchMetricsRequest(GetAnnotationSearchMetricsRequest&& from) noexcept
    : GetAnnotationSearchMetricsRequest() {
    *this = ::std::move(from);
  }

  inline GetAnnotationSearchMetricsRequest& operator=(const GetAnnotationSearchMetricsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAnnotationSearchMetricsRequest& operator=(GetAnnotationSearchMetricsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAnnotationSearchMetricsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAnnotationSearchMetricsRequest* internal_default_instance() {
    return reinterpret_cast<const GetAnnotationSearchMetricsRequest*>(
               &_GetAnnotationSearchMetricsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    142;

  friend void swap(GetAnnotationSearchMetricsRequest& a, GetAnnotationSearchMetricsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAnnotationSearchMetricsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAnnotationSearchMetricsRequest* New() const final {
    return CreateMaybeMessage<GetAnnotationSearchMetricsRequest>(nullptr);
  }

  GetAnnotationSearchMetricsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAnnotationSearchMetricsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAnnotationSearchMetricsRequest& from);
  void MergeFrom(const GetAnnotationSearchMetricsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAnnotationSearchMetricsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.GetAnnotationSearchMetricsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // string id = 2;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.GetAnnotationSearchMetricsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListAnnotationSearchMetricsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListAnnotationSearchMetricsRequest) */ {
 public:
  ListAnnotationSearchMetricsRequest();
  virtual ~ListAnnotationSearchMetricsRequest();

  ListAnnotationSearchMetricsRequest(const ListAnnotationSearchMetricsRequest& from);
  ListAnnotationSearchMetricsRequest(ListAnnotationSearchMetricsRequest&& from) noexcept
    : ListAnnotationSearchMetricsRequest() {
    *this = ::std::move(from);
  }

  inline ListAnnotationSearchMetricsRequest& operator=(const ListAnnotationSearchMetricsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListAnnotationSearchMetricsRequest& operator=(ListAnnotationSearchMetricsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListAnnotationSearchMetricsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListAnnotationSearchMetricsRequest* internal_default_instance() {
    return reinterpret_cast<const ListAnnotationSearchMetricsRequest*>(
               &_ListAnnotationSearchMetricsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    143;

  friend void swap(ListAnnotationSearchMetricsRequest& a, ListAnnotationSearchMetricsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListAnnotationSearchMetricsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListAnnotationSearchMetricsRequest* New() const final {
    return CreateMaybeMessage<ListAnnotationSearchMetricsRequest>(nullptr);
  }

  ListAnnotationSearchMetricsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListAnnotationSearchMetricsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListAnnotationSearchMetricsRequest& from);
  void MergeFrom(const ListAnnotationSearchMetricsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListAnnotationSearchMetricsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListAnnotationSearchMetricsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserAppIdFieldNumber = 1,
  };
  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ListAnnotationSearchMetricsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiAnnotationSearchMetricsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiAnnotationSearchMetricsResponse) */ {
 public:
  MultiAnnotationSearchMetricsResponse();
  virtual ~MultiAnnotationSearchMetricsResponse();

  MultiAnnotationSearchMetricsResponse(const MultiAnnotationSearchMetricsResponse& from);
  MultiAnnotationSearchMetricsResponse(MultiAnnotationSearchMetricsResponse&& from) noexcept
    : MultiAnnotationSearchMetricsResponse() {
    *this = ::std::move(from);
  }

  inline MultiAnnotationSearchMetricsResponse& operator=(const MultiAnnotationSearchMetricsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiAnnotationSearchMetricsResponse& operator=(MultiAnnotationSearchMetricsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiAnnotationSearchMetricsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiAnnotationSearchMetricsResponse* internal_default_instance() {
    return reinterpret_cast<const MultiAnnotationSearchMetricsResponse*>(
               &_MultiAnnotationSearchMetricsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    144;

  friend void swap(MultiAnnotationSearchMetricsResponse& a, MultiAnnotationSearchMetricsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiAnnotationSearchMetricsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiAnnotationSearchMetricsResponse* New() const final {
    return CreateMaybeMessage<MultiAnnotationSearchMetricsResponse>(nullptr);
  }

  MultiAnnotationSearchMetricsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiAnnotationSearchMetricsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiAnnotationSearchMetricsResponse& from);
  void MergeFrom(const MultiAnnotationSearchMetricsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiAnnotationSearchMetricsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiAnnotationSearchMetricsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnnotationSearchMetricsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.AnnotationSearchMetrics annotation_search_metrics = 2;
  int annotation_search_metrics_size() const;
  private:
  int _internal_annotation_search_metrics_size() const;
  public:
  void clear_annotation_search_metrics();
  ::clarifai::api::AnnotationSearchMetrics* mutable_annotation_search_metrics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::AnnotationSearchMetrics >*
      mutable_annotation_search_metrics();
  private:
  const ::clarifai::api::AnnotationSearchMetrics& _internal_annotation_search_metrics(int index) const;
  ::clarifai::api::AnnotationSearchMetrics* _internal_add_annotation_search_metrics();
  public:
  const ::clarifai::api::AnnotationSearchMetrics& annotation_search_metrics(int index) const;
  ::clarifai::api::AnnotationSearchMetrics* add_annotation_search_metrics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::AnnotationSearchMetrics >&
      annotation_search_metrics() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiAnnotationSearchMetricsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::AnnotationSearchMetrics > annotation_search_metrics_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListClustersRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListClustersRequest) */ {
 public:
  ListClustersRequest();
  virtual ~ListClustersRequest();

  ListClustersRequest(const ListClustersRequest& from);
  ListClustersRequest(ListClustersRequest&& from) noexcept
    : ListClustersRequest() {
    *this = ::std::move(from);
  }

  inline ListClustersRequest& operator=(const ListClustersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListClustersRequest& operator=(ListClustersRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListClustersRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListClustersRequest* internal_default_instance() {
    return reinterpret_cast<const ListClustersRequest*>(
               &_ListClustersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    145;

  friend void swap(ListClustersRequest& a, ListClustersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListClustersRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListClustersRequest* New() const final {
    return CreateMaybeMessage<ListClustersRequest>(nullptr);
  }

  ListClustersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListClustersRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListClustersRequest& from);
  void MergeFrom(const ListClustersRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListClustersRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListClustersRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
    kPageFieldNumber = 3,
    kPerPageFieldNumber = 4,
    kAnnotationsPerClusterFieldNumber = 5,
  };
  // repeated string ids = 2;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  const std::string& ids(int index) const;
  std::string* mutable_ids(int index);
  void set_ids(int index, const std::string& value);
  void set_ids(int index, std::string&& value);
  void set_ids(int index, const char* value);
  void set_ids(int index, const char* value, size_t size);
  std::string* add_ids();
  void add_ids(const std::string& value);
  void add_ids(std::string&& value);
  void add_ids(const char* value);
  void add_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ids();
  private:
  const std::string& _internal_ids(int index) const;
  std::string* _internal_add_ids();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // uint32 page = 3;
  void clear_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 page() const;
  void set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_page() const;
  void _internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 per_page = 4;
  void clear_per_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 per_page() const;
  void set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_per_page() const;
  void _internal_set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 annotations_per_cluster = 5;
  void clear_annotations_per_cluster();
  ::PROTOBUF_NAMESPACE_ID::uint32 annotations_per_cluster() const;
  void set_annotations_per_cluster(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_annotations_per_cluster() const;
  void _internal_set_annotations_per_cluster(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ListClustersRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ids_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 page_;
  ::PROTOBUF_NAMESPACE_ID::uint32 per_page_;
  ::PROTOBUF_NAMESPACE_ID::uint32 annotations_per_cluster_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListAnnotationsForClusterRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListAnnotationsForClusterRequest) */ {
 public:
  ListAnnotationsForClusterRequest();
  virtual ~ListAnnotationsForClusterRequest();

  ListAnnotationsForClusterRequest(const ListAnnotationsForClusterRequest& from);
  ListAnnotationsForClusterRequest(ListAnnotationsForClusterRequest&& from) noexcept
    : ListAnnotationsForClusterRequest() {
    *this = ::std::move(from);
  }

  inline ListAnnotationsForClusterRequest& operator=(const ListAnnotationsForClusterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListAnnotationsForClusterRequest& operator=(ListAnnotationsForClusterRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListAnnotationsForClusterRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListAnnotationsForClusterRequest* internal_default_instance() {
    return reinterpret_cast<const ListAnnotationsForClusterRequest*>(
               &_ListAnnotationsForClusterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    146;

  friend void swap(ListAnnotationsForClusterRequest& a, ListAnnotationsForClusterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListAnnotationsForClusterRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListAnnotationsForClusterRequest* New() const final {
    return CreateMaybeMessage<ListAnnotationsForClusterRequest>(nullptr);
  }

  ListAnnotationsForClusterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListAnnotationsForClusterRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListAnnotationsForClusterRequest& from);
  void MergeFrom(const ListAnnotationsForClusterRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListAnnotationsForClusterRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListAnnotationsForClusterRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClusterIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
    kPageFieldNumber = 3,
    kPerPageFieldNumber = 4,
  };
  // string cluster_id = 2;
  void clear_cluster_id();
  const std::string& cluster_id() const;
  void set_cluster_id(const std::string& value);
  void set_cluster_id(std::string&& value);
  void set_cluster_id(const char* value);
  void set_cluster_id(const char* value, size_t size);
  std::string* mutable_cluster_id();
  std::string* release_cluster_id();
  void set_allocated_cluster_id(std::string* cluster_id);
  private:
  const std::string& _internal_cluster_id() const;
  void _internal_set_cluster_id(const std::string& value);
  std::string* _internal_mutable_cluster_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // uint32 page = 3;
  void clear_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 page() const;
  void set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_page() const;
  void _internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 per_page = 4;
  void clear_per_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 per_page() const;
  void set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_per_page() const;
  void _internal_set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ListAnnotationsForClusterRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cluster_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 page_;
  ::PROTOBUF_NAMESPACE_ID::uint32 per_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostClustersSearchesRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostClustersSearchesRequest) */ {
 public:
  PostClustersSearchesRequest();
  virtual ~PostClustersSearchesRequest();

  PostClustersSearchesRequest(const PostClustersSearchesRequest& from);
  PostClustersSearchesRequest(PostClustersSearchesRequest&& from) noexcept
    : PostClustersSearchesRequest() {
    *this = ::std::move(from);
  }

  inline PostClustersSearchesRequest& operator=(const PostClustersSearchesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostClustersSearchesRequest& operator=(PostClustersSearchesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostClustersSearchesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostClustersSearchesRequest* internal_default_instance() {
    return reinterpret_cast<const PostClustersSearchesRequest*>(
               &_PostClustersSearchesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    147;

  friend void swap(PostClustersSearchesRequest& a, PostClustersSearchesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostClustersSearchesRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostClustersSearchesRequest* New() const final {
    return CreateMaybeMessage<PostClustersSearchesRequest>(nullptr);
  }

  PostClustersSearchesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostClustersSearchesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostClustersSearchesRequest& from);
  void MergeFrom(const PostClustersSearchesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostClustersSearchesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostClustersSearchesRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSearchesFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
    kPaginationFieldNumber = 3,
  };
  // repeated .clarifai.api.Search searches = 2;
  int searches_size() const;
  private:
  int _internal_searches_size() const;
  public:
  void clear_searches();
  ::clarifai::api::Search* mutable_searches(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search >*
      mutable_searches();
  private:
  const ::clarifai::api::Search& _internal_searches(int index) const;
  ::clarifai::api::Search* _internal_add_searches();
  public:
  const ::clarifai::api::Search& searches(int index) const;
  ::clarifai::api::Search* add_searches();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search >&
      searches() const;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // .clarifai.api.Pagination pagination = 3;
  bool has_pagination() const;
  private:
  bool _internal_has_pagination() const;
  public:
  void clear_pagination();
  const ::clarifai::api::Pagination& pagination() const;
  ::clarifai::api::Pagination* release_pagination();
  ::clarifai::api::Pagination* mutable_pagination();
  void set_allocated_pagination(::clarifai::api::Pagination* pagination);
  private:
  const ::clarifai::api::Pagination& _internal_pagination() const;
  ::clarifai::api::Pagination* _internal_mutable_pagination();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PostClustersSearchesRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search > searches_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::clarifai::api::Pagination* pagination_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiClusterResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiClusterResponse) */ {
 public:
  MultiClusterResponse();
  virtual ~MultiClusterResponse();

  MultiClusterResponse(const MultiClusterResponse& from);
  MultiClusterResponse(MultiClusterResponse&& from) noexcept
    : MultiClusterResponse() {
    *this = ::std::move(from);
  }

  inline MultiClusterResponse& operator=(const MultiClusterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiClusterResponse& operator=(MultiClusterResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiClusterResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiClusterResponse* internal_default_instance() {
    return reinterpret_cast<const MultiClusterResponse*>(
               &_MultiClusterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    148;

  friend void swap(MultiClusterResponse& a, MultiClusterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiClusterResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiClusterResponse* New() const final {
    return CreateMaybeMessage<MultiClusterResponse>(nullptr);
  }

  MultiClusterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiClusterResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiClusterResponse& from);
  void MergeFrom(const MultiClusterResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiClusterResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiClusterResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClustersFieldNumber = 2,
    kSearchesFieldNumber = 3,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.Cluster clusters = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int clusters_size() const;
  private:
  int _internal_clusters_size() const;
  public:
  void clear_clusters();
  ::clarifai::api::Cluster* mutable_clusters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Cluster >*
      mutable_clusters();
  private:
  const ::clarifai::api::Cluster& _internal_clusters(int index) const;
  ::clarifai::api::Cluster* _internal_add_clusters();
  public:
  const ::clarifai::api::Cluster& clusters(int index) const;
  ::clarifai::api::Cluster* add_clusters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Cluster >&
      clusters() const;

  // repeated .clarifai.api.Search searches = 3;
  int searches_size() const;
  private:
  int _internal_searches_size() const;
  public:
  void clear_searches();
  ::clarifai::api::Search* mutable_searches(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search >*
      mutable_searches();
  private:
  const ::clarifai::api::Search& _internal_searches(int index) const;
  ::clarifai::api::Search* _internal_add_searches();
  public:
  const ::clarifai::api::Search& searches(int index) const;
  ::clarifai::api::Search* add_searches();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search >&
      searches() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiClusterResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Cluster > clusters_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search > searches_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class GetSubscriptionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.GetSubscriptionRequest) */ {
 public:
  GetSubscriptionRequest();
  virtual ~GetSubscriptionRequest();

  GetSubscriptionRequest(const GetSubscriptionRequest& from);
  GetSubscriptionRequest(GetSubscriptionRequest&& from) noexcept
    : GetSubscriptionRequest() {
    *this = ::std::move(from);
  }

  inline GetSubscriptionRequest& operator=(const GetSubscriptionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSubscriptionRequest& operator=(GetSubscriptionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSubscriptionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSubscriptionRequest* internal_default_instance() {
    return reinterpret_cast<const GetSubscriptionRequest*>(
               &_GetSubscriptionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    149;

  friend void swap(GetSubscriptionRequest& a, GetSubscriptionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSubscriptionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSubscriptionRequest* New() const final {
    return CreateMaybeMessage<GetSubscriptionRequest>(nullptr);
  }

  GetSubscriptionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSubscriptionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSubscriptionRequest& from);
  void MergeFrom(const GetSubscriptionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSubscriptionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.GetSubscriptionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:clarifai.api.GetSubscriptionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostSubscriptionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostSubscriptionRequest) */ {
 public:
  PostSubscriptionRequest();
  virtual ~PostSubscriptionRequest();

  PostSubscriptionRequest(const PostSubscriptionRequest& from);
  PostSubscriptionRequest(PostSubscriptionRequest&& from) noexcept
    : PostSubscriptionRequest() {
    *this = ::std::move(from);
  }

  inline PostSubscriptionRequest& operator=(const PostSubscriptionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostSubscriptionRequest& operator=(PostSubscriptionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostSubscriptionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostSubscriptionRequest* internal_default_instance() {
    return reinterpret_cast<const PostSubscriptionRequest*>(
               &_PostSubscriptionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    150;

  friend void swap(PostSubscriptionRequest& a, PostSubscriptionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostSubscriptionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostSubscriptionRequest* New() const final {
    return CreateMaybeMessage<PostSubscriptionRequest>(nullptr);
  }

  PostSubscriptionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostSubscriptionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostSubscriptionRequest& from);
  void MergeFrom(const PostSubscriptionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostSubscriptionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostSubscriptionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignupCodeFieldNumber = 1,
    kPlanFieldNumber = 2,
  };
  // string signup_code = 1;
  void clear_signup_code();
  const std::string& signup_code() const;
  void set_signup_code(const std::string& value);
  void set_signup_code(std::string&& value);
  void set_signup_code(const char* value);
  void set_signup_code(const char* value, size_t size);
  std::string* mutable_signup_code();
  std::string* release_signup_code();
  void set_allocated_signup_code(std::string* signup_code);
  private:
  const std::string& _internal_signup_code() const;
  void _internal_set_signup_code(const std::string& value);
  std::string* _internal_mutable_signup_code();
  public:

  // .clarifai.api.Plan plan = 2;
  bool has_plan() const;
  private:
  bool _internal_has_plan() const;
  public:
  void clear_plan();
  const ::clarifai::api::Plan& plan() const;
  ::clarifai::api::Plan* release_plan();
  ::clarifai::api::Plan* mutable_plan();
  void set_allocated_plan(::clarifai::api::Plan* plan);
  private:
  const ::clarifai::api::Plan& _internal_plan() const;
  ::clarifai::api::Plan* _internal_mutable_plan();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PostSubscriptionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signup_code_;
  ::clarifai::api::Plan* plan_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class SingleSubscriptionResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.SingleSubscriptionResponse) */ {
 public:
  SingleSubscriptionResponse();
  virtual ~SingleSubscriptionResponse();

  SingleSubscriptionResponse(const SingleSubscriptionResponse& from);
  SingleSubscriptionResponse(SingleSubscriptionResponse&& from) noexcept
    : SingleSubscriptionResponse() {
    *this = ::std::move(from);
  }

  inline SingleSubscriptionResponse& operator=(const SingleSubscriptionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleSubscriptionResponse& operator=(SingleSubscriptionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SingleSubscriptionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SingleSubscriptionResponse* internal_default_instance() {
    return reinterpret_cast<const SingleSubscriptionResponse*>(
               &_SingleSubscriptionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    151;

  friend void swap(SingleSubscriptionResponse& a, SingleSubscriptionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleSubscriptionResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SingleSubscriptionResponse* New() const final {
    return CreateMaybeMessage<SingleSubscriptionResponse>(nullptr);
  }

  SingleSubscriptionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SingleSubscriptionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SingleSubscriptionResponse& from);
  void MergeFrom(const SingleSubscriptionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleSubscriptionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.SingleSubscriptionResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignupCodeFieldNumber = 3,
    kStatusFieldNumber = 1,
    kPlanFieldNumber = 2,
  };
  // string signup_code = 3;
  void clear_signup_code();
  const std::string& signup_code() const;
  void set_signup_code(const std::string& value);
  void set_signup_code(std::string&& value);
  void set_signup_code(const char* value);
  void set_signup_code(const char* value, size_t size);
  std::string* mutable_signup_code();
  std::string* release_signup_code();
  void set_allocated_signup_code(std::string* signup_code);
  private:
  const std::string& _internal_signup_code() const;
  void _internal_set_signup_code(const std::string& value);
  std::string* _internal_mutable_signup_code();
  public:

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // .clarifai.api.Plan plan = 2;
  bool has_plan() const;
  private:
  bool _internal_has_plan() const;
  public:
  void clear_plan();
  const ::clarifai::api::Plan& plan() const;
  ::clarifai::api::Plan* release_plan();
  ::clarifai::api::Plan* mutable_plan();
  void set_allocated_plan(::clarifai::api::Plan* plan);
  private:
  const ::clarifai::api::Plan& _internal_plan() const;
  ::clarifai::api::Plan* _internal_mutable_plan();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.SingleSubscriptionResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signup_code_;
  ::clarifai::api::status::Status* status_;
  ::clarifai::api::Plan* plan_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListCreditCardsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListCreditCardsRequest) */ {
 public:
  ListCreditCardsRequest();
  virtual ~ListCreditCardsRequest();

  ListCreditCardsRequest(const ListCreditCardsRequest& from);
  ListCreditCardsRequest(ListCreditCardsRequest&& from) noexcept
    : ListCreditCardsRequest() {
    *this = ::std::move(from);
  }

  inline ListCreditCardsRequest& operator=(const ListCreditCardsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListCreditCardsRequest& operator=(ListCreditCardsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListCreditCardsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListCreditCardsRequest* internal_default_instance() {
    return reinterpret_cast<const ListCreditCardsRequest*>(
               &_ListCreditCardsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    152;

  friend void swap(ListCreditCardsRequest& a, ListCreditCardsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListCreditCardsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListCreditCardsRequest* New() const final {
    return CreateMaybeMessage<ListCreditCardsRequest>(nullptr);
  }

  ListCreditCardsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListCreditCardsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListCreditCardsRequest& from);
  void MergeFrom(const ListCreditCardsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListCreditCardsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListCreditCardsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserAppIdFieldNumber = 1,
  };
  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ListCreditCardsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultipleCreditCardResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultipleCreditCardResponse) */ {
 public:
  MultipleCreditCardResponse();
  virtual ~MultipleCreditCardResponse();

  MultipleCreditCardResponse(const MultipleCreditCardResponse& from);
  MultipleCreditCardResponse(MultipleCreditCardResponse&& from) noexcept
    : MultipleCreditCardResponse() {
    *this = ::std::move(from);
  }

  inline MultipleCreditCardResponse& operator=(const MultipleCreditCardResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultipleCreditCardResponse& operator=(MultipleCreditCardResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultipleCreditCardResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultipleCreditCardResponse* internal_default_instance() {
    return reinterpret_cast<const MultipleCreditCardResponse*>(
               &_MultipleCreditCardResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    153;

  friend void swap(MultipleCreditCardResponse& a, MultipleCreditCardResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultipleCreditCardResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultipleCreditCardResponse* New() const final {
    return CreateMaybeMessage<MultipleCreditCardResponse>(nullptr);
  }

  MultipleCreditCardResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultipleCreditCardResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultipleCreditCardResponse& from);
  void MergeFrom(const MultipleCreditCardResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultipleCreditCardResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultipleCreditCardResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCardsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.CreditCard cards = 2;
  int cards_size() const;
  private:
  int _internal_cards_size() const;
  public:
  void clear_cards();
  ::clarifai::api::CreditCard* mutable_cards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::CreditCard >*
      mutable_cards();
  private:
  const ::clarifai::api::CreditCard& _internal_cards(int index) const;
  ::clarifai::api::CreditCard* _internal_add_cards();
  public:
  const ::clarifai::api::CreditCard& cards(int index) const;
  ::clarifai::api::CreditCard* add_cards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::CreditCard >&
      cards() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.MultipleCreditCardResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::CreditCard > cards_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostCreditCardRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostCreditCardRequest) */ {
 public:
  PostCreditCardRequest();
  virtual ~PostCreditCardRequest();

  PostCreditCardRequest(const PostCreditCardRequest& from);
  PostCreditCardRequest(PostCreditCardRequest&& from) noexcept
    : PostCreditCardRequest() {
    *this = ::std::move(from);
  }

  inline PostCreditCardRequest& operator=(const PostCreditCardRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostCreditCardRequest& operator=(PostCreditCardRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostCreditCardRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostCreditCardRequest* internal_default_instance() {
    return reinterpret_cast<const PostCreditCardRequest*>(
               &_PostCreditCardRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    154;

  friend void swap(PostCreditCardRequest& a, PostCreditCardRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostCreditCardRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostCreditCardRequest* New() const final {
    return CreateMaybeMessage<PostCreditCardRequest>(nullptr);
  }

  PostCreditCardRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostCreditCardRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostCreditCardRequest& from);
  void MergeFrom(const PostCreditCardRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostCreditCardRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostCreditCardRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
    kCardFieldNumber = 3,
  };
  // string source = 2;
  void clear_source();
  const std::string& source() const;
  void set_source(const std::string& value);
  void set_source(std::string&& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  std::string* mutable_source();
  std::string* release_source();
  void set_allocated_source(std::string* source);
  private:
  const std::string& _internal_source() const;
  void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // .clarifai.api.CreditCard card = 3;
  bool has_card() const;
  private:
  bool _internal_has_card() const;
  public:
  void clear_card();
  const ::clarifai::api::CreditCard& card() const;
  ::clarifai::api::CreditCard* release_card();
  ::clarifai::api::CreditCard* mutable_card();
  void set_allocated_card(::clarifai::api::CreditCard* card);
  private:
  const ::clarifai::api::CreditCard& _internal_card() const;
  ::clarifai::api::CreditCard* _internal_mutable_card();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PostCreditCardRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::clarifai::api::CreditCard* card_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class SingleCreditCardResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.SingleCreditCardResponse) */ {
 public:
  SingleCreditCardResponse();
  virtual ~SingleCreditCardResponse();

  SingleCreditCardResponse(const SingleCreditCardResponse& from);
  SingleCreditCardResponse(SingleCreditCardResponse&& from) noexcept
    : SingleCreditCardResponse() {
    *this = ::std::move(from);
  }

  inline SingleCreditCardResponse& operator=(const SingleCreditCardResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleCreditCardResponse& operator=(SingleCreditCardResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SingleCreditCardResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SingleCreditCardResponse* internal_default_instance() {
    return reinterpret_cast<const SingleCreditCardResponse*>(
               &_SingleCreditCardResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    155;

  friend void swap(SingleCreditCardResponse& a, SingleCreditCardResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleCreditCardResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SingleCreditCardResponse* New() const final {
    return CreateMaybeMessage<SingleCreditCardResponse>(nullptr);
  }

  SingleCreditCardResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SingleCreditCardResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SingleCreditCardResponse& from);
  void MergeFrom(const SingleCreditCardResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleCreditCardResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.SingleCreditCardResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kCardFieldNumber = 2,
  };
  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // .clarifai.api.CreditCard card = 2;
  bool has_card() const;
  private:
  bool _internal_has_card() const;
  public:
  void clear_card();
  const ::clarifai::api::CreditCard& card() const;
  ::clarifai::api::CreditCard* release_card();
  ::clarifai::api::CreditCard* mutable_card();
  void set_allocated_card(::clarifai::api::CreditCard* card);
  private:
  const ::clarifai::api::CreditCard& _internal_card() const;
  ::clarifai::api::CreditCard* _internal_mutable_card();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.SingleCreditCardResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::status::Status* status_;
  ::clarifai::api::CreditCard* card_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteCreditCardRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.DeleteCreditCardRequest) */ {
 public:
  DeleteCreditCardRequest();
  virtual ~DeleteCreditCardRequest();

  DeleteCreditCardRequest(const DeleteCreditCardRequest& from);
  DeleteCreditCardRequest(DeleteCreditCardRequest&& from) noexcept
    : DeleteCreditCardRequest() {
    *this = ::std::move(from);
  }

  inline DeleteCreditCardRequest& operator=(const DeleteCreditCardRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteCreditCardRequest& operator=(DeleteCreditCardRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteCreditCardRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteCreditCardRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteCreditCardRequest*>(
               &_DeleteCreditCardRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    156;

  friend void swap(DeleteCreditCardRequest& a, DeleteCreditCardRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteCreditCardRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteCreditCardRequest* New() const final {
    return CreateMaybeMessage<DeleteCreditCardRequest>(nullptr);
  }

  DeleteCreditCardRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteCreditCardRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteCreditCardRequest& from);
  void MergeFrom(const DeleteCreditCardRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteCreditCardRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.DeleteCreditCardRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserAppIdFieldNumber = 1,
    kCardFieldNumber = 2,
  };
  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // .clarifai.api.CreditCard card = 2;
  bool has_card() const;
  private:
  bool _internal_has_card() const;
  public:
  void clear_card();
  const ::clarifai::api::CreditCard& card() const;
  ::clarifai::api::CreditCard* release_card();
  ::clarifai::api::CreditCard* mutable_card();
  void set_allocated_card(::clarifai::api::CreditCard* card);
  private:
  const ::clarifai::api::CreditCard& _internal_card() const;
  ::clarifai::api::CreditCard* _internal_mutable_card();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.DeleteCreditCardRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::clarifai::api::CreditCard* card_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PatchCreditCardsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PatchCreditCardsRequest) */ {
 public:
  PatchCreditCardsRequest();
  virtual ~PatchCreditCardsRequest();

  PatchCreditCardsRequest(const PatchCreditCardsRequest& from);
  PatchCreditCardsRequest(PatchCreditCardsRequest&& from) noexcept
    : PatchCreditCardsRequest() {
    *this = ::std::move(from);
  }

  inline PatchCreditCardsRequest& operator=(const PatchCreditCardsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatchCreditCardsRequest& operator=(PatchCreditCardsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PatchCreditCardsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PatchCreditCardsRequest* internal_default_instance() {
    return reinterpret_cast<const PatchCreditCardsRequest*>(
               &_PatchCreditCardsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    157;

  friend void swap(PatchCreditCardsRequest& a, PatchCreditCardsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PatchCreditCardsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PatchCreditCardsRequest* New() const final {
    return CreateMaybeMessage<PatchCreditCardsRequest>(nullptr);
  }

  PatchCreditCardsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PatchCreditCardsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PatchCreditCardsRequest& from);
  void MergeFrom(const PatchCreditCardsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatchCreditCardsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PatchCreditCardsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCardsFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
    kActionFieldNumber = 3,
  };
  // repeated .clarifai.api.CreditCard cards = 2;
  int cards_size() const;
  private:
  int _internal_cards_size() const;
  public:
  void clear_cards();
  ::clarifai::api::CreditCard* mutable_cards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::CreditCard >*
      mutable_cards();
  private:
  const ::clarifai::api::CreditCard& _internal_cards(int index) const;
  ::clarifai::api::CreditCard* _internal_add_cards();
  public:
  const ::clarifai::api::CreditCard& cards(int index) const;
  ::clarifai::api::CreditCard* add_cards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::CreditCard >&
      cards() const;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // .clarifai.api.PatchAction action = 3;
  bool has_action() const;
  private:
  bool _internal_has_action() const;
  public:
  void clear_action();
  const ::clarifai::api::PatchAction& action() const;
  ::clarifai::api::PatchAction* release_action();
  ::clarifai::api::PatchAction* mutable_action();
  void set_allocated_action(::clarifai::api::PatchAction* action);
  private:
  const ::clarifai::api::PatchAction& _internal_action() const;
  ::clarifai::api::PatchAction* _internal_mutable_action();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PatchCreditCardsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::CreditCard > cards_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::clarifai::api::PatchAction* action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostHistoricalUsageRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostHistoricalUsageRequest) */ {
 public:
  PostHistoricalUsageRequest();
  virtual ~PostHistoricalUsageRequest();

  PostHistoricalUsageRequest(const PostHistoricalUsageRequest& from);
  PostHistoricalUsageRequest(PostHistoricalUsageRequest&& from) noexcept
    : PostHistoricalUsageRequest() {
    *this = ::std::move(from);
  }

  inline PostHistoricalUsageRequest& operator=(const PostHistoricalUsageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostHistoricalUsageRequest& operator=(PostHistoricalUsageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostHistoricalUsageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostHistoricalUsageRequest* internal_default_instance() {
    return reinterpret_cast<const PostHistoricalUsageRequest*>(
               &_PostHistoricalUsageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    158;

  friend void swap(PostHistoricalUsageRequest& a, PostHistoricalUsageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostHistoricalUsageRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostHistoricalUsageRequest* New() const final {
    return CreateMaybeMessage<PostHistoricalUsageRequest>(nullptr);
  }

  PostHistoricalUsageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostHistoricalUsageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostHistoricalUsageRequest& from);
  void MergeFrom(const PostHistoricalUsageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostHistoricalUsageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostHistoricalUsageRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserAppIdFieldNumber = 1,
  };
  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PostHistoricalUsageRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostHistoricalUsageResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostHistoricalUsageResponse) */ {
 public:
  PostHistoricalUsageResponse();
  virtual ~PostHistoricalUsageResponse();

  PostHistoricalUsageResponse(const PostHistoricalUsageResponse& from);
  PostHistoricalUsageResponse(PostHistoricalUsageResponse&& from) noexcept
    : PostHistoricalUsageResponse() {
    *this = ::std::move(from);
  }

  inline PostHistoricalUsageResponse& operator=(const PostHistoricalUsageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostHistoricalUsageResponse& operator=(PostHistoricalUsageResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostHistoricalUsageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostHistoricalUsageResponse* internal_default_instance() {
    return reinterpret_cast<const PostHistoricalUsageResponse*>(
               &_PostHistoricalUsageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    159;

  friend void swap(PostHistoricalUsageResponse& a, PostHistoricalUsageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PostHistoricalUsageResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostHistoricalUsageResponse* New() const final {
    return CreateMaybeMessage<PostHistoricalUsageResponse>(nullptr);
  }

  PostHistoricalUsageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostHistoricalUsageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostHistoricalUsageResponse& from);
  void MergeFrom(const PostHistoricalUsageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostHistoricalUsageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostHistoricalUsageResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsageFieldNumber = 3,
    kStatusFieldNumber = 1,
    kIntervalFieldNumber = 2,
  };
  // repeated .clarifai.api.DimensionList usage = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int usage_size() const;
  private:
  int _internal_usage_size() const;
  public:
  void clear_usage();
  ::clarifai::api::DimensionList* mutable_usage(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::DimensionList >*
      mutable_usage();
  private:
  const ::clarifai::api::DimensionList& _internal_usage(int index) const;
  ::clarifai::api::DimensionList* _internal_add_usage();
  public:
  const ::clarifai::api::DimensionList& usage(int index) const;
  ::clarifai::api::DimensionList* add_usage();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::DimensionList >&
      usage() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // .google.protobuf.Duration interval = 2;
  bool has_interval() const;
  private:
  bool _internal_has_interval() const;
  public:
  void clear_interval();
  const PROTOBUF_NAMESPACE_ID::Duration& interval() const;
  PROTOBUF_NAMESPACE_ID::Duration* release_interval();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_interval();
  void set_allocated_interval(PROTOBUF_NAMESPACE_ID::Duration* interval);
  private:
  const PROTOBUF_NAMESPACE_ID::Duration& _internal_interval() const;
  PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_interval();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PostHistoricalUsageResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::DimensionList > usage_;
  ::clarifai::api::status::Status* status_;
  PROTOBUF_NAMESPACE_ID::Duration* interval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class GetRealtimeUsageRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.GetRealtimeUsageRequest) */ {
 public:
  GetRealtimeUsageRequest();
  virtual ~GetRealtimeUsageRequest();

  GetRealtimeUsageRequest(const GetRealtimeUsageRequest& from);
  GetRealtimeUsageRequest(GetRealtimeUsageRequest&& from) noexcept
    : GetRealtimeUsageRequest() {
    *this = ::std::move(from);
  }

  inline GetRealtimeUsageRequest& operator=(const GetRealtimeUsageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRealtimeUsageRequest& operator=(GetRealtimeUsageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetRealtimeUsageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRealtimeUsageRequest* internal_default_instance() {
    return reinterpret_cast<const GetRealtimeUsageRequest*>(
               &_GetRealtimeUsageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    160;

  friend void swap(GetRealtimeUsageRequest& a, GetRealtimeUsageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRealtimeUsageRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRealtimeUsageRequest* New() const final {
    return CreateMaybeMessage<GetRealtimeUsageRequest>(nullptr);
  }

  GetRealtimeUsageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRealtimeUsageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetRealtimeUsageRequest& from);
  void MergeFrom(const GetRealtimeUsageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRealtimeUsageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.GetRealtimeUsageRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserAppIdFieldNumber = 1,
  };
  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.GetRealtimeUsageRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class GetRealtimeUsageResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.GetRealtimeUsageResponse) */ {
 public:
  GetRealtimeUsageResponse();
  virtual ~GetRealtimeUsageResponse();

  GetRealtimeUsageResponse(const GetRealtimeUsageResponse& from);
  GetRealtimeUsageResponse(GetRealtimeUsageResponse&& from) noexcept
    : GetRealtimeUsageResponse() {
    *this = ::std::move(from);
  }

  inline GetRealtimeUsageResponse& operator=(const GetRealtimeUsageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRealtimeUsageResponse& operator=(GetRealtimeUsageResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetRealtimeUsageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRealtimeUsageResponse* internal_default_instance() {
    return reinterpret_cast<const GetRealtimeUsageResponse*>(
               &_GetRealtimeUsageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    161;

  friend void swap(GetRealtimeUsageResponse& a, GetRealtimeUsageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRealtimeUsageResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRealtimeUsageResponse* New() const final {
    return CreateMaybeMessage<GetRealtimeUsageResponse>(nullptr);
  }

  GetRealtimeUsageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRealtimeUsageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetRealtimeUsageResponse& from);
  void MergeFrom(const GetRealtimeUsageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRealtimeUsageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.GetRealtimeUsageResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRealtimeUsageFieldNumber = 4,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.RealtimeCount realtime_usage = 4;
  int realtime_usage_size() const;
  private:
  int _internal_realtime_usage_size() const;
  public:
  void clear_realtime_usage();
  ::clarifai::api::RealtimeCount* mutable_realtime_usage(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::RealtimeCount >*
      mutable_realtime_usage();
  private:
  const ::clarifai::api::RealtimeCount& _internal_realtime_usage(int index) const;
  ::clarifai::api::RealtimeCount* _internal_add_realtime_usage();
  public:
  const ::clarifai::api::RealtimeCount& realtime_usage(int index) const;
  ::clarifai::api::RealtimeCount* add_realtime_usage();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::RealtimeCount >&
      realtime_usage() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.GetRealtimeUsageResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::RealtimeCount > realtime_usage_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListUsageIntervalsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListUsageIntervalsRequest) */ {
 public:
  ListUsageIntervalsRequest();
  virtual ~ListUsageIntervalsRequest();

  ListUsageIntervalsRequest(const ListUsageIntervalsRequest& from);
  ListUsageIntervalsRequest(ListUsageIntervalsRequest&& from) noexcept
    : ListUsageIntervalsRequest() {
    *this = ::std::move(from);
  }

  inline ListUsageIntervalsRequest& operator=(const ListUsageIntervalsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListUsageIntervalsRequest& operator=(ListUsageIntervalsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListUsageIntervalsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListUsageIntervalsRequest* internal_default_instance() {
    return reinterpret_cast<const ListUsageIntervalsRequest*>(
               &_ListUsageIntervalsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    162;

  friend void swap(ListUsageIntervalsRequest& a, ListUsageIntervalsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListUsageIntervalsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListUsageIntervalsRequest* New() const final {
    return CreateMaybeMessage<ListUsageIntervalsRequest>(nullptr);
  }

  ListUsageIntervalsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListUsageIntervalsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListUsageIntervalsRequest& from);
  void MergeFrom(const ListUsageIntervalsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListUsageIntervalsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListUsageIntervalsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:clarifai.api.ListUsageIntervalsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListUsageIntervalsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListUsageIntervalsResponse) */ {
 public:
  ListUsageIntervalsResponse();
  virtual ~ListUsageIntervalsResponse();

  ListUsageIntervalsResponse(const ListUsageIntervalsResponse& from);
  ListUsageIntervalsResponse(ListUsageIntervalsResponse&& from) noexcept
    : ListUsageIntervalsResponse() {
    *this = ::std::move(from);
  }

  inline ListUsageIntervalsResponse& operator=(const ListUsageIntervalsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListUsageIntervalsResponse& operator=(ListUsageIntervalsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListUsageIntervalsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListUsageIntervalsResponse* internal_default_instance() {
    return reinterpret_cast<const ListUsageIntervalsResponse*>(
               &_ListUsageIntervalsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    163;

  friend void swap(ListUsageIntervalsResponse& a, ListUsageIntervalsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListUsageIntervalsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListUsageIntervalsResponse* New() const final {
    return CreateMaybeMessage<ListUsageIntervalsResponse>(nullptr);
  }

  ListUsageIntervalsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListUsageIntervalsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListUsageIntervalsResponse& from);
  void MergeFrom(const ListUsageIntervalsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListUsageIntervalsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListUsageIntervalsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsageIntervalsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.UsageInterval usage_intervals = 2;
  int usage_intervals_size() const;
  private:
  int _internal_usage_intervals_size() const;
  public:
  void clear_usage_intervals();
  ::clarifai::api::UsageInterval* mutable_usage_intervals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::UsageInterval >*
      mutable_usage_intervals();
  private:
  const ::clarifai::api::UsageInterval& _internal_usage_intervals(int index) const;
  ::clarifai::api::UsageInterval* _internal_add_usage_intervals();
  public:
  const ::clarifai::api::UsageInterval& usage_intervals(int index) const;
  ::clarifai::api::UsageInterval* add_usage_intervals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::UsageInterval >&
      usage_intervals() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ListUsageIntervalsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::UsageInterval > usage_intervals_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListUserBillingCyclesRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListUserBillingCyclesRequest) */ {
 public:
  ListUserBillingCyclesRequest();
  virtual ~ListUserBillingCyclesRequest();

  ListUserBillingCyclesRequest(const ListUserBillingCyclesRequest& from);
  ListUserBillingCyclesRequest(ListUserBillingCyclesRequest&& from) noexcept
    : ListUserBillingCyclesRequest() {
    *this = ::std::move(from);
  }

  inline ListUserBillingCyclesRequest& operator=(const ListUserBillingCyclesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListUserBillingCyclesRequest& operator=(ListUserBillingCyclesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListUserBillingCyclesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListUserBillingCyclesRequest* internal_default_instance() {
    return reinterpret_cast<const ListUserBillingCyclesRequest*>(
               &_ListUserBillingCyclesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    164;

  friend void swap(ListUserBillingCyclesRequest& a, ListUserBillingCyclesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListUserBillingCyclesRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListUserBillingCyclesRequest* New() const final {
    return CreateMaybeMessage<ListUserBillingCyclesRequest>(nullptr);
  }

  ListUserBillingCyclesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListUserBillingCyclesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListUserBillingCyclesRequest& from);
  void MergeFrom(const ListUserBillingCyclesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListUserBillingCyclesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListUserBillingCyclesRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserAppIdFieldNumber = 1,
    kPageFieldNumber = 2,
    kPerPageFieldNumber = 3,
  };
  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // uint32 page = 2;
  void clear_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 page() const;
  void set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_page() const;
  void _internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 per_page = 3;
  void clear_per_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 per_page() const;
  void set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_per_page() const;
  void _internal_set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ListUserBillingCyclesRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 page_;
  ::PROTOBUF_NAMESPACE_ID::uint32 per_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListUserBillingCyclesResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListUserBillingCyclesResponse) */ {
 public:
  ListUserBillingCyclesResponse();
  virtual ~ListUserBillingCyclesResponse();

  ListUserBillingCyclesResponse(const ListUserBillingCyclesResponse& from);
  ListUserBillingCyclesResponse(ListUserBillingCyclesResponse&& from) noexcept
    : ListUserBillingCyclesResponse() {
    *this = ::std::move(from);
  }

  inline ListUserBillingCyclesResponse& operator=(const ListUserBillingCyclesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListUserBillingCyclesResponse& operator=(ListUserBillingCyclesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListUserBillingCyclesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListUserBillingCyclesResponse* internal_default_instance() {
    return reinterpret_cast<const ListUserBillingCyclesResponse*>(
               &_ListUserBillingCyclesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    165;

  friend void swap(ListUserBillingCyclesResponse& a, ListUserBillingCyclesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListUserBillingCyclesResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListUserBillingCyclesResponse* New() const final {
    return CreateMaybeMessage<ListUserBillingCyclesResponse>(nullptr);
  }

  ListUserBillingCyclesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListUserBillingCyclesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListUserBillingCyclesResponse& from);
  void MergeFrom(const ListUserBillingCyclesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListUserBillingCyclesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListUserBillingCyclesResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBillingCyclesFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.BillingCycle billing_cycles = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int billing_cycles_size() const;
  private:
  int _internal_billing_cycles_size() const;
  public:
  void clear_billing_cycles();
  ::clarifai::api::BillingCycle* mutable_billing_cycles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::BillingCycle >*
      mutable_billing_cycles();
  private:
  const ::clarifai::api::BillingCycle& _internal_billing_cycles(int index) const;
  ::clarifai::api::BillingCycle* _internal_add_billing_cycles();
  public:
  const ::clarifai::api::BillingCycle& billing_cycles(int index) const;
  ::clarifai::api::BillingCycle* add_billing_cycles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::BillingCycle >&
      billing_cycles() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ListUserBillingCyclesResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::BillingCycle > billing_cycles_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostUsageRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostUsageRequest) */ {
 public:
  PostUsageRequest();
  virtual ~PostUsageRequest();

  PostUsageRequest(const PostUsageRequest& from);
  PostUsageRequest(PostUsageRequest&& from) noexcept
    : PostUsageRequest() {
    *this = ::std::move(from);
  }

  inline PostUsageRequest& operator=(const PostUsageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostUsageRequest& operator=(PostUsageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostUsageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostUsageRequest* internal_default_instance() {
    return reinterpret_cast<const PostUsageRequest*>(
               &_PostUsageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    166;

  friend void swap(PostUsageRequest& a, PostUsageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostUsageRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostUsageRequest* New() const final {
    return CreateMaybeMessage<PostUsageRequest>(nullptr);
  }

  PostUsageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostUsageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostUsageRequest& from);
  void MergeFrom(const PostUsageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostUsageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostUsageRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventsCollectionsFieldNumber = 2,
    kPublicKeyFieldNumber = 3,
    kSignatureFieldNumber = 4,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.EventsCollection events_collections = 2;
  int events_collections_size() const;
  private:
  int _internal_events_collections_size() const;
  public:
  void clear_events_collections();
  ::clarifai::api::EventsCollection* mutable_events_collections(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::EventsCollection >*
      mutable_events_collections();
  private:
  const ::clarifai::api::EventsCollection& _internal_events_collections(int index) const;
  ::clarifai::api::EventsCollection* _internal_add_events_collections();
  public:
  const ::clarifai::api::EventsCollection& events_collections(int index) const;
  ::clarifai::api::EventsCollection* add_events_collections();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::EventsCollection >&
      events_collections() const;

  // string public_key = 3;
  void clear_public_key();
  const std::string& public_key() const;
  void set_public_key(const std::string& value);
  void set_public_key(std::string&& value);
  void set_public_key(const char* value);
  void set_public_key(const char* value, size_t size);
  std::string* mutable_public_key();
  std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);
  private:
  const std::string& _internal_public_key() const;
  void _internal_set_public_key(const std::string& value);
  std::string* _internal_mutable_public_key();
  public:

  // bytes signature = 4;
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PostUsageRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::EventsCollection > events_collections_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostUsageResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostUsageResponse) */ {
 public:
  PostUsageResponse();
  virtual ~PostUsageResponse();

  PostUsageResponse(const PostUsageResponse& from);
  PostUsageResponse(PostUsageResponse&& from) noexcept
    : PostUsageResponse() {
    *this = ::std::move(from);
  }

  inline PostUsageResponse& operator=(const PostUsageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostUsageResponse& operator=(PostUsageResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostUsageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostUsageResponse* internal_default_instance() {
    return reinterpret_cast<const PostUsageResponse*>(
               &_PostUsageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    167;

  friend void swap(PostUsageResponse& a, PostUsageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PostUsageResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostUsageResponse* New() const final {
    return CreateMaybeMessage<PostUsageResponse>(nullptr);
  }

  PostUsageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostUsageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostUsageResponse& from);
  void MergeFrom(const PostUsageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostUsageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostUsageResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PostUsageResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class GetUserRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.GetUserRequest) */ {
 public:
  GetUserRequest();
  virtual ~GetUserRequest();

  GetUserRequest(const GetUserRequest& from);
  GetUserRequest(GetUserRequest&& from) noexcept
    : GetUserRequest() {
    *this = ::std::move(from);
  }

  inline GetUserRequest& operator=(const GetUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUserRequest& operator=(GetUserRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetUserRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetUserRequest* internal_default_instance() {
    return reinterpret_cast<const GetUserRequest*>(
               &_GetUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    168;

  friend void swap(GetUserRequest& a, GetUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUserRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetUserRequest* New() const final {
    return CreateMaybeMessage<GetUserRequest>(nullptr);
  }

  GetUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetUserRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetUserRequest& from);
  void MergeFrom(const GetUserRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUserRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.GetUserRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserAppIdFieldNumber = 1,
  };
  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.GetUserRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostUserConsentRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostUserConsentRequest) */ {
 public:
  PostUserConsentRequest();
  virtual ~PostUserConsentRequest();

  PostUserConsentRequest(const PostUserConsentRequest& from);
  PostUserConsentRequest(PostUserConsentRequest&& from) noexcept
    : PostUserConsentRequest() {
    *this = ::std::move(from);
  }

  inline PostUserConsentRequest& operator=(const PostUserConsentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostUserConsentRequest& operator=(PostUserConsentRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostUserConsentRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostUserConsentRequest* internal_default_instance() {
    return reinterpret_cast<const PostUserConsentRequest*>(
               &_PostUserConsentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    169;

  friend void swap(PostUserConsentRequest& a, PostUserConsentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostUserConsentRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostUserConsentRequest* New() const final {
    return CreateMaybeMessage<PostUserConsentRequest>(nullptr);
  }

  PostUserConsentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostUserConsentRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostUserConsentRequest& from);
  void MergeFrom(const PostUserConsentRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostUserConsentRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostUserConsentRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
    kConsentFieldNumber = 2,
  };
  // repeated string fields = 3;
  int fields_size() const;
  private:
  int _internal_fields_size() const;
  public:
  void clear_fields();
  const std::string& fields(int index) const;
  std::string* mutable_fields(int index);
  void set_fields(int index, const std::string& value);
  void set_fields(int index, std::string&& value);
  void set_fields(int index, const char* value);
  void set_fields(int index, const char* value, size_t size);
  std::string* add_fields();
  void add_fields(const std::string& value);
  void add_fields(std::string&& value);
  void add_fields(const char* value);
  void add_fields(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& fields() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_fields();
  private:
  const std::string& _internal_fields(int index) const;
  std::string* _internal_add_fields();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // bool consent = 2;
  void clear_consent();
  bool consent() const;
  void set_consent(bool value);
  private:
  bool _internal_consent() const;
  void _internal_set_consent(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PostUserConsentRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> fields_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  bool consent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class SingleUserResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.SingleUserResponse) */ {
 public:
  SingleUserResponse();
  virtual ~SingleUserResponse();

  SingleUserResponse(const SingleUserResponse& from);
  SingleUserResponse(SingleUserResponse&& from) noexcept
    : SingleUserResponse() {
    *this = ::std::move(from);
  }

  inline SingleUserResponse& operator=(const SingleUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleUserResponse& operator=(SingleUserResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SingleUserResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SingleUserResponse* internal_default_instance() {
    return reinterpret_cast<const SingleUserResponse*>(
               &_SingleUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    170;

  friend void swap(SingleUserResponse& a, SingleUserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleUserResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SingleUserResponse* New() const final {
    return CreateMaybeMessage<SingleUserResponse>(nullptr);
  }

  SingleUserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SingleUserResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SingleUserResponse& from);
  void MergeFrom(const SingleUserResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleUserResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.SingleUserResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kUserFieldNumber = 2,
  };
  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // .clarifai.api.User user = 2;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::clarifai::api::User& user() const;
  ::clarifai::api::User* release_user();
  ::clarifai::api::User* mutable_user();
  void set_allocated_user(::clarifai::api::User* user);
  private:
  const ::clarifai::api::User& _internal_user() const;
  ::clarifai::api::User* _internal_mutable_user();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.SingleUserResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::status::Status* status_;
  ::clarifai::api::User* user_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiUserResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiUserResponse) */ {
 public:
  MultiUserResponse();
  virtual ~MultiUserResponse();

  MultiUserResponse(const MultiUserResponse& from);
  MultiUserResponse(MultiUserResponse&& from) noexcept
    : MultiUserResponse() {
    *this = ::std::move(from);
  }

  inline MultiUserResponse& operator=(const MultiUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiUserResponse& operator=(MultiUserResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiUserResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiUserResponse* internal_default_instance() {
    return reinterpret_cast<const MultiUserResponse*>(
               &_MultiUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    171;

  friend void swap(MultiUserResponse& a, MultiUserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiUserResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiUserResponse* New() const final {
    return CreateMaybeMessage<MultiUserResponse>(nullptr);
  }

  MultiUserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiUserResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiUserResponse& from);
  void MergeFrom(const MultiUserResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiUserResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiUserResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsersFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.User users = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int users_size() const;
  private:
  int _internal_users_size() const;
  public:
  void clear_users();
  ::clarifai::api::User* mutable_users(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::User >*
      mutable_users();
  private:
  const ::clarifai::api::User& _internal_users(int index) const;
  ::clarifai::api::User* _internal_add_users();
  public:
  const ::clarifai::api::User& users(int index) const;
  ::clarifai::api::User* add_users();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::User >&
      users() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiUserResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::User > users_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PatchUserRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PatchUserRequest) */ {
 public:
  PatchUserRequest();
  virtual ~PatchUserRequest();

  PatchUserRequest(const PatchUserRequest& from);
  PatchUserRequest(PatchUserRequest&& from) noexcept
    : PatchUserRequest() {
    *this = ::std::move(from);
  }

  inline PatchUserRequest& operator=(const PatchUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatchUserRequest& operator=(PatchUserRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PatchUserRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PatchUserRequest* internal_default_instance() {
    return reinterpret_cast<const PatchUserRequest*>(
               &_PatchUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    172;

  friend void swap(PatchUserRequest& a, PatchUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PatchUserRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PatchUserRequest* New() const final {
    return CreateMaybeMessage<PatchUserRequest>(nullptr);
  }

  PatchUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PatchUserRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PatchUserRequest& from);
  void MergeFrom(const PatchUserRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatchUserRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PatchUserRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserAppIdFieldNumber = 1,
    kInfoFieldNumber = 2,
    kPassFieldNumber = 3,
    kMetadataFieldNumber = 4,
    kActionFieldNumber = 5,
  };
  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // .clarifai.api.UserInfo info = 2;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::clarifai::api::UserInfo& info() const;
  ::clarifai::api::UserInfo* release_info();
  ::clarifai::api::UserInfo* mutable_info();
  void set_allocated_info(::clarifai::api::UserInfo* info);
  private:
  const ::clarifai::api::UserInfo& _internal_info() const;
  ::clarifai::api::UserInfo* _internal_mutable_info();
  public:

  // .clarifai.api.UserPassword pass = 3;
  bool has_pass() const;
  private:
  bool _internal_has_pass() const;
  public:
  void clear_pass();
  const ::clarifai::api::UserPassword& pass() const;
  ::clarifai::api::UserPassword* release_pass();
  ::clarifai::api::UserPassword* mutable_pass();
  void set_allocated_pass(::clarifai::api::UserPassword* pass);
  private:
  const ::clarifai::api::UserPassword& _internal_pass() const;
  ::clarifai::api::UserPassword* _internal_mutable_pass();
  public:

  // .google.protobuf.Struct metadata = 4;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const PROTOBUF_NAMESPACE_ID::Struct& metadata() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_metadata();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_metadata();
  void set_allocated_metadata(PROTOBUF_NAMESPACE_ID::Struct* metadata);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_metadata() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_metadata();
  public:

  // .clarifai.api.PatchAction action = 5;
  bool has_action() const;
  private:
  bool _internal_has_action() const;
  public:
  void clear_action();
  const ::clarifai::api::PatchAction& action() const;
  ::clarifai::api::PatchAction* release_action();
  ::clarifai::api::PatchAction* mutable_action();
  void set_allocated_action(::clarifai::api::PatchAction* action);
  private:
  const ::clarifai::api::PatchAction& _internal_action() const;
  ::clarifai::api::PatchAction* _internal_mutable_action();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PatchUserRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::clarifai::api::UserInfo* info_;
  ::clarifai::api::UserPassword* pass_;
  PROTOBUF_NAMESPACE_ID::Struct* metadata_;
  ::clarifai::api::PatchAction* action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostEmailsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostEmailsRequest) */ {
 public:
  PostEmailsRequest();
  virtual ~PostEmailsRequest();

  PostEmailsRequest(const PostEmailsRequest& from);
  PostEmailsRequest(PostEmailsRequest&& from) noexcept
    : PostEmailsRequest() {
    *this = ::std::move(from);
  }

  inline PostEmailsRequest& operator=(const PostEmailsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostEmailsRequest& operator=(PostEmailsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostEmailsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostEmailsRequest* internal_default_instance() {
    return reinterpret_cast<const PostEmailsRequest*>(
               &_PostEmailsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    173;

  friend void swap(PostEmailsRequest& a, PostEmailsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostEmailsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostEmailsRequest* New() const final {
    return CreateMaybeMessage<PostEmailsRequest>(nullptr);
  }

  PostEmailsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostEmailsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostEmailsRequest& from);
  void MergeFrom(const PostEmailsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostEmailsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostEmailsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailsFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // repeated string emails = 2;
  int emails_size() const;
  private:
  int _internal_emails_size() const;
  public:
  void clear_emails();
  const std::string& emails(int index) const;
  std::string* mutable_emails(int index);
  void set_emails(int index, const std::string& value);
  void set_emails(int index, std::string&& value);
  void set_emails(int index, const char* value);
  void set_emails(int index, const char* value, size_t size);
  std::string* add_emails();
  void add_emails(const std::string& value);
  void add_emails(std::string&& value);
  void add_emails(const char* value);
  void add_emails(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& emails() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_emails();
  private:
  const std::string& _internal_emails(int index) const;
  std::string* _internal_add_emails();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PostEmailsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> emails_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class SingleEmailResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.SingleEmailResponse) */ {
 public:
  SingleEmailResponse();
  virtual ~SingleEmailResponse();

  SingleEmailResponse(const SingleEmailResponse& from);
  SingleEmailResponse(SingleEmailResponse&& from) noexcept
    : SingleEmailResponse() {
    *this = ::std::move(from);
  }

  inline SingleEmailResponse& operator=(const SingleEmailResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleEmailResponse& operator=(SingleEmailResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SingleEmailResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SingleEmailResponse* internal_default_instance() {
    return reinterpret_cast<const SingleEmailResponse*>(
               &_SingleEmailResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    174;

  friend void swap(SingleEmailResponse& a, SingleEmailResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleEmailResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SingleEmailResponse* New() const final {
    return CreateMaybeMessage<SingleEmailResponse>(nullptr);
  }

  SingleEmailResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SingleEmailResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SingleEmailResponse& from);
  void MergeFrom(const SingleEmailResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleEmailResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.SingleEmailResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kEmailFieldNumber = 2,
  };
  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // .clarifai.api.EmailAddress email = 2;
  bool has_email() const;
  private:
  bool _internal_has_email() const;
  public:
  void clear_email();
  const ::clarifai::api::EmailAddress& email() const;
  ::clarifai::api::EmailAddress* release_email();
  ::clarifai::api::EmailAddress* mutable_email();
  void set_allocated_email(::clarifai::api::EmailAddress* email);
  private:
  const ::clarifai::api::EmailAddress& _internal_email() const;
  ::clarifai::api::EmailAddress* _internal_mutable_email();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.SingleEmailResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::status::Status* status_;
  ::clarifai::api::EmailAddress* email_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultipleEmailResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultipleEmailResponse) */ {
 public:
  MultipleEmailResponse();
  virtual ~MultipleEmailResponse();

  MultipleEmailResponse(const MultipleEmailResponse& from);
  MultipleEmailResponse(MultipleEmailResponse&& from) noexcept
    : MultipleEmailResponse() {
    *this = ::std::move(from);
  }

  inline MultipleEmailResponse& operator=(const MultipleEmailResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultipleEmailResponse& operator=(MultipleEmailResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultipleEmailResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultipleEmailResponse* internal_default_instance() {
    return reinterpret_cast<const MultipleEmailResponse*>(
               &_MultipleEmailResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    175;

  friend void swap(MultipleEmailResponse& a, MultipleEmailResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultipleEmailResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultipleEmailResponse* New() const final {
    return CreateMaybeMessage<MultipleEmailResponse>(nullptr);
  }

  MultipleEmailResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultipleEmailResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultipleEmailResponse& from);
  void MergeFrom(const MultipleEmailResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultipleEmailResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultipleEmailResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.EmailAddress emails = 2;
  int emails_size() const;
  private:
  int _internal_emails_size() const;
  public:
  void clear_emails();
  ::clarifai::api::EmailAddress* mutable_emails(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::EmailAddress >*
      mutable_emails();
  private:
  const ::clarifai::api::EmailAddress& _internal_emails(int index) const;
  ::clarifai::api::EmailAddress* _internal_add_emails();
  public:
  const ::clarifai::api::EmailAddress& emails(int index) const;
  ::clarifai::api::EmailAddress* add_emails();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::EmailAddress >&
      emails() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.MultipleEmailResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::EmailAddress > emails_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListEmailsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListEmailsRequest) */ {
 public:
  ListEmailsRequest();
  virtual ~ListEmailsRequest();

  ListEmailsRequest(const ListEmailsRequest& from);
  ListEmailsRequest(ListEmailsRequest&& from) noexcept
    : ListEmailsRequest() {
    *this = ::std::move(from);
  }

  inline ListEmailsRequest& operator=(const ListEmailsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListEmailsRequest& operator=(ListEmailsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListEmailsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListEmailsRequest* internal_default_instance() {
    return reinterpret_cast<const ListEmailsRequest*>(
               &_ListEmailsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    176;

  friend void swap(ListEmailsRequest& a, ListEmailsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListEmailsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListEmailsRequest* New() const final {
    return CreateMaybeMessage<ListEmailsRequest>(nullptr);
  }

  ListEmailsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListEmailsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListEmailsRequest& from);
  void MergeFrom(const ListEmailsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListEmailsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListEmailsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserAppIdFieldNumber = 1,
  };
  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ListEmailsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostResendVerifyRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostResendVerifyRequest) */ {
 public:
  PostResendVerifyRequest();
  virtual ~PostResendVerifyRequest();

  PostResendVerifyRequest(const PostResendVerifyRequest& from);
  PostResendVerifyRequest(PostResendVerifyRequest&& from) noexcept
    : PostResendVerifyRequest() {
    *this = ::std::move(from);
  }

  inline PostResendVerifyRequest& operator=(const PostResendVerifyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostResendVerifyRequest& operator=(PostResendVerifyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostResendVerifyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostResendVerifyRequest* internal_default_instance() {
    return reinterpret_cast<const PostResendVerifyRequest*>(
               &_PostResendVerifyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    177;

  friend void swap(PostResendVerifyRequest& a, PostResendVerifyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostResendVerifyRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostResendVerifyRequest* New() const final {
    return CreateMaybeMessage<PostResendVerifyRequest>(nullptr);
  }

  PostResendVerifyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostResendVerifyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostResendVerifyRequest& from);
  void MergeFrom(const PostResendVerifyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostResendVerifyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostResendVerifyRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // string email = 2;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PostResendVerifyRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class SingleResendVerifyResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.SingleResendVerifyResponse) */ {
 public:
  SingleResendVerifyResponse();
  virtual ~SingleResendVerifyResponse();

  SingleResendVerifyResponse(const SingleResendVerifyResponse& from);
  SingleResendVerifyResponse(SingleResendVerifyResponse&& from) noexcept
    : SingleResendVerifyResponse() {
    *this = ::std::move(from);
  }

  inline SingleResendVerifyResponse& operator=(const SingleResendVerifyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleResendVerifyResponse& operator=(SingleResendVerifyResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SingleResendVerifyResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SingleResendVerifyResponse* internal_default_instance() {
    return reinterpret_cast<const SingleResendVerifyResponse*>(
               &_SingleResendVerifyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    178;

  friend void swap(SingleResendVerifyResponse& a, SingleResendVerifyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleResendVerifyResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SingleResendVerifyResponse* New() const final {
    return CreateMaybeMessage<SingleResendVerifyResponse>(nullptr);
  }

  SingleResendVerifyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SingleResendVerifyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SingleResendVerifyResponse& from);
  void MergeFrom(const SingleResendVerifyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleResendVerifyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.SingleResendVerifyResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.SingleResendVerifyResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteEmailRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.DeleteEmailRequest) */ {
 public:
  DeleteEmailRequest();
  virtual ~DeleteEmailRequest();

  DeleteEmailRequest(const DeleteEmailRequest& from);
  DeleteEmailRequest(DeleteEmailRequest&& from) noexcept
    : DeleteEmailRequest() {
    *this = ::std::move(from);
  }

  inline DeleteEmailRequest& operator=(const DeleteEmailRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteEmailRequest& operator=(DeleteEmailRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteEmailRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteEmailRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteEmailRequest*>(
               &_DeleteEmailRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    179;

  friend void swap(DeleteEmailRequest& a, DeleteEmailRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteEmailRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteEmailRequest* New() const final {
    return CreateMaybeMessage<DeleteEmailRequest>(nullptr);
  }

  DeleteEmailRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteEmailRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteEmailRequest& from);
  void MergeFrom(const DeleteEmailRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteEmailRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.DeleteEmailRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // string email = 2;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.DeleteEmailRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostPrimaryEmailRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostPrimaryEmailRequest) */ {
 public:
  PostPrimaryEmailRequest();
  virtual ~PostPrimaryEmailRequest();

  PostPrimaryEmailRequest(const PostPrimaryEmailRequest& from);
  PostPrimaryEmailRequest(PostPrimaryEmailRequest&& from) noexcept
    : PostPrimaryEmailRequest() {
    *this = ::std::move(from);
  }

  inline PostPrimaryEmailRequest& operator=(const PostPrimaryEmailRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostPrimaryEmailRequest& operator=(PostPrimaryEmailRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostPrimaryEmailRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostPrimaryEmailRequest* internal_default_instance() {
    return reinterpret_cast<const PostPrimaryEmailRequest*>(
               &_PostPrimaryEmailRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    180;

  friend void swap(PostPrimaryEmailRequest& a, PostPrimaryEmailRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostPrimaryEmailRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostPrimaryEmailRequest* New() const final {
    return CreateMaybeMessage<PostPrimaryEmailRequest>(nullptr);
  }

  PostPrimaryEmailRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostPrimaryEmailRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostPrimaryEmailRequest& from);
  void MergeFrom(const PostPrimaryEmailRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostPrimaryEmailRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostPrimaryEmailRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // string email = 2;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PostPrimaryEmailRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostValidatePasswordRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostValidatePasswordRequest) */ {
 public:
  PostValidatePasswordRequest();
  virtual ~PostValidatePasswordRequest();

  PostValidatePasswordRequest(const PostValidatePasswordRequest& from);
  PostValidatePasswordRequest(PostValidatePasswordRequest&& from) noexcept
    : PostValidatePasswordRequest() {
    *this = ::std::move(from);
  }

  inline PostValidatePasswordRequest& operator=(const PostValidatePasswordRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostValidatePasswordRequest& operator=(PostValidatePasswordRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostValidatePasswordRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostValidatePasswordRequest* internal_default_instance() {
    return reinterpret_cast<const PostValidatePasswordRequest*>(
               &_PostValidatePasswordRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    181;

  friend void swap(PostValidatePasswordRequest& a, PostValidatePasswordRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostValidatePasswordRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostValidatePasswordRequest* New() const final {
    return CreateMaybeMessage<PostValidatePasswordRequest>(nullptr);
  }

  PostValidatePasswordRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostValidatePasswordRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostValidatePasswordRequest& from);
  void MergeFrom(const PostValidatePasswordRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostValidatePasswordRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostValidatePasswordRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserAppIdFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // .clarifai.api.Password password = 2;
  bool has_password() const;
  private:
  bool _internal_has_password() const;
  public:
  void clear_password();
  const ::clarifai::api::Password& password() const;
  ::clarifai::api::Password* release_password();
  ::clarifai::api::Password* mutable_password();
  void set_allocated_password(::clarifai::api::Password* password);
  private:
  const ::clarifai::api::Password& _internal_password() const;
  ::clarifai::api::Password* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PostValidatePasswordRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::clarifai::api::Password* password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class SinglePasswordValidationResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.SinglePasswordValidationResponse) */ {
 public:
  SinglePasswordValidationResponse();
  virtual ~SinglePasswordValidationResponse();

  SinglePasswordValidationResponse(const SinglePasswordValidationResponse& from);
  SinglePasswordValidationResponse(SinglePasswordValidationResponse&& from) noexcept
    : SinglePasswordValidationResponse() {
    *this = ::std::move(from);
  }

  inline SinglePasswordValidationResponse& operator=(const SinglePasswordValidationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SinglePasswordValidationResponse& operator=(SinglePasswordValidationResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SinglePasswordValidationResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SinglePasswordValidationResponse* internal_default_instance() {
    return reinterpret_cast<const SinglePasswordValidationResponse*>(
               &_SinglePasswordValidationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    182;

  friend void swap(SinglePasswordValidationResponse& a, SinglePasswordValidationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SinglePasswordValidationResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SinglePasswordValidationResponse* New() const final {
    return CreateMaybeMessage<SinglePasswordValidationResponse>(nullptr);
  }

  SinglePasswordValidationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SinglePasswordValidationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SinglePasswordValidationResponse& from);
  void MergeFrom(const SinglePasswordValidationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SinglePasswordValidationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.SinglePasswordValidationResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kPasswordViolationsFieldNumber = 2,
  };
  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // .clarifai.api.PasswordViolations password_violations = 2;
  bool has_password_violations() const;
  private:
  bool _internal_has_password_violations() const;
  public:
  void clear_password_violations();
  const ::clarifai::api::PasswordViolations& password_violations() const;
  ::clarifai::api::PasswordViolations* release_password_violations();
  ::clarifai::api::PasswordViolations* mutable_password_violations();
  void set_allocated_password_violations(::clarifai::api::PasswordViolations* password_violations);
  private:
  const ::clarifai::api::PasswordViolations& _internal_password_violations() const;
  ::clarifai::api::PasswordViolations* _internal_mutable_password_violations();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.SinglePasswordValidationResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::status::Status* status_;
  ::clarifai::api::PasswordViolations* password_violations_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListPasswordPoliciesRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListPasswordPoliciesRequest) */ {
 public:
  ListPasswordPoliciesRequest();
  virtual ~ListPasswordPoliciesRequest();

  ListPasswordPoliciesRequest(const ListPasswordPoliciesRequest& from);
  ListPasswordPoliciesRequest(ListPasswordPoliciesRequest&& from) noexcept
    : ListPasswordPoliciesRequest() {
    *this = ::std::move(from);
  }

  inline ListPasswordPoliciesRequest& operator=(const ListPasswordPoliciesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListPasswordPoliciesRequest& operator=(ListPasswordPoliciesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListPasswordPoliciesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListPasswordPoliciesRequest* internal_default_instance() {
    return reinterpret_cast<const ListPasswordPoliciesRequest*>(
               &_ListPasswordPoliciesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    183;

  friend void swap(ListPasswordPoliciesRequest& a, ListPasswordPoliciesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListPasswordPoliciesRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListPasswordPoliciesRequest* New() const final {
    return CreateMaybeMessage<ListPasswordPoliciesRequest>(nullptr);
  }

  ListPasswordPoliciesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListPasswordPoliciesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListPasswordPoliciesRequest& from);
  void MergeFrom(const ListPasswordPoliciesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListPasswordPoliciesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListPasswordPoliciesRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdsFieldNumber = 2,
    kOrganizationIdsFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
    kPageFieldNumber = 4,
    kPerPageFieldNumber = 5,
  };
  // repeated string user_ids = 2;
  int user_ids_size() const;
  private:
  int _internal_user_ids_size() const;
  public:
  void clear_user_ids();
  const std::string& user_ids(int index) const;
  std::string* mutable_user_ids(int index);
  void set_user_ids(int index, const std::string& value);
  void set_user_ids(int index, std::string&& value);
  void set_user_ids(int index, const char* value);
  void set_user_ids(int index, const char* value, size_t size);
  std::string* add_user_ids();
  void add_user_ids(const std::string& value);
  void add_user_ids(std::string&& value);
  void add_user_ids(const char* value);
  void add_user_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& user_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_user_ids();
  private:
  const std::string& _internal_user_ids(int index) const;
  std::string* _internal_add_user_ids();
  public:

  // repeated string organization_ids = 3;
  int organization_ids_size() const;
  private:
  int _internal_organization_ids_size() const;
  public:
  void clear_organization_ids();
  const std::string& organization_ids(int index) const;
  std::string* mutable_organization_ids(int index);
  void set_organization_ids(int index, const std::string& value);
  void set_organization_ids(int index, std::string&& value);
  void set_organization_ids(int index, const char* value);
  void set_organization_ids(int index, const char* value, size_t size);
  std::string* add_organization_ids();
  void add_organization_ids(const std::string& value);
  void add_organization_ids(std::string&& value);
  void add_organization_ids(const char* value);
  void add_organization_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& organization_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_organization_ids();
  private:
  const std::string& _internal_organization_ids(int index) const;
  std::string* _internal_add_organization_ids();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // uint32 page = 4;
  void clear_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 page() const;
  void set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_page() const;
  void _internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 per_page = 5;
  void clear_per_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 per_page() const;
  void set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_per_page() const;
  void _internal_set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ListPasswordPoliciesRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> user_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> organization_ids_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 page_;
  ::PROTOBUF_NAMESPACE_ID::uint32 per_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostPasswordPoliciesRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostPasswordPoliciesRequest) */ {
 public:
  PostPasswordPoliciesRequest();
  virtual ~PostPasswordPoliciesRequest();

  PostPasswordPoliciesRequest(const PostPasswordPoliciesRequest& from);
  PostPasswordPoliciesRequest(PostPasswordPoliciesRequest&& from) noexcept
    : PostPasswordPoliciesRequest() {
    *this = ::std::move(from);
  }

  inline PostPasswordPoliciesRequest& operator=(const PostPasswordPoliciesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostPasswordPoliciesRequest& operator=(PostPasswordPoliciesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostPasswordPoliciesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostPasswordPoliciesRequest* internal_default_instance() {
    return reinterpret_cast<const PostPasswordPoliciesRequest*>(
               &_PostPasswordPoliciesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    184;

  friend void swap(PostPasswordPoliciesRequest& a, PostPasswordPoliciesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostPasswordPoliciesRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostPasswordPoliciesRequest* New() const final {
    return CreateMaybeMessage<PostPasswordPoliciesRequest>(nullptr);
  }

  PostPasswordPoliciesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostPasswordPoliciesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostPasswordPoliciesRequest& from);
  void MergeFrom(const PostPasswordPoliciesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostPasswordPoliciesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostPasswordPoliciesRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPasswordPoliciesFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.PasswordPolicy password_policies = 2;
  int password_policies_size() const;
  private:
  int _internal_password_policies_size() const;
  public:
  void clear_password_policies();
  ::clarifai::api::PasswordPolicy* mutable_password_policies(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::PasswordPolicy >*
      mutable_password_policies();
  private:
  const ::clarifai::api::PasswordPolicy& _internal_password_policies(int index) const;
  ::clarifai::api::PasswordPolicy* _internal_add_password_policies();
  public:
  const ::clarifai::api::PasswordPolicy& password_policies(int index) const;
  ::clarifai::api::PasswordPolicy* add_password_policies();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::PasswordPolicy >&
      password_policies() const;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PostPasswordPoliciesRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::PasswordPolicy > password_policies_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PatchPasswordPoliciesRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PatchPasswordPoliciesRequest) */ {
 public:
  PatchPasswordPoliciesRequest();
  virtual ~PatchPasswordPoliciesRequest();

  PatchPasswordPoliciesRequest(const PatchPasswordPoliciesRequest& from);
  PatchPasswordPoliciesRequest(PatchPasswordPoliciesRequest&& from) noexcept
    : PatchPasswordPoliciesRequest() {
    *this = ::std::move(from);
  }

  inline PatchPasswordPoliciesRequest& operator=(const PatchPasswordPoliciesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatchPasswordPoliciesRequest& operator=(PatchPasswordPoliciesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PatchPasswordPoliciesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PatchPasswordPoliciesRequest* internal_default_instance() {
    return reinterpret_cast<const PatchPasswordPoliciesRequest*>(
               &_PatchPasswordPoliciesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    185;

  friend void swap(PatchPasswordPoliciesRequest& a, PatchPasswordPoliciesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PatchPasswordPoliciesRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PatchPasswordPoliciesRequest* New() const final {
    return CreateMaybeMessage<PatchPasswordPoliciesRequest>(nullptr);
  }

  PatchPasswordPoliciesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PatchPasswordPoliciesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PatchPasswordPoliciesRequest& from);
  void MergeFrom(const PatchPasswordPoliciesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatchPasswordPoliciesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PatchPasswordPoliciesRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPasswordPoliciesFieldNumber = 2,
    kActionFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.PasswordPolicy password_policies = 2;
  int password_policies_size() const;
  private:
  int _internal_password_policies_size() const;
  public:
  void clear_password_policies();
  ::clarifai::api::PasswordPolicy* mutable_password_policies(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::PasswordPolicy >*
      mutable_password_policies();
  private:
  const ::clarifai::api::PasswordPolicy& _internal_password_policies(int index) const;
  ::clarifai::api::PasswordPolicy* _internal_add_password_policies();
  public:
  const ::clarifai::api::PasswordPolicy& password_policies(int index) const;
  ::clarifai::api::PasswordPolicy* add_password_policies();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::PasswordPolicy >&
      password_policies() const;

  // string action = 3;
  void clear_action();
  const std::string& action() const;
  void set_action(const std::string& value);
  void set_action(std::string&& value);
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  std::string* mutable_action();
  std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PatchPasswordPoliciesRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::PasswordPolicy > password_policies_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class DeletePasswordPoliciesRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.DeletePasswordPoliciesRequest) */ {
 public:
  DeletePasswordPoliciesRequest();
  virtual ~DeletePasswordPoliciesRequest();

  DeletePasswordPoliciesRequest(const DeletePasswordPoliciesRequest& from);
  DeletePasswordPoliciesRequest(DeletePasswordPoliciesRequest&& from) noexcept
    : DeletePasswordPoliciesRequest() {
    *this = ::std::move(from);
  }

  inline DeletePasswordPoliciesRequest& operator=(const DeletePasswordPoliciesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeletePasswordPoliciesRequest& operator=(DeletePasswordPoliciesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeletePasswordPoliciesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeletePasswordPoliciesRequest* internal_default_instance() {
    return reinterpret_cast<const DeletePasswordPoliciesRequest*>(
               &_DeletePasswordPoliciesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    186;

  friend void swap(DeletePasswordPoliciesRequest& a, DeletePasswordPoliciesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeletePasswordPoliciesRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeletePasswordPoliciesRequest* New() const final {
    return CreateMaybeMessage<DeletePasswordPoliciesRequest>(nullptr);
  }

  DeletePasswordPoliciesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeletePasswordPoliciesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeletePasswordPoliciesRequest& from);
  void MergeFrom(const DeletePasswordPoliciesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeletePasswordPoliciesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.DeletePasswordPoliciesRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // repeated string ids = 2;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  const std::string& ids(int index) const;
  std::string* mutable_ids(int index);
  void set_ids(int index, const std::string& value);
  void set_ids(int index, std::string&& value);
  void set_ids(int index, const char* value);
  void set_ids(int index, const char* value, size_t size);
  std::string* add_ids();
  void add_ids(const std::string& value);
  void add_ids(std::string&& value);
  void add_ids(const char* value);
  void add_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ids();
  private:
  const std::string& _internal_ids(int index) const;
  std::string* _internal_add_ids();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.DeletePasswordPoliciesRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ids_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiplePasswordPoliciesResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiplePasswordPoliciesResponse) */ {
 public:
  MultiplePasswordPoliciesResponse();
  virtual ~MultiplePasswordPoliciesResponse();

  MultiplePasswordPoliciesResponse(const MultiplePasswordPoliciesResponse& from);
  MultiplePasswordPoliciesResponse(MultiplePasswordPoliciesResponse&& from) noexcept
    : MultiplePasswordPoliciesResponse() {
    *this = ::std::move(from);
  }

  inline MultiplePasswordPoliciesResponse& operator=(const MultiplePasswordPoliciesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiplePasswordPoliciesResponse& operator=(MultiplePasswordPoliciesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiplePasswordPoliciesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiplePasswordPoliciesResponse* internal_default_instance() {
    return reinterpret_cast<const MultiplePasswordPoliciesResponse*>(
               &_MultiplePasswordPoliciesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    187;

  friend void swap(MultiplePasswordPoliciesResponse& a, MultiplePasswordPoliciesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiplePasswordPoliciesResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiplePasswordPoliciesResponse* New() const final {
    return CreateMaybeMessage<MultiplePasswordPoliciesResponse>(nullptr);
  }

  MultiplePasswordPoliciesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiplePasswordPoliciesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiplePasswordPoliciesResponse& from);
  void MergeFrom(const MultiplePasswordPoliciesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiplePasswordPoliciesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiplePasswordPoliciesResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPasswordPoliciesFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.PasswordPolicy password_policies = 2;
  int password_policies_size() const;
  private:
  int _internal_password_policies_size() const;
  public:
  void clear_password_policies();
  ::clarifai::api::PasswordPolicy* mutable_password_policies(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::PasswordPolicy >*
      mutable_password_policies();
  private:
  const ::clarifai::api::PasswordPolicy& _internal_password_policies(int index) const;
  ::clarifai::api::PasswordPolicy* _internal_add_password_policies();
  public:
  const ::clarifai::api::PasswordPolicy& password_policies(int index) const;
  ::clarifai::api::PasswordPolicy* add_password_policies();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::PasswordPolicy >&
      password_policies() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiplePasswordPoliciesResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::PasswordPolicy > password_policies_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class GetVocabRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.GetVocabRequest) */ {
 public:
  GetVocabRequest();
  virtual ~GetVocabRequest();

  GetVocabRequest(const GetVocabRequest& from);
  GetVocabRequest(GetVocabRequest&& from) noexcept
    : GetVocabRequest() {
    *this = ::std::move(from);
  }

  inline GetVocabRequest& operator=(const GetVocabRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVocabRequest& operator=(GetVocabRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetVocabRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetVocabRequest* internal_default_instance() {
    return reinterpret_cast<const GetVocabRequest*>(
               &_GetVocabRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    188;

  friend void swap(GetVocabRequest& a, GetVocabRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVocabRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetVocabRequest* New() const final {
    return CreateMaybeMessage<GetVocabRequest>(nullptr);
  }

  GetVocabRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetVocabRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetVocabRequest& from);
  void MergeFrom(const GetVocabRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVocabRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.GetVocabRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVocabIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // string vocab_id = 2;
  void clear_vocab_id();
  const std::string& vocab_id() const;
  void set_vocab_id(const std::string& value);
  void set_vocab_id(std::string&& value);
  void set_vocab_id(const char* value);
  void set_vocab_id(const char* value, size_t size);
  std::string* mutable_vocab_id();
  std::string* release_vocab_id();
  void set_allocated_vocab_id(std::string* vocab_id);
  private:
  const std::string& _internal_vocab_id() const;
  void _internal_set_vocab_id(const std::string& value);
  std::string* _internal_mutable_vocab_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.GetVocabRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vocab_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListVocabsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListVocabsRequest) */ {
 public:
  ListVocabsRequest();
  virtual ~ListVocabsRequest();

  ListVocabsRequest(const ListVocabsRequest& from);
  ListVocabsRequest(ListVocabsRequest&& from) noexcept
    : ListVocabsRequest() {
    *this = ::std::move(from);
  }

  inline ListVocabsRequest& operator=(const ListVocabsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListVocabsRequest& operator=(ListVocabsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListVocabsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListVocabsRequest* internal_default_instance() {
    return reinterpret_cast<const ListVocabsRequest*>(
               &_ListVocabsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    189;

  friend void swap(ListVocabsRequest& a, ListVocabsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListVocabsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListVocabsRequest* New() const final {
    return CreateMaybeMessage<ListVocabsRequest>(nullptr);
  }

  ListVocabsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListVocabsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListVocabsRequest& from);
  void MergeFrom(const ListVocabsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListVocabsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListVocabsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserAppIdFieldNumber = 1,
    kPageFieldNumber = 2,
    kPerPageFieldNumber = 3,
  };
  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // uint32 page = 2;
  void clear_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 page() const;
  void set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_page() const;
  void _internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 per_page = 3;
  void clear_per_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 per_page() const;
  void set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_per_page() const;
  void _internal_set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ListVocabsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 page_;
  ::PROTOBUF_NAMESPACE_ID::uint32 per_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostVocabsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostVocabsRequest) */ {
 public:
  PostVocabsRequest();
  virtual ~PostVocabsRequest();

  PostVocabsRequest(const PostVocabsRequest& from);
  PostVocabsRequest(PostVocabsRequest&& from) noexcept
    : PostVocabsRequest() {
    *this = ::std::move(from);
  }

  inline PostVocabsRequest& operator=(const PostVocabsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostVocabsRequest& operator=(PostVocabsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostVocabsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostVocabsRequest* internal_default_instance() {
    return reinterpret_cast<const PostVocabsRequest*>(
               &_PostVocabsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    190;

  friend void swap(PostVocabsRequest& a, PostVocabsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostVocabsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostVocabsRequest* New() const final {
    return CreateMaybeMessage<PostVocabsRequest>(nullptr);
  }

  PostVocabsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostVocabsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostVocabsRequest& from);
  void MergeFrom(const PostVocabsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostVocabsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostVocabsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVocabsFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.Vocab vocabs = 2;
  int vocabs_size() const;
  private:
  int _internal_vocabs_size() const;
  public:
  void clear_vocabs();
  ::clarifai::api::Vocab* mutable_vocabs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Vocab >*
      mutable_vocabs();
  private:
  const ::clarifai::api::Vocab& _internal_vocabs(int index) const;
  ::clarifai::api::Vocab* _internal_add_vocabs();
  public:
  const ::clarifai::api::Vocab& vocabs(int index) const;
  ::clarifai::api::Vocab* add_vocabs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Vocab >&
      vocabs() const;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PostVocabsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Vocab > vocabs_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PatchVocabsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PatchVocabsRequest) */ {
 public:
  PatchVocabsRequest();
  virtual ~PatchVocabsRequest();

  PatchVocabsRequest(const PatchVocabsRequest& from);
  PatchVocabsRequest(PatchVocabsRequest&& from) noexcept
    : PatchVocabsRequest() {
    *this = ::std::move(from);
  }

  inline PatchVocabsRequest& operator=(const PatchVocabsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatchVocabsRequest& operator=(PatchVocabsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PatchVocabsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PatchVocabsRequest* internal_default_instance() {
    return reinterpret_cast<const PatchVocabsRequest*>(
               &_PatchVocabsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    191;

  friend void swap(PatchVocabsRequest& a, PatchVocabsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PatchVocabsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PatchVocabsRequest* New() const final {
    return CreateMaybeMessage<PatchVocabsRequest>(nullptr);
  }

  PatchVocabsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PatchVocabsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PatchVocabsRequest& from);
  void MergeFrom(const PatchVocabsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatchVocabsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PatchVocabsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVocabsFieldNumber = 2,
    kActionFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.Vocab vocabs = 2;
  int vocabs_size() const;
  private:
  int _internal_vocabs_size() const;
  public:
  void clear_vocabs();
  ::clarifai::api::Vocab* mutable_vocabs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Vocab >*
      mutable_vocabs();
  private:
  const ::clarifai::api::Vocab& _internal_vocabs(int index) const;
  ::clarifai::api::Vocab* _internal_add_vocabs();
  public:
  const ::clarifai::api::Vocab& vocabs(int index) const;
  ::clarifai::api::Vocab* add_vocabs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Vocab >&
      vocabs() const;

  // string action = 3;
  void clear_action();
  const std::string& action() const;
  void set_action(const std::string& value);
  void set_action(std::string&& value);
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  std::string* mutable_action();
  std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PatchVocabsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Vocab > vocabs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteVocabRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.DeleteVocabRequest) */ {
 public:
  DeleteVocabRequest();
  virtual ~DeleteVocabRequest();

  DeleteVocabRequest(const DeleteVocabRequest& from);
  DeleteVocabRequest(DeleteVocabRequest&& from) noexcept
    : DeleteVocabRequest() {
    *this = ::std::move(from);
  }

  inline DeleteVocabRequest& operator=(const DeleteVocabRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteVocabRequest& operator=(DeleteVocabRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteVocabRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteVocabRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteVocabRequest*>(
               &_DeleteVocabRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    192;

  friend void swap(DeleteVocabRequest& a, DeleteVocabRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteVocabRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteVocabRequest* New() const final {
    return CreateMaybeMessage<DeleteVocabRequest>(nullptr);
  }

  DeleteVocabRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteVocabRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteVocabRequest& from);
  void MergeFrom(const DeleteVocabRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteVocabRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.DeleteVocabRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVocabIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // string vocab_id = 2;
  void clear_vocab_id();
  const std::string& vocab_id() const;
  void set_vocab_id(const std::string& value);
  void set_vocab_id(std::string&& value);
  void set_vocab_id(const char* value);
  void set_vocab_id(const char* value, size_t size);
  std::string* mutable_vocab_id();
  std::string* release_vocab_id();
  void set_allocated_vocab_id(std::string* vocab_id);
  private:
  const std::string& _internal_vocab_id() const;
  void _internal_set_vocab_id(const std::string& value);
  std::string* _internal_mutable_vocab_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.DeleteVocabRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vocab_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteVocabsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.DeleteVocabsRequest) */ {
 public:
  DeleteVocabsRequest();
  virtual ~DeleteVocabsRequest();

  DeleteVocabsRequest(const DeleteVocabsRequest& from);
  DeleteVocabsRequest(DeleteVocabsRequest&& from) noexcept
    : DeleteVocabsRequest() {
    *this = ::std::move(from);
  }

  inline DeleteVocabsRequest& operator=(const DeleteVocabsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteVocabsRequest& operator=(DeleteVocabsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteVocabsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteVocabsRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteVocabsRequest*>(
               &_DeleteVocabsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    193;

  friend void swap(DeleteVocabsRequest& a, DeleteVocabsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteVocabsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteVocabsRequest* New() const final {
    return CreateMaybeMessage<DeleteVocabsRequest>(nullptr);
  }

  DeleteVocabsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteVocabsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteVocabsRequest& from);
  void MergeFrom(const DeleteVocabsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteVocabsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.DeleteVocabsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
    kDeleteAllFieldNumber = 3,
  };
  // repeated string ids = 2;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  const std::string& ids(int index) const;
  std::string* mutable_ids(int index);
  void set_ids(int index, const std::string& value);
  void set_ids(int index, std::string&& value);
  void set_ids(int index, const char* value);
  void set_ids(int index, const char* value, size_t size);
  std::string* add_ids();
  void add_ids(const std::string& value);
  void add_ids(std::string&& value);
  void add_ids(const char* value);
  void add_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ids();
  private:
  const std::string& _internal_ids(int index) const;
  std::string* _internal_add_ids();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // bool delete_all = 3;
  void clear_delete_all();
  bool delete_all() const;
  void set_delete_all(bool value);
  private:
  bool _internal_delete_all() const;
  void _internal_set_delete_all(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.DeleteVocabsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ids_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  bool delete_all_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListVocabConceptsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListVocabConceptsRequest) */ {
 public:
  ListVocabConceptsRequest();
  virtual ~ListVocabConceptsRequest();

  ListVocabConceptsRequest(const ListVocabConceptsRequest& from);
  ListVocabConceptsRequest(ListVocabConceptsRequest&& from) noexcept
    : ListVocabConceptsRequest() {
    *this = ::std::move(from);
  }

  inline ListVocabConceptsRequest& operator=(const ListVocabConceptsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListVocabConceptsRequest& operator=(ListVocabConceptsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListVocabConceptsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListVocabConceptsRequest* internal_default_instance() {
    return reinterpret_cast<const ListVocabConceptsRequest*>(
               &_ListVocabConceptsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    194;

  friend void swap(ListVocabConceptsRequest& a, ListVocabConceptsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListVocabConceptsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListVocabConceptsRequest* New() const final {
    return CreateMaybeMessage<ListVocabConceptsRequest>(nullptr);
  }

  ListVocabConceptsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListVocabConceptsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListVocabConceptsRequest& from);
  void MergeFrom(const ListVocabConceptsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListVocabConceptsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListVocabConceptsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVocabIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
    kPageFieldNumber = 3,
    kPerPageFieldNumber = 4,
  };
  // string vocab_id = 2;
  void clear_vocab_id();
  const std::string& vocab_id() const;
  void set_vocab_id(const std::string& value);
  void set_vocab_id(std::string&& value);
  void set_vocab_id(const char* value);
  void set_vocab_id(const char* value, size_t size);
  std::string* mutable_vocab_id();
  std::string* release_vocab_id();
  void set_allocated_vocab_id(std::string* vocab_id);
  private:
  const std::string& _internal_vocab_id() const;
  void _internal_set_vocab_id(const std::string& value);
  std::string* _internal_mutable_vocab_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // uint32 page = 3;
  void clear_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 page() const;
  void set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_page() const;
  void _internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 per_page = 4;
  void clear_per_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 per_page() const;
  void set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_per_page() const;
  void _internal_set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ListVocabConceptsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vocab_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 page_;
  ::PROTOBUF_NAMESPACE_ID::uint32 per_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostVocabConceptsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostVocabConceptsRequest) */ {
 public:
  PostVocabConceptsRequest();
  virtual ~PostVocabConceptsRequest();

  PostVocabConceptsRequest(const PostVocabConceptsRequest& from);
  PostVocabConceptsRequest(PostVocabConceptsRequest&& from) noexcept
    : PostVocabConceptsRequest() {
    *this = ::std::move(from);
  }

  inline PostVocabConceptsRequest& operator=(const PostVocabConceptsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostVocabConceptsRequest& operator=(PostVocabConceptsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostVocabConceptsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostVocabConceptsRequest* internal_default_instance() {
    return reinterpret_cast<const PostVocabConceptsRequest*>(
               &_PostVocabConceptsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    195;

  friend void swap(PostVocabConceptsRequest& a, PostVocabConceptsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostVocabConceptsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostVocabConceptsRequest* New() const final {
    return CreateMaybeMessage<PostVocabConceptsRequest>(nullptr);
  }

  PostVocabConceptsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostVocabConceptsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostVocabConceptsRequest& from);
  void MergeFrom(const PostVocabConceptsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostVocabConceptsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostVocabConceptsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConceptsFieldNumber = 3,
    kVocabIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.Concept concepts = 3;
  int concepts_size() const;
  private:
  int _internal_concepts_size() const;
  public:
  void clear_concepts();
  ::clarifai::api::Concept* mutable_concepts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >*
      mutable_concepts();
  private:
  const ::clarifai::api::Concept& _internal_concepts(int index) const;
  ::clarifai::api::Concept* _internal_add_concepts();
  public:
  const ::clarifai::api::Concept& concepts(int index) const;
  ::clarifai::api::Concept* add_concepts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >&
      concepts() const;

  // string vocab_id = 2;
  void clear_vocab_id();
  const std::string& vocab_id() const;
  void set_vocab_id(const std::string& value);
  void set_vocab_id(std::string&& value);
  void set_vocab_id(const char* value);
  void set_vocab_id(const char* value, size_t size);
  std::string* mutable_vocab_id();
  std::string* release_vocab_id();
  void set_allocated_vocab_id(std::string* vocab_id);
  private:
  const std::string& _internal_vocab_id() const;
  void _internal_set_vocab_id(const std::string& value);
  std::string* _internal_mutable_vocab_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PostVocabConceptsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept > concepts_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vocab_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteVocabConceptRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.DeleteVocabConceptRequest) */ {
 public:
  DeleteVocabConceptRequest();
  virtual ~DeleteVocabConceptRequest();

  DeleteVocabConceptRequest(const DeleteVocabConceptRequest& from);
  DeleteVocabConceptRequest(DeleteVocabConceptRequest&& from) noexcept
    : DeleteVocabConceptRequest() {
    *this = ::std::move(from);
  }

  inline DeleteVocabConceptRequest& operator=(const DeleteVocabConceptRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteVocabConceptRequest& operator=(DeleteVocabConceptRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteVocabConceptRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteVocabConceptRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteVocabConceptRequest*>(
               &_DeleteVocabConceptRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    196;

  friend void swap(DeleteVocabConceptRequest& a, DeleteVocabConceptRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteVocabConceptRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteVocabConceptRequest* New() const final {
    return CreateMaybeMessage<DeleteVocabConceptRequest>(nullptr);
  }

  DeleteVocabConceptRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteVocabConceptRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteVocabConceptRequest& from);
  void MergeFrom(const DeleteVocabConceptRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteVocabConceptRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.DeleteVocabConceptRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVocabIdFieldNumber = 2,
    kConceptIdFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
  };
  // string vocab_id = 2;
  void clear_vocab_id();
  const std::string& vocab_id() const;
  void set_vocab_id(const std::string& value);
  void set_vocab_id(std::string&& value);
  void set_vocab_id(const char* value);
  void set_vocab_id(const char* value, size_t size);
  std::string* mutable_vocab_id();
  std::string* release_vocab_id();
  void set_allocated_vocab_id(std::string* vocab_id);
  private:
  const std::string& _internal_vocab_id() const;
  void _internal_set_vocab_id(const std::string& value);
  std::string* _internal_mutable_vocab_id();
  public:

  // string concept_id = 3;
  void clear_concept_id();
  const std::string& concept_id() const;
  void set_concept_id(const std::string& value);
  void set_concept_id(std::string&& value);
  void set_concept_id(const char* value);
  void set_concept_id(const char* value, size_t size);
  std::string* mutable_concept_id();
  std::string* release_concept_id();
  void set_allocated_concept_id(std::string* concept_id);
  private:
  const std::string& _internal_concept_id() const;
  void _internal_set_concept_id(const std::string& value);
  std::string* _internal_mutable_concept_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.DeleteVocabConceptRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vocab_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr concept_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteVocabConceptsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.DeleteVocabConceptsRequest) */ {
 public:
  DeleteVocabConceptsRequest();
  virtual ~DeleteVocabConceptsRequest();

  DeleteVocabConceptsRequest(const DeleteVocabConceptsRequest& from);
  DeleteVocabConceptsRequest(DeleteVocabConceptsRequest&& from) noexcept
    : DeleteVocabConceptsRequest() {
    *this = ::std::move(from);
  }

  inline DeleteVocabConceptsRequest& operator=(const DeleteVocabConceptsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteVocabConceptsRequest& operator=(DeleteVocabConceptsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteVocabConceptsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteVocabConceptsRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteVocabConceptsRequest*>(
               &_DeleteVocabConceptsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    197;

  friend void swap(DeleteVocabConceptsRequest& a, DeleteVocabConceptsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteVocabConceptsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteVocabConceptsRequest* New() const final {
    return CreateMaybeMessage<DeleteVocabConceptsRequest>(nullptr);
  }

  DeleteVocabConceptsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteVocabConceptsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteVocabConceptsRequest& from);
  void MergeFrom(const DeleteVocabConceptsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteVocabConceptsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.DeleteVocabConceptsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 3,
    kVocabIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
    kDeleteAllFieldNumber = 4,
  };
  // repeated string ids = 3;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  const std::string& ids(int index) const;
  std::string* mutable_ids(int index);
  void set_ids(int index, const std::string& value);
  void set_ids(int index, std::string&& value);
  void set_ids(int index, const char* value);
  void set_ids(int index, const char* value, size_t size);
  std::string* add_ids();
  void add_ids(const std::string& value);
  void add_ids(std::string&& value);
  void add_ids(const char* value);
  void add_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ids();
  private:
  const std::string& _internal_ids(int index) const;
  std::string* _internal_add_ids();
  public:

  // string vocab_id = 2;
  void clear_vocab_id();
  const std::string& vocab_id() const;
  void set_vocab_id(const std::string& value);
  void set_vocab_id(std::string&& value);
  void set_vocab_id(const char* value);
  void set_vocab_id(const char* value, size_t size);
  std::string* mutable_vocab_id();
  std::string* release_vocab_id();
  void set_allocated_vocab_id(std::string* vocab_id);
  private:
  const std::string& _internal_vocab_id() const;
  void _internal_set_vocab_id(const std::string& value);
  std::string* _internal_mutable_vocab_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // bool delete_all = 4;
  void clear_delete_all();
  bool delete_all() const;
  void set_delete_all(bool value);
  private:
  bool _internal_delete_all() const;
  void _internal_set_delete_all(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.DeleteVocabConceptsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vocab_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  bool delete_all_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class SingleVocabResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.SingleVocabResponse) */ {
 public:
  SingleVocabResponse();
  virtual ~SingleVocabResponse();

  SingleVocabResponse(const SingleVocabResponse& from);
  SingleVocabResponse(SingleVocabResponse&& from) noexcept
    : SingleVocabResponse() {
    *this = ::std::move(from);
  }

  inline SingleVocabResponse& operator=(const SingleVocabResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleVocabResponse& operator=(SingleVocabResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SingleVocabResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SingleVocabResponse* internal_default_instance() {
    return reinterpret_cast<const SingleVocabResponse*>(
               &_SingleVocabResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    198;

  friend void swap(SingleVocabResponse& a, SingleVocabResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleVocabResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SingleVocabResponse* New() const final {
    return CreateMaybeMessage<SingleVocabResponse>(nullptr);
  }

  SingleVocabResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SingleVocabResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SingleVocabResponse& from);
  void MergeFrom(const SingleVocabResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleVocabResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.SingleVocabResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kVocabFieldNumber = 2,
  };
  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // .clarifai.api.Vocab vocab = 2;
  bool has_vocab() const;
  private:
  bool _internal_has_vocab() const;
  public:
  void clear_vocab();
  const ::clarifai::api::Vocab& vocab() const;
  ::clarifai::api::Vocab* release_vocab();
  ::clarifai::api::Vocab* mutable_vocab();
  void set_allocated_vocab(::clarifai::api::Vocab* vocab);
  private:
  const ::clarifai::api::Vocab& _internal_vocab() const;
  ::clarifai::api::Vocab* _internal_mutable_vocab();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.SingleVocabResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::status::Status* status_;
  ::clarifai::api::Vocab* vocab_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiVocabResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiVocabResponse) */ {
 public:
  MultiVocabResponse();
  virtual ~MultiVocabResponse();

  MultiVocabResponse(const MultiVocabResponse& from);
  MultiVocabResponse(MultiVocabResponse&& from) noexcept
    : MultiVocabResponse() {
    *this = ::std::move(from);
  }

  inline MultiVocabResponse& operator=(const MultiVocabResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiVocabResponse& operator=(MultiVocabResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiVocabResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiVocabResponse* internal_default_instance() {
    return reinterpret_cast<const MultiVocabResponse*>(
               &_MultiVocabResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    199;

  friend void swap(MultiVocabResponse& a, MultiVocabResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiVocabResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiVocabResponse* New() const final {
    return CreateMaybeMessage<MultiVocabResponse>(nullptr);
  }

  MultiVocabResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiVocabResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiVocabResponse& from);
  void MergeFrom(const MultiVocabResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiVocabResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiVocabResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVocabsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.Vocab vocabs = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int vocabs_size() const;
  private:
  int _internal_vocabs_size() const;
  public:
  void clear_vocabs();
  ::clarifai::api::Vocab* mutable_vocabs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Vocab >*
      mutable_vocabs();
  private:
  const ::clarifai::api::Vocab& _internal_vocabs(int index) const;
  ::clarifai::api::Vocab* _internal_add_vocabs();
  public:
  const ::clarifai::api::Vocab& vocabs(int index) const;
  ::clarifai::api::Vocab* add_vocabs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Vocab >&
      vocabs() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiVocabResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Vocab > vocabs_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class GetWorkflowRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.GetWorkflowRequest) */ {
 public:
  GetWorkflowRequest();
  virtual ~GetWorkflowRequest();

  GetWorkflowRequest(const GetWorkflowRequest& from);
  GetWorkflowRequest(GetWorkflowRequest&& from) noexcept
    : GetWorkflowRequest() {
    *this = ::std::move(from);
  }

  inline GetWorkflowRequest& operator=(const GetWorkflowRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetWorkflowRequest& operator=(GetWorkflowRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetWorkflowRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetWorkflowRequest* internal_default_instance() {
    return reinterpret_cast<const GetWorkflowRequest*>(
               &_GetWorkflowRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    200;

  friend void swap(GetWorkflowRequest& a, GetWorkflowRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetWorkflowRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetWorkflowRequest* New() const final {
    return CreateMaybeMessage<GetWorkflowRequest>(nullptr);
  }

  GetWorkflowRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetWorkflowRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetWorkflowRequest& from);
  void MergeFrom(const GetWorkflowRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetWorkflowRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.GetWorkflowRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorkflowIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
    kFavorClarifaiWorkflowsFieldNumber = 3,
  };
  // string workflow_id = 2;
  void clear_workflow_id();
  const std::string& workflow_id() const;
  void set_workflow_id(const std::string& value);
  void set_workflow_id(std::string&& value);
  void set_workflow_id(const char* value);
  void set_workflow_id(const char* value, size_t size);
  std::string* mutable_workflow_id();
  std::string* release_workflow_id();
  void set_allocated_workflow_id(std::string* workflow_id);
  private:
  const std::string& _internal_workflow_id() const;
  void _internal_set_workflow_id(const std::string& value);
  std::string* _internal_mutable_workflow_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // bool favor_clarifai_workflows = 3;
  void clear_favor_clarifai_workflows();
  bool favor_clarifai_workflows() const;
  void set_favor_clarifai_workflows(bool value);
  private:
  bool _internal_favor_clarifai_workflows() const;
  void _internal_set_favor_clarifai_workflows(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.GetWorkflowRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr workflow_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  bool favor_clarifai_workflows_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListWorkflowsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListWorkflowsRequest) */ {
 public:
  ListWorkflowsRequest();
  virtual ~ListWorkflowsRequest();

  ListWorkflowsRequest(const ListWorkflowsRequest& from);
  ListWorkflowsRequest(ListWorkflowsRequest&& from) noexcept
    : ListWorkflowsRequest() {
    *this = ::std::move(from);
  }

  inline ListWorkflowsRequest& operator=(const ListWorkflowsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListWorkflowsRequest& operator=(ListWorkflowsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListWorkflowsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListWorkflowsRequest* internal_default_instance() {
    return reinterpret_cast<const ListWorkflowsRequest*>(
               &_ListWorkflowsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    201;

  friend void swap(ListWorkflowsRequest& a, ListWorkflowsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListWorkflowsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListWorkflowsRequest* New() const final {
    return CreateMaybeMessage<ListWorkflowsRequest>(nullptr);
  }

  ListWorkflowsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListWorkflowsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListWorkflowsRequest& from);
  void MergeFrom(const ListWorkflowsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListWorkflowsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListWorkflowsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserAppIdFieldNumber = 1,
    kPageFieldNumber = 2,
    kPerPageFieldNumber = 3,
  };
  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // uint32 page = 2;
  void clear_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 page() const;
  void set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_page() const;
  void _internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 per_page = 3;
  void clear_per_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 per_page() const;
  void set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_per_page() const;
  void _internal_set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ListWorkflowsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 page_;
  ::PROTOBUF_NAMESPACE_ID::uint32 per_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListPublicWorkflowsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListPublicWorkflowsRequest) */ {
 public:
  ListPublicWorkflowsRequest();
  virtual ~ListPublicWorkflowsRequest();

  ListPublicWorkflowsRequest(const ListPublicWorkflowsRequest& from);
  ListPublicWorkflowsRequest(ListPublicWorkflowsRequest&& from) noexcept
    : ListPublicWorkflowsRequest() {
    *this = ::std::move(from);
  }

  inline ListPublicWorkflowsRequest& operator=(const ListPublicWorkflowsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListPublicWorkflowsRequest& operator=(ListPublicWorkflowsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListPublicWorkflowsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListPublicWorkflowsRequest* internal_default_instance() {
    return reinterpret_cast<const ListPublicWorkflowsRequest*>(
               &_ListPublicWorkflowsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    202;

  friend void swap(ListPublicWorkflowsRequest& a, ListPublicWorkflowsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListPublicWorkflowsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListPublicWorkflowsRequest* New() const final {
    return CreateMaybeMessage<ListPublicWorkflowsRequest>(nullptr);
  }

  ListPublicWorkflowsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListPublicWorkflowsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListPublicWorkflowsRequest& from);
  void MergeFrom(const ListPublicWorkflowsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListPublicWorkflowsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListPublicWorkflowsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPageFieldNumber = 1,
    kPerPageFieldNumber = 2,
  };
  // uint32 page = 1;
  void clear_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 page() const;
  void set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_page() const;
  void _internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 per_page = 2;
  void clear_per_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 per_page() const;
  void set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_per_page() const;
  void _internal_set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ListPublicWorkflowsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 page_;
  ::PROTOBUF_NAMESPACE_ID::uint32 per_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostWorkflowsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostWorkflowsRequest) */ {
 public:
  PostWorkflowsRequest();
  virtual ~PostWorkflowsRequest();

  PostWorkflowsRequest(const PostWorkflowsRequest& from);
  PostWorkflowsRequest(PostWorkflowsRequest&& from) noexcept
    : PostWorkflowsRequest() {
    *this = ::std::move(from);
  }

  inline PostWorkflowsRequest& operator=(const PostWorkflowsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostWorkflowsRequest& operator=(PostWorkflowsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostWorkflowsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostWorkflowsRequest* internal_default_instance() {
    return reinterpret_cast<const PostWorkflowsRequest*>(
               &_PostWorkflowsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    203;

  friend void swap(PostWorkflowsRequest& a, PostWorkflowsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostWorkflowsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostWorkflowsRequest* New() const final {
    return CreateMaybeMessage<PostWorkflowsRequest>(nullptr);
  }

  PostWorkflowsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostWorkflowsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostWorkflowsRequest& from);
  void MergeFrom(const PostWorkflowsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostWorkflowsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostWorkflowsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorkflowsFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.Workflow workflows = 2;
  int workflows_size() const;
  private:
  int _internal_workflows_size() const;
  public:
  void clear_workflows();
  ::clarifai::api::Workflow* mutable_workflows(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Workflow >*
      mutable_workflows();
  private:
  const ::clarifai::api::Workflow& _internal_workflows(int index) const;
  ::clarifai::api::Workflow* _internal_add_workflows();
  public:
  const ::clarifai::api::Workflow& workflows(int index) const;
  ::clarifai::api::Workflow* add_workflows();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Workflow >&
      workflows() const;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PostWorkflowsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Workflow > workflows_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PatchWorkflowsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PatchWorkflowsRequest) */ {
 public:
  PatchWorkflowsRequest();
  virtual ~PatchWorkflowsRequest();

  PatchWorkflowsRequest(const PatchWorkflowsRequest& from);
  PatchWorkflowsRequest(PatchWorkflowsRequest&& from) noexcept
    : PatchWorkflowsRequest() {
    *this = ::std::move(from);
  }

  inline PatchWorkflowsRequest& operator=(const PatchWorkflowsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatchWorkflowsRequest& operator=(PatchWorkflowsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PatchWorkflowsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PatchWorkflowsRequest* internal_default_instance() {
    return reinterpret_cast<const PatchWorkflowsRequest*>(
               &_PatchWorkflowsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    204;

  friend void swap(PatchWorkflowsRequest& a, PatchWorkflowsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PatchWorkflowsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PatchWorkflowsRequest* New() const final {
    return CreateMaybeMessage<PatchWorkflowsRequest>(nullptr);
  }

  PatchWorkflowsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PatchWorkflowsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PatchWorkflowsRequest& from);
  void MergeFrom(const PatchWorkflowsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatchWorkflowsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PatchWorkflowsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorkflowsFieldNumber = 2,
    kActionFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.Workflow workflows = 2;
  int workflows_size() const;
  private:
  int _internal_workflows_size() const;
  public:
  void clear_workflows();
  ::clarifai::api::Workflow* mutable_workflows(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Workflow >*
      mutable_workflows();
  private:
  const ::clarifai::api::Workflow& _internal_workflows(int index) const;
  ::clarifai::api::Workflow* _internal_add_workflows();
  public:
  const ::clarifai::api::Workflow& workflows(int index) const;
  ::clarifai::api::Workflow* add_workflows();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Workflow >&
      workflows() const;

  // string action = 3;
  void clear_action();
  const std::string& action() const;
  void set_action(const std::string& value);
  void set_action(std::string&& value);
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  std::string* mutable_action();
  std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PatchWorkflowsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Workflow > workflows_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteWorkflowRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.DeleteWorkflowRequest) */ {
 public:
  DeleteWorkflowRequest();
  virtual ~DeleteWorkflowRequest();

  DeleteWorkflowRequest(const DeleteWorkflowRequest& from);
  DeleteWorkflowRequest(DeleteWorkflowRequest&& from) noexcept
    : DeleteWorkflowRequest() {
    *this = ::std::move(from);
  }

  inline DeleteWorkflowRequest& operator=(const DeleteWorkflowRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteWorkflowRequest& operator=(DeleteWorkflowRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteWorkflowRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteWorkflowRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteWorkflowRequest*>(
               &_DeleteWorkflowRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    205;

  friend void swap(DeleteWorkflowRequest& a, DeleteWorkflowRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteWorkflowRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteWorkflowRequest* New() const final {
    return CreateMaybeMessage<DeleteWorkflowRequest>(nullptr);
  }

  DeleteWorkflowRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteWorkflowRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteWorkflowRequest& from);
  void MergeFrom(const DeleteWorkflowRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteWorkflowRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.DeleteWorkflowRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorkflowIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // string workflow_id = 2;
  void clear_workflow_id();
  const std::string& workflow_id() const;
  void set_workflow_id(const std::string& value);
  void set_workflow_id(std::string&& value);
  void set_workflow_id(const char* value);
  void set_workflow_id(const char* value, size_t size);
  std::string* mutable_workflow_id();
  std::string* release_workflow_id();
  void set_allocated_workflow_id(std::string* workflow_id);
  private:
  const std::string& _internal_workflow_id() const;
  void _internal_set_workflow_id(const std::string& value);
  std::string* _internal_mutable_workflow_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.DeleteWorkflowRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr workflow_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteWorkflowsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.DeleteWorkflowsRequest) */ {
 public:
  DeleteWorkflowsRequest();
  virtual ~DeleteWorkflowsRequest();

  DeleteWorkflowsRequest(const DeleteWorkflowsRequest& from);
  DeleteWorkflowsRequest(DeleteWorkflowsRequest&& from) noexcept
    : DeleteWorkflowsRequest() {
    *this = ::std::move(from);
  }

  inline DeleteWorkflowsRequest& operator=(const DeleteWorkflowsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteWorkflowsRequest& operator=(DeleteWorkflowsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteWorkflowsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteWorkflowsRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteWorkflowsRequest*>(
               &_DeleteWorkflowsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    206;

  friend void swap(DeleteWorkflowsRequest& a, DeleteWorkflowsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteWorkflowsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteWorkflowsRequest* New() const final {
    return CreateMaybeMessage<DeleteWorkflowsRequest>(nullptr);
  }

  DeleteWorkflowsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteWorkflowsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteWorkflowsRequest& from);
  void MergeFrom(const DeleteWorkflowsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteWorkflowsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.DeleteWorkflowsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
    kDeleteAllFieldNumber = 3,
  };
  // repeated string ids = 2;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  const std::string& ids(int index) const;
  std::string* mutable_ids(int index);
  void set_ids(int index, const std::string& value);
  void set_ids(int index, std::string&& value);
  void set_ids(int index, const char* value);
  void set_ids(int index, const char* value, size_t size);
  std::string* add_ids();
  void add_ids(const std::string& value);
  void add_ids(std::string&& value);
  void add_ids(const char* value);
  void add_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ids();
  private:
  const std::string& _internal_ids(int index) const;
  std::string* _internal_add_ids();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // bool delete_all = 3;
  void clear_delete_all();
  bool delete_all() const;
  void set_delete_all(bool value);
  private:
  bool _internal_delete_all() const;
  void _internal_set_delete_all(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.DeleteWorkflowsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ids_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  bool delete_all_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class SingleWorkflowResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.SingleWorkflowResponse) */ {
 public:
  SingleWorkflowResponse();
  virtual ~SingleWorkflowResponse();

  SingleWorkflowResponse(const SingleWorkflowResponse& from);
  SingleWorkflowResponse(SingleWorkflowResponse&& from) noexcept
    : SingleWorkflowResponse() {
    *this = ::std::move(from);
  }

  inline SingleWorkflowResponse& operator=(const SingleWorkflowResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleWorkflowResponse& operator=(SingleWorkflowResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SingleWorkflowResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SingleWorkflowResponse* internal_default_instance() {
    return reinterpret_cast<const SingleWorkflowResponse*>(
               &_SingleWorkflowResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    207;

  friend void swap(SingleWorkflowResponse& a, SingleWorkflowResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleWorkflowResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SingleWorkflowResponse* New() const final {
    return CreateMaybeMessage<SingleWorkflowResponse>(nullptr);
  }

  SingleWorkflowResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SingleWorkflowResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SingleWorkflowResponse& from);
  void MergeFrom(const SingleWorkflowResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleWorkflowResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.SingleWorkflowResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kWorkflowFieldNumber = 2,
  };
  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // .clarifai.api.Workflow workflow = 2;
  bool has_workflow() const;
  private:
  bool _internal_has_workflow() const;
  public:
  void clear_workflow();
  const ::clarifai::api::Workflow& workflow() const;
  ::clarifai::api::Workflow* release_workflow();
  ::clarifai::api::Workflow* mutable_workflow();
  void set_allocated_workflow(::clarifai::api::Workflow* workflow);
  private:
  const ::clarifai::api::Workflow& _internal_workflow() const;
  ::clarifai::api::Workflow* _internal_mutable_workflow();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.SingleWorkflowResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::status::Status* status_;
  ::clarifai::api::Workflow* workflow_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiWorkflowResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiWorkflowResponse) */ {
 public:
  MultiWorkflowResponse();
  virtual ~MultiWorkflowResponse();

  MultiWorkflowResponse(const MultiWorkflowResponse& from);
  MultiWorkflowResponse(MultiWorkflowResponse&& from) noexcept
    : MultiWorkflowResponse() {
    *this = ::std::move(from);
  }

  inline MultiWorkflowResponse& operator=(const MultiWorkflowResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiWorkflowResponse& operator=(MultiWorkflowResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiWorkflowResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiWorkflowResponse* internal_default_instance() {
    return reinterpret_cast<const MultiWorkflowResponse*>(
               &_MultiWorkflowResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    208;

  friend void swap(MultiWorkflowResponse& a, MultiWorkflowResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiWorkflowResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiWorkflowResponse* New() const final {
    return CreateMaybeMessage<MultiWorkflowResponse>(nullptr);
  }

  MultiWorkflowResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiWorkflowResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiWorkflowResponse& from);
  void MergeFrom(const MultiWorkflowResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiWorkflowResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiWorkflowResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorkflowsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.Workflow workflows = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int workflows_size() const;
  private:
  int _internal_workflows_size() const;
  public:
  void clear_workflows();
  ::clarifai::api::Workflow* mutable_workflows(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Workflow >*
      mutable_workflows();
  private:
  const ::clarifai::api::Workflow& _internal_workflows(int index) const;
  ::clarifai::api::Workflow* _internal_add_workflows();
  public:
  const ::clarifai::api::Workflow& workflows(int index) const;
  ::clarifai::api::Workflow* add_workflows();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Workflow >&
      workflows() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiWorkflowResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Workflow > workflows_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostWorkflowResultsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostWorkflowResultsRequest) */ {
 public:
  PostWorkflowResultsRequest();
  virtual ~PostWorkflowResultsRequest();

  PostWorkflowResultsRequest(const PostWorkflowResultsRequest& from);
  PostWorkflowResultsRequest(PostWorkflowResultsRequest&& from) noexcept
    : PostWorkflowResultsRequest() {
    *this = ::std::move(from);
  }

  inline PostWorkflowResultsRequest& operator=(const PostWorkflowResultsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostWorkflowResultsRequest& operator=(PostWorkflowResultsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostWorkflowResultsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostWorkflowResultsRequest* internal_default_instance() {
    return reinterpret_cast<const PostWorkflowResultsRequest*>(
               &_PostWorkflowResultsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    209;

  friend void swap(PostWorkflowResultsRequest& a, PostWorkflowResultsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostWorkflowResultsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostWorkflowResultsRequest* New() const final {
    return CreateMaybeMessage<PostWorkflowResultsRequest>(nullptr);
  }

  PostWorkflowResultsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostWorkflowResultsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostWorkflowResultsRequest& from);
  void MergeFrom(const PostWorkflowResultsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostWorkflowResultsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostWorkflowResultsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputsFieldNumber = 3,
    kWorkflowIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
    kOutputConfigFieldNumber = 4,
    kFavorClarifaiWorkflowsFieldNumber = 5,
  };
  // repeated .clarifai.api.Input inputs = 3;
  int inputs_size() const;
  private:
  int _internal_inputs_size() const;
  public:
  void clear_inputs();
  ::clarifai::api::Input* mutable_inputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input >*
      mutable_inputs();
  private:
  const ::clarifai::api::Input& _internal_inputs(int index) const;
  ::clarifai::api::Input* _internal_add_inputs();
  public:
  const ::clarifai::api::Input& inputs(int index) const;
  ::clarifai::api::Input* add_inputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input >&
      inputs() const;

  // string workflow_id = 2;
  void clear_workflow_id();
  const std::string& workflow_id() const;
  void set_workflow_id(const std::string& value);
  void set_workflow_id(std::string&& value);
  void set_workflow_id(const char* value);
  void set_workflow_id(const char* value, size_t size);
  std::string* mutable_workflow_id();
  std::string* release_workflow_id();
  void set_allocated_workflow_id(std::string* workflow_id);
  private:
  const std::string& _internal_workflow_id() const;
  void _internal_set_workflow_id(const std::string& value);
  std::string* _internal_mutable_workflow_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // .clarifai.api.OutputConfig output_config = 4;
  bool has_output_config() const;
  private:
  bool _internal_has_output_config() const;
  public:
  void clear_output_config();
  const ::clarifai::api::OutputConfig& output_config() const;
  ::clarifai::api::OutputConfig* release_output_config();
  ::clarifai::api::OutputConfig* mutable_output_config();
  void set_allocated_output_config(::clarifai::api::OutputConfig* output_config);
  private:
  const ::clarifai::api::OutputConfig& _internal_output_config() const;
  ::clarifai::api::OutputConfig* _internal_mutable_output_config();
  public:

  // bool favor_clarifai_workflows = 5;
  void clear_favor_clarifai_workflows();
  bool favor_clarifai_workflows() const;
  void set_favor_clarifai_workflows(bool value);
  private:
  bool _internal_favor_clarifai_workflows() const;
  void _internal_set_favor_clarifai_workflows(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PostWorkflowResultsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input > inputs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr workflow_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::clarifai::api::OutputConfig* output_config_;
  bool favor_clarifai_workflows_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostWorkflowResultsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostWorkflowResultsResponse) */ {
 public:
  PostWorkflowResultsResponse();
  virtual ~PostWorkflowResultsResponse();

  PostWorkflowResultsResponse(const PostWorkflowResultsResponse& from);
  PostWorkflowResultsResponse(PostWorkflowResultsResponse&& from) noexcept
    : PostWorkflowResultsResponse() {
    *this = ::std::move(from);
  }

  inline PostWorkflowResultsResponse& operator=(const PostWorkflowResultsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostWorkflowResultsResponse& operator=(PostWorkflowResultsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostWorkflowResultsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostWorkflowResultsResponse* internal_default_instance() {
    return reinterpret_cast<const PostWorkflowResultsResponse*>(
               &_PostWorkflowResultsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    210;

  friend void swap(PostWorkflowResultsResponse& a, PostWorkflowResultsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PostWorkflowResultsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostWorkflowResultsResponse* New() const final {
    return CreateMaybeMessage<PostWorkflowResultsResponse>(nullptr);
  }

  PostWorkflowResultsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostWorkflowResultsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostWorkflowResultsResponse& from);
  void MergeFrom(const PostWorkflowResultsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostWorkflowResultsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostWorkflowResultsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 3,
    kStatusFieldNumber = 1,
    kWorkflowFieldNumber = 2,
  };
  // repeated .clarifai.api.WorkflowResult results = 3;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::clarifai::api::WorkflowResult* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::WorkflowResult >*
      mutable_results();
  private:
  const ::clarifai::api::WorkflowResult& _internal_results(int index) const;
  ::clarifai::api::WorkflowResult* _internal_add_results();
  public:
  const ::clarifai::api::WorkflowResult& results(int index) const;
  ::clarifai::api::WorkflowResult* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::WorkflowResult >&
      results() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // .clarifai.api.Workflow workflow = 2;
  bool has_workflow() const;
  private:
  bool _internal_has_workflow() const;
  public:
  void clear_workflow();
  const ::clarifai::api::Workflow& workflow() const;
  ::clarifai::api::Workflow* release_workflow();
  ::clarifai::api::Workflow* mutable_workflow();
  void set_allocated_workflow(::clarifai::api::Workflow* workflow);
  private:
  const ::clarifai::api::Workflow& _internal_workflow() const;
  ::clarifai::api::Workflow* _internal_mutable_workflow();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PostWorkflowResultsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::WorkflowResult > results_;
  ::clarifai::api::status::Status* status_;
  ::clarifai::api::Workflow* workflow_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostWorkflowResultsSimilarityRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostWorkflowResultsSimilarityRequest) */ {
 public:
  PostWorkflowResultsSimilarityRequest();
  virtual ~PostWorkflowResultsSimilarityRequest();

  PostWorkflowResultsSimilarityRequest(const PostWorkflowResultsSimilarityRequest& from);
  PostWorkflowResultsSimilarityRequest(PostWorkflowResultsSimilarityRequest&& from) noexcept
    : PostWorkflowResultsSimilarityRequest() {
    *this = ::std::move(from);
  }

  inline PostWorkflowResultsSimilarityRequest& operator=(const PostWorkflowResultsSimilarityRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostWorkflowResultsSimilarityRequest& operator=(PostWorkflowResultsSimilarityRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostWorkflowResultsSimilarityRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostWorkflowResultsSimilarityRequest* internal_default_instance() {
    return reinterpret_cast<const PostWorkflowResultsSimilarityRequest*>(
               &_PostWorkflowResultsSimilarityRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    211;

  friend void swap(PostWorkflowResultsSimilarityRequest& a, PostWorkflowResultsSimilarityRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostWorkflowResultsSimilarityRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostWorkflowResultsSimilarityRequest* New() const final {
    return CreateMaybeMessage<PostWorkflowResultsSimilarityRequest>(nullptr);
  }

  PostWorkflowResultsSimilarityRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostWorkflowResultsSimilarityRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostWorkflowResultsSimilarityRequest& from);
  void MergeFrom(const PostWorkflowResultsSimilarityRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostWorkflowResultsSimilarityRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostWorkflowResultsSimilarityRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProbeInputsFieldNumber = 4,
    kPoolInputsFieldNumber = 5,
    kWorkflowIdFieldNumber = 2,
    kModelVersionIdFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
    kFavorClarifaiWorkflowsFieldNumber = 6,
  };
  // repeated .clarifai.api.Input probe_inputs = 4;
  int probe_inputs_size() const;
  private:
  int _internal_probe_inputs_size() const;
  public:
  void clear_probe_inputs();
  ::clarifai::api::Input* mutable_probe_inputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input >*
      mutable_probe_inputs();
  private:
  const ::clarifai::api::Input& _internal_probe_inputs(int index) const;
  ::clarifai::api::Input* _internal_add_probe_inputs();
  public:
  const ::clarifai::api::Input& probe_inputs(int index) const;
  ::clarifai::api::Input* add_probe_inputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input >&
      probe_inputs() const;

  // repeated .clarifai.api.Input pool_inputs = 5;
  int pool_inputs_size() const;
  private:
  int _internal_pool_inputs_size() const;
  public:
  void clear_pool_inputs();
  ::clarifai::api::Input* mutable_pool_inputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input >*
      mutable_pool_inputs();
  private:
  const ::clarifai::api::Input& _internal_pool_inputs(int index) const;
  ::clarifai::api::Input* _internal_add_pool_inputs();
  public:
  const ::clarifai::api::Input& pool_inputs(int index) const;
  ::clarifai::api::Input* add_pool_inputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input >&
      pool_inputs() const;

  // string workflow_id = 2;
  void clear_workflow_id();
  const std::string& workflow_id() const;
  void set_workflow_id(const std::string& value);
  void set_workflow_id(std::string&& value);
  void set_workflow_id(const char* value);
  void set_workflow_id(const char* value, size_t size);
  std::string* mutable_workflow_id();
  std::string* release_workflow_id();
  void set_allocated_workflow_id(std::string* workflow_id);
  private:
  const std::string& _internal_workflow_id() const;
  void _internal_set_workflow_id(const std::string& value);
  std::string* _internal_mutable_workflow_id();
  public:

  // string model_version_id = 3;
  void clear_model_version_id();
  const std::string& model_version_id() const;
  void set_model_version_id(const std::string& value);
  void set_model_version_id(std::string&& value);
  void set_model_version_id(const char* value);
  void set_model_version_id(const char* value, size_t size);
  std::string* mutable_model_version_id();
  std::string* release_model_version_id();
  void set_allocated_model_version_id(std::string* model_version_id);
  private:
  const std::string& _internal_model_version_id() const;
  void _internal_set_model_version_id(const std::string& value);
  std::string* _internal_mutable_model_version_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // bool favor_clarifai_workflows = 6;
  void clear_favor_clarifai_workflows();
  bool favor_clarifai_workflows() const;
  void set_favor_clarifai_workflows(bool value);
  private:
  bool _internal_favor_clarifai_workflows() const;
  void _internal_set_favor_clarifai_workflows(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PostWorkflowResultsSimilarityRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input > probe_inputs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input > pool_inputs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr workflow_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_version_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  bool favor_clarifai_workflows_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostWorkflowResultsSimilarityResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostWorkflowResultsSimilarityResponse) */ {
 public:
  PostWorkflowResultsSimilarityResponse();
  virtual ~PostWorkflowResultsSimilarityResponse();

  PostWorkflowResultsSimilarityResponse(const PostWorkflowResultsSimilarityResponse& from);
  PostWorkflowResultsSimilarityResponse(PostWorkflowResultsSimilarityResponse&& from) noexcept
    : PostWorkflowResultsSimilarityResponse() {
    *this = ::std::move(from);
  }

  inline PostWorkflowResultsSimilarityResponse& operator=(const PostWorkflowResultsSimilarityResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostWorkflowResultsSimilarityResponse& operator=(PostWorkflowResultsSimilarityResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostWorkflowResultsSimilarityResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostWorkflowResultsSimilarityResponse* internal_default_instance() {
    return reinterpret_cast<const PostWorkflowResultsSimilarityResponse*>(
               &_PostWorkflowResultsSimilarityResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    212;

  friend void swap(PostWorkflowResultsSimilarityResponse& a, PostWorkflowResultsSimilarityResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PostWorkflowResultsSimilarityResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostWorkflowResultsSimilarityResponse* New() const final {
    return CreateMaybeMessage<PostWorkflowResultsSimilarityResponse>(nullptr);
  }

  PostWorkflowResultsSimilarityResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostWorkflowResultsSimilarityResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostWorkflowResultsSimilarityResponse& from);
  void MergeFrom(const PostWorkflowResultsSimilarityResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostWorkflowResultsSimilarityResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostWorkflowResultsSimilarityResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.WorkflowResultsSimilarity results = 2;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::clarifai::api::WorkflowResultsSimilarity* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::WorkflowResultsSimilarity >*
      mutable_results();
  private:
  const ::clarifai::api::WorkflowResultsSimilarity& _internal_results(int index) const;
  ::clarifai::api::WorkflowResultsSimilarity* _internal_add_results();
  public:
  const ::clarifai::api::WorkflowResultsSimilarity& results(int index) const;
  ::clarifai::api::WorkflowResultsSimilarity* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::WorkflowResultsSimilarity >&
      results() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PostWorkflowResultsSimilarityResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::WorkflowResultsSimilarity > results_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class TrainingTemplate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.TrainingTemplate) */ {
 public:
  TrainingTemplate();
  virtual ~TrainingTemplate();

  TrainingTemplate(const TrainingTemplate& from);
  TrainingTemplate(TrainingTemplate&& from) noexcept
    : TrainingTemplate() {
    *this = ::std::move(from);
  }

  inline TrainingTemplate& operator=(const TrainingTemplate& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrainingTemplate& operator=(TrainingTemplate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrainingTemplate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrainingTemplate* internal_default_instance() {
    return reinterpret_cast<const TrainingTemplate*>(
               &_TrainingTemplate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    213;

  friend void swap(TrainingTemplate& a, TrainingTemplate& b) {
    a.Swap(&b);
  }
  inline void Swap(TrainingTemplate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrainingTemplate* New() const final {
    return CreateMaybeMessage<TrainingTemplate>(nullptr);
  }

  TrainingTemplate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrainingTemplate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrainingTemplate& from);
  void MergeFrom(const TrainingTemplate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrainingTemplate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.TrainingTemplate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDocStringFieldNumber = 3,
    kModelTypeFieldNumber = 4,
    kDefaultArgsFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string doc_string = 3;
  void clear_doc_string();
  const std::string& doc_string() const;
  void set_doc_string(const std::string& value);
  void set_doc_string(std::string&& value);
  void set_doc_string(const char* value);
  void set_doc_string(const char* value, size_t size);
  std::string* mutable_doc_string();
  std::string* release_doc_string();
  void set_allocated_doc_string(std::string* doc_string);
  private:
  const std::string& _internal_doc_string() const;
  void _internal_set_doc_string(const std::string& value);
  std::string* _internal_mutable_doc_string();
  public:

  // string model_type = 4;
  void clear_model_type();
  const std::string& model_type() const;
  void set_model_type(const std::string& value);
  void set_model_type(std::string&& value);
  void set_model_type(const char* value);
  void set_model_type(const char* value, size_t size);
  std::string* mutable_model_type();
  std::string* release_model_type();
  void set_allocated_model_type(std::string* model_type);
  private:
  const std::string& _internal_model_type() const;
  void _internal_set_model_type(const std::string& value);
  std::string* _internal_mutable_model_type();
  public:

  // .google.protobuf.Struct default_args = 2;
  bool has_default_args() const;
  private:
  bool _internal_has_default_args() const;
  public:
  void clear_default_args();
  const PROTOBUF_NAMESPACE_ID::Struct& default_args() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_default_args();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_default_args();
  void set_allocated_default_args(PROTOBUF_NAMESPACE_ID::Struct* default_args);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_default_args() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_default_args();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.TrainingTemplate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr doc_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_type_;
  PROTOBUF_NAMESPACE_ID::Struct* default_args_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListTrainingTemplatesRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListTrainingTemplatesRequest) */ {
 public:
  ListTrainingTemplatesRequest();
  virtual ~ListTrainingTemplatesRequest();

  ListTrainingTemplatesRequest(const ListTrainingTemplatesRequest& from);
  ListTrainingTemplatesRequest(ListTrainingTemplatesRequest&& from) noexcept
    : ListTrainingTemplatesRequest() {
    *this = ::std::move(from);
  }

  inline ListTrainingTemplatesRequest& operator=(const ListTrainingTemplatesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListTrainingTemplatesRequest& operator=(ListTrainingTemplatesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListTrainingTemplatesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListTrainingTemplatesRequest* internal_default_instance() {
    return reinterpret_cast<const ListTrainingTemplatesRequest*>(
               &_ListTrainingTemplatesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    214;

  friend void swap(ListTrainingTemplatesRequest& a, ListTrainingTemplatesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListTrainingTemplatesRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListTrainingTemplatesRequest* New() const final {
    return CreateMaybeMessage<ListTrainingTemplatesRequest>(nullptr);
  }

  ListTrainingTemplatesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListTrainingTemplatesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListTrainingTemplatesRequest& from);
  void MergeFrom(const ListTrainingTemplatesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListTrainingTemplatesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListTrainingTemplatesRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserAppIdFieldNumber = 1,
  };
  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ListTrainingTemplatesRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiTrainingTemplatesResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiTrainingTemplatesResponse) */ {
 public:
  MultiTrainingTemplatesResponse();
  virtual ~MultiTrainingTemplatesResponse();

  MultiTrainingTemplatesResponse(const MultiTrainingTemplatesResponse& from);
  MultiTrainingTemplatesResponse(MultiTrainingTemplatesResponse&& from) noexcept
    : MultiTrainingTemplatesResponse() {
    *this = ::std::move(from);
  }

  inline MultiTrainingTemplatesResponse& operator=(const MultiTrainingTemplatesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiTrainingTemplatesResponse& operator=(MultiTrainingTemplatesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiTrainingTemplatesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiTrainingTemplatesResponse* internal_default_instance() {
    return reinterpret_cast<const MultiTrainingTemplatesResponse*>(
               &_MultiTrainingTemplatesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    215;

  friend void swap(MultiTrainingTemplatesResponse& a, MultiTrainingTemplatesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiTrainingTemplatesResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiTrainingTemplatesResponse* New() const final {
    return CreateMaybeMessage<MultiTrainingTemplatesResponse>(nullptr);
  }

  MultiTrainingTemplatesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiTrainingTemplatesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiTrainingTemplatesResponse& from);
  void MergeFrom(const MultiTrainingTemplatesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiTrainingTemplatesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiTrainingTemplatesResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrainingTemplateFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.TrainingTemplate training_template = 2;
  int training_template_size() const;
  private:
  int _internal_training_template_size() const;
  public:
  void clear_training_template();
  ::clarifai::api::TrainingTemplate* mutable_training_template(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::TrainingTemplate >*
      mutable_training_template();
  private:
  const ::clarifai::api::TrainingTemplate& _internal_training_template(int index) const;
  ::clarifai::api::TrainingTemplate* _internal_add_training_template();
  public:
  const ::clarifai::api::TrainingTemplate& training_template(int index) const;
  ::clarifai::api::TrainingTemplate* add_training_template();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::TrainingTemplate >&
      training_template() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiTrainingTemplatesResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::TrainingTemplate > training_template_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostAppDuplicationsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostAppDuplicationsRequest) */ {
 public:
  PostAppDuplicationsRequest();
  virtual ~PostAppDuplicationsRequest();

  PostAppDuplicationsRequest(const PostAppDuplicationsRequest& from);
  PostAppDuplicationsRequest(PostAppDuplicationsRequest&& from) noexcept
    : PostAppDuplicationsRequest() {
    *this = ::std::move(from);
  }

  inline PostAppDuplicationsRequest& operator=(const PostAppDuplicationsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostAppDuplicationsRequest& operator=(PostAppDuplicationsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostAppDuplicationsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostAppDuplicationsRequest* internal_default_instance() {
    return reinterpret_cast<const PostAppDuplicationsRequest*>(
               &_PostAppDuplicationsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    216;

  friend void swap(PostAppDuplicationsRequest& a, PostAppDuplicationsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostAppDuplicationsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostAppDuplicationsRequest* New() const final {
    return CreateMaybeMessage<PostAppDuplicationsRequest>(nullptr);
  }

  PostAppDuplicationsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostAppDuplicationsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostAppDuplicationsRequest& from);
  void MergeFrom(const PostAppDuplicationsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostAppDuplicationsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostAppDuplicationsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppDuplicationsFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.AppDuplication app_duplications = 2;
  int app_duplications_size() const;
  private:
  int _internal_app_duplications_size() const;
  public:
  void clear_app_duplications();
  ::clarifai::api::AppDuplication* mutable_app_duplications(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::AppDuplication >*
      mutable_app_duplications();
  private:
  const ::clarifai::api::AppDuplication& _internal_app_duplications(int index) const;
  ::clarifai::api::AppDuplication* _internal_add_app_duplications();
  public:
  const ::clarifai::api::AppDuplication& app_duplications(int index) const;
  ::clarifai::api::AppDuplication* add_app_duplications();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::AppDuplication >&
      app_duplications() const;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PostAppDuplicationsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::AppDuplication > app_duplications_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class GetAppDuplicationRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.GetAppDuplicationRequest) */ {
 public:
  GetAppDuplicationRequest();
  virtual ~GetAppDuplicationRequest();

  GetAppDuplicationRequest(const GetAppDuplicationRequest& from);
  GetAppDuplicationRequest(GetAppDuplicationRequest&& from) noexcept
    : GetAppDuplicationRequest() {
    *this = ::std::move(from);
  }

  inline GetAppDuplicationRequest& operator=(const GetAppDuplicationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAppDuplicationRequest& operator=(GetAppDuplicationRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAppDuplicationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAppDuplicationRequest* internal_default_instance() {
    return reinterpret_cast<const GetAppDuplicationRequest*>(
               &_GetAppDuplicationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    217;

  friend void swap(GetAppDuplicationRequest& a, GetAppDuplicationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAppDuplicationRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAppDuplicationRequest* New() const final {
    return CreateMaybeMessage<GetAppDuplicationRequest>(nullptr);
  }

  GetAppDuplicationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAppDuplicationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAppDuplicationRequest& from);
  void MergeFrom(const GetAppDuplicationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAppDuplicationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.GetAppDuplicationRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppDuplicationIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // string app_duplication_id = 2;
  void clear_app_duplication_id();
  const std::string& app_duplication_id() const;
  void set_app_duplication_id(const std::string& value);
  void set_app_duplication_id(std::string&& value);
  void set_app_duplication_id(const char* value);
  void set_app_duplication_id(const char* value, size_t size);
  std::string* mutable_app_duplication_id();
  std::string* release_app_duplication_id();
  void set_allocated_app_duplication_id(std::string* app_duplication_id);
  private:
  const std::string& _internal_app_duplication_id() const;
  void _internal_set_app_duplication_id(const std::string& value);
  std::string* _internal_mutable_app_duplication_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.GetAppDuplicationRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_duplication_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListAppDuplicationsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListAppDuplicationsRequest) */ {
 public:
  ListAppDuplicationsRequest();
  virtual ~ListAppDuplicationsRequest();

  ListAppDuplicationsRequest(const ListAppDuplicationsRequest& from);
  ListAppDuplicationsRequest(ListAppDuplicationsRequest&& from) noexcept
    : ListAppDuplicationsRequest() {
    *this = ::std::move(from);
  }

  inline ListAppDuplicationsRequest& operator=(const ListAppDuplicationsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListAppDuplicationsRequest& operator=(ListAppDuplicationsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListAppDuplicationsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListAppDuplicationsRequest* internal_default_instance() {
    return reinterpret_cast<const ListAppDuplicationsRequest*>(
               &_ListAppDuplicationsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    218;

  friend void swap(ListAppDuplicationsRequest& a, ListAppDuplicationsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListAppDuplicationsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListAppDuplicationsRequest* New() const final {
    return CreateMaybeMessage<ListAppDuplicationsRequest>(nullptr);
  }

  ListAppDuplicationsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListAppDuplicationsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListAppDuplicationsRequest& from);
  void MergeFrom(const ListAppDuplicationsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListAppDuplicationsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListAppDuplicationsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserAppIdFieldNumber = 1,
  };
  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ListAppDuplicationsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiAppDuplicationsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiAppDuplicationsResponse) */ {
 public:
  MultiAppDuplicationsResponse();
  virtual ~MultiAppDuplicationsResponse();

  MultiAppDuplicationsResponse(const MultiAppDuplicationsResponse& from);
  MultiAppDuplicationsResponse(MultiAppDuplicationsResponse&& from) noexcept
    : MultiAppDuplicationsResponse() {
    *this = ::std::move(from);
  }

  inline MultiAppDuplicationsResponse& operator=(const MultiAppDuplicationsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiAppDuplicationsResponse& operator=(MultiAppDuplicationsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiAppDuplicationsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiAppDuplicationsResponse* internal_default_instance() {
    return reinterpret_cast<const MultiAppDuplicationsResponse*>(
               &_MultiAppDuplicationsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    219;

  friend void swap(MultiAppDuplicationsResponse& a, MultiAppDuplicationsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiAppDuplicationsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiAppDuplicationsResponse* New() const final {
    return CreateMaybeMessage<MultiAppDuplicationsResponse>(nullptr);
  }

  MultiAppDuplicationsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiAppDuplicationsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiAppDuplicationsResponse& from);
  void MergeFrom(const MultiAppDuplicationsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiAppDuplicationsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiAppDuplicationsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppDuplicationsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.AppDuplication app_duplications = 2;
  int app_duplications_size() const;
  private:
  int _internal_app_duplications_size() const;
  public:
  void clear_app_duplications();
  ::clarifai::api::AppDuplication* mutable_app_duplications(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::AppDuplication >*
      mutable_app_duplications();
  private:
  const ::clarifai::api::AppDuplication& _internal_app_duplications(int index) const;
  ::clarifai::api::AppDuplication* _internal_add_app_duplications();
  public:
  const ::clarifai::api::AppDuplication& app_duplications(int index) const;
  ::clarifai::api::AppDuplication* add_app_duplications();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::AppDuplication >&
      app_duplications() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiAppDuplicationsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::AppDuplication > app_duplications_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class SingleAppDuplicationResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.SingleAppDuplicationResponse) */ {
 public:
  SingleAppDuplicationResponse();
  virtual ~SingleAppDuplicationResponse();

  SingleAppDuplicationResponse(const SingleAppDuplicationResponse& from);
  SingleAppDuplicationResponse(SingleAppDuplicationResponse&& from) noexcept
    : SingleAppDuplicationResponse() {
    *this = ::std::move(from);
  }

  inline SingleAppDuplicationResponse& operator=(const SingleAppDuplicationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleAppDuplicationResponse& operator=(SingleAppDuplicationResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SingleAppDuplicationResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SingleAppDuplicationResponse* internal_default_instance() {
    return reinterpret_cast<const SingleAppDuplicationResponse*>(
               &_SingleAppDuplicationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    220;

  friend void swap(SingleAppDuplicationResponse& a, SingleAppDuplicationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleAppDuplicationResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SingleAppDuplicationResponse* New() const final {
    return CreateMaybeMessage<SingleAppDuplicationResponse>(nullptr);
  }

  SingleAppDuplicationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SingleAppDuplicationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SingleAppDuplicationResponse& from);
  void MergeFrom(const SingleAppDuplicationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleAppDuplicationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.SingleAppDuplicationResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kAppDuplicationFieldNumber = 2,
  };
  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // .clarifai.api.AppDuplication app_duplication = 2;
  bool has_app_duplication() const;
  private:
  bool _internal_has_app_duplication() const;
  public:
  void clear_app_duplication();
  const ::clarifai::api::AppDuplication& app_duplication() const;
  ::clarifai::api::AppDuplication* release_app_duplication();
  ::clarifai::api::AppDuplication* mutable_app_duplication();
  void set_allocated_app_duplication(::clarifai::api::AppDuplication* app_duplication);
  private:
  const ::clarifai::api::AppDuplication& _internal_app_duplication() const;
  ::clarifai::api::AppDuplication* _internal_mutable_app_duplication();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.SingleAppDuplicationResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::status::Status* status_;
  ::clarifai::api::AppDuplication* app_duplication_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostTasksRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostTasksRequest) */ {
 public:
  PostTasksRequest();
  virtual ~PostTasksRequest();

  PostTasksRequest(const PostTasksRequest& from);
  PostTasksRequest(PostTasksRequest&& from) noexcept
    : PostTasksRequest() {
    *this = ::std::move(from);
  }

  inline PostTasksRequest& operator=(const PostTasksRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostTasksRequest& operator=(PostTasksRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostTasksRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostTasksRequest* internal_default_instance() {
    return reinterpret_cast<const PostTasksRequest*>(
               &_PostTasksRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    221;

  friend void swap(PostTasksRequest& a, PostTasksRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostTasksRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostTasksRequest* New() const final {
    return CreateMaybeMessage<PostTasksRequest>(nullptr);
  }

  PostTasksRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostTasksRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostTasksRequest& from);
  void MergeFrom(const PostTasksRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostTasksRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostTasksRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTasksFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.Task tasks = 2;
  int tasks_size() const;
  private:
  int _internal_tasks_size() const;
  public:
  void clear_tasks();
  ::clarifai::api::Task* mutable_tasks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Task >*
      mutable_tasks();
  private:
  const ::clarifai::api::Task& _internal_tasks(int index) const;
  ::clarifai::api::Task* _internal_add_tasks();
  public:
  const ::clarifai::api::Task& tasks(int index) const;
  ::clarifai::api::Task* add_tasks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Task >&
      tasks() const;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PostTasksRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Task > tasks_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class GetTaskRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.GetTaskRequest) */ {
 public:
  GetTaskRequest();
  virtual ~GetTaskRequest();

  GetTaskRequest(const GetTaskRequest& from);
  GetTaskRequest(GetTaskRequest&& from) noexcept
    : GetTaskRequest() {
    *this = ::std::move(from);
  }

  inline GetTaskRequest& operator=(const GetTaskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTaskRequest& operator=(GetTaskRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTaskRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTaskRequest* internal_default_instance() {
    return reinterpret_cast<const GetTaskRequest*>(
               &_GetTaskRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    222;

  friend void swap(GetTaskRequest& a, GetTaskRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTaskRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTaskRequest* New() const final {
    return CreateMaybeMessage<GetTaskRequest>(nullptr);
  }

  GetTaskRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTaskRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTaskRequest& from);
  void MergeFrom(const GetTaskRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTaskRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.GetTaskRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // string task_id = 2;
  void clear_task_id();
  const std::string& task_id() const;
  void set_task_id(const std::string& value);
  void set_task_id(std::string&& value);
  void set_task_id(const char* value);
  void set_task_id(const char* value, size_t size);
  std::string* mutable_task_id();
  std::string* release_task_id();
  void set_allocated_task_id(std::string* task_id);
  private:
  const std::string& _internal_task_id() const;
  void _internal_set_task_id(const std::string& value);
  std::string* _internal_mutable_task_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.GetTaskRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListTasksRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListTasksRequest) */ {
 public:
  ListTasksRequest();
  virtual ~ListTasksRequest();

  ListTasksRequest(const ListTasksRequest& from);
  ListTasksRequest(ListTasksRequest&& from) noexcept
    : ListTasksRequest() {
    *this = ::std::move(from);
  }

  inline ListTasksRequest& operator=(const ListTasksRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListTasksRequest& operator=(ListTasksRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListTasksRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListTasksRequest* internal_default_instance() {
    return reinterpret_cast<const ListTasksRequest*>(
               &_ListTasksRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    223;

  friend void swap(ListTasksRequest& a, ListTasksRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListTasksRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListTasksRequest* New() const final {
    return CreateMaybeMessage<ListTasksRequest>(nullptr);
  }

  ListTasksRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListTasksRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListTasksRequest& from);
  void MergeFrom(const ListTasksRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListTasksRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListTasksRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserAppIdFieldNumber = 1,
    kPageFieldNumber = 2,
    kPerPageFieldNumber = 3,
  };
  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // uint32 page = 2;
  void clear_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 page() const;
  void set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_page() const;
  void _internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 per_page = 3;
  void clear_per_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 per_page() const;
  void set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_per_page() const;
  void _internal_set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ListTasksRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 page_;
  ::PROTOBUF_NAMESPACE_ID::uint32 per_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PatchTasksRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PatchTasksRequest) */ {
 public:
  PatchTasksRequest();
  virtual ~PatchTasksRequest();

  PatchTasksRequest(const PatchTasksRequest& from);
  PatchTasksRequest(PatchTasksRequest&& from) noexcept
    : PatchTasksRequest() {
    *this = ::std::move(from);
  }

  inline PatchTasksRequest& operator=(const PatchTasksRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatchTasksRequest& operator=(PatchTasksRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PatchTasksRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PatchTasksRequest* internal_default_instance() {
    return reinterpret_cast<const PatchTasksRequest*>(
               &_PatchTasksRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    224;

  friend void swap(PatchTasksRequest& a, PatchTasksRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PatchTasksRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PatchTasksRequest* New() const final {
    return CreateMaybeMessage<PatchTasksRequest>(nullptr);
  }

  PatchTasksRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PatchTasksRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PatchTasksRequest& from);
  void MergeFrom(const PatchTasksRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatchTasksRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PatchTasksRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTasksFieldNumber = 2,
    kActionFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.Task tasks = 2;
  int tasks_size() const;
  private:
  int _internal_tasks_size() const;
  public:
  void clear_tasks();
  ::clarifai::api::Task* mutable_tasks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Task >*
      mutable_tasks();
  private:
  const ::clarifai::api::Task& _internal_tasks(int index) const;
  ::clarifai::api::Task* _internal_add_tasks();
  public:
  const ::clarifai::api::Task& tasks(int index) const;
  ::clarifai::api::Task* add_tasks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Task >&
      tasks() const;

  // string action = 3;
  void clear_action();
  const std::string& action() const;
  void set_action(const std::string& value);
  void set_action(std::string&& value);
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  std::string* mutable_action();
  std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PatchTasksRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Task > tasks_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteTasksRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.DeleteTasksRequest) */ {
 public:
  DeleteTasksRequest();
  virtual ~DeleteTasksRequest();

  DeleteTasksRequest(const DeleteTasksRequest& from);
  DeleteTasksRequest(DeleteTasksRequest&& from) noexcept
    : DeleteTasksRequest() {
    *this = ::std::move(from);
  }

  inline DeleteTasksRequest& operator=(const DeleteTasksRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteTasksRequest& operator=(DeleteTasksRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteTasksRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteTasksRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteTasksRequest*>(
               &_DeleteTasksRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    225;

  friend void swap(DeleteTasksRequest& a, DeleteTasksRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteTasksRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteTasksRequest* New() const final {
    return CreateMaybeMessage<DeleteTasksRequest>(nullptr);
  }

  DeleteTasksRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteTasksRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteTasksRequest& from);
  void MergeFrom(const DeleteTasksRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteTasksRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.DeleteTasksRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // repeated string ids = 2;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  const std::string& ids(int index) const;
  std::string* mutable_ids(int index);
  void set_ids(int index, const std::string& value);
  void set_ids(int index, std::string&& value);
  void set_ids(int index, const char* value);
  void set_ids(int index, const char* value, size_t size);
  std::string* add_ids();
  void add_ids(const std::string& value);
  void add_ids(std::string&& value);
  void add_ids(const char* value);
  void add_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ids();
  private:
  const std::string& _internal_ids(int index) const;
  std::string* _internal_add_ids();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.DeleteTasksRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ids_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiTaskResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiTaskResponse) */ {
 public:
  MultiTaskResponse();
  virtual ~MultiTaskResponse();

  MultiTaskResponse(const MultiTaskResponse& from);
  MultiTaskResponse(MultiTaskResponse&& from) noexcept
    : MultiTaskResponse() {
    *this = ::std::move(from);
  }

  inline MultiTaskResponse& operator=(const MultiTaskResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiTaskResponse& operator=(MultiTaskResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiTaskResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiTaskResponse* internal_default_instance() {
    return reinterpret_cast<const MultiTaskResponse*>(
               &_MultiTaskResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    226;

  friend void swap(MultiTaskResponse& a, MultiTaskResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiTaskResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiTaskResponse* New() const final {
    return CreateMaybeMessage<MultiTaskResponse>(nullptr);
  }

  MultiTaskResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiTaskResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiTaskResponse& from);
  void MergeFrom(const MultiTaskResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiTaskResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiTaskResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTasksFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.Task tasks = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int tasks_size() const;
  private:
  int _internal_tasks_size() const;
  public:
  void clear_tasks();
  ::clarifai::api::Task* mutable_tasks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Task >*
      mutable_tasks();
  private:
  const ::clarifai::api::Task& _internal_tasks(int index) const;
  ::clarifai::api::Task* _internal_add_tasks();
  public:
  const ::clarifai::api::Task& tasks(int index) const;
  ::clarifai::api::Task* add_tasks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Task >&
      tasks() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiTaskResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Task > tasks_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class SingleTaskResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.SingleTaskResponse) */ {
 public:
  SingleTaskResponse();
  virtual ~SingleTaskResponse();

  SingleTaskResponse(const SingleTaskResponse& from);
  SingleTaskResponse(SingleTaskResponse&& from) noexcept
    : SingleTaskResponse() {
    *this = ::std::move(from);
  }

  inline SingleTaskResponse& operator=(const SingleTaskResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleTaskResponse& operator=(SingleTaskResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SingleTaskResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SingleTaskResponse* internal_default_instance() {
    return reinterpret_cast<const SingleTaskResponse*>(
               &_SingleTaskResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    227;

  friend void swap(SingleTaskResponse& a, SingleTaskResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleTaskResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SingleTaskResponse* New() const final {
    return CreateMaybeMessage<SingleTaskResponse>(nullptr);
  }

  SingleTaskResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SingleTaskResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SingleTaskResponse& from);
  void MergeFrom(const SingleTaskResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleTaskResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.SingleTaskResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kTaskFieldNumber = 2,
  };
  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // .clarifai.api.Task task = 2;
  bool has_task() const;
  private:
  bool _internal_has_task() const;
  public:
  void clear_task();
  const ::clarifai::api::Task& task() const;
  ::clarifai::api::Task* release_task();
  ::clarifai::api::Task* mutable_task();
  void set_allocated_task(::clarifai::api::Task* task);
  private:
  const ::clarifai::api::Task& _internal_task() const;
  ::clarifai::api::Task* _internal_mutable_task();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.SingleTaskResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::status::Status* status_;
  ::clarifai::api::Task* task_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostCollectorsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostCollectorsRequest) */ {
 public:
  PostCollectorsRequest();
  virtual ~PostCollectorsRequest();

  PostCollectorsRequest(const PostCollectorsRequest& from);
  PostCollectorsRequest(PostCollectorsRequest&& from) noexcept
    : PostCollectorsRequest() {
    *this = ::std::move(from);
  }

  inline PostCollectorsRequest& operator=(const PostCollectorsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostCollectorsRequest& operator=(PostCollectorsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostCollectorsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostCollectorsRequest* internal_default_instance() {
    return reinterpret_cast<const PostCollectorsRequest*>(
               &_PostCollectorsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    228;

  friend void swap(PostCollectorsRequest& a, PostCollectorsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostCollectorsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostCollectorsRequest* New() const final {
    return CreateMaybeMessage<PostCollectorsRequest>(nullptr);
  }

  PostCollectorsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostCollectorsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostCollectorsRequest& from);
  void MergeFrom(const PostCollectorsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostCollectorsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostCollectorsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollectorsFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.Collector collectors = 2;
  int collectors_size() const;
  private:
  int _internal_collectors_size() const;
  public:
  void clear_collectors();
  ::clarifai::api::Collector* mutable_collectors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collector >*
      mutable_collectors();
  private:
  const ::clarifai::api::Collector& _internal_collectors(int index) const;
  ::clarifai::api::Collector* _internal_add_collectors();
  public:
  const ::clarifai::api::Collector& collectors(int index) const;
  ::clarifai::api::Collector* add_collectors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collector >&
      collectors() const;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PostCollectorsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collector > collectors_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PatchCollectorsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PatchCollectorsRequest) */ {
 public:
  PatchCollectorsRequest();
  virtual ~PatchCollectorsRequest();

  PatchCollectorsRequest(const PatchCollectorsRequest& from);
  PatchCollectorsRequest(PatchCollectorsRequest&& from) noexcept
    : PatchCollectorsRequest() {
    *this = ::std::move(from);
  }

  inline PatchCollectorsRequest& operator=(const PatchCollectorsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatchCollectorsRequest& operator=(PatchCollectorsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PatchCollectorsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PatchCollectorsRequest* internal_default_instance() {
    return reinterpret_cast<const PatchCollectorsRequest*>(
               &_PatchCollectorsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    229;

  friend void swap(PatchCollectorsRequest& a, PatchCollectorsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PatchCollectorsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PatchCollectorsRequest* New() const final {
    return CreateMaybeMessage<PatchCollectorsRequest>(nullptr);
  }

  PatchCollectorsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PatchCollectorsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PatchCollectorsRequest& from);
  void MergeFrom(const PatchCollectorsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatchCollectorsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PatchCollectorsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollectorsFieldNumber = 2,
    kActionFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.Collector collectors = 2;
  int collectors_size() const;
  private:
  int _internal_collectors_size() const;
  public:
  void clear_collectors();
  ::clarifai::api::Collector* mutable_collectors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collector >*
      mutable_collectors();
  private:
  const ::clarifai::api::Collector& _internal_collectors(int index) const;
  ::clarifai::api::Collector* _internal_add_collectors();
  public:
  const ::clarifai::api::Collector& collectors(int index) const;
  ::clarifai::api::Collector* add_collectors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collector >&
      collectors() const;

  // string action = 3;
  void clear_action();
  const std::string& action() const;
  void set_action(const std::string& value);
  void set_action(std::string&& value);
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  std::string* mutable_action();
  std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PatchCollectorsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collector > collectors_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteCollectorsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.DeleteCollectorsRequest) */ {
 public:
  DeleteCollectorsRequest();
  virtual ~DeleteCollectorsRequest();

  DeleteCollectorsRequest(const DeleteCollectorsRequest& from);
  DeleteCollectorsRequest(DeleteCollectorsRequest&& from) noexcept
    : DeleteCollectorsRequest() {
    *this = ::std::move(from);
  }

  inline DeleteCollectorsRequest& operator=(const DeleteCollectorsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteCollectorsRequest& operator=(DeleteCollectorsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteCollectorsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteCollectorsRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteCollectorsRequest*>(
               &_DeleteCollectorsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    230;

  friend void swap(DeleteCollectorsRequest& a, DeleteCollectorsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteCollectorsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteCollectorsRequest* New() const final {
    return CreateMaybeMessage<DeleteCollectorsRequest>(nullptr);
  }

  DeleteCollectorsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteCollectorsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteCollectorsRequest& from);
  void MergeFrom(const DeleteCollectorsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteCollectorsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.DeleteCollectorsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
    kDeleteAllFieldNumber = 3,
  };
  // repeated string ids = 2;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  const std::string& ids(int index) const;
  std::string* mutable_ids(int index);
  void set_ids(int index, const std::string& value);
  void set_ids(int index, std::string&& value);
  void set_ids(int index, const char* value);
  void set_ids(int index, const char* value, size_t size);
  std::string* add_ids();
  void add_ids(const std::string& value);
  void add_ids(std::string&& value);
  void add_ids(const char* value);
  void add_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ids();
  private:
  const std::string& _internal_ids(int index) const;
  std::string* _internal_add_ids();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // bool delete_all = 3;
  void clear_delete_all();
  bool delete_all() const;
  void set_delete_all(bool value);
  private:
  bool _internal_delete_all() const;
  void _internal_set_delete_all(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.DeleteCollectorsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ids_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  bool delete_all_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class GetCollectorRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.GetCollectorRequest) */ {
 public:
  GetCollectorRequest();
  virtual ~GetCollectorRequest();

  GetCollectorRequest(const GetCollectorRequest& from);
  GetCollectorRequest(GetCollectorRequest&& from) noexcept
    : GetCollectorRequest() {
    *this = ::std::move(from);
  }

  inline GetCollectorRequest& operator=(const GetCollectorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCollectorRequest& operator=(GetCollectorRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetCollectorRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCollectorRequest* internal_default_instance() {
    return reinterpret_cast<const GetCollectorRequest*>(
               &_GetCollectorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    231;

  friend void swap(GetCollectorRequest& a, GetCollectorRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCollectorRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCollectorRequest* New() const final {
    return CreateMaybeMessage<GetCollectorRequest>(nullptr);
  }

  GetCollectorRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCollectorRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCollectorRequest& from);
  void MergeFrom(const GetCollectorRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCollectorRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.GetCollectorRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollectorIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // string collector_id = 2;
  void clear_collector_id();
  const std::string& collector_id() const;
  void set_collector_id(const std::string& value);
  void set_collector_id(std::string&& value);
  void set_collector_id(const char* value);
  void set_collector_id(const char* value, size_t size);
  std::string* mutable_collector_id();
  std::string* release_collector_id();
  void set_allocated_collector_id(std::string* collector_id);
  private:
  const std::string& _internal_collector_id() const;
  void _internal_set_collector_id(const std::string& value);
  std::string* _internal_mutable_collector_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.GetCollectorRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collector_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListCollectorsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListCollectorsRequest) */ {
 public:
  ListCollectorsRequest();
  virtual ~ListCollectorsRequest();

  ListCollectorsRequest(const ListCollectorsRequest& from);
  ListCollectorsRequest(ListCollectorsRequest&& from) noexcept
    : ListCollectorsRequest() {
    *this = ::std::move(from);
  }

  inline ListCollectorsRequest& operator=(const ListCollectorsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListCollectorsRequest& operator=(ListCollectorsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListCollectorsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListCollectorsRequest* internal_default_instance() {
    return reinterpret_cast<const ListCollectorsRequest*>(
               &_ListCollectorsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    232;

  friend void swap(ListCollectorsRequest& a, ListCollectorsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListCollectorsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListCollectorsRequest* New() const final {
    return CreateMaybeMessage<ListCollectorsRequest>(nullptr);
  }

  ListCollectorsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListCollectorsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListCollectorsRequest& from);
  void MergeFrom(const ListCollectorsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListCollectorsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListCollectorsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserAppIdFieldNumber = 1,
    kPageFieldNumber = 2,
    kPerPageFieldNumber = 3,
  };
  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // uint32 page = 2;
  void clear_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 page() const;
  void set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_page() const;
  void _internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 per_page = 3;
  void clear_per_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 per_page() const;
  void set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_per_page() const;
  void _internal_set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ListCollectorsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 page_;
  ::PROTOBUF_NAMESPACE_ID::uint32 per_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiCollectorResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiCollectorResponse) */ {
 public:
  MultiCollectorResponse();
  virtual ~MultiCollectorResponse();

  MultiCollectorResponse(const MultiCollectorResponse& from);
  MultiCollectorResponse(MultiCollectorResponse&& from) noexcept
    : MultiCollectorResponse() {
    *this = ::std::move(from);
  }

  inline MultiCollectorResponse& operator=(const MultiCollectorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiCollectorResponse& operator=(MultiCollectorResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiCollectorResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiCollectorResponse* internal_default_instance() {
    return reinterpret_cast<const MultiCollectorResponse*>(
               &_MultiCollectorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    233;

  friend void swap(MultiCollectorResponse& a, MultiCollectorResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiCollectorResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiCollectorResponse* New() const final {
    return CreateMaybeMessage<MultiCollectorResponse>(nullptr);
  }

  MultiCollectorResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiCollectorResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiCollectorResponse& from);
  void MergeFrom(const MultiCollectorResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiCollectorResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiCollectorResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollectorsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.Collector collectors = 2;
  int collectors_size() const;
  private:
  int _internal_collectors_size() const;
  public:
  void clear_collectors();
  ::clarifai::api::Collector* mutable_collectors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collector >*
      mutable_collectors();
  private:
  const ::clarifai::api::Collector& _internal_collectors(int index) const;
  ::clarifai::api::Collector* _internal_add_collectors();
  public:
  const ::clarifai::api::Collector& collectors(int index) const;
  ::clarifai::api::Collector* add_collectors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collector >&
      collectors() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiCollectorResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collector > collectors_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class SingleCollectorResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.SingleCollectorResponse) */ {
 public:
  SingleCollectorResponse();
  virtual ~SingleCollectorResponse();

  SingleCollectorResponse(const SingleCollectorResponse& from);
  SingleCollectorResponse(SingleCollectorResponse&& from) noexcept
    : SingleCollectorResponse() {
    *this = ::std::move(from);
  }

  inline SingleCollectorResponse& operator=(const SingleCollectorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleCollectorResponse& operator=(SingleCollectorResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SingleCollectorResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SingleCollectorResponse* internal_default_instance() {
    return reinterpret_cast<const SingleCollectorResponse*>(
               &_SingleCollectorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    234;

  friend void swap(SingleCollectorResponse& a, SingleCollectorResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleCollectorResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SingleCollectorResponse* New() const final {
    return CreateMaybeMessage<SingleCollectorResponse>(nullptr);
  }

  SingleCollectorResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SingleCollectorResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SingleCollectorResponse& from);
  void MergeFrom(const SingleCollectorResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleCollectorResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.SingleCollectorResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kCollectorFieldNumber = 2,
  };
  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // .clarifai.api.Collector collector = 2;
  bool has_collector() const;
  private:
  bool _internal_has_collector() const;
  public:
  void clear_collector();
  const ::clarifai::api::Collector& collector() const;
  ::clarifai::api::Collector* release_collector();
  ::clarifai::api::Collector* mutable_collector();
  void set_allocated_collector(::clarifai::api::Collector* collector);
  private:
  const ::clarifai::api::Collector& _internal_collector() const;
  ::clarifai::api::Collector* _internal_mutable_collector();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.SingleCollectorResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::status::Status* status_;
  ::clarifai::api::Collector* collector_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostStatValuesRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostStatValuesRequest) */ {
 public:
  PostStatValuesRequest();
  virtual ~PostStatValuesRequest();

  PostStatValuesRequest(const PostStatValuesRequest& from);
  PostStatValuesRequest(PostStatValuesRequest&& from) noexcept
    : PostStatValuesRequest() {
    *this = ::std::move(from);
  }

  inline PostStatValuesRequest& operator=(const PostStatValuesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostStatValuesRequest& operator=(PostStatValuesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostStatValuesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostStatValuesRequest* internal_default_instance() {
    return reinterpret_cast<const PostStatValuesRequest*>(
               &_PostStatValuesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    235;

  friend void swap(PostStatValuesRequest& a, PostStatValuesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostStatValuesRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostStatValuesRequest* New() const final {
    return CreateMaybeMessage<PostStatValuesRequest>(nullptr);
  }

  PostStatValuesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostStatValuesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostStatValuesRequest& from);
  void MergeFrom(const PostStatValuesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostStatValuesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostStatValuesRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatValuesFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.StatValue stat_values = 2;
  int stat_values_size() const;
  private:
  int _internal_stat_values_size() const;
  public:
  void clear_stat_values();
  ::clarifai::api::StatValue* mutable_stat_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::StatValue >*
      mutable_stat_values();
  private:
  const ::clarifai::api::StatValue& _internal_stat_values(int index) const;
  ::clarifai::api::StatValue* _internal_add_stat_values();
  public:
  const ::clarifai::api::StatValue& stat_values(int index) const;
  ::clarifai::api::StatValue* add_stat_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::StatValue >&
      stat_values() const;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PostStatValuesRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::StatValue > stat_values_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiStatValueResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiStatValueResponse) */ {
 public:
  MultiStatValueResponse();
  virtual ~MultiStatValueResponse();

  MultiStatValueResponse(const MultiStatValueResponse& from);
  MultiStatValueResponse(MultiStatValueResponse&& from) noexcept
    : MultiStatValueResponse() {
    *this = ::std::move(from);
  }

  inline MultiStatValueResponse& operator=(const MultiStatValueResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiStatValueResponse& operator=(MultiStatValueResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiStatValueResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiStatValueResponse* internal_default_instance() {
    return reinterpret_cast<const MultiStatValueResponse*>(
               &_MultiStatValueResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    236;

  friend void swap(MultiStatValueResponse& a, MultiStatValueResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiStatValueResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiStatValueResponse* New() const final {
    return CreateMaybeMessage<MultiStatValueResponse>(nullptr);
  }

  MultiStatValueResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiStatValueResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiStatValueResponse& from);
  void MergeFrom(const MultiStatValueResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiStatValueResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiStatValueResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatValuesFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.StatValue stat_values = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int stat_values_size() const;
  private:
  int _internal_stat_values_size() const;
  public:
  void clear_stat_values();
  ::clarifai::api::StatValue* mutable_stat_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::StatValue >*
      mutable_stat_values();
  private:
  const ::clarifai::api::StatValue& _internal_stat_values(int index) const;
  ::clarifai::api::StatValue* _internal_add_stat_values();
  public:
  const ::clarifai::api::StatValue& stat_values(int index) const;
  ::clarifai::api::StatValue* add_stat_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::StatValue >&
      stat_values() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiStatValueResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::StatValue > stat_values_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostStatValuesAggregateRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostStatValuesAggregateRequest) */ {
 public:
  PostStatValuesAggregateRequest();
  virtual ~PostStatValuesAggregateRequest();

  PostStatValuesAggregateRequest(const PostStatValuesAggregateRequest& from);
  PostStatValuesAggregateRequest(PostStatValuesAggregateRequest&& from) noexcept
    : PostStatValuesAggregateRequest() {
    *this = ::std::move(from);
  }

  inline PostStatValuesAggregateRequest& operator=(const PostStatValuesAggregateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostStatValuesAggregateRequest& operator=(PostStatValuesAggregateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostStatValuesAggregateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostStatValuesAggregateRequest* internal_default_instance() {
    return reinterpret_cast<const PostStatValuesAggregateRequest*>(
               &_PostStatValuesAggregateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    237;

  friend void swap(PostStatValuesAggregateRequest& a, PostStatValuesAggregateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostStatValuesAggregateRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostStatValuesAggregateRequest* New() const final {
    return CreateMaybeMessage<PostStatValuesAggregateRequest>(nullptr);
  }

  PostStatValuesAggregateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostStatValuesAggregateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostStatValuesAggregateRequest& from);
  void MergeFrom(const PostStatValuesAggregateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostStatValuesAggregateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostStatValuesAggregateRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatValueAggregateQueriesFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.StatValueAggregateQuery stat_value_aggregate_queries = 2;
  int stat_value_aggregate_queries_size() const;
  private:
  int _internal_stat_value_aggregate_queries_size() const;
  public:
  void clear_stat_value_aggregate_queries();
  ::clarifai::api::StatValueAggregateQuery* mutable_stat_value_aggregate_queries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::StatValueAggregateQuery >*
      mutable_stat_value_aggregate_queries();
  private:
  const ::clarifai::api::StatValueAggregateQuery& _internal_stat_value_aggregate_queries(int index) const;
  ::clarifai::api::StatValueAggregateQuery* _internal_add_stat_value_aggregate_queries();
  public:
  const ::clarifai::api::StatValueAggregateQuery& stat_value_aggregate_queries(int index) const;
  ::clarifai::api::StatValueAggregateQuery* add_stat_value_aggregate_queries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::StatValueAggregateQuery >&
      stat_value_aggregate_queries() const;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PostStatValuesAggregateRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::StatValueAggregateQuery > stat_value_aggregate_queries_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiStatValueAggregateResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiStatValueAggregateResponse) */ {
 public:
  MultiStatValueAggregateResponse();
  virtual ~MultiStatValueAggregateResponse();

  MultiStatValueAggregateResponse(const MultiStatValueAggregateResponse& from);
  MultiStatValueAggregateResponse(MultiStatValueAggregateResponse&& from) noexcept
    : MultiStatValueAggregateResponse() {
    *this = ::std::move(from);
  }

  inline MultiStatValueAggregateResponse& operator=(const MultiStatValueAggregateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiStatValueAggregateResponse& operator=(MultiStatValueAggregateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiStatValueAggregateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiStatValueAggregateResponse* internal_default_instance() {
    return reinterpret_cast<const MultiStatValueAggregateResponse*>(
               &_MultiStatValueAggregateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    238;

  friend void swap(MultiStatValueAggregateResponse& a, MultiStatValueAggregateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiStatValueAggregateResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiStatValueAggregateResponse* New() const final {
    return CreateMaybeMessage<MultiStatValueAggregateResponse>(nullptr);
  }

  MultiStatValueAggregateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiStatValueAggregateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiStatValueAggregateResponse& from);
  void MergeFrom(const MultiStatValueAggregateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiStatValueAggregateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiStatValueAggregateResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatValueAggregateResultsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.StatValueAggregateResult stat_value_aggregate_results = 2;
  int stat_value_aggregate_results_size() const;
  private:
  int _internal_stat_value_aggregate_results_size() const;
  public:
  void clear_stat_value_aggregate_results();
  ::clarifai::api::StatValueAggregateResult* mutable_stat_value_aggregate_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::StatValueAggregateResult >*
      mutable_stat_value_aggregate_results();
  private:
  const ::clarifai::api::StatValueAggregateResult& _internal_stat_value_aggregate_results(int index) const;
  ::clarifai::api::StatValueAggregateResult* _internal_add_stat_value_aggregate_results();
  public:
  const ::clarifai::api::StatValueAggregateResult& stat_value_aggregate_results(int index) const;
  ::clarifai::api::StatValueAggregateResult* add_stat_value_aggregate_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::StatValueAggregateResult >&
      stat_value_aggregate_results() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiStatValueAggregateResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::StatValueAggregateResult > stat_value_aggregate_results_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TestMessage

// .clarifai.api.status.Status status = 1;
inline bool TestMessage::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool TestMessage::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& TestMessage::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& TestMessage::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.TestMessage.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* TestMessage::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.TestMessage.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* TestMessage::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* TestMessage::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.TestMessage.status)
  return _internal_mutable_status();
}
inline void TestMessage::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.TestMessage.status)
}

// string value = 2;
inline void TestMessage::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TestMessage::value() const {
  // @@protoc_insertion_point(field_get:clarifai.api.TestMessage.value)
  return _internal_value();
}
inline void TestMessage::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:clarifai.api.TestMessage.value)
}
inline std::string* TestMessage::mutable_value() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.TestMessage.value)
  return _internal_mutable_value();
}
inline const std::string& TestMessage::_internal_value() const {
  return value_.GetNoArena();
}
inline void TestMessage::_internal_set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TestMessage::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.TestMessage.value)
}
inline void TestMessage::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.TestMessage.value)
}
inline void TestMessage::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.TestMessage.value)
}
inline std::string* TestMessage::_internal_mutable_value() {
  
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TestMessage::release_value() {
  // @@protoc_insertion_point(field_release:clarifai.api.TestMessage.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TestMessage::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.TestMessage.value)
}

// bytes byts = 3;
inline void TestMessage::clear_byts() {
  byts_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TestMessage::byts() const {
  // @@protoc_insertion_point(field_get:clarifai.api.TestMessage.byts)
  return _internal_byts();
}
inline void TestMessage::set_byts(const std::string& value) {
  _internal_set_byts(value);
  // @@protoc_insertion_point(field_set:clarifai.api.TestMessage.byts)
}
inline std::string* TestMessage::mutable_byts() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.TestMessage.byts)
  return _internal_mutable_byts();
}
inline const std::string& TestMessage::_internal_byts() const {
  return byts_.GetNoArena();
}
inline void TestMessage::_internal_set_byts(const std::string& value) {
  
  byts_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TestMessage::set_byts(std::string&& value) {
  
  byts_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.TestMessage.byts)
}
inline void TestMessage::set_byts(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  byts_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.TestMessage.byts)
}
inline void TestMessage::set_byts(const void* value, size_t size) {
  
  byts_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.TestMessage.byts)
}
inline std::string* TestMessage::_internal_mutable_byts() {
  
  return byts_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TestMessage::release_byts() {
  // @@protoc_insertion_point(field_release:clarifai.api.TestMessage.byts)
  
  return byts_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TestMessage::set_allocated_byts(std::string* byts) {
  if (byts != nullptr) {
    
  } else {
    
  }
  byts_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), byts);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.TestMessage.byts)
}

// uint32 int_32 = 4;
inline void TestMessage::clear_int_32() {
  int_32_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestMessage::_internal_int_32() const {
  return int_32_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestMessage::int_32() const {
  // @@protoc_insertion_point(field_get:clarifai.api.TestMessage.int_32)
  return _internal_int_32();
}
inline void TestMessage::_internal_set_int_32(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  int_32_ = value;
}
inline void TestMessage::set_int_32(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_int_32(value);
  // @@protoc_insertion_point(field_set:clarifai.api.TestMessage.int_32)
}

// uint64 int_64 = 5;
inline void TestMessage::clear_int_64() {
  int_64_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TestMessage::_internal_int_64() const {
  return int_64_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TestMessage::int_64() const {
  // @@protoc_insertion_point(field_get:clarifai.api.TestMessage.int_64)
  return _internal_int_64();
}
inline void TestMessage::_internal_set_int_64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  int_64_ = value;
}
inline void TestMessage::set_int_64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_int_64(value);
  // @@protoc_insertion_point(field_set:clarifai.api.TestMessage.int_64)
}

// float f_32 = 6;
inline void TestMessage::clear_f_32() {
  f_32_ = 0;
}
inline float TestMessage::_internal_f_32() const {
  return f_32_;
}
inline float TestMessage::f_32() const {
  // @@protoc_insertion_point(field_get:clarifai.api.TestMessage.f_32)
  return _internal_f_32();
}
inline void TestMessage::_internal_set_f_32(float value) {
  
  f_32_ = value;
}
inline void TestMessage::set_f_32(float value) {
  _internal_set_f_32(value);
  // @@protoc_insertion_point(field_set:clarifai.api.TestMessage.f_32)
}

// double f_64 = 7;
inline void TestMessage::clear_f_64() {
  f_64_ = 0;
}
inline double TestMessage::_internal_f_64() const {
  return f_64_;
}
inline double TestMessage::f_64() const {
  // @@protoc_insertion_point(field_get:clarifai.api.TestMessage.f_64)
  return _internal_f_64();
}
inline void TestMessage::_internal_set_f_64(double value) {
  
  f_64_ = value;
}
inline void TestMessage::set_f_64(double value) {
  _internal_set_f_64(value);
  // @@protoc_insertion_point(field_set:clarifai.api.TestMessage.f_64)
}

// .google.protobuf.Struct s = 8;
inline bool TestMessage::_internal_has_s() const {
  return this != internal_default_instance() && s_ != nullptr;
}
inline bool TestMessage::has_s() const {
  return _internal_has_s();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& TestMessage::_internal_s() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = s_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& TestMessage::s() const {
  // @@protoc_insertion_point(field_get:clarifai.api.TestMessage.s)
  return _internal_s();
}
inline PROTOBUF_NAMESPACE_ID::Struct* TestMessage::release_s() {
  // @@protoc_insertion_point(field_release:clarifai.api.TestMessage.s)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = s_;
  s_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* TestMessage::_internal_mutable_s() {
  
  if (s_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArenaNoVirtual());
    s_ = p;
  }
  return s_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* TestMessage::mutable_s() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.TestMessage.s)
  return _internal_mutable_s();
}
inline void TestMessage::set_allocated_s(PROTOBUF_NAMESPACE_ID::Struct* s) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(s_);
  }
  if (s) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(s)->GetArena();
    if (message_arena != submessage_arena) {
      s = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, s, submessage_arena);
    }
    
  } else {
    
  }
  s_ = s;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.TestMessage.s)
}

// -------------------------------------------------------------------

// Pagination

// uint32 page = 1;
inline void Pagination::clear_page() {
  page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pagination::_internal_page() const {
  return page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pagination::page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Pagination.page)
  return _internal_page();
}
inline void Pagination::_internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  page_ = value;
}
inline void Pagination::set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Pagination.page)
}

// uint32 per_page = 2;
inline void Pagination::clear_per_page() {
  per_page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pagination::_internal_per_page() const {
  return per_page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pagination::per_page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Pagination.per_page)
  return _internal_per_page();
}
inline void Pagination::_internal_set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  per_page_ = value;
}
inline void Pagination::set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_per_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Pagination.per_page)
}

// -------------------------------------------------------------------

// GetAnnotationRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool GetAnnotationRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool GetAnnotationRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& GetAnnotationRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& GetAnnotationRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetAnnotationRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* GetAnnotationRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetAnnotationRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetAnnotationRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* GetAnnotationRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetAnnotationRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void GetAnnotationRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetAnnotationRequest.user_app_id)
}

// string annotation_id = 2;
inline void GetAnnotationRequest::clear_annotation_id() {
  annotation_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetAnnotationRequest::annotation_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetAnnotationRequest.annotation_id)
  return _internal_annotation_id();
}
inline void GetAnnotationRequest::set_annotation_id(const std::string& value) {
  _internal_set_annotation_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.GetAnnotationRequest.annotation_id)
}
inline std::string* GetAnnotationRequest::mutable_annotation_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetAnnotationRequest.annotation_id)
  return _internal_mutable_annotation_id();
}
inline const std::string& GetAnnotationRequest::_internal_annotation_id() const {
  return annotation_id_.GetNoArena();
}
inline void GetAnnotationRequest::_internal_set_annotation_id(const std::string& value) {
  
  annotation_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetAnnotationRequest::set_annotation_id(std::string&& value) {
  
  annotation_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.GetAnnotationRequest.annotation_id)
}
inline void GetAnnotationRequest::set_annotation_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  annotation_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.GetAnnotationRequest.annotation_id)
}
inline void GetAnnotationRequest::set_annotation_id(const char* value, size_t size) {
  
  annotation_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.GetAnnotationRequest.annotation_id)
}
inline std::string* GetAnnotationRequest::_internal_mutable_annotation_id() {
  
  return annotation_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetAnnotationRequest::release_annotation_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetAnnotationRequest.annotation_id)
  
  return annotation_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetAnnotationRequest::set_allocated_annotation_id(std::string* annotation_id) {
  if (annotation_id != nullptr) {
    
  } else {
    
  }
  annotation_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), annotation_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetAnnotationRequest.annotation_id)
}

// string input_id = 3;
inline void GetAnnotationRequest::clear_input_id() {
  input_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetAnnotationRequest::input_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetAnnotationRequest.input_id)
  return _internal_input_id();
}
inline void GetAnnotationRequest::set_input_id(const std::string& value) {
  _internal_set_input_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.GetAnnotationRequest.input_id)
}
inline std::string* GetAnnotationRequest::mutable_input_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetAnnotationRequest.input_id)
  return _internal_mutable_input_id();
}
inline const std::string& GetAnnotationRequest::_internal_input_id() const {
  return input_id_.GetNoArena();
}
inline void GetAnnotationRequest::_internal_set_input_id(const std::string& value) {
  
  input_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetAnnotationRequest::set_input_id(std::string&& value) {
  
  input_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.GetAnnotationRequest.input_id)
}
inline void GetAnnotationRequest::set_input_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  input_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.GetAnnotationRequest.input_id)
}
inline void GetAnnotationRequest::set_input_id(const char* value, size_t size) {
  
  input_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.GetAnnotationRequest.input_id)
}
inline std::string* GetAnnotationRequest::_internal_mutable_input_id() {
  
  return input_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetAnnotationRequest::release_input_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetAnnotationRequest.input_id)
  
  return input_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetAnnotationRequest::set_allocated_input_id(std::string* input_id) {
  if (input_id != nullptr) {
    
  } else {
    
  }
  input_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), input_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetAnnotationRequest.input_id)
}

// -------------------------------------------------------------------

// ListAnnotationsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool ListAnnotationsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool ListAnnotationsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& ListAnnotationsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& ListAnnotationsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListAnnotationsRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* ListAnnotationsRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListAnnotationsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListAnnotationsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* ListAnnotationsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListAnnotationsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void ListAnnotationsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListAnnotationsRequest.user_app_id)
}

// repeated string ids = 2;
inline int ListAnnotationsRequest::_internal_ids_size() const {
  return ids_.size();
}
inline int ListAnnotationsRequest::ids_size() const {
  return _internal_ids_size();
}
inline void ListAnnotationsRequest::clear_ids() {
  ids_.Clear();
}
inline std::string* ListAnnotationsRequest::add_ids() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.ListAnnotationsRequest.ids)
  return _internal_add_ids();
}
inline const std::string& ListAnnotationsRequest::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const std::string& ListAnnotationsRequest::ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListAnnotationsRequest.ids)
  return _internal_ids(index);
}
inline std::string* ListAnnotationsRequest::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListAnnotationsRequest.ids)
  return ids_.Mutable(index);
}
inline void ListAnnotationsRequest::set_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.ListAnnotationsRequest.ids)
  ids_.Mutable(index)->assign(value);
}
inline void ListAnnotationsRequest::set_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.ListAnnotationsRequest.ids)
  ids_.Mutable(index)->assign(std::move(value));
}
inline void ListAnnotationsRequest::set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.ListAnnotationsRequest.ids)
}
inline void ListAnnotationsRequest::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ListAnnotationsRequest.ids)
}
inline std::string* ListAnnotationsRequest::_internal_add_ids() {
  return ids_.Add();
}
inline void ListAnnotationsRequest::add_ids(const std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.ListAnnotationsRequest.ids)
}
inline void ListAnnotationsRequest::add_ids(std::string&& value) {
  ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.ListAnnotationsRequest.ids)
}
inline void ListAnnotationsRequest::add_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.ListAnnotationsRequest.ids)
}
inline void ListAnnotationsRequest::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.ListAnnotationsRequest.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListAnnotationsRequest::ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.ListAnnotationsRequest.ids)
  return ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListAnnotationsRequest::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.ListAnnotationsRequest.ids)
  return &ids_;
}

// repeated string input_ids = 3;
inline int ListAnnotationsRequest::_internal_input_ids_size() const {
  return input_ids_.size();
}
inline int ListAnnotationsRequest::input_ids_size() const {
  return _internal_input_ids_size();
}
inline void ListAnnotationsRequest::clear_input_ids() {
  input_ids_.Clear();
}
inline std::string* ListAnnotationsRequest::add_input_ids() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.ListAnnotationsRequest.input_ids)
  return _internal_add_input_ids();
}
inline const std::string& ListAnnotationsRequest::_internal_input_ids(int index) const {
  return input_ids_.Get(index);
}
inline const std::string& ListAnnotationsRequest::input_ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListAnnotationsRequest.input_ids)
  return _internal_input_ids(index);
}
inline std::string* ListAnnotationsRequest::mutable_input_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListAnnotationsRequest.input_ids)
  return input_ids_.Mutable(index);
}
inline void ListAnnotationsRequest::set_input_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.ListAnnotationsRequest.input_ids)
  input_ids_.Mutable(index)->assign(value);
}
inline void ListAnnotationsRequest::set_input_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.ListAnnotationsRequest.input_ids)
  input_ids_.Mutable(index)->assign(std::move(value));
}
inline void ListAnnotationsRequest::set_input_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.ListAnnotationsRequest.input_ids)
}
inline void ListAnnotationsRequest::set_input_ids(int index, const char* value, size_t size) {
  input_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ListAnnotationsRequest.input_ids)
}
inline std::string* ListAnnotationsRequest::_internal_add_input_ids() {
  return input_ids_.Add();
}
inline void ListAnnotationsRequest::add_input_ids(const std::string& value) {
  input_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.ListAnnotationsRequest.input_ids)
}
inline void ListAnnotationsRequest::add_input_ids(std::string&& value) {
  input_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.ListAnnotationsRequest.input_ids)
}
inline void ListAnnotationsRequest::add_input_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.ListAnnotationsRequest.input_ids)
}
inline void ListAnnotationsRequest::add_input_ids(const char* value, size_t size) {
  input_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.ListAnnotationsRequest.input_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListAnnotationsRequest::input_ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.ListAnnotationsRequest.input_ids)
  return input_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListAnnotationsRequest::mutable_input_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.ListAnnotationsRequest.input_ids)
  return &input_ids_;
}

// repeated string user_ids = 9;
inline int ListAnnotationsRequest::_internal_user_ids_size() const {
  return user_ids_.size();
}
inline int ListAnnotationsRequest::user_ids_size() const {
  return _internal_user_ids_size();
}
inline void ListAnnotationsRequest::clear_user_ids() {
  user_ids_.Clear();
}
inline std::string* ListAnnotationsRequest::add_user_ids() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.ListAnnotationsRequest.user_ids)
  return _internal_add_user_ids();
}
inline const std::string& ListAnnotationsRequest::_internal_user_ids(int index) const {
  return user_ids_.Get(index);
}
inline const std::string& ListAnnotationsRequest::user_ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListAnnotationsRequest.user_ids)
  return _internal_user_ids(index);
}
inline std::string* ListAnnotationsRequest::mutable_user_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListAnnotationsRequest.user_ids)
  return user_ids_.Mutable(index);
}
inline void ListAnnotationsRequest::set_user_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.ListAnnotationsRequest.user_ids)
  user_ids_.Mutable(index)->assign(value);
}
inline void ListAnnotationsRequest::set_user_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.ListAnnotationsRequest.user_ids)
  user_ids_.Mutable(index)->assign(std::move(value));
}
inline void ListAnnotationsRequest::set_user_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  user_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.ListAnnotationsRequest.user_ids)
}
inline void ListAnnotationsRequest::set_user_ids(int index, const char* value, size_t size) {
  user_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ListAnnotationsRequest.user_ids)
}
inline std::string* ListAnnotationsRequest::_internal_add_user_ids() {
  return user_ids_.Add();
}
inline void ListAnnotationsRequest::add_user_ids(const std::string& value) {
  user_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.ListAnnotationsRequest.user_ids)
}
inline void ListAnnotationsRequest::add_user_ids(std::string&& value) {
  user_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.ListAnnotationsRequest.user_ids)
}
inline void ListAnnotationsRequest::add_user_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  user_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.ListAnnotationsRequest.user_ids)
}
inline void ListAnnotationsRequest::add_user_ids(const char* value, size_t size) {
  user_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.ListAnnotationsRequest.user_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListAnnotationsRequest::user_ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.ListAnnotationsRequest.user_ids)
  return user_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListAnnotationsRequest::mutable_user_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.ListAnnotationsRequest.user_ids)
  return &user_ids_;
}

// repeated string model_version_ids = 10;
inline int ListAnnotationsRequest::_internal_model_version_ids_size() const {
  return model_version_ids_.size();
}
inline int ListAnnotationsRequest::model_version_ids_size() const {
  return _internal_model_version_ids_size();
}
inline void ListAnnotationsRequest::clear_model_version_ids() {
  model_version_ids_.Clear();
}
inline std::string* ListAnnotationsRequest::add_model_version_ids() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.ListAnnotationsRequest.model_version_ids)
  return _internal_add_model_version_ids();
}
inline const std::string& ListAnnotationsRequest::_internal_model_version_ids(int index) const {
  return model_version_ids_.Get(index);
}
inline const std::string& ListAnnotationsRequest::model_version_ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListAnnotationsRequest.model_version_ids)
  return _internal_model_version_ids(index);
}
inline std::string* ListAnnotationsRequest::mutable_model_version_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListAnnotationsRequest.model_version_ids)
  return model_version_ids_.Mutable(index);
}
inline void ListAnnotationsRequest::set_model_version_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.ListAnnotationsRequest.model_version_ids)
  model_version_ids_.Mutable(index)->assign(value);
}
inline void ListAnnotationsRequest::set_model_version_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.ListAnnotationsRequest.model_version_ids)
  model_version_ids_.Mutable(index)->assign(std::move(value));
}
inline void ListAnnotationsRequest::set_model_version_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  model_version_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.ListAnnotationsRequest.model_version_ids)
}
inline void ListAnnotationsRequest::set_model_version_ids(int index, const char* value, size_t size) {
  model_version_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ListAnnotationsRequest.model_version_ids)
}
inline std::string* ListAnnotationsRequest::_internal_add_model_version_ids() {
  return model_version_ids_.Add();
}
inline void ListAnnotationsRequest::add_model_version_ids(const std::string& value) {
  model_version_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.ListAnnotationsRequest.model_version_ids)
}
inline void ListAnnotationsRequest::add_model_version_ids(std::string&& value) {
  model_version_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.ListAnnotationsRequest.model_version_ids)
}
inline void ListAnnotationsRequest::add_model_version_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  model_version_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.ListAnnotationsRequest.model_version_ids)
}
inline void ListAnnotationsRequest::add_model_version_ids(const char* value, size_t size) {
  model_version_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.ListAnnotationsRequest.model_version_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListAnnotationsRequest::model_version_ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.ListAnnotationsRequest.model_version_ids)
  return model_version_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListAnnotationsRequest::mutable_model_version_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.ListAnnotationsRequest.model_version_ids)
  return &model_version_ids_;
}

// repeated .clarifai.api.status.Status statuses = 5;
inline int ListAnnotationsRequest::_internal_statuses_size() const {
  return statuses_.size();
}
inline int ListAnnotationsRequest::statuses_size() const {
  return _internal_statuses_size();
}
inline ::clarifai::api::status::Status* ListAnnotationsRequest::mutable_statuses(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListAnnotationsRequest.statuses)
  return statuses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::status::Status >*
ListAnnotationsRequest::mutable_statuses() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.ListAnnotationsRequest.statuses)
  return &statuses_;
}
inline const ::clarifai::api::status::Status& ListAnnotationsRequest::_internal_statuses(int index) const {
  return statuses_.Get(index);
}
inline const ::clarifai::api::status::Status& ListAnnotationsRequest::statuses(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListAnnotationsRequest.statuses)
  return _internal_statuses(index);
}
inline ::clarifai::api::status::Status* ListAnnotationsRequest::_internal_add_statuses() {
  return statuses_.Add();
}
inline ::clarifai::api::status::Status* ListAnnotationsRequest::add_statuses() {
  // @@protoc_insertion_point(field_add:clarifai.api.ListAnnotationsRequest.statuses)
  return _internal_add_statuses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::status::Status >&
ListAnnotationsRequest::statuses() const {
  // @@protoc_insertion_point(field_list:clarifai.api.ListAnnotationsRequest.statuses)
  return statuses_;
}

// bool list_all_annotations = 6;
inline void ListAnnotationsRequest::clear_list_all_annotations() {
  list_all_annotations_ = false;
}
inline bool ListAnnotationsRequest::_internal_list_all_annotations() const {
  return list_all_annotations_;
}
inline bool ListAnnotationsRequest::list_all_annotations() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListAnnotationsRequest.list_all_annotations)
  return _internal_list_all_annotations();
}
inline void ListAnnotationsRequest::_internal_set_list_all_annotations(bool value) {
  
  list_all_annotations_ = value;
}
inline void ListAnnotationsRequest::set_list_all_annotations(bool value) {
  _internal_set_list_all_annotations(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListAnnotationsRequest.list_all_annotations)
}

// uint32 page = 7;
inline void ListAnnotationsRequest::clear_page() {
  page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListAnnotationsRequest::_internal_page() const {
  return page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListAnnotationsRequest::page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListAnnotationsRequest.page)
  return _internal_page();
}
inline void ListAnnotationsRequest::_internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  page_ = value;
}
inline void ListAnnotationsRequest::set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListAnnotationsRequest.page)
}

// uint32 per_page = 8;
inline void ListAnnotationsRequest::clear_per_page() {
  per_page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListAnnotationsRequest::_internal_per_page() const {
  return per_page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListAnnotationsRequest::per_page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListAnnotationsRequest.per_page)
  return _internal_per_page();
}
inline void ListAnnotationsRequest::_internal_set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  per_page_ = value;
}
inline void ListAnnotationsRequest::set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_per_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListAnnotationsRequest.per_page)
}

// -------------------------------------------------------------------

// PostAnnotationsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostAnnotationsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostAnnotationsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostAnnotationsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostAnnotationsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostAnnotationsRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* PostAnnotationsRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostAnnotationsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostAnnotationsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostAnnotationsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostAnnotationsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void PostAnnotationsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostAnnotationsRequest.user_app_id)
}

// repeated .clarifai.api.Annotation annotations = 2;
inline int PostAnnotationsRequest::_internal_annotations_size() const {
  return annotations_.size();
}
inline int PostAnnotationsRequest::annotations_size() const {
  return _internal_annotations_size();
}
inline ::clarifai::api::Annotation* PostAnnotationsRequest::mutable_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostAnnotationsRequest.annotations)
  return annotations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Annotation >*
PostAnnotationsRequest::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostAnnotationsRequest.annotations)
  return &annotations_;
}
inline const ::clarifai::api::Annotation& PostAnnotationsRequest::_internal_annotations(int index) const {
  return annotations_.Get(index);
}
inline const ::clarifai::api::Annotation& PostAnnotationsRequest::annotations(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostAnnotationsRequest.annotations)
  return _internal_annotations(index);
}
inline ::clarifai::api::Annotation* PostAnnotationsRequest::_internal_add_annotations() {
  return annotations_.Add();
}
inline ::clarifai::api::Annotation* PostAnnotationsRequest::add_annotations() {
  // @@protoc_insertion_point(field_add:clarifai.api.PostAnnotationsRequest.annotations)
  return _internal_add_annotations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Annotation >&
PostAnnotationsRequest::annotations() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostAnnotationsRequest.annotations)
  return annotations_;
}

// -------------------------------------------------------------------

// PatchAnnotationsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PatchAnnotationsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PatchAnnotationsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PatchAnnotationsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PatchAnnotationsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchAnnotationsRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* PatchAnnotationsRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchAnnotationsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchAnnotationsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PatchAnnotationsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchAnnotationsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void PatchAnnotationsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchAnnotationsRequest.user_app_id)
}

// repeated .clarifai.api.Annotation annotations = 2;
inline int PatchAnnotationsRequest::_internal_annotations_size() const {
  return annotations_.size();
}
inline int PatchAnnotationsRequest::annotations_size() const {
  return _internal_annotations_size();
}
inline ::clarifai::api::Annotation* PatchAnnotationsRequest::mutable_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchAnnotationsRequest.annotations)
  return annotations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Annotation >*
PatchAnnotationsRequest::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PatchAnnotationsRequest.annotations)
  return &annotations_;
}
inline const ::clarifai::api::Annotation& PatchAnnotationsRequest::_internal_annotations(int index) const {
  return annotations_.Get(index);
}
inline const ::clarifai::api::Annotation& PatchAnnotationsRequest::annotations(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchAnnotationsRequest.annotations)
  return _internal_annotations(index);
}
inline ::clarifai::api::Annotation* PatchAnnotationsRequest::_internal_add_annotations() {
  return annotations_.Add();
}
inline ::clarifai::api::Annotation* PatchAnnotationsRequest::add_annotations() {
  // @@protoc_insertion_point(field_add:clarifai.api.PatchAnnotationsRequest.annotations)
  return _internal_add_annotations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Annotation >&
PatchAnnotationsRequest::annotations() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PatchAnnotationsRequest.annotations)
  return annotations_;
}

// string action = 3;
inline void PatchAnnotationsRequest::clear_action() {
  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PatchAnnotationsRequest::action() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchAnnotationsRequest.action)
  return _internal_action();
}
inline void PatchAnnotationsRequest::set_action(const std::string& value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PatchAnnotationsRequest.action)
}
inline std::string* PatchAnnotationsRequest::mutable_action() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchAnnotationsRequest.action)
  return _internal_mutable_action();
}
inline const std::string& PatchAnnotationsRequest::_internal_action() const {
  return action_.GetNoArena();
}
inline void PatchAnnotationsRequest::_internal_set_action(const std::string& value) {
  
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PatchAnnotationsRequest::set_action(std::string&& value) {
  
  action_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.PatchAnnotationsRequest.action)
}
inline void PatchAnnotationsRequest::set_action(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.PatchAnnotationsRequest.action)
}
inline void PatchAnnotationsRequest::set_action(const char* value, size_t size) {
  
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PatchAnnotationsRequest.action)
}
inline std::string* PatchAnnotationsRequest::_internal_mutable_action() {
  
  return action_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PatchAnnotationsRequest::release_action() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchAnnotationsRequest.action)
  
  return action_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PatchAnnotationsRequest::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchAnnotationsRequest.action)
}

// -------------------------------------------------------------------

// DeleteAnnotationRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool DeleteAnnotationRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool DeleteAnnotationRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& DeleteAnnotationRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& DeleteAnnotationRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteAnnotationRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* DeleteAnnotationRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteAnnotationRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteAnnotationRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* DeleteAnnotationRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteAnnotationRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void DeleteAnnotationRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteAnnotationRequest.user_app_id)
}

// string input_id = 2;
inline void DeleteAnnotationRequest::clear_input_id() {
  input_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeleteAnnotationRequest::input_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteAnnotationRequest.input_id)
  return _internal_input_id();
}
inline void DeleteAnnotationRequest::set_input_id(const std::string& value) {
  _internal_set_input_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteAnnotationRequest.input_id)
}
inline std::string* DeleteAnnotationRequest::mutable_input_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteAnnotationRequest.input_id)
  return _internal_mutable_input_id();
}
inline const std::string& DeleteAnnotationRequest::_internal_input_id() const {
  return input_id_.GetNoArena();
}
inline void DeleteAnnotationRequest::_internal_set_input_id(const std::string& value) {
  
  input_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DeleteAnnotationRequest::set_input_id(std::string&& value) {
  
  input_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.DeleteAnnotationRequest.input_id)
}
inline void DeleteAnnotationRequest::set_input_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  input_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.DeleteAnnotationRequest.input_id)
}
inline void DeleteAnnotationRequest::set_input_id(const char* value, size_t size) {
  
  input_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.DeleteAnnotationRequest.input_id)
}
inline std::string* DeleteAnnotationRequest::_internal_mutable_input_id() {
  
  return input_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeleteAnnotationRequest::release_input_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteAnnotationRequest.input_id)
  
  return input_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteAnnotationRequest::set_allocated_input_id(std::string* input_id) {
  if (input_id != nullptr) {
    
  } else {
    
  }
  input_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), input_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteAnnotationRequest.input_id)
}

// string annotation_id = 3;
inline void DeleteAnnotationRequest::clear_annotation_id() {
  annotation_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeleteAnnotationRequest::annotation_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteAnnotationRequest.annotation_id)
  return _internal_annotation_id();
}
inline void DeleteAnnotationRequest::set_annotation_id(const std::string& value) {
  _internal_set_annotation_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteAnnotationRequest.annotation_id)
}
inline std::string* DeleteAnnotationRequest::mutable_annotation_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteAnnotationRequest.annotation_id)
  return _internal_mutable_annotation_id();
}
inline const std::string& DeleteAnnotationRequest::_internal_annotation_id() const {
  return annotation_id_.GetNoArena();
}
inline void DeleteAnnotationRequest::_internal_set_annotation_id(const std::string& value) {
  
  annotation_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DeleteAnnotationRequest::set_annotation_id(std::string&& value) {
  
  annotation_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.DeleteAnnotationRequest.annotation_id)
}
inline void DeleteAnnotationRequest::set_annotation_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  annotation_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.DeleteAnnotationRequest.annotation_id)
}
inline void DeleteAnnotationRequest::set_annotation_id(const char* value, size_t size) {
  
  annotation_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.DeleteAnnotationRequest.annotation_id)
}
inline std::string* DeleteAnnotationRequest::_internal_mutable_annotation_id() {
  
  return annotation_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeleteAnnotationRequest::release_annotation_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteAnnotationRequest.annotation_id)
  
  return annotation_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteAnnotationRequest::set_allocated_annotation_id(std::string* annotation_id) {
  if (annotation_id != nullptr) {
    
  } else {
    
  }
  annotation_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), annotation_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteAnnotationRequest.annotation_id)
}

// -------------------------------------------------------------------

// DeleteAnnotationsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool DeleteAnnotationsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool DeleteAnnotationsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& DeleteAnnotationsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& DeleteAnnotationsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteAnnotationsRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* DeleteAnnotationsRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteAnnotationsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteAnnotationsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* DeleteAnnotationsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteAnnotationsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void DeleteAnnotationsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteAnnotationsRequest.user_app_id)
}

// repeated string ids = 2;
inline int DeleteAnnotationsRequest::_internal_ids_size() const {
  return ids_.size();
}
inline int DeleteAnnotationsRequest::ids_size() const {
  return _internal_ids_size();
}
inline void DeleteAnnotationsRequest::clear_ids() {
  ids_.Clear();
}
inline std::string* DeleteAnnotationsRequest::add_ids() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.DeleteAnnotationsRequest.ids)
  return _internal_add_ids();
}
inline const std::string& DeleteAnnotationsRequest::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const std::string& DeleteAnnotationsRequest::ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteAnnotationsRequest.ids)
  return _internal_ids(index);
}
inline std::string* DeleteAnnotationsRequest::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteAnnotationsRequest.ids)
  return ids_.Mutable(index);
}
inline void DeleteAnnotationsRequest::set_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteAnnotationsRequest.ids)
  ids_.Mutable(index)->assign(value);
}
inline void DeleteAnnotationsRequest::set_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteAnnotationsRequest.ids)
  ids_.Mutable(index)->assign(std::move(value));
}
inline void DeleteAnnotationsRequest::set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.DeleteAnnotationsRequest.ids)
}
inline void DeleteAnnotationsRequest::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.DeleteAnnotationsRequest.ids)
}
inline std::string* DeleteAnnotationsRequest::_internal_add_ids() {
  return ids_.Add();
}
inline void DeleteAnnotationsRequest::add_ids(const std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.DeleteAnnotationsRequest.ids)
}
inline void DeleteAnnotationsRequest::add_ids(std::string&& value) {
  ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.DeleteAnnotationsRequest.ids)
}
inline void DeleteAnnotationsRequest::add_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.DeleteAnnotationsRequest.ids)
}
inline void DeleteAnnotationsRequest::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.DeleteAnnotationsRequest.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeleteAnnotationsRequest::ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.DeleteAnnotationsRequest.ids)
  return ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeleteAnnotationsRequest::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.DeleteAnnotationsRequest.ids)
  return &ids_;
}

// repeated string input_ids = 3;
inline int DeleteAnnotationsRequest::_internal_input_ids_size() const {
  return input_ids_.size();
}
inline int DeleteAnnotationsRequest::input_ids_size() const {
  return _internal_input_ids_size();
}
inline void DeleteAnnotationsRequest::clear_input_ids() {
  input_ids_.Clear();
}
inline std::string* DeleteAnnotationsRequest::add_input_ids() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.DeleteAnnotationsRequest.input_ids)
  return _internal_add_input_ids();
}
inline const std::string& DeleteAnnotationsRequest::_internal_input_ids(int index) const {
  return input_ids_.Get(index);
}
inline const std::string& DeleteAnnotationsRequest::input_ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteAnnotationsRequest.input_ids)
  return _internal_input_ids(index);
}
inline std::string* DeleteAnnotationsRequest::mutable_input_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteAnnotationsRequest.input_ids)
  return input_ids_.Mutable(index);
}
inline void DeleteAnnotationsRequest::set_input_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteAnnotationsRequest.input_ids)
  input_ids_.Mutable(index)->assign(value);
}
inline void DeleteAnnotationsRequest::set_input_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteAnnotationsRequest.input_ids)
  input_ids_.Mutable(index)->assign(std::move(value));
}
inline void DeleteAnnotationsRequest::set_input_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.DeleteAnnotationsRequest.input_ids)
}
inline void DeleteAnnotationsRequest::set_input_ids(int index, const char* value, size_t size) {
  input_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.DeleteAnnotationsRequest.input_ids)
}
inline std::string* DeleteAnnotationsRequest::_internal_add_input_ids() {
  return input_ids_.Add();
}
inline void DeleteAnnotationsRequest::add_input_ids(const std::string& value) {
  input_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.DeleteAnnotationsRequest.input_ids)
}
inline void DeleteAnnotationsRequest::add_input_ids(std::string&& value) {
  input_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.DeleteAnnotationsRequest.input_ids)
}
inline void DeleteAnnotationsRequest::add_input_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.DeleteAnnotationsRequest.input_ids)
}
inline void DeleteAnnotationsRequest::add_input_ids(const char* value, size_t size) {
  input_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.DeleteAnnotationsRequest.input_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeleteAnnotationsRequest::input_ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.DeleteAnnotationsRequest.input_ids)
  return input_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeleteAnnotationsRequest::mutable_input_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.DeleteAnnotationsRequest.input_ids)
  return &input_ids_;
}

// -------------------------------------------------------------------

// SingleAnnotationResponse

// .clarifai.api.status.Status status = 1;
inline bool SingleAnnotationResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SingleAnnotationResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& SingleAnnotationResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& SingleAnnotationResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleAnnotationResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* SingleAnnotationResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleAnnotationResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* SingleAnnotationResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* SingleAnnotationResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleAnnotationResponse.status)
  return _internal_mutable_status();
}
inline void SingleAnnotationResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleAnnotationResponse.status)
}

// .clarifai.api.Annotation annotation = 2;
inline bool SingleAnnotationResponse::_internal_has_annotation() const {
  return this != internal_default_instance() && annotation_ != nullptr;
}
inline bool SingleAnnotationResponse::has_annotation() const {
  return _internal_has_annotation();
}
inline const ::clarifai::api::Annotation& SingleAnnotationResponse::_internal_annotation() const {
  const ::clarifai::api::Annotation* p = annotation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Annotation*>(
      &::clarifai::api::_Annotation_default_instance_);
}
inline const ::clarifai::api::Annotation& SingleAnnotationResponse::annotation() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleAnnotationResponse.annotation)
  return _internal_annotation();
}
inline ::clarifai::api::Annotation* SingleAnnotationResponse::release_annotation() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleAnnotationResponse.annotation)
  
  ::clarifai::api::Annotation* temp = annotation_;
  annotation_ = nullptr;
  return temp;
}
inline ::clarifai::api::Annotation* SingleAnnotationResponse::_internal_mutable_annotation() {
  
  if (annotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Annotation>(GetArenaNoVirtual());
    annotation_ = p;
  }
  return annotation_;
}
inline ::clarifai::api::Annotation* SingleAnnotationResponse::mutable_annotation() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleAnnotationResponse.annotation)
  return _internal_mutable_annotation();
}
inline void SingleAnnotationResponse::set_allocated_annotation(::clarifai::api::Annotation* annotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(annotation_);
  }
  if (annotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      annotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, annotation, submessage_arena);
    }
    
  } else {
    
  }
  annotation_ = annotation;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleAnnotationResponse.annotation)
}

// -------------------------------------------------------------------

// MultiAnnotationResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiAnnotationResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiAnnotationResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiAnnotationResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiAnnotationResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiAnnotationResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* MultiAnnotationResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiAnnotationResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiAnnotationResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiAnnotationResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiAnnotationResponse.status)
  return _internal_mutable_status();
}
inline void MultiAnnotationResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiAnnotationResponse.status)
}

// repeated .clarifai.api.Annotation annotations = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int MultiAnnotationResponse::_internal_annotations_size() const {
  return annotations_.size();
}
inline int MultiAnnotationResponse::annotations_size() const {
  return _internal_annotations_size();
}
inline ::clarifai::api::Annotation* MultiAnnotationResponse::mutable_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiAnnotationResponse.annotations)
  return annotations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Annotation >*
MultiAnnotationResponse::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiAnnotationResponse.annotations)
  return &annotations_;
}
inline const ::clarifai::api::Annotation& MultiAnnotationResponse::_internal_annotations(int index) const {
  return annotations_.Get(index);
}
inline const ::clarifai::api::Annotation& MultiAnnotationResponse::annotations(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiAnnotationResponse.annotations)
  return _internal_annotations(index);
}
inline ::clarifai::api::Annotation* MultiAnnotationResponse::_internal_add_annotations() {
  return annotations_.Add();
}
inline ::clarifai::api::Annotation* MultiAnnotationResponse::add_annotations() {
  // @@protoc_insertion_point(field_add:clarifai.api.MultiAnnotationResponse.annotations)
  return _internal_add_annotations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Annotation >&
MultiAnnotationResponse::annotations() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiAnnotationResponse.annotations)
  return annotations_;
}

// -------------------------------------------------------------------

// GetAppRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool GetAppRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool GetAppRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& GetAppRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& GetAppRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetAppRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* GetAppRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetAppRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetAppRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* GetAppRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetAppRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void GetAppRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetAppRequest.user_app_id)
}

// -------------------------------------------------------------------

// ListAppsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool ListAppsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool ListAppsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& ListAppsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& ListAppsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListAppsRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* ListAppsRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListAppsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListAppsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* ListAppsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListAppsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void ListAppsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListAppsRequest.user_app_id)
}

// uint32 page = 2;
inline void ListAppsRequest::clear_page() {
  page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListAppsRequest::_internal_page() const {
  return page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListAppsRequest::page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListAppsRequest.page)
  return _internal_page();
}
inline void ListAppsRequest::_internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  page_ = value;
}
inline void ListAppsRequest::set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListAppsRequest.page)
}

// uint32 per_page = 3;
inline void ListAppsRequest::clear_per_page() {
  per_page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListAppsRequest::_internal_per_page() const {
  return per_page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListAppsRequest::per_page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListAppsRequest.per_page)
  return _internal_per_page();
}
inline void ListAppsRequest::_internal_set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  per_page_ = value;
}
inline void ListAppsRequest::set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_per_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListAppsRequest.per_page)
}

// -------------------------------------------------------------------

// PostAppsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostAppsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostAppsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostAppsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostAppsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostAppsRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* PostAppsRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostAppsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostAppsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostAppsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostAppsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void PostAppsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostAppsRequest.user_app_id)
}

// repeated .clarifai.api.App apps = 2;
inline int PostAppsRequest::_internal_apps_size() const {
  return apps_.size();
}
inline int PostAppsRequest::apps_size() const {
  return _internal_apps_size();
}
inline ::clarifai::api::App* PostAppsRequest::mutable_apps(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostAppsRequest.apps)
  return apps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::App >*
PostAppsRequest::mutable_apps() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostAppsRequest.apps)
  return &apps_;
}
inline const ::clarifai::api::App& PostAppsRequest::_internal_apps(int index) const {
  return apps_.Get(index);
}
inline const ::clarifai::api::App& PostAppsRequest::apps(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostAppsRequest.apps)
  return _internal_apps(index);
}
inline ::clarifai::api::App* PostAppsRequest::_internal_add_apps() {
  return apps_.Add();
}
inline ::clarifai::api::App* PostAppsRequest::add_apps() {
  // @@protoc_insertion_point(field_add:clarifai.api.PostAppsRequest.apps)
  return _internal_add_apps();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::App >&
PostAppsRequest::apps() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostAppsRequest.apps)
  return apps_;
}

// -------------------------------------------------------------------

// DeleteAppRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool DeleteAppRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool DeleteAppRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& DeleteAppRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& DeleteAppRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteAppRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* DeleteAppRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteAppRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteAppRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* DeleteAppRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteAppRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void DeleteAppRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteAppRequest.user_app_id)
}

// -------------------------------------------------------------------

// PatchAppsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PatchAppsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PatchAppsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PatchAppsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PatchAppsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchAppsRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* PatchAppsRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchAppsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchAppsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PatchAppsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchAppsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void PatchAppsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchAppsRequest.user_app_id)
}

// repeated .clarifai.api.App apps = 2;
inline int PatchAppsRequest::_internal_apps_size() const {
  return apps_.size();
}
inline int PatchAppsRequest::apps_size() const {
  return _internal_apps_size();
}
inline ::clarifai::api::App* PatchAppsRequest::mutable_apps(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchAppsRequest.apps)
  return apps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::App >*
PatchAppsRequest::mutable_apps() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PatchAppsRequest.apps)
  return &apps_;
}
inline const ::clarifai::api::App& PatchAppsRequest::_internal_apps(int index) const {
  return apps_.Get(index);
}
inline const ::clarifai::api::App& PatchAppsRequest::apps(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchAppsRequest.apps)
  return _internal_apps(index);
}
inline ::clarifai::api::App* PatchAppsRequest::_internal_add_apps() {
  return apps_.Add();
}
inline ::clarifai::api::App* PatchAppsRequest::add_apps() {
  // @@protoc_insertion_point(field_add:clarifai.api.PatchAppsRequest.apps)
  return _internal_add_apps();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::App >&
PatchAppsRequest::apps() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PatchAppsRequest.apps)
  return apps_;
}

// string action = 3;
inline void PatchAppsRequest::clear_action() {
  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PatchAppsRequest::action() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchAppsRequest.action)
  return _internal_action();
}
inline void PatchAppsRequest::set_action(const std::string& value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PatchAppsRequest.action)
}
inline std::string* PatchAppsRequest::mutable_action() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchAppsRequest.action)
  return _internal_mutable_action();
}
inline const std::string& PatchAppsRequest::_internal_action() const {
  return action_.GetNoArena();
}
inline void PatchAppsRequest::_internal_set_action(const std::string& value) {
  
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PatchAppsRequest::set_action(std::string&& value) {
  
  action_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.PatchAppsRequest.action)
}
inline void PatchAppsRequest::set_action(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.PatchAppsRequest.action)
}
inline void PatchAppsRequest::set_action(const char* value, size_t size) {
  
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PatchAppsRequest.action)
}
inline std::string* PatchAppsRequest::_internal_mutable_action() {
  
  return action_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PatchAppsRequest::release_action() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchAppsRequest.action)
  
  return action_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PatchAppsRequest::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchAppsRequest.action)
}

// .clarifai.api.PatchAction metadata_action = 4;
inline bool PatchAppsRequest::_internal_has_metadata_action() const {
  return this != internal_default_instance() && metadata_action_ != nullptr;
}
inline bool PatchAppsRequest::has_metadata_action() const {
  return _internal_has_metadata_action();
}
inline const ::clarifai::api::PatchAction& PatchAppsRequest::_internal_metadata_action() const {
  const ::clarifai::api::PatchAction* p = metadata_action_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::PatchAction*>(
      &::clarifai::api::_PatchAction_default_instance_);
}
inline const ::clarifai::api::PatchAction& PatchAppsRequest::metadata_action() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchAppsRequest.metadata_action)
  return _internal_metadata_action();
}
inline ::clarifai::api::PatchAction* PatchAppsRequest::release_metadata_action() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchAppsRequest.metadata_action)
  
  ::clarifai::api::PatchAction* temp = metadata_action_;
  metadata_action_ = nullptr;
  return temp;
}
inline ::clarifai::api::PatchAction* PatchAppsRequest::_internal_mutable_metadata_action() {
  
  if (metadata_action_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::PatchAction>(GetArenaNoVirtual());
    metadata_action_ = p;
  }
  return metadata_action_;
}
inline ::clarifai::api::PatchAction* PatchAppsRequest::mutable_metadata_action() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchAppsRequest.metadata_action)
  return _internal_mutable_metadata_action();
}
inline void PatchAppsRequest::set_allocated_metadata_action(::clarifai::api::PatchAction* metadata_action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_action_);
  }
  if (metadata_action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      metadata_action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata_action, submessage_arena);
    }
    
  } else {
    
  }
  metadata_action_ = metadata_action;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchAppsRequest.metadata_action)
}

// bool reindex = 5;
inline void PatchAppsRequest::clear_reindex() {
  reindex_ = false;
}
inline bool PatchAppsRequest::_internal_reindex() const {
  return reindex_;
}
inline bool PatchAppsRequest::reindex() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchAppsRequest.reindex)
  return _internal_reindex();
}
inline void PatchAppsRequest::_internal_set_reindex(bool value) {
  
  reindex_ = value;
}
inline void PatchAppsRequest::set_reindex(bool value) {
  _internal_set_reindex(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PatchAppsRequest.reindex)
}

// -------------------------------------------------------------------

// SingleAppResponse

// .clarifai.api.status.Status status = 1;
inline bool SingleAppResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SingleAppResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& SingleAppResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& SingleAppResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleAppResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* SingleAppResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleAppResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* SingleAppResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* SingleAppResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleAppResponse.status)
  return _internal_mutable_status();
}
inline void SingleAppResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleAppResponse.status)
}

// .clarifai.api.App app = 2;
inline bool SingleAppResponse::_internal_has_app() const {
  return this != internal_default_instance() && app_ != nullptr;
}
inline bool SingleAppResponse::has_app() const {
  return _internal_has_app();
}
inline const ::clarifai::api::App& SingleAppResponse::_internal_app() const {
  const ::clarifai::api::App* p = app_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::App*>(
      &::clarifai::api::_App_default_instance_);
}
inline const ::clarifai::api::App& SingleAppResponse::app() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleAppResponse.app)
  return _internal_app();
}
inline ::clarifai::api::App* SingleAppResponse::release_app() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleAppResponse.app)
  
  ::clarifai::api::App* temp = app_;
  app_ = nullptr;
  return temp;
}
inline ::clarifai::api::App* SingleAppResponse::_internal_mutable_app() {
  
  if (app_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::App>(GetArenaNoVirtual());
    app_ = p;
  }
  return app_;
}
inline ::clarifai::api::App* SingleAppResponse::mutable_app() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleAppResponse.app)
  return _internal_mutable_app();
}
inline void SingleAppResponse::set_allocated_app(::clarifai::api::App* app) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(app_);
  }
  if (app) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      app = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, app, submessage_arena);
    }
    
  } else {
    
  }
  app_ = app;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleAppResponse.app)
}

// -------------------------------------------------------------------

// MultiAppResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiAppResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiAppResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiAppResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiAppResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiAppResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* MultiAppResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiAppResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiAppResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiAppResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiAppResponse.status)
  return _internal_mutable_status();
}
inline void MultiAppResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiAppResponse.status)
}

// repeated .clarifai.api.App apps = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int MultiAppResponse::_internal_apps_size() const {
  return apps_.size();
}
inline int MultiAppResponse::apps_size() const {
  return _internal_apps_size();
}
inline ::clarifai::api::App* MultiAppResponse::mutable_apps(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiAppResponse.apps)
  return apps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::App >*
MultiAppResponse::mutable_apps() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiAppResponse.apps)
  return &apps_;
}
inline const ::clarifai::api::App& MultiAppResponse::_internal_apps(int index) const {
  return apps_.Get(index);
}
inline const ::clarifai::api::App& MultiAppResponse::apps(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiAppResponse.apps)
  return _internal_apps(index);
}
inline ::clarifai::api::App* MultiAppResponse::_internal_add_apps() {
  return apps_.Add();
}
inline ::clarifai::api::App* MultiAppResponse::add_apps() {
  // @@protoc_insertion_point(field_add:clarifai.api.MultiAppResponse.apps)
  return _internal_add_apps();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::App >&
MultiAppResponse::apps() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiAppResponse.apps)
  return apps_;
}

// -------------------------------------------------------------------

// ListCollaboratorsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool ListCollaboratorsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool ListCollaboratorsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& ListCollaboratorsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& ListCollaboratorsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListCollaboratorsRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* ListCollaboratorsRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListCollaboratorsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListCollaboratorsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* ListCollaboratorsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListCollaboratorsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void ListCollaboratorsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListCollaboratorsRequest.user_app_id)
}

// bool list_all_collaborators = 2;
inline void ListCollaboratorsRequest::clear_list_all_collaborators() {
  list_all_collaborators_ = false;
}
inline bool ListCollaboratorsRequest::_internal_list_all_collaborators() const {
  return list_all_collaborators_;
}
inline bool ListCollaboratorsRequest::list_all_collaborators() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListCollaboratorsRequest.list_all_collaborators)
  return _internal_list_all_collaborators();
}
inline void ListCollaboratorsRequest::_internal_set_list_all_collaborators(bool value) {
  
  list_all_collaborators_ = value;
}
inline void ListCollaboratorsRequest::set_list_all_collaborators(bool value) {
  _internal_set_list_all_collaborators(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListCollaboratorsRequest.list_all_collaborators)
}

// -------------------------------------------------------------------

// PostCollaboratorsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostCollaboratorsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostCollaboratorsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostCollaboratorsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostCollaboratorsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostCollaboratorsRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* PostCollaboratorsRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostCollaboratorsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostCollaboratorsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostCollaboratorsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostCollaboratorsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void PostCollaboratorsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostCollaboratorsRequest.user_app_id)
}

// repeated .clarifai.api.Collaborator collaborators = 2;
inline int PostCollaboratorsRequest::_internal_collaborators_size() const {
  return collaborators_.size();
}
inline int PostCollaboratorsRequest::collaborators_size() const {
  return _internal_collaborators_size();
}
inline ::clarifai::api::Collaborator* PostCollaboratorsRequest::mutable_collaborators(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostCollaboratorsRequest.collaborators)
  return collaborators_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collaborator >*
PostCollaboratorsRequest::mutable_collaborators() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostCollaboratorsRequest.collaborators)
  return &collaborators_;
}
inline const ::clarifai::api::Collaborator& PostCollaboratorsRequest::_internal_collaborators(int index) const {
  return collaborators_.Get(index);
}
inline const ::clarifai::api::Collaborator& PostCollaboratorsRequest::collaborators(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostCollaboratorsRequest.collaborators)
  return _internal_collaborators(index);
}
inline ::clarifai::api::Collaborator* PostCollaboratorsRequest::_internal_add_collaborators() {
  return collaborators_.Add();
}
inline ::clarifai::api::Collaborator* PostCollaboratorsRequest::add_collaborators() {
  // @@protoc_insertion_point(field_add:clarifai.api.PostCollaboratorsRequest.collaborators)
  return _internal_add_collaborators();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collaborator >&
PostCollaboratorsRequest::collaborators() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostCollaboratorsRequest.collaborators)
  return collaborators_;
}

// -------------------------------------------------------------------

// PatchCollaboratorsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PatchCollaboratorsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PatchCollaboratorsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PatchCollaboratorsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PatchCollaboratorsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchCollaboratorsRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* PatchCollaboratorsRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchCollaboratorsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchCollaboratorsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PatchCollaboratorsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchCollaboratorsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void PatchCollaboratorsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchCollaboratorsRequest.user_app_id)
}

// repeated .clarifai.api.Collaborator collaborators = 2;
inline int PatchCollaboratorsRequest::_internal_collaborators_size() const {
  return collaborators_.size();
}
inline int PatchCollaboratorsRequest::collaborators_size() const {
  return _internal_collaborators_size();
}
inline ::clarifai::api::Collaborator* PatchCollaboratorsRequest::mutable_collaborators(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchCollaboratorsRequest.collaborators)
  return collaborators_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collaborator >*
PatchCollaboratorsRequest::mutable_collaborators() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PatchCollaboratorsRequest.collaborators)
  return &collaborators_;
}
inline const ::clarifai::api::Collaborator& PatchCollaboratorsRequest::_internal_collaborators(int index) const {
  return collaborators_.Get(index);
}
inline const ::clarifai::api::Collaborator& PatchCollaboratorsRequest::collaborators(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchCollaboratorsRequest.collaborators)
  return _internal_collaborators(index);
}
inline ::clarifai::api::Collaborator* PatchCollaboratorsRequest::_internal_add_collaborators() {
  return collaborators_.Add();
}
inline ::clarifai::api::Collaborator* PatchCollaboratorsRequest::add_collaborators() {
  // @@protoc_insertion_point(field_add:clarifai.api.PatchCollaboratorsRequest.collaborators)
  return _internal_add_collaborators();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collaborator >&
PatchCollaboratorsRequest::collaborators() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PatchCollaboratorsRequest.collaborators)
  return collaborators_;
}

// string action = 3;
inline void PatchCollaboratorsRequest::clear_action() {
  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PatchCollaboratorsRequest::action() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchCollaboratorsRequest.action)
  return _internal_action();
}
inline void PatchCollaboratorsRequest::set_action(const std::string& value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PatchCollaboratorsRequest.action)
}
inline std::string* PatchCollaboratorsRequest::mutable_action() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchCollaboratorsRequest.action)
  return _internal_mutable_action();
}
inline const std::string& PatchCollaboratorsRequest::_internal_action() const {
  return action_.GetNoArena();
}
inline void PatchCollaboratorsRequest::_internal_set_action(const std::string& value) {
  
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PatchCollaboratorsRequest::set_action(std::string&& value) {
  
  action_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.PatchCollaboratorsRequest.action)
}
inline void PatchCollaboratorsRequest::set_action(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.PatchCollaboratorsRequest.action)
}
inline void PatchCollaboratorsRequest::set_action(const char* value, size_t size) {
  
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PatchCollaboratorsRequest.action)
}
inline std::string* PatchCollaboratorsRequest::_internal_mutable_action() {
  
  return action_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PatchCollaboratorsRequest::release_action() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchCollaboratorsRequest.action)
  
  return action_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PatchCollaboratorsRequest::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchCollaboratorsRequest.action)
}

// -------------------------------------------------------------------

// DeleteCollaboratorsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool DeleteCollaboratorsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool DeleteCollaboratorsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& DeleteCollaboratorsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& DeleteCollaboratorsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteCollaboratorsRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* DeleteCollaboratorsRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteCollaboratorsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteCollaboratorsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* DeleteCollaboratorsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteCollaboratorsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void DeleteCollaboratorsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteCollaboratorsRequest.user_app_id)
}

// repeated string collaborator_ids = 2;
inline int DeleteCollaboratorsRequest::_internal_collaborator_ids_size() const {
  return collaborator_ids_.size();
}
inline int DeleteCollaboratorsRequest::collaborator_ids_size() const {
  return _internal_collaborator_ids_size();
}
inline void DeleteCollaboratorsRequest::clear_collaborator_ids() {
  collaborator_ids_.Clear();
}
inline std::string* DeleteCollaboratorsRequest::add_collaborator_ids() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.DeleteCollaboratorsRequest.collaborator_ids)
  return _internal_add_collaborator_ids();
}
inline const std::string& DeleteCollaboratorsRequest::_internal_collaborator_ids(int index) const {
  return collaborator_ids_.Get(index);
}
inline const std::string& DeleteCollaboratorsRequest::collaborator_ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteCollaboratorsRequest.collaborator_ids)
  return _internal_collaborator_ids(index);
}
inline std::string* DeleteCollaboratorsRequest::mutable_collaborator_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteCollaboratorsRequest.collaborator_ids)
  return collaborator_ids_.Mutable(index);
}
inline void DeleteCollaboratorsRequest::set_collaborator_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteCollaboratorsRequest.collaborator_ids)
  collaborator_ids_.Mutable(index)->assign(value);
}
inline void DeleteCollaboratorsRequest::set_collaborator_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteCollaboratorsRequest.collaborator_ids)
  collaborator_ids_.Mutable(index)->assign(std::move(value));
}
inline void DeleteCollaboratorsRequest::set_collaborator_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  collaborator_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.DeleteCollaboratorsRequest.collaborator_ids)
}
inline void DeleteCollaboratorsRequest::set_collaborator_ids(int index, const char* value, size_t size) {
  collaborator_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.DeleteCollaboratorsRequest.collaborator_ids)
}
inline std::string* DeleteCollaboratorsRequest::_internal_add_collaborator_ids() {
  return collaborator_ids_.Add();
}
inline void DeleteCollaboratorsRequest::add_collaborator_ids(const std::string& value) {
  collaborator_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.DeleteCollaboratorsRequest.collaborator_ids)
}
inline void DeleteCollaboratorsRequest::add_collaborator_ids(std::string&& value) {
  collaborator_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.DeleteCollaboratorsRequest.collaborator_ids)
}
inline void DeleteCollaboratorsRequest::add_collaborator_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  collaborator_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.DeleteCollaboratorsRequest.collaborator_ids)
}
inline void DeleteCollaboratorsRequest::add_collaborator_ids(const char* value, size_t size) {
  collaborator_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.DeleteCollaboratorsRequest.collaborator_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeleteCollaboratorsRequest::collaborator_ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.DeleteCollaboratorsRequest.collaborator_ids)
  return collaborator_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeleteCollaboratorsRequest::mutable_collaborator_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.DeleteCollaboratorsRequest.collaborator_ids)
  return &collaborator_ids_;
}

// repeated string user_emails = 3;
inline int DeleteCollaboratorsRequest::_internal_user_emails_size() const {
  return user_emails_.size();
}
inline int DeleteCollaboratorsRequest::user_emails_size() const {
  return _internal_user_emails_size();
}
inline void DeleteCollaboratorsRequest::clear_user_emails() {
  user_emails_.Clear();
}
inline std::string* DeleteCollaboratorsRequest::add_user_emails() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.DeleteCollaboratorsRequest.user_emails)
  return _internal_add_user_emails();
}
inline const std::string& DeleteCollaboratorsRequest::_internal_user_emails(int index) const {
  return user_emails_.Get(index);
}
inline const std::string& DeleteCollaboratorsRequest::user_emails(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteCollaboratorsRequest.user_emails)
  return _internal_user_emails(index);
}
inline std::string* DeleteCollaboratorsRequest::mutable_user_emails(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteCollaboratorsRequest.user_emails)
  return user_emails_.Mutable(index);
}
inline void DeleteCollaboratorsRequest::set_user_emails(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteCollaboratorsRequest.user_emails)
  user_emails_.Mutable(index)->assign(value);
}
inline void DeleteCollaboratorsRequest::set_user_emails(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteCollaboratorsRequest.user_emails)
  user_emails_.Mutable(index)->assign(std::move(value));
}
inline void DeleteCollaboratorsRequest::set_user_emails(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  user_emails_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.DeleteCollaboratorsRequest.user_emails)
}
inline void DeleteCollaboratorsRequest::set_user_emails(int index, const char* value, size_t size) {
  user_emails_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.DeleteCollaboratorsRequest.user_emails)
}
inline std::string* DeleteCollaboratorsRequest::_internal_add_user_emails() {
  return user_emails_.Add();
}
inline void DeleteCollaboratorsRequest::add_user_emails(const std::string& value) {
  user_emails_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.DeleteCollaboratorsRequest.user_emails)
}
inline void DeleteCollaboratorsRequest::add_user_emails(std::string&& value) {
  user_emails_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.DeleteCollaboratorsRequest.user_emails)
}
inline void DeleteCollaboratorsRequest::add_user_emails(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  user_emails_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.DeleteCollaboratorsRequest.user_emails)
}
inline void DeleteCollaboratorsRequest::add_user_emails(const char* value, size_t size) {
  user_emails_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.DeleteCollaboratorsRequest.user_emails)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeleteCollaboratorsRequest::user_emails() const {
  // @@protoc_insertion_point(field_list:clarifai.api.DeleteCollaboratorsRequest.user_emails)
  return user_emails_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeleteCollaboratorsRequest::mutable_user_emails() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.DeleteCollaboratorsRequest.user_emails)
  return &user_emails_;
}

// -------------------------------------------------------------------

// MultiCollaboratorsResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiCollaboratorsResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiCollaboratorsResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiCollaboratorsResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiCollaboratorsResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiCollaboratorsResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* MultiCollaboratorsResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiCollaboratorsResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiCollaboratorsResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiCollaboratorsResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiCollaboratorsResponse.status)
  return _internal_mutable_status();
}
inline void MultiCollaboratorsResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiCollaboratorsResponse.status)
}

// repeated .clarifai.api.Collaborator collaborators = 2;
inline int MultiCollaboratorsResponse::_internal_collaborators_size() const {
  return collaborators_.size();
}
inline int MultiCollaboratorsResponse::collaborators_size() const {
  return _internal_collaborators_size();
}
inline ::clarifai::api::Collaborator* MultiCollaboratorsResponse::mutable_collaborators(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiCollaboratorsResponse.collaborators)
  return collaborators_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collaborator >*
MultiCollaboratorsResponse::mutable_collaborators() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiCollaboratorsResponse.collaborators)
  return &collaborators_;
}
inline const ::clarifai::api::Collaborator& MultiCollaboratorsResponse::_internal_collaborators(int index) const {
  return collaborators_.Get(index);
}
inline const ::clarifai::api::Collaborator& MultiCollaboratorsResponse::collaborators(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiCollaboratorsResponse.collaborators)
  return _internal_collaborators(index);
}
inline ::clarifai::api::Collaborator* MultiCollaboratorsResponse::_internal_add_collaborators() {
  return collaborators_.Add();
}
inline ::clarifai::api::Collaborator* MultiCollaboratorsResponse::add_collaborators() {
  // @@protoc_insertion_point(field_add:clarifai.api.MultiCollaboratorsResponse.collaborators)
  return _internal_add_collaborators();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collaborator >&
MultiCollaboratorsResponse::collaborators() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiCollaboratorsResponse.collaborators)
  return collaborators_;
}

// -------------------------------------------------------------------

// ListCollaborationsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool ListCollaborationsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool ListCollaborationsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& ListCollaborationsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& ListCollaborationsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListCollaborationsRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* ListCollaborationsRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListCollaborationsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListCollaborationsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* ListCollaborationsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListCollaborationsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void ListCollaborationsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListCollaborationsRequest.user_app_id)
}

// uint32 page = 2;
inline void ListCollaborationsRequest::clear_page() {
  page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListCollaborationsRequest::_internal_page() const {
  return page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListCollaborationsRequest::page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListCollaborationsRequest.page)
  return _internal_page();
}
inline void ListCollaborationsRequest::_internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  page_ = value;
}
inline void ListCollaborationsRequest::set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListCollaborationsRequest.page)
}

// uint32 per_page = 3;
inline void ListCollaborationsRequest::clear_per_page() {
  per_page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListCollaborationsRequest::_internal_per_page() const {
  return per_page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListCollaborationsRequest::per_page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListCollaborationsRequest.per_page)
  return _internal_per_page();
}
inline void ListCollaborationsRequest::_internal_set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  per_page_ = value;
}
inline void ListCollaborationsRequest::set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_per_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListCollaborationsRequest.per_page)
}

// -------------------------------------------------------------------

// MultiCollaborationsResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiCollaborationsResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiCollaborationsResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiCollaborationsResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiCollaborationsResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiCollaborationsResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* MultiCollaborationsResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiCollaborationsResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiCollaborationsResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiCollaborationsResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiCollaborationsResponse.status)
  return _internal_mutable_status();
}
inline void MultiCollaborationsResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiCollaborationsResponse.status)
}

// repeated .clarifai.api.Collaboration collaborations = 2;
inline int MultiCollaborationsResponse::_internal_collaborations_size() const {
  return collaborations_.size();
}
inline int MultiCollaborationsResponse::collaborations_size() const {
  return _internal_collaborations_size();
}
inline ::clarifai::api::Collaboration* MultiCollaborationsResponse::mutable_collaborations(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiCollaborationsResponse.collaborations)
  return collaborations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collaboration >*
MultiCollaborationsResponse::mutable_collaborations() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiCollaborationsResponse.collaborations)
  return &collaborations_;
}
inline const ::clarifai::api::Collaboration& MultiCollaborationsResponse::_internal_collaborations(int index) const {
  return collaborations_.Get(index);
}
inline const ::clarifai::api::Collaboration& MultiCollaborationsResponse::collaborations(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiCollaborationsResponse.collaborations)
  return _internal_collaborations(index);
}
inline ::clarifai::api::Collaboration* MultiCollaborationsResponse::_internal_add_collaborations() {
  return collaborations_.Add();
}
inline ::clarifai::api::Collaboration* MultiCollaborationsResponse::add_collaborations() {
  // @@protoc_insertion_point(field_add:clarifai.api.MultiCollaborationsResponse.collaborations)
  return _internal_add_collaborations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collaboration >&
MultiCollaborationsResponse::collaborations() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiCollaborationsResponse.collaborations)
  return collaborations_;
}

// -------------------------------------------------------------------

// PostVerifyEmailRequest

// string key = 1;
inline void PostVerifyEmailRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PostVerifyEmailRequest::key() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostVerifyEmailRequest.key)
  return _internal_key();
}
inline void PostVerifyEmailRequest::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PostVerifyEmailRequest.key)
}
inline std::string* PostVerifyEmailRequest::mutable_key() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostVerifyEmailRequest.key)
  return _internal_mutable_key();
}
inline const std::string& PostVerifyEmailRequest::_internal_key() const {
  return key_.GetNoArena();
}
inline void PostVerifyEmailRequest::_internal_set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PostVerifyEmailRequest::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.PostVerifyEmailRequest.key)
}
inline void PostVerifyEmailRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.PostVerifyEmailRequest.key)
}
inline void PostVerifyEmailRequest::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PostVerifyEmailRequest.key)
}
inline std::string* PostVerifyEmailRequest::_internal_mutable_key() {
  
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PostVerifyEmailRequest::release_key() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostVerifyEmailRequest.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PostVerifyEmailRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostVerifyEmailRequest.key)
}

// -------------------------------------------------------------------

// SingleVerifyEmailResponse

// .clarifai.api.status.Status status = 1;
inline bool SingleVerifyEmailResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SingleVerifyEmailResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& SingleVerifyEmailResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& SingleVerifyEmailResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleVerifyEmailResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* SingleVerifyEmailResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleVerifyEmailResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* SingleVerifyEmailResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* SingleVerifyEmailResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleVerifyEmailResponse.status)
  return _internal_mutable_status();
}
inline void SingleVerifyEmailResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleVerifyEmailResponse.status)
}

// -------------------------------------------------------------------

// ListAuthMethodsRequest

// -------------------------------------------------------------------

// ListAuthMethodsResponse

// .clarifai.api.status.Status status = 1;
inline bool ListAuthMethodsResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool ListAuthMethodsResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& ListAuthMethodsResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& ListAuthMethodsResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListAuthMethodsResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* ListAuthMethodsResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListAuthMethodsResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* ListAuthMethodsResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* ListAuthMethodsResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListAuthMethodsResponse.status)
  return _internal_mutable_status();
}
inline void ListAuthMethodsResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListAuthMethodsResponse.status)
}

// repeated .clarifai.api.AuthMethod auth_methods = 2;
inline int ListAuthMethodsResponse::_internal_auth_methods_size() const {
  return auth_methods_.size();
}
inline int ListAuthMethodsResponse::auth_methods_size() const {
  return _internal_auth_methods_size();
}
inline ::clarifai::api::AuthMethod* ListAuthMethodsResponse::mutable_auth_methods(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListAuthMethodsResponse.auth_methods)
  return auth_methods_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::AuthMethod >*
ListAuthMethodsResponse::mutable_auth_methods() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.ListAuthMethodsResponse.auth_methods)
  return &auth_methods_;
}
inline const ::clarifai::api::AuthMethod& ListAuthMethodsResponse::_internal_auth_methods(int index) const {
  return auth_methods_.Get(index);
}
inline const ::clarifai::api::AuthMethod& ListAuthMethodsResponse::auth_methods(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListAuthMethodsResponse.auth_methods)
  return _internal_auth_methods(index);
}
inline ::clarifai::api::AuthMethod* ListAuthMethodsResponse::_internal_add_auth_methods() {
  return auth_methods_.Add();
}
inline ::clarifai::api::AuthMethod* ListAuthMethodsResponse::add_auth_methods() {
  // @@protoc_insertion_point(field_add:clarifai.api.ListAuthMethodsResponse.auth_methods)
  return _internal_add_auth_methods();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::AuthMethod >&
ListAuthMethodsResponse::auth_methods() const {
  // @@protoc_insertion_point(field_list:clarifai.api.ListAuthMethodsResponse.auth_methods)
  return auth_methods_;
}

// -------------------------------------------------------------------

// RequestResetPasswordRequest

// string email = 1;
inline void RequestResetPasswordRequest::clear_email() {
  email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RequestResetPasswordRequest::email() const {
  // @@protoc_insertion_point(field_get:clarifai.api.RequestResetPasswordRequest.email)
  return _internal_email();
}
inline void RequestResetPasswordRequest::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:clarifai.api.RequestResetPasswordRequest.email)
}
inline std::string* RequestResetPasswordRequest::mutable_email() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.RequestResetPasswordRequest.email)
  return _internal_mutable_email();
}
inline const std::string& RequestResetPasswordRequest::_internal_email() const {
  return email_.GetNoArena();
}
inline void RequestResetPasswordRequest::_internal_set_email(const std::string& value) {
  
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RequestResetPasswordRequest::set_email(std::string&& value) {
  
  email_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.RequestResetPasswordRequest.email)
}
inline void RequestResetPasswordRequest::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.RequestResetPasswordRequest.email)
}
inline void RequestResetPasswordRequest::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.RequestResetPasswordRequest.email)
}
inline std::string* RequestResetPasswordRequest::_internal_mutable_email() {
  
  return email_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RequestResetPasswordRequest::release_email() {
  // @@protoc_insertion_point(field_release:clarifai.api.RequestResetPasswordRequest.email)
  
  return email_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RequestResetPasswordRequest::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.RequestResetPasswordRequest.email)
}

// -------------------------------------------------------------------

// CompleteResetPasswordRequest

// string key = 1;
inline void CompleteResetPasswordRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CompleteResetPasswordRequest::key() const {
  // @@protoc_insertion_point(field_get:clarifai.api.CompleteResetPasswordRequest.key)
  return _internal_key();
}
inline void CompleteResetPasswordRequest::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:clarifai.api.CompleteResetPasswordRequest.key)
}
inline std::string* CompleteResetPasswordRequest::mutable_key() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.CompleteResetPasswordRequest.key)
  return _internal_mutable_key();
}
inline const std::string& CompleteResetPasswordRequest::_internal_key() const {
  return key_.GetNoArena();
}
inline void CompleteResetPasswordRequest::_internal_set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CompleteResetPasswordRequest::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.CompleteResetPasswordRequest.key)
}
inline void CompleteResetPasswordRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.CompleteResetPasswordRequest.key)
}
inline void CompleteResetPasswordRequest::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.CompleteResetPasswordRequest.key)
}
inline std::string* CompleteResetPasswordRequest::_internal_mutable_key() {
  
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CompleteResetPasswordRequest::release_key() {
  // @@protoc_insertion_point(field_release:clarifai.api.CompleteResetPasswordRequest.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CompleteResetPasswordRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.CompleteResetPasswordRequest.key)
}

// string new_password = 2;
inline void CompleteResetPasswordRequest::clear_new_password() {
  new_password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CompleteResetPasswordRequest::new_password() const {
  // @@protoc_insertion_point(field_get:clarifai.api.CompleteResetPasswordRequest.new_password)
  return _internal_new_password();
}
inline void CompleteResetPasswordRequest::set_new_password(const std::string& value) {
  _internal_set_new_password(value);
  // @@protoc_insertion_point(field_set:clarifai.api.CompleteResetPasswordRequest.new_password)
}
inline std::string* CompleteResetPasswordRequest::mutable_new_password() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.CompleteResetPasswordRequest.new_password)
  return _internal_mutable_new_password();
}
inline const std::string& CompleteResetPasswordRequest::_internal_new_password() const {
  return new_password_.GetNoArena();
}
inline void CompleteResetPasswordRequest::_internal_set_new_password(const std::string& value) {
  
  new_password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CompleteResetPasswordRequest::set_new_password(std::string&& value) {
  
  new_password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.CompleteResetPasswordRequest.new_password)
}
inline void CompleteResetPasswordRequest::set_new_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  new_password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.CompleteResetPasswordRequest.new_password)
}
inline void CompleteResetPasswordRequest::set_new_password(const char* value, size_t size) {
  
  new_password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.CompleteResetPasswordRequest.new_password)
}
inline std::string* CompleteResetPasswordRequest::_internal_mutable_new_password() {
  
  return new_password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CompleteResetPasswordRequest::release_new_password() {
  // @@protoc_insertion_point(field_release:clarifai.api.CompleteResetPasswordRequest.new_password)
  
  return new_password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CompleteResetPasswordRequest::set_allocated_new_password(std::string* new_password) {
  if (new_password != nullptr) {
    
  } else {
    
  }
  new_password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), new_password);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.CompleteResetPasswordRequest.new_password)
}

// -------------------------------------------------------------------

// PostLoginRequest

// string email = 1;
inline void PostLoginRequest::clear_email() {
  email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PostLoginRequest::email() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostLoginRequest.email)
  return _internal_email();
}
inline void PostLoginRequest::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PostLoginRequest.email)
}
inline std::string* PostLoginRequest::mutable_email() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostLoginRequest.email)
  return _internal_mutable_email();
}
inline const std::string& PostLoginRequest::_internal_email() const {
  return email_.GetNoArena();
}
inline void PostLoginRequest::_internal_set_email(const std::string& value) {
  
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PostLoginRequest::set_email(std::string&& value) {
  
  email_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.PostLoginRequest.email)
}
inline void PostLoginRequest::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.PostLoginRequest.email)
}
inline void PostLoginRequest::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PostLoginRequest.email)
}
inline std::string* PostLoginRequest::_internal_mutable_email() {
  
  return email_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PostLoginRequest::release_email() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostLoginRequest.email)
  
  return email_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PostLoginRequest::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostLoginRequest.email)
}

// string password = 2;
inline void PostLoginRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PostLoginRequest::password() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostLoginRequest.password)
  return _internal_password();
}
inline void PostLoginRequest::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PostLoginRequest.password)
}
inline std::string* PostLoginRequest::mutable_password() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostLoginRequest.password)
  return _internal_mutable_password();
}
inline const std::string& PostLoginRequest::_internal_password() const {
  return password_.GetNoArena();
}
inline void PostLoginRequest::_internal_set_password(const std::string& value) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PostLoginRequest::set_password(std::string&& value) {
  
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.PostLoginRequest.password)
}
inline void PostLoginRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.PostLoginRequest.password)
}
inline void PostLoginRequest::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PostLoginRequest.password)
}
inline std::string* PostLoginRequest::_internal_mutable_password() {
  
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PostLoginRequest::release_password() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostLoginRequest.password)
  
  return password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PostLoginRequest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostLoginRequest.password)
}

// bool long_lived = 3;
inline void PostLoginRequest::clear_long_lived() {
  long_lived_ = false;
}
inline bool PostLoginRequest::_internal_long_lived() const {
  return long_lived_;
}
inline bool PostLoginRequest::long_lived() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostLoginRequest.long_lived)
  return _internal_long_lived();
}
inline void PostLoginRequest::_internal_set_long_lived(bool value) {
  
  long_lived_ = value;
}
inline void PostLoginRequest::set_long_lived(bool value) {
  _internal_set_long_lived(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PostLoginRequest.long_lived)
}

// -------------------------------------------------------------------

// PostSignupRequest

// string email = 1;
inline void PostSignupRequest::clear_email() {
  email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PostSignupRequest::email() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostSignupRequest.email)
  return _internal_email();
}
inline void PostSignupRequest::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PostSignupRequest.email)
}
inline std::string* PostSignupRequest::mutable_email() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostSignupRequest.email)
  return _internal_mutable_email();
}
inline const std::string& PostSignupRequest::_internal_email() const {
  return email_.GetNoArena();
}
inline void PostSignupRequest::_internal_set_email(const std::string& value) {
  
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PostSignupRequest::set_email(std::string&& value) {
  
  email_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.PostSignupRequest.email)
}
inline void PostSignupRequest::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.PostSignupRequest.email)
}
inline void PostSignupRequest::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PostSignupRequest.email)
}
inline std::string* PostSignupRequest::_internal_mutable_email() {
  
  return email_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PostSignupRequest::release_email() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostSignupRequest.email)
  
  return email_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PostSignupRequest::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostSignupRequest.email)
}

// string password = 2;
inline void PostSignupRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PostSignupRequest::password() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostSignupRequest.password)
  return _internal_password();
}
inline void PostSignupRequest::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PostSignupRequest.password)
}
inline std::string* PostSignupRequest::mutable_password() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostSignupRequest.password)
  return _internal_mutable_password();
}
inline const std::string& PostSignupRequest::_internal_password() const {
  return password_.GetNoArena();
}
inline void PostSignupRequest::_internal_set_password(const std::string& value) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PostSignupRequest::set_password(std::string&& value) {
  
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.PostSignupRequest.password)
}
inline void PostSignupRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.PostSignupRequest.password)
}
inline void PostSignupRequest::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PostSignupRequest.password)
}
inline std::string* PostSignupRequest::_internal_mutable_password() {
  
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PostSignupRequest::release_password() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostSignupRequest.password)
  
  return password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PostSignupRequest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostSignupRequest.password)
}

// string first_name = 3;
inline void PostSignupRequest::clear_first_name() {
  first_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PostSignupRequest::first_name() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostSignupRequest.first_name)
  return _internal_first_name();
}
inline void PostSignupRequest::set_first_name(const std::string& value) {
  _internal_set_first_name(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PostSignupRequest.first_name)
}
inline std::string* PostSignupRequest::mutable_first_name() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostSignupRequest.first_name)
  return _internal_mutable_first_name();
}
inline const std::string& PostSignupRequest::_internal_first_name() const {
  return first_name_.GetNoArena();
}
inline void PostSignupRequest::_internal_set_first_name(const std::string& value) {
  
  first_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PostSignupRequest::set_first_name(std::string&& value) {
  
  first_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.PostSignupRequest.first_name)
}
inline void PostSignupRequest::set_first_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  first_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.PostSignupRequest.first_name)
}
inline void PostSignupRequest::set_first_name(const char* value, size_t size) {
  
  first_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PostSignupRequest.first_name)
}
inline std::string* PostSignupRequest::_internal_mutable_first_name() {
  
  return first_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PostSignupRequest::release_first_name() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostSignupRequest.first_name)
  
  return first_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PostSignupRequest::set_allocated_first_name(std::string* first_name) {
  if (first_name != nullptr) {
    
  } else {
    
  }
  first_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), first_name);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostSignupRequest.first_name)
}

// string last_name = 4;
inline void PostSignupRequest::clear_last_name() {
  last_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PostSignupRequest::last_name() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostSignupRequest.last_name)
  return _internal_last_name();
}
inline void PostSignupRequest::set_last_name(const std::string& value) {
  _internal_set_last_name(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PostSignupRequest.last_name)
}
inline std::string* PostSignupRequest::mutable_last_name() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostSignupRequest.last_name)
  return _internal_mutable_last_name();
}
inline const std::string& PostSignupRequest::_internal_last_name() const {
  return last_name_.GetNoArena();
}
inline void PostSignupRequest::_internal_set_last_name(const std::string& value) {
  
  last_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PostSignupRequest::set_last_name(std::string&& value) {
  
  last_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.PostSignupRequest.last_name)
}
inline void PostSignupRequest::set_last_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  last_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.PostSignupRequest.last_name)
}
inline void PostSignupRequest::set_last_name(const char* value, size_t size) {
  
  last_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PostSignupRequest.last_name)
}
inline std::string* PostSignupRequest::_internal_mutable_last_name() {
  
  return last_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PostSignupRequest::release_last_name() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostSignupRequest.last_name)
  
  return last_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PostSignupRequest::set_allocated_last_name(std::string* last_name) {
  if (last_name != nullptr) {
    
  } else {
    
  }
  last_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_name);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostSignupRequest.last_name)
}

// string company_name = 5;
inline void PostSignupRequest::clear_company_name() {
  company_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PostSignupRequest::company_name() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostSignupRequest.company_name)
  return _internal_company_name();
}
inline void PostSignupRequest::set_company_name(const std::string& value) {
  _internal_set_company_name(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PostSignupRequest.company_name)
}
inline std::string* PostSignupRequest::mutable_company_name() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostSignupRequest.company_name)
  return _internal_mutable_company_name();
}
inline const std::string& PostSignupRequest::_internal_company_name() const {
  return company_name_.GetNoArena();
}
inline void PostSignupRequest::_internal_set_company_name(const std::string& value) {
  
  company_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PostSignupRequest::set_company_name(std::string&& value) {
  
  company_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.PostSignupRequest.company_name)
}
inline void PostSignupRequest::set_company_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  company_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.PostSignupRequest.company_name)
}
inline void PostSignupRequest::set_company_name(const char* value, size_t size) {
  
  company_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PostSignupRequest.company_name)
}
inline std::string* PostSignupRequest::_internal_mutable_company_name() {
  
  return company_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PostSignupRequest::release_company_name() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostSignupRequest.company_name)
  
  return company_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PostSignupRequest::set_allocated_company_name(std::string* company_name) {
  if (company_name != nullptr) {
    
  } else {
    
  }
  company_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), company_name);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostSignupRequest.company_name)
}

// string captcha_response_token = 6;
inline void PostSignupRequest::clear_captcha_response_token() {
  captcha_response_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PostSignupRequest::captcha_response_token() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostSignupRequest.captcha_response_token)
  return _internal_captcha_response_token();
}
inline void PostSignupRequest::set_captcha_response_token(const std::string& value) {
  _internal_set_captcha_response_token(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PostSignupRequest.captcha_response_token)
}
inline std::string* PostSignupRequest::mutable_captcha_response_token() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostSignupRequest.captcha_response_token)
  return _internal_mutable_captcha_response_token();
}
inline const std::string& PostSignupRequest::_internal_captcha_response_token() const {
  return captcha_response_token_.GetNoArena();
}
inline void PostSignupRequest::_internal_set_captcha_response_token(const std::string& value) {
  
  captcha_response_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PostSignupRequest::set_captcha_response_token(std::string&& value) {
  
  captcha_response_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.PostSignupRequest.captcha_response_token)
}
inline void PostSignupRequest::set_captcha_response_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  captcha_response_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.PostSignupRequest.captcha_response_token)
}
inline void PostSignupRequest::set_captcha_response_token(const char* value, size_t size) {
  
  captcha_response_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PostSignupRequest.captcha_response_token)
}
inline std::string* PostSignupRequest::_internal_mutable_captcha_response_token() {
  
  return captcha_response_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PostSignupRequest::release_captcha_response_token() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostSignupRequest.captcha_response_token)
  
  return captcha_response_token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PostSignupRequest::set_allocated_captcha_response_token(std::string* captcha_response_token) {
  if (captcha_response_token != nullptr) {
    
  } else {
    
  }
  captcha_response_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), captcha_response_token);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostSignupRequest.captcha_response_token)
}

// string aws_registration_token = 7;
inline void PostSignupRequest::clear_aws_registration_token() {
  aws_registration_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PostSignupRequest::aws_registration_token() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostSignupRequest.aws_registration_token)
  return _internal_aws_registration_token();
}
inline void PostSignupRequest::set_aws_registration_token(const std::string& value) {
  _internal_set_aws_registration_token(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PostSignupRequest.aws_registration_token)
}
inline std::string* PostSignupRequest::mutable_aws_registration_token() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostSignupRequest.aws_registration_token)
  return _internal_mutable_aws_registration_token();
}
inline const std::string& PostSignupRequest::_internal_aws_registration_token() const {
  return aws_registration_token_.GetNoArena();
}
inline void PostSignupRequest::_internal_set_aws_registration_token(const std::string& value) {
  
  aws_registration_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PostSignupRequest::set_aws_registration_token(std::string&& value) {
  
  aws_registration_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.PostSignupRequest.aws_registration_token)
}
inline void PostSignupRequest::set_aws_registration_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  aws_registration_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.PostSignupRequest.aws_registration_token)
}
inline void PostSignupRequest::set_aws_registration_token(const char* value, size_t size) {
  
  aws_registration_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PostSignupRequest.aws_registration_token)
}
inline std::string* PostSignupRequest::_internal_mutable_aws_registration_token() {
  
  return aws_registration_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PostSignupRequest::release_aws_registration_token() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostSignupRequest.aws_registration_token)
  
  return aws_registration_token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PostSignupRequest::set_allocated_aws_registration_token(std::string* aws_registration_token) {
  if (aws_registration_token != nullptr) {
    
  } else {
    
  }
  aws_registration_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), aws_registration_token);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostSignupRequest.aws_registration_token)
}

// bool gdpr_consent = 8;
inline void PostSignupRequest::clear_gdpr_consent() {
  gdpr_consent_ = false;
}
inline bool PostSignupRequest::_internal_gdpr_consent() const {
  return gdpr_consent_;
}
inline bool PostSignupRequest::gdpr_consent() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostSignupRequest.gdpr_consent)
  return _internal_gdpr_consent();
}
inline void PostSignupRequest::_internal_set_gdpr_consent(bool value) {
  
  gdpr_consent_ = value;
}
inline void PostSignupRequest::set_gdpr_consent(bool value) {
  _internal_set_gdpr_consent(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PostSignupRequest.gdpr_consent)
}

// bool tos_consent = 9;
inline void PostSignupRequest::clear_tos_consent() {
  tos_consent_ = false;
}
inline bool PostSignupRequest::_internal_tos_consent() const {
  return tos_consent_;
}
inline bool PostSignupRequest::tos_consent() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostSignupRequest.tos_consent)
  return _internal_tos_consent();
}
inline void PostSignupRequest::_internal_set_tos_consent(bool value) {
  
  tos_consent_ = value;
}
inline void PostSignupRequest::set_tos_consent(bool value) {
  _internal_set_tos_consent(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PostSignupRequest.tos_consent)
}

// bool marketing_consent = 10;
inline void PostSignupRequest::clear_marketing_consent() {
  marketing_consent_ = false;
}
inline bool PostSignupRequest::_internal_marketing_consent() const {
  return marketing_consent_;
}
inline bool PostSignupRequest::marketing_consent() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostSignupRequest.marketing_consent)
  return _internal_marketing_consent();
}
inline void PostSignupRequest::_internal_set_marketing_consent(bool value) {
  
  marketing_consent_ = value;
}
inline void PostSignupRequest::set_marketing_consent(bool value) {
  _internal_set_marketing_consent(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PostSignupRequest.marketing_consent)
}

// -------------------------------------------------------------------

// SingleLoginResponse

// .clarifai.api.status.Status status = 1;
inline bool SingleLoginResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SingleLoginResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& SingleLoginResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& SingleLoginResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleLoginResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* SingleLoginResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleLoginResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* SingleLoginResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* SingleLoginResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleLoginResponse.status)
  return _internal_mutable_status();
}
inline void SingleLoginResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleLoginResponse.status)
}

// string email = 2;
inline void SingleLoginResponse::clear_email() {
  email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SingleLoginResponse::email() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleLoginResponse.email)
  return _internal_email();
}
inline void SingleLoginResponse::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:clarifai.api.SingleLoginResponse.email)
}
inline std::string* SingleLoginResponse::mutable_email() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleLoginResponse.email)
  return _internal_mutable_email();
}
inline const std::string& SingleLoginResponse::_internal_email() const {
  return email_.GetNoArena();
}
inline void SingleLoginResponse::_internal_set_email(const std::string& value) {
  
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SingleLoginResponse::set_email(std::string&& value) {
  
  email_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.SingleLoginResponse.email)
}
inline void SingleLoginResponse::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.SingleLoginResponse.email)
}
inline void SingleLoginResponse::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.SingleLoginResponse.email)
}
inline std::string* SingleLoginResponse::_internal_mutable_email() {
  
  return email_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SingleLoginResponse::release_email() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleLoginResponse.email)
  
  return email_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SingleLoginResponse::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleLoginResponse.email)
}

// string first_name = 3;
inline void SingleLoginResponse::clear_first_name() {
  first_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SingleLoginResponse::first_name() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleLoginResponse.first_name)
  return _internal_first_name();
}
inline void SingleLoginResponse::set_first_name(const std::string& value) {
  _internal_set_first_name(value);
  // @@protoc_insertion_point(field_set:clarifai.api.SingleLoginResponse.first_name)
}
inline std::string* SingleLoginResponse::mutable_first_name() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleLoginResponse.first_name)
  return _internal_mutable_first_name();
}
inline const std::string& SingleLoginResponse::_internal_first_name() const {
  return first_name_.GetNoArena();
}
inline void SingleLoginResponse::_internal_set_first_name(const std::string& value) {
  
  first_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SingleLoginResponse::set_first_name(std::string&& value) {
  
  first_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.SingleLoginResponse.first_name)
}
inline void SingleLoginResponse::set_first_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  first_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.SingleLoginResponse.first_name)
}
inline void SingleLoginResponse::set_first_name(const char* value, size_t size) {
  
  first_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.SingleLoginResponse.first_name)
}
inline std::string* SingleLoginResponse::_internal_mutable_first_name() {
  
  return first_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SingleLoginResponse::release_first_name() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleLoginResponse.first_name)
  
  return first_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SingleLoginResponse::set_allocated_first_name(std::string* first_name) {
  if (first_name != nullptr) {
    
  } else {
    
  }
  first_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), first_name);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleLoginResponse.first_name)
}

// string last_name = 4;
inline void SingleLoginResponse::clear_last_name() {
  last_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SingleLoginResponse::last_name() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleLoginResponse.last_name)
  return _internal_last_name();
}
inline void SingleLoginResponse::set_last_name(const std::string& value) {
  _internal_set_last_name(value);
  // @@protoc_insertion_point(field_set:clarifai.api.SingleLoginResponse.last_name)
}
inline std::string* SingleLoginResponse::mutable_last_name() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleLoginResponse.last_name)
  return _internal_mutable_last_name();
}
inline const std::string& SingleLoginResponse::_internal_last_name() const {
  return last_name_.GetNoArena();
}
inline void SingleLoginResponse::_internal_set_last_name(const std::string& value) {
  
  last_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SingleLoginResponse::set_last_name(std::string&& value) {
  
  last_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.SingleLoginResponse.last_name)
}
inline void SingleLoginResponse::set_last_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  last_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.SingleLoginResponse.last_name)
}
inline void SingleLoginResponse::set_last_name(const char* value, size_t size) {
  
  last_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.SingleLoginResponse.last_name)
}
inline std::string* SingleLoginResponse::_internal_mutable_last_name() {
  
  return last_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SingleLoginResponse::release_last_name() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleLoginResponse.last_name)
  
  return last_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SingleLoginResponse::set_allocated_last_name(std::string* last_name) {
  if (last_name != nullptr) {
    
  } else {
    
  }
  last_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_name);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleLoginResponse.last_name)
}

// string company_name = 5;
inline void SingleLoginResponse::clear_company_name() {
  company_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SingleLoginResponse::company_name() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleLoginResponse.company_name)
  return _internal_company_name();
}
inline void SingleLoginResponse::set_company_name(const std::string& value) {
  _internal_set_company_name(value);
  // @@protoc_insertion_point(field_set:clarifai.api.SingleLoginResponse.company_name)
}
inline std::string* SingleLoginResponse::mutable_company_name() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleLoginResponse.company_name)
  return _internal_mutable_company_name();
}
inline const std::string& SingleLoginResponse::_internal_company_name() const {
  return company_name_.GetNoArena();
}
inline void SingleLoginResponse::_internal_set_company_name(const std::string& value) {
  
  company_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SingleLoginResponse::set_company_name(std::string&& value) {
  
  company_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.SingleLoginResponse.company_name)
}
inline void SingleLoginResponse::set_company_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  company_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.SingleLoginResponse.company_name)
}
inline void SingleLoginResponse::set_company_name(const char* value, size_t size) {
  
  company_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.SingleLoginResponse.company_name)
}
inline std::string* SingleLoginResponse::_internal_mutable_company_name() {
  
  return company_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SingleLoginResponse::release_company_name() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleLoginResponse.company_name)
  
  return company_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SingleLoginResponse::set_allocated_company_name(std::string* company_name) {
  if (company_name != nullptr) {
    
  } else {
    
  }
  company_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), company_name);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleLoginResponse.company_name)
}

// string date_joined = 6;
inline void SingleLoginResponse::clear_date_joined() {
  date_joined_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SingleLoginResponse::date_joined() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleLoginResponse.date_joined)
  return _internal_date_joined();
}
inline void SingleLoginResponse::set_date_joined(const std::string& value) {
  _internal_set_date_joined(value);
  // @@protoc_insertion_point(field_set:clarifai.api.SingleLoginResponse.date_joined)
}
inline std::string* SingleLoginResponse::mutable_date_joined() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleLoginResponse.date_joined)
  return _internal_mutable_date_joined();
}
inline const std::string& SingleLoginResponse::_internal_date_joined() const {
  return date_joined_.GetNoArena();
}
inline void SingleLoginResponse::_internal_set_date_joined(const std::string& value) {
  
  date_joined_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SingleLoginResponse::set_date_joined(std::string&& value) {
  
  date_joined_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.SingleLoginResponse.date_joined)
}
inline void SingleLoginResponse::set_date_joined(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  date_joined_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.SingleLoginResponse.date_joined)
}
inline void SingleLoginResponse::set_date_joined(const char* value, size_t size) {
  
  date_joined_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.SingleLoginResponse.date_joined)
}
inline std::string* SingleLoginResponse::_internal_mutable_date_joined() {
  
  return date_joined_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SingleLoginResponse::release_date_joined() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleLoginResponse.date_joined)
  
  return date_joined_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SingleLoginResponse::set_allocated_date_joined(std::string* date_joined) {
  if (date_joined != nullptr) {
    
  } else {
    
  }
  date_joined_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), date_joined);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleLoginResponse.date_joined)
}

// repeated .clarifai.api.EmailAddress email_addresses = 8;
inline int SingleLoginResponse::_internal_email_addresses_size() const {
  return email_addresses_.size();
}
inline int SingleLoginResponse::email_addresses_size() const {
  return _internal_email_addresses_size();
}
inline ::clarifai::api::EmailAddress* SingleLoginResponse::mutable_email_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleLoginResponse.email_addresses)
  return email_addresses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::EmailAddress >*
SingleLoginResponse::mutable_email_addresses() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.SingleLoginResponse.email_addresses)
  return &email_addresses_;
}
inline const ::clarifai::api::EmailAddress& SingleLoginResponse::_internal_email_addresses(int index) const {
  return email_addresses_.Get(index);
}
inline const ::clarifai::api::EmailAddress& SingleLoginResponse::email_addresses(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleLoginResponse.email_addresses)
  return _internal_email_addresses(index);
}
inline ::clarifai::api::EmailAddress* SingleLoginResponse::_internal_add_email_addresses() {
  return email_addresses_.Add();
}
inline ::clarifai::api::EmailAddress* SingleLoginResponse::add_email_addresses() {
  // @@protoc_insertion_point(field_add:clarifai.api.SingleLoginResponse.email_addresses)
  return _internal_add_email_addresses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::EmailAddress >&
SingleLoginResponse::email_addresses() const {
  // @@protoc_insertion_point(field_list:clarifai.api.SingleLoginResponse.email_addresses)
  return email_addresses_;
}

// string session_token = 9;
inline void SingleLoginResponse::clear_session_token() {
  session_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SingleLoginResponse::session_token() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleLoginResponse.session_token)
  return _internal_session_token();
}
inline void SingleLoginResponse::set_session_token(const std::string& value) {
  _internal_set_session_token(value);
  // @@protoc_insertion_point(field_set:clarifai.api.SingleLoginResponse.session_token)
}
inline std::string* SingleLoginResponse::mutable_session_token() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleLoginResponse.session_token)
  return _internal_mutable_session_token();
}
inline const std::string& SingleLoginResponse::_internal_session_token() const {
  return session_token_.GetNoArena();
}
inline void SingleLoginResponse::_internal_set_session_token(const std::string& value) {
  
  session_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SingleLoginResponse::set_session_token(std::string&& value) {
  
  session_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.SingleLoginResponse.session_token)
}
inline void SingleLoginResponse::set_session_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.SingleLoginResponse.session_token)
}
inline void SingleLoginResponse::set_session_token(const char* value, size_t size) {
  
  session_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.SingleLoginResponse.session_token)
}
inline std::string* SingleLoginResponse::_internal_mutable_session_token() {
  
  return session_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SingleLoginResponse::release_session_token() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleLoginResponse.session_token)
  
  return session_token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SingleLoginResponse::set_allocated_session_token(std::string* session_token) {
  if (session_token != nullptr) {
    
  } else {
    
  }
  session_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_token);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleLoginResponse.session_token)
}

// string token_expires = 10;
inline void SingleLoginResponse::clear_token_expires() {
  token_expires_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SingleLoginResponse::token_expires() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleLoginResponse.token_expires)
  return _internal_token_expires();
}
inline void SingleLoginResponse::set_token_expires(const std::string& value) {
  _internal_set_token_expires(value);
  // @@protoc_insertion_point(field_set:clarifai.api.SingleLoginResponse.token_expires)
}
inline std::string* SingleLoginResponse::mutable_token_expires() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleLoginResponse.token_expires)
  return _internal_mutable_token_expires();
}
inline const std::string& SingleLoginResponse::_internal_token_expires() const {
  return token_expires_.GetNoArena();
}
inline void SingleLoginResponse::_internal_set_token_expires(const std::string& value) {
  
  token_expires_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SingleLoginResponse::set_token_expires(std::string&& value) {
  
  token_expires_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.SingleLoginResponse.token_expires)
}
inline void SingleLoginResponse::set_token_expires(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_expires_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.SingleLoginResponse.token_expires)
}
inline void SingleLoginResponse::set_token_expires(const char* value, size_t size) {
  
  token_expires_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.SingleLoginResponse.token_expires)
}
inline std::string* SingleLoginResponse::_internal_mutable_token_expires() {
  
  return token_expires_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SingleLoginResponse::release_token_expires() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleLoginResponse.token_expires)
  
  return token_expires_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SingleLoginResponse::set_allocated_token_expires(std::string* token_expires) {
  if (token_expires != nullptr) {
    
  } else {
    
  }
  token_expires_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token_expires);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleLoginResponse.token_expires)
}

// string v2_user_id = 11;
inline void SingleLoginResponse::clear_v2_user_id() {
  v2_user_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SingleLoginResponse::v2_user_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleLoginResponse.v2_user_id)
  return _internal_v2_user_id();
}
inline void SingleLoginResponse::set_v2_user_id(const std::string& value) {
  _internal_set_v2_user_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.SingleLoginResponse.v2_user_id)
}
inline std::string* SingleLoginResponse::mutable_v2_user_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleLoginResponse.v2_user_id)
  return _internal_mutable_v2_user_id();
}
inline const std::string& SingleLoginResponse::_internal_v2_user_id() const {
  return v2_user_id_.GetNoArena();
}
inline void SingleLoginResponse::_internal_set_v2_user_id(const std::string& value) {
  
  v2_user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SingleLoginResponse::set_v2_user_id(std::string&& value) {
  
  v2_user_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.SingleLoginResponse.v2_user_id)
}
inline void SingleLoginResponse::set_v2_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  v2_user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.SingleLoginResponse.v2_user_id)
}
inline void SingleLoginResponse::set_v2_user_id(const char* value, size_t size) {
  
  v2_user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.SingleLoginResponse.v2_user_id)
}
inline std::string* SingleLoginResponse::_internal_mutable_v2_user_id() {
  
  return v2_user_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SingleLoginResponse::release_v2_user_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleLoginResponse.v2_user_id)
  
  return v2_user_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SingleLoginResponse::set_allocated_v2_user_id(std::string* v2_user_id) {
  if (v2_user_id != nullptr) {
    
  } else {
    
  }
  v2_user_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), v2_user_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleLoginResponse.v2_user_id)
}

// string date_gdpr_consent = 12;
inline void SingleLoginResponse::clear_date_gdpr_consent() {
  date_gdpr_consent_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SingleLoginResponse::date_gdpr_consent() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleLoginResponse.date_gdpr_consent)
  return _internal_date_gdpr_consent();
}
inline void SingleLoginResponse::set_date_gdpr_consent(const std::string& value) {
  _internal_set_date_gdpr_consent(value);
  // @@protoc_insertion_point(field_set:clarifai.api.SingleLoginResponse.date_gdpr_consent)
}
inline std::string* SingleLoginResponse::mutable_date_gdpr_consent() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleLoginResponse.date_gdpr_consent)
  return _internal_mutable_date_gdpr_consent();
}
inline const std::string& SingleLoginResponse::_internal_date_gdpr_consent() const {
  return date_gdpr_consent_.GetNoArena();
}
inline void SingleLoginResponse::_internal_set_date_gdpr_consent(const std::string& value) {
  
  date_gdpr_consent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SingleLoginResponse::set_date_gdpr_consent(std::string&& value) {
  
  date_gdpr_consent_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.SingleLoginResponse.date_gdpr_consent)
}
inline void SingleLoginResponse::set_date_gdpr_consent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  date_gdpr_consent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.SingleLoginResponse.date_gdpr_consent)
}
inline void SingleLoginResponse::set_date_gdpr_consent(const char* value, size_t size) {
  
  date_gdpr_consent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.SingleLoginResponse.date_gdpr_consent)
}
inline std::string* SingleLoginResponse::_internal_mutable_date_gdpr_consent() {
  
  return date_gdpr_consent_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SingleLoginResponse::release_date_gdpr_consent() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleLoginResponse.date_gdpr_consent)
  
  return date_gdpr_consent_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SingleLoginResponse::set_allocated_date_gdpr_consent(std::string* date_gdpr_consent) {
  if (date_gdpr_consent != nullptr) {
    
  } else {
    
  }
  date_gdpr_consent_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), date_gdpr_consent);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleLoginResponse.date_gdpr_consent)
}

// string date_tos_consent = 13;
inline void SingleLoginResponse::clear_date_tos_consent() {
  date_tos_consent_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SingleLoginResponse::date_tos_consent() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleLoginResponse.date_tos_consent)
  return _internal_date_tos_consent();
}
inline void SingleLoginResponse::set_date_tos_consent(const std::string& value) {
  _internal_set_date_tos_consent(value);
  // @@protoc_insertion_point(field_set:clarifai.api.SingleLoginResponse.date_tos_consent)
}
inline std::string* SingleLoginResponse::mutable_date_tos_consent() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleLoginResponse.date_tos_consent)
  return _internal_mutable_date_tos_consent();
}
inline const std::string& SingleLoginResponse::_internal_date_tos_consent() const {
  return date_tos_consent_.GetNoArena();
}
inline void SingleLoginResponse::_internal_set_date_tos_consent(const std::string& value) {
  
  date_tos_consent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SingleLoginResponse::set_date_tos_consent(std::string&& value) {
  
  date_tos_consent_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.SingleLoginResponse.date_tos_consent)
}
inline void SingleLoginResponse::set_date_tos_consent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  date_tos_consent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.SingleLoginResponse.date_tos_consent)
}
inline void SingleLoginResponse::set_date_tos_consent(const char* value, size_t size) {
  
  date_tos_consent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.SingleLoginResponse.date_tos_consent)
}
inline std::string* SingleLoginResponse::_internal_mutable_date_tos_consent() {
  
  return date_tos_consent_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SingleLoginResponse::release_date_tos_consent() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleLoginResponse.date_tos_consent)
  
  return date_tos_consent_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SingleLoginResponse::set_allocated_date_tos_consent(std::string* date_tos_consent) {
  if (date_tos_consent != nullptr) {
    
  } else {
    
  }
  date_tos_consent_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), date_tos_consent);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleLoginResponse.date_tos_consent)
}

// string date_marketing_consent = 14;
inline void SingleLoginResponse::clear_date_marketing_consent() {
  date_marketing_consent_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SingleLoginResponse::date_marketing_consent() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleLoginResponse.date_marketing_consent)
  return _internal_date_marketing_consent();
}
inline void SingleLoginResponse::set_date_marketing_consent(const std::string& value) {
  _internal_set_date_marketing_consent(value);
  // @@protoc_insertion_point(field_set:clarifai.api.SingleLoginResponse.date_marketing_consent)
}
inline std::string* SingleLoginResponse::mutable_date_marketing_consent() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleLoginResponse.date_marketing_consent)
  return _internal_mutable_date_marketing_consent();
}
inline const std::string& SingleLoginResponse::_internal_date_marketing_consent() const {
  return date_marketing_consent_.GetNoArena();
}
inline void SingleLoginResponse::_internal_set_date_marketing_consent(const std::string& value) {
  
  date_marketing_consent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SingleLoginResponse::set_date_marketing_consent(std::string&& value) {
  
  date_marketing_consent_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.SingleLoginResponse.date_marketing_consent)
}
inline void SingleLoginResponse::set_date_marketing_consent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  date_marketing_consent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.SingleLoginResponse.date_marketing_consent)
}
inline void SingleLoginResponse::set_date_marketing_consent(const char* value, size_t size) {
  
  date_marketing_consent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.SingleLoginResponse.date_marketing_consent)
}
inline std::string* SingleLoginResponse::_internal_mutable_date_marketing_consent() {
  
  return date_marketing_consent_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SingleLoginResponse::release_date_marketing_consent() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleLoginResponse.date_marketing_consent)
  
  return date_marketing_consent_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SingleLoginResponse::set_allocated_date_marketing_consent(std::string* date_marketing_consent) {
  if (date_marketing_consent != nullptr) {
    
  } else {
    
  }
  date_marketing_consent_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), date_marketing_consent);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleLoginResponse.date_marketing_consent)
}

// string password_expired_at = 15;
inline void SingleLoginResponse::clear_password_expired_at() {
  password_expired_at_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SingleLoginResponse::password_expired_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleLoginResponse.password_expired_at)
  return _internal_password_expired_at();
}
inline void SingleLoginResponse::set_password_expired_at(const std::string& value) {
  _internal_set_password_expired_at(value);
  // @@protoc_insertion_point(field_set:clarifai.api.SingleLoginResponse.password_expired_at)
}
inline std::string* SingleLoginResponse::mutable_password_expired_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleLoginResponse.password_expired_at)
  return _internal_mutable_password_expired_at();
}
inline const std::string& SingleLoginResponse::_internal_password_expired_at() const {
  return password_expired_at_.GetNoArena();
}
inline void SingleLoginResponse::_internal_set_password_expired_at(const std::string& value) {
  
  password_expired_at_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SingleLoginResponse::set_password_expired_at(std::string&& value) {
  
  password_expired_at_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.SingleLoginResponse.password_expired_at)
}
inline void SingleLoginResponse::set_password_expired_at(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_expired_at_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.SingleLoginResponse.password_expired_at)
}
inline void SingleLoginResponse::set_password_expired_at(const char* value, size_t size) {
  
  password_expired_at_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.SingleLoginResponse.password_expired_at)
}
inline std::string* SingleLoginResponse::_internal_mutable_password_expired_at() {
  
  return password_expired_at_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SingleLoginResponse::release_password_expired_at() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleLoginResponse.password_expired_at)
  
  return password_expired_at_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SingleLoginResponse::set_allocated_password_expired_at(std::string* password_expired_at) {
  if (password_expired_at != nullptr) {
    
  } else {
    
  }
  password_expired_at_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password_expired_at);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleLoginResponse.password_expired_at)
}

// bool is_new_user = 16;
inline void SingleLoginResponse::clear_is_new_user() {
  is_new_user_ = false;
}
inline bool SingleLoginResponse::_internal_is_new_user() const {
  return is_new_user_;
}
inline bool SingleLoginResponse::is_new_user() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleLoginResponse.is_new_user)
  return _internal_is_new_user();
}
inline void SingleLoginResponse::_internal_set_is_new_user(bool value) {
  
  is_new_user_ = value;
}
inline void SingleLoginResponse::set_is_new_user(bool value) {
  _internal_set_is_new_user(value);
  // @@protoc_insertion_point(field_set:clarifai.api.SingleLoginResponse.is_new_user)
}

// -------------------------------------------------------------------

// GetBillingUsageRequest

// -------------------------------------------------------------------

// GetBillingUsageResponse

// .clarifai.api.status.Status status = 1;
inline bool GetBillingUsageResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool GetBillingUsageResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& GetBillingUsageResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& GetBillingUsageResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetBillingUsageResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* GetBillingUsageResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetBillingUsageResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* GetBillingUsageResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* GetBillingUsageResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetBillingUsageResponse.status)
  return _internal_mutable_status();
}
inline void GetBillingUsageResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetBillingUsageResponse.status)
}

// repeated .clarifai.api.InvoiceItem invoice_items = 2;
inline int GetBillingUsageResponse::_internal_invoice_items_size() const {
  return invoice_items_.size();
}
inline int GetBillingUsageResponse::invoice_items_size() const {
  return _internal_invoice_items_size();
}
inline ::clarifai::api::InvoiceItem* GetBillingUsageResponse::mutable_invoice_items(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetBillingUsageResponse.invoice_items)
  return invoice_items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::InvoiceItem >*
GetBillingUsageResponse::mutable_invoice_items() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.GetBillingUsageResponse.invoice_items)
  return &invoice_items_;
}
inline const ::clarifai::api::InvoiceItem& GetBillingUsageResponse::_internal_invoice_items(int index) const {
  return invoice_items_.Get(index);
}
inline const ::clarifai::api::InvoiceItem& GetBillingUsageResponse::invoice_items(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetBillingUsageResponse.invoice_items)
  return _internal_invoice_items(index);
}
inline ::clarifai::api::InvoiceItem* GetBillingUsageResponse::_internal_add_invoice_items() {
  return invoice_items_.Add();
}
inline ::clarifai::api::InvoiceItem* GetBillingUsageResponse::add_invoice_items() {
  // @@protoc_insertion_point(field_add:clarifai.api.GetBillingUsageResponse.invoice_items)
  return _internal_add_invoice_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::InvoiceItem >&
GetBillingUsageResponse::invoice_items() const {
  // @@protoc_insertion_point(field_list:clarifai.api.GetBillingUsageResponse.invoice_items)
  return invoice_items_;
}

// .clarifai.api.BillingCycle billing_cycle = 3;
inline bool GetBillingUsageResponse::_internal_has_billing_cycle() const {
  return this != internal_default_instance() && billing_cycle_ != nullptr;
}
inline bool GetBillingUsageResponse::has_billing_cycle() const {
  return _internal_has_billing_cycle();
}
inline const ::clarifai::api::BillingCycle& GetBillingUsageResponse::_internal_billing_cycle() const {
  const ::clarifai::api::BillingCycle* p = billing_cycle_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::BillingCycle*>(
      &::clarifai::api::_BillingCycle_default_instance_);
}
inline const ::clarifai::api::BillingCycle& GetBillingUsageResponse::billing_cycle() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetBillingUsageResponse.billing_cycle)
  return _internal_billing_cycle();
}
inline ::clarifai::api::BillingCycle* GetBillingUsageResponse::release_billing_cycle() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetBillingUsageResponse.billing_cycle)
  
  ::clarifai::api::BillingCycle* temp = billing_cycle_;
  billing_cycle_ = nullptr;
  return temp;
}
inline ::clarifai::api::BillingCycle* GetBillingUsageResponse::_internal_mutable_billing_cycle() {
  
  if (billing_cycle_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::BillingCycle>(GetArenaNoVirtual());
    billing_cycle_ = p;
  }
  return billing_cycle_;
}
inline ::clarifai::api::BillingCycle* GetBillingUsageResponse::mutable_billing_cycle() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetBillingUsageResponse.billing_cycle)
  return _internal_mutable_billing_cycle();
}
inline void GetBillingUsageResponse::set_allocated_billing_cycle(::clarifai::api::BillingCycle* billing_cycle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(billing_cycle_);
  }
  if (billing_cycle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      billing_cycle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, billing_cycle, submessage_arena);
    }
    
  } else {
    
  }
  billing_cycle_ = billing_cycle;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetBillingUsageResponse.billing_cycle)
}

// -------------------------------------------------------------------

// GetStatusCodeRequest

// string status_code_id = 1;
inline void GetStatusCodeRequest::clear_status_code_id() {
  status_code_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetStatusCodeRequest::status_code_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetStatusCodeRequest.status_code_id)
  return _internal_status_code_id();
}
inline void GetStatusCodeRequest::set_status_code_id(const std::string& value) {
  _internal_set_status_code_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.GetStatusCodeRequest.status_code_id)
}
inline std::string* GetStatusCodeRequest::mutable_status_code_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetStatusCodeRequest.status_code_id)
  return _internal_mutable_status_code_id();
}
inline const std::string& GetStatusCodeRequest::_internal_status_code_id() const {
  return status_code_id_.GetNoArena();
}
inline void GetStatusCodeRequest::_internal_set_status_code_id(const std::string& value) {
  
  status_code_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetStatusCodeRequest::set_status_code_id(std::string&& value) {
  
  status_code_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.GetStatusCodeRequest.status_code_id)
}
inline void GetStatusCodeRequest::set_status_code_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_code_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.GetStatusCodeRequest.status_code_id)
}
inline void GetStatusCodeRequest::set_status_code_id(const char* value, size_t size) {
  
  status_code_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.GetStatusCodeRequest.status_code_id)
}
inline std::string* GetStatusCodeRequest::_internal_mutable_status_code_id() {
  
  return status_code_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetStatusCodeRequest::release_status_code_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetStatusCodeRequest.status_code_id)
  
  return status_code_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetStatusCodeRequest::set_allocated_status_code_id(std::string* status_code_id) {
  if (status_code_id != nullptr) {
    
  } else {
    
  }
  status_code_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status_code_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetStatusCodeRequest.status_code_id)
}

// -------------------------------------------------------------------

// ListStatusCodesRequest

// -------------------------------------------------------------------

// SingleStatusCodeResponse

// .clarifai.api.status.Status status = 1;
inline bool SingleStatusCodeResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SingleStatusCodeResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& SingleStatusCodeResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& SingleStatusCodeResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleStatusCodeResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* SingleStatusCodeResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleStatusCodeResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* SingleStatusCodeResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* SingleStatusCodeResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleStatusCodeResponse.status)
  return _internal_mutable_status();
}
inline void SingleStatusCodeResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleStatusCodeResponse.status)
}

// -------------------------------------------------------------------

// MultiStatusCodeResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiStatusCodeResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiStatusCodeResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiStatusCodeResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiStatusCodeResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiStatusCodeResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* MultiStatusCodeResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiStatusCodeResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiStatusCodeResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiStatusCodeResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiStatusCodeResponse.status)
  return _internal_mutable_status();
}
inline void MultiStatusCodeResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiStatusCodeResponse.status)
}

// repeated .clarifai.api.status.Status statuses = 2;
inline int MultiStatusCodeResponse::_internal_statuses_size() const {
  return statuses_.size();
}
inline int MultiStatusCodeResponse::statuses_size() const {
  return _internal_statuses_size();
}
inline ::clarifai::api::status::Status* MultiStatusCodeResponse::mutable_statuses(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiStatusCodeResponse.statuses)
  return statuses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::status::Status >*
MultiStatusCodeResponse::mutable_statuses() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiStatusCodeResponse.statuses)
  return &statuses_;
}
inline const ::clarifai::api::status::Status& MultiStatusCodeResponse::_internal_statuses(int index) const {
  return statuses_.Get(index);
}
inline const ::clarifai::api::status::Status& MultiStatusCodeResponse::statuses(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiStatusCodeResponse.statuses)
  return _internal_statuses(index);
}
inline ::clarifai::api::status::Status* MultiStatusCodeResponse::_internal_add_statuses() {
  return statuses_.Add();
}
inline ::clarifai::api::status::Status* MultiStatusCodeResponse::add_statuses() {
  // @@protoc_insertion_point(field_add:clarifai.api.MultiStatusCodeResponse.statuses)
  return _internal_add_statuses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::status::Status >&
MultiStatusCodeResponse::statuses() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiStatusCodeResponse.statuses)
  return statuses_;
}

// -------------------------------------------------------------------

// GetConceptRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool GetConceptRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool GetConceptRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& GetConceptRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& GetConceptRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetConceptRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* GetConceptRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetConceptRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetConceptRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* GetConceptRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetConceptRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void GetConceptRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetConceptRequest.user_app_id)
}

// string concept_id = 2;
inline void GetConceptRequest::clear_concept_id() {
  concept_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetConceptRequest::concept_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetConceptRequest.concept_id)
  return _internal_concept_id();
}
inline void GetConceptRequest::set_concept_id(const std::string& value) {
  _internal_set_concept_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.GetConceptRequest.concept_id)
}
inline std::string* GetConceptRequest::mutable_concept_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetConceptRequest.concept_id)
  return _internal_mutable_concept_id();
}
inline const std::string& GetConceptRequest::_internal_concept_id() const {
  return concept_id_.GetNoArena();
}
inline void GetConceptRequest::_internal_set_concept_id(const std::string& value) {
  
  concept_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetConceptRequest::set_concept_id(std::string&& value) {
  
  concept_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.GetConceptRequest.concept_id)
}
inline void GetConceptRequest::set_concept_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  concept_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.GetConceptRequest.concept_id)
}
inline void GetConceptRequest::set_concept_id(const char* value, size_t size) {
  
  concept_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.GetConceptRequest.concept_id)
}
inline std::string* GetConceptRequest::_internal_mutable_concept_id() {
  
  return concept_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetConceptRequest::release_concept_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetConceptRequest.concept_id)
  
  return concept_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetConceptRequest::set_allocated_concept_id(std::string* concept_id) {
  if (concept_id != nullptr) {
    
  } else {
    
  }
  concept_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), concept_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetConceptRequest.concept_id)
}

// -------------------------------------------------------------------

// ListConceptsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool ListConceptsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool ListConceptsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& ListConceptsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& ListConceptsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListConceptsRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* ListConceptsRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListConceptsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListConceptsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* ListConceptsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListConceptsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void ListConceptsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListConceptsRequest.user_app_id)
}

// uint32 page = 2;
inline void ListConceptsRequest::clear_page() {
  page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListConceptsRequest::_internal_page() const {
  return page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListConceptsRequest::page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListConceptsRequest.page)
  return _internal_page();
}
inline void ListConceptsRequest::_internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  page_ = value;
}
inline void ListConceptsRequest::set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListConceptsRequest.page)
}

// uint32 per_page = 3;
inline void ListConceptsRequest::clear_per_page() {
  per_page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListConceptsRequest::_internal_per_page() const {
  return per_page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListConceptsRequest::per_page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListConceptsRequest.per_page)
  return _internal_per_page();
}
inline void ListConceptsRequest::_internal_set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  per_page_ = value;
}
inline void ListConceptsRequest::set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_per_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListConceptsRequest.per_page)
}

// -------------------------------------------------------------------

// PostConceptsSearchesRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostConceptsSearchesRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostConceptsSearchesRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostConceptsSearchesRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostConceptsSearchesRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostConceptsSearchesRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* PostConceptsSearchesRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostConceptsSearchesRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostConceptsSearchesRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostConceptsSearchesRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostConceptsSearchesRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void PostConceptsSearchesRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostConceptsSearchesRequest.user_app_id)
}

// .clarifai.api.ConceptQuery concept_query = 2;
inline bool PostConceptsSearchesRequest::_internal_has_concept_query() const {
  return this != internal_default_instance() && concept_query_ != nullptr;
}
inline bool PostConceptsSearchesRequest::has_concept_query() const {
  return _internal_has_concept_query();
}
inline const ::clarifai::api::ConceptQuery& PostConceptsSearchesRequest::_internal_concept_query() const {
  const ::clarifai::api::ConceptQuery* p = concept_query_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::ConceptQuery*>(
      &::clarifai::api::_ConceptQuery_default_instance_);
}
inline const ::clarifai::api::ConceptQuery& PostConceptsSearchesRequest::concept_query() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostConceptsSearchesRequest.concept_query)
  return _internal_concept_query();
}
inline ::clarifai::api::ConceptQuery* PostConceptsSearchesRequest::release_concept_query() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostConceptsSearchesRequest.concept_query)
  
  ::clarifai::api::ConceptQuery* temp = concept_query_;
  concept_query_ = nullptr;
  return temp;
}
inline ::clarifai::api::ConceptQuery* PostConceptsSearchesRequest::_internal_mutable_concept_query() {
  
  if (concept_query_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::ConceptQuery>(GetArenaNoVirtual());
    concept_query_ = p;
  }
  return concept_query_;
}
inline ::clarifai::api::ConceptQuery* PostConceptsSearchesRequest::mutable_concept_query() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostConceptsSearchesRequest.concept_query)
  return _internal_mutable_concept_query();
}
inline void PostConceptsSearchesRequest::set_allocated_concept_query(::clarifai::api::ConceptQuery* concept_query) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(concept_query_);
  }
  if (concept_query) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      concept_query = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, concept_query, submessage_arena);
    }
    
  } else {
    
  }
  concept_query_ = concept_query;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostConceptsSearchesRequest.concept_query)
}

// .clarifai.api.Pagination pagination = 3;
inline bool PostConceptsSearchesRequest::_internal_has_pagination() const {
  return this != internal_default_instance() && pagination_ != nullptr;
}
inline bool PostConceptsSearchesRequest::has_pagination() const {
  return _internal_has_pagination();
}
inline void PostConceptsSearchesRequest::clear_pagination() {
  if (GetArenaNoVirtual() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
}
inline const ::clarifai::api::Pagination& PostConceptsSearchesRequest::_internal_pagination() const {
  const ::clarifai::api::Pagination* p = pagination_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Pagination*>(
      &::clarifai::api::_Pagination_default_instance_);
}
inline const ::clarifai::api::Pagination& PostConceptsSearchesRequest::pagination() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostConceptsSearchesRequest.pagination)
  return _internal_pagination();
}
inline ::clarifai::api::Pagination* PostConceptsSearchesRequest::release_pagination() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostConceptsSearchesRequest.pagination)
  
  ::clarifai::api::Pagination* temp = pagination_;
  pagination_ = nullptr;
  return temp;
}
inline ::clarifai::api::Pagination* PostConceptsSearchesRequest::_internal_mutable_pagination() {
  
  if (pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Pagination>(GetArenaNoVirtual());
    pagination_ = p;
  }
  return pagination_;
}
inline ::clarifai::api::Pagination* PostConceptsSearchesRequest::mutable_pagination() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostConceptsSearchesRequest.pagination)
  return _internal_mutable_pagination();
}
inline void PostConceptsSearchesRequest::set_allocated_pagination(::clarifai::api::Pagination* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pagination_;
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    
  } else {
    
  }
  pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostConceptsSearchesRequest.pagination)
}

// -------------------------------------------------------------------

// PostConceptsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostConceptsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostConceptsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostConceptsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostConceptsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostConceptsRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* PostConceptsRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostConceptsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostConceptsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostConceptsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostConceptsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void PostConceptsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostConceptsRequest.user_app_id)
}

// repeated .clarifai.api.Concept concepts = 2;
inline int PostConceptsRequest::_internal_concepts_size() const {
  return concepts_.size();
}
inline int PostConceptsRequest::concepts_size() const {
  return _internal_concepts_size();
}
inline ::clarifai::api::Concept* PostConceptsRequest::mutable_concepts(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostConceptsRequest.concepts)
  return concepts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >*
PostConceptsRequest::mutable_concepts() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostConceptsRequest.concepts)
  return &concepts_;
}
inline const ::clarifai::api::Concept& PostConceptsRequest::_internal_concepts(int index) const {
  return concepts_.Get(index);
}
inline const ::clarifai::api::Concept& PostConceptsRequest::concepts(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostConceptsRequest.concepts)
  return _internal_concepts(index);
}
inline ::clarifai::api::Concept* PostConceptsRequest::_internal_add_concepts() {
  return concepts_.Add();
}
inline ::clarifai::api::Concept* PostConceptsRequest::add_concepts() {
  // @@protoc_insertion_point(field_add:clarifai.api.PostConceptsRequest.concepts)
  return _internal_add_concepts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >&
PostConceptsRequest::concepts() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostConceptsRequest.concepts)
  return concepts_;
}

// -------------------------------------------------------------------

// PatchConceptsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PatchConceptsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PatchConceptsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PatchConceptsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PatchConceptsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchConceptsRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* PatchConceptsRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchConceptsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchConceptsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PatchConceptsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchConceptsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void PatchConceptsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchConceptsRequest.user_app_id)
}

// repeated .clarifai.api.Concept concepts = 2;
inline int PatchConceptsRequest::_internal_concepts_size() const {
  return concepts_.size();
}
inline int PatchConceptsRequest::concepts_size() const {
  return _internal_concepts_size();
}
inline ::clarifai::api::Concept* PatchConceptsRequest::mutable_concepts(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchConceptsRequest.concepts)
  return concepts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >*
PatchConceptsRequest::mutable_concepts() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PatchConceptsRequest.concepts)
  return &concepts_;
}
inline const ::clarifai::api::Concept& PatchConceptsRequest::_internal_concepts(int index) const {
  return concepts_.Get(index);
}
inline const ::clarifai::api::Concept& PatchConceptsRequest::concepts(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchConceptsRequest.concepts)
  return _internal_concepts(index);
}
inline ::clarifai::api::Concept* PatchConceptsRequest::_internal_add_concepts() {
  return concepts_.Add();
}
inline ::clarifai::api::Concept* PatchConceptsRequest::add_concepts() {
  // @@protoc_insertion_point(field_add:clarifai.api.PatchConceptsRequest.concepts)
  return _internal_add_concepts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >&
PatchConceptsRequest::concepts() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PatchConceptsRequest.concepts)
  return concepts_;
}

// string action = 3;
inline void PatchConceptsRequest::clear_action() {
  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PatchConceptsRequest::action() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchConceptsRequest.action)
  return _internal_action();
}
inline void PatchConceptsRequest::set_action(const std::string& value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PatchConceptsRequest.action)
}
inline std::string* PatchConceptsRequest::mutable_action() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchConceptsRequest.action)
  return _internal_mutable_action();
}
inline const std::string& PatchConceptsRequest::_internal_action() const {
  return action_.GetNoArena();
}
inline void PatchConceptsRequest::_internal_set_action(const std::string& value) {
  
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PatchConceptsRequest::set_action(std::string&& value) {
  
  action_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.PatchConceptsRequest.action)
}
inline void PatchConceptsRequest::set_action(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.PatchConceptsRequest.action)
}
inline void PatchConceptsRequest::set_action(const char* value, size_t size) {
  
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PatchConceptsRequest.action)
}
inline std::string* PatchConceptsRequest::_internal_mutable_action() {
  
  return action_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PatchConceptsRequest::release_action() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchConceptsRequest.action)
  
  return action_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PatchConceptsRequest::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchConceptsRequest.action)
}

// -------------------------------------------------------------------

// GetConceptCountsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool GetConceptCountsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool GetConceptCountsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& GetConceptCountsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& GetConceptCountsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetConceptCountsRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* GetConceptCountsRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetConceptCountsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetConceptCountsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* GetConceptCountsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetConceptCountsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void GetConceptCountsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetConceptCountsRequest.user_app_id)
}

// uint32 page = 2;
inline void GetConceptCountsRequest::clear_page() {
  page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetConceptCountsRequest::_internal_page() const {
  return page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetConceptCountsRequest::page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetConceptCountsRequest.page)
  return _internal_page();
}
inline void GetConceptCountsRequest::_internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  page_ = value;
}
inline void GetConceptCountsRequest::set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.GetConceptCountsRequest.page)
}

// uint32 per_page = 3;
inline void GetConceptCountsRequest::clear_per_page() {
  per_page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetConceptCountsRequest::_internal_per_page() const {
  return per_page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetConceptCountsRequest::per_page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetConceptCountsRequest.per_page)
  return _internal_per_page();
}
inline void GetConceptCountsRequest::_internal_set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  per_page_ = value;
}
inline void GetConceptCountsRequest::set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_per_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.GetConceptCountsRequest.per_page)
}

// -------------------------------------------------------------------

// SingleConceptResponse

// .clarifai.api.status.Status status = 1;
inline bool SingleConceptResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SingleConceptResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& SingleConceptResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& SingleConceptResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleConceptResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* SingleConceptResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleConceptResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* SingleConceptResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* SingleConceptResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleConceptResponse.status)
  return _internal_mutable_status();
}
inline void SingleConceptResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleConceptResponse.status)
}

// .clarifai.api.Concept concept = 2;
inline bool SingleConceptResponse::_internal_has_concept() const {
  return this != internal_default_instance() && concept_ != nullptr;
}
inline bool SingleConceptResponse::has_concept() const {
  return _internal_has_concept();
}
inline const ::clarifai::api::Concept& SingleConceptResponse::_internal_concept() const {
  const ::clarifai::api::Concept* p = concept_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Concept*>(
      &::clarifai::api::_Concept_default_instance_);
}
inline const ::clarifai::api::Concept& SingleConceptResponse::concept() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleConceptResponse.concept)
  return _internal_concept();
}
inline ::clarifai::api::Concept* SingleConceptResponse::release_concept() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleConceptResponse.concept)
  
  ::clarifai::api::Concept* temp = concept_;
  concept_ = nullptr;
  return temp;
}
inline ::clarifai::api::Concept* SingleConceptResponse::_internal_mutable_concept() {
  
  if (concept_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Concept>(GetArenaNoVirtual());
    concept_ = p;
  }
  return concept_;
}
inline ::clarifai::api::Concept* SingleConceptResponse::mutable_concept() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleConceptResponse.concept)
  return _internal_mutable_concept();
}
inline void SingleConceptResponse::set_allocated_concept(::clarifai::api::Concept* concept) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(concept_);
  }
  if (concept) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      concept = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, concept, submessage_arena);
    }
    
  } else {
    
  }
  concept_ = concept;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleConceptResponse.concept)
}

// -------------------------------------------------------------------

// MultiConceptResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiConceptResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiConceptResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiConceptResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiConceptResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiConceptResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* MultiConceptResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiConceptResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiConceptResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiConceptResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiConceptResponse.status)
  return _internal_mutable_status();
}
inline void MultiConceptResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiConceptResponse.status)
}

// repeated .clarifai.api.Concept concepts = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int MultiConceptResponse::_internal_concepts_size() const {
  return concepts_.size();
}
inline int MultiConceptResponse::concepts_size() const {
  return _internal_concepts_size();
}
inline ::clarifai::api::Concept* MultiConceptResponse::mutable_concepts(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiConceptResponse.concepts)
  return concepts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >*
MultiConceptResponse::mutable_concepts() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiConceptResponse.concepts)
  return &concepts_;
}
inline const ::clarifai::api::Concept& MultiConceptResponse::_internal_concepts(int index) const {
  return concepts_.Get(index);
}
inline const ::clarifai::api::Concept& MultiConceptResponse::concepts(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiConceptResponse.concepts)
  return _internal_concepts(index);
}
inline ::clarifai::api::Concept* MultiConceptResponse::_internal_add_concepts() {
  return concepts_.Add();
}
inline ::clarifai::api::Concept* MultiConceptResponse::add_concepts() {
  // @@protoc_insertion_point(field_add:clarifai.api.MultiConceptResponse.concepts)
  return _internal_add_concepts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >&
MultiConceptResponse::concepts() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiConceptResponse.concepts)
  return concepts_;
}

// -------------------------------------------------------------------

// MultiConceptCountResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiConceptCountResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiConceptCountResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiConceptCountResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiConceptCountResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiConceptCountResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* MultiConceptCountResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiConceptCountResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiConceptCountResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiConceptCountResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiConceptCountResponse.status)
  return _internal_mutable_status();
}
inline void MultiConceptCountResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiConceptCountResponse.status)
}

// repeated .clarifai.api.ConceptCount concept_counts = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int MultiConceptCountResponse::_internal_concept_counts_size() const {
  return concept_counts_.size();
}
inline int MultiConceptCountResponse::concept_counts_size() const {
  return _internal_concept_counts_size();
}
inline ::clarifai::api::ConceptCount* MultiConceptCountResponse::mutable_concept_counts(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiConceptCountResponse.concept_counts)
  return concept_counts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptCount >*
MultiConceptCountResponse::mutable_concept_counts() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiConceptCountResponse.concept_counts)
  return &concept_counts_;
}
inline const ::clarifai::api::ConceptCount& MultiConceptCountResponse::_internal_concept_counts(int index) const {
  return concept_counts_.Get(index);
}
inline const ::clarifai::api::ConceptCount& MultiConceptCountResponse::concept_counts(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiConceptCountResponse.concept_counts)
  return _internal_concept_counts(index);
}
inline ::clarifai::api::ConceptCount* MultiConceptCountResponse::_internal_add_concept_counts() {
  return concept_counts_.Add();
}
inline ::clarifai::api::ConceptCount* MultiConceptCountResponse::add_concept_counts() {
  // @@protoc_insertion_point(field_add:clarifai.api.MultiConceptCountResponse.concept_counts)
  return _internal_add_concept_counts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptCount >&
MultiConceptCountResponse::concept_counts() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiConceptCountResponse.concept_counts)
  return concept_counts_;
}

// -------------------------------------------------------------------

// ListConceptRelationsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool ListConceptRelationsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool ListConceptRelationsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& ListConceptRelationsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& ListConceptRelationsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListConceptRelationsRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* ListConceptRelationsRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListConceptRelationsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListConceptRelationsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* ListConceptRelationsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListConceptRelationsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void ListConceptRelationsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListConceptRelationsRequest.user_app_id)
}

// string concept_id = 2;
inline void ListConceptRelationsRequest::clear_concept_id() {
  concept_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ListConceptRelationsRequest::concept_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListConceptRelationsRequest.concept_id)
  return _internal_concept_id();
}
inline void ListConceptRelationsRequest::set_concept_id(const std::string& value) {
  _internal_set_concept_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListConceptRelationsRequest.concept_id)
}
inline std::string* ListConceptRelationsRequest::mutable_concept_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListConceptRelationsRequest.concept_id)
  return _internal_mutable_concept_id();
}
inline const std::string& ListConceptRelationsRequest::_internal_concept_id() const {
  return concept_id_.GetNoArena();
}
inline void ListConceptRelationsRequest::_internal_set_concept_id(const std::string& value) {
  
  concept_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ListConceptRelationsRequest::set_concept_id(std::string&& value) {
  
  concept_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ListConceptRelationsRequest.concept_id)
}
inline void ListConceptRelationsRequest::set_concept_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  concept_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.ListConceptRelationsRequest.concept_id)
}
inline void ListConceptRelationsRequest::set_concept_id(const char* value, size_t size) {
  
  concept_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ListConceptRelationsRequest.concept_id)
}
inline std::string* ListConceptRelationsRequest::_internal_mutable_concept_id() {
  
  return concept_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ListConceptRelationsRequest::release_concept_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListConceptRelationsRequest.concept_id)
  
  return concept_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ListConceptRelationsRequest::set_allocated_concept_id(std::string* concept_id) {
  if (concept_id != nullptr) {
    
  } else {
    
  }
  concept_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), concept_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListConceptRelationsRequest.concept_id)
}

// string predicate = 3;
inline void ListConceptRelationsRequest::clear_predicate() {
  predicate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ListConceptRelationsRequest::predicate() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListConceptRelationsRequest.predicate)
  return _internal_predicate();
}
inline void ListConceptRelationsRequest::set_predicate(const std::string& value) {
  _internal_set_predicate(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListConceptRelationsRequest.predicate)
}
inline std::string* ListConceptRelationsRequest::mutable_predicate() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListConceptRelationsRequest.predicate)
  return _internal_mutable_predicate();
}
inline const std::string& ListConceptRelationsRequest::_internal_predicate() const {
  return predicate_.GetNoArena();
}
inline void ListConceptRelationsRequest::_internal_set_predicate(const std::string& value) {
  
  predicate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ListConceptRelationsRequest::set_predicate(std::string&& value) {
  
  predicate_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ListConceptRelationsRequest.predicate)
}
inline void ListConceptRelationsRequest::set_predicate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  predicate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.ListConceptRelationsRequest.predicate)
}
inline void ListConceptRelationsRequest::set_predicate(const char* value, size_t size) {
  
  predicate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ListConceptRelationsRequest.predicate)
}
inline std::string* ListConceptRelationsRequest::_internal_mutable_predicate() {
  
  return predicate_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ListConceptRelationsRequest::release_predicate() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListConceptRelationsRequest.predicate)
  
  return predicate_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ListConceptRelationsRequest::set_allocated_predicate(std::string* predicate) {
  if (predicate != nullptr) {
    
  } else {
    
  }
  predicate_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), predicate);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListConceptRelationsRequest.predicate)
}

// string knowledge_graph_id = 4;
inline void ListConceptRelationsRequest::clear_knowledge_graph_id() {
  knowledge_graph_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ListConceptRelationsRequest::knowledge_graph_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListConceptRelationsRequest.knowledge_graph_id)
  return _internal_knowledge_graph_id();
}
inline void ListConceptRelationsRequest::set_knowledge_graph_id(const std::string& value) {
  _internal_set_knowledge_graph_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListConceptRelationsRequest.knowledge_graph_id)
}
inline std::string* ListConceptRelationsRequest::mutable_knowledge_graph_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListConceptRelationsRequest.knowledge_graph_id)
  return _internal_mutable_knowledge_graph_id();
}
inline const std::string& ListConceptRelationsRequest::_internal_knowledge_graph_id() const {
  return knowledge_graph_id_.GetNoArena();
}
inline void ListConceptRelationsRequest::_internal_set_knowledge_graph_id(const std::string& value) {
  
  knowledge_graph_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ListConceptRelationsRequest::set_knowledge_graph_id(std::string&& value) {
  
  knowledge_graph_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ListConceptRelationsRequest.knowledge_graph_id)
}
inline void ListConceptRelationsRequest::set_knowledge_graph_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  knowledge_graph_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.ListConceptRelationsRequest.knowledge_graph_id)
}
inline void ListConceptRelationsRequest::set_knowledge_graph_id(const char* value, size_t size) {
  
  knowledge_graph_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ListConceptRelationsRequest.knowledge_graph_id)
}
inline std::string* ListConceptRelationsRequest::_internal_mutable_knowledge_graph_id() {
  
  return knowledge_graph_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ListConceptRelationsRequest::release_knowledge_graph_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListConceptRelationsRequest.knowledge_graph_id)
  
  return knowledge_graph_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ListConceptRelationsRequest::set_allocated_knowledge_graph_id(std::string* knowledge_graph_id) {
  if (knowledge_graph_id != nullptr) {
    
  } else {
    
  }
  knowledge_graph_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), knowledge_graph_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListConceptRelationsRequest.knowledge_graph_id)
}

// uint32 page = 5;
inline void ListConceptRelationsRequest::clear_page() {
  page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListConceptRelationsRequest::_internal_page() const {
  return page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListConceptRelationsRequest::page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListConceptRelationsRequest.page)
  return _internal_page();
}
inline void ListConceptRelationsRequest::_internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  page_ = value;
}
inline void ListConceptRelationsRequest::set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListConceptRelationsRequest.page)
}

// uint32 per_page = 6;
inline void ListConceptRelationsRequest::clear_per_page() {
  per_page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListConceptRelationsRequest::_internal_per_page() const {
  return per_page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListConceptRelationsRequest::per_page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListConceptRelationsRequest.per_page)
  return _internal_per_page();
}
inline void ListConceptRelationsRequest::_internal_set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  per_page_ = value;
}
inline void ListConceptRelationsRequest::set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_per_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListConceptRelationsRequest.per_page)
}

// -------------------------------------------------------------------

// PostConceptRelationsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostConceptRelationsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostConceptRelationsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostConceptRelationsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostConceptRelationsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostConceptRelationsRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* PostConceptRelationsRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostConceptRelationsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostConceptRelationsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostConceptRelationsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostConceptRelationsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void PostConceptRelationsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostConceptRelationsRequest.user_app_id)
}

// string concept_id = 2;
inline void PostConceptRelationsRequest::clear_concept_id() {
  concept_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PostConceptRelationsRequest::concept_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostConceptRelationsRequest.concept_id)
  return _internal_concept_id();
}
inline void PostConceptRelationsRequest::set_concept_id(const std::string& value) {
  _internal_set_concept_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PostConceptRelationsRequest.concept_id)
}
inline std::string* PostConceptRelationsRequest::mutable_concept_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostConceptRelationsRequest.concept_id)
  return _internal_mutable_concept_id();
}
inline const std::string& PostConceptRelationsRequest::_internal_concept_id() const {
  return concept_id_.GetNoArena();
}
inline void PostConceptRelationsRequest::_internal_set_concept_id(const std::string& value) {
  
  concept_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PostConceptRelationsRequest::set_concept_id(std::string&& value) {
  
  concept_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.PostConceptRelationsRequest.concept_id)
}
inline void PostConceptRelationsRequest::set_concept_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  concept_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.PostConceptRelationsRequest.concept_id)
}
inline void PostConceptRelationsRequest::set_concept_id(const char* value, size_t size) {
  
  concept_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PostConceptRelationsRequest.concept_id)
}
inline std::string* PostConceptRelationsRequest::_internal_mutable_concept_id() {
  
  return concept_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PostConceptRelationsRequest::release_concept_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostConceptRelationsRequest.concept_id)
  
  return concept_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PostConceptRelationsRequest::set_allocated_concept_id(std::string* concept_id) {
  if (concept_id != nullptr) {
    
  } else {
    
  }
  concept_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), concept_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostConceptRelationsRequest.concept_id)
}

// repeated .clarifai.api.ConceptRelation concept_relations = 3;
inline int PostConceptRelationsRequest::_internal_concept_relations_size() const {
  return concept_relations_.size();
}
inline int PostConceptRelationsRequest::concept_relations_size() const {
  return _internal_concept_relations_size();
}
inline ::clarifai::api::ConceptRelation* PostConceptRelationsRequest::mutable_concept_relations(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostConceptRelationsRequest.concept_relations)
  return concept_relations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptRelation >*
PostConceptRelationsRequest::mutable_concept_relations() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostConceptRelationsRequest.concept_relations)
  return &concept_relations_;
}
inline const ::clarifai::api::ConceptRelation& PostConceptRelationsRequest::_internal_concept_relations(int index) const {
  return concept_relations_.Get(index);
}
inline const ::clarifai::api::ConceptRelation& PostConceptRelationsRequest::concept_relations(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostConceptRelationsRequest.concept_relations)
  return _internal_concept_relations(index);
}
inline ::clarifai::api::ConceptRelation* PostConceptRelationsRequest::_internal_add_concept_relations() {
  return concept_relations_.Add();
}
inline ::clarifai::api::ConceptRelation* PostConceptRelationsRequest::add_concept_relations() {
  // @@protoc_insertion_point(field_add:clarifai.api.PostConceptRelationsRequest.concept_relations)
  return _internal_add_concept_relations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptRelation >&
PostConceptRelationsRequest::concept_relations() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostConceptRelationsRequest.concept_relations)
  return concept_relations_;
}

// -------------------------------------------------------------------

// DeleteConceptRelationsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool DeleteConceptRelationsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool DeleteConceptRelationsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& DeleteConceptRelationsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& DeleteConceptRelationsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteConceptRelationsRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* DeleteConceptRelationsRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteConceptRelationsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteConceptRelationsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* DeleteConceptRelationsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteConceptRelationsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void DeleteConceptRelationsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteConceptRelationsRequest.user_app_id)
}

// string concept_id = 2;
inline void DeleteConceptRelationsRequest::clear_concept_id() {
  concept_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeleteConceptRelationsRequest::concept_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteConceptRelationsRequest.concept_id)
  return _internal_concept_id();
}
inline void DeleteConceptRelationsRequest::set_concept_id(const std::string& value) {
  _internal_set_concept_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteConceptRelationsRequest.concept_id)
}
inline std::string* DeleteConceptRelationsRequest::mutable_concept_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteConceptRelationsRequest.concept_id)
  return _internal_mutable_concept_id();
}
inline const std::string& DeleteConceptRelationsRequest::_internal_concept_id() const {
  return concept_id_.GetNoArena();
}
inline void DeleteConceptRelationsRequest::_internal_set_concept_id(const std::string& value) {
  
  concept_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DeleteConceptRelationsRequest::set_concept_id(std::string&& value) {
  
  concept_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.DeleteConceptRelationsRequest.concept_id)
}
inline void DeleteConceptRelationsRequest::set_concept_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  concept_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.DeleteConceptRelationsRequest.concept_id)
}
inline void DeleteConceptRelationsRequest::set_concept_id(const char* value, size_t size) {
  
  concept_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.DeleteConceptRelationsRequest.concept_id)
}
inline std::string* DeleteConceptRelationsRequest::_internal_mutable_concept_id() {
  
  return concept_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeleteConceptRelationsRequest::release_concept_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteConceptRelationsRequest.concept_id)
  
  return concept_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteConceptRelationsRequest::set_allocated_concept_id(std::string* concept_id) {
  if (concept_id != nullptr) {
    
  } else {
    
  }
  concept_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), concept_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteConceptRelationsRequest.concept_id)
}

// repeated string ids = 3;
inline int DeleteConceptRelationsRequest::_internal_ids_size() const {
  return ids_.size();
}
inline int DeleteConceptRelationsRequest::ids_size() const {
  return _internal_ids_size();
}
inline void DeleteConceptRelationsRequest::clear_ids() {
  ids_.Clear();
}
inline std::string* DeleteConceptRelationsRequest::add_ids() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.DeleteConceptRelationsRequest.ids)
  return _internal_add_ids();
}
inline const std::string& DeleteConceptRelationsRequest::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const std::string& DeleteConceptRelationsRequest::ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteConceptRelationsRequest.ids)
  return _internal_ids(index);
}
inline std::string* DeleteConceptRelationsRequest::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteConceptRelationsRequest.ids)
  return ids_.Mutable(index);
}
inline void DeleteConceptRelationsRequest::set_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteConceptRelationsRequest.ids)
  ids_.Mutable(index)->assign(value);
}
inline void DeleteConceptRelationsRequest::set_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteConceptRelationsRequest.ids)
  ids_.Mutable(index)->assign(std::move(value));
}
inline void DeleteConceptRelationsRequest::set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.DeleteConceptRelationsRequest.ids)
}
inline void DeleteConceptRelationsRequest::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.DeleteConceptRelationsRequest.ids)
}
inline std::string* DeleteConceptRelationsRequest::_internal_add_ids() {
  return ids_.Add();
}
inline void DeleteConceptRelationsRequest::add_ids(const std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.DeleteConceptRelationsRequest.ids)
}
inline void DeleteConceptRelationsRequest::add_ids(std::string&& value) {
  ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.DeleteConceptRelationsRequest.ids)
}
inline void DeleteConceptRelationsRequest::add_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.DeleteConceptRelationsRequest.ids)
}
inline void DeleteConceptRelationsRequest::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.DeleteConceptRelationsRequest.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeleteConceptRelationsRequest::ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.DeleteConceptRelationsRequest.ids)
  return ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeleteConceptRelationsRequest::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.DeleteConceptRelationsRequest.ids)
  return &ids_;
}

// -------------------------------------------------------------------

// ListKnowledgeGraphsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool ListKnowledgeGraphsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool ListKnowledgeGraphsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& ListKnowledgeGraphsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& ListKnowledgeGraphsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListKnowledgeGraphsRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* ListKnowledgeGraphsRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListKnowledgeGraphsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListKnowledgeGraphsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* ListKnowledgeGraphsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListKnowledgeGraphsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void ListKnowledgeGraphsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListKnowledgeGraphsRequest.user_app_id)
}

// -------------------------------------------------------------------

// PostKnowledgeGraphsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostKnowledgeGraphsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostKnowledgeGraphsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostKnowledgeGraphsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostKnowledgeGraphsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostKnowledgeGraphsRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* PostKnowledgeGraphsRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostKnowledgeGraphsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostKnowledgeGraphsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostKnowledgeGraphsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostKnowledgeGraphsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void PostKnowledgeGraphsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostKnowledgeGraphsRequest.user_app_id)
}

// repeated .clarifai.api.KnowledgeGraph knowledge_graphs = 2;
inline int PostKnowledgeGraphsRequest::_internal_knowledge_graphs_size() const {
  return knowledge_graphs_.size();
}
inline int PostKnowledgeGraphsRequest::knowledge_graphs_size() const {
  return _internal_knowledge_graphs_size();
}
inline ::clarifai::api::KnowledgeGraph* PostKnowledgeGraphsRequest::mutable_knowledge_graphs(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostKnowledgeGraphsRequest.knowledge_graphs)
  return knowledge_graphs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::KnowledgeGraph >*
PostKnowledgeGraphsRequest::mutable_knowledge_graphs() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostKnowledgeGraphsRequest.knowledge_graphs)
  return &knowledge_graphs_;
}
inline const ::clarifai::api::KnowledgeGraph& PostKnowledgeGraphsRequest::_internal_knowledge_graphs(int index) const {
  return knowledge_graphs_.Get(index);
}
inline const ::clarifai::api::KnowledgeGraph& PostKnowledgeGraphsRequest::knowledge_graphs(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostKnowledgeGraphsRequest.knowledge_graphs)
  return _internal_knowledge_graphs(index);
}
inline ::clarifai::api::KnowledgeGraph* PostKnowledgeGraphsRequest::_internal_add_knowledge_graphs() {
  return knowledge_graphs_.Add();
}
inline ::clarifai::api::KnowledgeGraph* PostKnowledgeGraphsRequest::add_knowledge_graphs() {
  // @@protoc_insertion_point(field_add:clarifai.api.PostKnowledgeGraphsRequest.knowledge_graphs)
  return _internal_add_knowledge_graphs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::KnowledgeGraph >&
PostKnowledgeGraphsRequest::knowledge_graphs() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostKnowledgeGraphsRequest.knowledge_graphs)
  return knowledge_graphs_;
}

// -------------------------------------------------------------------

// ListConceptMappingsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool ListConceptMappingsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool ListConceptMappingsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& ListConceptMappingsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& ListConceptMappingsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListConceptMappingsRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* ListConceptMappingsRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListConceptMappingsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListConceptMappingsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* ListConceptMappingsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListConceptMappingsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void ListConceptMappingsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListConceptMappingsRequest.user_app_id)
}

// uint32 page = 2;
inline void ListConceptMappingsRequest::clear_page() {
  page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListConceptMappingsRequest::_internal_page() const {
  return page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListConceptMappingsRequest::page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListConceptMappingsRequest.page)
  return _internal_page();
}
inline void ListConceptMappingsRequest::_internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  page_ = value;
}
inline void ListConceptMappingsRequest::set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListConceptMappingsRequest.page)
}

// uint32 per_page = 3;
inline void ListConceptMappingsRequest::clear_per_page() {
  per_page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListConceptMappingsRequest::_internal_per_page() const {
  return per_page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListConceptMappingsRequest::per_page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListConceptMappingsRequest.per_page)
  return _internal_per_page();
}
inline void ListConceptMappingsRequest::_internal_set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  per_page_ = value;
}
inline void ListConceptMappingsRequest::set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_per_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListConceptMappingsRequest.per_page)
}

// -------------------------------------------------------------------

// PostConceptMappingsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostConceptMappingsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostConceptMappingsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostConceptMappingsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostConceptMappingsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostConceptMappingsRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* PostConceptMappingsRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostConceptMappingsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostConceptMappingsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostConceptMappingsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostConceptMappingsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void PostConceptMappingsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostConceptMappingsRequest.user_app_id)
}

// repeated .clarifai.api.ConceptMapping concept_mappings = 2;
inline int PostConceptMappingsRequest::_internal_concept_mappings_size() const {
  return concept_mappings_.size();
}
inline int PostConceptMappingsRequest::concept_mappings_size() const {
  return _internal_concept_mappings_size();
}
inline ::clarifai::api::ConceptMapping* PostConceptMappingsRequest::mutable_concept_mappings(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostConceptMappingsRequest.concept_mappings)
  return concept_mappings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptMapping >*
PostConceptMappingsRequest::mutable_concept_mappings() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostConceptMappingsRequest.concept_mappings)
  return &concept_mappings_;
}
inline const ::clarifai::api::ConceptMapping& PostConceptMappingsRequest::_internal_concept_mappings(int index) const {
  return concept_mappings_.Get(index);
}
inline const ::clarifai::api::ConceptMapping& PostConceptMappingsRequest::concept_mappings(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostConceptMappingsRequest.concept_mappings)
  return _internal_concept_mappings(index);
}
inline ::clarifai::api::ConceptMapping* PostConceptMappingsRequest::_internal_add_concept_mappings() {
  return concept_mappings_.Add();
}
inline ::clarifai::api::ConceptMapping* PostConceptMappingsRequest::add_concept_mappings() {
  // @@protoc_insertion_point(field_add:clarifai.api.PostConceptMappingsRequest.concept_mappings)
  return _internal_add_concept_mappings();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptMapping >&
PostConceptMappingsRequest::concept_mappings() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostConceptMappingsRequest.concept_mappings)
  return concept_mappings_;
}

// .clarifai.api.KnowledgeGraph knowledge_graph = 3;
inline bool PostConceptMappingsRequest::_internal_has_knowledge_graph() const {
  return this != internal_default_instance() && knowledge_graph_ != nullptr;
}
inline bool PostConceptMappingsRequest::has_knowledge_graph() const {
  return _internal_has_knowledge_graph();
}
inline const ::clarifai::api::KnowledgeGraph& PostConceptMappingsRequest::_internal_knowledge_graph() const {
  const ::clarifai::api::KnowledgeGraph* p = knowledge_graph_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::KnowledgeGraph*>(
      &::clarifai::api::_KnowledgeGraph_default_instance_);
}
inline const ::clarifai::api::KnowledgeGraph& PostConceptMappingsRequest::knowledge_graph() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostConceptMappingsRequest.knowledge_graph)
  return _internal_knowledge_graph();
}
inline ::clarifai::api::KnowledgeGraph* PostConceptMappingsRequest::release_knowledge_graph() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostConceptMappingsRequest.knowledge_graph)
  
  ::clarifai::api::KnowledgeGraph* temp = knowledge_graph_;
  knowledge_graph_ = nullptr;
  return temp;
}
inline ::clarifai::api::KnowledgeGraph* PostConceptMappingsRequest::_internal_mutable_knowledge_graph() {
  
  if (knowledge_graph_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::KnowledgeGraph>(GetArenaNoVirtual());
    knowledge_graph_ = p;
  }
  return knowledge_graph_;
}
inline ::clarifai::api::KnowledgeGraph* PostConceptMappingsRequest::mutable_knowledge_graph() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostConceptMappingsRequest.knowledge_graph)
  return _internal_mutable_knowledge_graph();
}
inline void PostConceptMappingsRequest::set_allocated_knowledge_graph(::clarifai::api::KnowledgeGraph* knowledge_graph) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(knowledge_graph_);
  }
  if (knowledge_graph) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      knowledge_graph = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, knowledge_graph, submessage_arena);
    }
    
  } else {
    
  }
  knowledge_graph_ = knowledge_graph;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostConceptMappingsRequest.knowledge_graph)
}

// -------------------------------------------------------------------

// PostConceptMappingJobsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostConceptMappingJobsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostConceptMappingJobsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostConceptMappingJobsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostConceptMappingJobsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostConceptMappingJobsRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* PostConceptMappingJobsRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostConceptMappingJobsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostConceptMappingJobsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostConceptMappingJobsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostConceptMappingJobsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void PostConceptMappingJobsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostConceptMappingJobsRequest.user_app_id)
}

// repeated .clarifai.api.ConceptMappingJob concept_mapping_jobs = 2;
inline int PostConceptMappingJobsRequest::_internal_concept_mapping_jobs_size() const {
  return concept_mapping_jobs_.size();
}
inline int PostConceptMappingJobsRequest::concept_mapping_jobs_size() const {
  return _internal_concept_mapping_jobs_size();
}
inline ::clarifai::api::ConceptMappingJob* PostConceptMappingJobsRequest::mutable_concept_mapping_jobs(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostConceptMappingJobsRequest.concept_mapping_jobs)
  return concept_mapping_jobs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptMappingJob >*
PostConceptMappingJobsRequest::mutable_concept_mapping_jobs() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostConceptMappingJobsRequest.concept_mapping_jobs)
  return &concept_mapping_jobs_;
}
inline const ::clarifai::api::ConceptMappingJob& PostConceptMappingJobsRequest::_internal_concept_mapping_jobs(int index) const {
  return concept_mapping_jobs_.Get(index);
}
inline const ::clarifai::api::ConceptMappingJob& PostConceptMappingJobsRequest::concept_mapping_jobs(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostConceptMappingJobsRequest.concept_mapping_jobs)
  return _internal_concept_mapping_jobs(index);
}
inline ::clarifai::api::ConceptMappingJob* PostConceptMappingJobsRequest::_internal_add_concept_mapping_jobs() {
  return concept_mapping_jobs_.Add();
}
inline ::clarifai::api::ConceptMappingJob* PostConceptMappingJobsRequest::add_concept_mapping_jobs() {
  // @@protoc_insertion_point(field_add:clarifai.api.PostConceptMappingJobsRequest.concept_mapping_jobs)
  return _internal_add_concept_mapping_jobs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptMappingJob >&
PostConceptMappingJobsRequest::concept_mapping_jobs() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostConceptMappingJobsRequest.concept_mapping_jobs)
  return concept_mapping_jobs_;
}

// -------------------------------------------------------------------

// SingleConceptRelationResponse

// .clarifai.api.status.Status status = 1;
inline bool SingleConceptRelationResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SingleConceptRelationResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& SingleConceptRelationResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& SingleConceptRelationResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleConceptRelationResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* SingleConceptRelationResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleConceptRelationResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* SingleConceptRelationResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* SingleConceptRelationResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleConceptRelationResponse.status)
  return _internal_mutable_status();
}
inline void SingleConceptRelationResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleConceptRelationResponse.status)
}

// .clarifai.api.ConceptRelation concept_relation = 2;
inline bool SingleConceptRelationResponse::_internal_has_concept_relation() const {
  return this != internal_default_instance() && concept_relation_ != nullptr;
}
inline bool SingleConceptRelationResponse::has_concept_relation() const {
  return _internal_has_concept_relation();
}
inline const ::clarifai::api::ConceptRelation& SingleConceptRelationResponse::_internal_concept_relation() const {
  const ::clarifai::api::ConceptRelation* p = concept_relation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::ConceptRelation*>(
      &::clarifai::api::_ConceptRelation_default_instance_);
}
inline const ::clarifai::api::ConceptRelation& SingleConceptRelationResponse::concept_relation() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleConceptRelationResponse.concept_relation)
  return _internal_concept_relation();
}
inline ::clarifai::api::ConceptRelation* SingleConceptRelationResponse::release_concept_relation() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleConceptRelationResponse.concept_relation)
  
  ::clarifai::api::ConceptRelation* temp = concept_relation_;
  concept_relation_ = nullptr;
  return temp;
}
inline ::clarifai::api::ConceptRelation* SingleConceptRelationResponse::_internal_mutable_concept_relation() {
  
  if (concept_relation_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::ConceptRelation>(GetArenaNoVirtual());
    concept_relation_ = p;
  }
  return concept_relation_;
}
inline ::clarifai::api::ConceptRelation* SingleConceptRelationResponse::mutable_concept_relation() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleConceptRelationResponse.concept_relation)
  return _internal_mutable_concept_relation();
}
inline void SingleConceptRelationResponse::set_allocated_concept_relation(::clarifai::api::ConceptRelation* concept_relation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(concept_relation_);
  }
  if (concept_relation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      concept_relation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, concept_relation, submessage_arena);
    }
    
  } else {
    
  }
  concept_relation_ = concept_relation;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleConceptRelationResponse.concept_relation)
}

// -------------------------------------------------------------------

// MultiConceptRelationResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiConceptRelationResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiConceptRelationResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiConceptRelationResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiConceptRelationResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiConceptRelationResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* MultiConceptRelationResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiConceptRelationResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiConceptRelationResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiConceptRelationResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiConceptRelationResponse.status)
  return _internal_mutable_status();
}
inline void MultiConceptRelationResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiConceptRelationResponse.status)
}

// repeated .clarifai.api.ConceptRelation concept_relations = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int MultiConceptRelationResponse::_internal_concept_relations_size() const {
  return concept_relations_.size();
}
inline int MultiConceptRelationResponse::concept_relations_size() const {
  return _internal_concept_relations_size();
}
inline ::clarifai::api::ConceptRelation* MultiConceptRelationResponse::mutable_concept_relations(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiConceptRelationResponse.concept_relations)
  return concept_relations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptRelation >*
MultiConceptRelationResponse::mutable_concept_relations() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiConceptRelationResponse.concept_relations)
  return &concept_relations_;
}
inline const ::clarifai::api::ConceptRelation& MultiConceptRelationResponse::_internal_concept_relations(int index) const {
  return concept_relations_.Get(index);
}
inline const ::clarifai::api::ConceptRelation& MultiConceptRelationResponse::concept_relations(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiConceptRelationResponse.concept_relations)
  return _internal_concept_relations(index);
}
inline ::clarifai::api::ConceptRelation* MultiConceptRelationResponse::_internal_add_concept_relations() {
  return concept_relations_.Add();
}
inline ::clarifai::api::ConceptRelation* MultiConceptRelationResponse::add_concept_relations() {
  // @@protoc_insertion_point(field_add:clarifai.api.MultiConceptRelationResponse.concept_relations)
  return _internal_add_concept_relations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptRelation >&
MultiConceptRelationResponse::concept_relations() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiConceptRelationResponse.concept_relations)
  return concept_relations_;
}

// -------------------------------------------------------------------

// SingleKnowledgeGraphResponse

// .clarifai.api.status.Status status = 1;
inline bool SingleKnowledgeGraphResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SingleKnowledgeGraphResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& SingleKnowledgeGraphResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& SingleKnowledgeGraphResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleKnowledgeGraphResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* SingleKnowledgeGraphResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleKnowledgeGraphResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* SingleKnowledgeGraphResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* SingleKnowledgeGraphResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleKnowledgeGraphResponse.status)
  return _internal_mutable_status();
}
inline void SingleKnowledgeGraphResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleKnowledgeGraphResponse.status)
}

// .clarifai.api.KnowledgeGraph knowledge_graph = 2;
inline bool SingleKnowledgeGraphResponse::_internal_has_knowledge_graph() const {
  return this != internal_default_instance() && knowledge_graph_ != nullptr;
}
inline bool SingleKnowledgeGraphResponse::has_knowledge_graph() const {
  return _internal_has_knowledge_graph();
}
inline const ::clarifai::api::KnowledgeGraph& SingleKnowledgeGraphResponse::_internal_knowledge_graph() const {
  const ::clarifai::api::KnowledgeGraph* p = knowledge_graph_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::KnowledgeGraph*>(
      &::clarifai::api::_KnowledgeGraph_default_instance_);
}
inline const ::clarifai::api::KnowledgeGraph& SingleKnowledgeGraphResponse::knowledge_graph() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleKnowledgeGraphResponse.knowledge_graph)
  return _internal_knowledge_graph();
}
inline ::clarifai::api::KnowledgeGraph* SingleKnowledgeGraphResponse::release_knowledge_graph() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleKnowledgeGraphResponse.knowledge_graph)
  
  ::clarifai::api::KnowledgeGraph* temp = knowledge_graph_;
  knowledge_graph_ = nullptr;
  return temp;
}
inline ::clarifai::api::KnowledgeGraph* SingleKnowledgeGraphResponse::_internal_mutable_knowledge_graph() {
  
  if (knowledge_graph_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::KnowledgeGraph>(GetArenaNoVirtual());
    knowledge_graph_ = p;
  }
  return knowledge_graph_;
}
inline ::clarifai::api::KnowledgeGraph* SingleKnowledgeGraphResponse::mutable_knowledge_graph() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleKnowledgeGraphResponse.knowledge_graph)
  return _internal_mutable_knowledge_graph();
}
inline void SingleKnowledgeGraphResponse::set_allocated_knowledge_graph(::clarifai::api::KnowledgeGraph* knowledge_graph) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(knowledge_graph_);
  }
  if (knowledge_graph) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      knowledge_graph = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, knowledge_graph, submessage_arena);
    }
    
  } else {
    
  }
  knowledge_graph_ = knowledge_graph;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleKnowledgeGraphResponse.knowledge_graph)
}

// -------------------------------------------------------------------

// MultiKnowledgeGraphResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiKnowledgeGraphResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiKnowledgeGraphResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiKnowledgeGraphResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiKnowledgeGraphResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiKnowledgeGraphResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* MultiKnowledgeGraphResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiKnowledgeGraphResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiKnowledgeGraphResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiKnowledgeGraphResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiKnowledgeGraphResponse.status)
  return _internal_mutable_status();
}
inline void MultiKnowledgeGraphResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiKnowledgeGraphResponse.status)
}

// repeated .clarifai.api.KnowledgeGraph knowledge_graphs = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int MultiKnowledgeGraphResponse::_internal_knowledge_graphs_size() const {
  return knowledge_graphs_.size();
}
inline int MultiKnowledgeGraphResponse::knowledge_graphs_size() const {
  return _internal_knowledge_graphs_size();
}
inline ::clarifai::api::KnowledgeGraph* MultiKnowledgeGraphResponse::mutable_knowledge_graphs(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiKnowledgeGraphResponse.knowledge_graphs)
  return knowledge_graphs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::KnowledgeGraph >*
MultiKnowledgeGraphResponse::mutable_knowledge_graphs() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiKnowledgeGraphResponse.knowledge_graphs)
  return &knowledge_graphs_;
}
inline const ::clarifai::api::KnowledgeGraph& MultiKnowledgeGraphResponse::_internal_knowledge_graphs(int index) const {
  return knowledge_graphs_.Get(index);
}
inline const ::clarifai::api::KnowledgeGraph& MultiKnowledgeGraphResponse::knowledge_graphs(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiKnowledgeGraphResponse.knowledge_graphs)
  return _internal_knowledge_graphs(index);
}
inline ::clarifai::api::KnowledgeGraph* MultiKnowledgeGraphResponse::_internal_add_knowledge_graphs() {
  return knowledge_graphs_.Add();
}
inline ::clarifai::api::KnowledgeGraph* MultiKnowledgeGraphResponse::add_knowledge_graphs() {
  // @@protoc_insertion_point(field_add:clarifai.api.MultiKnowledgeGraphResponse.knowledge_graphs)
  return _internal_add_knowledge_graphs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::KnowledgeGraph >&
MultiKnowledgeGraphResponse::knowledge_graphs() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiKnowledgeGraphResponse.knowledge_graphs)
  return knowledge_graphs_;
}

// -------------------------------------------------------------------

// SingleConceptMappingResponse

// .clarifai.api.status.Status status = 1;
inline bool SingleConceptMappingResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SingleConceptMappingResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& SingleConceptMappingResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& SingleConceptMappingResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleConceptMappingResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* SingleConceptMappingResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleConceptMappingResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* SingleConceptMappingResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* SingleConceptMappingResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleConceptMappingResponse.status)
  return _internal_mutable_status();
}
inline void SingleConceptMappingResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleConceptMappingResponse.status)
}

// .clarifai.api.ConceptMapping concept_mapping = 2;
inline bool SingleConceptMappingResponse::_internal_has_concept_mapping() const {
  return this != internal_default_instance() && concept_mapping_ != nullptr;
}
inline bool SingleConceptMappingResponse::has_concept_mapping() const {
  return _internal_has_concept_mapping();
}
inline const ::clarifai::api::ConceptMapping& SingleConceptMappingResponse::_internal_concept_mapping() const {
  const ::clarifai::api::ConceptMapping* p = concept_mapping_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::ConceptMapping*>(
      &::clarifai::api::_ConceptMapping_default_instance_);
}
inline const ::clarifai::api::ConceptMapping& SingleConceptMappingResponse::concept_mapping() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleConceptMappingResponse.concept_mapping)
  return _internal_concept_mapping();
}
inline ::clarifai::api::ConceptMapping* SingleConceptMappingResponse::release_concept_mapping() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleConceptMappingResponse.concept_mapping)
  
  ::clarifai::api::ConceptMapping* temp = concept_mapping_;
  concept_mapping_ = nullptr;
  return temp;
}
inline ::clarifai::api::ConceptMapping* SingleConceptMappingResponse::_internal_mutable_concept_mapping() {
  
  if (concept_mapping_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::ConceptMapping>(GetArenaNoVirtual());
    concept_mapping_ = p;
  }
  return concept_mapping_;
}
inline ::clarifai::api::ConceptMapping* SingleConceptMappingResponse::mutable_concept_mapping() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleConceptMappingResponse.concept_mapping)
  return _internal_mutable_concept_mapping();
}
inline void SingleConceptMappingResponse::set_allocated_concept_mapping(::clarifai::api::ConceptMapping* concept_mapping) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(concept_mapping_);
  }
  if (concept_mapping) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      concept_mapping = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, concept_mapping, submessage_arena);
    }
    
  } else {
    
  }
  concept_mapping_ = concept_mapping;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleConceptMappingResponse.concept_mapping)
}

// -------------------------------------------------------------------

// MultiConceptMappingResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiConceptMappingResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiConceptMappingResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiConceptMappingResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiConceptMappingResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiConceptMappingResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* MultiConceptMappingResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiConceptMappingResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiConceptMappingResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiConceptMappingResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiConceptMappingResponse.status)
  return _internal_mutable_status();
}
inline void MultiConceptMappingResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiConceptMappingResponse.status)
}

// repeated .clarifai.api.ConceptMapping concept_mappings = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int MultiConceptMappingResponse::_internal_concept_mappings_size() const {
  return concept_mappings_.size();
}
inline int MultiConceptMappingResponse::concept_mappings_size() const {
  return _internal_concept_mappings_size();
}
inline ::clarifai::api::ConceptMapping* MultiConceptMappingResponse::mutable_concept_mappings(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiConceptMappingResponse.concept_mappings)
  return concept_mappings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptMapping >*
MultiConceptMappingResponse::mutable_concept_mappings() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiConceptMappingResponse.concept_mappings)
  return &concept_mappings_;
}
inline const ::clarifai::api::ConceptMapping& MultiConceptMappingResponse::_internal_concept_mappings(int index) const {
  return concept_mappings_.Get(index);
}
inline const ::clarifai::api::ConceptMapping& MultiConceptMappingResponse::concept_mappings(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiConceptMappingResponse.concept_mappings)
  return _internal_concept_mappings(index);
}
inline ::clarifai::api::ConceptMapping* MultiConceptMappingResponse::_internal_add_concept_mappings() {
  return concept_mappings_.Add();
}
inline ::clarifai::api::ConceptMapping* MultiConceptMappingResponse::add_concept_mappings() {
  // @@protoc_insertion_point(field_add:clarifai.api.MultiConceptMappingResponse.concept_mappings)
  return _internal_add_concept_mappings();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptMapping >&
MultiConceptMappingResponse::concept_mappings() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiConceptMappingResponse.concept_mappings)
  return concept_mappings_;
}

// -------------------------------------------------------------------

// SingleConceptMappingJobResponse

// .clarifai.api.status.Status status = 1;
inline bool SingleConceptMappingJobResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SingleConceptMappingJobResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& SingleConceptMappingJobResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& SingleConceptMappingJobResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleConceptMappingJobResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* SingleConceptMappingJobResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleConceptMappingJobResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* SingleConceptMappingJobResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* SingleConceptMappingJobResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleConceptMappingJobResponse.status)
  return _internal_mutable_status();
}
inline void SingleConceptMappingJobResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleConceptMappingJobResponse.status)
}

// string id = 2;
inline void SingleConceptMappingJobResponse::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SingleConceptMappingJobResponse::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleConceptMappingJobResponse.id)
  return _internal_id();
}
inline void SingleConceptMappingJobResponse::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.SingleConceptMappingJobResponse.id)
}
inline std::string* SingleConceptMappingJobResponse::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleConceptMappingJobResponse.id)
  return _internal_mutable_id();
}
inline const std::string& SingleConceptMappingJobResponse::_internal_id() const {
  return id_.GetNoArena();
}
inline void SingleConceptMappingJobResponse::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SingleConceptMappingJobResponse::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.SingleConceptMappingJobResponse.id)
}
inline void SingleConceptMappingJobResponse::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.SingleConceptMappingJobResponse.id)
}
inline void SingleConceptMappingJobResponse::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.SingleConceptMappingJobResponse.id)
}
inline std::string* SingleConceptMappingJobResponse::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SingleConceptMappingJobResponse::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleConceptMappingJobResponse.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SingleConceptMappingJobResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleConceptMappingJobResponse.id)
}

// -------------------------------------------------------------------

// MultiConceptMappingJobResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiConceptMappingJobResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiConceptMappingJobResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiConceptMappingJobResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiConceptMappingJobResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiConceptMappingJobResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* MultiConceptMappingJobResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiConceptMappingJobResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiConceptMappingJobResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiConceptMappingJobResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiConceptMappingJobResponse.status)
  return _internal_mutable_status();
}
inline void MultiConceptMappingJobResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiConceptMappingJobResponse.status)
}

// repeated string ids = 2;
inline int MultiConceptMappingJobResponse::_internal_ids_size() const {
  return ids_.size();
}
inline int MultiConceptMappingJobResponse::ids_size() const {
  return _internal_ids_size();
}
inline void MultiConceptMappingJobResponse::clear_ids() {
  ids_.Clear();
}
inline std::string* MultiConceptMappingJobResponse::add_ids() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.MultiConceptMappingJobResponse.ids)
  return _internal_add_ids();
}
inline const std::string& MultiConceptMappingJobResponse::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const std::string& MultiConceptMappingJobResponse::ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiConceptMappingJobResponse.ids)
  return _internal_ids(index);
}
inline std::string* MultiConceptMappingJobResponse::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiConceptMappingJobResponse.ids)
  return ids_.Mutable(index);
}
inline void MultiConceptMappingJobResponse::set_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.MultiConceptMappingJobResponse.ids)
  ids_.Mutable(index)->assign(value);
}
inline void MultiConceptMappingJobResponse::set_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.MultiConceptMappingJobResponse.ids)
  ids_.Mutable(index)->assign(std::move(value));
}
inline void MultiConceptMappingJobResponse::set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.MultiConceptMappingJobResponse.ids)
}
inline void MultiConceptMappingJobResponse::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.MultiConceptMappingJobResponse.ids)
}
inline std::string* MultiConceptMappingJobResponse::_internal_add_ids() {
  return ids_.Add();
}
inline void MultiConceptMappingJobResponse::add_ids(const std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.MultiConceptMappingJobResponse.ids)
}
inline void MultiConceptMappingJobResponse::add_ids(std::string&& value) {
  ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.MultiConceptMappingJobResponse.ids)
}
inline void MultiConceptMappingJobResponse::add_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.MultiConceptMappingJobResponse.ids)
}
inline void MultiConceptMappingJobResponse::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.MultiConceptMappingJobResponse.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MultiConceptMappingJobResponse::ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiConceptMappingJobResponse.ids)
  return ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MultiConceptMappingJobResponse::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiConceptMappingJobResponse.ids)
  return &ids_;
}

// -------------------------------------------------------------------

// GetConceptLanguageRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool GetConceptLanguageRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool GetConceptLanguageRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& GetConceptLanguageRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& GetConceptLanguageRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetConceptLanguageRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* GetConceptLanguageRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetConceptLanguageRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetConceptLanguageRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* GetConceptLanguageRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetConceptLanguageRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void GetConceptLanguageRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetConceptLanguageRequest.user_app_id)
}

// string concept_id = 2;
inline void GetConceptLanguageRequest::clear_concept_id() {
  concept_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetConceptLanguageRequest::concept_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetConceptLanguageRequest.concept_id)
  return _internal_concept_id();
}
inline void GetConceptLanguageRequest::set_concept_id(const std::string& value) {
  _internal_set_concept_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.GetConceptLanguageRequest.concept_id)
}
inline std::string* GetConceptLanguageRequest::mutable_concept_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetConceptLanguageRequest.concept_id)
  return _internal_mutable_concept_id();
}
inline const std::string& GetConceptLanguageRequest::_internal_concept_id() const {
  return concept_id_.GetNoArena();
}
inline void GetConceptLanguageRequest::_internal_set_concept_id(const std::string& value) {
  
  concept_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetConceptLanguageRequest::set_concept_id(std::string&& value) {
  
  concept_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.GetConceptLanguageRequest.concept_id)
}
inline void GetConceptLanguageRequest::set_concept_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  concept_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.GetConceptLanguageRequest.concept_id)
}
inline void GetConceptLanguageRequest::set_concept_id(const char* value, size_t size) {
  
  concept_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.GetConceptLanguageRequest.concept_id)
}
inline std::string* GetConceptLanguageRequest::_internal_mutable_concept_id() {
  
  return concept_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetConceptLanguageRequest::release_concept_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetConceptLanguageRequest.concept_id)
  
  return concept_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetConceptLanguageRequest::set_allocated_concept_id(std::string* concept_id) {
  if (concept_id != nullptr) {
    
  } else {
    
  }
  concept_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), concept_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetConceptLanguageRequest.concept_id)
}

// string language = 3;
inline void GetConceptLanguageRequest::clear_language() {
  language_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetConceptLanguageRequest::language() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetConceptLanguageRequest.language)
  return _internal_language();
}
inline void GetConceptLanguageRequest::set_language(const std::string& value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:clarifai.api.GetConceptLanguageRequest.language)
}
inline std::string* GetConceptLanguageRequest::mutable_language() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetConceptLanguageRequest.language)
  return _internal_mutable_language();
}
inline const std::string& GetConceptLanguageRequest::_internal_language() const {
  return language_.GetNoArena();
}
inline void GetConceptLanguageRequest::_internal_set_language(const std::string& value) {
  
  language_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetConceptLanguageRequest::set_language(std::string&& value) {
  
  language_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.GetConceptLanguageRequest.language)
}
inline void GetConceptLanguageRequest::set_language(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  language_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.GetConceptLanguageRequest.language)
}
inline void GetConceptLanguageRequest::set_language(const char* value, size_t size) {
  
  language_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.GetConceptLanguageRequest.language)
}
inline std::string* GetConceptLanguageRequest::_internal_mutable_language() {
  
  return language_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetConceptLanguageRequest::release_language() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetConceptLanguageRequest.language)
  
  return language_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetConceptLanguageRequest::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    
  } else {
    
  }
  language_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetConceptLanguageRequest.language)
}

// -------------------------------------------------------------------

// ListConceptLanguagesRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool ListConceptLanguagesRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool ListConceptLanguagesRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& ListConceptLanguagesRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& ListConceptLanguagesRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListConceptLanguagesRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* ListConceptLanguagesRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListConceptLanguagesRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListConceptLanguagesRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* ListConceptLanguagesRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListConceptLanguagesRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void ListConceptLanguagesRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListConceptLanguagesRequest.user_app_id)
}

// string concept_id = 2;
inline void ListConceptLanguagesRequest::clear_concept_id() {
  concept_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ListConceptLanguagesRequest::concept_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListConceptLanguagesRequest.concept_id)
  return _internal_concept_id();
}
inline void ListConceptLanguagesRequest::set_concept_id(const std::string& value) {
  _internal_set_concept_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListConceptLanguagesRequest.concept_id)
}
inline std::string* ListConceptLanguagesRequest::mutable_concept_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListConceptLanguagesRequest.concept_id)
  return _internal_mutable_concept_id();
}
inline const std::string& ListConceptLanguagesRequest::_internal_concept_id() const {
  return concept_id_.GetNoArena();
}
inline void ListConceptLanguagesRequest::_internal_set_concept_id(const std::string& value) {
  
  concept_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ListConceptLanguagesRequest::set_concept_id(std::string&& value) {
  
  concept_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ListConceptLanguagesRequest.concept_id)
}
inline void ListConceptLanguagesRequest::set_concept_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  concept_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.ListConceptLanguagesRequest.concept_id)
}
inline void ListConceptLanguagesRequest::set_concept_id(const char* value, size_t size) {
  
  concept_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ListConceptLanguagesRequest.concept_id)
}
inline std::string* ListConceptLanguagesRequest::_internal_mutable_concept_id() {
  
  return concept_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ListConceptLanguagesRequest::release_concept_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListConceptLanguagesRequest.concept_id)
  
  return concept_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ListConceptLanguagesRequest::set_allocated_concept_id(std::string* concept_id) {
  if (concept_id != nullptr) {
    
  } else {
    
  }
  concept_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), concept_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListConceptLanguagesRequest.concept_id)
}

// uint32 page = 3;
inline void ListConceptLanguagesRequest::clear_page() {
  page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListConceptLanguagesRequest::_internal_page() const {
  return page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListConceptLanguagesRequest::page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListConceptLanguagesRequest.page)
  return _internal_page();
}
inline void ListConceptLanguagesRequest::_internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  page_ = value;
}
inline void ListConceptLanguagesRequest::set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListConceptLanguagesRequest.page)
}

// uint32 per_page = 4;
inline void ListConceptLanguagesRequest::clear_per_page() {
  per_page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListConceptLanguagesRequest::_internal_per_page() const {
  return per_page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListConceptLanguagesRequest::per_page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListConceptLanguagesRequest.per_page)
  return _internal_per_page();
}
inline void ListConceptLanguagesRequest::_internal_set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  per_page_ = value;
}
inline void ListConceptLanguagesRequest::set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_per_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListConceptLanguagesRequest.per_page)
}

// -------------------------------------------------------------------

// PatchConceptLanguagesRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PatchConceptLanguagesRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PatchConceptLanguagesRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PatchConceptLanguagesRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PatchConceptLanguagesRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchConceptLanguagesRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* PatchConceptLanguagesRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchConceptLanguagesRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchConceptLanguagesRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PatchConceptLanguagesRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchConceptLanguagesRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void PatchConceptLanguagesRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchConceptLanguagesRequest.user_app_id)
}

// string concept_id = 2;
inline void PatchConceptLanguagesRequest::clear_concept_id() {
  concept_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PatchConceptLanguagesRequest::concept_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchConceptLanguagesRequest.concept_id)
  return _internal_concept_id();
}
inline void PatchConceptLanguagesRequest::set_concept_id(const std::string& value) {
  _internal_set_concept_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PatchConceptLanguagesRequest.concept_id)
}
inline std::string* PatchConceptLanguagesRequest::mutable_concept_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchConceptLanguagesRequest.concept_id)
  return _internal_mutable_concept_id();
}
inline const std::string& PatchConceptLanguagesRequest::_internal_concept_id() const {
  return concept_id_.GetNoArena();
}
inline void PatchConceptLanguagesRequest::_internal_set_concept_id(const std::string& value) {
  
  concept_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PatchConceptLanguagesRequest::set_concept_id(std::string&& value) {
  
  concept_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.PatchConceptLanguagesRequest.concept_id)
}
inline void PatchConceptLanguagesRequest::set_concept_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  concept_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.PatchConceptLanguagesRequest.concept_id)
}
inline void PatchConceptLanguagesRequest::set_concept_id(const char* value, size_t size) {
  
  concept_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PatchConceptLanguagesRequest.concept_id)
}
inline std::string* PatchConceptLanguagesRequest::_internal_mutable_concept_id() {
  
  return concept_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PatchConceptLanguagesRequest::release_concept_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchConceptLanguagesRequest.concept_id)
  
  return concept_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PatchConceptLanguagesRequest::set_allocated_concept_id(std::string* concept_id) {
  if (concept_id != nullptr) {
    
  } else {
    
  }
  concept_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), concept_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchConceptLanguagesRequest.concept_id)
}

// repeated .clarifai.api.ConceptLanguage concept_languages = 3;
inline int PatchConceptLanguagesRequest::_internal_concept_languages_size() const {
  return concept_languages_.size();
}
inline int PatchConceptLanguagesRequest::concept_languages_size() const {
  return _internal_concept_languages_size();
}
inline ::clarifai::api::ConceptLanguage* PatchConceptLanguagesRequest::mutable_concept_languages(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchConceptLanguagesRequest.concept_languages)
  return concept_languages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptLanguage >*
PatchConceptLanguagesRequest::mutable_concept_languages() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PatchConceptLanguagesRequest.concept_languages)
  return &concept_languages_;
}
inline const ::clarifai::api::ConceptLanguage& PatchConceptLanguagesRequest::_internal_concept_languages(int index) const {
  return concept_languages_.Get(index);
}
inline const ::clarifai::api::ConceptLanguage& PatchConceptLanguagesRequest::concept_languages(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchConceptLanguagesRequest.concept_languages)
  return _internal_concept_languages(index);
}
inline ::clarifai::api::ConceptLanguage* PatchConceptLanguagesRequest::_internal_add_concept_languages() {
  return concept_languages_.Add();
}
inline ::clarifai::api::ConceptLanguage* PatchConceptLanguagesRequest::add_concept_languages() {
  // @@protoc_insertion_point(field_add:clarifai.api.PatchConceptLanguagesRequest.concept_languages)
  return _internal_add_concept_languages();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptLanguage >&
PatchConceptLanguagesRequest::concept_languages() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PatchConceptLanguagesRequest.concept_languages)
  return concept_languages_;
}

// string action = 4;
inline void PatchConceptLanguagesRequest::clear_action() {
  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PatchConceptLanguagesRequest::action() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchConceptLanguagesRequest.action)
  return _internal_action();
}
inline void PatchConceptLanguagesRequest::set_action(const std::string& value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PatchConceptLanguagesRequest.action)
}
inline std::string* PatchConceptLanguagesRequest::mutable_action() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchConceptLanguagesRequest.action)
  return _internal_mutable_action();
}
inline const std::string& PatchConceptLanguagesRequest::_internal_action() const {
  return action_.GetNoArena();
}
inline void PatchConceptLanguagesRequest::_internal_set_action(const std::string& value) {
  
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PatchConceptLanguagesRequest::set_action(std::string&& value) {
  
  action_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.PatchConceptLanguagesRequest.action)
}
inline void PatchConceptLanguagesRequest::set_action(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.PatchConceptLanguagesRequest.action)
}
inline void PatchConceptLanguagesRequest::set_action(const char* value, size_t size) {
  
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PatchConceptLanguagesRequest.action)
}
inline std::string* PatchConceptLanguagesRequest::_internal_mutable_action() {
  
  return action_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PatchConceptLanguagesRequest::release_action() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchConceptLanguagesRequest.action)
  
  return action_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PatchConceptLanguagesRequest::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchConceptLanguagesRequest.action)
}

// -------------------------------------------------------------------

// PostConceptLanguagesRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostConceptLanguagesRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostConceptLanguagesRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostConceptLanguagesRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostConceptLanguagesRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostConceptLanguagesRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* PostConceptLanguagesRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostConceptLanguagesRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostConceptLanguagesRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostConceptLanguagesRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostConceptLanguagesRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void PostConceptLanguagesRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostConceptLanguagesRequest.user_app_id)
}

// string concept_id = 2;
inline void PostConceptLanguagesRequest::clear_concept_id() {
  concept_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PostConceptLanguagesRequest::concept_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostConceptLanguagesRequest.concept_id)
  return _internal_concept_id();
}
inline void PostConceptLanguagesRequest::set_concept_id(const std::string& value) {
  _internal_set_concept_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PostConceptLanguagesRequest.concept_id)
}
inline std::string* PostConceptLanguagesRequest::mutable_concept_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostConceptLanguagesRequest.concept_id)
  return _internal_mutable_concept_id();
}
inline const std::string& PostConceptLanguagesRequest::_internal_concept_id() const {
  return concept_id_.GetNoArena();
}
inline void PostConceptLanguagesRequest::_internal_set_concept_id(const std::string& value) {
  
  concept_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PostConceptLanguagesRequest::set_concept_id(std::string&& value) {
  
  concept_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.PostConceptLanguagesRequest.concept_id)
}
inline void PostConceptLanguagesRequest::set_concept_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  concept_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.PostConceptLanguagesRequest.concept_id)
}
inline void PostConceptLanguagesRequest::set_concept_id(const char* value, size_t size) {
  
  concept_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PostConceptLanguagesRequest.concept_id)
}
inline std::string* PostConceptLanguagesRequest::_internal_mutable_concept_id() {
  
  return concept_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PostConceptLanguagesRequest::release_concept_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostConceptLanguagesRequest.concept_id)
  
  return concept_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PostConceptLanguagesRequest::set_allocated_concept_id(std::string* concept_id) {
  if (concept_id != nullptr) {
    
  } else {
    
  }
  concept_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), concept_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostConceptLanguagesRequest.concept_id)
}

// repeated .clarifai.api.ConceptLanguage concept_languages = 3;
inline int PostConceptLanguagesRequest::_internal_concept_languages_size() const {
  return concept_languages_.size();
}
inline int PostConceptLanguagesRequest::concept_languages_size() const {
  return _internal_concept_languages_size();
}
inline ::clarifai::api::ConceptLanguage* PostConceptLanguagesRequest::mutable_concept_languages(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostConceptLanguagesRequest.concept_languages)
  return concept_languages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptLanguage >*
PostConceptLanguagesRequest::mutable_concept_languages() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostConceptLanguagesRequest.concept_languages)
  return &concept_languages_;
}
inline const ::clarifai::api::ConceptLanguage& PostConceptLanguagesRequest::_internal_concept_languages(int index) const {
  return concept_languages_.Get(index);
}
inline const ::clarifai::api::ConceptLanguage& PostConceptLanguagesRequest::concept_languages(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostConceptLanguagesRequest.concept_languages)
  return _internal_concept_languages(index);
}
inline ::clarifai::api::ConceptLanguage* PostConceptLanguagesRequest::_internal_add_concept_languages() {
  return concept_languages_.Add();
}
inline ::clarifai::api::ConceptLanguage* PostConceptLanguagesRequest::add_concept_languages() {
  // @@protoc_insertion_point(field_add:clarifai.api.PostConceptLanguagesRequest.concept_languages)
  return _internal_add_concept_languages();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptLanguage >&
PostConceptLanguagesRequest::concept_languages() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostConceptLanguagesRequest.concept_languages)
  return concept_languages_;
}

// -------------------------------------------------------------------

// SingleConceptLanguageResponse

// .clarifai.api.status.Status status = 1;
inline bool SingleConceptLanguageResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SingleConceptLanguageResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& SingleConceptLanguageResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& SingleConceptLanguageResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleConceptLanguageResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* SingleConceptLanguageResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleConceptLanguageResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* SingleConceptLanguageResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* SingleConceptLanguageResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleConceptLanguageResponse.status)
  return _internal_mutable_status();
}
inline void SingleConceptLanguageResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleConceptLanguageResponse.status)
}

// .clarifai.api.ConceptLanguage concept_language = 2;
inline bool SingleConceptLanguageResponse::_internal_has_concept_language() const {
  return this != internal_default_instance() && concept_language_ != nullptr;
}
inline bool SingleConceptLanguageResponse::has_concept_language() const {
  return _internal_has_concept_language();
}
inline const ::clarifai::api::ConceptLanguage& SingleConceptLanguageResponse::_internal_concept_language() const {
  const ::clarifai::api::ConceptLanguage* p = concept_language_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::ConceptLanguage*>(
      &::clarifai::api::_ConceptLanguage_default_instance_);
}
inline const ::clarifai::api::ConceptLanguage& SingleConceptLanguageResponse::concept_language() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleConceptLanguageResponse.concept_language)
  return _internal_concept_language();
}
inline ::clarifai::api::ConceptLanguage* SingleConceptLanguageResponse::release_concept_language() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleConceptLanguageResponse.concept_language)
  
  ::clarifai::api::ConceptLanguage* temp = concept_language_;
  concept_language_ = nullptr;
  return temp;
}
inline ::clarifai::api::ConceptLanguage* SingleConceptLanguageResponse::_internal_mutable_concept_language() {
  
  if (concept_language_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::ConceptLanguage>(GetArenaNoVirtual());
    concept_language_ = p;
  }
  return concept_language_;
}
inline ::clarifai::api::ConceptLanguage* SingleConceptLanguageResponse::mutable_concept_language() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleConceptLanguageResponse.concept_language)
  return _internal_mutable_concept_language();
}
inline void SingleConceptLanguageResponse::set_allocated_concept_language(::clarifai::api::ConceptLanguage* concept_language) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(concept_language_);
  }
  if (concept_language) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      concept_language = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, concept_language, submessage_arena);
    }
    
  } else {
    
  }
  concept_language_ = concept_language;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleConceptLanguageResponse.concept_language)
}

// -------------------------------------------------------------------

// MultiConceptLanguageResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiConceptLanguageResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiConceptLanguageResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiConceptLanguageResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiConceptLanguageResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiConceptLanguageResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* MultiConceptLanguageResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiConceptLanguageResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiConceptLanguageResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiConceptLanguageResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiConceptLanguageResponse.status)
  return _internal_mutable_status();
}
inline void MultiConceptLanguageResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiConceptLanguageResponse.status)
}

// repeated .clarifai.api.ConceptLanguage concept_languages = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int MultiConceptLanguageResponse::_internal_concept_languages_size() const {
  return concept_languages_.size();
}
inline int MultiConceptLanguageResponse::concept_languages_size() const {
  return _internal_concept_languages_size();
}
inline ::clarifai::api::ConceptLanguage* MultiConceptLanguageResponse::mutable_concept_languages(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiConceptLanguageResponse.concept_languages)
  return concept_languages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptLanguage >*
MultiConceptLanguageResponse::mutable_concept_languages() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiConceptLanguageResponse.concept_languages)
  return &concept_languages_;
}
inline const ::clarifai::api::ConceptLanguage& MultiConceptLanguageResponse::_internal_concept_languages(int index) const {
  return concept_languages_.Get(index);
}
inline const ::clarifai::api::ConceptLanguage& MultiConceptLanguageResponse::concept_languages(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiConceptLanguageResponse.concept_languages)
  return _internal_concept_languages(index);
}
inline ::clarifai::api::ConceptLanguage* MultiConceptLanguageResponse::_internal_add_concept_languages() {
  return concept_languages_.Add();
}
inline ::clarifai::api::ConceptLanguage* MultiConceptLanguageResponse::add_concept_languages() {
  // @@protoc_insertion_point(field_add:clarifai.api.MultiConceptLanguageResponse.concept_languages)
  return _internal_add_concept_languages();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptLanguage >&
MultiConceptLanguageResponse::concept_languages() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiConceptLanguageResponse.concept_languages)
  return concept_languages_;
}

// -------------------------------------------------------------------

// ListConceptReferencesRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool ListConceptReferencesRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool ListConceptReferencesRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& ListConceptReferencesRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& ListConceptReferencesRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListConceptReferencesRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* ListConceptReferencesRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListConceptReferencesRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListConceptReferencesRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* ListConceptReferencesRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListConceptReferencesRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void ListConceptReferencesRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListConceptReferencesRequest.user_app_id)
}

// string concept_id = 2;
inline void ListConceptReferencesRequest::clear_concept_id() {
  concept_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ListConceptReferencesRequest::concept_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListConceptReferencesRequest.concept_id)
  return _internal_concept_id();
}
inline void ListConceptReferencesRequest::set_concept_id(const std::string& value) {
  _internal_set_concept_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListConceptReferencesRequest.concept_id)
}
inline std::string* ListConceptReferencesRequest::mutable_concept_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListConceptReferencesRequest.concept_id)
  return _internal_mutable_concept_id();
}
inline const std::string& ListConceptReferencesRequest::_internal_concept_id() const {
  return concept_id_.GetNoArena();
}
inline void ListConceptReferencesRequest::_internal_set_concept_id(const std::string& value) {
  
  concept_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ListConceptReferencesRequest::set_concept_id(std::string&& value) {
  
  concept_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ListConceptReferencesRequest.concept_id)
}
inline void ListConceptReferencesRequest::set_concept_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  concept_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.ListConceptReferencesRequest.concept_id)
}
inline void ListConceptReferencesRequest::set_concept_id(const char* value, size_t size) {
  
  concept_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ListConceptReferencesRequest.concept_id)
}
inline std::string* ListConceptReferencesRequest::_internal_mutable_concept_id() {
  
  return concept_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ListConceptReferencesRequest::release_concept_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListConceptReferencesRequest.concept_id)
  
  return concept_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ListConceptReferencesRequest::set_allocated_concept_id(std::string* concept_id) {
  if (concept_id != nullptr) {
    
  } else {
    
  }
  concept_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), concept_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListConceptReferencesRequest.concept_id)
}

// uint32 page = 3;
inline void ListConceptReferencesRequest::clear_page() {
  page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListConceptReferencesRequest::_internal_page() const {
  return page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListConceptReferencesRequest::page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListConceptReferencesRequest.page)
  return _internal_page();
}
inline void ListConceptReferencesRequest::_internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  page_ = value;
}
inline void ListConceptReferencesRequest::set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListConceptReferencesRequest.page)
}

// uint32 per_page = 4;
inline void ListConceptReferencesRequest::clear_per_page() {
  per_page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListConceptReferencesRequest::_internal_per_page() const {
  return per_page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListConceptReferencesRequest::per_page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListConceptReferencesRequest.per_page)
  return _internal_per_page();
}
inline void ListConceptReferencesRequest::_internal_set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  per_page_ = value;
}
inline void ListConceptReferencesRequest::set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_per_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListConceptReferencesRequest.per_page)
}

// -------------------------------------------------------------------

// SingleConceptReferenceResponse

// .clarifai.api.status.Status status = 1;
inline bool SingleConceptReferenceResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SingleConceptReferenceResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& SingleConceptReferenceResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& SingleConceptReferenceResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleConceptReferenceResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* SingleConceptReferenceResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleConceptReferenceResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* SingleConceptReferenceResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* SingleConceptReferenceResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleConceptReferenceResponse.status)
  return _internal_mutable_status();
}
inline void SingleConceptReferenceResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleConceptReferenceResponse.status)
}

// .clarifai.api.ConceptReference concept_reference = 2;
inline bool SingleConceptReferenceResponse::_internal_has_concept_reference() const {
  return this != internal_default_instance() && concept_reference_ != nullptr;
}
inline bool SingleConceptReferenceResponse::has_concept_reference() const {
  return _internal_has_concept_reference();
}
inline const ::clarifai::api::ConceptReference& SingleConceptReferenceResponse::_internal_concept_reference() const {
  const ::clarifai::api::ConceptReference* p = concept_reference_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::ConceptReference*>(
      &::clarifai::api::_ConceptReference_default_instance_);
}
inline const ::clarifai::api::ConceptReference& SingleConceptReferenceResponse::concept_reference() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleConceptReferenceResponse.concept_reference)
  return _internal_concept_reference();
}
inline ::clarifai::api::ConceptReference* SingleConceptReferenceResponse::release_concept_reference() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleConceptReferenceResponse.concept_reference)
  
  ::clarifai::api::ConceptReference* temp = concept_reference_;
  concept_reference_ = nullptr;
  return temp;
}
inline ::clarifai::api::ConceptReference* SingleConceptReferenceResponse::_internal_mutable_concept_reference() {
  
  if (concept_reference_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::ConceptReference>(GetArenaNoVirtual());
    concept_reference_ = p;
  }
  return concept_reference_;
}
inline ::clarifai::api::ConceptReference* SingleConceptReferenceResponse::mutable_concept_reference() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleConceptReferenceResponse.concept_reference)
  return _internal_mutable_concept_reference();
}
inline void SingleConceptReferenceResponse::set_allocated_concept_reference(::clarifai::api::ConceptReference* concept_reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(concept_reference_);
  }
  if (concept_reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      concept_reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, concept_reference, submessage_arena);
    }
    
  } else {
    
  }
  concept_reference_ = concept_reference;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleConceptReferenceResponse.concept_reference)
}

// -------------------------------------------------------------------

// MultiConceptReferenceResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiConceptReferenceResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiConceptReferenceResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiConceptReferenceResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiConceptReferenceResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiConceptReferenceResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* MultiConceptReferenceResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiConceptReferenceResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiConceptReferenceResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiConceptReferenceResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiConceptReferenceResponse.status)
  return _internal_mutable_status();
}
inline void MultiConceptReferenceResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiConceptReferenceResponse.status)
}

// repeated .clarifai.api.ConceptReference concept_references = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int MultiConceptReferenceResponse::_internal_concept_references_size() const {
  return concept_references_.size();
}
inline int MultiConceptReferenceResponse::concept_references_size() const {
  return _internal_concept_references_size();
}
inline ::clarifai::api::ConceptReference* MultiConceptReferenceResponse::mutable_concept_references(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiConceptReferenceResponse.concept_references)
  return concept_references_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptReference >*
MultiConceptReferenceResponse::mutable_concept_references() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiConceptReferenceResponse.concept_references)
  return &concept_references_;
}
inline const ::clarifai::api::ConceptReference& MultiConceptReferenceResponse::_internal_concept_references(int index) const {
  return concept_references_.Get(index);
}
inline const ::clarifai::api::ConceptReference& MultiConceptReferenceResponse::concept_references(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiConceptReferenceResponse.concept_references)
  return _internal_concept_references(index);
}
inline ::clarifai::api::ConceptReference* MultiConceptReferenceResponse::_internal_add_concept_references() {
  return concept_references_.Add();
}
inline ::clarifai::api::ConceptReference* MultiConceptReferenceResponse::add_concept_references() {
  // @@protoc_insertion_point(field_add:clarifai.api.MultiConceptReferenceResponse.concept_references)
  return _internal_add_concept_references();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptReference >&
MultiConceptReferenceResponse::concept_references() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiConceptReferenceResponse.concept_references)
  return concept_references_;
}

// -------------------------------------------------------------------

// GetHealthzRequest

// -------------------------------------------------------------------

// GetHealthzResponse

// .clarifai.api.status.Status status = 1;
inline bool GetHealthzResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool GetHealthzResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& GetHealthzResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& GetHealthzResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetHealthzResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* GetHealthzResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetHealthzResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* GetHealthzResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* GetHealthzResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetHealthzResponse.status)
  return _internal_mutable_status();
}
inline void GetHealthzResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetHealthzResponse.status)
}

// string time = 2;
inline void GetHealthzResponse::clear_time() {
  time_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetHealthzResponse::time() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetHealthzResponse.time)
  return _internal_time();
}
inline void GetHealthzResponse::set_time(const std::string& value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:clarifai.api.GetHealthzResponse.time)
}
inline std::string* GetHealthzResponse::mutable_time() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetHealthzResponse.time)
  return _internal_mutable_time();
}
inline const std::string& GetHealthzResponse::_internal_time() const {
  return time_.GetNoArena();
}
inline void GetHealthzResponse::_internal_set_time(const std::string& value) {
  
  time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetHealthzResponse::set_time(std::string&& value) {
  
  time_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.GetHealthzResponse.time)
}
inline void GetHealthzResponse::set_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.GetHealthzResponse.time)
}
inline void GetHealthzResponse::set_time(const char* value, size_t size) {
  
  time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.GetHealthzResponse.time)
}
inline std::string* GetHealthzResponse::_internal_mutable_time() {
  
  return time_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetHealthzResponse::release_time() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetHealthzResponse.time)
  
  return time_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetHealthzResponse::set_allocated_time(std::string* time) {
  if (time != nullptr) {
    
  } else {
    
  }
  time_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetHealthzResponse.time)
}

// -------------------------------------------------------------------

// GetInputRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool GetInputRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool GetInputRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& GetInputRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& GetInputRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetInputRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* GetInputRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetInputRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetInputRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* GetInputRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetInputRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void GetInputRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetInputRequest.user_app_id)
}

// string input_id = 2;
inline void GetInputRequest::clear_input_id() {
  input_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetInputRequest::input_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetInputRequest.input_id)
  return _internal_input_id();
}
inline void GetInputRequest::set_input_id(const std::string& value) {
  _internal_set_input_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.GetInputRequest.input_id)
}
inline std::string* GetInputRequest::mutable_input_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetInputRequest.input_id)
  return _internal_mutable_input_id();
}
inline const std::string& GetInputRequest::_internal_input_id() const {
  return input_id_.GetNoArena();
}
inline void GetInputRequest::_internal_set_input_id(const std::string& value) {
  
  input_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetInputRequest::set_input_id(std::string&& value) {
  
  input_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.GetInputRequest.input_id)
}
inline void GetInputRequest::set_input_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  input_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.GetInputRequest.input_id)
}
inline void GetInputRequest::set_input_id(const char* value, size_t size) {
  
  input_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.GetInputRequest.input_id)
}
inline std::string* GetInputRequest::_internal_mutable_input_id() {
  
  return input_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetInputRequest::release_input_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetInputRequest.input_id)
  
  return input_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetInputRequest::set_allocated_input_id(std::string* input_id) {
  if (input_id != nullptr) {
    
  } else {
    
  }
  input_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), input_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetInputRequest.input_id)
}

// -------------------------------------------------------------------

// ListInputsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool ListInputsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool ListInputsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& ListInputsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& ListInputsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListInputsRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* ListInputsRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListInputsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListInputsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* ListInputsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListInputsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void ListInputsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListInputsRequest.user_app_id)
}

// uint32 page = 2;
inline void ListInputsRequest::clear_page() {
  page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListInputsRequest::_internal_page() const {
  return page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListInputsRequest::page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListInputsRequest.page)
  return _internal_page();
}
inline void ListInputsRequest::_internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  page_ = value;
}
inline void ListInputsRequest::set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListInputsRequest.page)
}

// uint32 per_page = 3;
inline void ListInputsRequest::clear_per_page() {
  per_page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListInputsRequest::_internal_per_page() const {
  return per_page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListInputsRequest::per_page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListInputsRequest.per_page)
  return _internal_per_page();
}
inline void ListInputsRequest::_internal_set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  per_page_ = value;
}
inline void ListInputsRequest::set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_per_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListInputsRequest.per_page)
}

// .clarifai.api.status.Status status = 5;
inline bool ListInputsRequest::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool ListInputsRequest::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& ListInputsRequest::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& ListInputsRequest::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListInputsRequest.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* ListInputsRequest::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListInputsRequest.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* ListInputsRequest::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* ListInputsRequest::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListInputsRequest.status)
  return _internal_mutable_status();
}
inline void ListInputsRequest::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListInputsRequest.status)
}

// repeated string ids = 4;
inline int ListInputsRequest::_internal_ids_size() const {
  return ids_.size();
}
inline int ListInputsRequest::ids_size() const {
  return _internal_ids_size();
}
inline void ListInputsRequest::clear_ids() {
  ids_.Clear();
}
inline std::string* ListInputsRequest::add_ids() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.ListInputsRequest.ids)
  return _internal_add_ids();
}
inline const std::string& ListInputsRequest::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const std::string& ListInputsRequest::ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListInputsRequest.ids)
  return _internal_ids(index);
}
inline std::string* ListInputsRequest::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListInputsRequest.ids)
  return ids_.Mutable(index);
}
inline void ListInputsRequest::set_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.ListInputsRequest.ids)
  ids_.Mutable(index)->assign(value);
}
inline void ListInputsRequest::set_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.ListInputsRequest.ids)
  ids_.Mutable(index)->assign(std::move(value));
}
inline void ListInputsRequest::set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.ListInputsRequest.ids)
}
inline void ListInputsRequest::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ListInputsRequest.ids)
}
inline std::string* ListInputsRequest::_internal_add_ids() {
  return ids_.Add();
}
inline void ListInputsRequest::add_ids(const std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.ListInputsRequest.ids)
}
inline void ListInputsRequest::add_ids(std::string&& value) {
  ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.ListInputsRequest.ids)
}
inline void ListInputsRequest::add_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.ListInputsRequest.ids)
}
inline void ListInputsRequest::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.ListInputsRequest.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListInputsRequest::ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.ListInputsRequest.ids)
  return ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListInputsRequest::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.ListInputsRequest.ids)
  return &ids_;
}

// -------------------------------------------------------------------

// StreamInputsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool StreamInputsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool StreamInputsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& StreamInputsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& StreamInputsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.StreamInputsRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* StreamInputsRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.StreamInputsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* StreamInputsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* StreamInputsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.StreamInputsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void StreamInputsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.StreamInputsRequest.user_app_id)
}

// uint32 per_page = 2;
inline void StreamInputsRequest::clear_per_page() {
  per_page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamInputsRequest::_internal_per_page() const {
  return per_page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamInputsRequest::per_page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.StreamInputsRequest.per_page)
  return _internal_per_page();
}
inline void StreamInputsRequest::_internal_set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  per_page_ = value;
}
inline void StreamInputsRequest::set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_per_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.StreamInputsRequest.per_page)
}

// string last_id = 3;
inline void StreamInputsRequest::clear_last_id() {
  last_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StreamInputsRequest::last_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.StreamInputsRequest.last_id)
  return _internal_last_id();
}
inline void StreamInputsRequest::set_last_id(const std::string& value) {
  _internal_set_last_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.StreamInputsRequest.last_id)
}
inline std::string* StreamInputsRequest::mutable_last_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.StreamInputsRequest.last_id)
  return _internal_mutable_last_id();
}
inline const std::string& StreamInputsRequest::_internal_last_id() const {
  return last_id_.GetNoArena();
}
inline void StreamInputsRequest::_internal_set_last_id(const std::string& value) {
  
  last_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void StreamInputsRequest::set_last_id(std::string&& value) {
  
  last_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.StreamInputsRequest.last_id)
}
inline void StreamInputsRequest::set_last_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  last_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.StreamInputsRequest.last_id)
}
inline void StreamInputsRequest::set_last_id(const char* value, size_t size) {
  
  last_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.StreamInputsRequest.last_id)
}
inline std::string* StreamInputsRequest::_internal_mutable_last_id() {
  
  return last_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StreamInputsRequest::release_last_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.StreamInputsRequest.last_id)
  
  return last_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StreamInputsRequest::set_allocated_last_id(std::string* last_id) {
  if (last_id != nullptr) {
    
  } else {
    
  }
  last_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.StreamInputsRequest.last_id)
}

// bool descending = 4;
inline void StreamInputsRequest::clear_descending() {
  descending_ = false;
}
inline bool StreamInputsRequest::_internal_descending() const {
  return descending_;
}
inline bool StreamInputsRequest::descending() const {
  // @@protoc_insertion_point(field_get:clarifai.api.StreamInputsRequest.descending)
  return _internal_descending();
}
inline void StreamInputsRequest::_internal_set_descending(bool value) {
  
  descending_ = value;
}
inline void StreamInputsRequest::set_descending(bool value) {
  _internal_set_descending(value);
  // @@protoc_insertion_point(field_set:clarifai.api.StreamInputsRequest.descending)
}

// -------------------------------------------------------------------

// PostInputsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostInputsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostInputsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostInputsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostInputsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostInputsRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* PostInputsRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostInputsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostInputsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostInputsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostInputsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void PostInputsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostInputsRequest.user_app_id)
}

// repeated .clarifai.api.Input inputs = 2;
inline int PostInputsRequest::_internal_inputs_size() const {
  return inputs_.size();
}
inline int PostInputsRequest::inputs_size() const {
  return _internal_inputs_size();
}
inline ::clarifai::api::Input* PostInputsRequest::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostInputsRequest.inputs)
  return inputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input >*
PostInputsRequest::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostInputsRequest.inputs)
  return &inputs_;
}
inline const ::clarifai::api::Input& PostInputsRequest::_internal_inputs(int index) const {
  return inputs_.Get(index);
}
inline const ::clarifai::api::Input& PostInputsRequest::inputs(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostInputsRequest.inputs)
  return _internal_inputs(index);
}
inline ::clarifai::api::Input* PostInputsRequest::_internal_add_inputs() {
  return inputs_.Add();
}
inline ::clarifai::api::Input* PostInputsRequest::add_inputs() {
  // @@protoc_insertion_point(field_add:clarifai.api.PostInputsRequest.inputs)
  return _internal_add_inputs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input >&
PostInputsRequest::inputs() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostInputsRequest.inputs)
  return inputs_;
}

// -------------------------------------------------------------------

// PostInputsFileRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostInputsFileRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostInputsFileRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostInputsFileRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostInputsFileRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostInputsFileRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* PostInputsFileRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostInputsFileRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostInputsFileRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostInputsFileRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostInputsFileRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void PostInputsFileRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostInputsFileRequest.user_app_id)
}

// string url = 2;
inline void PostInputsFileRequest::clear_url() {
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PostInputsFileRequest::url() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostInputsFileRequest.url)
  return _internal_url();
}
inline void PostInputsFileRequest::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PostInputsFileRequest.url)
}
inline std::string* PostInputsFileRequest::mutable_url() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostInputsFileRequest.url)
  return _internal_mutable_url();
}
inline const std::string& PostInputsFileRequest::_internal_url() const {
  return url_.GetNoArena();
}
inline void PostInputsFileRequest::_internal_set_url(const std::string& value) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PostInputsFileRequest::set_url(std::string&& value) {
  
  url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.PostInputsFileRequest.url)
}
inline void PostInputsFileRequest::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.PostInputsFileRequest.url)
}
inline void PostInputsFileRequest::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PostInputsFileRequest.url)
}
inline std::string* PostInputsFileRequest::_internal_mutable_url() {
  
  return url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PostInputsFileRequest::release_url() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostInputsFileRequest.url)
  
  return url_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PostInputsFileRequest::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostInputsFileRequest.url)
}

// string filetype = 3;
inline void PostInputsFileRequest::clear_filetype() {
  filetype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PostInputsFileRequest::filetype() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostInputsFileRequest.filetype)
  return _internal_filetype();
}
inline void PostInputsFileRequest::set_filetype(const std::string& value) {
  _internal_set_filetype(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PostInputsFileRequest.filetype)
}
inline std::string* PostInputsFileRequest::mutable_filetype() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostInputsFileRequest.filetype)
  return _internal_mutable_filetype();
}
inline const std::string& PostInputsFileRequest::_internal_filetype() const {
  return filetype_.GetNoArena();
}
inline void PostInputsFileRequest::_internal_set_filetype(const std::string& value) {
  
  filetype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PostInputsFileRequest::set_filetype(std::string&& value) {
  
  filetype_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.PostInputsFileRequest.filetype)
}
inline void PostInputsFileRequest::set_filetype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filetype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.PostInputsFileRequest.filetype)
}
inline void PostInputsFileRequest::set_filetype(const char* value, size_t size) {
  
  filetype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PostInputsFileRequest.filetype)
}
inline std::string* PostInputsFileRequest::_internal_mutable_filetype() {
  
  return filetype_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PostInputsFileRequest::release_filetype() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostInputsFileRequest.filetype)
  
  return filetype_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PostInputsFileRequest::set_allocated_filetype(std::string* filetype) {
  if (filetype != nullptr) {
    
  } else {
    
  }
  filetype_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filetype);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostInputsFileRequest.filetype)
}

// -------------------------------------------------------------------

// PostInputsNiFiRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostInputsNiFiRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostInputsNiFiRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostInputsNiFiRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostInputsNiFiRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostInputsNiFiRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* PostInputsNiFiRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostInputsNiFiRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostInputsNiFiRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostInputsNiFiRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostInputsNiFiRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void PostInputsNiFiRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostInputsNiFiRequest.user_app_id)
}

// .google.protobuf.ListValue urls = 2;
inline bool PostInputsNiFiRequest::_internal_has_urls() const {
  return this != internal_default_instance() && urls_ != nullptr;
}
inline bool PostInputsNiFiRequest::has_urls() const {
  return _internal_has_urls();
}
inline const PROTOBUF_NAMESPACE_ID::ListValue& PostInputsNiFiRequest::_internal_urls() const {
  const PROTOBUF_NAMESPACE_ID::ListValue* p = urls_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::ListValue*>(
      &PROTOBUF_NAMESPACE_ID::_ListValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::ListValue& PostInputsNiFiRequest::urls() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostInputsNiFiRequest.urls)
  return _internal_urls();
}
inline PROTOBUF_NAMESPACE_ID::ListValue* PostInputsNiFiRequest::release_urls() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostInputsNiFiRequest.urls)
  
  PROTOBUF_NAMESPACE_ID::ListValue* temp = urls_;
  urls_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::ListValue* PostInputsNiFiRequest::_internal_mutable_urls() {
  
  if (urls_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::ListValue>(GetArenaNoVirtual());
    urls_ = p;
  }
  return urls_;
}
inline PROTOBUF_NAMESPACE_ID::ListValue* PostInputsNiFiRequest::mutable_urls() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostInputsNiFiRequest.urls)
  return _internal_mutable_urls();
}
inline void PostInputsNiFiRequest::set_allocated_urls(PROTOBUF_NAMESPACE_ID::ListValue* urls) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(urls_);
  }
  if (urls) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(urls)->GetArena();
    if (message_arena != submessage_arena) {
      urls = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, urls, submessage_arena);
    }
    
  } else {
    
  }
  urls_ = urls;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostInputsNiFiRequest.urls)
}

// .google.protobuf.Struct metadata = 3;
inline bool PostInputsNiFiRequest::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool PostInputsNiFiRequest::has_metadata() const {
  return _internal_has_metadata();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& PostInputsNiFiRequest::_internal_metadata() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& PostInputsNiFiRequest::metadata() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostInputsNiFiRequest.metadata)
  return _internal_metadata();
}
inline PROTOBUF_NAMESPACE_ID::Struct* PostInputsNiFiRequest::release_metadata() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostInputsNiFiRequest.metadata)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* PostInputsNiFiRequest::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArenaNoVirtual());
    metadata_ = p;
  }
  return metadata_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* PostInputsNiFiRequest::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostInputsNiFiRequest.metadata)
  return _internal_mutable_metadata();
}
inline void PostInputsNiFiRequest::set_allocated_metadata(PROTOBUF_NAMESPACE_ID::Struct* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata)->GetArena();
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostInputsNiFiRequest.metadata)
}

// .google.protobuf.Struct params = 4;
inline bool PostInputsNiFiRequest::_internal_has_params() const {
  return this != internal_default_instance() && params_ != nullptr;
}
inline bool PostInputsNiFiRequest::has_params() const {
  return _internal_has_params();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& PostInputsNiFiRequest::_internal_params() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = params_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& PostInputsNiFiRequest::params() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostInputsNiFiRequest.params)
  return _internal_params();
}
inline PROTOBUF_NAMESPACE_ID::Struct* PostInputsNiFiRequest::release_params() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostInputsNiFiRequest.params)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = params_;
  params_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* PostInputsNiFiRequest::_internal_mutable_params() {
  
  if (params_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArenaNoVirtual());
    params_ = p;
  }
  return params_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* PostInputsNiFiRequest::mutable_params() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostInputsNiFiRequest.params)
  return _internal_mutable_params();
}
inline void PostInputsNiFiRequest::set_allocated_params(PROTOBUF_NAMESPACE_ID::Struct* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(params_);
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(params)->GetArena();
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  params_ = params;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostInputsNiFiRequest.params)
}

// -------------------------------------------------------------------

// PatchInputsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PatchInputsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PatchInputsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PatchInputsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PatchInputsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchInputsRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* PatchInputsRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchInputsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchInputsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PatchInputsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchInputsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void PatchInputsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchInputsRequest.user_app_id)
}

// repeated .clarifai.api.Input inputs = 2;
inline int PatchInputsRequest::_internal_inputs_size() const {
  return inputs_.size();
}
inline int PatchInputsRequest::inputs_size() const {
  return _internal_inputs_size();
}
inline ::clarifai::api::Input* PatchInputsRequest::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchInputsRequest.inputs)
  return inputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input >*
PatchInputsRequest::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PatchInputsRequest.inputs)
  return &inputs_;
}
inline const ::clarifai::api::Input& PatchInputsRequest::_internal_inputs(int index) const {
  return inputs_.Get(index);
}
inline const ::clarifai::api::Input& PatchInputsRequest::inputs(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchInputsRequest.inputs)
  return _internal_inputs(index);
}
inline ::clarifai::api::Input* PatchInputsRequest::_internal_add_inputs() {
  return inputs_.Add();
}
inline ::clarifai::api::Input* PatchInputsRequest::add_inputs() {
  // @@protoc_insertion_point(field_add:clarifai.api.PatchInputsRequest.inputs)
  return _internal_add_inputs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input >&
PatchInputsRequest::inputs() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PatchInputsRequest.inputs)
  return inputs_;
}

// string action = 3;
inline void PatchInputsRequest::clear_action() {
  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PatchInputsRequest::action() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchInputsRequest.action)
  return _internal_action();
}
inline void PatchInputsRequest::set_action(const std::string& value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PatchInputsRequest.action)
}
inline std::string* PatchInputsRequest::mutable_action() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchInputsRequest.action)
  return _internal_mutable_action();
}
inline const std::string& PatchInputsRequest::_internal_action() const {
  return action_.GetNoArena();
}
inline void PatchInputsRequest::_internal_set_action(const std::string& value) {
  
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PatchInputsRequest::set_action(std::string&& value) {
  
  action_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.PatchInputsRequest.action)
}
inline void PatchInputsRequest::set_action(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.PatchInputsRequest.action)
}
inline void PatchInputsRequest::set_action(const char* value, size_t size) {
  
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PatchInputsRequest.action)
}
inline std::string* PatchInputsRequest::_internal_mutable_action() {
  
  return action_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PatchInputsRequest::release_action() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchInputsRequest.action)
  
  return action_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PatchInputsRequest::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchInputsRequest.action)
}

// -------------------------------------------------------------------

// DeleteInputRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool DeleteInputRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool DeleteInputRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& DeleteInputRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& DeleteInputRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteInputRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* DeleteInputRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteInputRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteInputRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* DeleteInputRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteInputRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void DeleteInputRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteInputRequest.user_app_id)
}

// string input_id = 2;
inline void DeleteInputRequest::clear_input_id() {
  input_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeleteInputRequest::input_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteInputRequest.input_id)
  return _internal_input_id();
}
inline void DeleteInputRequest::set_input_id(const std::string& value) {
  _internal_set_input_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteInputRequest.input_id)
}
inline std::string* DeleteInputRequest::mutable_input_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteInputRequest.input_id)
  return _internal_mutable_input_id();
}
inline const std::string& DeleteInputRequest::_internal_input_id() const {
  return input_id_.GetNoArena();
}
inline void DeleteInputRequest::_internal_set_input_id(const std::string& value) {
  
  input_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DeleteInputRequest::set_input_id(std::string&& value) {
  
  input_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.DeleteInputRequest.input_id)
}
inline void DeleteInputRequest::set_input_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  input_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.DeleteInputRequest.input_id)
}
inline void DeleteInputRequest::set_input_id(const char* value, size_t size) {
  
  input_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.DeleteInputRequest.input_id)
}
inline std::string* DeleteInputRequest::_internal_mutable_input_id() {
  
  return input_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeleteInputRequest::release_input_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteInputRequest.input_id)
  
  return input_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteInputRequest::set_allocated_input_id(std::string* input_id) {
  if (input_id != nullptr) {
    
  } else {
    
  }
  input_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), input_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteInputRequest.input_id)
}

// -------------------------------------------------------------------

// DeleteInputsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool DeleteInputsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool DeleteInputsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& DeleteInputsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& DeleteInputsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteInputsRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* DeleteInputsRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteInputsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteInputsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* DeleteInputsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteInputsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void DeleteInputsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteInputsRequest.user_app_id)
}

// repeated string ids = 2;
inline int DeleteInputsRequest::_internal_ids_size() const {
  return ids_.size();
}
inline int DeleteInputsRequest::ids_size() const {
  return _internal_ids_size();
}
inline void DeleteInputsRequest::clear_ids() {
  ids_.Clear();
}
inline std::string* DeleteInputsRequest::add_ids() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.DeleteInputsRequest.ids)
  return _internal_add_ids();
}
inline const std::string& DeleteInputsRequest::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const std::string& DeleteInputsRequest::ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteInputsRequest.ids)
  return _internal_ids(index);
}
inline std::string* DeleteInputsRequest::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteInputsRequest.ids)
  return ids_.Mutable(index);
}
inline void DeleteInputsRequest::set_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteInputsRequest.ids)
  ids_.Mutable(index)->assign(value);
}
inline void DeleteInputsRequest::set_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteInputsRequest.ids)
  ids_.Mutable(index)->assign(std::move(value));
}
inline void DeleteInputsRequest::set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.DeleteInputsRequest.ids)
}
inline void DeleteInputsRequest::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.DeleteInputsRequest.ids)
}
inline std::string* DeleteInputsRequest::_internal_add_ids() {
  return ids_.Add();
}
inline void DeleteInputsRequest::add_ids(const std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.DeleteInputsRequest.ids)
}
inline void DeleteInputsRequest::add_ids(std::string&& value) {
  ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.DeleteInputsRequest.ids)
}
inline void DeleteInputsRequest::add_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.DeleteInputsRequest.ids)
}
inline void DeleteInputsRequest::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.DeleteInputsRequest.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeleteInputsRequest::ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.DeleteInputsRequest.ids)
  return ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeleteInputsRequest::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.DeleteInputsRequest.ids)
  return &ids_;
}

// bool delete_all = 3;
inline void DeleteInputsRequest::clear_delete_all() {
  delete_all_ = false;
}
inline bool DeleteInputsRequest::_internal_delete_all() const {
  return delete_all_;
}
inline bool DeleteInputsRequest::delete_all() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteInputsRequest.delete_all)
  return _internal_delete_all();
}
inline void DeleteInputsRequest::_internal_set_delete_all(bool value) {
  
  delete_all_ = value;
}
inline void DeleteInputsRequest::set_delete_all(bool value) {
  _internal_set_delete_all(value);
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteInputsRequest.delete_all)
}

// -------------------------------------------------------------------

// SingleInputResponse

// .clarifai.api.status.Status status = 1;
inline bool SingleInputResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SingleInputResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& SingleInputResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& SingleInputResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleInputResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* SingleInputResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleInputResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* SingleInputResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* SingleInputResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleInputResponse.status)
  return _internal_mutable_status();
}
inline void SingleInputResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleInputResponse.status)
}

// .clarifai.api.Input input = 2;
inline bool SingleInputResponse::_internal_has_input() const {
  return this != internal_default_instance() && input_ != nullptr;
}
inline bool SingleInputResponse::has_input() const {
  return _internal_has_input();
}
inline const ::clarifai::api::Input& SingleInputResponse::_internal_input() const {
  const ::clarifai::api::Input* p = input_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Input*>(
      &::clarifai::api::_Input_default_instance_);
}
inline const ::clarifai::api::Input& SingleInputResponse::input() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleInputResponse.input)
  return _internal_input();
}
inline ::clarifai::api::Input* SingleInputResponse::release_input() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleInputResponse.input)
  
  ::clarifai::api::Input* temp = input_;
  input_ = nullptr;
  return temp;
}
inline ::clarifai::api::Input* SingleInputResponse::_internal_mutable_input() {
  
  if (input_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Input>(GetArenaNoVirtual());
    input_ = p;
  }
  return input_;
}
inline ::clarifai::api::Input* SingleInputResponse::mutable_input() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleInputResponse.input)
  return _internal_mutable_input();
}
inline void SingleInputResponse::set_allocated_input(::clarifai::api::Input* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_);
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    
  } else {
    
  }
  input_ = input;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleInputResponse.input)
}

// -------------------------------------------------------------------

// MultiInputResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiInputResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiInputResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiInputResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiInputResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiInputResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* MultiInputResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiInputResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiInputResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiInputResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiInputResponse.status)
  return _internal_mutable_status();
}
inline void MultiInputResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiInputResponse.status)
}

// repeated .clarifai.api.Input inputs = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int MultiInputResponse::_internal_inputs_size() const {
  return inputs_.size();
}
inline int MultiInputResponse::inputs_size() const {
  return _internal_inputs_size();
}
inline ::clarifai::api::Input* MultiInputResponse::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiInputResponse.inputs)
  return inputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input >*
MultiInputResponse::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiInputResponse.inputs)
  return &inputs_;
}
inline const ::clarifai::api::Input& MultiInputResponse::_internal_inputs(int index) const {
  return inputs_.Get(index);
}
inline const ::clarifai::api::Input& MultiInputResponse::inputs(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiInputResponse.inputs)
  return _internal_inputs(index);
}
inline ::clarifai::api::Input* MultiInputResponse::_internal_add_inputs() {
  return inputs_.Add();
}
inline ::clarifai::api::Input* MultiInputResponse::add_inputs() {
  // @@protoc_insertion_point(field_add:clarifai.api.MultiInputResponse.inputs)
  return _internal_add_inputs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input >&
MultiInputResponse::inputs() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiInputResponse.inputs)
  return inputs_;
}

// -------------------------------------------------------------------

// SingleInputCountResponse

// .clarifai.api.status.Status status = 1;
inline bool SingleInputCountResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SingleInputCountResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& SingleInputCountResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& SingleInputCountResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleInputCountResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* SingleInputCountResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleInputCountResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* SingleInputCountResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* SingleInputCountResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleInputCountResponse.status)
  return _internal_mutable_status();
}
inline void SingleInputCountResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleInputCountResponse.status)
}

// .clarifai.api.InputCount counts = 2;
inline bool SingleInputCountResponse::_internal_has_counts() const {
  return this != internal_default_instance() && counts_ != nullptr;
}
inline bool SingleInputCountResponse::has_counts() const {
  return _internal_has_counts();
}
inline const ::clarifai::api::InputCount& SingleInputCountResponse::_internal_counts() const {
  const ::clarifai::api::InputCount* p = counts_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::InputCount*>(
      &::clarifai::api::_InputCount_default_instance_);
}
inline const ::clarifai::api::InputCount& SingleInputCountResponse::counts() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleInputCountResponse.counts)
  return _internal_counts();
}
inline ::clarifai::api::InputCount* SingleInputCountResponse::release_counts() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleInputCountResponse.counts)
  
  ::clarifai::api::InputCount* temp = counts_;
  counts_ = nullptr;
  return temp;
}
inline ::clarifai::api::InputCount* SingleInputCountResponse::_internal_mutable_counts() {
  
  if (counts_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::InputCount>(GetArenaNoVirtual());
    counts_ = p;
  }
  return counts_;
}
inline ::clarifai::api::InputCount* SingleInputCountResponse::mutable_counts() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleInputCountResponse.counts)
  return _internal_mutable_counts();
}
inline void SingleInputCountResponse::set_allocated_counts(::clarifai::api::InputCount* counts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(counts_);
  }
  if (counts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      counts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, counts, submessage_arena);
    }
    
  } else {
    
  }
  counts_ = counts;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleInputCountResponse.counts)
}

// -------------------------------------------------------------------

// GetInputCountRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool GetInputCountRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool GetInputCountRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& GetInputCountRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& GetInputCountRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetInputCountRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* GetInputCountRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetInputCountRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetInputCountRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* GetInputCountRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetInputCountRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void GetInputCountRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetInputCountRequest.user_app_id)
}

// -------------------------------------------------------------------

// PostModelOutputsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostModelOutputsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostModelOutputsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostModelOutputsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostModelOutputsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostModelOutputsRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* PostModelOutputsRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostModelOutputsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostModelOutputsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostModelOutputsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostModelOutputsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void PostModelOutputsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostModelOutputsRequest.user_app_id)
}

// string model_id = 2;
inline void PostModelOutputsRequest::clear_model_id() {
  model_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PostModelOutputsRequest::model_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostModelOutputsRequest.model_id)
  return _internal_model_id();
}
inline void PostModelOutputsRequest::set_model_id(const std::string& value) {
  _internal_set_model_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PostModelOutputsRequest.model_id)
}
inline std::string* PostModelOutputsRequest::mutable_model_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostModelOutputsRequest.model_id)
  return _internal_mutable_model_id();
}
inline const std::string& PostModelOutputsRequest::_internal_model_id() const {
  return model_id_.GetNoArena();
}
inline void PostModelOutputsRequest::_internal_set_model_id(const std::string& value) {
  
  model_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PostModelOutputsRequest::set_model_id(std::string&& value) {
  
  model_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.PostModelOutputsRequest.model_id)
}
inline void PostModelOutputsRequest::set_model_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.PostModelOutputsRequest.model_id)
}
inline void PostModelOutputsRequest::set_model_id(const char* value, size_t size) {
  
  model_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PostModelOutputsRequest.model_id)
}
inline std::string* PostModelOutputsRequest::_internal_mutable_model_id() {
  
  return model_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PostModelOutputsRequest::release_model_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostModelOutputsRequest.model_id)
  
  return model_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PostModelOutputsRequest::set_allocated_model_id(std::string* model_id) {
  if (model_id != nullptr) {
    
  } else {
    
  }
  model_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostModelOutputsRequest.model_id)
}

// string version_id = 3;
inline void PostModelOutputsRequest::clear_version_id() {
  version_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PostModelOutputsRequest::version_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostModelOutputsRequest.version_id)
  return _internal_version_id();
}
inline void PostModelOutputsRequest::set_version_id(const std::string& value) {
  _internal_set_version_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PostModelOutputsRequest.version_id)
}
inline std::string* PostModelOutputsRequest::mutable_version_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostModelOutputsRequest.version_id)
  return _internal_mutable_version_id();
}
inline const std::string& PostModelOutputsRequest::_internal_version_id() const {
  return version_id_.GetNoArena();
}
inline void PostModelOutputsRequest::_internal_set_version_id(const std::string& value) {
  
  version_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PostModelOutputsRequest::set_version_id(std::string&& value) {
  
  version_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.PostModelOutputsRequest.version_id)
}
inline void PostModelOutputsRequest::set_version_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.PostModelOutputsRequest.version_id)
}
inline void PostModelOutputsRequest::set_version_id(const char* value, size_t size) {
  
  version_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PostModelOutputsRequest.version_id)
}
inline std::string* PostModelOutputsRequest::_internal_mutable_version_id() {
  
  return version_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PostModelOutputsRequest::release_version_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostModelOutputsRequest.version_id)
  
  return version_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PostModelOutputsRequest::set_allocated_version_id(std::string* version_id) {
  if (version_id != nullptr) {
    
  } else {
    
  }
  version_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostModelOutputsRequest.version_id)
}

// repeated .clarifai.api.Input inputs = 4;
inline int PostModelOutputsRequest::_internal_inputs_size() const {
  return inputs_.size();
}
inline int PostModelOutputsRequest::inputs_size() const {
  return _internal_inputs_size();
}
inline ::clarifai::api::Input* PostModelOutputsRequest::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostModelOutputsRequest.inputs)
  return inputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input >*
PostModelOutputsRequest::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostModelOutputsRequest.inputs)
  return &inputs_;
}
inline const ::clarifai::api::Input& PostModelOutputsRequest::_internal_inputs(int index) const {
  return inputs_.Get(index);
}
inline const ::clarifai::api::Input& PostModelOutputsRequest::inputs(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostModelOutputsRequest.inputs)
  return _internal_inputs(index);
}
inline ::clarifai::api::Input* PostModelOutputsRequest::_internal_add_inputs() {
  return inputs_.Add();
}
inline ::clarifai::api::Input* PostModelOutputsRequest::add_inputs() {
  // @@protoc_insertion_point(field_add:clarifai.api.PostModelOutputsRequest.inputs)
  return _internal_add_inputs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input >&
PostModelOutputsRequest::inputs() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostModelOutputsRequest.inputs)
  return inputs_;
}

// .clarifai.api.Model model = 5;
inline bool PostModelOutputsRequest::_internal_has_model() const {
  return this != internal_default_instance() && model_ != nullptr;
}
inline bool PostModelOutputsRequest::has_model() const {
  return _internal_has_model();
}
inline const ::clarifai::api::Model& PostModelOutputsRequest::_internal_model() const {
  const ::clarifai::api::Model* p = model_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Model*>(
      &::clarifai::api::_Model_default_instance_);
}
inline const ::clarifai::api::Model& PostModelOutputsRequest::model() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostModelOutputsRequest.model)
  return _internal_model();
}
inline ::clarifai::api::Model* PostModelOutputsRequest::release_model() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostModelOutputsRequest.model)
  
  ::clarifai::api::Model* temp = model_;
  model_ = nullptr;
  return temp;
}
inline ::clarifai::api::Model* PostModelOutputsRequest::_internal_mutable_model() {
  
  if (model_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Model>(GetArenaNoVirtual());
    model_ = p;
  }
  return model_;
}
inline ::clarifai::api::Model* PostModelOutputsRequest::mutable_model() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostModelOutputsRequest.model)
  return _internal_mutable_model();
}
inline void PostModelOutputsRequest::set_allocated_model(::clarifai::api::Model* model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_);
  }
  if (model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model, submessage_arena);
    }
    
  } else {
    
  }
  model_ = model;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostModelOutputsRequest.model)
}

// -------------------------------------------------------------------

// ListModelInputsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool ListModelInputsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool ListModelInputsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& ListModelInputsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& ListModelInputsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListModelInputsRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* ListModelInputsRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListModelInputsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListModelInputsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* ListModelInputsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListModelInputsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void ListModelInputsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListModelInputsRequest.user_app_id)
}

// string model_id = 2;
inline void ListModelInputsRequest::clear_model_id() {
  model_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ListModelInputsRequest::model_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListModelInputsRequest.model_id)
  return _internal_model_id();
}
inline void ListModelInputsRequest::set_model_id(const std::string& value) {
  _internal_set_model_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListModelInputsRequest.model_id)
}
inline std::string* ListModelInputsRequest::mutable_model_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListModelInputsRequest.model_id)
  return _internal_mutable_model_id();
}
inline const std::string& ListModelInputsRequest::_internal_model_id() const {
  return model_id_.GetNoArena();
}
inline void ListModelInputsRequest::_internal_set_model_id(const std::string& value) {
  
  model_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ListModelInputsRequest::set_model_id(std::string&& value) {
  
  model_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ListModelInputsRequest.model_id)
}
inline void ListModelInputsRequest::set_model_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.ListModelInputsRequest.model_id)
}
inline void ListModelInputsRequest::set_model_id(const char* value, size_t size) {
  
  model_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ListModelInputsRequest.model_id)
}
inline std::string* ListModelInputsRequest::_internal_mutable_model_id() {
  
  return model_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ListModelInputsRequest::release_model_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListModelInputsRequest.model_id)
  
  return model_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ListModelInputsRequest::set_allocated_model_id(std::string* model_id) {
  if (model_id != nullptr) {
    
  } else {
    
  }
  model_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListModelInputsRequest.model_id)
}

// string version_id = 3;
inline void ListModelInputsRequest::clear_version_id() {
  version_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ListModelInputsRequest::version_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListModelInputsRequest.version_id)
  return _internal_version_id();
}
inline void ListModelInputsRequest::set_version_id(const std::string& value) {
  _internal_set_version_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListModelInputsRequest.version_id)
}
inline std::string* ListModelInputsRequest::mutable_version_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListModelInputsRequest.version_id)
  return _internal_mutable_version_id();
}
inline const std::string& ListModelInputsRequest::_internal_version_id() const {
  return version_id_.GetNoArena();
}
inline void ListModelInputsRequest::_internal_set_version_id(const std::string& value) {
  
  version_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ListModelInputsRequest::set_version_id(std::string&& value) {
  
  version_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ListModelInputsRequest.version_id)
}
inline void ListModelInputsRequest::set_version_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.ListModelInputsRequest.version_id)
}
inline void ListModelInputsRequest::set_version_id(const char* value, size_t size) {
  
  version_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ListModelInputsRequest.version_id)
}
inline std::string* ListModelInputsRequest::_internal_mutable_version_id() {
  
  return version_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ListModelInputsRequest::release_version_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListModelInputsRequest.version_id)
  
  return version_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ListModelInputsRequest::set_allocated_version_id(std::string* version_id) {
  if (version_id != nullptr) {
    
  } else {
    
  }
  version_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListModelInputsRequest.version_id)
}

// uint32 page = 4;
inline void ListModelInputsRequest::clear_page() {
  page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListModelInputsRequest::_internal_page() const {
  return page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListModelInputsRequest::page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListModelInputsRequest.page)
  return _internal_page();
}
inline void ListModelInputsRequest::_internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  page_ = value;
}
inline void ListModelInputsRequest::set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListModelInputsRequest.page)
}

// uint32 per_page = 5;
inline void ListModelInputsRequest::clear_per_page() {
  per_page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListModelInputsRequest::_internal_per_page() const {
  return per_page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListModelInputsRequest::per_page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListModelInputsRequest.per_page)
  return _internal_per_page();
}
inline void ListModelInputsRequest::_internal_set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  per_page_ = value;
}
inline void ListModelInputsRequest::set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_per_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListModelInputsRequest.per_page)
}

// -------------------------------------------------------------------

// GetKeyRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool GetKeyRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool GetKeyRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& GetKeyRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& GetKeyRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetKeyRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* GetKeyRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetKeyRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetKeyRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* GetKeyRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetKeyRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void GetKeyRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetKeyRequest.user_app_id)
}

// string key_id = 2;
inline void GetKeyRequest::clear_key_id() {
  key_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetKeyRequest::key_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetKeyRequest.key_id)
  return _internal_key_id();
}
inline void GetKeyRequest::set_key_id(const std::string& value) {
  _internal_set_key_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.GetKeyRequest.key_id)
}
inline std::string* GetKeyRequest::mutable_key_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetKeyRequest.key_id)
  return _internal_mutable_key_id();
}
inline const std::string& GetKeyRequest::_internal_key_id() const {
  return key_id_.GetNoArena();
}
inline void GetKeyRequest::_internal_set_key_id(const std::string& value) {
  
  key_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetKeyRequest::set_key_id(std::string&& value) {
  
  key_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.GetKeyRequest.key_id)
}
inline void GetKeyRequest::set_key_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.GetKeyRequest.key_id)
}
inline void GetKeyRequest::set_key_id(const char* value, size_t size) {
  
  key_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.GetKeyRequest.key_id)
}
inline std::string* GetKeyRequest::_internal_mutable_key_id() {
  
  return key_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetKeyRequest::release_key_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetKeyRequest.key_id)
  
  return key_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetKeyRequest::set_allocated_key_id(std::string* key_id) {
  if (key_id != nullptr) {
    
  } else {
    
  }
  key_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetKeyRequest.key_id)
}

// -------------------------------------------------------------------

// ListKeysRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool ListKeysRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool ListKeysRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& ListKeysRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& ListKeysRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListKeysRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* ListKeysRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListKeysRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListKeysRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* ListKeysRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListKeysRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void ListKeysRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListKeysRequest.user_app_id)
}

// uint32 page = 2;
inline void ListKeysRequest::clear_page() {
  page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListKeysRequest::_internal_page() const {
  return page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListKeysRequest::page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListKeysRequest.page)
  return _internal_page();
}
inline void ListKeysRequest::_internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  page_ = value;
}
inline void ListKeysRequest::set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListKeysRequest.page)
}

// uint32 per_page = 3;
inline void ListKeysRequest::clear_per_page() {
  per_page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListKeysRequest::_internal_per_page() const {
  return per_page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListKeysRequest::per_page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListKeysRequest.per_page)
  return _internal_per_page();
}
inline void ListKeysRequest::_internal_set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  per_page_ = value;
}
inline void ListKeysRequest::set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_per_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListKeysRequest.per_page)
}

// -------------------------------------------------------------------

// ListAppKeysRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool ListAppKeysRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool ListAppKeysRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& ListAppKeysRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& ListAppKeysRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListAppKeysRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* ListAppKeysRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListAppKeysRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListAppKeysRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* ListAppKeysRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListAppKeysRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void ListAppKeysRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListAppKeysRequest.user_app_id)
}

// uint32 page = 2;
inline void ListAppKeysRequest::clear_page() {
  page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListAppKeysRequest::_internal_page() const {
  return page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListAppKeysRequest::page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListAppKeysRequest.page)
  return _internal_page();
}
inline void ListAppKeysRequest::_internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  page_ = value;
}
inline void ListAppKeysRequest::set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListAppKeysRequest.page)
}

// uint32 per_page = 3;
inline void ListAppKeysRequest::clear_per_page() {
  per_page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListAppKeysRequest::_internal_per_page() const {
  return per_page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListAppKeysRequest::per_page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListAppKeysRequest.per_page)
  return _internal_per_page();
}
inline void ListAppKeysRequest::_internal_set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  per_page_ = value;
}
inline void ListAppKeysRequest::set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_per_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListAppKeysRequest.per_page)
}

// -------------------------------------------------------------------

// PostKeysRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostKeysRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostKeysRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostKeysRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostKeysRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostKeysRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* PostKeysRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostKeysRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostKeysRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostKeysRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostKeysRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void PostKeysRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostKeysRequest.user_app_id)
}

// repeated .clarifai.api.Key keys = 2;
inline int PostKeysRequest::_internal_keys_size() const {
  return keys_.size();
}
inline int PostKeysRequest::keys_size() const {
  return _internal_keys_size();
}
inline ::clarifai::api::Key* PostKeysRequest::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostKeysRequest.keys)
  return keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Key >*
PostKeysRequest::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostKeysRequest.keys)
  return &keys_;
}
inline const ::clarifai::api::Key& PostKeysRequest::_internal_keys(int index) const {
  return keys_.Get(index);
}
inline const ::clarifai::api::Key& PostKeysRequest::keys(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostKeysRequest.keys)
  return _internal_keys(index);
}
inline ::clarifai::api::Key* PostKeysRequest::_internal_add_keys() {
  return keys_.Add();
}
inline ::clarifai::api::Key* PostKeysRequest::add_keys() {
  // @@protoc_insertion_point(field_add:clarifai.api.PostKeysRequest.keys)
  return _internal_add_keys();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Key >&
PostKeysRequest::keys() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostKeysRequest.keys)
  return keys_;
}

// -------------------------------------------------------------------

// DeleteKeyRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool DeleteKeyRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool DeleteKeyRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& DeleteKeyRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& DeleteKeyRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteKeyRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* DeleteKeyRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteKeyRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteKeyRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* DeleteKeyRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteKeyRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void DeleteKeyRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteKeyRequest.user_app_id)
}

// string key_id = 2;
inline void DeleteKeyRequest::clear_key_id() {
  key_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeleteKeyRequest::key_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteKeyRequest.key_id)
  return _internal_key_id();
}
inline void DeleteKeyRequest::set_key_id(const std::string& value) {
  _internal_set_key_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteKeyRequest.key_id)
}
inline std::string* DeleteKeyRequest::mutable_key_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteKeyRequest.key_id)
  return _internal_mutable_key_id();
}
inline const std::string& DeleteKeyRequest::_internal_key_id() const {
  return key_id_.GetNoArena();
}
inline void DeleteKeyRequest::_internal_set_key_id(const std::string& value) {
  
  key_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DeleteKeyRequest::set_key_id(std::string&& value) {
  
  key_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.DeleteKeyRequest.key_id)
}
inline void DeleteKeyRequest::set_key_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.DeleteKeyRequest.key_id)
}
inline void DeleteKeyRequest::set_key_id(const char* value, size_t size) {
  
  key_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.DeleteKeyRequest.key_id)
}
inline std::string* DeleteKeyRequest::_internal_mutable_key_id() {
  
  return key_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeleteKeyRequest::release_key_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteKeyRequest.key_id)
  
  return key_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteKeyRequest::set_allocated_key_id(std::string* key_id) {
  if (key_id != nullptr) {
    
  } else {
    
  }
  key_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteKeyRequest.key_id)
}

// -------------------------------------------------------------------

// PatchKeysRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PatchKeysRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PatchKeysRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PatchKeysRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PatchKeysRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchKeysRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* PatchKeysRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchKeysRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchKeysRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PatchKeysRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchKeysRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void PatchKeysRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchKeysRequest.user_app_id)
}

// repeated .clarifai.api.Key keys = 2;
inline int PatchKeysRequest::_internal_keys_size() const {
  return keys_.size();
}
inline int PatchKeysRequest::keys_size() const {
  return _internal_keys_size();
}
inline ::clarifai::api::Key* PatchKeysRequest::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchKeysRequest.keys)
  return keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Key >*
PatchKeysRequest::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PatchKeysRequest.keys)
  return &keys_;
}
inline const ::clarifai::api::Key& PatchKeysRequest::_internal_keys(int index) const {
  return keys_.Get(index);
}
inline const ::clarifai::api::Key& PatchKeysRequest::keys(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchKeysRequest.keys)
  return _internal_keys(index);
}
inline ::clarifai::api::Key* PatchKeysRequest::_internal_add_keys() {
  return keys_.Add();
}
inline ::clarifai::api::Key* PatchKeysRequest::add_keys() {
  // @@protoc_insertion_point(field_add:clarifai.api.PatchKeysRequest.keys)
  return _internal_add_keys();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Key >&
PatchKeysRequest::keys() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PatchKeysRequest.keys)
  return keys_;
}

// string action = 3;
inline void PatchKeysRequest::clear_action() {
  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PatchKeysRequest::action() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchKeysRequest.action)
  return _internal_action();
}
inline void PatchKeysRequest::set_action(const std::string& value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PatchKeysRequest.action)
}
inline std::string* PatchKeysRequest::mutable_action() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchKeysRequest.action)
  return _internal_mutable_action();
}
inline const std::string& PatchKeysRequest::_internal_action() const {
  return action_.GetNoArena();
}
inline void PatchKeysRequest::_internal_set_action(const std::string& value) {
  
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PatchKeysRequest::set_action(std::string&& value) {
  
  action_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.PatchKeysRequest.action)
}
inline void PatchKeysRequest::set_action(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.PatchKeysRequest.action)
}
inline void PatchKeysRequest::set_action(const char* value, size_t size) {
  
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PatchKeysRequest.action)
}
inline std::string* PatchKeysRequest::_internal_mutable_action() {
  
  return action_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PatchKeysRequest::release_action() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchKeysRequest.action)
  
  return action_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PatchKeysRequest::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchKeysRequest.action)
}

// -------------------------------------------------------------------

// SingleKeyResponse

// .clarifai.api.status.Status status = 1;
inline bool SingleKeyResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SingleKeyResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& SingleKeyResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& SingleKeyResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleKeyResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* SingleKeyResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleKeyResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* SingleKeyResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* SingleKeyResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleKeyResponse.status)
  return _internal_mutable_status();
}
inline void SingleKeyResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleKeyResponse.status)
}

// .clarifai.api.Key key = 2;
inline bool SingleKeyResponse::_internal_has_key() const {
  return this != internal_default_instance() && key_ != nullptr;
}
inline bool SingleKeyResponse::has_key() const {
  return _internal_has_key();
}
inline const ::clarifai::api::Key& SingleKeyResponse::_internal_key() const {
  const ::clarifai::api::Key* p = key_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Key*>(
      &::clarifai::api::_Key_default_instance_);
}
inline const ::clarifai::api::Key& SingleKeyResponse::key() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleKeyResponse.key)
  return _internal_key();
}
inline ::clarifai::api::Key* SingleKeyResponse::release_key() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleKeyResponse.key)
  
  ::clarifai::api::Key* temp = key_;
  key_ = nullptr;
  return temp;
}
inline ::clarifai::api::Key* SingleKeyResponse::_internal_mutable_key() {
  
  if (key_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Key>(GetArenaNoVirtual());
    key_ = p;
  }
  return key_;
}
inline ::clarifai::api::Key* SingleKeyResponse::mutable_key() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleKeyResponse.key)
  return _internal_mutable_key();
}
inline void SingleKeyResponse::set_allocated_key(::clarifai::api::Key* key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_);
  }
  if (key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    
  } else {
    
  }
  key_ = key;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleKeyResponse.key)
}

// -------------------------------------------------------------------

// MultiKeyResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiKeyResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiKeyResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiKeyResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiKeyResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiKeyResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* MultiKeyResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiKeyResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiKeyResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiKeyResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiKeyResponse.status)
  return _internal_mutable_status();
}
inline void MultiKeyResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiKeyResponse.status)
}

// repeated .clarifai.api.Key keys = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int MultiKeyResponse::_internal_keys_size() const {
  return keys_.size();
}
inline int MultiKeyResponse::keys_size() const {
  return _internal_keys_size();
}
inline ::clarifai::api::Key* MultiKeyResponse::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiKeyResponse.keys)
  return keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Key >*
MultiKeyResponse::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiKeyResponse.keys)
  return &keys_;
}
inline const ::clarifai::api::Key& MultiKeyResponse::_internal_keys(int index) const {
  return keys_.Get(index);
}
inline const ::clarifai::api::Key& MultiKeyResponse::keys(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiKeyResponse.keys)
  return _internal_keys(index);
}
inline ::clarifai::api::Key* MultiKeyResponse::_internal_add_keys() {
  return keys_.Add();
}
inline ::clarifai::api::Key* MultiKeyResponse::add_keys() {
  // @@protoc_insertion_point(field_add:clarifai.api.MultiKeyResponse.keys)
  return _internal_add_keys();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Key >&
MultiKeyResponse::keys() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiKeyResponse.keys)
  return keys_;
}

// -------------------------------------------------------------------

// FetchLicenseRequest

// string license_id = 1;
inline void FetchLicenseRequest::clear_license_id() {
  license_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FetchLicenseRequest::license_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.FetchLicenseRequest.license_id)
  return _internal_license_id();
}
inline void FetchLicenseRequest::set_license_id(const std::string& value) {
  _internal_set_license_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.FetchLicenseRequest.license_id)
}
inline std::string* FetchLicenseRequest::mutable_license_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.FetchLicenseRequest.license_id)
  return _internal_mutable_license_id();
}
inline const std::string& FetchLicenseRequest::_internal_license_id() const {
  return license_id_.GetNoArena();
}
inline void FetchLicenseRequest::_internal_set_license_id(const std::string& value) {
  
  license_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FetchLicenseRequest::set_license_id(std::string&& value) {
  
  license_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.FetchLicenseRequest.license_id)
}
inline void FetchLicenseRequest::set_license_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  license_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.FetchLicenseRequest.license_id)
}
inline void FetchLicenseRequest::set_license_id(const char* value, size_t size) {
  
  license_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.FetchLicenseRequest.license_id)
}
inline std::string* FetchLicenseRequest::_internal_mutable_license_id() {
  
  return license_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FetchLicenseRequest::release_license_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.FetchLicenseRequest.license_id)
  
  return license_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FetchLicenseRequest::set_allocated_license_id(std::string* license_id) {
  if (license_id != nullptr) {
    
  } else {
    
  }
  license_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), license_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.FetchLicenseRequest.license_id)
}

// string public_key = 2;
inline void FetchLicenseRequest::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FetchLicenseRequest::public_key() const {
  // @@protoc_insertion_point(field_get:clarifai.api.FetchLicenseRequest.public_key)
  return _internal_public_key();
}
inline void FetchLicenseRequest::set_public_key(const std::string& value) {
  _internal_set_public_key(value);
  // @@protoc_insertion_point(field_set:clarifai.api.FetchLicenseRequest.public_key)
}
inline std::string* FetchLicenseRequest::mutable_public_key() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.FetchLicenseRequest.public_key)
  return _internal_mutable_public_key();
}
inline const std::string& FetchLicenseRequest::_internal_public_key() const {
  return public_key_.GetNoArena();
}
inline void FetchLicenseRequest::_internal_set_public_key(const std::string& value) {
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FetchLicenseRequest::set_public_key(std::string&& value) {
  
  public_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.FetchLicenseRequest.public_key)
}
inline void FetchLicenseRequest::set_public_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.FetchLicenseRequest.public_key)
}
inline void FetchLicenseRequest::set_public_key(const char* value, size_t size) {
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.FetchLicenseRequest.public_key)
}
inline std::string* FetchLicenseRequest::_internal_mutable_public_key() {
  
  return public_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FetchLicenseRequest::release_public_key() {
  // @@protoc_insertion_point(field_release:clarifai.api.FetchLicenseRequest.public_key)
  
  return public_key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FetchLicenseRequest::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    
  } else {
    
  }
  public_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.FetchLicenseRequest.public_key)
}

// bytes signature = 3;
inline void FetchLicenseRequest::clear_signature() {
  signature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FetchLicenseRequest::signature() const {
  // @@protoc_insertion_point(field_get:clarifai.api.FetchLicenseRequest.signature)
  return _internal_signature();
}
inline void FetchLicenseRequest::set_signature(const std::string& value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:clarifai.api.FetchLicenseRequest.signature)
}
inline std::string* FetchLicenseRequest::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.FetchLicenseRequest.signature)
  return _internal_mutable_signature();
}
inline const std::string& FetchLicenseRequest::_internal_signature() const {
  return signature_.GetNoArena();
}
inline void FetchLicenseRequest::_internal_set_signature(const std::string& value) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FetchLicenseRequest::set_signature(std::string&& value) {
  
  signature_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.FetchLicenseRequest.signature)
}
inline void FetchLicenseRequest::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.FetchLicenseRequest.signature)
}
inline void FetchLicenseRequest::set_signature(const void* value, size_t size) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.FetchLicenseRequest.signature)
}
inline std::string* FetchLicenseRequest::_internal_mutable_signature() {
  
  return signature_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FetchLicenseRequest::release_signature() {
  // @@protoc_insertion_point(field_release:clarifai.api.FetchLicenseRequest.signature)
  
  return signature_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FetchLicenseRequest::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.FetchLicenseRequest.signature)
}

// -------------------------------------------------------------------

// FetchLicenseResponse

// .clarifai.api.status.Status status = 1;
inline bool FetchLicenseResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool FetchLicenseResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& FetchLicenseResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& FetchLicenseResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.FetchLicenseResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* FetchLicenseResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.FetchLicenseResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* FetchLicenseResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* FetchLicenseResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.FetchLicenseResponse.status)
  return _internal_mutable_status();
}
inline void FetchLicenseResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.FetchLicenseResponse.status)
}

// bytes encrypted_bytes = 2;
inline void FetchLicenseResponse::clear_encrypted_bytes() {
  encrypted_bytes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FetchLicenseResponse::encrypted_bytes() const {
  // @@protoc_insertion_point(field_get:clarifai.api.FetchLicenseResponse.encrypted_bytes)
  return _internal_encrypted_bytes();
}
inline void FetchLicenseResponse::set_encrypted_bytes(const std::string& value) {
  _internal_set_encrypted_bytes(value);
  // @@protoc_insertion_point(field_set:clarifai.api.FetchLicenseResponse.encrypted_bytes)
}
inline std::string* FetchLicenseResponse::mutable_encrypted_bytes() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.FetchLicenseResponse.encrypted_bytes)
  return _internal_mutable_encrypted_bytes();
}
inline const std::string& FetchLicenseResponse::_internal_encrypted_bytes() const {
  return encrypted_bytes_.GetNoArena();
}
inline void FetchLicenseResponse::_internal_set_encrypted_bytes(const std::string& value) {
  
  encrypted_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FetchLicenseResponse::set_encrypted_bytes(std::string&& value) {
  
  encrypted_bytes_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.FetchLicenseResponse.encrypted_bytes)
}
inline void FetchLicenseResponse::set_encrypted_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  encrypted_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.FetchLicenseResponse.encrypted_bytes)
}
inline void FetchLicenseResponse::set_encrypted_bytes(const void* value, size_t size) {
  
  encrypted_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.FetchLicenseResponse.encrypted_bytes)
}
inline std::string* FetchLicenseResponse::_internal_mutable_encrypted_bytes() {
  
  return encrypted_bytes_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FetchLicenseResponse::release_encrypted_bytes() {
  // @@protoc_insertion_point(field_release:clarifai.api.FetchLicenseResponse.encrypted_bytes)
  
  return encrypted_bytes_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FetchLicenseResponse::set_allocated_encrypted_bytes(std::string* encrypted_bytes) {
  if (encrypted_bytes != nullptr) {
    
  } else {
    
  }
  encrypted_bytes_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encrypted_bytes);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.FetchLicenseResponse.encrypted_bytes)
}

// .google.protobuf.Timestamp activated_at = 3;
inline bool FetchLicenseResponse::_internal_has_activated_at() const {
  return this != internal_default_instance() && activated_at_ != nullptr;
}
inline bool FetchLicenseResponse::has_activated_at() const {
  return _internal_has_activated_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& FetchLicenseResponse::_internal_activated_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = activated_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& FetchLicenseResponse::activated_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.FetchLicenseResponse.activated_at)
  return _internal_activated_at();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* FetchLicenseResponse::release_activated_at() {
  // @@protoc_insertion_point(field_release:clarifai.api.FetchLicenseResponse.activated_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = activated_at_;
  activated_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* FetchLicenseResponse::_internal_mutable_activated_at() {
  
  if (activated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    activated_at_ = p;
  }
  return activated_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* FetchLicenseResponse::mutable_activated_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.FetchLicenseResponse.activated_at)
  return _internal_mutable_activated_at();
}
inline void FetchLicenseResponse::set_allocated_activated_at(PROTOBUF_NAMESPACE_ID::Timestamp* activated_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(activated_at_);
  }
  if (activated_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(activated_at)->GetArena();
    if (message_arena != submessage_arena) {
      activated_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, activated_at, submessage_arena);
    }
    
  } else {
    
  }
  activated_at_ = activated_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.FetchLicenseResponse.activated_at)
}

// string public_key = 4;
inline void FetchLicenseResponse::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FetchLicenseResponse::public_key() const {
  // @@protoc_insertion_point(field_get:clarifai.api.FetchLicenseResponse.public_key)
  return _internal_public_key();
}
inline void FetchLicenseResponse::set_public_key(const std::string& value) {
  _internal_set_public_key(value);
  // @@protoc_insertion_point(field_set:clarifai.api.FetchLicenseResponse.public_key)
}
inline std::string* FetchLicenseResponse::mutable_public_key() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.FetchLicenseResponse.public_key)
  return _internal_mutable_public_key();
}
inline const std::string& FetchLicenseResponse::_internal_public_key() const {
  return public_key_.GetNoArena();
}
inline void FetchLicenseResponse::_internal_set_public_key(const std::string& value) {
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FetchLicenseResponse::set_public_key(std::string&& value) {
  
  public_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.FetchLicenseResponse.public_key)
}
inline void FetchLicenseResponse::set_public_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.FetchLicenseResponse.public_key)
}
inline void FetchLicenseResponse::set_public_key(const char* value, size_t size) {
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.FetchLicenseResponse.public_key)
}
inline std::string* FetchLicenseResponse::_internal_mutable_public_key() {
  
  return public_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FetchLicenseResponse::release_public_key() {
  // @@protoc_insertion_point(field_release:clarifai.api.FetchLicenseResponse.public_key)
  
  return public_key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FetchLicenseResponse::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    
  } else {
    
  }
  public_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.FetchLicenseResponse.public_key)
}

// bytes signature = 5;
inline void FetchLicenseResponse::clear_signature() {
  signature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FetchLicenseResponse::signature() const {
  // @@protoc_insertion_point(field_get:clarifai.api.FetchLicenseResponse.signature)
  return _internal_signature();
}
inline void FetchLicenseResponse::set_signature(const std::string& value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:clarifai.api.FetchLicenseResponse.signature)
}
inline std::string* FetchLicenseResponse::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.FetchLicenseResponse.signature)
  return _internal_mutable_signature();
}
inline const std::string& FetchLicenseResponse::_internal_signature() const {
  return signature_.GetNoArena();
}
inline void FetchLicenseResponse::_internal_set_signature(const std::string& value) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FetchLicenseResponse::set_signature(std::string&& value) {
  
  signature_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.FetchLicenseResponse.signature)
}
inline void FetchLicenseResponse::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.FetchLicenseResponse.signature)
}
inline void FetchLicenseResponse::set_signature(const void* value, size_t size) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.FetchLicenseResponse.signature)
}
inline std::string* FetchLicenseResponse::_internal_mutable_signature() {
  
  return signature_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FetchLicenseResponse::release_signature() {
  // @@protoc_insertion_point(field_release:clarifai.api.FetchLicenseResponse.signature)
  
  return signature_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FetchLicenseResponse::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.FetchLicenseResponse.signature)
}

// -------------------------------------------------------------------

// ValidateLicenseRequest

// string license_id = 1;
inline void ValidateLicenseRequest::clear_license_id() {
  license_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ValidateLicenseRequest::license_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ValidateLicenseRequest.license_id)
  return _internal_license_id();
}
inline void ValidateLicenseRequest::set_license_id(const std::string& value) {
  _internal_set_license_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ValidateLicenseRequest.license_id)
}
inline std::string* ValidateLicenseRequest::mutable_license_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ValidateLicenseRequest.license_id)
  return _internal_mutable_license_id();
}
inline const std::string& ValidateLicenseRequest::_internal_license_id() const {
  return license_id_.GetNoArena();
}
inline void ValidateLicenseRequest::_internal_set_license_id(const std::string& value) {
  
  license_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ValidateLicenseRequest::set_license_id(std::string&& value) {
  
  license_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ValidateLicenseRequest.license_id)
}
inline void ValidateLicenseRequest::set_license_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  license_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.ValidateLicenseRequest.license_id)
}
inline void ValidateLicenseRequest::set_license_id(const char* value, size_t size) {
  
  license_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ValidateLicenseRequest.license_id)
}
inline std::string* ValidateLicenseRequest::_internal_mutable_license_id() {
  
  return license_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ValidateLicenseRequest::release_license_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ValidateLicenseRequest.license_id)
  
  return license_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ValidateLicenseRequest::set_allocated_license_id(std::string* license_id) {
  if (license_id != nullptr) {
    
  } else {
    
  }
  license_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), license_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ValidateLicenseRequest.license_id)
}

// string request_id = 2;
inline void ValidateLicenseRequest::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ValidateLicenseRequest::request_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ValidateLicenseRequest.request_id)
  return _internal_request_id();
}
inline void ValidateLicenseRequest::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ValidateLicenseRequest.request_id)
}
inline std::string* ValidateLicenseRequest::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ValidateLicenseRequest.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& ValidateLicenseRequest::_internal_request_id() const {
  return request_id_.GetNoArena();
}
inline void ValidateLicenseRequest::_internal_set_request_id(const std::string& value) {
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ValidateLicenseRequest::set_request_id(std::string&& value) {
  
  request_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ValidateLicenseRequest.request_id)
}
inline void ValidateLicenseRequest::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.ValidateLicenseRequest.request_id)
}
inline void ValidateLicenseRequest::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ValidateLicenseRequest.request_id)
}
inline std::string* ValidateLicenseRequest::_internal_mutable_request_id() {
  
  return request_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ValidateLicenseRequest::release_request_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ValidateLicenseRequest.request_id)
  
  return request_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ValidateLicenseRequest::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ValidateLicenseRequest.request_id)
}

// .google.protobuf.Timestamp activated_at = 3;
inline bool ValidateLicenseRequest::_internal_has_activated_at() const {
  return this != internal_default_instance() && activated_at_ != nullptr;
}
inline bool ValidateLicenseRequest::has_activated_at() const {
  return _internal_has_activated_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ValidateLicenseRequest::_internal_activated_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = activated_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ValidateLicenseRequest::activated_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ValidateLicenseRequest.activated_at)
  return _internal_activated_at();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ValidateLicenseRequest::release_activated_at() {
  // @@protoc_insertion_point(field_release:clarifai.api.ValidateLicenseRequest.activated_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = activated_at_;
  activated_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ValidateLicenseRequest::_internal_mutable_activated_at() {
  
  if (activated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    activated_at_ = p;
  }
  return activated_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ValidateLicenseRequest::mutable_activated_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ValidateLicenseRequest.activated_at)
  return _internal_mutable_activated_at();
}
inline void ValidateLicenseRequest::set_allocated_activated_at(PROTOBUF_NAMESPACE_ID::Timestamp* activated_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(activated_at_);
  }
  if (activated_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(activated_at)->GetArena();
    if (message_arena != submessage_arena) {
      activated_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, activated_at, submessage_arena);
    }
    
  } else {
    
  }
  activated_at_ = activated_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ValidateLicenseRequest.activated_at)
}

// string public_key = 4;
inline void ValidateLicenseRequest::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ValidateLicenseRequest::public_key() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ValidateLicenseRequest.public_key)
  return _internal_public_key();
}
inline void ValidateLicenseRequest::set_public_key(const std::string& value) {
  _internal_set_public_key(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ValidateLicenseRequest.public_key)
}
inline std::string* ValidateLicenseRequest::mutable_public_key() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ValidateLicenseRequest.public_key)
  return _internal_mutable_public_key();
}
inline const std::string& ValidateLicenseRequest::_internal_public_key() const {
  return public_key_.GetNoArena();
}
inline void ValidateLicenseRequest::_internal_set_public_key(const std::string& value) {
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ValidateLicenseRequest::set_public_key(std::string&& value) {
  
  public_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ValidateLicenseRequest.public_key)
}
inline void ValidateLicenseRequest::set_public_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.ValidateLicenseRequest.public_key)
}
inline void ValidateLicenseRequest::set_public_key(const char* value, size_t size) {
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ValidateLicenseRequest.public_key)
}
inline std::string* ValidateLicenseRequest::_internal_mutable_public_key() {
  
  return public_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ValidateLicenseRequest::release_public_key() {
  // @@protoc_insertion_point(field_release:clarifai.api.ValidateLicenseRequest.public_key)
  
  return public_key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ValidateLicenseRequest::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    
  } else {
    
  }
  public_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ValidateLicenseRequest.public_key)
}

// bytes signature = 5;
inline void ValidateLicenseRequest::clear_signature() {
  signature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ValidateLicenseRequest::signature() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ValidateLicenseRequest.signature)
  return _internal_signature();
}
inline void ValidateLicenseRequest::set_signature(const std::string& value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ValidateLicenseRequest.signature)
}
inline std::string* ValidateLicenseRequest::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ValidateLicenseRequest.signature)
  return _internal_mutable_signature();
}
inline const std::string& ValidateLicenseRequest::_internal_signature() const {
  return signature_.GetNoArena();
}
inline void ValidateLicenseRequest::_internal_set_signature(const std::string& value) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ValidateLicenseRequest::set_signature(std::string&& value) {
  
  signature_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ValidateLicenseRequest.signature)
}
inline void ValidateLicenseRequest::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.ValidateLicenseRequest.signature)
}
inline void ValidateLicenseRequest::set_signature(const void* value, size_t size) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ValidateLicenseRequest.signature)
}
inline std::string* ValidateLicenseRequest::_internal_mutable_signature() {
  
  return signature_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ValidateLicenseRequest::release_signature() {
  // @@protoc_insertion_point(field_release:clarifai.api.ValidateLicenseRequest.signature)
  
  return signature_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ValidateLicenseRequest::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ValidateLicenseRequest.signature)
}

// -------------------------------------------------------------------

// ValidateLicenseResponse

// .clarifai.api.status.Status status = 1;
inline bool ValidateLicenseResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool ValidateLicenseResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& ValidateLicenseResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& ValidateLicenseResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ValidateLicenseResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* ValidateLicenseResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.ValidateLicenseResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* ValidateLicenseResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* ValidateLicenseResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ValidateLicenseResponse.status)
  return _internal_mutable_status();
}
inline void ValidateLicenseResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ValidateLicenseResponse.status)
}

// string request_id = 2;
inline void ValidateLicenseResponse::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ValidateLicenseResponse::request_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ValidateLicenseResponse.request_id)
  return _internal_request_id();
}
inline void ValidateLicenseResponse::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ValidateLicenseResponse.request_id)
}
inline std::string* ValidateLicenseResponse::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ValidateLicenseResponse.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& ValidateLicenseResponse::_internal_request_id() const {
  return request_id_.GetNoArena();
}
inline void ValidateLicenseResponse::_internal_set_request_id(const std::string& value) {
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ValidateLicenseResponse::set_request_id(std::string&& value) {
  
  request_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ValidateLicenseResponse.request_id)
}
inline void ValidateLicenseResponse::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.ValidateLicenseResponse.request_id)
}
inline void ValidateLicenseResponse::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ValidateLicenseResponse.request_id)
}
inline std::string* ValidateLicenseResponse::_internal_mutable_request_id() {
  
  return request_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ValidateLicenseResponse::release_request_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ValidateLicenseResponse.request_id)
  
  return request_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ValidateLicenseResponse::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ValidateLicenseResponse.request_id)
}

// repeated .clarifai.api.LicenseLimit limits = 3;
inline int ValidateLicenseResponse::_internal_limits_size() const {
  return limits_.size();
}
inline int ValidateLicenseResponse::limits_size() const {
  return _internal_limits_size();
}
inline ::clarifai::api::LicenseLimit* ValidateLicenseResponse::mutable_limits(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ValidateLicenseResponse.limits)
  return limits_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::LicenseLimit >*
ValidateLicenseResponse::mutable_limits() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.ValidateLicenseResponse.limits)
  return &limits_;
}
inline const ::clarifai::api::LicenseLimit& ValidateLicenseResponse::_internal_limits(int index) const {
  return limits_.Get(index);
}
inline const ::clarifai::api::LicenseLimit& ValidateLicenseResponse::limits(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.ValidateLicenseResponse.limits)
  return _internal_limits(index);
}
inline ::clarifai::api::LicenseLimit* ValidateLicenseResponse::_internal_add_limits() {
  return limits_.Add();
}
inline ::clarifai::api::LicenseLimit* ValidateLicenseResponse::add_limits() {
  // @@protoc_insertion_point(field_add:clarifai.api.ValidateLicenseResponse.limits)
  return _internal_add_limits();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::LicenseLimit >&
ValidateLicenseResponse::limits() const {
  // @@protoc_insertion_point(field_list:clarifai.api.ValidateLicenseResponse.limits)
  return limits_;
}

// bytes signature = 4;
inline void ValidateLicenseResponse::clear_signature() {
  signature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ValidateLicenseResponse::signature() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ValidateLicenseResponse.signature)
  return _internal_signature();
}
inline void ValidateLicenseResponse::set_signature(const std::string& value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ValidateLicenseResponse.signature)
}
inline std::string* ValidateLicenseResponse::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ValidateLicenseResponse.signature)
  return _internal_mutable_signature();
}
inline const std::string& ValidateLicenseResponse::_internal_signature() const {
  return signature_.GetNoArena();
}
inline void ValidateLicenseResponse::_internal_set_signature(const std::string& value) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ValidateLicenseResponse::set_signature(std::string&& value) {
  
  signature_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ValidateLicenseResponse.signature)
}
inline void ValidateLicenseResponse::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.ValidateLicenseResponse.signature)
}
inline void ValidateLicenseResponse::set_signature(const void* value, size_t size) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ValidateLicenseResponse.signature)
}
inline std::string* ValidateLicenseResponse::_internal_mutable_signature() {
  
  return signature_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ValidateLicenseResponse::release_signature() {
  // @@protoc_insertion_point(field_release:clarifai.api.ValidateLicenseResponse.signature)
  
  return signature_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ValidateLicenseResponse::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ValidateLicenseResponse.signature)
}

// -------------------------------------------------------------------

// ListLicensesRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool ListLicensesRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool ListLicensesRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& ListLicensesRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& ListLicensesRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListLicensesRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* ListLicensesRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListLicensesRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListLicensesRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* ListLicensesRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListLicensesRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void ListLicensesRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListLicensesRequest.user_app_id)
}

// -------------------------------------------------------------------

// GetLicenseRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool GetLicenseRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool GetLicenseRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& GetLicenseRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& GetLicenseRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetLicenseRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* GetLicenseRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetLicenseRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetLicenseRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* GetLicenseRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetLicenseRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void GetLicenseRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetLicenseRequest.user_app_id)
}

// string license_id = 2;
inline void GetLicenseRequest::clear_license_id() {
  license_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetLicenseRequest::license_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetLicenseRequest.license_id)
  return _internal_license_id();
}
inline void GetLicenseRequest::set_license_id(const std::string& value) {
  _internal_set_license_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.GetLicenseRequest.license_id)
}
inline std::string* GetLicenseRequest::mutable_license_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetLicenseRequest.license_id)
  return _internal_mutable_license_id();
}
inline const std::string& GetLicenseRequest::_internal_license_id() const {
  return license_id_.GetNoArena();
}
inline void GetLicenseRequest::_internal_set_license_id(const std::string& value) {
  
  license_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetLicenseRequest::set_license_id(std::string&& value) {
  
  license_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.GetLicenseRequest.license_id)
}
inline void GetLicenseRequest::set_license_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  license_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.GetLicenseRequest.license_id)
}
inline void GetLicenseRequest::set_license_id(const char* value, size_t size) {
  
  license_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.GetLicenseRequest.license_id)
}
inline std::string* GetLicenseRequest::_internal_mutable_license_id() {
  
  return license_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetLicenseRequest::release_license_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetLicenseRequest.license_id)
  
  return license_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetLicenseRequest::set_allocated_license_id(std::string* license_id) {
  if (license_id != nullptr) {
    
  } else {
    
  }
  license_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), license_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetLicenseRequest.license_id)
}

// -------------------------------------------------------------------

// SingleLicenseResponse

// .clarifai.api.status.Status status = 1;
inline bool SingleLicenseResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SingleLicenseResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& SingleLicenseResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& SingleLicenseResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleLicenseResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* SingleLicenseResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleLicenseResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* SingleLicenseResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* SingleLicenseResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleLicenseResponse.status)
  return _internal_mutable_status();
}
inline void SingleLicenseResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleLicenseResponse.status)
}

// .clarifai.api.License license = 2;
inline bool SingleLicenseResponse::_internal_has_license() const {
  return this != internal_default_instance() && license_ != nullptr;
}
inline bool SingleLicenseResponse::has_license() const {
  return _internal_has_license();
}
inline const ::clarifai::api::License& SingleLicenseResponse::_internal_license() const {
  const ::clarifai::api::License* p = license_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::License*>(
      &::clarifai::api::_License_default_instance_);
}
inline const ::clarifai::api::License& SingleLicenseResponse::license() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleLicenseResponse.license)
  return _internal_license();
}
inline ::clarifai::api::License* SingleLicenseResponse::release_license() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleLicenseResponse.license)
  
  ::clarifai::api::License* temp = license_;
  license_ = nullptr;
  return temp;
}
inline ::clarifai::api::License* SingleLicenseResponse::_internal_mutable_license() {
  
  if (license_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::License>(GetArenaNoVirtual());
    license_ = p;
  }
  return license_;
}
inline ::clarifai::api::License* SingleLicenseResponse::mutable_license() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleLicenseResponse.license)
  return _internal_mutable_license();
}
inline void SingleLicenseResponse::set_allocated_license(::clarifai::api::License* license) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(license_);
  }
  if (license) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      license = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, license, submessage_arena);
    }
    
  } else {
    
  }
  license_ = license;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleLicenseResponse.license)
}

// -------------------------------------------------------------------

// MultipleLicensesResponse

// .clarifai.api.status.Status status = 1;
inline bool MultipleLicensesResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultipleLicensesResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultipleLicensesResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultipleLicensesResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultipleLicensesResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* MultipleLicensesResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultipleLicensesResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultipleLicensesResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultipleLicensesResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultipleLicensesResponse.status)
  return _internal_mutable_status();
}
inline void MultipleLicensesResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultipleLicensesResponse.status)
}

// repeated .clarifai.api.License licenses = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int MultipleLicensesResponse::_internal_licenses_size() const {
  return licenses_.size();
}
inline int MultipleLicensesResponse::licenses_size() const {
  return _internal_licenses_size();
}
inline ::clarifai::api::License* MultipleLicensesResponse::mutable_licenses(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultipleLicensesResponse.licenses)
  return licenses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::License >*
MultipleLicensesResponse::mutable_licenses() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultipleLicensesResponse.licenses)
  return &licenses_;
}
inline const ::clarifai::api::License& MultipleLicensesResponse::_internal_licenses(int index) const {
  return licenses_.Get(index);
}
inline const ::clarifai::api::License& MultipleLicensesResponse::licenses(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultipleLicensesResponse.licenses)
  return _internal_licenses(index);
}
inline ::clarifai::api::License* MultipleLicensesResponse::_internal_add_licenses() {
  return licenses_.Add();
}
inline ::clarifai::api::License* MultipleLicensesResponse::add_licenses() {
  // @@protoc_insertion_point(field_add:clarifai.api.MultipleLicensesResponse.licenses)
  return _internal_add_licenses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::License >&
MultipleLicensesResponse::licenses() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultipleLicensesResponse.licenses)
  return licenses_;
}

// -------------------------------------------------------------------

// GetModelRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool GetModelRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool GetModelRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& GetModelRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& GetModelRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetModelRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* GetModelRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetModelRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetModelRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* GetModelRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetModelRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void GetModelRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetModelRequest.user_app_id)
}

// string model_id = 2;
inline void GetModelRequest::clear_model_id() {
  model_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetModelRequest::model_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetModelRequest.model_id)
  return _internal_model_id();
}
inline void GetModelRequest::set_model_id(const std::string& value) {
  _internal_set_model_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.GetModelRequest.model_id)
}
inline std::string* GetModelRequest::mutable_model_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetModelRequest.model_id)
  return _internal_mutable_model_id();
}
inline const std::string& GetModelRequest::_internal_model_id() const {
  return model_id_.GetNoArena();
}
inline void GetModelRequest::_internal_set_model_id(const std::string& value) {
  
  model_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetModelRequest::set_model_id(std::string&& value) {
  
  model_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.GetModelRequest.model_id)
}
inline void GetModelRequest::set_model_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.GetModelRequest.model_id)
}
inline void GetModelRequest::set_model_id(const char* value, size_t size) {
  
  model_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.GetModelRequest.model_id)
}
inline std::string* GetModelRequest::_internal_mutable_model_id() {
  
  return model_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetModelRequest::release_model_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetModelRequest.model_id)
  
  return model_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetModelRequest::set_allocated_model_id(std::string* model_id) {
  if (model_id != nullptr) {
    
  } else {
    
  }
  model_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetModelRequest.model_id)
}

// string version_id = 3;
inline void GetModelRequest::clear_version_id() {
  version_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetModelRequest::version_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetModelRequest.version_id)
  return _internal_version_id();
}
inline void GetModelRequest::set_version_id(const std::string& value) {
  _internal_set_version_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.GetModelRequest.version_id)
}
inline std::string* GetModelRequest::mutable_version_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetModelRequest.version_id)
  return _internal_mutable_version_id();
}
inline const std::string& GetModelRequest::_internal_version_id() const {
  return version_id_.GetNoArena();
}
inline void GetModelRequest::_internal_set_version_id(const std::string& value) {
  
  version_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetModelRequest::set_version_id(std::string&& value) {
  
  version_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.GetModelRequest.version_id)
}
inline void GetModelRequest::set_version_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.GetModelRequest.version_id)
}
inline void GetModelRequest::set_version_id(const char* value, size_t size) {
  
  version_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.GetModelRequest.version_id)
}
inline std::string* GetModelRequest::_internal_mutable_version_id() {
  
  return version_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetModelRequest::release_version_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetModelRequest.version_id)
  
  return version_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetModelRequest::set_allocated_version_id(std::string* version_id) {
  if (version_id != nullptr) {
    
  } else {
    
  }
  version_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetModelRequest.version_id)
}

// string language = 4;
inline void GetModelRequest::clear_language() {
  language_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetModelRequest::language() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetModelRequest.language)
  return _internal_language();
}
inline void GetModelRequest::set_language(const std::string& value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:clarifai.api.GetModelRequest.language)
}
inline std::string* GetModelRequest::mutable_language() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetModelRequest.language)
  return _internal_mutable_language();
}
inline const std::string& GetModelRequest::_internal_language() const {
  return language_.GetNoArena();
}
inline void GetModelRequest::_internal_set_language(const std::string& value) {
  
  language_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetModelRequest::set_language(std::string&& value) {
  
  language_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.GetModelRequest.language)
}
inline void GetModelRequest::set_language(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  language_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.GetModelRequest.language)
}
inline void GetModelRequest::set_language(const char* value, size_t size) {
  
  language_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.GetModelRequest.language)
}
inline std::string* GetModelRequest::_internal_mutable_language() {
  
  return language_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetModelRequest::release_language() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetModelRequest.language)
  
  return language_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetModelRequest::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    
  } else {
    
  }
  language_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetModelRequest.language)
}

// bool trained_before = 5;
inline void GetModelRequest::clear_trained_before() {
  trained_before_ = false;
}
inline bool GetModelRequest::_internal_trained_before() const {
  return trained_before_;
}
inline bool GetModelRequest::trained_before() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetModelRequest.trained_before)
  return _internal_trained_before();
}
inline void GetModelRequest::_internal_set_trained_before(bool value) {
  
  trained_before_ = value;
}
inline void GetModelRequest::set_trained_before(bool value) {
  _internal_set_trained_before(value);
  // @@protoc_insertion_point(field_set:clarifai.api.GetModelRequest.trained_before)
}

// -------------------------------------------------------------------

// GetModelOutputInfoRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool GetModelOutputInfoRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool GetModelOutputInfoRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& GetModelOutputInfoRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& GetModelOutputInfoRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetModelOutputInfoRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* GetModelOutputInfoRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetModelOutputInfoRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetModelOutputInfoRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* GetModelOutputInfoRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetModelOutputInfoRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void GetModelOutputInfoRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetModelOutputInfoRequest.user_app_id)
}

// string model_id = 2;
inline void GetModelOutputInfoRequest::clear_model_id() {
  model_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetModelOutputInfoRequest::model_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetModelOutputInfoRequest.model_id)
  return _internal_model_id();
}
inline void GetModelOutputInfoRequest::set_model_id(const std::string& value) {
  _internal_set_model_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.GetModelOutputInfoRequest.model_id)
}
inline std::string* GetModelOutputInfoRequest::mutable_model_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetModelOutputInfoRequest.model_id)
  return _internal_mutable_model_id();
}
inline const std::string& GetModelOutputInfoRequest::_internal_model_id() const {
  return model_id_.GetNoArena();
}
inline void GetModelOutputInfoRequest::_internal_set_model_id(const std::string& value) {
  
  model_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetModelOutputInfoRequest::set_model_id(std::string&& value) {
  
  model_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.GetModelOutputInfoRequest.model_id)
}
inline void GetModelOutputInfoRequest::set_model_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.GetModelOutputInfoRequest.model_id)
}
inline void GetModelOutputInfoRequest::set_model_id(const char* value, size_t size) {
  
  model_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.GetModelOutputInfoRequest.model_id)
}
inline std::string* GetModelOutputInfoRequest::_internal_mutable_model_id() {
  
  return model_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetModelOutputInfoRequest::release_model_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetModelOutputInfoRequest.model_id)
  
  return model_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetModelOutputInfoRequest::set_allocated_model_id(std::string* model_id) {
  if (model_id != nullptr) {
    
  } else {
    
  }
  model_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetModelOutputInfoRequest.model_id)
}

// string version_id = 3;
inline void GetModelOutputInfoRequest::clear_version_id() {
  version_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetModelOutputInfoRequest::version_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetModelOutputInfoRequest.version_id)
  return _internal_version_id();
}
inline void GetModelOutputInfoRequest::set_version_id(const std::string& value) {
  _internal_set_version_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.GetModelOutputInfoRequest.version_id)
}
inline std::string* GetModelOutputInfoRequest::mutable_version_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetModelOutputInfoRequest.version_id)
  return _internal_mutable_version_id();
}
inline const std::string& GetModelOutputInfoRequest::_internal_version_id() const {
  return version_id_.GetNoArena();
}
inline void GetModelOutputInfoRequest::_internal_set_version_id(const std::string& value) {
  
  version_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetModelOutputInfoRequest::set_version_id(std::string&& value) {
  
  version_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.GetModelOutputInfoRequest.version_id)
}
inline void GetModelOutputInfoRequest::set_version_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.GetModelOutputInfoRequest.version_id)
}
inline void GetModelOutputInfoRequest::set_version_id(const char* value, size_t size) {
  
  version_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.GetModelOutputInfoRequest.version_id)
}
inline std::string* GetModelOutputInfoRequest::_internal_mutable_version_id() {
  
  return version_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetModelOutputInfoRequest::release_version_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetModelOutputInfoRequest.version_id)
  
  return version_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetModelOutputInfoRequest::set_allocated_version_id(std::string* version_id) {
  if (version_id != nullptr) {
    
  } else {
    
  }
  version_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetModelOutputInfoRequest.version_id)
}

// -------------------------------------------------------------------

// ListModelsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool ListModelsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool ListModelsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& ListModelsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& ListModelsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListModelsRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* ListModelsRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListModelsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListModelsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* ListModelsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListModelsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void ListModelsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListModelsRequest.user_app_id)
}

// uint32 page = 2;
inline void ListModelsRequest::clear_page() {
  page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListModelsRequest::_internal_page() const {
  return page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListModelsRequest::page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListModelsRequest.page)
  return _internal_page();
}
inline void ListModelsRequest::_internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  page_ = value;
}
inline void ListModelsRequest::set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListModelsRequest.page)
}

// uint32 per_page = 3;
inline void ListModelsRequest::clear_per_page() {
  per_page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListModelsRequest::_internal_per_page() const {
  return per_page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListModelsRequest::per_page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListModelsRequest.per_page)
  return _internal_per_page();
}
inline void ListModelsRequest::_internal_set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  per_page_ = value;
}
inline void ListModelsRequest::set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_per_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListModelsRequest.per_page)
}

// repeated string ids = 4;
inline int ListModelsRequest::_internal_ids_size() const {
  return ids_.size();
}
inline int ListModelsRequest::ids_size() const {
  return _internal_ids_size();
}
inline void ListModelsRequest::clear_ids() {
  ids_.Clear();
}
inline std::string* ListModelsRequest::add_ids() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.ListModelsRequest.ids)
  return _internal_add_ids();
}
inline const std::string& ListModelsRequest::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const std::string& ListModelsRequest::ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListModelsRequest.ids)
  return _internal_ids(index);
}
inline std::string* ListModelsRequest::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListModelsRequest.ids)
  return ids_.Mutable(index);
}
inline void ListModelsRequest::set_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.ListModelsRequest.ids)
  ids_.Mutable(index)->assign(value);
}
inline void ListModelsRequest::set_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.ListModelsRequest.ids)
  ids_.Mutable(index)->assign(std::move(value));
}
inline void ListModelsRequest::set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.ListModelsRequest.ids)
}
inline void ListModelsRequest::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ListModelsRequest.ids)
}
inline std::string* ListModelsRequest::_internal_add_ids() {
  return ids_.Add();
}
inline void ListModelsRequest::add_ids(const std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.ListModelsRequest.ids)
}
inline void ListModelsRequest::add_ids(std::string&& value) {
  ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.ListModelsRequest.ids)
}
inline void ListModelsRequest::add_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.ListModelsRequest.ids)
}
inline void ListModelsRequest::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.ListModelsRequest.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListModelsRequest::ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.ListModelsRequest.ids)
  return ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListModelsRequest::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.ListModelsRequest.ids)
  return &ids_;
}

// -------------------------------------------------------------------

// PostModelsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostModelsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostModelsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostModelsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostModelsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostModelsRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* PostModelsRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostModelsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostModelsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostModelsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostModelsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void PostModelsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostModelsRequest.user_app_id)
}

// .clarifai.api.Model model = 2 [deprecated = true];
inline bool PostModelsRequest::_internal_has_model() const {
  return this != internal_default_instance() && model_ != nullptr;
}
inline bool PostModelsRequest::has_model() const {
  return _internal_has_model();
}
inline const ::clarifai::api::Model& PostModelsRequest::_internal_model() const {
  const ::clarifai::api::Model* p = model_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Model*>(
      &::clarifai::api::_Model_default_instance_);
}
inline const ::clarifai::api::Model& PostModelsRequest::model() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostModelsRequest.model)
  return _internal_model();
}
inline ::clarifai::api::Model* PostModelsRequest::release_model() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostModelsRequest.model)
  
  ::clarifai::api::Model* temp = model_;
  model_ = nullptr;
  return temp;
}
inline ::clarifai::api::Model* PostModelsRequest::_internal_mutable_model() {
  
  if (model_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Model>(GetArenaNoVirtual());
    model_ = p;
  }
  return model_;
}
inline ::clarifai::api::Model* PostModelsRequest::mutable_model() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostModelsRequest.model)
  return _internal_mutable_model();
}
inline void PostModelsRequest::set_allocated_model(::clarifai::api::Model* model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_);
  }
  if (model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model, submessage_arena);
    }
    
  } else {
    
  }
  model_ = model;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostModelsRequest.model)
}

// repeated .clarifai.api.Model models = 3;
inline int PostModelsRequest::_internal_models_size() const {
  return models_.size();
}
inline int PostModelsRequest::models_size() const {
  return _internal_models_size();
}
inline ::clarifai::api::Model* PostModelsRequest::mutable_models(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostModelsRequest.models)
  return models_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Model >*
PostModelsRequest::mutable_models() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostModelsRequest.models)
  return &models_;
}
inline const ::clarifai::api::Model& PostModelsRequest::_internal_models(int index) const {
  return models_.Get(index);
}
inline const ::clarifai::api::Model& PostModelsRequest::models(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostModelsRequest.models)
  return _internal_models(index);
}
inline ::clarifai::api::Model* PostModelsRequest::_internal_add_models() {
  return models_.Add();
}
inline ::clarifai::api::Model* PostModelsRequest::add_models() {
  // @@protoc_insertion_point(field_add:clarifai.api.PostModelsRequest.models)
  return _internal_add_models();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Model >&
PostModelsRequest::models() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostModelsRequest.models)
  return models_;
}

// -------------------------------------------------------------------

// PatchModelsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PatchModelsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PatchModelsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PatchModelsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PatchModelsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchModelsRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* PatchModelsRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchModelsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchModelsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PatchModelsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchModelsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void PatchModelsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchModelsRequest.user_app_id)
}

// repeated .clarifai.api.Model models = 2;
inline int PatchModelsRequest::_internal_models_size() const {
  return models_.size();
}
inline int PatchModelsRequest::models_size() const {
  return _internal_models_size();
}
inline ::clarifai::api::Model* PatchModelsRequest::mutable_models(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchModelsRequest.models)
  return models_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Model >*
PatchModelsRequest::mutable_models() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PatchModelsRequest.models)
  return &models_;
}
inline const ::clarifai::api::Model& PatchModelsRequest::_internal_models(int index) const {
  return models_.Get(index);
}
inline const ::clarifai::api::Model& PatchModelsRequest::models(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchModelsRequest.models)
  return _internal_models(index);
}
inline ::clarifai::api::Model* PatchModelsRequest::_internal_add_models() {
  return models_.Add();
}
inline ::clarifai::api::Model* PatchModelsRequest::add_models() {
  // @@protoc_insertion_point(field_add:clarifai.api.PatchModelsRequest.models)
  return _internal_add_models();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Model >&
PatchModelsRequest::models() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PatchModelsRequest.models)
  return models_;
}

// string action = 3;
inline void PatchModelsRequest::clear_action() {
  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PatchModelsRequest::action() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchModelsRequest.action)
  return _internal_action();
}
inline void PatchModelsRequest::set_action(const std::string& value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PatchModelsRequest.action)
}
inline std::string* PatchModelsRequest::mutable_action() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchModelsRequest.action)
  return _internal_mutable_action();
}
inline const std::string& PatchModelsRequest::_internal_action() const {
  return action_.GetNoArena();
}
inline void PatchModelsRequest::_internal_set_action(const std::string& value) {
  
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PatchModelsRequest::set_action(std::string&& value) {
  
  action_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.PatchModelsRequest.action)
}
inline void PatchModelsRequest::set_action(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.PatchModelsRequest.action)
}
inline void PatchModelsRequest::set_action(const char* value, size_t size) {
  
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PatchModelsRequest.action)
}
inline std::string* PatchModelsRequest::_internal_mutable_action() {
  
  return action_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PatchModelsRequest::release_action() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchModelsRequest.action)
  
  return action_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PatchModelsRequest::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchModelsRequest.action)
}

// -------------------------------------------------------------------

// DeleteModelRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool DeleteModelRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool DeleteModelRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& DeleteModelRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& DeleteModelRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteModelRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* DeleteModelRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteModelRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteModelRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* DeleteModelRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteModelRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void DeleteModelRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteModelRequest.user_app_id)
}

// string model_id = 2;
inline void DeleteModelRequest::clear_model_id() {
  model_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeleteModelRequest::model_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteModelRequest.model_id)
  return _internal_model_id();
}
inline void DeleteModelRequest::set_model_id(const std::string& value) {
  _internal_set_model_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteModelRequest.model_id)
}
inline std::string* DeleteModelRequest::mutable_model_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteModelRequest.model_id)
  return _internal_mutable_model_id();
}
inline const std::string& DeleteModelRequest::_internal_model_id() const {
  return model_id_.GetNoArena();
}
inline void DeleteModelRequest::_internal_set_model_id(const std::string& value) {
  
  model_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DeleteModelRequest::set_model_id(std::string&& value) {
  
  model_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.DeleteModelRequest.model_id)
}
inline void DeleteModelRequest::set_model_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.DeleteModelRequest.model_id)
}
inline void DeleteModelRequest::set_model_id(const char* value, size_t size) {
  
  model_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.DeleteModelRequest.model_id)
}
inline std::string* DeleteModelRequest::_internal_mutable_model_id() {
  
  return model_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeleteModelRequest::release_model_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteModelRequest.model_id)
  
  return model_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteModelRequest::set_allocated_model_id(std::string* model_id) {
  if (model_id != nullptr) {
    
  } else {
    
  }
  model_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteModelRequest.model_id)
}

// -------------------------------------------------------------------

// DeleteModelsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool DeleteModelsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool DeleteModelsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& DeleteModelsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& DeleteModelsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteModelsRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* DeleteModelsRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteModelsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteModelsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* DeleteModelsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteModelsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void DeleteModelsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteModelsRequest.user_app_id)
}

// repeated string ids = 2;
inline int DeleteModelsRequest::_internal_ids_size() const {
  return ids_.size();
}
inline int DeleteModelsRequest::ids_size() const {
  return _internal_ids_size();
}
inline void DeleteModelsRequest::clear_ids() {
  ids_.Clear();
}
inline std::string* DeleteModelsRequest::add_ids() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.DeleteModelsRequest.ids)
  return _internal_add_ids();
}
inline const std::string& DeleteModelsRequest::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const std::string& DeleteModelsRequest::ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteModelsRequest.ids)
  return _internal_ids(index);
}
inline std::string* DeleteModelsRequest::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteModelsRequest.ids)
  return ids_.Mutable(index);
}
inline void DeleteModelsRequest::set_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteModelsRequest.ids)
  ids_.Mutable(index)->assign(value);
}
inline void DeleteModelsRequest::set_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteModelsRequest.ids)
  ids_.Mutable(index)->assign(std::move(value));
}
inline void DeleteModelsRequest::set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.DeleteModelsRequest.ids)
}
inline void DeleteModelsRequest::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.DeleteModelsRequest.ids)
}
inline std::string* DeleteModelsRequest::_internal_add_ids() {
  return ids_.Add();
}
inline void DeleteModelsRequest::add_ids(const std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.DeleteModelsRequest.ids)
}
inline void DeleteModelsRequest::add_ids(std::string&& value) {
  ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.DeleteModelsRequest.ids)
}
inline void DeleteModelsRequest::add_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.DeleteModelsRequest.ids)
}
inline void DeleteModelsRequest::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.DeleteModelsRequest.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeleteModelsRequest::ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.DeleteModelsRequest.ids)
  return ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeleteModelsRequest::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.DeleteModelsRequest.ids)
  return &ids_;
}

// bool delete_all = 3;
inline void DeleteModelsRequest::clear_delete_all() {
  delete_all_ = false;
}
inline bool DeleteModelsRequest::_internal_delete_all() const {
  return delete_all_;
}
inline bool DeleteModelsRequest::delete_all() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteModelsRequest.delete_all)
  return _internal_delete_all();
}
inline void DeleteModelsRequest::_internal_set_delete_all(bool value) {
  
  delete_all_ = value;
}
inline void DeleteModelsRequest::set_delete_all(bool value) {
  _internal_set_delete_all(value);
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteModelsRequest.delete_all)
}

// -------------------------------------------------------------------

// PostModelsSearchesRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostModelsSearchesRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostModelsSearchesRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostModelsSearchesRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostModelsSearchesRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostModelsSearchesRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* PostModelsSearchesRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostModelsSearchesRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostModelsSearchesRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostModelsSearchesRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostModelsSearchesRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void PostModelsSearchesRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostModelsSearchesRequest.user_app_id)
}

// .clarifai.api.ModelQuery model_query = 2;
inline bool PostModelsSearchesRequest::_internal_has_model_query() const {
  return this != internal_default_instance() && model_query_ != nullptr;
}
inline bool PostModelsSearchesRequest::has_model_query() const {
  return _internal_has_model_query();
}
inline const ::clarifai::api::ModelQuery& PostModelsSearchesRequest::_internal_model_query() const {
  const ::clarifai::api::ModelQuery* p = model_query_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::ModelQuery*>(
      &::clarifai::api::_ModelQuery_default_instance_);
}
inline const ::clarifai::api::ModelQuery& PostModelsSearchesRequest::model_query() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostModelsSearchesRequest.model_query)
  return _internal_model_query();
}
inline ::clarifai::api::ModelQuery* PostModelsSearchesRequest::release_model_query() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostModelsSearchesRequest.model_query)
  
  ::clarifai::api::ModelQuery* temp = model_query_;
  model_query_ = nullptr;
  return temp;
}
inline ::clarifai::api::ModelQuery* PostModelsSearchesRequest::_internal_mutable_model_query() {
  
  if (model_query_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::ModelQuery>(GetArenaNoVirtual());
    model_query_ = p;
  }
  return model_query_;
}
inline ::clarifai::api::ModelQuery* PostModelsSearchesRequest::mutable_model_query() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostModelsSearchesRequest.model_query)
  return _internal_mutable_model_query();
}
inline void PostModelsSearchesRequest::set_allocated_model_query(::clarifai::api::ModelQuery* model_query) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_query_);
  }
  if (model_query) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      model_query = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model_query, submessage_arena);
    }
    
  } else {
    
  }
  model_query_ = model_query;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostModelsSearchesRequest.model_query)
}

// .clarifai.api.Pagination pagination = 3;
inline bool PostModelsSearchesRequest::_internal_has_pagination() const {
  return this != internal_default_instance() && pagination_ != nullptr;
}
inline bool PostModelsSearchesRequest::has_pagination() const {
  return _internal_has_pagination();
}
inline void PostModelsSearchesRequest::clear_pagination() {
  if (GetArenaNoVirtual() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
}
inline const ::clarifai::api::Pagination& PostModelsSearchesRequest::_internal_pagination() const {
  const ::clarifai::api::Pagination* p = pagination_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Pagination*>(
      &::clarifai::api::_Pagination_default_instance_);
}
inline const ::clarifai::api::Pagination& PostModelsSearchesRequest::pagination() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostModelsSearchesRequest.pagination)
  return _internal_pagination();
}
inline ::clarifai::api::Pagination* PostModelsSearchesRequest::release_pagination() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostModelsSearchesRequest.pagination)
  
  ::clarifai::api::Pagination* temp = pagination_;
  pagination_ = nullptr;
  return temp;
}
inline ::clarifai::api::Pagination* PostModelsSearchesRequest::_internal_mutable_pagination() {
  
  if (pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Pagination>(GetArenaNoVirtual());
    pagination_ = p;
  }
  return pagination_;
}
inline ::clarifai::api::Pagination* PostModelsSearchesRequest::mutable_pagination() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostModelsSearchesRequest.pagination)
  return _internal_mutable_pagination();
}
inline void PostModelsSearchesRequest::set_allocated_pagination(::clarifai::api::Pagination* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pagination_;
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    
  } else {
    
  }
  pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostModelsSearchesRequest.pagination)
}

// -------------------------------------------------------------------

// SingleModelResponse

// .clarifai.api.status.Status status = 1;
inline bool SingleModelResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SingleModelResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& SingleModelResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& SingleModelResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleModelResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* SingleModelResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleModelResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* SingleModelResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* SingleModelResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleModelResponse.status)
  return _internal_mutable_status();
}
inline void SingleModelResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleModelResponse.status)
}

// .clarifai.api.Model model = 2;
inline bool SingleModelResponse::_internal_has_model() const {
  return this != internal_default_instance() && model_ != nullptr;
}
inline bool SingleModelResponse::has_model() const {
  return _internal_has_model();
}
inline const ::clarifai::api::Model& SingleModelResponse::_internal_model() const {
  const ::clarifai::api::Model* p = model_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Model*>(
      &::clarifai::api::_Model_default_instance_);
}
inline const ::clarifai::api::Model& SingleModelResponse::model() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleModelResponse.model)
  return _internal_model();
}
inline ::clarifai::api::Model* SingleModelResponse::release_model() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleModelResponse.model)
  
  ::clarifai::api::Model* temp = model_;
  model_ = nullptr;
  return temp;
}
inline ::clarifai::api::Model* SingleModelResponse::_internal_mutable_model() {
  
  if (model_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Model>(GetArenaNoVirtual());
    model_ = p;
  }
  return model_;
}
inline ::clarifai::api::Model* SingleModelResponse::mutable_model() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleModelResponse.model)
  return _internal_mutable_model();
}
inline void SingleModelResponse::set_allocated_model(::clarifai::api::Model* model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_);
  }
  if (model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model, submessage_arena);
    }
    
  } else {
    
  }
  model_ = model;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleModelResponse.model)
}

// -------------------------------------------------------------------

// MultiModelResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiModelResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiModelResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiModelResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiModelResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiModelResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* MultiModelResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiModelResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiModelResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiModelResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiModelResponse.status)
  return _internal_mutable_status();
}
inline void MultiModelResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiModelResponse.status)
}

// repeated .clarifai.api.Model models = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int MultiModelResponse::_internal_models_size() const {
  return models_.size();
}
inline int MultiModelResponse::models_size() const {
  return _internal_models_size();
}
inline ::clarifai::api::Model* MultiModelResponse::mutable_models(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiModelResponse.models)
  return models_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Model >*
MultiModelResponse::mutable_models() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiModelResponse.models)
  return &models_;
}
inline const ::clarifai::api::Model& MultiModelResponse::_internal_models(int index) const {
  return models_.Get(index);
}
inline const ::clarifai::api::Model& MultiModelResponse::models(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiModelResponse.models)
  return _internal_models(index);
}
inline ::clarifai::api::Model* MultiModelResponse::_internal_add_models() {
  return models_.Add();
}
inline ::clarifai::api::Model* MultiModelResponse::add_models() {
  // @@protoc_insertion_point(field_add:clarifai.api.MultiModelResponse.models)
  return _internal_add_models();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Model >&
MultiModelResponse::models() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiModelResponse.models)
  return models_;
}

// -------------------------------------------------------------------

// GetModelVersionRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool GetModelVersionRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool GetModelVersionRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& GetModelVersionRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& GetModelVersionRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetModelVersionRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* GetModelVersionRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetModelVersionRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetModelVersionRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* GetModelVersionRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetModelVersionRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void GetModelVersionRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetModelVersionRequest.user_app_id)
}

// string model_id = 2;
inline void GetModelVersionRequest::clear_model_id() {
  model_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetModelVersionRequest::model_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetModelVersionRequest.model_id)
  return _internal_model_id();
}
inline void GetModelVersionRequest::set_model_id(const std::string& value) {
  _internal_set_model_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.GetModelVersionRequest.model_id)
}
inline std::string* GetModelVersionRequest::mutable_model_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetModelVersionRequest.model_id)
  return _internal_mutable_model_id();
}
inline const std::string& GetModelVersionRequest::_internal_model_id() const {
  return model_id_.GetNoArena();
}
inline void GetModelVersionRequest::_internal_set_model_id(const std::string& value) {
  
  model_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetModelVersionRequest::set_model_id(std::string&& value) {
  
  model_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.GetModelVersionRequest.model_id)
}
inline void GetModelVersionRequest::set_model_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.GetModelVersionRequest.model_id)
}
inline void GetModelVersionRequest::set_model_id(const char* value, size_t size) {
  
  model_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.GetModelVersionRequest.model_id)
}
inline std::string* GetModelVersionRequest::_internal_mutable_model_id() {
  
  return model_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetModelVersionRequest::release_model_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetModelVersionRequest.model_id)
  
  return model_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetModelVersionRequest::set_allocated_model_id(std::string* model_id) {
  if (model_id != nullptr) {
    
  } else {
    
  }
  model_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetModelVersionRequest.model_id)
}

// string version_id = 3;
inline void GetModelVersionRequest::clear_version_id() {
  version_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetModelVersionRequest::version_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetModelVersionRequest.version_id)
  return _internal_version_id();
}
inline void GetModelVersionRequest::set_version_id(const std::string& value) {
  _internal_set_version_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.GetModelVersionRequest.version_id)
}
inline std::string* GetModelVersionRequest::mutable_version_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetModelVersionRequest.version_id)
  return _internal_mutable_version_id();
}
inline const std::string& GetModelVersionRequest::_internal_version_id() const {
  return version_id_.GetNoArena();
}
inline void GetModelVersionRequest::_internal_set_version_id(const std::string& value) {
  
  version_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetModelVersionRequest::set_version_id(std::string&& value) {
  
  version_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.GetModelVersionRequest.version_id)
}
inline void GetModelVersionRequest::set_version_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.GetModelVersionRequest.version_id)
}
inline void GetModelVersionRequest::set_version_id(const char* value, size_t size) {
  
  version_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.GetModelVersionRequest.version_id)
}
inline std::string* GetModelVersionRequest::_internal_mutable_version_id() {
  
  return version_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetModelVersionRequest::release_version_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetModelVersionRequest.version_id)
  
  return version_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetModelVersionRequest::set_allocated_version_id(std::string* version_id) {
  if (version_id != nullptr) {
    
  } else {
    
  }
  version_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetModelVersionRequest.version_id)
}

// -------------------------------------------------------------------

// ListModelVersionsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool ListModelVersionsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool ListModelVersionsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& ListModelVersionsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& ListModelVersionsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListModelVersionsRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* ListModelVersionsRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListModelVersionsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListModelVersionsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* ListModelVersionsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListModelVersionsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void ListModelVersionsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListModelVersionsRequest.user_app_id)
}

// string model_id = 2;
inline void ListModelVersionsRequest::clear_model_id() {
  model_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ListModelVersionsRequest::model_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListModelVersionsRequest.model_id)
  return _internal_model_id();
}
inline void ListModelVersionsRequest::set_model_id(const std::string& value) {
  _internal_set_model_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListModelVersionsRequest.model_id)
}
inline std::string* ListModelVersionsRequest::mutable_model_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListModelVersionsRequest.model_id)
  return _internal_mutable_model_id();
}
inline const std::string& ListModelVersionsRequest::_internal_model_id() const {
  return model_id_.GetNoArena();
}
inline void ListModelVersionsRequest::_internal_set_model_id(const std::string& value) {
  
  model_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ListModelVersionsRequest::set_model_id(std::string&& value) {
  
  model_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ListModelVersionsRequest.model_id)
}
inline void ListModelVersionsRequest::set_model_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.ListModelVersionsRequest.model_id)
}
inline void ListModelVersionsRequest::set_model_id(const char* value, size_t size) {
  
  model_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ListModelVersionsRequest.model_id)
}
inline std::string* ListModelVersionsRequest::_internal_mutable_model_id() {
  
  return model_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ListModelVersionsRequest::release_model_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListModelVersionsRequest.model_id)
  
  return model_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ListModelVersionsRequest::set_allocated_model_id(std::string* model_id) {
  if (model_id != nullptr) {
    
  } else {
    
  }
  model_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListModelVersionsRequest.model_id)
}

// uint32 page = 3;
inline void ListModelVersionsRequest::clear_page() {
  page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListModelVersionsRequest::_internal_page() const {
  return page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListModelVersionsRequest::page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListModelVersionsRequest.page)
  return _internal_page();
}
inline void ListModelVersionsRequest::_internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  page_ = value;
}
inline void ListModelVersionsRequest::set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListModelVersionsRequest.page)
}

// uint32 per_page = 4;
inline void ListModelVersionsRequest::clear_per_page() {
  per_page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListModelVersionsRequest::_internal_per_page() const {
  return per_page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListModelVersionsRequest::per_page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListModelVersionsRequest.per_page)
  return _internal_per_page();
}
inline void ListModelVersionsRequest::_internal_set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  per_page_ = value;
}
inline void ListModelVersionsRequest::set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_per_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListModelVersionsRequest.per_page)
}

// repeated string concept_ids = 5;
inline int ListModelVersionsRequest::_internal_concept_ids_size() const {
  return concept_ids_.size();
}
inline int ListModelVersionsRequest::concept_ids_size() const {
  return _internal_concept_ids_size();
}
inline void ListModelVersionsRequest::clear_concept_ids() {
  concept_ids_.Clear();
}
inline std::string* ListModelVersionsRequest::add_concept_ids() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.ListModelVersionsRequest.concept_ids)
  return _internal_add_concept_ids();
}
inline const std::string& ListModelVersionsRequest::_internal_concept_ids(int index) const {
  return concept_ids_.Get(index);
}
inline const std::string& ListModelVersionsRequest::concept_ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListModelVersionsRequest.concept_ids)
  return _internal_concept_ids(index);
}
inline std::string* ListModelVersionsRequest::mutable_concept_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListModelVersionsRequest.concept_ids)
  return concept_ids_.Mutable(index);
}
inline void ListModelVersionsRequest::set_concept_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.ListModelVersionsRequest.concept_ids)
  concept_ids_.Mutable(index)->assign(value);
}
inline void ListModelVersionsRequest::set_concept_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.ListModelVersionsRequest.concept_ids)
  concept_ids_.Mutable(index)->assign(std::move(value));
}
inline void ListModelVersionsRequest::set_concept_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  concept_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.ListModelVersionsRequest.concept_ids)
}
inline void ListModelVersionsRequest::set_concept_ids(int index, const char* value, size_t size) {
  concept_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ListModelVersionsRequest.concept_ids)
}
inline std::string* ListModelVersionsRequest::_internal_add_concept_ids() {
  return concept_ids_.Add();
}
inline void ListModelVersionsRequest::add_concept_ids(const std::string& value) {
  concept_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.ListModelVersionsRequest.concept_ids)
}
inline void ListModelVersionsRequest::add_concept_ids(std::string&& value) {
  concept_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.ListModelVersionsRequest.concept_ids)
}
inline void ListModelVersionsRequest::add_concept_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  concept_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.ListModelVersionsRequest.concept_ids)
}
inline void ListModelVersionsRequest::add_concept_ids(const char* value, size_t size) {
  concept_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.ListModelVersionsRequest.concept_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListModelVersionsRequest::concept_ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.ListModelVersionsRequest.concept_ids)
  return concept_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListModelVersionsRequest::mutable_concept_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.ListModelVersionsRequest.concept_ids)
  return &concept_ids_;
}

// -------------------------------------------------------------------

// DeleteModelVersionRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool DeleteModelVersionRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool DeleteModelVersionRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& DeleteModelVersionRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& DeleteModelVersionRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteModelVersionRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* DeleteModelVersionRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteModelVersionRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteModelVersionRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* DeleteModelVersionRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteModelVersionRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void DeleteModelVersionRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteModelVersionRequest.user_app_id)
}

// string model_id = 3;
inline void DeleteModelVersionRequest::clear_model_id() {
  model_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeleteModelVersionRequest::model_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteModelVersionRequest.model_id)
  return _internal_model_id();
}
inline void DeleteModelVersionRequest::set_model_id(const std::string& value) {
  _internal_set_model_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteModelVersionRequest.model_id)
}
inline std::string* DeleteModelVersionRequest::mutable_model_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteModelVersionRequest.model_id)
  return _internal_mutable_model_id();
}
inline const std::string& DeleteModelVersionRequest::_internal_model_id() const {
  return model_id_.GetNoArena();
}
inline void DeleteModelVersionRequest::_internal_set_model_id(const std::string& value) {
  
  model_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DeleteModelVersionRequest::set_model_id(std::string&& value) {
  
  model_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.DeleteModelVersionRequest.model_id)
}
inline void DeleteModelVersionRequest::set_model_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.DeleteModelVersionRequest.model_id)
}
inline void DeleteModelVersionRequest::set_model_id(const char* value, size_t size) {
  
  model_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.DeleteModelVersionRequest.model_id)
}
inline std::string* DeleteModelVersionRequest::_internal_mutable_model_id() {
  
  return model_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeleteModelVersionRequest::release_model_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteModelVersionRequest.model_id)
  
  return model_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteModelVersionRequest::set_allocated_model_id(std::string* model_id) {
  if (model_id != nullptr) {
    
  } else {
    
  }
  model_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteModelVersionRequest.model_id)
}

// string version_id = 4;
inline void DeleteModelVersionRequest::clear_version_id() {
  version_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeleteModelVersionRequest::version_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteModelVersionRequest.version_id)
  return _internal_version_id();
}
inline void DeleteModelVersionRequest::set_version_id(const std::string& value) {
  _internal_set_version_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteModelVersionRequest.version_id)
}
inline std::string* DeleteModelVersionRequest::mutable_version_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteModelVersionRequest.version_id)
  return _internal_mutable_version_id();
}
inline const std::string& DeleteModelVersionRequest::_internal_version_id() const {
  return version_id_.GetNoArena();
}
inline void DeleteModelVersionRequest::_internal_set_version_id(const std::string& value) {
  
  version_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DeleteModelVersionRequest::set_version_id(std::string&& value) {
  
  version_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.DeleteModelVersionRequest.version_id)
}
inline void DeleteModelVersionRequest::set_version_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.DeleteModelVersionRequest.version_id)
}
inline void DeleteModelVersionRequest::set_version_id(const char* value, size_t size) {
  
  version_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.DeleteModelVersionRequest.version_id)
}
inline std::string* DeleteModelVersionRequest::_internal_mutable_version_id() {
  
  return version_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeleteModelVersionRequest::release_version_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteModelVersionRequest.version_id)
  
  return version_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteModelVersionRequest::set_allocated_version_id(std::string* version_id) {
  if (version_id != nullptr) {
    
  } else {
    
  }
  version_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteModelVersionRequest.version_id)
}

// -------------------------------------------------------------------

// SingleModelVersionResponse

// .clarifai.api.status.Status status = 1;
inline bool SingleModelVersionResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SingleModelVersionResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& SingleModelVersionResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& SingleModelVersionResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleModelVersionResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* SingleModelVersionResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleModelVersionResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* SingleModelVersionResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* SingleModelVersionResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleModelVersionResponse.status)
  return _internal_mutable_status();
}
inline void SingleModelVersionResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleModelVersionResponse.status)
}

// .clarifai.api.ModelVersion model_version = 2;
inline bool SingleModelVersionResponse::_internal_has_model_version() const {
  return this != internal_default_instance() && model_version_ != nullptr;
}
inline bool SingleModelVersionResponse::has_model_version() const {
  return _internal_has_model_version();
}
inline const ::clarifai::api::ModelVersion& SingleModelVersionResponse::_internal_model_version() const {
  const ::clarifai::api::ModelVersion* p = model_version_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::ModelVersion*>(
      &::clarifai::api::_ModelVersion_default_instance_);
}
inline const ::clarifai::api::ModelVersion& SingleModelVersionResponse::model_version() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleModelVersionResponse.model_version)
  return _internal_model_version();
}
inline ::clarifai::api::ModelVersion* SingleModelVersionResponse::release_model_version() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleModelVersionResponse.model_version)
  
  ::clarifai::api::ModelVersion* temp = model_version_;
  model_version_ = nullptr;
  return temp;
}
inline ::clarifai::api::ModelVersion* SingleModelVersionResponse::_internal_mutable_model_version() {
  
  if (model_version_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::ModelVersion>(GetArenaNoVirtual());
    model_version_ = p;
  }
  return model_version_;
}
inline ::clarifai::api::ModelVersion* SingleModelVersionResponse::mutable_model_version() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleModelVersionResponse.model_version)
  return _internal_mutable_model_version();
}
inline void SingleModelVersionResponse::set_allocated_model_version(::clarifai::api::ModelVersion* model_version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_version_);
  }
  if (model_version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      model_version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model_version, submessage_arena);
    }
    
  } else {
    
  }
  model_version_ = model_version;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleModelVersionResponse.model_version)
}

// -------------------------------------------------------------------

// MultiModelVersionResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiModelVersionResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiModelVersionResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiModelVersionResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiModelVersionResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiModelVersionResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* MultiModelVersionResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiModelVersionResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiModelVersionResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiModelVersionResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiModelVersionResponse.status)
  return _internal_mutable_status();
}
inline void MultiModelVersionResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiModelVersionResponse.status)
}

// repeated .clarifai.api.ModelVersion model_versions = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int MultiModelVersionResponse::_internal_model_versions_size() const {
  return model_versions_.size();
}
inline int MultiModelVersionResponse::model_versions_size() const {
  return _internal_model_versions_size();
}
inline ::clarifai::api::ModelVersion* MultiModelVersionResponse::mutable_model_versions(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiModelVersionResponse.model_versions)
  return model_versions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelVersion >*
MultiModelVersionResponse::mutable_model_versions() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiModelVersionResponse.model_versions)
  return &model_versions_;
}
inline const ::clarifai::api::ModelVersion& MultiModelVersionResponse::_internal_model_versions(int index) const {
  return model_versions_.Get(index);
}
inline const ::clarifai::api::ModelVersion& MultiModelVersionResponse::model_versions(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiModelVersionResponse.model_versions)
  return _internal_model_versions(index);
}
inline ::clarifai::api::ModelVersion* MultiModelVersionResponse::_internal_add_model_versions() {
  return model_versions_.Add();
}
inline ::clarifai::api::ModelVersion* MultiModelVersionResponse::add_model_versions() {
  // @@protoc_insertion_point(field_add:clarifai.api.MultiModelVersionResponse.model_versions)
  return _internal_add_model_versions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelVersion >&
MultiModelVersionResponse::model_versions() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiModelVersionResponse.model_versions)
  return model_versions_;
}

// -------------------------------------------------------------------

// PostModelVersionsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostModelVersionsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostModelVersionsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostModelVersionsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostModelVersionsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostModelVersionsRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* PostModelVersionsRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostModelVersionsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostModelVersionsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostModelVersionsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostModelVersionsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void PostModelVersionsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostModelVersionsRequest.user_app_id)
}

// string model_id = 2;
inline void PostModelVersionsRequest::clear_model_id() {
  model_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PostModelVersionsRequest::model_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostModelVersionsRequest.model_id)
  return _internal_model_id();
}
inline void PostModelVersionsRequest::set_model_id(const std::string& value) {
  _internal_set_model_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PostModelVersionsRequest.model_id)
}
inline std::string* PostModelVersionsRequest::mutable_model_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostModelVersionsRequest.model_id)
  return _internal_mutable_model_id();
}
inline const std::string& PostModelVersionsRequest::_internal_model_id() const {
  return model_id_.GetNoArena();
}
inline void PostModelVersionsRequest::_internal_set_model_id(const std::string& value) {
  
  model_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PostModelVersionsRequest::set_model_id(std::string&& value) {
  
  model_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.PostModelVersionsRequest.model_id)
}
inline void PostModelVersionsRequest::set_model_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.PostModelVersionsRequest.model_id)
}
inline void PostModelVersionsRequest::set_model_id(const char* value, size_t size) {
  
  model_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PostModelVersionsRequest.model_id)
}
inline std::string* PostModelVersionsRequest::_internal_mutable_model_id() {
  
  return model_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PostModelVersionsRequest::release_model_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostModelVersionsRequest.model_id)
  
  return model_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PostModelVersionsRequest::set_allocated_model_id(std::string* model_id) {
  if (model_id != nullptr) {
    
  } else {
    
  }
  model_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostModelVersionsRequest.model_id)
}

// repeated .clarifai.api.ModelVersion model_versions = 3;
inline int PostModelVersionsRequest::_internal_model_versions_size() const {
  return model_versions_.size();
}
inline int PostModelVersionsRequest::model_versions_size() const {
  return _internal_model_versions_size();
}
inline ::clarifai::api::ModelVersion* PostModelVersionsRequest::mutable_model_versions(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostModelVersionsRequest.model_versions)
  return model_versions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelVersion >*
PostModelVersionsRequest::mutable_model_versions() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostModelVersionsRequest.model_versions)
  return &model_versions_;
}
inline const ::clarifai::api::ModelVersion& PostModelVersionsRequest::_internal_model_versions(int index) const {
  return model_versions_.Get(index);
}
inline const ::clarifai::api::ModelVersion& PostModelVersionsRequest::model_versions(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostModelVersionsRequest.model_versions)
  return _internal_model_versions(index);
}
inline ::clarifai::api::ModelVersion* PostModelVersionsRequest::_internal_add_model_versions() {
  return model_versions_.Add();
}
inline ::clarifai::api::ModelVersion* PostModelVersionsRequest::add_model_versions() {
  // @@protoc_insertion_point(field_add:clarifai.api.PostModelVersionsRequest.model_versions)
  return _internal_add_model_versions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelVersion >&
PostModelVersionsRequest::model_versions() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostModelVersionsRequest.model_versions)
  return model_versions_;
}

// .clarifai.api.Search search = 4 [deprecated = true];
inline bool PostModelVersionsRequest::_internal_has_search() const {
  return this != internal_default_instance() && search_ != nullptr;
}
inline bool PostModelVersionsRequest::has_search() const {
  return _internal_has_search();
}
inline const ::clarifai::api::Search& PostModelVersionsRequest::_internal_search() const {
  const ::clarifai::api::Search* p = search_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Search*>(
      &::clarifai::api::_Search_default_instance_);
}
inline const ::clarifai::api::Search& PostModelVersionsRequest::search() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostModelVersionsRequest.search)
  return _internal_search();
}
inline ::clarifai::api::Search* PostModelVersionsRequest::release_search() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostModelVersionsRequest.search)
  
  ::clarifai::api::Search* temp = search_;
  search_ = nullptr;
  return temp;
}
inline ::clarifai::api::Search* PostModelVersionsRequest::_internal_mutable_search() {
  
  if (search_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Search>(GetArenaNoVirtual());
    search_ = p;
  }
  return search_;
}
inline ::clarifai::api::Search* PostModelVersionsRequest::mutable_search() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostModelVersionsRequest.search)
  return _internal_mutable_search();
}
inline void PostModelVersionsRequest::set_allocated_search(::clarifai::api::Search* search) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(search_);
  }
  if (search) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      search = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, search, submessage_arena);
    }
    
  } else {
    
  }
  search_ = search;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostModelVersionsRequest.search)
}

// .clarifai.api.Search train_search = 5;
inline bool PostModelVersionsRequest::_internal_has_train_search() const {
  return this != internal_default_instance() && train_search_ != nullptr;
}
inline bool PostModelVersionsRequest::has_train_search() const {
  return _internal_has_train_search();
}
inline const ::clarifai::api::Search& PostModelVersionsRequest::_internal_train_search() const {
  const ::clarifai::api::Search* p = train_search_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Search*>(
      &::clarifai::api::_Search_default_instance_);
}
inline const ::clarifai::api::Search& PostModelVersionsRequest::train_search() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostModelVersionsRequest.train_search)
  return _internal_train_search();
}
inline ::clarifai::api::Search* PostModelVersionsRequest::release_train_search() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostModelVersionsRequest.train_search)
  
  ::clarifai::api::Search* temp = train_search_;
  train_search_ = nullptr;
  return temp;
}
inline ::clarifai::api::Search* PostModelVersionsRequest::_internal_mutable_train_search() {
  
  if (train_search_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Search>(GetArenaNoVirtual());
    train_search_ = p;
  }
  return train_search_;
}
inline ::clarifai::api::Search* PostModelVersionsRequest::mutable_train_search() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostModelVersionsRequest.train_search)
  return _internal_mutable_train_search();
}
inline void PostModelVersionsRequest::set_allocated_train_search(::clarifai::api::Search* train_search) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(train_search_);
  }
  if (train_search) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      train_search = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, train_search, submessage_arena);
    }
    
  } else {
    
  }
  train_search_ = train_search;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostModelVersionsRequest.train_search)
}

// .clarifai.api.Search test_search = 6;
inline bool PostModelVersionsRequest::_internal_has_test_search() const {
  return this != internal_default_instance() && test_search_ != nullptr;
}
inline bool PostModelVersionsRequest::has_test_search() const {
  return _internal_has_test_search();
}
inline const ::clarifai::api::Search& PostModelVersionsRequest::_internal_test_search() const {
  const ::clarifai::api::Search* p = test_search_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Search*>(
      &::clarifai::api::_Search_default_instance_);
}
inline const ::clarifai::api::Search& PostModelVersionsRequest::test_search() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostModelVersionsRequest.test_search)
  return _internal_test_search();
}
inline ::clarifai::api::Search* PostModelVersionsRequest::release_test_search() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostModelVersionsRequest.test_search)
  
  ::clarifai::api::Search* temp = test_search_;
  test_search_ = nullptr;
  return temp;
}
inline ::clarifai::api::Search* PostModelVersionsRequest::_internal_mutable_test_search() {
  
  if (test_search_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Search>(GetArenaNoVirtual());
    test_search_ = p;
  }
  return test_search_;
}
inline ::clarifai::api::Search* PostModelVersionsRequest::mutable_test_search() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostModelVersionsRequest.test_search)
  return _internal_mutable_test_search();
}
inline void PostModelVersionsRequest::set_allocated_test_search(::clarifai::api::Search* test_search) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(test_search_);
  }
  if (test_search) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      test_search = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, test_search, submessage_arena);
    }
    
  } else {
    
  }
  test_search_ = test_search;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostModelVersionsRequest.test_search)
}

// bool evaluate_after_training = 7;
inline void PostModelVersionsRequest::clear_evaluate_after_training() {
  evaluate_after_training_ = false;
}
inline bool PostModelVersionsRequest::_internal_evaluate_after_training() const {
  return evaluate_after_training_;
}
inline bool PostModelVersionsRequest::evaluate_after_training() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostModelVersionsRequest.evaluate_after_training)
  return _internal_evaluate_after_training();
}
inline void PostModelVersionsRequest::_internal_set_evaluate_after_training(bool value) {
  
  evaluate_after_training_ = value;
}
inline void PostModelVersionsRequest::set_evaluate_after_training(bool value) {
  _internal_set_evaluate_after_training(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PostModelVersionsRequest.evaluate_after_training)
}

// -------------------------------------------------------------------

// PostModelVersionMetricsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostModelVersionMetricsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostModelVersionMetricsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostModelVersionMetricsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostModelVersionMetricsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostModelVersionMetricsRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* PostModelVersionMetricsRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostModelVersionMetricsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostModelVersionMetricsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostModelVersionMetricsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostModelVersionMetricsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void PostModelVersionMetricsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostModelVersionMetricsRequest.user_app_id)
}

// string model_id = 2;
inline void PostModelVersionMetricsRequest::clear_model_id() {
  model_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PostModelVersionMetricsRequest::model_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostModelVersionMetricsRequest.model_id)
  return _internal_model_id();
}
inline void PostModelVersionMetricsRequest::set_model_id(const std::string& value) {
  _internal_set_model_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PostModelVersionMetricsRequest.model_id)
}
inline std::string* PostModelVersionMetricsRequest::mutable_model_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostModelVersionMetricsRequest.model_id)
  return _internal_mutable_model_id();
}
inline const std::string& PostModelVersionMetricsRequest::_internal_model_id() const {
  return model_id_.GetNoArena();
}
inline void PostModelVersionMetricsRequest::_internal_set_model_id(const std::string& value) {
  
  model_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PostModelVersionMetricsRequest::set_model_id(std::string&& value) {
  
  model_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.PostModelVersionMetricsRequest.model_id)
}
inline void PostModelVersionMetricsRequest::set_model_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.PostModelVersionMetricsRequest.model_id)
}
inline void PostModelVersionMetricsRequest::set_model_id(const char* value, size_t size) {
  
  model_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PostModelVersionMetricsRequest.model_id)
}
inline std::string* PostModelVersionMetricsRequest::_internal_mutable_model_id() {
  
  return model_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PostModelVersionMetricsRequest::release_model_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostModelVersionMetricsRequest.model_id)
  
  return model_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PostModelVersionMetricsRequest::set_allocated_model_id(std::string* model_id) {
  if (model_id != nullptr) {
    
  } else {
    
  }
  model_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostModelVersionMetricsRequest.model_id)
}

// string version_id = 3;
inline void PostModelVersionMetricsRequest::clear_version_id() {
  version_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PostModelVersionMetricsRequest::version_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostModelVersionMetricsRequest.version_id)
  return _internal_version_id();
}
inline void PostModelVersionMetricsRequest::set_version_id(const std::string& value) {
  _internal_set_version_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PostModelVersionMetricsRequest.version_id)
}
inline std::string* PostModelVersionMetricsRequest::mutable_version_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostModelVersionMetricsRequest.version_id)
  return _internal_mutable_version_id();
}
inline const std::string& PostModelVersionMetricsRequest::_internal_version_id() const {
  return version_id_.GetNoArena();
}
inline void PostModelVersionMetricsRequest::_internal_set_version_id(const std::string& value) {
  
  version_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PostModelVersionMetricsRequest::set_version_id(std::string&& value) {
  
  version_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.PostModelVersionMetricsRequest.version_id)
}
inline void PostModelVersionMetricsRequest::set_version_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.PostModelVersionMetricsRequest.version_id)
}
inline void PostModelVersionMetricsRequest::set_version_id(const char* value, size_t size) {
  
  version_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PostModelVersionMetricsRequest.version_id)
}
inline std::string* PostModelVersionMetricsRequest::_internal_mutable_version_id() {
  
  return version_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PostModelVersionMetricsRequest::release_version_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostModelVersionMetricsRequest.version_id)
  
  return version_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PostModelVersionMetricsRequest::set_allocated_version_id(std::string* version_id) {
  if (version_id != nullptr) {
    
  } else {
    
  }
  version_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostModelVersionMetricsRequest.version_id)
}

// uint32 max_examples = 4;
inline void PostModelVersionMetricsRequest::clear_max_examples() {
  max_examples_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PostModelVersionMetricsRequest::_internal_max_examples() const {
  return max_examples_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PostModelVersionMetricsRequest::max_examples() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostModelVersionMetricsRequest.max_examples)
  return _internal_max_examples();
}
inline void PostModelVersionMetricsRequest::_internal_set_max_examples(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  max_examples_ = value;
}
inline void PostModelVersionMetricsRequest::set_max_examples(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_examples(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PostModelVersionMetricsRequest.max_examples)
}

// .clarifai.api.Search test_search = 5;
inline bool PostModelVersionMetricsRequest::_internal_has_test_search() const {
  return this != internal_default_instance() && test_search_ != nullptr;
}
inline bool PostModelVersionMetricsRequest::has_test_search() const {
  return _internal_has_test_search();
}
inline const ::clarifai::api::Search& PostModelVersionMetricsRequest::_internal_test_search() const {
  const ::clarifai::api::Search* p = test_search_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Search*>(
      &::clarifai::api::_Search_default_instance_);
}
inline const ::clarifai::api::Search& PostModelVersionMetricsRequest::test_search() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostModelVersionMetricsRequest.test_search)
  return _internal_test_search();
}
inline ::clarifai::api::Search* PostModelVersionMetricsRequest::release_test_search() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostModelVersionMetricsRequest.test_search)
  
  ::clarifai::api::Search* temp = test_search_;
  test_search_ = nullptr;
  return temp;
}
inline ::clarifai::api::Search* PostModelVersionMetricsRequest::_internal_mutable_test_search() {
  
  if (test_search_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Search>(GetArenaNoVirtual());
    test_search_ = p;
  }
  return test_search_;
}
inline ::clarifai::api::Search* PostModelVersionMetricsRequest::mutable_test_search() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostModelVersionMetricsRequest.test_search)
  return _internal_mutable_test_search();
}
inline void PostModelVersionMetricsRequest::set_allocated_test_search(::clarifai::api::Search* test_search) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(test_search_);
  }
  if (test_search) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      test_search = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, test_search, submessage_arena);
    }
    
  } else {
    
  }
  test_search_ = test_search;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostModelVersionMetricsRequest.test_search)
}

// -------------------------------------------------------------------

// PostModelVersionsDeploymentRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostModelVersionsDeploymentRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostModelVersionsDeploymentRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostModelVersionsDeploymentRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostModelVersionsDeploymentRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostModelVersionsDeploymentRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* PostModelVersionsDeploymentRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostModelVersionsDeploymentRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostModelVersionsDeploymentRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostModelVersionsDeploymentRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostModelVersionsDeploymentRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void PostModelVersionsDeploymentRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostModelVersionsDeploymentRequest.user_app_id)
}

// string model_id = 2;
inline void PostModelVersionsDeploymentRequest::clear_model_id() {
  model_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PostModelVersionsDeploymentRequest::model_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostModelVersionsDeploymentRequest.model_id)
  return _internal_model_id();
}
inline void PostModelVersionsDeploymentRequest::set_model_id(const std::string& value) {
  _internal_set_model_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PostModelVersionsDeploymentRequest.model_id)
}
inline std::string* PostModelVersionsDeploymentRequest::mutable_model_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostModelVersionsDeploymentRequest.model_id)
  return _internal_mutable_model_id();
}
inline const std::string& PostModelVersionsDeploymentRequest::_internal_model_id() const {
  return model_id_.GetNoArena();
}
inline void PostModelVersionsDeploymentRequest::_internal_set_model_id(const std::string& value) {
  
  model_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PostModelVersionsDeploymentRequest::set_model_id(std::string&& value) {
  
  model_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.PostModelVersionsDeploymentRequest.model_id)
}
inline void PostModelVersionsDeploymentRequest::set_model_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.PostModelVersionsDeploymentRequest.model_id)
}
inline void PostModelVersionsDeploymentRequest::set_model_id(const char* value, size_t size) {
  
  model_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PostModelVersionsDeploymentRequest.model_id)
}
inline std::string* PostModelVersionsDeploymentRequest::_internal_mutable_model_id() {
  
  return model_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PostModelVersionsDeploymentRequest::release_model_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostModelVersionsDeploymentRequest.model_id)
  
  return model_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PostModelVersionsDeploymentRequest::set_allocated_model_id(std::string* model_id) {
  if (model_id != nullptr) {
    
  } else {
    
  }
  model_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostModelVersionsDeploymentRequest.model_id)
}

// repeated string version_ids = 3;
inline int PostModelVersionsDeploymentRequest::_internal_version_ids_size() const {
  return version_ids_.size();
}
inline int PostModelVersionsDeploymentRequest::version_ids_size() const {
  return _internal_version_ids_size();
}
inline void PostModelVersionsDeploymentRequest::clear_version_ids() {
  version_ids_.Clear();
}
inline std::string* PostModelVersionsDeploymentRequest::add_version_ids() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.PostModelVersionsDeploymentRequest.version_ids)
  return _internal_add_version_ids();
}
inline const std::string& PostModelVersionsDeploymentRequest::_internal_version_ids(int index) const {
  return version_ids_.Get(index);
}
inline const std::string& PostModelVersionsDeploymentRequest::version_ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostModelVersionsDeploymentRequest.version_ids)
  return _internal_version_ids(index);
}
inline std::string* PostModelVersionsDeploymentRequest::mutable_version_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostModelVersionsDeploymentRequest.version_ids)
  return version_ids_.Mutable(index);
}
inline void PostModelVersionsDeploymentRequest::set_version_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.PostModelVersionsDeploymentRequest.version_ids)
  version_ids_.Mutable(index)->assign(value);
}
inline void PostModelVersionsDeploymentRequest::set_version_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.PostModelVersionsDeploymentRequest.version_ids)
  version_ids_.Mutable(index)->assign(std::move(value));
}
inline void PostModelVersionsDeploymentRequest::set_version_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  version_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.PostModelVersionsDeploymentRequest.version_ids)
}
inline void PostModelVersionsDeploymentRequest::set_version_ids(int index, const char* value, size_t size) {
  version_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PostModelVersionsDeploymentRequest.version_ids)
}
inline std::string* PostModelVersionsDeploymentRequest::_internal_add_version_ids() {
  return version_ids_.Add();
}
inline void PostModelVersionsDeploymentRequest::add_version_ids(const std::string& value) {
  version_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.PostModelVersionsDeploymentRequest.version_ids)
}
inline void PostModelVersionsDeploymentRequest::add_version_ids(std::string&& value) {
  version_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.PostModelVersionsDeploymentRequest.version_ids)
}
inline void PostModelVersionsDeploymentRequest::add_version_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  version_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.PostModelVersionsDeploymentRequest.version_ids)
}
inline void PostModelVersionsDeploymentRequest::add_version_ids(const char* value, size_t size) {
  version_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.PostModelVersionsDeploymentRequest.version_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PostModelVersionsDeploymentRequest::version_ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostModelVersionsDeploymentRequest.version_ids)
  return version_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PostModelVersionsDeploymentRequest::mutable_version_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostModelVersionsDeploymentRequest.version_ids)
  return &version_ids_;
}

// -------------------------------------------------------------------

// DeleteModelVersionsDeploymentRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool DeleteModelVersionsDeploymentRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool DeleteModelVersionsDeploymentRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& DeleteModelVersionsDeploymentRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& DeleteModelVersionsDeploymentRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteModelVersionsDeploymentRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* DeleteModelVersionsDeploymentRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteModelVersionsDeploymentRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteModelVersionsDeploymentRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* DeleteModelVersionsDeploymentRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteModelVersionsDeploymentRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void DeleteModelVersionsDeploymentRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteModelVersionsDeploymentRequest.user_app_id)
}

// string model_id = 2;
inline void DeleteModelVersionsDeploymentRequest::clear_model_id() {
  model_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeleteModelVersionsDeploymentRequest::model_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteModelVersionsDeploymentRequest.model_id)
  return _internal_model_id();
}
inline void DeleteModelVersionsDeploymentRequest::set_model_id(const std::string& value) {
  _internal_set_model_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteModelVersionsDeploymentRequest.model_id)
}
inline std::string* DeleteModelVersionsDeploymentRequest::mutable_model_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteModelVersionsDeploymentRequest.model_id)
  return _internal_mutable_model_id();
}
inline const std::string& DeleteModelVersionsDeploymentRequest::_internal_model_id() const {
  return model_id_.GetNoArena();
}
inline void DeleteModelVersionsDeploymentRequest::_internal_set_model_id(const std::string& value) {
  
  model_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DeleteModelVersionsDeploymentRequest::set_model_id(std::string&& value) {
  
  model_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.DeleteModelVersionsDeploymentRequest.model_id)
}
inline void DeleteModelVersionsDeploymentRequest::set_model_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.DeleteModelVersionsDeploymentRequest.model_id)
}
inline void DeleteModelVersionsDeploymentRequest::set_model_id(const char* value, size_t size) {
  
  model_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.DeleteModelVersionsDeploymentRequest.model_id)
}
inline std::string* DeleteModelVersionsDeploymentRequest::_internal_mutable_model_id() {
  
  return model_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeleteModelVersionsDeploymentRequest::release_model_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteModelVersionsDeploymentRequest.model_id)
  
  return model_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteModelVersionsDeploymentRequest::set_allocated_model_id(std::string* model_id) {
  if (model_id != nullptr) {
    
  } else {
    
  }
  model_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteModelVersionsDeploymentRequest.model_id)
}

// repeated string version_ids = 3;
inline int DeleteModelVersionsDeploymentRequest::_internal_version_ids_size() const {
  return version_ids_.size();
}
inline int DeleteModelVersionsDeploymentRequest::version_ids_size() const {
  return _internal_version_ids_size();
}
inline void DeleteModelVersionsDeploymentRequest::clear_version_ids() {
  version_ids_.Clear();
}
inline std::string* DeleteModelVersionsDeploymentRequest::add_version_ids() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.DeleteModelVersionsDeploymentRequest.version_ids)
  return _internal_add_version_ids();
}
inline const std::string& DeleteModelVersionsDeploymentRequest::_internal_version_ids(int index) const {
  return version_ids_.Get(index);
}
inline const std::string& DeleteModelVersionsDeploymentRequest::version_ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteModelVersionsDeploymentRequest.version_ids)
  return _internal_version_ids(index);
}
inline std::string* DeleteModelVersionsDeploymentRequest::mutable_version_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteModelVersionsDeploymentRequest.version_ids)
  return version_ids_.Mutable(index);
}
inline void DeleteModelVersionsDeploymentRequest::set_version_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteModelVersionsDeploymentRequest.version_ids)
  version_ids_.Mutable(index)->assign(value);
}
inline void DeleteModelVersionsDeploymentRequest::set_version_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteModelVersionsDeploymentRequest.version_ids)
  version_ids_.Mutable(index)->assign(std::move(value));
}
inline void DeleteModelVersionsDeploymentRequest::set_version_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  version_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.DeleteModelVersionsDeploymentRequest.version_ids)
}
inline void DeleteModelVersionsDeploymentRequest::set_version_ids(int index, const char* value, size_t size) {
  version_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.DeleteModelVersionsDeploymentRequest.version_ids)
}
inline std::string* DeleteModelVersionsDeploymentRequest::_internal_add_version_ids() {
  return version_ids_.Add();
}
inline void DeleteModelVersionsDeploymentRequest::add_version_ids(const std::string& value) {
  version_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.DeleteModelVersionsDeploymentRequest.version_ids)
}
inline void DeleteModelVersionsDeploymentRequest::add_version_ids(std::string&& value) {
  version_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.DeleteModelVersionsDeploymentRequest.version_ids)
}
inline void DeleteModelVersionsDeploymentRequest::add_version_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  version_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.DeleteModelVersionsDeploymentRequest.version_ids)
}
inline void DeleteModelVersionsDeploymentRequest::add_version_ids(const char* value, size_t size) {
  version_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.DeleteModelVersionsDeploymentRequest.version_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeleteModelVersionsDeploymentRequest::version_ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.DeleteModelVersionsDeploymentRequest.version_ids)
  return version_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeleteModelVersionsDeploymentRequest::mutable_version_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.DeleteModelVersionsDeploymentRequest.version_ids)
  return &version_ids_;
}

// -------------------------------------------------------------------

// GetModelVersionMetricsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool GetModelVersionMetricsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool GetModelVersionMetricsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& GetModelVersionMetricsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& GetModelVersionMetricsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetModelVersionMetricsRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* GetModelVersionMetricsRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetModelVersionMetricsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetModelVersionMetricsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* GetModelVersionMetricsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetModelVersionMetricsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void GetModelVersionMetricsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetModelVersionMetricsRequest.user_app_id)
}

// string model_id = 2;
inline void GetModelVersionMetricsRequest::clear_model_id() {
  model_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetModelVersionMetricsRequest::model_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetModelVersionMetricsRequest.model_id)
  return _internal_model_id();
}
inline void GetModelVersionMetricsRequest::set_model_id(const std::string& value) {
  _internal_set_model_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.GetModelVersionMetricsRequest.model_id)
}
inline std::string* GetModelVersionMetricsRequest::mutable_model_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetModelVersionMetricsRequest.model_id)
  return _internal_mutable_model_id();
}
inline const std::string& GetModelVersionMetricsRequest::_internal_model_id() const {
  return model_id_.GetNoArena();
}
inline void GetModelVersionMetricsRequest::_internal_set_model_id(const std::string& value) {
  
  model_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetModelVersionMetricsRequest::set_model_id(std::string&& value) {
  
  model_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.GetModelVersionMetricsRequest.model_id)
}
inline void GetModelVersionMetricsRequest::set_model_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.GetModelVersionMetricsRequest.model_id)
}
inline void GetModelVersionMetricsRequest::set_model_id(const char* value, size_t size) {
  
  model_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.GetModelVersionMetricsRequest.model_id)
}
inline std::string* GetModelVersionMetricsRequest::_internal_mutable_model_id() {
  
  return model_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetModelVersionMetricsRequest::release_model_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetModelVersionMetricsRequest.model_id)
  
  return model_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetModelVersionMetricsRequest::set_allocated_model_id(std::string* model_id) {
  if (model_id != nullptr) {
    
  } else {
    
  }
  model_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetModelVersionMetricsRequest.model_id)
}

// string version_id = 3;
inline void GetModelVersionMetricsRequest::clear_version_id() {
  version_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetModelVersionMetricsRequest::version_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetModelVersionMetricsRequest.version_id)
  return _internal_version_id();
}
inline void GetModelVersionMetricsRequest::set_version_id(const std::string& value) {
  _internal_set_version_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.GetModelVersionMetricsRequest.version_id)
}
inline std::string* GetModelVersionMetricsRequest::mutable_version_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetModelVersionMetricsRequest.version_id)
  return _internal_mutable_version_id();
}
inline const std::string& GetModelVersionMetricsRequest::_internal_version_id() const {
  return version_id_.GetNoArena();
}
inline void GetModelVersionMetricsRequest::_internal_set_version_id(const std::string& value) {
  
  version_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetModelVersionMetricsRequest::set_version_id(std::string&& value) {
  
  version_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.GetModelVersionMetricsRequest.version_id)
}
inline void GetModelVersionMetricsRequest::set_version_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.GetModelVersionMetricsRequest.version_id)
}
inline void GetModelVersionMetricsRequest::set_version_id(const char* value, size_t size) {
  
  version_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.GetModelVersionMetricsRequest.version_id)
}
inline std::string* GetModelVersionMetricsRequest::_internal_mutable_version_id() {
  
  return version_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetModelVersionMetricsRequest::release_version_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetModelVersionMetricsRequest.version_id)
  
  return version_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetModelVersionMetricsRequest::set_allocated_version_id(std::string* version_id) {
  if (version_id != nullptr) {
    
  } else {
    
  }
  version_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetModelVersionMetricsRequest.version_id)
}

// .clarifai.api.FieldsValue fields = 4;
inline bool GetModelVersionMetricsRequest::_internal_has_fields() const {
  return this != internal_default_instance() && fields_ != nullptr;
}
inline bool GetModelVersionMetricsRequest::has_fields() const {
  return _internal_has_fields();
}
inline const ::clarifai::api::FieldsValue& GetModelVersionMetricsRequest::_internal_fields() const {
  const ::clarifai::api::FieldsValue* p = fields_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::FieldsValue*>(
      &::clarifai::api::_FieldsValue_default_instance_);
}
inline const ::clarifai::api::FieldsValue& GetModelVersionMetricsRequest::fields() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetModelVersionMetricsRequest.fields)
  return _internal_fields();
}
inline ::clarifai::api::FieldsValue* GetModelVersionMetricsRequest::release_fields() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetModelVersionMetricsRequest.fields)
  
  ::clarifai::api::FieldsValue* temp = fields_;
  fields_ = nullptr;
  return temp;
}
inline ::clarifai::api::FieldsValue* GetModelVersionMetricsRequest::_internal_mutable_fields() {
  
  if (fields_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::FieldsValue>(GetArenaNoVirtual());
    fields_ = p;
  }
  return fields_;
}
inline ::clarifai::api::FieldsValue* GetModelVersionMetricsRequest::mutable_fields() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetModelVersionMetricsRequest.fields)
  return _internal_mutable_fields();
}
inline void GetModelVersionMetricsRequest::set_allocated_fields(::clarifai::api::FieldsValue* fields) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fields_);
  }
  if (fields) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fields = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fields, submessage_arena);
    }
    
  } else {
    
  }
  fields_ = fields;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetModelVersionMetricsRequest.fields)
}

// -------------------------------------------------------------------

// MultiOutputResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiOutputResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiOutputResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiOutputResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiOutputResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiOutputResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* MultiOutputResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiOutputResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiOutputResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiOutputResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiOutputResponse.status)
  return _internal_mutable_status();
}
inline void MultiOutputResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiOutputResponse.status)
}

// repeated .clarifai.api.Output outputs = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int MultiOutputResponse::_internal_outputs_size() const {
  return outputs_.size();
}
inline int MultiOutputResponse::outputs_size() const {
  return _internal_outputs_size();
}
inline ::clarifai::api::Output* MultiOutputResponse::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiOutputResponse.outputs)
  return outputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Output >*
MultiOutputResponse::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiOutputResponse.outputs)
  return &outputs_;
}
inline const ::clarifai::api::Output& MultiOutputResponse::_internal_outputs(int index) const {
  return outputs_.Get(index);
}
inline const ::clarifai::api::Output& MultiOutputResponse::outputs(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiOutputResponse.outputs)
  return _internal_outputs(index);
}
inline ::clarifai::api::Output* MultiOutputResponse::_internal_add_outputs() {
  return outputs_.Add();
}
inline ::clarifai::api::Output* MultiOutputResponse::add_outputs() {
  // @@protoc_insertion_point(field_add:clarifai.api.MultiOutputResponse.outputs)
  return _internal_add_outputs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Output >&
MultiOutputResponse::outputs() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiOutputResponse.outputs)
  return outputs_;
}

// -------------------------------------------------------------------

// ListScopesRequest

// string key_type = 1;
inline void ListScopesRequest::clear_key_type() {
  key_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ListScopesRequest::key_type() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListScopesRequest.key_type)
  return _internal_key_type();
}
inline void ListScopesRequest::set_key_type(const std::string& value) {
  _internal_set_key_type(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListScopesRequest.key_type)
}
inline std::string* ListScopesRequest::mutable_key_type() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListScopesRequest.key_type)
  return _internal_mutable_key_type();
}
inline const std::string& ListScopesRequest::_internal_key_type() const {
  return key_type_.GetNoArena();
}
inline void ListScopesRequest::_internal_set_key_type(const std::string& value) {
  
  key_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ListScopesRequest::set_key_type(std::string&& value) {
  
  key_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ListScopesRequest.key_type)
}
inline void ListScopesRequest::set_key_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.ListScopesRequest.key_type)
}
inline void ListScopesRequest::set_key_type(const char* value, size_t size) {
  
  key_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ListScopesRequest.key_type)
}
inline std::string* ListScopesRequest::_internal_mutable_key_type() {
  
  return key_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ListScopesRequest::release_key_type() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListScopesRequest.key_type)
  
  return key_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ListScopesRequest::set_allocated_key_type(std::string* key_type) {
  if (key_type != nullptr) {
    
  } else {
    
  }
  key_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key_type);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListScopesRequest.key_type)
}

// -------------------------------------------------------------------

// MyScopesRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool MyScopesRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool MyScopesRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& MyScopesRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& MyScopesRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MyScopesRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* MyScopesRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.MyScopesRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* MyScopesRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* MyScopesRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MyScopesRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void MyScopesRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MyScopesRequest.user_app_id)
}

// -------------------------------------------------------------------

// MultiScopeDepsResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiScopeDepsResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiScopeDepsResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiScopeDepsResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiScopeDepsResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiScopeDepsResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* MultiScopeDepsResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiScopeDepsResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiScopeDepsResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiScopeDepsResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiScopeDepsResponse.status)
  return _internal_mutable_status();
}
inline void MultiScopeDepsResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiScopeDepsResponse.status)
}

// repeated .clarifai.api.ScopeDeps scope_deps = 2;
inline int MultiScopeDepsResponse::_internal_scope_deps_size() const {
  return scope_deps_.size();
}
inline int MultiScopeDepsResponse::scope_deps_size() const {
  return _internal_scope_deps_size();
}
inline ::clarifai::api::ScopeDeps* MultiScopeDepsResponse::mutable_scope_deps(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiScopeDepsResponse.scope_deps)
  return scope_deps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ScopeDeps >*
MultiScopeDepsResponse::mutable_scope_deps() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiScopeDepsResponse.scope_deps)
  return &scope_deps_;
}
inline const ::clarifai::api::ScopeDeps& MultiScopeDepsResponse::_internal_scope_deps(int index) const {
  return scope_deps_.Get(index);
}
inline const ::clarifai::api::ScopeDeps& MultiScopeDepsResponse::scope_deps(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiScopeDepsResponse.scope_deps)
  return _internal_scope_deps(index);
}
inline ::clarifai::api::ScopeDeps* MultiScopeDepsResponse::_internal_add_scope_deps() {
  return scope_deps_.Add();
}
inline ::clarifai::api::ScopeDeps* MultiScopeDepsResponse::add_scope_deps() {
  // @@protoc_insertion_point(field_add:clarifai.api.MultiScopeDepsResponse.scope_deps)
  return _internal_add_scope_deps();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ScopeDeps >&
MultiScopeDepsResponse::scope_deps() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiScopeDepsResponse.scope_deps)
  return scope_deps_;
}

// repeated .clarifai.api.EndpointDeps endpoint_deps = 3;
inline int MultiScopeDepsResponse::_internal_endpoint_deps_size() const {
  return endpoint_deps_.size();
}
inline int MultiScopeDepsResponse::endpoint_deps_size() const {
  return _internal_endpoint_deps_size();
}
inline ::clarifai::api::EndpointDeps* MultiScopeDepsResponse::mutable_endpoint_deps(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiScopeDepsResponse.endpoint_deps)
  return endpoint_deps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::EndpointDeps >*
MultiScopeDepsResponse::mutable_endpoint_deps() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiScopeDepsResponse.endpoint_deps)
  return &endpoint_deps_;
}
inline const ::clarifai::api::EndpointDeps& MultiScopeDepsResponse::_internal_endpoint_deps(int index) const {
  return endpoint_deps_.Get(index);
}
inline const ::clarifai::api::EndpointDeps& MultiScopeDepsResponse::endpoint_deps(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiScopeDepsResponse.endpoint_deps)
  return _internal_endpoint_deps(index);
}
inline ::clarifai::api::EndpointDeps* MultiScopeDepsResponse::_internal_add_endpoint_deps() {
  return endpoint_deps_.Add();
}
inline ::clarifai::api::EndpointDeps* MultiScopeDepsResponse::add_endpoint_deps() {
  // @@protoc_insertion_point(field_add:clarifai.api.MultiScopeDepsResponse.endpoint_deps)
  return _internal_add_endpoint_deps();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::EndpointDeps >&
MultiScopeDepsResponse::endpoint_deps() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiScopeDepsResponse.endpoint_deps)
  return endpoint_deps_;
}

// -------------------------------------------------------------------

// MultiScopeResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiScopeResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiScopeResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiScopeResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiScopeResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiScopeResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* MultiScopeResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiScopeResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiScopeResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiScopeResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiScopeResponse.status)
  return _internal_mutable_status();
}
inline void MultiScopeResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiScopeResponse.status)
}

// repeated string scopes = 2;
inline int MultiScopeResponse::_internal_scopes_size() const {
  return scopes_.size();
}
inline int MultiScopeResponse::scopes_size() const {
  return _internal_scopes_size();
}
inline void MultiScopeResponse::clear_scopes() {
  scopes_.Clear();
}
inline std::string* MultiScopeResponse::add_scopes() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.MultiScopeResponse.scopes)
  return _internal_add_scopes();
}
inline const std::string& MultiScopeResponse::_internal_scopes(int index) const {
  return scopes_.Get(index);
}
inline const std::string& MultiScopeResponse::scopes(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiScopeResponse.scopes)
  return _internal_scopes(index);
}
inline std::string* MultiScopeResponse::mutable_scopes(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiScopeResponse.scopes)
  return scopes_.Mutable(index);
}
inline void MultiScopeResponse::set_scopes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.MultiScopeResponse.scopes)
  scopes_.Mutable(index)->assign(value);
}
inline void MultiScopeResponse::set_scopes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.MultiScopeResponse.scopes)
  scopes_.Mutable(index)->assign(std::move(value));
}
inline void MultiScopeResponse::set_scopes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  scopes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.MultiScopeResponse.scopes)
}
inline void MultiScopeResponse::set_scopes(int index, const char* value, size_t size) {
  scopes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.MultiScopeResponse.scopes)
}
inline std::string* MultiScopeResponse::_internal_add_scopes() {
  return scopes_.Add();
}
inline void MultiScopeResponse::add_scopes(const std::string& value) {
  scopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.MultiScopeResponse.scopes)
}
inline void MultiScopeResponse::add_scopes(std::string&& value) {
  scopes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.MultiScopeResponse.scopes)
}
inline void MultiScopeResponse::add_scopes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  scopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.MultiScopeResponse.scopes)
}
inline void MultiScopeResponse::add_scopes(const char* value, size_t size) {
  scopes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.MultiScopeResponse.scopes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MultiScopeResponse::scopes() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiScopeResponse.scopes)
  return scopes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MultiScopeResponse::mutable_scopes() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiScopeResponse.scopes)
  return &scopes_;
}

// .clarifai.api.App app = 3;
inline bool MultiScopeResponse::_internal_has_app() const {
  return this != internal_default_instance() && app_ != nullptr;
}
inline bool MultiScopeResponse::has_app() const {
  return _internal_has_app();
}
inline const ::clarifai::api::App& MultiScopeResponse::_internal_app() const {
  const ::clarifai::api::App* p = app_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::App*>(
      &::clarifai::api::_App_default_instance_);
}
inline const ::clarifai::api::App& MultiScopeResponse::app() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiScopeResponse.app)
  return _internal_app();
}
inline ::clarifai::api::App* MultiScopeResponse::release_app() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiScopeResponse.app)
  
  ::clarifai::api::App* temp = app_;
  app_ = nullptr;
  return temp;
}
inline ::clarifai::api::App* MultiScopeResponse::_internal_mutable_app() {
  
  if (app_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::App>(GetArenaNoVirtual());
    app_ = p;
  }
  return app_;
}
inline ::clarifai::api::App* MultiScopeResponse::mutable_app() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiScopeResponse.app)
  return _internal_mutable_app();
}
inline void MultiScopeResponse::set_allocated_app(::clarifai::api::App* app) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(app_);
  }
  if (app) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      app = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, app, submessage_arena);
    }
    
  } else {
    
  }
  app_ = app;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiScopeResponse.app)
}

// repeated string endpoints = 4;
inline int MultiScopeResponse::_internal_endpoints_size() const {
  return endpoints_.size();
}
inline int MultiScopeResponse::endpoints_size() const {
  return _internal_endpoints_size();
}
inline void MultiScopeResponse::clear_endpoints() {
  endpoints_.Clear();
}
inline std::string* MultiScopeResponse::add_endpoints() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.MultiScopeResponse.endpoints)
  return _internal_add_endpoints();
}
inline const std::string& MultiScopeResponse::_internal_endpoints(int index) const {
  return endpoints_.Get(index);
}
inline const std::string& MultiScopeResponse::endpoints(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiScopeResponse.endpoints)
  return _internal_endpoints(index);
}
inline std::string* MultiScopeResponse::mutable_endpoints(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiScopeResponse.endpoints)
  return endpoints_.Mutable(index);
}
inline void MultiScopeResponse::set_endpoints(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.MultiScopeResponse.endpoints)
  endpoints_.Mutable(index)->assign(value);
}
inline void MultiScopeResponse::set_endpoints(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.MultiScopeResponse.endpoints)
  endpoints_.Mutable(index)->assign(std::move(value));
}
inline void MultiScopeResponse::set_endpoints(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  endpoints_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.MultiScopeResponse.endpoints)
}
inline void MultiScopeResponse::set_endpoints(int index, const char* value, size_t size) {
  endpoints_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.MultiScopeResponse.endpoints)
}
inline std::string* MultiScopeResponse::_internal_add_endpoints() {
  return endpoints_.Add();
}
inline void MultiScopeResponse::add_endpoints(const std::string& value) {
  endpoints_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.MultiScopeResponse.endpoints)
}
inline void MultiScopeResponse::add_endpoints(std::string&& value) {
  endpoints_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.MultiScopeResponse.endpoints)
}
inline void MultiScopeResponse::add_endpoints(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  endpoints_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.MultiScopeResponse.endpoints)
}
inline void MultiScopeResponse::add_endpoints(const char* value, size_t size) {
  endpoints_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.MultiScopeResponse.endpoints)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MultiScopeResponse::endpoints() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiScopeResponse.endpoints)
  return endpoints_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MultiScopeResponse::mutable_endpoints() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiScopeResponse.endpoints)
  return &endpoints_;
}

// -------------------------------------------------------------------

// GetSearchRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool GetSearchRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool GetSearchRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& GetSearchRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& GetSearchRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetSearchRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* GetSearchRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetSearchRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetSearchRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* GetSearchRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetSearchRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void GetSearchRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetSearchRequest.user_app_id)
}

// string id = 2;
inline void GetSearchRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetSearchRequest::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetSearchRequest.id)
  return _internal_id();
}
inline void GetSearchRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.GetSearchRequest.id)
}
inline std::string* GetSearchRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetSearchRequest.id)
  return _internal_mutable_id();
}
inline const std::string& GetSearchRequest::_internal_id() const {
  return id_.GetNoArena();
}
inline void GetSearchRequest::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetSearchRequest::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.GetSearchRequest.id)
}
inline void GetSearchRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.GetSearchRequest.id)
}
inline void GetSearchRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.GetSearchRequest.id)
}
inline std::string* GetSearchRequest::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetSearchRequest::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetSearchRequest.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetSearchRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetSearchRequest.id)
}

// -------------------------------------------------------------------

// ListSearchesRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool ListSearchesRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool ListSearchesRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& ListSearchesRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& ListSearchesRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListSearchesRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* ListSearchesRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListSearchesRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListSearchesRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* ListSearchesRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListSearchesRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void ListSearchesRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListSearchesRequest.user_app_id)
}

// uint32 page = 2;
inline void ListSearchesRequest::clear_page() {
  page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListSearchesRequest::_internal_page() const {
  return page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListSearchesRequest::page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListSearchesRequest.page)
  return _internal_page();
}
inline void ListSearchesRequest::_internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  page_ = value;
}
inline void ListSearchesRequest::set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListSearchesRequest.page)
}

// uint32 per_page = 3;
inline void ListSearchesRequest::clear_per_page() {
  per_page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListSearchesRequest::_internal_per_page() const {
  return per_page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListSearchesRequest::per_page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListSearchesRequest.per_page)
  return _internal_per_page();
}
inline void ListSearchesRequest::_internal_set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  per_page_ = value;
}
inline void ListSearchesRequest::set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_per_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListSearchesRequest.per_page)
}

// -------------------------------------------------------------------

// PostSearchesRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostSearchesRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostSearchesRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostSearchesRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostSearchesRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostSearchesRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* PostSearchesRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostSearchesRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostSearchesRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostSearchesRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostSearchesRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void PostSearchesRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostSearchesRequest.user_app_id)
}

// .clarifai.api.Query query = 2 [deprecated = true];
inline bool PostSearchesRequest::_internal_has_query() const {
  return this != internal_default_instance() && query_ != nullptr;
}
inline bool PostSearchesRequest::has_query() const {
  return _internal_has_query();
}
inline const ::clarifai::api::Query& PostSearchesRequest::_internal_query() const {
  const ::clarifai::api::Query* p = query_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Query*>(
      &::clarifai::api::_Query_default_instance_);
}
inline const ::clarifai::api::Query& PostSearchesRequest::query() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostSearchesRequest.query)
  return _internal_query();
}
inline ::clarifai::api::Query* PostSearchesRequest::release_query() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostSearchesRequest.query)
  
  ::clarifai::api::Query* temp = query_;
  query_ = nullptr;
  return temp;
}
inline ::clarifai::api::Query* PostSearchesRequest::_internal_mutable_query() {
  
  if (query_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Query>(GetArenaNoVirtual());
    query_ = p;
  }
  return query_;
}
inline ::clarifai::api::Query* PostSearchesRequest::mutable_query() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostSearchesRequest.query)
  return _internal_mutable_query();
}
inline void PostSearchesRequest::set_allocated_query(::clarifai::api::Query* query) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(query_);
  }
  if (query) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      query = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query, submessage_arena);
    }
    
  } else {
    
  }
  query_ = query;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostSearchesRequest.query)
}

// repeated .clarifai.api.Search searches = 3;
inline int PostSearchesRequest::_internal_searches_size() const {
  return searches_.size();
}
inline int PostSearchesRequest::searches_size() const {
  return _internal_searches_size();
}
inline ::clarifai::api::Search* PostSearchesRequest::mutable_searches(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostSearchesRequest.searches)
  return searches_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search >*
PostSearchesRequest::mutable_searches() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostSearchesRequest.searches)
  return &searches_;
}
inline const ::clarifai::api::Search& PostSearchesRequest::_internal_searches(int index) const {
  return searches_.Get(index);
}
inline const ::clarifai::api::Search& PostSearchesRequest::searches(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostSearchesRequest.searches)
  return _internal_searches(index);
}
inline ::clarifai::api::Search* PostSearchesRequest::_internal_add_searches() {
  return searches_.Add();
}
inline ::clarifai::api::Search* PostSearchesRequest::add_searches() {
  // @@protoc_insertion_point(field_add:clarifai.api.PostSearchesRequest.searches)
  return _internal_add_searches();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search >&
PostSearchesRequest::searches() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostSearchesRequest.searches)
  return searches_;
}

// .clarifai.api.Pagination pagination = 4;
inline bool PostSearchesRequest::_internal_has_pagination() const {
  return this != internal_default_instance() && pagination_ != nullptr;
}
inline bool PostSearchesRequest::has_pagination() const {
  return _internal_has_pagination();
}
inline void PostSearchesRequest::clear_pagination() {
  if (GetArenaNoVirtual() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
}
inline const ::clarifai::api::Pagination& PostSearchesRequest::_internal_pagination() const {
  const ::clarifai::api::Pagination* p = pagination_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Pagination*>(
      &::clarifai::api::_Pagination_default_instance_);
}
inline const ::clarifai::api::Pagination& PostSearchesRequest::pagination() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostSearchesRequest.pagination)
  return _internal_pagination();
}
inline ::clarifai::api::Pagination* PostSearchesRequest::release_pagination() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostSearchesRequest.pagination)
  
  ::clarifai::api::Pagination* temp = pagination_;
  pagination_ = nullptr;
  return temp;
}
inline ::clarifai::api::Pagination* PostSearchesRequest::_internal_mutable_pagination() {
  
  if (pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Pagination>(GetArenaNoVirtual());
    pagination_ = p;
  }
  return pagination_;
}
inline ::clarifai::api::Pagination* PostSearchesRequest::mutable_pagination() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostSearchesRequest.pagination)
  return _internal_mutable_pagination();
}
inline void PostSearchesRequest::set_allocated_pagination(::clarifai::api::Pagination* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pagination_;
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    
  } else {
    
  }
  pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostSearchesRequest.pagination)
}

// -------------------------------------------------------------------

// PostSearchesByIDRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostSearchesByIDRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostSearchesByIDRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostSearchesByIDRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostSearchesByIDRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostSearchesByIDRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* PostSearchesByIDRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostSearchesByIDRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostSearchesByIDRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostSearchesByIDRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostSearchesByIDRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void PostSearchesByIDRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostSearchesByIDRequest.user_app_id)
}

// string id = 2;
inline void PostSearchesByIDRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PostSearchesByIDRequest::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostSearchesByIDRequest.id)
  return _internal_id();
}
inline void PostSearchesByIDRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PostSearchesByIDRequest.id)
}
inline std::string* PostSearchesByIDRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostSearchesByIDRequest.id)
  return _internal_mutable_id();
}
inline const std::string& PostSearchesByIDRequest::_internal_id() const {
  return id_.GetNoArena();
}
inline void PostSearchesByIDRequest::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PostSearchesByIDRequest::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.PostSearchesByIDRequest.id)
}
inline void PostSearchesByIDRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.PostSearchesByIDRequest.id)
}
inline void PostSearchesByIDRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PostSearchesByIDRequest.id)
}
inline std::string* PostSearchesByIDRequest::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PostSearchesByIDRequest::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostSearchesByIDRequest.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PostSearchesByIDRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostSearchesByIDRequest.id)
}

// .clarifai.api.Pagination pagination = 3;
inline bool PostSearchesByIDRequest::_internal_has_pagination() const {
  return this != internal_default_instance() && pagination_ != nullptr;
}
inline bool PostSearchesByIDRequest::has_pagination() const {
  return _internal_has_pagination();
}
inline void PostSearchesByIDRequest::clear_pagination() {
  if (GetArenaNoVirtual() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
}
inline const ::clarifai::api::Pagination& PostSearchesByIDRequest::_internal_pagination() const {
  const ::clarifai::api::Pagination* p = pagination_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Pagination*>(
      &::clarifai::api::_Pagination_default_instance_);
}
inline const ::clarifai::api::Pagination& PostSearchesByIDRequest::pagination() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostSearchesByIDRequest.pagination)
  return _internal_pagination();
}
inline ::clarifai::api::Pagination* PostSearchesByIDRequest::release_pagination() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostSearchesByIDRequest.pagination)
  
  ::clarifai::api::Pagination* temp = pagination_;
  pagination_ = nullptr;
  return temp;
}
inline ::clarifai::api::Pagination* PostSearchesByIDRequest::_internal_mutable_pagination() {
  
  if (pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Pagination>(GetArenaNoVirtual());
    pagination_ = p;
  }
  return pagination_;
}
inline ::clarifai::api::Pagination* PostSearchesByIDRequest::mutable_pagination() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostSearchesByIDRequest.pagination)
  return _internal_mutable_pagination();
}
inline void PostSearchesByIDRequest::set_allocated_pagination(::clarifai::api::Pagination* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pagination_;
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    
  } else {
    
  }
  pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostSearchesByIDRequest.pagination)
}

// -------------------------------------------------------------------

// DeleteSearchRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool DeleteSearchRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool DeleteSearchRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& DeleteSearchRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& DeleteSearchRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteSearchRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* DeleteSearchRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteSearchRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteSearchRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* DeleteSearchRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteSearchRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void DeleteSearchRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteSearchRequest.user_app_id)
}

// string id = 2;
inline void DeleteSearchRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeleteSearchRequest::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteSearchRequest.id)
  return _internal_id();
}
inline void DeleteSearchRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteSearchRequest.id)
}
inline std::string* DeleteSearchRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteSearchRequest.id)
  return _internal_mutable_id();
}
inline const std::string& DeleteSearchRequest::_internal_id() const {
  return id_.GetNoArena();
}
inline void DeleteSearchRequest::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DeleteSearchRequest::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.DeleteSearchRequest.id)
}
inline void DeleteSearchRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.DeleteSearchRequest.id)
}
inline void DeleteSearchRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.DeleteSearchRequest.id)
}
inline std::string* DeleteSearchRequest::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeleteSearchRequest::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteSearchRequest.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteSearchRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteSearchRequest.id)
}

// -------------------------------------------------------------------

// PostAttributeSearchRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostAttributeSearchRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostAttributeSearchRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostAttributeSearchRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostAttributeSearchRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostAttributeSearchRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* PostAttributeSearchRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostAttributeSearchRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostAttributeSearchRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostAttributeSearchRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostAttributeSearchRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void PostAttributeSearchRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostAttributeSearchRequest.user_app_id)
}

// .clarifai.api.Pagination pagination = 3;
inline bool PostAttributeSearchRequest::_internal_has_pagination() const {
  return this != internal_default_instance() && pagination_ != nullptr;
}
inline bool PostAttributeSearchRequest::has_pagination() const {
  return _internal_has_pagination();
}
inline void PostAttributeSearchRequest::clear_pagination() {
  if (GetArenaNoVirtual() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
}
inline const ::clarifai::api::Pagination& PostAttributeSearchRequest::_internal_pagination() const {
  const ::clarifai::api::Pagination* p = pagination_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Pagination*>(
      &::clarifai::api::_Pagination_default_instance_);
}
inline const ::clarifai::api::Pagination& PostAttributeSearchRequest::pagination() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostAttributeSearchRequest.pagination)
  return _internal_pagination();
}
inline ::clarifai::api::Pagination* PostAttributeSearchRequest::release_pagination() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostAttributeSearchRequest.pagination)
  
  ::clarifai::api::Pagination* temp = pagination_;
  pagination_ = nullptr;
  return temp;
}
inline ::clarifai::api::Pagination* PostAttributeSearchRequest::_internal_mutable_pagination() {
  
  if (pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Pagination>(GetArenaNoVirtual());
    pagination_ = p;
  }
  return pagination_;
}
inline ::clarifai::api::Pagination* PostAttributeSearchRequest::mutable_pagination() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostAttributeSearchRequest.pagination)
  return _internal_mutable_pagination();
}
inline void PostAttributeSearchRequest::set_allocated_pagination(::clarifai::api::Pagination* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pagination_;
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    
  } else {
    
  }
  pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostAttributeSearchRequest.pagination)
}

// bool brute_force = 4;
inline void PostAttributeSearchRequest::clear_brute_force() {
  brute_force_ = false;
}
inline bool PostAttributeSearchRequest::_internal_brute_force() const {
  return brute_force_;
}
inline bool PostAttributeSearchRequest::brute_force() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostAttributeSearchRequest.brute_force)
  return _internal_brute_force();
}
inline void PostAttributeSearchRequest::_internal_set_brute_force(bool value) {
  
  brute_force_ = value;
}
inline void PostAttributeSearchRequest::set_brute_force(bool value) {
  _internal_set_brute_force(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PostAttributeSearchRequest.brute_force)
}

// .clarifai.api.AttributeQuery attribute_query = 5;
inline bool PostAttributeSearchRequest::_internal_has_attribute_query() const {
  return this != internal_default_instance() && attribute_query_ != nullptr;
}
inline bool PostAttributeSearchRequest::has_attribute_query() const {
  return _internal_has_attribute_query();
}
inline const ::clarifai::api::AttributeQuery& PostAttributeSearchRequest::_internal_attribute_query() const {
  const ::clarifai::api::AttributeQuery* p = attribute_query_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::AttributeQuery*>(
      &::clarifai::api::_AttributeQuery_default_instance_);
}
inline const ::clarifai::api::AttributeQuery& PostAttributeSearchRequest::attribute_query() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostAttributeSearchRequest.attribute_query)
  return _internal_attribute_query();
}
inline ::clarifai::api::AttributeQuery* PostAttributeSearchRequest::release_attribute_query() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostAttributeSearchRequest.attribute_query)
  
  ::clarifai::api::AttributeQuery* temp = attribute_query_;
  attribute_query_ = nullptr;
  return temp;
}
inline ::clarifai::api::AttributeQuery* PostAttributeSearchRequest::_internal_mutable_attribute_query() {
  
  if (attribute_query_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::AttributeQuery>(GetArenaNoVirtual());
    attribute_query_ = p;
  }
  return attribute_query_;
}
inline ::clarifai::api::AttributeQuery* PostAttributeSearchRequest::mutable_attribute_query() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostAttributeSearchRequest.attribute_query)
  return _internal_mutable_attribute_query();
}
inline void PostAttributeSearchRequest::set_allocated_attribute_query(::clarifai::api::AttributeQuery* attribute_query) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(attribute_query_);
  }
  if (attribute_query) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      attribute_query = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attribute_query, submessage_arena);
    }
    
  } else {
    
  }
  attribute_query_ = attribute_query;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostAttributeSearchRequest.attribute_query)
}

// float min_value = 6;
inline void PostAttributeSearchRequest::clear_min_value() {
  min_value_ = 0;
}
inline float PostAttributeSearchRequest::_internal_min_value() const {
  return min_value_;
}
inline float PostAttributeSearchRequest::min_value() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostAttributeSearchRequest.min_value)
  return _internal_min_value();
}
inline void PostAttributeSearchRequest::_internal_set_min_value(float value) {
  
  min_value_ = value;
}
inline void PostAttributeSearchRequest::set_min_value(float value) {
  _internal_set_min_value(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PostAttributeSearchRequest.min_value)
}

// -------------------------------------------------------------------

// PostAnnotationsSearchesRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostAnnotationsSearchesRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostAnnotationsSearchesRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostAnnotationsSearchesRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostAnnotationsSearchesRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostAnnotationsSearchesRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* PostAnnotationsSearchesRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostAnnotationsSearchesRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostAnnotationsSearchesRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostAnnotationsSearchesRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostAnnotationsSearchesRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void PostAnnotationsSearchesRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostAnnotationsSearchesRequest.user_app_id)
}

// repeated .clarifai.api.Search searches = 2;
inline int PostAnnotationsSearchesRequest::_internal_searches_size() const {
  return searches_.size();
}
inline int PostAnnotationsSearchesRequest::searches_size() const {
  return _internal_searches_size();
}
inline ::clarifai::api::Search* PostAnnotationsSearchesRequest::mutable_searches(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostAnnotationsSearchesRequest.searches)
  return searches_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search >*
PostAnnotationsSearchesRequest::mutable_searches() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostAnnotationsSearchesRequest.searches)
  return &searches_;
}
inline const ::clarifai::api::Search& PostAnnotationsSearchesRequest::_internal_searches(int index) const {
  return searches_.Get(index);
}
inline const ::clarifai::api::Search& PostAnnotationsSearchesRequest::searches(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostAnnotationsSearchesRequest.searches)
  return _internal_searches(index);
}
inline ::clarifai::api::Search* PostAnnotationsSearchesRequest::_internal_add_searches() {
  return searches_.Add();
}
inline ::clarifai::api::Search* PostAnnotationsSearchesRequest::add_searches() {
  // @@protoc_insertion_point(field_add:clarifai.api.PostAnnotationsSearchesRequest.searches)
  return _internal_add_searches();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search >&
PostAnnotationsSearchesRequest::searches() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostAnnotationsSearchesRequest.searches)
  return searches_;
}

// .clarifai.api.Pagination pagination = 3;
inline bool PostAnnotationsSearchesRequest::_internal_has_pagination() const {
  return this != internal_default_instance() && pagination_ != nullptr;
}
inline bool PostAnnotationsSearchesRequest::has_pagination() const {
  return _internal_has_pagination();
}
inline void PostAnnotationsSearchesRequest::clear_pagination() {
  if (GetArenaNoVirtual() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
}
inline const ::clarifai::api::Pagination& PostAnnotationsSearchesRequest::_internal_pagination() const {
  const ::clarifai::api::Pagination* p = pagination_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Pagination*>(
      &::clarifai::api::_Pagination_default_instance_);
}
inline const ::clarifai::api::Pagination& PostAnnotationsSearchesRequest::pagination() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostAnnotationsSearchesRequest.pagination)
  return _internal_pagination();
}
inline ::clarifai::api::Pagination* PostAnnotationsSearchesRequest::release_pagination() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostAnnotationsSearchesRequest.pagination)
  
  ::clarifai::api::Pagination* temp = pagination_;
  pagination_ = nullptr;
  return temp;
}
inline ::clarifai::api::Pagination* PostAnnotationsSearchesRequest::_internal_mutable_pagination() {
  
  if (pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Pagination>(GetArenaNoVirtual());
    pagination_ = p;
  }
  return pagination_;
}
inline ::clarifai::api::Pagination* PostAnnotationsSearchesRequest::mutable_pagination() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostAnnotationsSearchesRequest.pagination)
  return _internal_mutable_pagination();
}
inline void PostAnnotationsSearchesRequest::set_allocated_pagination(::clarifai::api::Pagination* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pagination_;
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    
  } else {
    
  }
  pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostAnnotationsSearchesRequest.pagination)
}

// -------------------------------------------------------------------

// PostInputsSearchesRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostInputsSearchesRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostInputsSearchesRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostInputsSearchesRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostInputsSearchesRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostInputsSearchesRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* PostInputsSearchesRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostInputsSearchesRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostInputsSearchesRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostInputsSearchesRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostInputsSearchesRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void PostInputsSearchesRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostInputsSearchesRequest.user_app_id)
}

// repeated .clarifai.api.Search searches = 2;
inline int PostInputsSearchesRequest::_internal_searches_size() const {
  return searches_.size();
}
inline int PostInputsSearchesRequest::searches_size() const {
  return _internal_searches_size();
}
inline ::clarifai::api::Search* PostInputsSearchesRequest::mutable_searches(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostInputsSearchesRequest.searches)
  return searches_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search >*
PostInputsSearchesRequest::mutable_searches() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostInputsSearchesRequest.searches)
  return &searches_;
}
inline const ::clarifai::api::Search& PostInputsSearchesRequest::_internal_searches(int index) const {
  return searches_.Get(index);
}
inline const ::clarifai::api::Search& PostInputsSearchesRequest::searches(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostInputsSearchesRequest.searches)
  return _internal_searches(index);
}
inline ::clarifai::api::Search* PostInputsSearchesRequest::_internal_add_searches() {
  return searches_.Add();
}
inline ::clarifai::api::Search* PostInputsSearchesRequest::add_searches() {
  // @@protoc_insertion_point(field_add:clarifai.api.PostInputsSearchesRequest.searches)
  return _internal_add_searches();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search >&
PostInputsSearchesRequest::searches() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostInputsSearchesRequest.searches)
  return searches_;
}

// .clarifai.api.Pagination pagination = 3;
inline bool PostInputsSearchesRequest::_internal_has_pagination() const {
  return this != internal_default_instance() && pagination_ != nullptr;
}
inline bool PostInputsSearchesRequest::has_pagination() const {
  return _internal_has_pagination();
}
inline void PostInputsSearchesRequest::clear_pagination() {
  if (GetArenaNoVirtual() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
}
inline const ::clarifai::api::Pagination& PostInputsSearchesRequest::_internal_pagination() const {
  const ::clarifai::api::Pagination* p = pagination_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Pagination*>(
      &::clarifai::api::_Pagination_default_instance_);
}
inline const ::clarifai::api::Pagination& PostInputsSearchesRequest::pagination() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostInputsSearchesRequest.pagination)
  return _internal_pagination();
}
inline ::clarifai::api::Pagination* PostInputsSearchesRequest::release_pagination() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostInputsSearchesRequest.pagination)
  
  ::clarifai::api::Pagination* temp = pagination_;
  pagination_ = nullptr;
  return temp;
}
inline ::clarifai::api::Pagination* PostInputsSearchesRequest::_internal_mutable_pagination() {
  
  if (pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Pagination>(GetArenaNoVirtual());
    pagination_ = p;
  }
  return pagination_;
}
inline ::clarifai::api::Pagination* PostInputsSearchesRequest::mutable_pagination() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostInputsSearchesRequest.pagination)
  return _internal_mutable_pagination();
}
inline void PostInputsSearchesRequest::set_allocated_pagination(::clarifai::api::Pagination* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pagination_;
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    
  } else {
    
  }
  pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostInputsSearchesRequest.pagination)
}

// -------------------------------------------------------------------

// SingleSearchResponse

// .clarifai.api.status.Status status = 1;
inline bool SingleSearchResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SingleSearchResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& SingleSearchResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& SingleSearchResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleSearchResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* SingleSearchResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleSearchResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* SingleSearchResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* SingleSearchResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleSearchResponse.status)
  return _internal_mutable_status();
}
inline void SingleSearchResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleSearchResponse.status)
}

// .clarifai.api.Search search = 5;
inline bool SingleSearchResponse::_internal_has_search() const {
  return this != internal_default_instance() && search_ != nullptr;
}
inline bool SingleSearchResponse::has_search() const {
  return _internal_has_search();
}
inline const ::clarifai::api::Search& SingleSearchResponse::_internal_search() const {
  const ::clarifai::api::Search* p = search_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Search*>(
      &::clarifai::api::_Search_default_instance_);
}
inline const ::clarifai::api::Search& SingleSearchResponse::search() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleSearchResponse.search)
  return _internal_search();
}
inline ::clarifai::api::Search* SingleSearchResponse::release_search() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleSearchResponse.search)
  
  ::clarifai::api::Search* temp = search_;
  search_ = nullptr;
  return temp;
}
inline ::clarifai::api::Search* SingleSearchResponse::_internal_mutable_search() {
  
  if (search_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Search>(GetArenaNoVirtual());
    search_ = p;
  }
  return search_;
}
inline ::clarifai::api::Search* SingleSearchResponse::mutable_search() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleSearchResponse.search)
  return _internal_mutable_search();
}
inline void SingleSearchResponse::set_allocated_search(::clarifai::api::Search* search) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(search_);
  }
  if (search) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      search = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, search, submessage_arena);
    }
    
  } else {
    
  }
  search_ = search;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleSearchResponse.search)
}

// -------------------------------------------------------------------

// MultiSearchResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiSearchResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiSearchResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiSearchResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiSearchResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiSearchResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* MultiSearchResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiSearchResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiSearchResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiSearchResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiSearchResponse.status)
  return _internal_mutable_status();
}
inline void MultiSearchResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiSearchResponse.status)
}

// string id = 2;
inline void MultiSearchResponse::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MultiSearchResponse::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiSearchResponse.id)
  return _internal_id();
}
inline void MultiSearchResponse::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.MultiSearchResponse.id)
}
inline std::string* MultiSearchResponse::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiSearchResponse.id)
  return _internal_mutable_id();
}
inline const std::string& MultiSearchResponse::_internal_id() const {
  return id_.GetNoArena();
}
inline void MultiSearchResponse::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MultiSearchResponse::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.MultiSearchResponse.id)
}
inline void MultiSearchResponse::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.MultiSearchResponse.id)
}
inline void MultiSearchResponse::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.MultiSearchResponse.id)
}
inline std::string* MultiSearchResponse::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MultiSearchResponse::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiSearchResponse.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MultiSearchResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiSearchResponse.id)
}

// repeated .clarifai.api.Hit hits = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int MultiSearchResponse::_internal_hits_size() const {
  return hits_.size();
}
inline int MultiSearchResponse::hits_size() const {
  return _internal_hits_size();
}
inline ::clarifai::api::Hit* MultiSearchResponse::mutable_hits(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiSearchResponse.hits)
  return hits_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Hit >*
MultiSearchResponse::mutable_hits() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiSearchResponse.hits)
  return &hits_;
}
inline const ::clarifai::api::Hit& MultiSearchResponse::_internal_hits(int index) const {
  return hits_.Get(index);
}
inline const ::clarifai::api::Hit& MultiSearchResponse::hits(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiSearchResponse.hits)
  return _internal_hits(index);
}
inline ::clarifai::api::Hit* MultiSearchResponse::_internal_add_hits() {
  return hits_.Add();
}
inline ::clarifai::api::Hit* MultiSearchResponse::add_hits() {
  // @@protoc_insertion_point(field_add:clarifai.api.MultiSearchResponse.hits)
  return _internal_add_hits();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Hit >&
MultiSearchResponse::hits() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiSearchResponse.hits)
  return hits_;
}

// .clarifai.api.Query query = 4;
inline bool MultiSearchResponse::_internal_has_query() const {
  return this != internal_default_instance() && query_ != nullptr;
}
inline bool MultiSearchResponse::has_query() const {
  return _internal_has_query();
}
inline const ::clarifai::api::Query& MultiSearchResponse::_internal_query() const {
  const ::clarifai::api::Query* p = query_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Query*>(
      &::clarifai::api::_Query_default_instance_);
}
inline const ::clarifai::api::Query& MultiSearchResponse::query() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiSearchResponse.query)
  return _internal_query();
}
inline ::clarifai::api::Query* MultiSearchResponse::release_query() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiSearchResponse.query)
  
  ::clarifai::api::Query* temp = query_;
  query_ = nullptr;
  return temp;
}
inline ::clarifai::api::Query* MultiSearchResponse::_internal_mutable_query() {
  
  if (query_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Query>(GetArenaNoVirtual());
    query_ = p;
  }
  return query_;
}
inline ::clarifai::api::Query* MultiSearchResponse::mutable_query() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiSearchResponse.query)
  return _internal_mutable_query();
}
inline void MultiSearchResponse::set_allocated_query(::clarifai::api::Query* query) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(query_);
  }
  if (query) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      query = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query, submessage_arena);
    }
    
  } else {
    
  }
  query_ = query;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiSearchResponse.query)
}

// repeated .clarifai.api.Search searches = 5;
inline int MultiSearchResponse::_internal_searches_size() const {
  return searches_.size();
}
inline int MultiSearchResponse::searches_size() const {
  return _internal_searches_size();
}
inline ::clarifai::api::Search* MultiSearchResponse::mutable_searches(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiSearchResponse.searches)
  return searches_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search >*
MultiSearchResponse::mutable_searches() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiSearchResponse.searches)
  return &searches_;
}
inline const ::clarifai::api::Search& MultiSearchResponse::_internal_searches(int index) const {
  return searches_.Get(index);
}
inline const ::clarifai::api::Search& MultiSearchResponse::searches(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiSearchResponse.searches)
  return _internal_searches(index);
}
inline ::clarifai::api::Search* MultiSearchResponse::_internal_add_searches() {
  return searches_.Add();
}
inline ::clarifai::api::Search* MultiSearchResponse::add_searches() {
  // @@protoc_insertion_point(field_add:clarifai.api.MultiSearchResponse.searches)
  return _internal_add_searches();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search >&
MultiSearchResponse::searches() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiSearchResponse.searches)
  return searches_;
}

// -------------------------------------------------------------------

// PostAnnotationSearchMetricsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostAnnotationSearchMetricsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostAnnotationSearchMetricsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostAnnotationSearchMetricsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostAnnotationSearchMetricsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostAnnotationSearchMetricsRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* PostAnnotationSearchMetricsRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostAnnotationSearchMetricsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostAnnotationSearchMetricsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostAnnotationSearchMetricsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostAnnotationSearchMetricsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void PostAnnotationSearchMetricsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostAnnotationSearchMetricsRequest.user_app_id)
}

// string id = 2;
inline void PostAnnotationSearchMetricsRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PostAnnotationSearchMetricsRequest::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostAnnotationSearchMetricsRequest.id)
  return _internal_id();
}
inline void PostAnnotationSearchMetricsRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PostAnnotationSearchMetricsRequest.id)
}
inline std::string* PostAnnotationSearchMetricsRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostAnnotationSearchMetricsRequest.id)
  return _internal_mutable_id();
}
inline const std::string& PostAnnotationSearchMetricsRequest::_internal_id() const {
  return id_.GetNoArena();
}
inline void PostAnnotationSearchMetricsRequest::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PostAnnotationSearchMetricsRequest::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.PostAnnotationSearchMetricsRequest.id)
}
inline void PostAnnotationSearchMetricsRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.PostAnnotationSearchMetricsRequest.id)
}
inline void PostAnnotationSearchMetricsRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PostAnnotationSearchMetricsRequest.id)
}
inline std::string* PostAnnotationSearchMetricsRequest::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PostAnnotationSearchMetricsRequest::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostAnnotationSearchMetricsRequest.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PostAnnotationSearchMetricsRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostAnnotationSearchMetricsRequest.id)
}

// .clarifai.api.Search ground_truth = 3;
inline bool PostAnnotationSearchMetricsRequest::_internal_has_ground_truth() const {
  return this != internal_default_instance() && ground_truth_ != nullptr;
}
inline bool PostAnnotationSearchMetricsRequest::has_ground_truth() const {
  return _internal_has_ground_truth();
}
inline const ::clarifai::api::Search& PostAnnotationSearchMetricsRequest::_internal_ground_truth() const {
  const ::clarifai::api::Search* p = ground_truth_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Search*>(
      &::clarifai::api::_Search_default_instance_);
}
inline const ::clarifai::api::Search& PostAnnotationSearchMetricsRequest::ground_truth() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostAnnotationSearchMetricsRequest.ground_truth)
  return _internal_ground_truth();
}
inline ::clarifai::api::Search* PostAnnotationSearchMetricsRequest::release_ground_truth() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostAnnotationSearchMetricsRequest.ground_truth)
  
  ::clarifai::api::Search* temp = ground_truth_;
  ground_truth_ = nullptr;
  return temp;
}
inline ::clarifai::api::Search* PostAnnotationSearchMetricsRequest::_internal_mutable_ground_truth() {
  
  if (ground_truth_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Search>(GetArenaNoVirtual());
    ground_truth_ = p;
  }
  return ground_truth_;
}
inline ::clarifai::api::Search* PostAnnotationSearchMetricsRequest::mutable_ground_truth() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostAnnotationSearchMetricsRequest.ground_truth)
  return _internal_mutable_ground_truth();
}
inline void PostAnnotationSearchMetricsRequest::set_allocated_ground_truth(::clarifai::api::Search* ground_truth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ground_truth_);
  }
  if (ground_truth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ground_truth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ground_truth, submessage_arena);
    }
    
  } else {
    
  }
  ground_truth_ = ground_truth;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostAnnotationSearchMetricsRequest.ground_truth)
}

// .clarifai.api.Search search_to_eval = 4;
inline bool PostAnnotationSearchMetricsRequest::_internal_has_search_to_eval() const {
  return this != internal_default_instance() && search_to_eval_ != nullptr;
}
inline bool PostAnnotationSearchMetricsRequest::has_search_to_eval() const {
  return _internal_has_search_to_eval();
}
inline const ::clarifai::api::Search& PostAnnotationSearchMetricsRequest::_internal_search_to_eval() const {
  const ::clarifai::api::Search* p = search_to_eval_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Search*>(
      &::clarifai::api::_Search_default_instance_);
}
inline const ::clarifai::api::Search& PostAnnotationSearchMetricsRequest::search_to_eval() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostAnnotationSearchMetricsRequest.search_to_eval)
  return _internal_search_to_eval();
}
inline ::clarifai::api::Search* PostAnnotationSearchMetricsRequest::release_search_to_eval() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostAnnotationSearchMetricsRequest.search_to_eval)
  
  ::clarifai::api::Search* temp = search_to_eval_;
  search_to_eval_ = nullptr;
  return temp;
}
inline ::clarifai::api::Search* PostAnnotationSearchMetricsRequest::_internal_mutable_search_to_eval() {
  
  if (search_to_eval_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Search>(GetArenaNoVirtual());
    search_to_eval_ = p;
  }
  return search_to_eval_;
}
inline ::clarifai::api::Search* PostAnnotationSearchMetricsRequest::mutable_search_to_eval() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostAnnotationSearchMetricsRequest.search_to_eval)
  return _internal_mutable_search_to_eval();
}
inline void PostAnnotationSearchMetricsRequest::set_allocated_search_to_eval(::clarifai::api::Search* search_to_eval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(search_to_eval_);
  }
  if (search_to_eval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      search_to_eval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, search_to_eval, submessage_arena);
    }
    
  } else {
    
  }
  search_to_eval_ = search_to_eval;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostAnnotationSearchMetricsRequest.search_to_eval)
}

// .clarifai.api.Data data = 5;
inline bool PostAnnotationSearchMetricsRequest::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool PostAnnotationSearchMetricsRequest::has_data() const {
  return _internal_has_data();
}
inline const ::clarifai::api::Data& PostAnnotationSearchMetricsRequest::_internal_data() const {
  const ::clarifai::api::Data* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Data*>(
      &::clarifai::api::_Data_default_instance_);
}
inline const ::clarifai::api::Data& PostAnnotationSearchMetricsRequest::data() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostAnnotationSearchMetricsRequest.data)
  return _internal_data();
}
inline ::clarifai::api::Data* PostAnnotationSearchMetricsRequest::release_data() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostAnnotationSearchMetricsRequest.data)
  
  ::clarifai::api::Data* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::clarifai::api::Data* PostAnnotationSearchMetricsRequest::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Data>(GetArenaNoVirtual());
    data_ = p;
  }
  return data_;
}
inline ::clarifai::api::Data* PostAnnotationSearchMetricsRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostAnnotationSearchMetricsRequest.data)
  return _internal_mutable_data();
}
inline void PostAnnotationSearchMetricsRequest::set_allocated_data(::clarifai::api::Data* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostAnnotationSearchMetricsRequest.data)
}

// .clarifai.api.EvaluationType evaluation_type = 6;
inline void PostAnnotationSearchMetricsRequest::clear_evaluation_type() {
  evaluation_type_ = 0;
}
inline ::clarifai::api::EvaluationType PostAnnotationSearchMetricsRequest::_internal_evaluation_type() const {
  return static_cast< ::clarifai::api::EvaluationType >(evaluation_type_);
}
inline ::clarifai::api::EvaluationType PostAnnotationSearchMetricsRequest::evaluation_type() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostAnnotationSearchMetricsRequest.evaluation_type)
  return _internal_evaluation_type();
}
inline void PostAnnotationSearchMetricsRequest::_internal_set_evaluation_type(::clarifai::api::EvaluationType value) {
  
  evaluation_type_ = value;
}
inline void PostAnnotationSearchMetricsRequest::set_evaluation_type(::clarifai::api::EvaluationType value) {
  _internal_set_evaluation_type(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PostAnnotationSearchMetricsRequest.evaluation_type)
}

// -------------------------------------------------------------------

// GetAnnotationSearchMetricsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool GetAnnotationSearchMetricsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool GetAnnotationSearchMetricsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& GetAnnotationSearchMetricsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& GetAnnotationSearchMetricsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetAnnotationSearchMetricsRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* GetAnnotationSearchMetricsRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetAnnotationSearchMetricsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetAnnotationSearchMetricsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* GetAnnotationSearchMetricsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetAnnotationSearchMetricsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void GetAnnotationSearchMetricsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetAnnotationSearchMetricsRequest.user_app_id)
}

// string id = 2;
inline void GetAnnotationSearchMetricsRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetAnnotationSearchMetricsRequest::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetAnnotationSearchMetricsRequest.id)
  return _internal_id();
}
inline void GetAnnotationSearchMetricsRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.GetAnnotationSearchMetricsRequest.id)
}
inline std::string* GetAnnotationSearchMetricsRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetAnnotationSearchMetricsRequest.id)
  return _internal_mutable_id();
}
inline const std::string& GetAnnotationSearchMetricsRequest::_internal_id() const {
  return id_.GetNoArena();
}
inline void GetAnnotationSearchMetricsRequest::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetAnnotationSearchMetricsRequest::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.GetAnnotationSearchMetricsRequest.id)
}
inline void GetAnnotationSearchMetricsRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.GetAnnotationSearchMetricsRequest.id)
}
inline void GetAnnotationSearchMetricsRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.GetAnnotationSearchMetricsRequest.id)
}
inline std::string* GetAnnotationSearchMetricsRequest::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetAnnotationSearchMetricsRequest::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetAnnotationSearchMetricsRequest.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetAnnotationSearchMetricsRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetAnnotationSearchMetricsRequest.id)
}

// -------------------------------------------------------------------

// ListAnnotationSearchMetricsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool ListAnnotationSearchMetricsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool ListAnnotationSearchMetricsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& ListAnnotationSearchMetricsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& ListAnnotationSearchMetricsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListAnnotationSearchMetricsRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* ListAnnotationSearchMetricsRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListAnnotationSearchMetricsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListAnnotationSearchMetricsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* ListAnnotationSearchMetricsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListAnnotationSearchMetricsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void ListAnnotationSearchMetricsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListAnnotationSearchMetricsRequest.user_app_id)
}

// -------------------------------------------------------------------

// MultiAnnotationSearchMetricsResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiAnnotationSearchMetricsResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiAnnotationSearchMetricsResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiAnnotationSearchMetricsResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiAnnotationSearchMetricsResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiAnnotationSearchMetricsResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* MultiAnnotationSearchMetricsResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiAnnotationSearchMetricsResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiAnnotationSearchMetricsResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiAnnotationSearchMetricsResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiAnnotationSearchMetricsResponse.status)
  return _internal_mutable_status();
}
inline void MultiAnnotationSearchMetricsResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiAnnotationSearchMetricsResponse.status)
}

// repeated .clarifai.api.AnnotationSearchMetrics annotation_search_metrics = 2;
inline int MultiAnnotationSearchMetricsResponse::_internal_annotation_search_metrics_size() const {
  return annotation_search_metrics_.size();
}
inline int MultiAnnotationSearchMetricsResponse::annotation_search_metrics_size() const {
  return _internal_annotation_search_metrics_size();
}
inline ::clarifai::api::AnnotationSearchMetrics* MultiAnnotationSearchMetricsResponse::mutable_annotation_search_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiAnnotationSearchMetricsResponse.annotation_search_metrics)
  return annotation_search_metrics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::AnnotationSearchMetrics >*
MultiAnnotationSearchMetricsResponse::mutable_annotation_search_metrics() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiAnnotationSearchMetricsResponse.annotation_search_metrics)
  return &annotation_search_metrics_;
}
inline const ::clarifai::api::AnnotationSearchMetrics& MultiAnnotationSearchMetricsResponse::_internal_annotation_search_metrics(int index) const {
  return annotation_search_metrics_.Get(index);
}
inline const ::clarifai::api::AnnotationSearchMetrics& MultiAnnotationSearchMetricsResponse::annotation_search_metrics(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiAnnotationSearchMetricsResponse.annotation_search_metrics)
  return _internal_annotation_search_metrics(index);
}
inline ::clarifai::api::AnnotationSearchMetrics* MultiAnnotationSearchMetricsResponse::_internal_add_annotation_search_metrics() {
  return annotation_search_metrics_.Add();
}
inline ::clarifai::api::AnnotationSearchMetrics* MultiAnnotationSearchMetricsResponse::add_annotation_search_metrics() {
  // @@protoc_insertion_point(field_add:clarifai.api.MultiAnnotationSearchMetricsResponse.annotation_search_metrics)
  return _internal_add_annotation_search_metrics();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::AnnotationSearchMetrics >&
MultiAnnotationSearchMetricsResponse::annotation_search_metrics() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiAnnotationSearchMetricsResponse.annotation_search_metrics)
  return annotation_search_metrics_;
}

// -------------------------------------------------------------------

// ListClustersRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool ListClustersRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool ListClustersRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& ListClustersRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& ListClustersRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListClustersRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* ListClustersRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListClustersRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListClustersRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* ListClustersRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListClustersRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void ListClustersRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListClustersRequest.user_app_id)
}

// repeated string ids = 2;
inline int ListClustersRequest::_internal_ids_size() const {
  return ids_.size();
}
inline int ListClustersRequest::ids_size() const {
  return _internal_ids_size();
}
inline void ListClustersRequest::clear_ids() {
  ids_.Clear();
}
inline std::string* ListClustersRequest::add_ids() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.ListClustersRequest.ids)
  return _internal_add_ids();
}
inline const std::string& ListClustersRequest::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const std::string& ListClustersRequest::ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListClustersRequest.ids)
  return _internal_ids(index);
}
inline std::string* ListClustersRequest::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListClustersRequest.ids)
  return ids_.Mutable(index);
}
inline void ListClustersRequest::set_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.ListClustersRequest.ids)
  ids_.Mutable(index)->assign(value);
}
inline void ListClustersRequest::set_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.ListClustersRequest.ids)
  ids_.Mutable(index)->assign(std::move(value));
}
inline void ListClustersRequest::set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.ListClustersRequest.ids)
}
inline void ListClustersRequest::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ListClustersRequest.ids)
}
inline std::string* ListClustersRequest::_internal_add_ids() {
  return ids_.Add();
}
inline void ListClustersRequest::add_ids(const std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.ListClustersRequest.ids)
}
inline void ListClustersRequest::add_ids(std::string&& value) {
  ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.ListClustersRequest.ids)
}
inline void ListClustersRequest::add_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.ListClustersRequest.ids)
}
inline void ListClustersRequest::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.ListClustersRequest.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListClustersRequest::ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.ListClustersRequest.ids)
  return ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListClustersRequest::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.ListClustersRequest.ids)
  return &ids_;
}

// uint32 page = 3;
inline void ListClustersRequest::clear_page() {
  page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListClustersRequest::_internal_page() const {
  return page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListClustersRequest::page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListClustersRequest.page)
  return _internal_page();
}
inline void ListClustersRequest::_internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  page_ = value;
}
inline void ListClustersRequest::set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListClustersRequest.page)
}

// uint32 per_page = 4;
inline void ListClustersRequest::clear_per_page() {
  per_page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListClustersRequest::_internal_per_page() const {
  return per_page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListClustersRequest::per_page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListClustersRequest.per_page)
  return _internal_per_page();
}
inline void ListClustersRequest::_internal_set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  per_page_ = value;
}
inline void ListClustersRequest::set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_per_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListClustersRequest.per_page)
}

// uint32 annotations_per_cluster = 5;
inline void ListClustersRequest::clear_annotations_per_cluster() {
  annotations_per_cluster_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListClustersRequest::_internal_annotations_per_cluster() const {
  return annotations_per_cluster_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListClustersRequest::annotations_per_cluster() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListClustersRequest.annotations_per_cluster)
  return _internal_annotations_per_cluster();
}
inline void ListClustersRequest::_internal_set_annotations_per_cluster(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  annotations_per_cluster_ = value;
}
inline void ListClustersRequest::set_annotations_per_cluster(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_annotations_per_cluster(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListClustersRequest.annotations_per_cluster)
}

// -------------------------------------------------------------------

// ListAnnotationsForClusterRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool ListAnnotationsForClusterRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool ListAnnotationsForClusterRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& ListAnnotationsForClusterRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& ListAnnotationsForClusterRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListAnnotationsForClusterRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* ListAnnotationsForClusterRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListAnnotationsForClusterRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListAnnotationsForClusterRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* ListAnnotationsForClusterRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListAnnotationsForClusterRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void ListAnnotationsForClusterRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListAnnotationsForClusterRequest.user_app_id)
}

// string cluster_id = 2;
inline void ListAnnotationsForClusterRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ListAnnotationsForClusterRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListAnnotationsForClusterRequest.cluster_id)
  return _internal_cluster_id();
}
inline void ListAnnotationsForClusterRequest::set_cluster_id(const std::string& value) {
  _internal_set_cluster_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListAnnotationsForClusterRequest.cluster_id)
}
inline std::string* ListAnnotationsForClusterRequest::mutable_cluster_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListAnnotationsForClusterRequest.cluster_id)
  return _internal_mutable_cluster_id();
}
inline const std::string& ListAnnotationsForClusterRequest::_internal_cluster_id() const {
  return cluster_id_.GetNoArena();
}
inline void ListAnnotationsForClusterRequest::_internal_set_cluster_id(const std::string& value) {
  
  cluster_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ListAnnotationsForClusterRequest::set_cluster_id(std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ListAnnotationsForClusterRequest.cluster_id)
}
inline void ListAnnotationsForClusterRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cluster_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.ListAnnotationsForClusterRequest.cluster_id)
}
inline void ListAnnotationsForClusterRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ListAnnotationsForClusterRequest.cluster_id)
}
inline std::string* ListAnnotationsForClusterRequest::_internal_mutable_cluster_id() {
  
  return cluster_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ListAnnotationsForClusterRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListAnnotationsForClusterRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ListAnnotationsForClusterRequest::set_allocated_cluster_id(std::string* cluster_id) {
  if (cluster_id != nullptr) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListAnnotationsForClusterRequest.cluster_id)
}

// uint32 page = 3;
inline void ListAnnotationsForClusterRequest::clear_page() {
  page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListAnnotationsForClusterRequest::_internal_page() const {
  return page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListAnnotationsForClusterRequest::page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListAnnotationsForClusterRequest.page)
  return _internal_page();
}
inline void ListAnnotationsForClusterRequest::_internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  page_ = value;
}
inline void ListAnnotationsForClusterRequest::set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListAnnotationsForClusterRequest.page)
}

// uint32 per_page = 4;
inline void ListAnnotationsForClusterRequest::clear_per_page() {
  per_page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListAnnotationsForClusterRequest::_internal_per_page() const {
  return per_page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListAnnotationsForClusterRequest::per_page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListAnnotationsForClusterRequest.per_page)
  return _internal_per_page();
}
inline void ListAnnotationsForClusterRequest::_internal_set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  per_page_ = value;
}
inline void ListAnnotationsForClusterRequest::set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_per_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListAnnotationsForClusterRequest.per_page)
}

// -------------------------------------------------------------------

// PostClustersSearchesRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostClustersSearchesRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostClustersSearchesRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostClustersSearchesRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostClustersSearchesRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostClustersSearchesRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* PostClustersSearchesRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostClustersSearchesRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostClustersSearchesRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostClustersSearchesRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostClustersSearchesRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void PostClustersSearchesRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostClustersSearchesRequest.user_app_id)
}

// repeated .clarifai.api.Search searches = 2;
inline int PostClustersSearchesRequest::_internal_searches_size() const {
  return searches_.size();
}
inline int PostClustersSearchesRequest::searches_size() const {
  return _internal_searches_size();
}
inline ::clarifai::api::Search* PostClustersSearchesRequest::mutable_searches(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostClustersSearchesRequest.searches)
  return searches_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search >*
PostClustersSearchesRequest::mutable_searches() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostClustersSearchesRequest.searches)
  return &searches_;
}
inline const ::clarifai::api::Search& PostClustersSearchesRequest::_internal_searches(int index) const {
  return searches_.Get(index);
}
inline const ::clarifai::api::Search& PostClustersSearchesRequest::searches(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostClustersSearchesRequest.searches)
  return _internal_searches(index);
}
inline ::clarifai::api::Search* PostClustersSearchesRequest::_internal_add_searches() {
  return searches_.Add();
}
inline ::clarifai::api::Search* PostClustersSearchesRequest::add_searches() {
  // @@protoc_insertion_point(field_add:clarifai.api.PostClustersSearchesRequest.searches)
  return _internal_add_searches();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search >&
PostClustersSearchesRequest::searches() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostClustersSearchesRequest.searches)
  return searches_;
}

// .clarifai.api.Pagination pagination = 3;
inline bool PostClustersSearchesRequest::_internal_has_pagination() const {
  return this != internal_default_instance() && pagination_ != nullptr;
}
inline bool PostClustersSearchesRequest::has_pagination() const {
  return _internal_has_pagination();
}
inline void PostClustersSearchesRequest::clear_pagination() {
  if (GetArenaNoVirtual() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
}
inline const ::clarifai::api::Pagination& PostClustersSearchesRequest::_internal_pagination() const {
  const ::clarifai::api::Pagination* p = pagination_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Pagination*>(
      &::clarifai::api::_Pagination_default_instance_);
}
inline const ::clarifai::api::Pagination& PostClustersSearchesRequest::pagination() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostClustersSearchesRequest.pagination)
  return _internal_pagination();
}
inline ::clarifai::api::Pagination* PostClustersSearchesRequest::release_pagination() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostClustersSearchesRequest.pagination)
  
  ::clarifai::api::Pagination* temp = pagination_;
  pagination_ = nullptr;
  return temp;
}
inline ::clarifai::api::Pagination* PostClustersSearchesRequest::_internal_mutable_pagination() {
  
  if (pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Pagination>(GetArenaNoVirtual());
    pagination_ = p;
  }
  return pagination_;
}
inline ::clarifai::api::Pagination* PostClustersSearchesRequest::mutable_pagination() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostClustersSearchesRequest.pagination)
  return _internal_mutable_pagination();
}
inline void PostClustersSearchesRequest::set_allocated_pagination(::clarifai::api::Pagination* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pagination_;
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    
  } else {
    
  }
  pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostClustersSearchesRequest.pagination)
}

// -------------------------------------------------------------------

// MultiClusterResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiClusterResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiClusterResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiClusterResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiClusterResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiClusterResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* MultiClusterResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiClusterResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiClusterResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiClusterResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiClusterResponse.status)
  return _internal_mutable_status();
}
inline void MultiClusterResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiClusterResponse.status)
}

// repeated .clarifai.api.Cluster clusters = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int MultiClusterResponse::_internal_clusters_size() const {
  return clusters_.size();
}
inline int MultiClusterResponse::clusters_size() const {
  return _internal_clusters_size();
}
inline ::clarifai::api::Cluster* MultiClusterResponse::mutable_clusters(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiClusterResponse.clusters)
  return clusters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Cluster >*
MultiClusterResponse::mutable_clusters() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiClusterResponse.clusters)
  return &clusters_;
}
inline const ::clarifai::api::Cluster& MultiClusterResponse::_internal_clusters(int index) const {
  return clusters_.Get(index);
}
inline const ::clarifai::api::Cluster& MultiClusterResponse::clusters(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiClusterResponse.clusters)
  return _internal_clusters(index);
}
inline ::clarifai::api::Cluster* MultiClusterResponse::_internal_add_clusters() {
  return clusters_.Add();
}
inline ::clarifai::api::Cluster* MultiClusterResponse::add_clusters() {
  // @@protoc_insertion_point(field_add:clarifai.api.MultiClusterResponse.clusters)
  return _internal_add_clusters();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Cluster >&
MultiClusterResponse::clusters() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiClusterResponse.clusters)
  return clusters_;
}

// repeated .clarifai.api.Search searches = 3;
inline int MultiClusterResponse::_internal_searches_size() const {
  return searches_.size();
}
inline int MultiClusterResponse::searches_size() const {
  return _internal_searches_size();
}
inline ::clarifai::api::Search* MultiClusterResponse::mutable_searches(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiClusterResponse.searches)
  return searches_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search >*
MultiClusterResponse::mutable_searches() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiClusterResponse.searches)
  return &searches_;
}
inline const ::clarifai::api::Search& MultiClusterResponse::_internal_searches(int index) const {
  return searches_.Get(index);
}
inline const ::clarifai::api::Search& MultiClusterResponse::searches(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiClusterResponse.searches)
  return _internal_searches(index);
}
inline ::clarifai::api::Search* MultiClusterResponse::_internal_add_searches() {
  return searches_.Add();
}
inline ::clarifai::api::Search* MultiClusterResponse::add_searches() {
  // @@protoc_insertion_point(field_add:clarifai.api.MultiClusterResponse.searches)
  return _internal_add_searches();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search >&
MultiClusterResponse::searches() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiClusterResponse.searches)
  return searches_;
}

// -------------------------------------------------------------------

// GetSubscriptionRequest

// -------------------------------------------------------------------

// PostSubscriptionRequest

// string signup_code = 1;
inline void PostSubscriptionRequest::clear_signup_code() {
  signup_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PostSubscriptionRequest::signup_code() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostSubscriptionRequest.signup_code)
  return _internal_signup_code();
}
inline void PostSubscriptionRequest::set_signup_code(const std::string& value) {
  _internal_set_signup_code(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PostSubscriptionRequest.signup_code)
}
inline std::string* PostSubscriptionRequest::mutable_signup_code() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostSubscriptionRequest.signup_code)
  return _internal_mutable_signup_code();
}
inline const std::string& PostSubscriptionRequest::_internal_signup_code() const {
  return signup_code_.GetNoArena();
}
inline void PostSubscriptionRequest::_internal_set_signup_code(const std::string& value) {
  
  signup_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PostSubscriptionRequest::set_signup_code(std::string&& value) {
  
  signup_code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.PostSubscriptionRequest.signup_code)
}
inline void PostSubscriptionRequest::set_signup_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signup_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.PostSubscriptionRequest.signup_code)
}
inline void PostSubscriptionRequest::set_signup_code(const char* value, size_t size) {
  
  signup_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PostSubscriptionRequest.signup_code)
}
inline std::string* PostSubscriptionRequest::_internal_mutable_signup_code() {
  
  return signup_code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PostSubscriptionRequest::release_signup_code() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostSubscriptionRequest.signup_code)
  
  return signup_code_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PostSubscriptionRequest::set_allocated_signup_code(std::string* signup_code) {
  if (signup_code != nullptr) {
    
  } else {
    
  }
  signup_code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signup_code);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostSubscriptionRequest.signup_code)
}

// .clarifai.api.Plan plan = 2;
inline bool PostSubscriptionRequest::_internal_has_plan() const {
  return this != internal_default_instance() && plan_ != nullptr;
}
inline bool PostSubscriptionRequest::has_plan() const {
  return _internal_has_plan();
}
inline const ::clarifai::api::Plan& PostSubscriptionRequest::_internal_plan() const {
  const ::clarifai::api::Plan* p = plan_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Plan*>(
      &::clarifai::api::_Plan_default_instance_);
}
inline const ::clarifai::api::Plan& PostSubscriptionRequest::plan() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostSubscriptionRequest.plan)
  return _internal_plan();
}
inline ::clarifai::api::Plan* PostSubscriptionRequest::release_plan() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostSubscriptionRequest.plan)
  
  ::clarifai::api::Plan* temp = plan_;
  plan_ = nullptr;
  return temp;
}
inline ::clarifai::api::Plan* PostSubscriptionRequest::_internal_mutable_plan() {
  
  if (plan_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Plan>(GetArenaNoVirtual());
    plan_ = p;
  }
  return plan_;
}
inline ::clarifai::api::Plan* PostSubscriptionRequest::mutable_plan() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostSubscriptionRequest.plan)
  return _internal_mutable_plan();
}
inline void PostSubscriptionRequest::set_allocated_plan(::clarifai::api::Plan* plan) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(plan_);
  }
  if (plan) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      plan = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, plan, submessage_arena);
    }
    
  } else {
    
  }
  plan_ = plan;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostSubscriptionRequest.plan)
}

// -------------------------------------------------------------------

// SingleSubscriptionResponse

// .clarifai.api.status.Status status = 1;
inline bool SingleSubscriptionResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SingleSubscriptionResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& SingleSubscriptionResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& SingleSubscriptionResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleSubscriptionResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* SingleSubscriptionResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleSubscriptionResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* SingleSubscriptionResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* SingleSubscriptionResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleSubscriptionResponse.status)
  return _internal_mutable_status();
}
inline void SingleSubscriptionResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleSubscriptionResponse.status)
}

// .clarifai.api.Plan plan = 2;
inline bool SingleSubscriptionResponse::_internal_has_plan() const {
  return this != internal_default_instance() && plan_ != nullptr;
}
inline bool SingleSubscriptionResponse::has_plan() const {
  return _internal_has_plan();
}
inline const ::clarifai::api::Plan& SingleSubscriptionResponse::_internal_plan() const {
  const ::clarifai::api::Plan* p = plan_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Plan*>(
      &::clarifai::api::_Plan_default_instance_);
}
inline const ::clarifai::api::Plan& SingleSubscriptionResponse::plan() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleSubscriptionResponse.plan)
  return _internal_plan();
}
inline ::clarifai::api::Plan* SingleSubscriptionResponse::release_plan() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleSubscriptionResponse.plan)
  
  ::clarifai::api::Plan* temp = plan_;
  plan_ = nullptr;
  return temp;
}
inline ::clarifai::api::Plan* SingleSubscriptionResponse::_internal_mutable_plan() {
  
  if (plan_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Plan>(GetArenaNoVirtual());
    plan_ = p;
  }
  return plan_;
}
inline ::clarifai::api::Plan* SingleSubscriptionResponse::mutable_plan() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleSubscriptionResponse.plan)
  return _internal_mutable_plan();
}
inline void SingleSubscriptionResponse::set_allocated_plan(::clarifai::api::Plan* plan) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(plan_);
  }
  if (plan) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      plan = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, plan, submessage_arena);
    }
    
  } else {
    
  }
  plan_ = plan;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleSubscriptionResponse.plan)
}

// string signup_code = 3;
inline void SingleSubscriptionResponse::clear_signup_code() {
  signup_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SingleSubscriptionResponse::signup_code() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleSubscriptionResponse.signup_code)
  return _internal_signup_code();
}
inline void SingleSubscriptionResponse::set_signup_code(const std::string& value) {
  _internal_set_signup_code(value);
  // @@protoc_insertion_point(field_set:clarifai.api.SingleSubscriptionResponse.signup_code)
}
inline std::string* SingleSubscriptionResponse::mutable_signup_code() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleSubscriptionResponse.signup_code)
  return _internal_mutable_signup_code();
}
inline const std::string& SingleSubscriptionResponse::_internal_signup_code() const {
  return signup_code_.GetNoArena();
}
inline void SingleSubscriptionResponse::_internal_set_signup_code(const std::string& value) {
  
  signup_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SingleSubscriptionResponse::set_signup_code(std::string&& value) {
  
  signup_code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.SingleSubscriptionResponse.signup_code)
}
inline void SingleSubscriptionResponse::set_signup_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signup_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.SingleSubscriptionResponse.signup_code)
}
inline void SingleSubscriptionResponse::set_signup_code(const char* value, size_t size) {
  
  signup_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.SingleSubscriptionResponse.signup_code)
}
inline std::string* SingleSubscriptionResponse::_internal_mutable_signup_code() {
  
  return signup_code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SingleSubscriptionResponse::release_signup_code() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleSubscriptionResponse.signup_code)
  
  return signup_code_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SingleSubscriptionResponse::set_allocated_signup_code(std::string* signup_code) {
  if (signup_code != nullptr) {
    
  } else {
    
  }
  signup_code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signup_code);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleSubscriptionResponse.signup_code)
}

// -------------------------------------------------------------------

// ListCreditCardsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool ListCreditCardsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool ListCreditCardsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& ListCreditCardsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& ListCreditCardsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListCreditCardsRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* ListCreditCardsRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListCreditCardsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListCreditCardsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* ListCreditCardsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListCreditCardsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void ListCreditCardsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListCreditCardsRequest.user_app_id)
}

// -------------------------------------------------------------------

// MultipleCreditCardResponse

// .clarifai.api.status.Status status = 1;
inline bool MultipleCreditCardResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultipleCreditCardResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultipleCreditCardResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultipleCreditCardResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultipleCreditCardResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* MultipleCreditCardResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultipleCreditCardResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultipleCreditCardResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultipleCreditCardResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultipleCreditCardResponse.status)
  return _internal_mutable_status();
}
inline void MultipleCreditCardResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultipleCreditCardResponse.status)
}

// repeated .clarifai.api.CreditCard cards = 2;
inline int MultipleCreditCardResponse::_internal_cards_size() const {
  return cards_.size();
}
inline int MultipleCreditCardResponse::cards_size() const {
  return _internal_cards_size();
}
inline ::clarifai::api::CreditCard* MultipleCreditCardResponse::mutable_cards(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultipleCreditCardResponse.cards)
  return cards_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::CreditCard >*
MultipleCreditCardResponse::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultipleCreditCardResponse.cards)
  return &cards_;
}
inline const ::clarifai::api::CreditCard& MultipleCreditCardResponse::_internal_cards(int index) const {
  return cards_.Get(index);
}
inline const ::clarifai::api::CreditCard& MultipleCreditCardResponse::cards(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultipleCreditCardResponse.cards)
  return _internal_cards(index);
}
inline ::clarifai::api::CreditCard* MultipleCreditCardResponse::_internal_add_cards() {
  return cards_.Add();
}
inline ::clarifai::api::CreditCard* MultipleCreditCardResponse::add_cards() {
  // @@protoc_insertion_point(field_add:clarifai.api.MultipleCreditCardResponse.cards)
  return _internal_add_cards();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::CreditCard >&
MultipleCreditCardResponse::cards() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultipleCreditCardResponse.cards)
  return cards_;
}

// -------------------------------------------------------------------

// PostCreditCardRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostCreditCardRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostCreditCardRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostCreditCardRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostCreditCardRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostCreditCardRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* PostCreditCardRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostCreditCardRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostCreditCardRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostCreditCardRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostCreditCardRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void PostCreditCardRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostCreditCardRequest.user_app_id)
}

// string source = 2;
inline void PostCreditCardRequest::clear_source() {
  source_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PostCreditCardRequest::source() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostCreditCardRequest.source)
  return _internal_source();
}
inline void PostCreditCardRequest::set_source(const std::string& value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PostCreditCardRequest.source)
}
inline std::string* PostCreditCardRequest::mutable_source() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostCreditCardRequest.source)
  return _internal_mutable_source();
}
inline const std::string& PostCreditCardRequest::_internal_source() const {
  return source_.GetNoArena();
}
inline void PostCreditCardRequest::_internal_set_source(const std::string& value) {
  
  source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PostCreditCardRequest::set_source(std::string&& value) {
  
  source_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.PostCreditCardRequest.source)
}
inline void PostCreditCardRequest::set_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.PostCreditCardRequest.source)
}
inline void PostCreditCardRequest::set_source(const char* value, size_t size) {
  
  source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PostCreditCardRequest.source)
}
inline std::string* PostCreditCardRequest::_internal_mutable_source() {
  
  return source_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PostCreditCardRequest::release_source() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostCreditCardRequest.source)
  
  return source_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PostCreditCardRequest::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    
  } else {
    
  }
  source_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostCreditCardRequest.source)
}

// .clarifai.api.CreditCard card = 3;
inline bool PostCreditCardRequest::_internal_has_card() const {
  return this != internal_default_instance() && card_ != nullptr;
}
inline bool PostCreditCardRequest::has_card() const {
  return _internal_has_card();
}
inline const ::clarifai::api::CreditCard& PostCreditCardRequest::_internal_card() const {
  const ::clarifai::api::CreditCard* p = card_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::CreditCard*>(
      &::clarifai::api::_CreditCard_default_instance_);
}
inline const ::clarifai::api::CreditCard& PostCreditCardRequest::card() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostCreditCardRequest.card)
  return _internal_card();
}
inline ::clarifai::api::CreditCard* PostCreditCardRequest::release_card() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostCreditCardRequest.card)
  
  ::clarifai::api::CreditCard* temp = card_;
  card_ = nullptr;
  return temp;
}
inline ::clarifai::api::CreditCard* PostCreditCardRequest::_internal_mutable_card() {
  
  if (card_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::CreditCard>(GetArenaNoVirtual());
    card_ = p;
  }
  return card_;
}
inline ::clarifai::api::CreditCard* PostCreditCardRequest::mutable_card() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostCreditCardRequest.card)
  return _internal_mutable_card();
}
inline void PostCreditCardRequest::set_allocated_card(::clarifai::api::CreditCard* card) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(card_);
  }
  if (card) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      card = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, card, submessage_arena);
    }
    
  } else {
    
  }
  card_ = card;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostCreditCardRequest.card)
}

// -------------------------------------------------------------------

// SingleCreditCardResponse

// .clarifai.api.status.Status status = 1;
inline bool SingleCreditCardResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SingleCreditCardResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& SingleCreditCardResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& SingleCreditCardResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleCreditCardResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* SingleCreditCardResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleCreditCardResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* SingleCreditCardResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* SingleCreditCardResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleCreditCardResponse.status)
  return _internal_mutable_status();
}
inline void SingleCreditCardResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleCreditCardResponse.status)
}

// .clarifai.api.CreditCard card = 2;
inline bool SingleCreditCardResponse::_internal_has_card() const {
  return this != internal_default_instance() && card_ != nullptr;
}
inline bool SingleCreditCardResponse::has_card() const {
  return _internal_has_card();
}
inline const ::clarifai::api::CreditCard& SingleCreditCardResponse::_internal_card() const {
  const ::clarifai::api::CreditCard* p = card_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::CreditCard*>(
      &::clarifai::api::_CreditCard_default_instance_);
}
inline const ::clarifai::api::CreditCard& SingleCreditCardResponse::card() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleCreditCardResponse.card)
  return _internal_card();
}
inline ::clarifai::api::CreditCard* SingleCreditCardResponse::release_card() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleCreditCardResponse.card)
  
  ::clarifai::api::CreditCard* temp = card_;
  card_ = nullptr;
  return temp;
}
inline ::clarifai::api::CreditCard* SingleCreditCardResponse::_internal_mutable_card() {
  
  if (card_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::CreditCard>(GetArenaNoVirtual());
    card_ = p;
  }
  return card_;
}
inline ::clarifai::api::CreditCard* SingleCreditCardResponse::mutable_card() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleCreditCardResponse.card)
  return _internal_mutable_card();
}
inline void SingleCreditCardResponse::set_allocated_card(::clarifai::api::CreditCard* card) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(card_);
  }
  if (card) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      card = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, card, submessage_arena);
    }
    
  } else {
    
  }
  card_ = card;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleCreditCardResponse.card)
}

// -------------------------------------------------------------------

// DeleteCreditCardRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool DeleteCreditCardRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool DeleteCreditCardRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& DeleteCreditCardRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& DeleteCreditCardRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteCreditCardRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* DeleteCreditCardRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteCreditCardRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteCreditCardRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* DeleteCreditCardRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteCreditCardRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void DeleteCreditCardRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteCreditCardRequest.user_app_id)
}

// .clarifai.api.CreditCard card = 2;
inline bool DeleteCreditCardRequest::_internal_has_card() const {
  return this != internal_default_instance() && card_ != nullptr;
}
inline bool DeleteCreditCardRequest::has_card() const {
  return _internal_has_card();
}
inline const ::clarifai::api::CreditCard& DeleteCreditCardRequest::_internal_card() const {
  const ::clarifai::api::CreditCard* p = card_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::CreditCard*>(
      &::clarifai::api::_CreditCard_default_instance_);
}
inline const ::clarifai::api::CreditCard& DeleteCreditCardRequest::card() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteCreditCardRequest.card)
  return _internal_card();
}
inline ::clarifai::api::CreditCard* DeleteCreditCardRequest::release_card() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteCreditCardRequest.card)
  
  ::clarifai::api::CreditCard* temp = card_;
  card_ = nullptr;
  return temp;
}
inline ::clarifai::api::CreditCard* DeleteCreditCardRequest::_internal_mutable_card() {
  
  if (card_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::CreditCard>(GetArenaNoVirtual());
    card_ = p;
  }
  return card_;
}
inline ::clarifai::api::CreditCard* DeleteCreditCardRequest::mutable_card() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteCreditCardRequest.card)
  return _internal_mutable_card();
}
inline void DeleteCreditCardRequest::set_allocated_card(::clarifai::api::CreditCard* card) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(card_);
  }
  if (card) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      card = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, card, submessage_arena);
    }
    
  } else {
    
  }
  card_ = card;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteCreditCardRequest.card)
}

// -------------------------------------------------------------------

// PatchCreditCardsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PatchCreditCardsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PatchCreditCardsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PatchCreditCardsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PatchCreditCardsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchCreditCardsRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* PatchCreditCardsRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchCreditCardsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchCreditCardsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PatchCreditCardsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchCreditCardsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void PatchCreditCardsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchCreditCardsRequest.user_app_id)
}

// repeated .clarifai.api.CreditCard cards = 2;
inline int PatchCreditCardsRequest::_internal_cards_size() const {
  return cards_.size();
}
inline int PatchCreditCardsRequest::cards_size() const {
  return _internal_cards_size();
}
inline ::clarifai::api::CreditCard* PatchCreditCardsRequest::mutable_cards(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchCreditCardsRequest.cards)
  return cards_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::CreditCard >*
PatchCreditCardsRequest::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PatchCreditCardsRequest.cards)
  return &cards_;
}
inline const ::clarifai::api::CreditCard& PatchCreditCardsRequest::_internal_cards(int index) const {
  return cards_.Get(index);
}
inline const ::clarifai::api::CreditCard& PatchCreditCardsRequest::cards(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchCreditCardsRequest.cards)
  return _internal_cards(index);
}
inline ::clarifai::api::CreditCard* PatchCreditCardsRequest::_internal_add_cards() {
  return cards_.Add();
}
inline ::clarifai::api::CreditCard* PatchCreditCardsRequest::add_cards() {
  // @@protoc_insertion_point(field_add:clarifai.api.PatchCreditCardsRequest.cards)
  return _internal_add_cards();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::CreditCard >&
PatchCreditCardsRequest::cards() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PatchCreditCardsRequest.cards)
  return cards_;
}

// .clarifai.api.PatchAction action = 3;
inline bool PatchCreditCardsRequest::_internal_has_action() const {
  return this != internal_default_instance() && action_ != nullptr;
}
inline bool PatchCreditCardsRequest::has_action() const {
  return _internal_has_action();
}
inline const ::clarifai::api::PatchAction& PatchCreditCardsRequest::_internal_action() const {
  const ::clarifai::api::PatchAction* p = action_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::PatchAction*>(
      &::clarifai::api::_PatchAction_default_instance_);
}
inline const ::clarifai::api::PatchAction& PatchCreditCardsRequest::action() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchCreditCardsRequest.action)
  return _internal_action();
}
inline ::clarifai::api::PatchAction* PatchCreditCardsRequest::release_action() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchCreditCardsRequest.action)
  
  ::clarifai::api::PatchAction* temp = action_;
  action_ = nullptr;
  return temp;
}
inline ::clarifai::api::PatchAction* PatchCreditCardsRequest::_internal_mutable_action() {
  
  if (action_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::PatchAction>(GetArenaNoVirtual());
    action_ = p;
  }
  return action_;
}
inline ::clarifai::api::PatchAction* PatchCreditCardsRequest::mutable_action() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchCreditCardsRequest.action)
  return _internal_mutable_action();
}
inline void PatchCreditCardsRequest::set_allocated_action(::clarifai::api::PatchAction* action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_);
  }
  if (action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action, submessage_arena);
    }
    
  } else {
    
  }
  action_ = action;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchCreditCardsRequest.action)
}

// -------------------------------------------------------------------

// PostHistoricalUsageRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostHistoricalUsageRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostHistoricalUsageRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostHistoricalUsageRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostHistoricalUsageRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostHistoricalUsageRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* PostHistoricalUsageRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostHistoricalUsageRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostHistoricalUsageRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostHistoricalUsageRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostHistoricalUsageRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void PostHistoricalUsageRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostHistoricalUsageRequest.user_app_id)
}

// -------------------------------------------------------------------

// PostHistoricalUsageResponse

// .clarifai.api.status.Status status = 1;
inline bool PostHistoricalUsageResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool PostHistoricalUsageResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& PostHistoricalUsageResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& PostHistoricalUsageResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostHistoricalUsageResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* PostHistoricalUsageResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostHistoricalUsageResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* PostHistoricalUsageResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* PostHistoricalUsageResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostHistoricalUsageResponse.status)
  return _internal_mutable_status();
}
inline void PostHistoricalUsageResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostHistoricalUsageResponse.status)
}

// .google.protobuf.Duration interval = 2;
inline bool PostHistoricalUsageResponse::_internal_has_interval() const {
  return this != internal_default_instance() && interval_ != nullptr;
}
inline bool PostHistoricalUsageResponse::has_interval() const {
  return _internal_has_interval();
}
inline const PROTOBUF_NAMESPACE_ID::Duration& PostHistoricalUsageResponse::_internal_interval() const {
  const PROTOBUF_NAMESPACE_ID::Duration* p = interval_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Duration*>(
      &PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Duration& PostHistoricalUsageResponse::interval() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostHistoricalUsageResponse.interval)
  return _internal_interval();
}
inline PROTOBUF_NAMESPACE_ID::Duration* PostHistoricalUsageResponse::release_interval() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostHistoricalUsageResponse.interval)
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = interval_;
  interval_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* PostHistoricalUsageResponse::_internal_mutable_interval() {
  
  if (interval_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Duration>(GetArenaNoVirtual());
    interval_ = p;
  }
  return interval_;
}
inline PROTOBUF_NAMESPACE_ID::Duration* PostHistoricalUsageResponse::mutable_interval() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostHistoricalUsageResponse.interval)
  return _internal_mutable_interval();
}
inline void PostHistoricalUsageResponse::set_allocated_interval(PROTOBUF_NAMESPACE_ID::Duration* interval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(interval_);
  }
  if (interval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interval)->GetArena();
    if (message_arena != submessage_arena) {
      interval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interval, submessage_arena);
    }
    
  } else {
    
  }
  interval_ = interval;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostHistoricalUsageResponse.interval)
}

// repeated .clarifai.api.DimensionList usage = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int PostHistoricalUsageResponse::_internal_usage_size() const {
  return usage_.size();
}
inline int PostHistoricalUsageResponse::usage_size() const {
  return _internal_usage_size();
}
inline ::clarifai::api::DimensionList* PostHistoricalUsageResponse::mutable_usage(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostHistoricalUsageResponse.usage)
  return usage_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::DimensionList >*
PostHistoricalUsageResponse::mutable_usage() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostHistoricalUsageResponse.usage)
  return &usage_;
}
inline const ::clarifai::api::DimensionList& PostHistoricalUsageResponse::_internal_usage(int index) const {
  return usage_.Get(index);
}
inline const ::clarifai::api::DimensionList& PostHistoricalUsageResponse::usage(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostHistoricalUsageResponse.usage)
  return _internal_usage(index);
}
inline ::clarifai::api::DimensionList* PostHistoricalUsageResponse::_internal_add_usage() {
  return usage_.Add();
}
inline ::clarifai::api::DimensionList* PostHistoricalUsageResponse::add_usage() {
  // @@protoc_insertion_point(field_add:clarifai.api.PostHistoricalUsageResponse.usage)
  return _internal_add_usage();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::DimensionList >&
PostHistoricalUsageResponse::usage() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostHistoricalUsageResponse.usage)
  return usage_;
}

// -------------------------------------------------------------------

// GetRealtimeUsageRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool GetRealtimeUsageRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool GetRealtimeUsageRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& GetRealtimeUsageRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& GetRealtimeUsageRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetRealtimeUsageRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* GetRealtimeUsageRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetRealtimeUsageRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetRealtimeUsageRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* GetRealtimeUsageRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetRealtimeUsageRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void GetRealtimeUsageRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetRealtimeUsageRequest.user_app_id)
}

// -------------------------------------------------------------------

// GetRealtimeUsageResponse

// .clarifai.api.status.Status status = 1;
inline bool GetRealtimeUsageResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool GetRealtimeUsageResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& GetRealtimeUsageResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& GetRealtimeUsageResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetRealtimeUsageResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* GetRealtimeUsageResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetRealtimeUsageResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* GetRealtimeUsageResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* GetRealtimeUsageResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetRealtimeUsageResponse.status)
  return _internal_mutable_status();
}
inline void GetRealtimeUsageResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetRealtimeUsageResponse.status)
}

// repeated .clarifai.api.RealtimeCount realtime_usage = 4;
inline int GetRealtimeUsageResponse::_internal_realtime_usage_size() const {
  return realtime_usage_.size();
}
inline int GetRealtimeUsageResponse::realtime_usage_size() const {
  return _internal_realtime_usage_size();
}
inline ::clarifai::api::RealtimeCount* GetRealtimeUsageResponse::mutable_realtime_usage(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetRealtimeUsageResponse.realtime_usage)
  return realtime_usage_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::RealtimeCount >*
GetRealtimeUsageResponse::mutable_realtime_usage() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.GetRealtimeUsageResponse.realtime_usage)
  return &realtime_usage_;
}
inline const ::clarifai::api::RealtimeCount& GetRealtimeUsageResponse::_internal_realtime_usage(int index) const {
  return realtime_usage_.Get(index);
}
inline const ::clarifai::api::RealtimeCount& GetRealtimeUsageResponse::realtime_usage(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetRealtimeUsageResponse.realtime_usage)
  return _internal_realtime_usage(index);
}
inline ::clarifai::api::RealtimeCount* GetRealtimeUsageResponse::_internal_add_realtime_usage() {
  return realtime_usage_.Add();
}
inline ::clarifai::api::RealtimeCount* GetRealtimeUsageResponse::add_realtime_usage() {
  // @@protoc_insertion_point(field_add:clarifai.api.GetRealtimeUsageResponse.realtime_usage)
  return _internal_add_realtime_usage();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::RealtimeCount >&
GetRealtimeUsageResponse::realtime_usage() const {
  // @@protoc_insertion_point(field_list:clarifai.api.GetRealtimeUsageResponse.realtime_usage)
  return realtime_usage_;
}

// -------------------------------------------------------------------

// ListUsageIntervalsRequest

// -------------------------------------------------------------------

// ListUsageIntervalsResponse

// .clarifai.api.status.Status status = 1;
inline bool ListUsageIntervalsResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool ListUsageIntervalsResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& ListUsageIntervalsResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& ListUsageIntervalsResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListUsageIntervalsResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* ListUsageIntervalsResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListUsageIntervalsResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* ListUsageIntervalsResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* ListUsageIntervalsResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListUsageIntervalsResponse.status)
  return _internal_mutable_status();
}
inline void ListUsageIntervalsResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListUsageIntervalsResponse.status)
}

// repeated .clarifai.api.UsageInterval usage_intervals = 2;
inline int ListUsageIntervalsResponse::_internal_usage_intervals_size() const {
  return usage_intervals_.size();
}
inline int ListUsageIntervalsResponse::usage_intervals_size() const {
  return _internal_usage_intervals_size();
}
inline ::clarifai::api::UsageInterval* ListUsageIntervalsResponse::mutable_usage_intervals(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListUsageIntervalsResponse.usage_intervals)
  return usage_intervals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::UsageInterval >*
ListUsageIntervalsResponse::mutable_usage_intervals() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.ListUsageIntervalsResponse.usage_intervals)
  return &usage_intervals_;
}
inline const ::clarifai::api::UsageInterval& ListUsageIntervalsResponse::_internal_usage_intervals(int index) const {
  return usage_intervals_.Get(index);
}
inline const ::clarifai::api::UsageInterval& ListUsageIntervalsResponse::usage_intervals(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListUsageIntervalsResponse.usage_intervals)
  return _internal_usage_intervals(index);
}
inline ::clarifai::api::UsageInterval* ListUsageIntervalsResponse::_internal_add_usage_intervals() {
  return usage_intervals_.Add();
}
inline ::clarifai::api::UsageInterval* ListUsageIntervalsResponse::add_usage_intervals() {
  // @@protoc_insertion_point(field_add:clarifai.api.ListUsageIntervalsResponse.usage_intervals)
  return _internal_add_usage_intervals();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::UsageInterval >&
ListUsageIntervalsResponse::usage_intervals() const {
  // @@protoc_insertion_point(field_list:clarifai.api.ListUsageIntervalsResponse.usage_intervals)
  return usage_intervals_;
}

// -------------------------------------------------------------------

// ListUserBillingCyclesRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool ListUserBillingCyclesRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool ListUserBillingCyclesRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& ListUserBillingCyclesRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& ListUserBillingCyclesRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListUserBillingCyclesRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* ListUserBillingCyclesRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListUserBillingCyclesRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListUserBillingCyclesRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* ListUserBillingCyclesRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListUserBillingCyclesRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void ListUserBillingCyclesRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListUserBillingCyclesRequest.user_app_id)
}

// uint32 page = 2;
inline void ListUserBillingCyclesRequest::clear_page() {
  page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListUserBillingCyclesRequest::_internal_page() const {
  return page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListUserBillingCyclesRequest::page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListUserBillingCyclesRequest.page)
  return _internal_page();
}
inline void ListUserBillingCyclesRequest::_internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  page_ = value;
}
inline void ListUserBillingCyclesRequest::set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListUserBillingCyclesRequest.page)
}

// uint32 per_page = 3;
inline void ListUserBillingCyclesRequest::clear_per_page() {
  per_page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListUserBillingCyclesRequest::_internal_per_page() const {
  return per_page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListUserBillingCyclesRequest::per_page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListUserBillingCyclesRequest.per_page)
  return _internal_per_page();
}
inline void ListUserBillingCyclesRequest::_internal_set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  per_page_ = value;
}
inline void ListUserBillingCyclesRequest::set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_per_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListUserBillingCyclesRequest.per_page)
}

// -------------------------------------------------------------------

// ListUserBillingCyclesResponse

// .clarifai.api.status.Status status = 1;
inline bool ListUserBillingCyclesResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool ListUserBillingCyclesResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& ListUserBillingCyclesResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& ListUserBillingCyclesResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListUserBillingCyclesResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* ListUserBillingCyclesResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListUserBillingCyclesResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* ListUserBillingCyclesResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* ListUserBillingCyclesResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListUserBillingCyclesResponse.status)
  return _internal_mutable_status();
}
inline void ListUserBillingCyclesResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListUserBillingCyclesResponse.status)
}

// repeated .clarifai.api.BillingCycle billing_cycles = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int ListUserBillingCyclesResponse::_internal_billing_cycles_size() const {
  return billing_cycles_.size();
}
inline int ListUserBillingCyclesResponse::billing_cycles_size() const {
  return _internal_billing_cycles_size();
}
inline ::clarifai::api::BillingCycle* ListUserBillingCyclesResponse::mutable_billing_cycles(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListUserBillingCyclesResponse.billing_cycles)
  return billing_cycles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::BillingCycle >*
ListUserBillingCyclesResponse::mutable_billing_cycles() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.ListUserBillingCyclesResponse.billing_cycles)
  return &billing_cycles_;
}
inline const ::clarifai::api::BillingCycle& ListUserBillingCyclesResponse::_internal_billing_cycles(int index) const {
  return billing_cycles_.Get(index);
}
inline const ::clarifai::api::BillingCycle& ListUserBillingCyclesResponse::billing_cycles(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListUserBillingCyclesResponse.billing_cycles)
  return _internal_billing_cycles(index);
}
inline ::clarifai::api::BillingCycle* ListUserBillingCyclesResponse::_internal_add_billing_cycles() {
  return billing_cycles_.Add();
}
inline ::clarifai::api::BillingCycle* ListUserBillingCyclesResponse::add_billing_cycles() {
  // @@protoc_insertion_point(field_add:clarifai.api.ListUserBillingCyclesResponse.billing_cycles)
  return _internal_add_billing_cycles();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::BillingCycle >&
ListUserBillingCyclesResponse::billing_cycles() const {
  // @@protoc_insertion_point(field_list:clarifai.api.ListUserBillingCyclesResponse.billing_cycles)
  return billing_cycles_;
}

// -------------------------------------------------------------------

// PostUsageRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostUsageRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostUsageRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostUsageRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostUsageRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostUsageRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* PostUsageRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostUsageRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostUsageRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostUsageRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostUsageRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void PostUsageRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostUsageRequest.user_app_id)
}

// repeated .clarifai.api.EventsCollection events_collections = 2;
inline int PostUsageRequest::_internal_events_collections_size() const {
  return events_collections_.size();
}
inline int PostUsageRequest::events_collections_size() const {
  return _internal_events_collections_size();
}
inline ::clarifai::api::EventsCollection* PostUsageRequest::mutable_events_collections(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostUsageRequest.events_collections)
  return events_collections_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::EventsCollection >*
PostUsageRequest::mutable_events_collections() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostUsageRequest.events_collections)
  return &events_collections_;
}
inline const ::clarifai::api::EventsCollection& PostUsageRequest::_internal_events_collections(int index) const {
  return events_collections_.Get(index);
}
inline const ::clarifai::api::EventsCollection& PostUsageRequest::events_collections(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostUsageRequest.events_collections)
  return _internal_events_collections(index);
}
inline ::clarifai::api::EventsCollection* PostUsageRequest::_internal_add_events_collections() {
  return events_collections_.Add();
}
inline ::clarifai::api::EventsCollection* PostUsageRequest::add_events_collections() {
  // @@protoc_insertion_point(field_add:clarifai.api.PostUsageRequest.events_collections)
  return _internal_add_events_collections();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::EventsCollection >&
PostUsageRequest::events_collections() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostUsageRequest.events_collections)
  return events_collections_;
}

// string public_key = 3;
inline void PostUsageRequest::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PostUsageRequest::public_key() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostUsageRequest.public_key)
  return _internal_public_key();
}
inline void PostUsageRequest::set_public_key(const std::string& value) {
  _internal_set_public_key(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PostUsageRequest.public_key)
}
inline std::string* PostUsageRequest::mutable_public_key() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostUsageRequest.public_key)
  return _internal_mutable_public_key();
}
inline const std::string& PostUsageRequest::_internal_public_key() const {
  return public_key_.GetNoArena();
}
inline void PostUsageRequest::_internal_set_public_key(const std::string& value) {
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PostUsageRequest::set_public_key(std::string&& value) {
  
  public_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.PostUsageRequest.public_key)
}
inline void PostUsageRequest::set_public_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.PostUsageRequest.public_key)
}
inline void PostUsageRequest::set_public_key(const char* value, size_t size) {
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PostUsageRequest.public_key)
}
inline std::string* PostUsageRequest::_internal_mutable_public_key() {
  
  return public_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PostUsageRequest::release_public_key() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostUsageRequest.public_key)
  
  return public_key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PostUsageRequest::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    
  } else {
    
  }
  public_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostUsageRequest.public_key)
}

// bytes signature = 4;
inline void PostUsageRequest::clear_signature() {
  signature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PostUsageRequest::signature() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostUsageRequest.signature)
  return _internal_signature();
}
inline void PostUsageRequest::set_signature(const std::string& value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PostUsageRequest.signature)
}
inline std::string* PostUsageRequest::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostUsageRequest.signature)
  return _internal_mutable_signature();
}
inline const std::string& PostUsageRequest::_internal_signature() const {
  return signature_.GetNoArena();
}
inline void PostUsageRequest::_internal_set_signature(const std::string& value) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PostUsageRequest::set_signature(std::string&& value) {
  
  signature_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.PostUsageRequest.signature)
}
inline void PostUsageRequest::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.PostUsageRequest.signature)
}
inline void PostUsageRequest::set_signature(const void* value, size_t size) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PostUsageRequest.signature)
}
inline std::string* PostUsageRequest::_internal_mutable_signature() {
  
  return signature_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PostUsageRequest::release_signature() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostUsageRequest.signature)
  
  return signature_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PostUsageRequest::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostUsageRequest.signature)
}

// -------------------------------------------------------------------

// PostUsageResponse

// .clarifai.api.status.Status status = 1;
inline bool PostUsageResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool PostUsageResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& PostUsageResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& PostUsageResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostUsageResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* PostUsageResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostUsageResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* PostUsageResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* PostUsageResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostUsageResponse.status)
  return _internal_mutable_status();
}
inline void PostUsageResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostUsageResponse.status)
}

// -------------------------------------------------------------------

// GetUserRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool GetUserRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool GetUserRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& GetUserRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& GetUserRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetUserRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* GetUserRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetUserRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetUserRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* GetUserRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetUserRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void GetUserRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetUserRequest.user_app_id)
}

// -------------------------------------------------------------------

// PostUserConsentRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostUserConsentRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostUserConsentRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostUserConsentRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostUserConsentRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostUserConsentRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* PostUserConsentRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostUserConsentRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostUserConsentRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostUserConsentRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostUserConsentRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void PostUserConsentRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostUserConsentRequest.user_app_id)
}

// bool consent = 2;
inline void PostUserConsentRequest::clear_consent() {
  consent_ = false;
}
inline bool PostUserConsentRequest::_internal_consent() const {
  return consent_;
}
inline bool PostUserConsentRequest::consent() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostUserConsentRequest.consent)
  return _internal_consent();
}
inline void PostUserConsentRequest::_internal_set_consent(bool value) {
  
  consent_ = value;
}
inline void PostUserConsentRequest::set_consent(bool value) {
  _internal_set_consent(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PostUserConsentRequest.consent)
}

// repeated string fields = 3;
inline int PostUserConsentRequest::_internal_fields_size() const {
  return fields_.size();
}
inline int PostUserConsentRequest::fields_size() const {
  return _internal_fields_size();
}
inline void PostUserConsentRequest::clear_fields() {
  fields_.Clear();
}
inline std::string* PostUserConsentRequest::add_fields() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.PostUserConsentRequest.fields)
  return _internal_add_fields();
}
inline const std::string& PostUserConsentRequest::_internal_fields(int index) const {
  return fields_.Get(index);
}
inline const std::string& PostUserConsentRequest::fields(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostUserConsentRequest.fields)
  return _internal_fields(index);
}
inline std::string* PostUserConsentRequest::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostUserConsentRequest.fields)
  return fields_.Mutable(index);
}
inline void PostUserConsentRequest::set_fields(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.PostUserConsentRequest.fields)
  fields_.Mutable(index)->assign(value);
}
inline void PostUserConsentRequest::set_fields(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.PostUserConsentRequest.fields)
  fields_.Mutable(index)->assign(std::move(value));
}
inline void PostUserConsentRequest::set_fields(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.PostUserConsentRequest.fields)
}
inline void PostUserConsentRequest::set_fields(int index, const char* value, size_t size) {
  fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PostUserConsentRequest.fields)
}
inline std::string* PostUserConsentRequest::_internal_add_fields() {
  return fields_.Add();
}
inline void PostUserConsentRequest::add_fields(const std::string& value) {
  fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.PostUserConsentRequest.fields)
}
inline void PostUserConsentRequest::add_fields(std::string&& value) {
  fields_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.PostUserConsentRequest.fields)
}
inline void PostUserConsentRequest::add_fields(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.PostUserConsentRequest.fields)
}
inline void PostUserConsentRequest::add_fields(const char* value, size_t size) {
  fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.PostUserConsentRequest.fields)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PostUserConsentRequest::fields() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostUserConsentRequest.fields)
  return fields_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PostUserConsentRequest::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostUserConsentRequest.fields)
  return &fields_;
}

// -------------------------------------------------------------------

// SingleUserResponse

// .clarifai.api.status.Status status = 1;
inline bool SingleUserResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SingleUserResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& SingleUserResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& SingleUserResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleUserResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* SingleUserResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleUserResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* SingleUserResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* SingleUserResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleUserResponse.status)
  return _internal_mutable_status();
}
inline void SingleUserResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleUserResponse.status)
}

// .clarifai.api.User user = 2;
inline bool SingleUserResponse::_internal_has_user() const {
  return this != internal_default_instance() && user_ != nullptr;
}
inline bool SingleUserResponse::has_user() const {
  return _internal_has_user();
}
inline const ::clarifai::api::User& SingleUserResponse::_internal_user() const {
  const ::clarifai::api::User* p = user_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::User*>(
      &::clarifai::api::_User_default_instance_);
}
inline const ::clarifai::api::User& SingleUserResponse::user() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleUserResponse.user)
  return _internal_user();
}
inline ::clarifai::api::User* SingleUserResponse::release_user() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleUserResponse.user)
  
  ::clarifai::api::User* temp = user_;
  user_ = nullptr;
  return temp;
}
inline ::clarifai::api::User* SingleUserResponse::_internal_mutable_user() {
  
  if (user_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::User>(GetArenaNoVirtual());
    user_ = p;
  }
  return user_;
}
inline ::clarifai::api::User* SingleUserResponse::mutable_user() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleUserResponse.user)
  return _internal_mutable_user();
}
inline void SingleUserResponse::set_allocated_user(::clarifai::api::User* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_);
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleUserResponse.user)
}

// -------------------------------------------------------------------

// MultiUserResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiUserResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiUserResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiUserResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiUserResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiUserResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* MultiUserResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiUserResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiUserResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiUserResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiUserResponse.status)
  return _internal_mutable_status();
}
inline void MultiUserResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiUserResponse.status)
}

// repeated .clarifai.api.User users = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int MultiUserResponse::_internal_users_size() const {
  return users_.size();
}
inline int MultiUserResponse::users_size() const {
  return _internal_users_size();
}
inline ::clarifai::api::User* MultiUserResponse::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiUserResponse.users)
  return users_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::User >*
MultiUserResponse::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiUserResponse.users)
  return &users_;
}
inline const ::clarifai::api::User& MultiUserResponse::_internal_users(int index) const {
  return users_.Get(index);
}
inline const ::clarifai::api::User& MultiUserResponse::users(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiUserResponse.users)
  return _internal_users(index);
}
inline ::clarifai::api::User* MultiUserResponse::_internal_add_users() {
  return users_.Add();
}
inline ::clarifai::api::User* MultiUserResponse::add_users() {
  // @@protoc_insertion_point(field_add:clarifai.api.MultiUserResponse.users)
  return _internal_add_users();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::User >&
MultiUserResponse::users() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiUserResponse.users)
  return users_;
}

// -------------------------------------------------------------------

// PatchUserRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PatchUserRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PatchUserRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PatchUserRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PatchUserRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchUserRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* PatchUserRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchUserRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchUserRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PatchUserRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchUserRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void PatchUserRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchUserRequest.user_app_id)
}

// .clarifai.api.UserInfo info = 2;
inline bool PatchUserRequest::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool PatchUserRequest::has_info() const {
  return _internal_has_info();
}
inline const ::clarifai::api::UserInfo& PatchUserRequest::_internal_info() const {
  const ::clarifai::api::UserInfo* p = info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserInfo*>(
      &::clarifai::api::_UserInfo_default_instance_);
}
inline const ::clarifai::api::UserInfo& PatchUserRequest::info() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchUserRequest.info)
  return _internal_info();
}
inline ::clarifai::api::UserInfo* PatchUserRequest::release_info() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchUserRequest.info)
  
  ::clarifai::api::UserInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserInfo* PatchUserRequest::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserInfo>(GetArenaNoVirtual());
    info_ = p;
  }
  return info_;
}
inline ::clarifai::api::UserInfo* PatchUserRequest::mutable_info() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchUserRequest.info)
  return _internal_mutable_info();
}
inline void PatchUserRequest::set_allocated_info(::clarifai::api::UserInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchUserRequest.info)
}

// .clarifai.api.UserPassword pass = 3;
inline bool PatchUserRequest::_internal_has_pass() const {
  return this != internal_default_instance() && pass_ != nullptr;
}
inline bool PatchUserRequest::has_pass() const {
  return _internal_has_pass();
}
inline const ::clarifai::api::UserPassword& PatchUserRequest::_internal_pass() const {
  const ::clarifai::api::UserPassword* p = pass_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserPassword*>(
      &::clarifai::api::_UserPassword_default_instance_);
}
inline const ::clarifai::api::UserPassword& PatchUserRequest::pass() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchUserRequest.pass)
  return _internal_pass();
}
inline ::clarifai::api::UserPassword* PatchUserRequest::release_pass() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchUserRequest.pass)
  
  ::clarifai::api::UserPassword* temp = pass_;
  pass_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserPassword* PatchUserRequest::_internal_mutable_pass() {
  
  if (pass_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserPassword>(GetArenaNoVirtual());
    pass_ = p;
  }
  return pass_;
}
inline ::clarifai::api::UserPassword* PatchUserRequest::mutable_pass() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchUserRequest.pass)
  return _internal_mutable_pass();
}
inline void PatchUserRequest::set_allocated_pass(::clarifai::api::UserPassword* pass) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pass_);
  }
  if (pass) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pass = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pass, submessage_arena);
    }
    
  } else {
    
  }
  pass_ = pass;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchUserRequest.pass)
}

// .google.protobuf.Struct metadata = 4;
inline bool PatchUserRequest::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool PatchUserRequest::has_metadata() const {
  return _internal_has_metadata();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& PatchUserRequest::_internal_metadata() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& PatchUserRequest::metadata() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchUserRequest.metadata)
  return _internal_metadata();
}
inline PROTOBUF_NAMESPACE_ID::Struct* PatchUserRequest::release_metadata() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchUserRequest.metadata)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* PatchUserRequest::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArenaNoVirtual());
    metadata_ = p;
  }
  return metadata_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* PatchUserRequest::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchUserRequest.metadata)
  return _internal_mutable_metadata();
}
inline void PatchUserRequest::set_allocated_metadata(PROTOBUF_NAMESPACE_ID::Struct* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata)->GetArena();
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchUserRequest.metadata)
}

// .clarifai.api.PatchAction action = 5;
inline bool PatchUserRequest::_internal_has_action() const {
  return this != internal_default_instance() && action_ != nullptr;
}
inline bool PatchUserRequest::has_action() const {
  return _internal_has_action();
}
inline const ::clarifai::api::PatchAction& PatchUserRequest::_internal_action() const {
  const ::clarifai::api::PatchAction* p = action_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::PatchAction*>(
      &::clarifai::api::_PatchAction_default_instance_);
}
inline const ::clarifai::api::PatchAction& PatchUserRequest::action() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchUserRequest.action)
  return _internal_action();
}
inline ::clarifai::api::PatchAction* PatchUserRequest::release_action() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchUserRequest.action)
  
  ::clarifai::api::PatchAction* temp = action_;
  action_ = nullptr;
  return temp;
}
inline ::clarifai::api::PatchAction* PatchUserRequest::_internal_mutable_action() {
  
  if (action_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::PatchAction>(GetArenaNoVirtual());
    action_ = p;
  }
  return action_;
}
inline ::clarifai::api::PatchAction* PatchUserRequest::mutable_action() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchUserRequest.action)
  return _internal_mutable_action();
}
inline void PatchUserRequest::set_allocated_action(::clarifai::api::PatchAction* action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_);
  }
  if (action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action, submessage_arena);
    }
    
  } else {
    
  }
  action_ = action;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchUserRequest.action)
}

// -------------------------------------------------------------------

// PostEmailsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostEmailsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostEmailsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostEmailsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostEmailsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostEmailsRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* PostEmailsRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostEmailsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostEmailsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostEmailsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostEmailsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void PostEmailsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostEmailsRequest.user_app_id)
}

// repeated string emails = 2;
inline int PostEmailsRequest::_internal_emails_size() const {
  return emails_.size();
}
inline int PostEmailsRequest::emails_size() const {
  return _internal_emails_size();
}
inline void PostEmailsRequest::clear_emails() {
  emails_.Clear();
}
inline std::string* PostEmailsRequest::add_emails() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.PostEmailsRequest.emails)
  return _internal_add_emails();
}
inline const std::string& PostEmailsRequest::_internal_emails(int index) const {
  return emails_.Get(index);
}
inline const std::string& PostEmailsRequest::emails(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostEmailsRequest.emails)
  return _internal_emails(index);
}
inline std::string* PostEmailsRequest::mutable_emails(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostEmailsRequest.emails)
  return emails_.Mutable(index);
}
inline void PostEmailsRequest::set_emails(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.PostEmailsRequest.emails)
  emails_.Mutable(index)->assign(value);
}
inline void PostEmailsRequest::set_emails(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.PostEmailsRequest.emails)
  emails_.Mutable(index)->assign(std::move(value));
}
inline void PostEmailsRequest::set_emails(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  emails_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.PostEmailsRequest.emails)
}
inline void PostEmailsRequest::set_emails(int index, const char* value, size_t size) {
  emails_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PostEmailsRequest.emails)
}
inline std::string* PostEmailsRequest::_internal_add_emails() {
  return emails_.Add();
}
inline void PostEmailsRequest::add_emails(const std::string& value) {
  emails_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.PostEmailsRequest.emails)
}
inline void PostEmailsRequest::add_emails(std::string&& value) {
  emails_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.PostEmailsRequest.emails)
}
inline void PostEmailsRequest::add_emails(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  emails_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.PostEmailsRequest.emails)
}
inline void PostEmailsRequest::add_emails(const char* value, size_t size) {
  emails_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.PostEmailsRequest.emails)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PostEmailsRequest::emails() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostEmailsRequest.emails)
  return emails_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PostEmailsRequest::mutable_emails() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostEmailsRequest.emails)
  return &emails_;
}

// -------------------------------------------------------------------

// SingleEmailResponse

// .clarifai.api.status.Status status = 1;
inline bool SingleEmailResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SingleEmailResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& SingleEmailResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& SingleEmailResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleEmailResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* SingleEmailResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleEmailResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* SingleEmailResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* SingleEmailResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleEmailResponse.status)
  return _internal_mutable_status();
}
inline void SingleEmailResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleEmailResponse.status)
}

// .clarifai.api.EmailAddress email = 2;
inline bool SingleEmailResponse::_internal_has_email() const {
  return this != internal_default_instance() && email_ != nullptr;
}
inline bool SingleEmailResponse::has_email() const {
  return _internal_has_email();
}
inline const ::clarifai::api::EmailAddress& SingleEmailResponse::_internal_email() const {
  const ::clarifai::api::EmailAddress* p = email_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::EmailAddress*>(
      &::clarifai::api::_EmailAddress_default_instance_);
}
inline const ::clarifai::api::EmailAddress& SingleEmailResponse::email() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleEmailResponse.email)
  return _internal_email();
}
inline ::clarifai::api::EmailAddress* SingleEmailResponse::release_email() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleEmailResponse.email)
  
  ::clarifai::api::EmailAddress* temp = email_;
  email_ = nullptr;
  return temp;
}
inline ::clarifai::api::EmailAddress* SingleEmailResponse::_internal_mutable_email() {
  
  if (email_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::EmailAddress>(GetArenaNoVirtual());
    email_ = p;
  }
  return email_;
}
inline ::clarifai::api::EmailAddress* SingleEmailResponse::mutable_email() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleEmailResponse.email)
  return _internal_mutable_email();
}
inline void SingleEmailResponse::set_allocated_email(::clarifai::api::EmailAddress* email) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(email_);
  }
  if (email) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      email = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, email, submessage_arena);
    }
    
  } else {
    
  }
  email_ = email;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleEmailResponse.email)
}

// -------------------------------------------------------------------

// MultipleEmailResponse

// .clarifai.api.status.Status status = 1;
inline bool MultipleEmailResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultipleEmailResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultipleEmailResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultipleEmailResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultipleEmailResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* MultipleEmailResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultipleEmailResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultipleEmailResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultipleEmailResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultipleEmailResponse.status)
  return _internal_mutable_status();
}
inline void MultipleEmailResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultipleEmailResponse.status)
}

// repeated .clarifai.api.EmailAddress emails = 2;
inline int MultipleEmailResponse::_internal_emails_size() const {
  return emails_.size();
}
inline int MultipleEmailResponse::emails_size() const {
  return _internal_emails_size();
}
inline ::clarifai::api::EmailAddress* MultipleEmailResponse::mutable_emails(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultipleEmailResponse.emails)
  return emails_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::EmailAddress >*
MultipleEmailResponse::mutable_emails() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultipleEmailResponse.emails)
  return &emails_;
}
inline const ::clarifai::api::EmailAddress& MultipleEmailResponse::_internal_emails(int index) const {
  return emails_.Get(index);
}
inline const ::clarifai::api::EmailAddress& MultipleEmailResponse::emails(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultipleEmailResponse.emails)
  return _internal_emails(index);
}
inline ::clarifai::api::EmailAddress* MultipleEmailResponse::_internal_add_emails() {
  return emails_.Add();
}
inline ::clarifai::api::EmailAddress* MultipleEmailResponse::add_emails() {
  // @@protoc_insertion_point(field_add:clarifai.api.MultipleEmailResponse.emails)
  return _internal_add_emails();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::EmailAddress >&
MultipleEmailResponse::emails() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultipleEmailResponse.emails)
  return emails_;
}

// -------------------------------------------------------------------

// ListEmailsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool ListEmailsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool ListEmailsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& ListEmailsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& ListEmailsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListEmailsRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* ListEmailsRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListEmailsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListEmailsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* ListEmailsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListEmailsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void ListEmailsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListEmailsRequest.user_app_id)
}

// -------------------------------------------------------------------

// PostResendVerifyRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostResendVerifyRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostResendVerifyRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostResendVerifyRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostResendVerifyRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostResendVerifyRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* PostResendVerifyRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostResendVerifyRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostResendVerifyRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostResendVerifyRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostResendVerifyRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void PostResendVerifyRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostResendVerifyRequest.user_app_id)
}

// string email = 2;
inline void PostResendVerifyRequest::clear_email() {
  email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PostResendVerifyRequest::email() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostResendVerifyRequest.email)
  return _internal_email();
}
inline void PostResendVerifyRequest::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PostResendVerifyRequest.email)
}
inline std::string* PostResendVerifyRequest::mutable_email() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostResendVerifyRequest.email)
  return _internal_mutable_email();
}
inline const std::string& PostResendVerifyRequest::_internal_email() const {
  return email_.GetNoArena();
}
inline void PostResendVerifyRequest::_internal_set_email(const std::string& value) {
  
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PostResendVerifyRequest::set_email(std::string&& value) {
  
  email_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.PostResendVerifyRequest.email)
}
inline void PostResendVerifyRequest::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.PostResendVerifyRequest.email)
}
inline void PostResendVerifyRequest::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PostResendVerifyRequest.email)
}
inline std::string* PostResendVerifyRequest::_internal_mutable_email() {
  
  return email_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PostResendVerifyRequest::release_email() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostResendVerifyRequest.email)
  
  return email_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PostResendVerifyRequest::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostResendVerifyRequest.email)
}

// -------------------------------------------------------------------

// SingleResendVerifyResponse

// .clarifai.api.status.Status status = 1;
inline bool SingleResendVerifyResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SingleResendVerifyResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& SingleResendVerifyResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& SingleResendVerifyResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleResendVerifyResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* SingleResendVerifyResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleResendVerifyResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* SingleResendVerifyResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* SingleResendVerifyResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleResendVerifyResponse.status)
  return _internal_mutable_status();
}
inline void SingleResendVerifyResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleResendVerifyResponse.status)
}

// -------------------------------------------------------------------

// DeleteEmailRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool DeleteEmailRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool DeleteEmailRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& DeleteEmailRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& DeleteEmailRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteEmailRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* DeleteEmailRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteEmailRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteEmailRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* DeleteEmailRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteEmailRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void DeleteEmailRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteEmailRequest.user_app_id)
}

// string email = 2;
inline void DeleteEmailRequest::clear_email() {
  email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeleteEmailRequest::email() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteEmailRequest.email)
  return _internal_email();
}
inline void DeleteEmailRequest::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteEmailRequest.email)
}
inline std::string* DeleteEmailRequest::mutable_email() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteEmailRequest.email)
  return _internal_mutable_email();
}
inline const std::string& DeleteEmailRequest::_internal_email() const {
  return email_.GetNoArena();
}
inline void DeleteEmailRequest::_internal_set_email(const std::string& value) {
  
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DeleteEmailRequest::set_email(std::string&& value) {
  
  email_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.DeleteEmailRequest.email)
}
inline void DeleteEmailRequest::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.DeleteEmailRequest.email)
}
inline void DeleteEmailRequest::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.DeleteEmailRequest.email)
}
inline std::string* DeleteEmailRequest::_internal_mutable_email() {
  
  return email_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeleteEmailRequest::release_email() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteEmailRequest.email)
  
  return email_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteEmailRequest::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteEmailRequest.email)
}

// -------------------------------------------------------------------

// PostPrimaryEmailRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostPrimaryEmailRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostPrimaryEmailRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostPrimaryEmailRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostPrimaryEmailRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostPrimaryEmailRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* PostPrimaryEmailRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostPrimaryEmailRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostPrimaryEmailRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostPrimaryEmailRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostPrimaryEmailRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void PostPrimaryEmailRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostPrimaryEmailRequest.user_app_id)
}

// string email = 2;
inline void PostPrimaryEmailRequest::clear_email() {
  email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PostPrimaryEmailRequest::email() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostPrimaryEmailRequest.email)
  return _internal_email();
}
inline void PostPrimaryEmailRequest::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PostPrimaryEmailRequest.email)
}
inline std::string* PostPrimaryEmailRequest::mutable_email() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostPrimaryEmailRequest.email)
  return _internal_mutable_email();
}
inline const std::string& PostPrimaryEmailRequest::_internal_email() const {
  return email_.GetNoArena();
}
inline void PostPrimaryEmailRequest::_internal_set_email(const std::string& value) {
  
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PostPrimaryEmailRequest::set_email(std::string&& value) {
  
  email_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.PostPrimaryEmailRequest.email)
}
inline void PostPrimaryEmailRequest::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.PostPrimaryEmailRequest.email)
}
inline void PostPrimaryEmailRequest::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PostPrimaryEmailRequest.email)
}
inline std::string* PostPrimaryEmailRequest::_internal_mutable_email() {
  
  return email_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PostPrimaryEmailRequest::release_email() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostPrimaryEmailRequest.email)
  
  return email_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PostPrimaryEmailRequest::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostPrimaryEmailRequest.email)
}

// -------------------------------------------------------------------

// PostValidatePasswordRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostValidatePasswordRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostValidatePasswordRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostValidatePasswordRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostValidatePasswordRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostValidatePasswordRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* PostValidatePasswordRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostValidatePasswordRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostValidatePasswordRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostValidatePasswordRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostValidatePasswordRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void PostValidatePasswordRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostValidatePasswordRequest.user_app_id)
}

// .clarifai.api.Password password = 2;
inline bool PostValidatePasswordRequest::_internal_has_password() const {
  return this != internal_default_instance() && password_ != nullptr;
}
inline bool PostValidatePasswordRequest::has_password() const {
  return _internal_has_password();
}
inline const ::clarifai::api::Password& PostValidatePasswordRequest::_internal_password() const {
  const ::clarifai::api::Password* p = password_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Password*>(
      &::clarifai::api::_Password_default_instance_);
}
inline const ::clarifai::api::Password& PostValidatePasswordRequest::password() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostValidatePasswordRequest.password)
  return _internal_password();
}
inline ::clarifai::api::Password* PostValidatePasswordRequest::release_password() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostValidatePasswordRequest.password)
  
  ::clarifai::api::Password* temp = password_;
  password_ = nullptr;
  return temp;
}
inline ::clarifai::api::Password* PostValidatePasswordRequest::_internal_mutable_password() {
  
  if (password_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Password>(GetArenaNoVirtual());
    password_ = p;
  }
  return password_;
}
inline ::clarifai::api::Password* PostValidatePasswordRequest::mutable_password() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostValidatePasswordRequest.password)
  return _internal_mutable_password();
}
inline void PostValidatePasswordRequest::set_allocated_password(::clarifai::api::Password* password) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(password_);
  }
  if (password) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      password = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, password, submessage_arena);
    }
    
  } else {
    
  }
  password_ = password;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostValidatePasswordRequest.password)
}

// -------------------------------------------------------------------

// SinglePasswordValidationResponse

// .clarifai.api.status.Status status = 1;
inline bool SinglePasswordValidationResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SinglePasswordValidationResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& SinglePasswordValidationResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& SinglePasswordValidationResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SinglePasswordValidationResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* SinglePasswordValidationResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.SinglePasswordValidationResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* SinglePasswordValidationResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* SinglePasswordValidationResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SinglePasswordValidationResponse.status)
  return _internal_mutable_status();
}
inline void SinglePasswordValidationResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SinglePasswordValidationResponse.status)
}

// .clarifai.api.PasswordViolations password_violations = 2;
inline bool SinglePasswordValidationResponse::_internal_has_password_violations() const {
  return this != internal_default_instance() && password_violations_ != nullptr;
}
inline bool SinglePasswordValidationResponse::has_password_violations() const {
  return _internal_has_password_violations();
}
inline const ::clarifai::api::PasswordViolations& SinglePasswordValidationResponse::_internal_password_violations() const {
  const ::clarifai::api::PasswordViolations* p = password_violations_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::PasswordViolations*>(
      &::clarifai::api::_PasswordViolations_default_instance_);
}
inline const ::clarifai::api::PasswordViolations& SinglePasswordValidationResponse::password_violations() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SinglePasswordValidationResponse.password_violations)
  return _internal_password_violations();
}
inline ::clarifai::api::PasswordViolations* SinglePasswordValidationResponse::release_password_violations() {
  // @@protoc_insertion_point(field_release:clarifai.api.SinglePasswordValidationResponse.password_violations)
  
  ::clarifai::api::PasswordViolations* temp = password_violations_;
  password_violations_ = nullptr;
  return temp;
}
inline ::clarifai::api::PasswordViolations* SinglePasswordValidationResponse::_internal_mutable_password_violations() {
  
  if (password_violations_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::PasswordViolations>(GetArenaNoVirtual());
    password_violations_ = p;
  }
  return password_violations_;
}
inline ::clarifai::api::PasswordViolations* SinglePasswordValidationResponse::mutable_password_violations() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SinglePasswordValidationResponse.password_violations)
  return _internal_mutable_password_violations();
}
inline void SinglePasswordValidationResponse::set_allocated_password_violations(::clarifai::api::PasswordViolations* password_violations) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(password_violations_);
  }
  if (password_violations) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      password_violations = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, password_violations, submessage_arena);
    }
    
  } else {
    
  }
  password_violations_ = password_violations;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SinglePasswordValidationResponse.password_violations)
}

// -------------------------------------------------------------------

// ListPasswordPoliciesRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool ListPasswordPoliciesRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool ListPasswordPoliciesRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& ListPasswordPoliciesRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& ListPasswordPoliciesRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListPasswordPoliciesRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* ListPasswordPoliciesRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListPasswordPoliciesRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListPasswordPoliciesRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* ListPasswordPoliciesRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListPasswordPoliciesRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void ListPasswordPoliciesRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListPasswordPoliciesRequest.user_app_id)
}

// repeated string user_ids = 2;
inline int ListPasswordPoliciesRequest::_internal_user_ids_size() const {
  return user_ids_.size();
}
inline int ListPasswordPoliciesRequest::user_ids_size() const {
  return _internal_user_ids_size();
}
inline void ListPasswordPoliciesRequest::clear_user_ids() {
  user_ids_.Clear();
}
inline std::string* ListPasswordPoliciesRequest::add_user_ids() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.ListPasswordPoliciesRequest.user_ids)
  return _internal_add_user_ids();
}
inline const std::string& ListPasswordPoliciesRequest::_internal_user_ids(int index) const {
  return user_ids_.Get(index);
}
inline const std::string& ListPasswordPoliciesRequest::user_ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListPasswordPoliciesRequest.user_ids)
  return _internal_user_ids(index);
}
inline std::string* ListPasswordPoliciesRequest::mutable_user_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListPasswordPoliciesRequest.user_ids)
  return user_ids_.Mutable(index);
}
inline void ListPasswordPoliciesRequest::set_user_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.ListPasswordPoliciesRequest.user_ids)
  user_ids_.Mutable(index)->assign(value);
}
inline void ListPasswordPoliciesRequest::set_user_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.ListPasswordPoliciesRequest.user_ids)
  user_ids_.Mutable(index)->assign(std::move(value));
}
inline void ListPasswordPoliciesRequest::set_user_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  user_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.ListPasswordPoliciesRequest.user_ids)
}
inline void ListPasswordPoliciesRequest::set_user_ids(int index, const char* value, size_t size) {
  user_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ListPasswordPoliciesRequest.user_ids)
}
inline std::string* ListPasswordPoliciesRequest::_internal_add_user_ids() {
  return user_ids_.Add();
}
inline void ListPasswordPoliciesRequest::add_user_ids(const std::string& value) {
  user_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.ListPasswordPoliciesRequest.user_ids)
}
inline void ListPasswordPoliciesRequest::add_user_ids(std::string&& value) {
  user_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.ListPasswordPoliciesRequest.user_ids)
}
inline void ListPasswordPoliciesRequest::add_user_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  user_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.ListPasswordPoliciesRequest.user_ids)
}
inline void ListPasswordPoliciesRequest::add_user_ids(const char* value, size_t size) {
  user_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.ListPasswordPoliciesRequest.user_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListPasswordPoliciesRequest::user_ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.ListPasswordPoliciesRequest.user_ids)
  return user_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListPasswordPoliciesRequest::mutable_user_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.ListPasswordPoliciesRequest.user_ids)
  return &user_ids_;
}

// repeated string organization_ids = 3;
inline int ListPasswordPoliciesRequest::_internal_organization_ids_size() const {
  return organization_ids_.size();
}
inline int ListPasswordPoliciesRequest::organization_ids_size() const {
  return _internal_organization_ids_size();
}
inline void ListPasswordPoliciesRequest::clear_organization_ids() {
  organization_ids_.Clear();
}
inline std::string* ListPasswordPoliciesRequest::add_organization_ids() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.ListPasswordPoliciesRequest.organization_ids)
  return _internal_add_organization_ids();
}
inline const std::string& ListPasswordPoliciesRequest::_internal_organization_ids(int index) const {
  return organization_ids_.Get(index);
}
inline const std::string& ListPasswordPoliciesRequest::organization_ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListPasswordPoliciesRequest.organization_ids)
  return _internal_organization_ids(index);
}
inline std::string* ListPasswordPoliciesRequest::mutable_organization_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListPasswordPoliciesRequest.organization_ids)
  return organization_ids_.Mutable(index);
}
inline void ListPasswordPoliciesRequest::set_organization_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.ListPasswordPoliciesRequest.organization_ids)
  organization_ids_.Mutable(index)->assign(value);
}
inline void ListPasswordPoliciesRequest::set_organization_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.ListPasswordPoliciesRequest.organization_ids)
  organization_ids_.Mutable(index)->assign(std::move(value));
}
inline void ListPasswordPoliciesRequest::set_organization_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  organization_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.ListPasswordPoliciesRequest.organization_ids)
}
inline void ListPasswordPoliciesRequest::set_organization_ids(int index, const char* value, size_t size) {
  organization_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ListPasswordPoliciesRequest.organization_ids)
}
inline std::string* ListPasswordPoliciesRequest::_internal_add_organization_ids() {
  return organization_ids_.Add();
}
inline void ListPasswordPoliciesRequest::add_organization_ids(const std::string& value) {
  organization_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.ListPasswordPoliciesRequest.organization_ids)
}
inline void ListPasswordPoliciesRequest::add_organization_ids(std::string&& value) {
  organization_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.ListPasswordPoliciesRequest.organization_ids)
}
inline void ListPasswordPoliciesRequest::add_organization_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  organization_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.ListPasswordPoliciesRequest.organization_ids)
}
inline void ListPasswordPoliciesRequest::add_organization_ids(const char* value, size_t size) {
  organization_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.ListPasswordPoliciesRequest.organization_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListPasswordPoliciesRequest::organization_ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.ListPasswordPoliciesRequest.organization_ids)
  return organization_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListPasswordPoliciesRequest::mutable_organization_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.ListPasswordPoliciesRequest.organization_ids)
  return &organization_ids_;
}

// uint32 page = 4;
inline void ListPasswordPoliciesRequest::clear_page() {
  page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListPasswordPoliciesRequest::_internal_page() const {
  return page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListPasswordPoliciesRequest::page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListPasswordPoliciesRequest.page)
  return _internal_page();
}
inline void ListPasswordPoliciesRequest::_internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  page_ = value;
}
inline void ListPasswordPoliciesRequest::set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListPasswordPoliciesRequest.page)
}

// uint32 per_page = 5;
inline void ListPasswordPoliciesRequest::clear_per_page() {
  per_page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListPasswordPoliciesRequest::_internal_per_page() const {
  return per_page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListPasswordPoliciesRequest::per_page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListPasswordPoliciesRequest.per_page)
  return _internal_per_page();
}
inline void ListPasswordPoliciesRequest::_internal_set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  per_page_ = value;
}
inline void ListPasswordPoliciesRequest::set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_per_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListPasswordPoliciesRequest.per_page)
}

// -------------------------------------------------------------------

// PostPasswordPoliciesRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostPasswordPoliciesRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostPasswordPoliciesRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostPasswordPoliciesRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostPasswordPoliciesRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostPasswordPoliciesRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* PostPasswordPoliciesRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostPasswordPoliciesRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostPasswordPoliciesRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostPasswordPoliciesRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostPasswordPoliciesRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void PostPasswordPoliciesRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostPasswordPoliciesRequest.user_app_id)
}

// repeated .clarifai.api.PasswordPolicy password_policies = 2;
inline int PostPasswordPoliciesRequest::_internal_password_policies_size() const {
  return password_policies_.size();
}
inline int PostPasswordPoliciesRequest::password_policies_size() const {
  return _internal_password_policies_size();
}
inline ::clarifai::api::PasswordPolicy* PostPasswordPoliciesRequest::mutable_password_policies(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostPasswordPoliciesRequest.password_policies)
  return password_policies_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::PasswordPolicy >*
PostPasswordPoliciesRequest::mutable_password_policies() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostPasswordPoliciesRequest.password_policies)
  return &password_policies_;
}
inline const ::clarifai::api::PasswordPolicy& PostPasswordPoliciesRequest::_internal_password_policies(int index) const {
  return password_policies_.Get(index);
}
inline const ::clarifai::api::PasswordPolicy& PostPasswordPoliciesRequest::password_policies(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostPasswordPoliciesRequest.password_policies)
  return _internal_password_policies(index);
}
inline ::clarifai::api::PasswordPolicy* PostPasswordPoliciesRequest::_internal_add_password_policies() {
  return password_policies_.Add();
}
inline ::clarifai::api::PasswordPolicy* PostPasswordPoliciesRequest::add_password_policies() {
  // @@protoc_insertion_point(field_add:clarifai.api.PostPasswordPoliciesRequest.password_policies)
  return _internal_add_password_policies();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::PasswordPolicy >&
PostPasswordPoliciesRequest::password_policies() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostPasswordPoliciesRequest.password_policies)
  return password_policies_;
}

// -------------------------------------------------------------------

// PatchPasswordPoliciesRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PatchPasswordPoliciesRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PatchPasswordPoliciesRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PatchPasswordPoliciesRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PatchPasswordPoliciesRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchPasswordPoliciesRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* PatchPasswordPoliciesRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchPasswordPoliciesRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchPasswordPoliciesRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PatchPasswordPoliciesRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchPasswordPoliciesRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void PatchPasswordPoliciesRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchPasswordPoliciesRequest.user_app_id)
}

// repeated .clarifai.api.PasswordPolicy password_policies = 2;
inline int PatchPasswordPoliciesRequest::_internal_password_policies_size() const {
  return password_policies_.size();
}
inline int PatchPasswordPoliciesRequest::password_policies_size() const {
  return _internal_password_policies_size();
}
inline ::clarifai::api::PasswordPolicy* PatchPasswordPoliciesRequest::mutable_password_policies(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchPasswordPoliciesRequest.password_policies)
  return password_policies_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::PasswordPolicy >*
PatchPasswordPoliciesRequest::mutable_password_policies() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PatchPasswordPoliciesRequest.password_policies)
  return &password_policies_;
}
inline const ::clarifai::api::PasswordPolicy& PatchPasswordPoliciesRequest::_internal_password_policies(int index) const {
  return password_policies_.Get(index);
}
inline const ::clarifai::api::PasswordPolicy& PatchPasswordPoliciesRequest::password_policies(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchPasswordPoliciesRequest.password_policies)
  return _internal_password_policies(index);
}
inline ::clarifai::api::PasswordPolicy* PatchPasswordPoliciesRequest::_internal_add_password_policies() {
  return password_policies_.Add();
}
inline ::clarifai::api::PasswordPolicy* PatchPasswordPoliciesRequest::add_password_policies() {
  // @@protoc_insertion_point(field_add:clarifai.api.PatchPasswordPoliciesRequest.password_policies)
  return _internal_add_password_policies();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::PasswordPolicy >&
PatchPasswordPoliciesRequest::password_policies() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PatchPasswordPoliciesRequest.password_policies)
  return password_policies_;
}

// string action = 3;
inline void PatchPasswordPoliciesRequest::clear_action() {
  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PatchPasswordPoliciesRequest::action() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchPasswordPoliciesRequest.action)
  return _internal_action();
}
inline void PatchPasswordPoliciesRequest::set_action(const std::string& value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PatchPasswordPoliciesRequest.action)
}
inline std::string* PatchPasswordPoliciesRequest::mutable_action() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchPasswordPoliciesRequest.action)
  return _internal_mutable_action();
}
inline const std::string& PatchPasswordPoliciesRequest::_internal_action() const {
  return action_.GetNoArena();
}
inline void PatchPasswordPoliciesRequest::_internal_set_action(const std::string& value) {
  
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PatchPasswordPoliciesRequest::set_action(std::string&& value) {
  
  action_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.PatchPasswordPoliciesRequest.action)
}
inline void PatchPasswordPoliciesRequest::set_action(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.PatchPasswordPoliciesRequest.action)
}
inline void PatchPasswordPoliciesRequest::set_action(const char* value, size_t size) {
  
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PatchPasswordPoliciesRequest.action)
}
inline std::string* PatchPasswordPoliciesRequest::_internal_mutable_action() {
  
  return action_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PatchPasswordPoliciesRequest::release_action() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchPasswordPoliciesRequest.action)
  
  return action_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PatchPasswordPoliciesRequest::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchPasswordPoliciesRequest.action)
}

// -------------------------------------------------------------------

// DeletePasswordPoliciesRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool DeletePasswordPoliciesRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool DeletePasswordPoliciesRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& DeletePasswordPoliciesRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& DeletePasswordPoliciesRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeletePasswordPoliciesRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* DeletePasswordPoliciesRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeletePasswordPoliciesRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeletePasswordPoliciesRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* DeletePasswordPoliciesRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeletePasswordPoliciesRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void DeletePasswordPoliciesRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeletePasswordPoliciesRequest.user_app_id)
}

// repeated string ids = 2;
inline int DeletePasswordPoliciesRequest::_internal_ids_size() const {
  return ids_.size();
}
inline int DeletePasswordPoliciesRequest::ids_size() const {
  return _internal_ids_size();
}
inline void DeletePasswordPoliciesRequest::clear_ids() {
  ids_.Clear();
}
inline std::string* DeletePasswordPoliciesRequest::add_ids() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.DeletePasswordPoliciesRequest.ids)
  return _internal_add_ids();
}
inline const std::string& DeletePasswordPoliciesRequest::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const std::string& DeletePasswordPoliciesRequest::ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeletePasswordPoliciesRequest.ids)
  return _internal_ids(index);
}
inline std::string* DeletePasswordPoliciesRequest::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeletePasswordPoliciesRequest.ids)
  return ids_.Mutable(index);
}
inline void DeletePasswordPoliciesRequest::set_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.DeletePasswordPoliciesRequest.ids)
  ids_.Mutable(index)->assign(value);
}
inline void DeletePasswordPoliciesRequest::set_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.DeletePasswordPoliciesRequest.ids)
  ids_.Mutable(index)->assign(std::move(value));
}
inline void DeletePasswordPoliciesRequest::set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.DeletePasswordPoliciesRequest.ids)
}
inline void DeletePasswordPoliciesRequest::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.DeletePasswordPoliciesRequest.ids)
}
inline std::string* DeletePasswordPoliciesRequest::_internal_add_ids() {
  return ids_.Add();
}
inline void DeletePasswordPoliciesRequest::add_ids(const std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.DeletePasswordPoliciesRequest.ids)
}
inline void DeletePasswordPoliciesRequest::add_ids(std::string&& value) {
  ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.DeletePasswordPoliciesRequest.ids)
}
inline void DeletePasswordPoliciesRequest::add_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.DeletePasswordPoliciesRequest.ids)
}
inline void DeletePasswordPoliciesRequest::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.DeletePasswordPoliciesRequest.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeletePasswordPoliciesRequest::ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.DeletePasswordPoliciesRequest.ids)
  return ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeletePasswordPoliciesRequest::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.DeletePasswordPoliciesRequest.ids)
  return &ids_;
}

// -------------------------------------------------------------------

// MultiplePasswordPoliciesResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiplePasswordPoliciesResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiplePasswordPoliciesResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiplePasswordPoliciesResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiplePasswordPoliciesResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiplePasswordPoliciesResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* MultiplePasswordPoliciesResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiplePasswordPoliciesResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiplePasswordPoliciesResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiplePasswordPoliciesResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiplePasswordPoliciesResponse.status)
  return _internal_mutable_status();
}
inline void MultiplePasswordPoliciesResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiplePasswordPoliciesResponse.status)
}

// repeated .clarifai.api.PasswordPolicy password_policies = 2;
inline int MultiplePasswordPoliciesResponse::_internal_password_policies_size() const {
  return password_policies_.size();
}
inline int MultiplePasswordPoliciesResponse::password_policies_size() const {
  return _internal_password_policies_size();
}
inline ::clarifai::api::PasswordPolicy* MultiplePasswordPoliciesResponse::mutable_password_policies(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiplePasswordPoliciesResponse.password_policies)
  return password_policies_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::PasswordPolicy >*
MultiplePasswordPoliciesResponse::mutable_password_policies() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiplePasswordPoliciesResponse.password_policies)
  return &password_policies_;
}
inline const ::clarifai::api::PasswordPolicy& MultiplePasswordPoliciesResponse::_internal_password_policies(int index) const {
  return password_policies_.Get(index);
}
inline const ::clarifai::api::PasswordPolicy& MultiplePasswordPoliciesResponse::password_policies(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiplePasswordPoliciesResponse.password_policies)
  return _internal_password_policies(index);
}
inline ::clarifai::api::PasswordPolicy* MultiplePasswordPoliciesResponse::_internal_add_password_policies() {
  return password_policies_.Add();
}
inline ::clarifai::api::PasswordPolicy* MultiplePasswordPoliciesResponse::add_password_policies() {
  // @@protoc_insertion_point(field_add:clarifai.api.MultiplePasswordPoliciesResponse.password_policies)
  return _internal_add_password_policies();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::PasswordPolicy >&
MultiplePasswordPoliciesResponse::password_policies() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiplePasswordPoliciesResponse.password_policies)
  return password_policies_;
}

// -------------------------------------------------------------------

// GetVocabRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool GetVocabRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool GetVocabRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& GetVocabRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& GetVocabRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetVocabRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* GetVocabRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetVocabRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetVocabRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* GetVocabRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetVocabRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void GetVocabRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetVocabRequest.user_app_id)
}

// string vocab_id = 2;
inline void GetVocabRequest::clear_vocab_id() {
  vocab_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetVocabRequest::vocab_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetVocabRequest.vocab_id)
  return _internal_vocab_id();
}
inline void GetVocabRequest::set_vocab_id(const std::string& value) {
  _internal_set_vocab_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.GetVocabRequest.vocab_id)
}
inline std::string* GetVocabRequest::mutable_vocab_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetVocabRequest.vocab_id)
  return _internal_mutable_vocab_id();
}
inline const std::string& GetVocabRequest::_internal_vocab_id() const {
  return vocab_id_.GetNoArena();
}
inline void GetVocabRequest::_internal_set_vocab_id(const std::string& value) {
  
  vocab_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetVocabRequest::set_vocab_id(std::string&& value) {
  
  vocab_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.GetVocabRequest.vocab_id)
}
inline void GetVocabRequest::set_vocab_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vocab_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.GetVocabRequest.vocab_id)
}
inline void GetVocabRequest::set_vocab_id(const char* value, size_t size) {
  
  vocab_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.GetVocabRequest.vocab_id)
}
inline std::string* GetVocabRequest::_internal_mutable_vocab_id() {
  
  return vocab_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetVocabRequest::release_vocab_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetVocabRequest.vocab_id)
  
  return vocab_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetVocabRequest::set_allocated_vocab_id(std::string* vocab_id) {
  if (vocab_id != nullptr) {
    
  } else {
    
  }
  vocab_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vocab_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetVocabRequest.vocab_id)
}

// -------------------------------------------------------------------

// ListVocabsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool ListVocabsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool ListVocabsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& ListVocabsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& ListVocabsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListVocabsRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* ListVocabsRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListVocabsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListVocabsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* ListVocabsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListVocabsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void ListVocabsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListVocabsRequest.user_app_id)
}

// uint32 page = 2;
inline void ListVocabsRequest::clear_page() {
  page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListVocabsRequest::_internal_page() const {
  return page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListVocabsRequest::page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListVocabsRequest.page)
  return _internal_page();
}
inline void ListVocabsRequest::_internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  page_ = value;
}
inline void ListVocabsRequest::set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListVocabsRequest.page)
}

// uint32 per_page = 3;
inline void ListVocabsRequest::clear_per_page() {
  per_page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListVocabsRequest::_internal_per_page() const {
  return per_page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListVocabsRequest::per_page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListVocabsRequest.per_page)
  return _internal_per_page();
}
inline void ListVocabsRequest::_internal_set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  per_page_ = value;
}
inline void ListVocabsRequest::set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_per_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListVocabsRequest.per_page)
}

// -------------------------------------------------------------------

// PostVocabsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostVocabsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostVocabsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostVocabsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostVocabsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostVocabsRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* PostVocabsRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostVocabsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostVocabsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostVocabsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostVocabsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void PostVocabsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostVocabsRequest.user_app_id)
}

// repeated .clarifai.api.Vocab vocabs = 2;
inline int PostVocabsRequest::_internal_vocabs_size() const {
  return vocabs_.size();
}
inline int PostVocabsRequest::vocabs_size() const {
  return _internal_vocabs_size();
}
inline ::clarifai::api::Vocab* PostVocabsRequest::mutable_vocabs(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostVocabsRequest.vocabs)
  return vocabs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Vocab >*
PostVocabsRequest::mutable_vocabs() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostVocabsRequest.vocabs)
  return &vocabs_;
}
inline const ::clarifai::api::Vocab& PostVocabsRequest::_internal_vocabs(int index) const {
  return vocabs_.Get(index);
}
inline const ::clarifai::api::Vocab& PostVocabsRequest::vocabs(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostVocabsRequest.vocabs)
  return _internal_vocabs(index);
}
inline ::clarifai::api::Vocab* PostVocabsRequest::_internal_add_vocabs() {
  return vocabs_.Add();
}
inline ::clarifai::api::Vocab* PostVocabsRequest::add_vocabs() {
  // @@protoc_insertion_point(field_add:clarifai.api.PostVocabsRequest.vocabs)
  return _internal_add_vocabs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Vocab >&
PostVocabsRequest::vocabs() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostVocabsRequest.vocabs)
  return vocabs_;
}

// -------------------------------------------------------------------

// PatchVocabsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PatchVocabsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PatchVocabsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PatchVocabsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PatchVocabsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchVocabsRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* PatchVocabsRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchVocabsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchVocabsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PatchVocabsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchVocabsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void PatchVocabsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchVocabsRequest.user_app_id)
}

// repeated .clarifai.api.Vocab vocabs = 2;
inline int PatchVocabsRequest::_internal_vocabs_size() const {
  return vocabs_.size();
}
inline int PatchVocabsRequest::vocabs_size() const {
  return _internal_vocabs_size();
}
inline ::clarifai::api::Vocab* PatchVocabsRequest::mutable_vocabs(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchVocabsRequest.vocabs)
  return vocabs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Vocab >*
PatchVocabsRequest::mutable_vocabs() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PatchVocabsRequest.vocabs)
  return &vocabs_;
}
inline const ::clarifai::api::Vocab& PatchVocabsRequest::_internal_vocabs(int index) const {
  return vocabs_.Get(index);
}
inline const ::clarifai::api::Vocab& PatchVocabsRequest::vocabs(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchVocabsRequest.vocabs)
  return _internal_vocabs(index);
}
inline ::clarifai::api::Vocab* PatchVocabsRequest::_internal_add_vocabs() {
  return vocabs_.Add();
}
inline ::clarifai::api::Vocab* PatchVocabsRequest::add_vocabs() {
  // @@protoc_insertion_point(field_add:clarifai.api.PatchVocabsRequest.vocabs)
  return _internal_add_vocabs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Vocab >&
PatchVocabsRequest::vocabs() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PatchVocabsRequest.vocabs)
  return vocabs_;
}

// string action = 3;
inline void PatchVocabsRequest::clear_action() {
  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PatchVocabsRequest::action() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchVocabsRequest.action)
  return _internal_action();
}
inline void PatchVocabsRequest::set_action(const std::string& value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PatchVocabsRequest.action)
}
inline std::string* PatchVocabsRequest::mutable_action() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchVocabsRequest.action)
  return _internal_mutable_action();
}
inline const std::string& PatchVocabsRequest::_internal_action() const {
  return action_.GetNoArena();
}
inline void PatchVocabsRequest::_internal_set_action(const std::string& value) {
  
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PatchVocabsRequest::set_action(std::string&& value) {
  
  action_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.PatchVocabsRequest.action)
}
inline void PatchVocabsRequest::set_action(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.PatchVocabsRequest.action)
}
inline void PatchVocabsRequest::set_action(const char* value, size_t size) {
  
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PatchVocabsRequest.action)
}
inline std::string* PatchVocabsRequest::_internal_mutable_action() {
  
  return action_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PatchVocabsRequest::release_action() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchVocabsRequest.action)
  
  return action_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PatchVocabsRequest::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchVocabsRequest.action)
}

// -------------------------------------------------------------------

// DeleteVocabRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool DeleteVocabRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool DeleteVocabRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& DeleteVocabRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& DeleteVocabRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteVocabRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* DeleteVocabRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteVocabRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteVocabRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* DeleteVocabRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteVocabRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void DeleteVocabRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteVocabRequest.user_app_id)
}

// string vocab_id = 2;
inline void DeleteVocabRequest::clear_vocab_id() {
  vocab_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeleteVocabRequest::vocab_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteVocabRequest.vocab_id)
  return _internal_vocab_id();
}
inline void DeleteVocabRequest::set_vocab_id(const std::string& value) {
  _internal_set_vocab_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteVocabRequest.vocab_id)
}
inline std::string* DeleteVocabRequest::mutable_vocab_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteVocabRequest.vocab_id)
  return _internal_mutable_vocab_id();
}
inline const std::string& DeleteVocabRequest::_internal_vocab_id() const {
  return vocab_id_.GetNoArena();
}
inline void DeleteVocabRequest::_internal_set_vocab_id(const std::string& value) {
  
  vocab_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DeleteVocabRequest::set_vocab_id(std::string&& value) {
  
  vocab_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.DeleteVocabRequest.vocab_id)
}
inline void DeleteVocabRequest::set_vocab_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vocab_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.DeleteVocabRequest.vocab_id)
}
inline void DeleteVocabRequest::set_vocab_id(const char* value, size_t size) {
  
  vocab_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.DeleteVocabRequest.vocab_id)
}
inline std::string* DeleteVocabRequest::_internal_mutable_vocab_id() {
  
  return vocab_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeleteVocabRequest::release_vocab_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteVocabRequest.vocab_id)
  
  return vocab_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteVocabRequest::set_allocated_vocab_id(std::string* vocab_id) {
  if (vocab_id != nullptr) {
    
  } else {
    
  }
  vocab_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vocab_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteVocabRequest.vocab_id)
}

// -------------------------------------------------------------------

// DeleteVocabsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool DeleteVocabsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool DeleteVocabsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& DeleteVocabsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& DeleteVocabsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteVocabsRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* DeleteVocabsRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteVocabsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteVocabsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* DeleteVocabsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteVocabsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void DeleteVocabsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteVocabsRequest.user_app_id)
}

// repeated string ids = 2;
inline int DeleteVocabsRequest::_internal_ids_size() const {
  return ids_.size();
}
inline int DeleteVocabsRequest::ids_size() const {
  return _internal_ids_size();
}
inline void DeleteVocabsRequest::clear_ids() {
  ids_.Clear();
}
inline std::string* DeleteVocabsRequest::add_ids() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.DeleteVocabsRequest.ids)
  return _internal_add_ids();
}
inline const std::string& DeleteVocabsRequest::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const std::string& DeleteVocabsRequest::ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteVocabsRequest.ids)
  return _internal_ids(index);
}
inline std::string* DeleteVocabsRequest::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteVocabsRequest.ids)
  return ids_.Mutable(index);
}
inline void DeleteVocabsRequest::set_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteVocabsRequest.ids)
  ids_.Mutable(index)->assign(value);
}
inline void DeleteVocabsRequest::set_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteVocabsRequest.ids)
  ids_.Mutable(index)->assign(std::move(value));
}
inline void DeleteVocabsRequest::set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.DeleteVocabsRequest.ids)
}
inline void DeleteVocabsRequest::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.DeleteVocabsRequest.ids)
}
inline std::string* DeleteVocabsRequest::_internal_add_ids() {
  return ids_.Add();
}
inline void DeleteVocabsRequest::add_ids(const std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.DeleteVocabsRequest.ids)
}
inline void DeleteVocabsRequest::add_ids(std::string&& value) {
  ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.DeleteVocabsRequest.ids)
}
inline void DeleteVocabsRequest::add_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.DeleteVocabsRequest.ids)
}
inline void DeleteVocabsRequest::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.DeleteVocabsRequest.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeleteVocabsRequest::ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.DeleteVocabsRequest.ids)
  return ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeleteVocabsRequest::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.DeleteVocabsRequest.ids)
  return &ids_;
}

// bool delete_all = 3;
inline void DeleteVocabsRequest::clear_delete_all() {
  delete_all_ = false;
}
inline bool DeleteVocabsRequest::_internal_delete_all() const {
  return delete_all_;
}
inline bool DeleteVocabsRequest::delete_all() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteVocabsRequest.delete_all)
  return _internal_delete_all();
}
inline void DeleteVocabsRequest::_internal_set_delete_all(bool value) {
  
  delete_all_ = value;
}
inline void DeleteVocabsRequest::set_delete_all(bool value) {
  _internal_set_delete_all(value);
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteVocabsRequest.delete_all)
}

// -------------------------------------------------------------------

// ListVocabConceptsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool ListVocabConceptsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool ListVocabConceptsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& ListVocabConceptsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& ListVocabConceptsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListVocabConceptsRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* ListVocabConceptsRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListVocabConceptsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListVocabConceptsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* ListVocabConceptsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListVocabConceptsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void ListVocabConceptsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListVocabConceptsRequest.user_app_id)
}

// string vocab_id = 2;
inline void ListVocabConceptsRequest::clear_vocab_id() {
  vocab_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ListVocabConceptsRequest::vocab_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListVocabConceptsRequest.vocab_id)
  return _internal_vocab_id();
}
inline void ListVocabConceptsRequest::set_vocab_id(const std::string& value) {
  _internal_set_vocab_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListVocabConceptsRequest.vocab_id)
}
inline std::string* ListVocabConceptsRequest::mutable_vocab_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListVocabConceptsRequest.vocab_id)
  return _internal_mutable_vocab_id();
}
inline const std::string& ListVocabConceptsRequest::_internal_vocab_id() const {
  return vocab_id_.GetNoArena();
}
inline void ListVocabConceptsRequest::_internal_set_vocab_id(const std::string& value) {
  
  vocab_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ListVocabConceptsRequest::set_vocab_id(std::string&& value) {
  
  vocab_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ListVocabConceptsRequest.vocab_id)
}
inline void ListVocabConceptsRequest::set_vocab_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vocab_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.ListVocabConceptsRequest.vocab_id)
}
inline void ListVocabConceptsRequest::set_vocab_id(const char* value, size_t size) {
  
  vocab_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ListVocabConceptsRequest.vocab_id)
}
inline std::string* ListVocabConceptsRequest::_internal_mutable_vocab_id() {
  
  return vocab_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ListVocabConceptsRequest::release_vocab_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListVocabConceptsRequest.vocab_id)
  
  return vocab_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ListVocabConceptsRequest::set_allocated_vocab_id(std::string* vocab_id) {
  if (vocab_id != nullptr) {
    
  } else {
    
  }
  vocab_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vocab_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListVocabConceptsRequest.vocab_id)
}

// uint32 page = 3;
inline void ListVocabConceptsRequest::clear_page() {
  page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListVocabConceptsRequest::_internal_page() const {
  return page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListVocabConceptsRequest::page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListVocabConceptsRequest.page)
  return _internal_page();
}
inline void ListVocabConceptsRequest::_internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  page_ = value;
}
inline void ListVocabConceptsRequest::set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListVocabConceptsRequest.page)
}

// uint32 per_page = 4;
inline void ListVocabConceptsRequest::clear_per_page() {
  per_page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListVocabConceptsRequest::_internal_per_page() const {
  return per_page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListVocabConceptsRequest::per_page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListVocabConceptsRequest.per_page)
  return _internal_per_page();
}
inline void ListVocabConceptsRequest::_internal_set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  per_page_ = value;
}
inline void ListVocabConceptsRequest::set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_per_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListVocabConceptsRequest.per_page)
}

// -------------------------------------------------------------------

// PostVocabConceptsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostVocabConceptsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostVocabConceptsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostVocabConceptsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostVocabConceptsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostVocabConceptsRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* PostVocabConceptsRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostVocabConceptsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostVocabConceptsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostVocabConceptsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostVocabConceptsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void PostVocabConceptsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostVocabConceptsRequest.user_app_id)
}

// string vocab_id = 2;
inline void PostVocabConceptsRequest::clear_vocab_id() {
  vocab_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PostVocabConceptsRequest::vocab_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostVocabConceptsRequest.vocab_id)
  return _internal_vocab_id();
}
inline void PostVocabConceptsRequest::set_vocab_id(const std::string& value) {
  _internal_set_vocab_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PostVocabConceptsRequest.vocab_id)
}
inline std::string* PostVocabConceptsRequest::mutable_vocab_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostVocabConceptsRequest.vocab_id)
  return _internal_mutable_vocab_id();
}
inline const std::string& PostVocabConceptsRequest::_internal_vocab_id() const {
  return vocab_id_.GetNoArena();
}
inline void PostVocabConceptsRequest::_internal_set_vocab_id(const std::string& value) {
  
  vocab_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PostVocabConceptsRequest::set_vocab_id(std::string&& value) {
  
  vocab_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.PostVocabConceptsRequest.vocab_id)
}
inline void PostVocabConceptsRequest::set_vocab_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vocab_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.PostVocabConceptsRequest.vocab_id)
}
inline void PostVocabConceptsRequest::set_vocab_id(const char* value, size_t size) {
  
  vocab_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PostVocabConceptsRequest.vocab_id)
}
inline std::string* PostVocabConceptsRequest::_internal_mutable_vocab_id() {
  
  return vocab_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PostVocabConceptsRequest::release_vocab_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostVocabConceptsRequest.vocab_id)
  
  return vocab_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PostVocabConceptsRequest::set_allocated_vocab_id(std::string* vocab_id) {
  if (vocab_id != nullptr) {
    
  } else {
    
  }
  vocab_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vocab_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostVocabConceptsRequest.vocab_id)
}

// repeated .clarifai.api.Concept concepts = 3;
inline int PostVocabConceptsRequest::_internal_concepts_size() const {
  return concepts_.size();
}
inline int PostVocabConceptsRequest::concepts_size() const {
  return _internal_concepts_size();
}
inline ::clarifai::api::Concept* PostVocabConceptsRequest::mutable_concepts(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostVocabConceptsRequest.concepts)
  return concepts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >*
PostVocabConceptsRequest::mutable_concepts() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostVocabConceptsRequest.concepts)
  return &concepts_;
}
inline const ::clarifai::api::Concept& PostVocabConceptsRequest::_internal_concepts(int index) const {
  return concepts_.Get(index);
}
inline const ::clarifai::api::Concept& PostVocabConceptsRequest::concepts(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostVocabConceptsRequest.concepts)
  return _internal_concepts(index);
}
inline ::clarifai::api::Concept* PostVocabConceptsRequest::_internal_add_concepts() {
  return concepts_.Add();
}
inline ::clarifai::api::Concept* PostVocabConceptsRequest::add_concepts() {
  // @@protoc_insertion_point(field_add:clarifai.api.PostVocabConceptsRequest.concepts)
  return _internal_add_concepts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >&
PostVocabConceptsRequest::concepts() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostVocabConceptsRequest.concepts)
  return concepts_;
}

// -------------------------------------------------------------------

// DeleteVocabConceptRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool DeleteVocabConceptRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool DeleteVocabConceptRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& DeleteVocabConceptRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& DeleteVocabConceptRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteVocabConceptRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* DeleteVocabConceptRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteVocabConceptRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteVocabConceptRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* DeleteVocabConceptRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteVocabConceptRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void DeleteVocabConceptRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteVocabConceptRequest.user_app_id)
}

// string vocab_id = 2;
inline void DeleteVocabConceptRequest::clear_vocab_id() {
  vocab_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeleteVocabConceptRequest::vocab_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteVocabConceptRequest.vocab_id)
  return _internal_vocab_id();
}
inline void DeleteVocabConceptRequest::set_vocab_id(const std::string& value) {
  _internal_set_vocab_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteVocabConceptRequest.vocab_id)
}
inline std::string* DeleteVocabConceptRequest::mutable_vocab_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteVocabConceptRequest.vocab_id)
  return _internal_mutable_vocab_id();
}
inline const std::string& DeleteVocabConceptRequest::_internal_vocab_id() const {
  return vocab_id_.GetNoArena();
}
inline void DeleteVocabConceptRequest::_internal_set_vocab_id(const std::string& value) {
  
  vocab_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DeleteVocabConceptRequest::set_vocab_id(std::string&& value) {
  
  vocab_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.DeleteVocabConceptRequest.vocab_id)
}
inline void DeleteVocabConceptRequest::set_vocab_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vocab_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.DeleteVocabConceptRequest.vocab_id)
}
inline void DeleteVocabConceptRequest::set_vocab_id(const char* value, size_t size) {
  
  vocab_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.DeleteVocabConceptRequest.vocab_id)
}
inline std::string* DeleteVocabConceptRequest::_internal_mutable_vocab_id() {
  
  return vocab_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeleteVocabConceptRequest::release_vocab_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteVocabConceptRequest.vocab_id)
  
  return vocab_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteVocabConceptRequest::set_allocated_vocab_id(std::string* vocab_id) {
  if (vocab_id != nullptr) {
    
  } else {
    
  }
  vocab_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vocab_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteVocabConceptRequest.vocab_id)
}

// string concept_id = 3;
inline void DeleteVocabConceptRequest::clear_concept_id() {
  concept_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeleteVocabConceptRequest::concept_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteVocabConceptRequest.concept_id)
  return _internal_concept_id();
}
inline void DeleteVocabConceptRequest::set_concept_id(const std::string& value) {
  _internal_set_concept_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteVocabConceptRequest.concept_id)
}
inline std::string* DeleteVocabConceptRequest::mutable_concept_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteVocabConceptRequest.concept_id)
  return _internal_mutable_concept_id();
}
inline const std::string& DeleteVocabConceptRequest::_internal_concept_id() const {
  return concept_id_.GetNoArena();
}
inline void DeleteVocabConceptRequest::_internal_set_concept_id(const std::string& value) {
  
  concept_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DeleteVocabConceptRequest::set_concept_id(std::string&& value) {
  
  concept_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.DeleteVocabConceptRequest.concept_id)
}
inline void DeleteVocabConceptRequest::set_concept_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  concept_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.DeleteVocabConceptRequest.concept_id)
}
inline void DeleteVocabConceptRequest::set_concept_id(const char* value, size_t size) {
  
  concept_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.DeleteVocabConceptRequest.concept_id)
}
inline std::string* DeleteVocabConceptRequest::_internal_mutable_concept_id() {
  
  return concept_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeleteVocabConceptRequest::release_concept_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteVocabConceptRequest.concept_id)
  
  return concept_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteVocabConceptRequest::set_allocated_concept_id(std::string* concept_id) {
  if (concept_id != nullptr) {
    
  } else {
    
  }
  concept_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), concept_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteVocabConceptRequest.concept_id)
}

// -------------------------------------------------------------------

// DeleteVocabConceptsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool DeleteVocabConceptsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool DeleteVocabConceptsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& DeleteVocabConceptsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& DeleteVocabConceptsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteVocabConceptsRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* DeleteVocabConceptsRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteVocabConceptsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteVocabConceptsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* DeleteVocabConceptsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteVocabConceptsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void DeleteVocabConceptsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteVocabConceptsRequest.user_app_id)
}

// string vocab_id = 2;
inline void DeleteVocabConceptsRequest::clear_vocab_id() {
  vocab_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeleteVocabConceptsRequest::vocab_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteVocabConceptsRequest.vocab_id)
  return _internal_vocab_id();
}
inline void DeleteVocabConceptsRequest::set_vocab_id(const std::string& value) {
  _internal_set_vocab_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteVocabConceptsRequest.vocab_id)
}
inline std::string* DeleteVocabConceptsRequest::mutable_vocab_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteVocabConceptsRequest.vocab_id)
  return _internal_mutable_vocab_id();
}
inline const std::string& DeleteVocabConceptsRequest::_internal_vocab_id() const {
  return vocab_id_.GetNoArena();
}
inline void DeleteVocabConceptsRequest::_internal_set_vocab_id(const std::string& value) {
  
  vocab_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DeleteVocabConceptsRequest::set_vocab_id(std::string&& value) {
  
  vocab_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.DeleteVocabConceptsRequest.vocab_id)
}
inline void DeleteVocabConceptsRequest::set_vocab_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vocab_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.DeleteVocabConceptsRequest.vocab_id)
}
inline void DeleteVocabConceptsRequest::set_vocab_id(const char* value, size_t size) {
  
  vocab_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.DeleteVocabConceptsRequest.vocab_id)
}
inline std::string* DeleteVocabConceptsRequest::_internal_mutable_vocab_id() {
  
  return vocab_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeleteVocabConceptsRequest::release_vocab_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteVocabConceptsRequest.vocab_id)
  
  return vocab_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteVocabConceptsRequest::set_allocated_vocab_id(std::string* vocab_id) {
  if (vocab_id != nullptr) {
    
  } else {
    
  }
  vocab_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vocab_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteVocabConceptsRequest.vocab_id)
}

// repeated string ids = 3;
inline int DeleteVocabConceptsRequest::_internal_ids_size() const {
  return ids_.size();
}
inline int DeleteVocabConceptsRequest::ids_size() const {
  return _internal_ids_size();
}
inline void DeleteVocabConceptsRequest::clear_ids() {
  ids_.Clear();
}
inline std::string* DeleteVocabConceptsRequest::add_ids() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.DeleteVocabConceptsRequest.ids)
  return _internal_add_ids();
}
inline const std::string& DeleteVocabConceptsRequest::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const std::string& DeleteVocabConceptsRequest::ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteVocabConceptsRequest.ids)
  return _internal_ids(index);
}
inline std::string* DeleteVocabConceptsRequest::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteVocabConceptsRequest.ids)
  return ids_.Mutable(index);
}
inline void DeleteVocabConceptsRequest::set_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteVocabConceptsRequest.ids)
  ids_.Mutable(index)->assign(value);
}
inline void DeleteVocabConceptsRequest::set_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteVocabConceptsRequest.ids)
  ids_.Mutable(index)->assign(std::move(value));
}
inline void DeleteVocabConceptsRequest::set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.DeleteVocabConceptsRequest.ids)
}
inline void DeleteVocabConceptsRequest::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.DeleteVocabConceptsRequest.ids)
}
inline std::string* DeleteVocabConceptsRequest::_internal_add_ids() {
  return ids_.Add();
}
inline void DeleteVocabConceptsRequest::add_ids(const std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.DeleteVocabConceptsRequest.ids)
}
inline void DeleteVocabConceptsRequest::add_ids(std::string&& value) {
  ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.DeleteVocabConceptsRequest.ids)
}
inline void DeleteVocabConceptsRequest::add_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.DeleteVocabConceptsRequest.ids)
}
inline void DeleteVocabConceptsRequest::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.DeleteVocabConceptsRequest.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeleteVocabConceptsRequest::ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.DeleteVocabConceptsRequest.ids)
  return ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeleteVocabConceptsRequest::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.DeleteVocabConceptsRequest.ids)
  return &ids_;
}

// bool delete_all = 4;
inline void DeleteVocabConceptsRequest::clear_delete_all() {
  delete_all_ = false;
}
inline bool DeleteVocabConceptsRequest::_internal_delete_all() const {
  return delete_all_;
}
inline bool DeleteVocabConceptsRequest::delete_all() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteVocabConceptsRequest.delete_all)
  return _internal_delete_all();
}
inline void DeleteVocabConceptsRequest::_internal_set_delete_all(bool value) {
  
  delete_all_ = value;
}
inline void DeleteVocabConceptsRequest::set_delete_all(bool value) {
  _internal_set_delete_all(value);
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteVocabConceptsRequest.delete_all)
}

// -------------------------------------------------------------------

// SingleVocabResponse

// .clarifai.api.status.Status status = 1;
inline bool SingleVocabResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SingleVocabResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& SingleVocabResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& SingleVocabResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleVocabResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* SingleVocabResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleVocabResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* SingleVocabResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* SingleVocabResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleVocabResponse.status)
  return _internal_mutable_status();
}
inline void SingleVocabResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleVocabResponse.status)
}

// .clarifai.api.Vocab vocab = 2;
inline bool SingleVocabResponse::_internal_has_vocab() const {
  return this != internal_default_instance() && vocab_ != nullptr;
}
inline bool SingleVocabResponse::has_vocab() const {
  return _internal_has_vocab();
}
inline const ::clarifai::api::Vocab& SingleVocabResponse::_internal_vocab() const {
  const ::clarifai::api::Vocab* p = vocab_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Vocab*>(
      &::clarifai::api::_Vocab_default_instance_);
}
inline const ::clarifai::api::Vocab& SingleVocabResponse::vocab() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleVocabResponse.vocab)
  return _internal_vocab();
}
inline ::clarifai::api::Vocab* SingleVocabResponse::release_vocab() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleVocabResponse.vocab)
  
  ::clarifai::api::Vocab* temp = vocab_;
  vocab_ = nullptr;
  return temp;
}
inline ::clarifai::api::Vocab* SingleVocabResponse::_internal_mutable_vocab() {
  
  if (vocab_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Vocab>(GetArenaNoVirtual());
    vocab_ = p;
  }
  return vocab_;
}
inline ::clarifai::api::Vocab* SingleVocabResponse::mutable_vocab() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleVocabResponse.vocab)
  return _internal_mutable_vocab();
}
inline void SingleVocabResponse::set_allocated_vocab(::clarifai::api::Vocab* vocab) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vocab_);
  }
  if (vocab) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vocab = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vocab, submessage_arena);
    }
    
  } else {
    
  }
  vocab_ = vocab;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleVocabResponse.vocab)
}

// -------------------------------------------------------------------

// MultiVocabResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiVocabResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiVocabResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiVocabResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiVocabResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiVocabResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* MultiVocabResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiVocabResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiVocabResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiVocabResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiVocabResponse.status)
  return _internal_mutable_status();
}
inline void MultiVocabResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiVocabResponse.status)
}

// repeated .clarifai.api.Vocab vocabs = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int MultiVocabResponse::_internal_vocabs_size() const {
  return vocabs_.size();
}
inline int MultiVocabResponse::vocabs_size() const {
  return _internal_vocabs_size();
}
inline ::clarifai::api::Vocab* MultiVocabResponse::mutable_vocabs(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiVocabResponse.vocabs)
  return vocabs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Vocab >*
MultiVocabResponse::mutable_vocabs() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiVocabResponse.vocabs)
  return &vocabs_;
}
inline const ::clarifai::api::Vocab& MultiVocabResponse::_internal_vocabs(int index) const {
  return vocabs_.Get(index);
}
inline const ::clarifai::api::Vocab& MultiVocabResponse::vocabs(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiVocabResponse.vocabs)
  return _internal_vocabs(index);
}
inline ::clarifai::api::Vocab* MultiVocabResponse::_internal_add_vocabs() {
  return vocabs_.Add();
}
inline ::clarifai::api::Vocab* MultiVocabResponse::add_vocabs() {
  // @@protoc_insertion_point(field_add:clarifai.api.MultiVocabResponse.vocabs)
  return _internal_add_vocabs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Vocab >&
MultiVocabResponse::vocabs() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiVocabResponse.vocabs)
  return vocabs_;
}

// -------------------------------------------------------------------

// GetWorkflowRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool GetWorkflowRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool GetWorkflowRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& GetWorkflowRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& GetWorkflowRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetWorkflowRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* GetWorkflowRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetWorkflowRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetWorkflowRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* GetWorkflowRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetWorkflowRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void GetWorkflowRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetWorkflowRequest.user_app_id)
}

// string workflow_id = 2;
inline void GetWorkflowRequest::clear_workflow_id() {
  workflow_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetWorkflowRequest::workflow_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetWorkflowRequest.workflow_id)
  return _internal_workflow_id();
}
inline void GetWorkflowRequest::set_workflow_id(const std::string& value) {
  _internal_set_workflow_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.GetWorkflowRequest.workflow_id)
}
inline std::string* GetWorkflowRequest::mutable_workflow_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetWorkflowRequest.workflow_id)
  return _internal_mutable_workflow_id();
}
inline const std::string& GetWorkflowRequest::_internal_workflow_id() const {
  return workflow_id_.GetNoArena();
}
inline void GetWorkflowRequest::_internal_set_workflow_id(const std::string& value) {
  
  workflow_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetWorkflowRequest::set_workflow_id(std::string&& value) {
  
  workflow_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.GetWorkflowRequest.workflow_id)
}
inline void GetWorkflowRequest::set_workflow_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  workflow_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.GetWorkflowRequest.workflow_id)
}
inline void GetWorkflowRequest::set_workflow_id(const char* value, size_t size) {
  
  workflow_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.GetWorkflowRequest.workflow_id)
}
inline std::string* GetWorkflowRequest::_internal_mutable_workflow_id() {
  
  return workflow_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetWorkflowRequest::release_workflow_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetWorkflowRequest.workflow_id)
  
  return workflow_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetWorkflowRequest::set_allocated_workflow_id(std::string* workflow_id) {
  if (workflow_id != nullptr) {
    
  } else {
    
  }
  workflow_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), workflow_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetWorkflowRequest.workflow_id)
}

// bool favor_clarifai_workflows = 3;
inline void GetWorkflowRequest::clear_favor_clarifai_workflows() {
  favor_clarifai_workflows_ = false;
}
inline bool GetWorkflowRequest::_internal_favor_clarifai_workflows() const {
  return favor_clarifai_workflows_;
}
inline bool GetWorkflowRequest::favor_clarifai_workflows() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetWorkflowRequest.favor_clarifai_workflows)
  return _internal_favor_clarifai_workflows();
}
inline void GetWorkflowRequest::_internal_set_favor_clarifai_workflows(bool value) {
  
  favor_clarifai_workflows_ = value;
}
inline void GetWorkflowRequest::set_favor_clarifai_workflows(bool value) {
  _internal_set_favor_clarifai_workflows(value);
  // @@protoc_insertion_point(field_set:clarifai.api.GetWorkflowRequest.favor_clarifai_workflows)
}

// -------------------------------------------------------------------

// ListWorkflowsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool ListWorkflowsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool ListWorkflowsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& ListWorkflowsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& ListWorkflowsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListWorkflowsRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* ListWorkflowsRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListWorkflowsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListWorkflowsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* ListWorkflowsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListWorkflowsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void ListWorkflowsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListWorkflowsRequest.user_app_id)
}

// uint32 page = 2;
inline void ListWorkflowsRequest::clear_page() {
  page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListWorkflowsRequest::_internal_page() const {
  return page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListWorkflowsRequest::page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListWorkflowsRequest.page)
  return _internal_page();
}
inline void ListWorkflowsRequest::_internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  page_ = value;
}
inline void ListWorkflowsRequest::set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListWorkflowsRequest.page)
}

// uint32 per_page = 3;
inline void ListWorkflowsRequest::clear_per_page() {
  per_page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListWorkflowsRequest::_internal_per_page() const {
  return per_page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListWorkflowsRequest::per_page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListWorkflowsRequest.per_page)
  return _internal_per_page();
}
inline void ListWorkflowsRequest::_internal_set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  per_page_ = value;
}
inline void ListWorkflowsRequest::set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_per_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListWorkflowsRequest.per_page)
}

// -------------------------------------------------------------------

// ListPublicWorkflowsRequest

// uint32 page = 1;
inline void ListPublicWorkflowsRequest::clear_page() {
  page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListPublicWorkflowsRequest::_internal_page() const {
  return page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListPublicWorkflowsRequest::page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListPublicWorkflowsRequest.page)
  return _internal_page();
}
inline void ListPublicWorkflowsRequest::_internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  page_ = value;
}
inline void ListPublicWorkflowsRequest::set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListPublicWorkflowsRequest.page)
}

// uint32 per_page = 2;
inline void ListPublicWorkflowsRequest::clear_per_page() {
  per_page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListPublicWorkflowsRequest::_internal_per_page() const {
  return per_page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListPublicWorkflowsRequest::per_page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListPublicWorkflowsRequest.per_page)
  return _internal_per_page();
}
inline void ListPublicWorkflowsRequest::_internal_set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  per_page_ = value;
}
inline void ListPublicWorkflowsRequest::set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_per_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListPublicWorkflowsRequest.per_page)
}

// -------------------------------------------------------------------

// PostWorkflowsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostWorkflowsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostWorkflowsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostWorkflowsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostWorkflowsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostWorkflowsRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* PostWorkflowsRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostWorkflowsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostWorkflowsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostWorkflowsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostWorkflowsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void PostWorkflowsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostWorkflowsRequest.user_app_id)
}

// repeated .clarifai.api.Workflow workflows = 2;
inline int PostWorkflowsRequest::_internal_workflows_size() const {
  return workflows_.size();
}
inline int PostWorkflowsRequest::workflows_size() const {
  return _internal_workflows_size();
}
inline ::clarifai::api::Workflow* PostWorkflowsRequest::mutable_workflows(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostWorkflowsRequest.workflows)
  return workflows_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Workflow >*
PostWorkflowsRequest::mutable_workflows() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostWorkflowsRequest.workflows)
  return &workflows_;
}
inline const ::clarifai::api::Workflow& PostWorkflowsRequest::_internal_workflows(int index) const {
  return workflows_.Get(index);
}
inline const ::clarifai::api::Workflow& PostWorkflowsRequest::workflows(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostWorkflowsRequest.workflows)
  return _internal_workflows(index);
}
inline ::clarifai::api::Workflow* PostWorkflowsRequest::_internal_add_workflows() {
  return workflows_.Add();
}
inline ::clarifai::api::Workflow* PostWorkflowsRequest::add_workflows() {
  // @@protoc_insertion_point(field_add:clarifai.api.PostWorkflowsRequest.workflows)
  return _internal_add_workflows();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Workflow >&
PostWorkflowsRequest::workflows() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostWorkflowsRequest.workflows)
  return workflows_;
}

// -------------------------------------------------------------------

// PatchWorkflowsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PatchWorkflowsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PatchWorkflowsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PatchWorkflowsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PatchWorkflowsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchWorkflowsRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* PatchWorkflowsRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchWorkflowsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchWorkflowsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PatchWorkflowsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchWorkflowsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void PatchWorkflowsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchWorkflowsRequest.user_app_id)
}

// repeated .clarifai.api.Workflow workflows = 2;
inline int PatchWorkflowsRequest::_internal_workflows_size() const {
  return workflows_.size();
}
inline int PatchWorkflowsRequest::workflows_size() const {
  return _internal_workflows_size();
}
inline ::clarifai::api::Workflow* PatchWorkflowsRequest::mutable_workflows(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchWorkflowsRequest.workflows)
  return workflows_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Workflow >*
PatchWorkflowsRequest::mutable_workflows() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PatchWorkflowsRequest.workflows)
  return &workflows_;
}
inline const ::clarifai::api::Workflow& PatchWorkflowsRequest::_internal_workflows(int index) const {
  return workflows_.Get(index);
}
inline const ::clarifai::api::Workflow& PatchWorkflowsRequest::workflows(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchWorkflowsRequest.workflows)
  return _internal_workflows(index);
}
inline ::clarifai::api::Workflow* PatchWorkflowsRequest::_internal_add_workflows() {
  return workflows_.Add();
}
inline ::clarifai::api::Workflow* PatchWorkflowsRequest::add_workflows() {
  // @@protoc_insertion_point(field_add:clarifai.api.PatchWorkflowsRequest.workflows)
  return _internal_add_workflows();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Workflow >&
PatchWorkflowsRequest::workflows() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PatchWorkflowsRequest.workflows)
  return workflows_;
}

// string action = 3;
inline void PatchWorkflowsRequest::clear_action() {
  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PatchWorkflowsRequest::action() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchWorkflowsRequest.action)
  return _internal_action();
}
inline void PatchWorkflowsRequest::set_action(const std::string& value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PatchWorkflowsRequest.action)
}
inline std::string* PatchWorkflowsRequest::mutable_action() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchWorkflowsRequest.action)
  return _internal_mutable_action();
}
inline const std::string& PatchWorkflowsRequest::_internal_action() const {
  return action_.GetNoArena();
}
inline void PatchWorkflowsRequest::_internal_set_action(const std::string& value) {
  
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PatchWorkflowsRequest::set_action(std::string&& value) {
  
  action_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.PatchWorkflowsRequest.action)
}
inline void PatchWorkflowsRequest::set_action(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.PatchWorkflowsRequest.action)
}
inline void PatchWorkflowsRequest::set_action(const char* value, size_t size) {
  
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PatchWorkflowsRequest.action)
}
inline std::string* PatchWorkflowsRequest::_internal_mutable_action() {
  
  return action_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PatchWorkflowsRequest::release_action() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchWorkflowsRequest.action)
  
  return action_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PatchWorkflowsRequest::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchWorkflowsRequest.action)
}

// -------------------------------------------------------------------

// DeleteWorkflowRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool DeleteWorkflowRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool DeleteWorkflowRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& DeleteWorkflowRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& DeleteWorkflowRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteWorkflowRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* DeleteWorkflowRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteWorkflowRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteWorkflowRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* DeleteWorkflowRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteWorkflowRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void DeleteWorkflowRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteWorkflowRequest.user_app_id)
}

// string workflow_id = 2;
inline void DeleteWorkflowRequest::clear_workflow_id() {
  workflow_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeleteWorkflowRequest::workflow_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteWorkflowRequest.workflow_id)
  return _internal_workflow_id();
}
inline void DeleteWorkflowRequest::set_workflow_id(const std::string& value) {
  _internal_set_workflow_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteWorkflowRequest.workflow_id)
}
inline std::string* DeleteWorkflowRequest::mutable_workflow_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteWorkflowRequest.workflow_id)
  return _internal_mutable_workflow_id();
}
inline const std::string& DeleteWorkflowRequest::_internal_workflow_id() const {
  return workflow_id_.GetNoArena();
}
inline void DeleteWorkflowRequest::_internal_set_workflow_id(const std::string& value) {
  
  workflow_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DeleteWorkflowRequest::set_workflow_id(std::string&& value) {
  
  workflow_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.DeleteWorkflowRequest.workflow_id)
}
inline void DeleteWorkflowRequest::set_workflow_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  workflow_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.DeleteWorkflowRequest.workflow_id)
}
inline void DeleteWorkflowRequest::set_workflow_id(const char* value, size_t size) {
  
  workflow_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.DeleteWorkflowRequest.workflow_id)
}
inline std::string* DeleteWorkflowRequest::_internal_mutable_workflow_id() {
  
  return workflow_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeleteWorkflowRequest::release_workflow_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteWorkflowRequest.workflow_id)
  
  return workflow_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteWorkflowRequest::set_allocated_workflow_id(std::string* workflow_id) {
  if (workflow_id != nullptr) {
    
  } else {
    
  }
  workflow_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), workflow_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteWorkflowRequest.workflow_id)
}

// -------------------------------------------------------------------

// DeleteWorkflowsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool DeleteWorkflowsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool DeleteWorkflowsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& DeleteWorkflowsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& DeleteWorkflowsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteWorkflowsRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* DeleteWorkflowsRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteWorkflowsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteWorkflowsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* DeleteWorkflowsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteWorkflowsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void DeleteWorkflowsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteWorkflowsRequest.user_app_id)
}

// repeated string ids = 2;
inline int DeleteWorkflowsRequest::_internal_ids_size() const {
  return ids_.size();
}
inline int DeleteWorkflowsRequest::ids_size() const {
  return _internal_ids_size();
}
inline void DeleteWorkflowsRequest::clear_ids() {
  ids_.Clear();
}
inline std::string* DeleteWorkflowsRequest::add_ids() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.DeleteWorkflowsRequest.ids)
  return _internal_add_ids();
}
inline const std::string& DeleteWorkflowsRequest::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const std::string& DeleteWorkflowsRequest::ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteWorkflowsRequest.ids)
  return _internal_ids(index);
}
inline std::string* DeleteWorkflowsRequest::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteWorkflowsRequest.ids)
  return ids_.Mutable(index);
}
inline void DeleteWorkflowsRequest::set_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteWorkflowsRequest.ids)
  ids_.Mutable(index)->assign(value);
}
inline void DeleteWorkflowsRequest::set_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteWorkflowsRequest.ids)
  ids_.Mutable(index)->assign(std::move(value));
}
inline void DeleteWorkflowsRequest::set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.DeleteWorkflowsRequest.ids)
}
inline void DeleteWorkflowsRequest::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.DeleteWorkflowsRequest.ids)
}
inline std::string* DeleteWorkflowsRequest::_internal_add_ids() {
  return ids_.Add();
}
inline void DeleteWorkflowsRequest::add_ids(const std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.DeleteWorkflowsRequest.ids)
}
inline void DeleteWorkflowsRequest::add_ids(std::string&& value) {
  ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.DeleteWorkflowsRequest.ids)
}
inline void DeleteWorkflowsRequest::add_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.DeleteWorkflowsRequest.ids)
}
inline void DeleteWorkflowsRequest::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.DeleteWorkflowsRequest.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeleteWorkflowsRequest::ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.DeleteWorkflowsRequest.ids)
  return ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeleteWorkflowsRequest::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.DeleteWorkflowsRequest.ids)
  return &ids_;
}

// bool delete_all = 3;
inline void DeleteWorkflowsRequest::clear_delete_all() {
  delete_all_ = false;
}
inline bool DeleteWorkflowsRequest::_internal_delete_all() const {
  return delete_all_;
}
inline bool DeleteWorkflowsRequest::delete_all() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteWorkflowsRequest.delete_all)
  return _internal_delete_all();
}
inline void DeleteWorkflowsRequest::_internal_set_delete_all(bool value) {
  
  delete_all_ = value;
}
inline void DeleteWorkflowsRequest::set_delete_all(bool value) {
  _internal_set_delete_all(value);
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteWorkflowsRequest.delete_all)
}

// -------------------------------------------------------------------

// SingleWorkflowResponse

// .clarifai.api.status.Status status = 1;
inline bool SingleWorkflowResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SingleWorkflowResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& SingleWorkflowResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& SingleWorkflowResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleWorkflowResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* SingleWorkflowResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleWorkflowResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* SingleWorkflowResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* SingleWorkflowResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleWorkflowResponse.status)
  return _internal_mutable_status();
}
inline void SingleWorkflowResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleWorkflowResponse.status)
}

// .clarifai.api.Workflow workflow = 2;
inline bool SingleWorkflowResponse::_internal_has_workflow() const {
  return this != internal_default_instance() && workflow_ != nullptr;
}
inline bool SingleWorkflowResponse::has_workflow() const {
  return _internal_has_workflow();
}
inline const ::clarifai::api::Workflow& SingleWorkflowResponse::_internal_workflow() const {
  const ::clarifai::api::Workflow* p = workflow_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Workflow*>(
      &::clarifai::api::_Workflow_default_instance_);
}
inline const ::clarifai::api::Workflow& SingleWorkflowResponse::workflow() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleWorkflowResponse.workflow)
  return _internal_workflow();
}
inline ::clarifai::api::Workflow* SingleWorkflowResponse::release_workflow() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleWorkflowResponse.workflow)
  
  ::clarifai::api::Workflow* temp = workflow_;
  workflow_ = nullptr;
  return temp;
}
inline ::clarifai::api::Workflow* SingleWorkflowResponse::_internal_mutable_workflow() {
  
  if (workflow_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Workflow>(GetArenaNoVirtual());
    workflow_ = p;
  }
  return workflow_;
}
inline ::clarifai::api::Workflow* SingleWorkflowResponse::mutable_workflow() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleWorkflowResponse.workflow)
  return _internal_mutable_workflow();
}
inline void SingleWorkflowResponse::set_allocated_workflow(::clarifai::api::Workflow* workflow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(workflow_);
  }
  if (workflow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      workflow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, workflow, submessage_arena);
    }
    
  } else {
    
  }
  workflow_ = workflow;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleWorkflowResponse.workflow)
}

// -------------------------------------------------------------------

// MultiWorkflowResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiWorkflowResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiWorkflowResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiWorkflowResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiWorkflowResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiWorkflowResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* MultiWorkflowResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiWorkflowResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiWorkflowResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiWorkflowResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiWorkflowResponse.status)
  return _internal_mutable_status();
}
inline void MultiWorkflowResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiWorkflowResponse.status)
}

// repeated .clarifai.api.Workflow workflows = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int MultiWorkflowResponse::_internal_workflows_size() const {
  return workflows_.size();
}
inline int MultiWorkflowResponse::workflows_size() const {
  return _internal_workflows_size();
}
inline ::clarifai::api::Workflow* MultiWorkflowResponse::mutable_workflows(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiWorkflowResponse.workflows)
  return workflows_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Workflow >*
MultiWorkflowResponse::mutable_workflows() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiWorkflowResponse.workflows)
  return &workflows_;
}
inline const ::clarifai::api::Workflow& MultiWorkflowResponse::_internal_workflows(int index) const {
  return workflows_.Get(index);
}
inline const ::clarifai::api::Workflow& MultiWorkflowResponse::workflows(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiWorkflowResponse.workflows)
  return _internal_workflows(index);
}
inline ::clarifai::api::Workflow* MultiWorkflowResponse::_internal_add_workflows() {
  return workflows_.Add();
}
inline ::clarifai::api::Workflow* MultiWorkflowResponse::add_workflows() {
  // @@protoc_insertion_point(field_add:clarifai.api.MultiWorkflowResponse.workflows)
  return _internal_add_workflows();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Workflow >&
MultiWorkflowResponse::workflows() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiWorkflowResponse.workflows)
  return workflows_;
}

// -------------------------------------------------------------------

// PostWorkflowResultsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostWorkflowResultsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostWorkflowResultsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostWorkflowResultsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostWorkflowResultsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostWorkflowResultsRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* PostWorkflowResultsRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostWorkflowResultsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostWorkflowResultsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostWorkflowResultsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostWorkflowResultsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void PostWorkflowResultsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostWorkflowResultsRequest.user_app_id)
}

// string workflow_id = 2;
inline void PostWorkflowResultsRequest::clear_workflow_id() {
  workflow_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PostWorkflowResultsRequest::workflow_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostWorkflowResultsRequest.workflow_id)
  return _internal_workflow_id();
}
inline void PostWorkflowResultsRequest::set_workflow_id(const std::string& value) {
  _internal_set_workflow_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PostWorkflowResultsRequest.workflow_id)
}
inline std::string* PostWorkflowResultsRequest::mutable_workflow_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostWorkflowResultsRequest.workflow_id)
  return _internal_mutable_workflow_id();
}
inline const std::string& PostWorkflowResultsRequest::_internal_workflow_id() const {
  return workflow_id_.GetNoArena();
}
inline void PostWorkflowResultsRequest::_internal_set_workflow_id(const std::string& value) {
  
  workflow_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PostWorkflowResultsRequest::set_workflow_id(std::string&& value) {
  
  workflow_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.PostWorkflowResultsRequest.workflow_id)
}
inline void PostWorkflowResultsRequest::set_workflow_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  workflow_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.PostWorkflowResultsRequest.workflow_id)
}
inline void PostWorkflowResultsRequest::set_workflow_id(const char* value, size_t size) {
  
  workflow_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PostWorkflowResultsRequest.workflow_id)
}
inline std::string* PostWorkflowResultsRequest::_internal_mutable_workflow_id() {
  
  return workflow_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PostWorkflowResultsRequest::release_workflow_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostWorkflowResultsRequest.workflow_id)
  
  return workflow_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PostWorkflowResultsRequest::set_allocated_workflow_id(std::string* workflow_id) {
  if (workflow_id != nullptr) {
    
  } else {
    
  }
  workflow_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), workflow_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostWorkflowResultsRequest.workflow_id)
}

// repeated .clarifai.api.Input inputs = 3;
inline int PostWorkflowResultsRequest::_internal_inputs_size() const {
  return inputs_.size();
}
inline int PostWorkflowResultsRequest::inputs_size() const {
  return _internal_inputs_size();
}
inline ::clarifai::api::Input* PostWorkflowResultsRequest::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostWorkflowResultsRequest.inputs)
  return inputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input >*
PostWorkflowResultsRequest::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostWorkflowResultsRequest.inputs)
  return &inputs_;
}
inline const ::clarifai::api::Input& PostWorkflowResultsRequest::_internal_inputs(int index) const {
  return inputs_.Get(index);
}
inline const ::clarifai::api::Input& PostWorkflowResultsRequest::inputs(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostWorkflowResultsRequest.inputs)
  return _internal_inputs(index);
}
inline ::clarifai::api::Input* PostWorkflowResultsRequest::_internal_add_inputs() {
  return inputs_.Add();
}
inline ::clarifai::api::Input* PostWorkflowResultsRequest::add_inputs() {
  // @@protoc_insertion_point(field_add:clarifai.api.PostWorkflowResultsRequest.inputs)
  return _internal_add_inputs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input >&
PostWorkflowResultsRequest::inputs() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostWorkflowResultsRequest.inputs)
  return inputs_;
}

// .clarifai.api.OutputConfig output_config = 4;
inline bool PostWorkflowResultsRequest::_internal_has_output_config() const {
  return this != internal_default_instance() && output_config_ != nullptr;
}
inline bool PostWorkflowResultsRequest::has_output_config() const {
  return _internal_has_output_config();
}
inline const ::clarifai::api::OutputConfig& PostWorkflowResultsRequest::_internal_output_config() const {
  const ::clarifai::api::OutputConfig* p = output_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::OutputConfig*>(
      &::clarifai::api::_OutputConfig_default_instance_);
}
inline const ::clarifai::api::OutputConfig& PostWorkflowResultsRequest::output_config() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostWorkflowResultsRequest.output_config)
  return _internal_output_config();
}
inline ::clarifai::api::OutputConfig* PostWorkflowResultsRequest::release_output_config() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostWorkflowResultsRequest.output_config)
  
  ::clarifai::api::OutputConfig* temp = output_config_;
  output_config_ = nullptr;
  return temp;
}
inline ::clarifai::api::OutputConfig* PostWorkflowResultsRequest::_internal_mutable_output_config() {
  
  if (output_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::OutputConfig>(GetArenaNoVirtual());
    output_config_ = p;
  }
  return output_config_;
}
inline ::clarifai::api::OutputConfig* PostWorkflowResultsRequest::mutable_output_config() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostWorkflowResultsRequest.output_config)
  return _internal_mutable_output_config();
}
inline void PostWorkflowResultsRequest::set_allocated_output_config(::clarifai::api::OutputConfig* output_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_config_);
  }
  if (output_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      output_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output_config, submessage_arena);
    }
    
  } else {
    
  }
  output_config_ = output_config;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostWorkflowResultsRequest.output_config)
}

// bool favor_clarifai_workflows = 5;
inline void PostWorkflowResultsRequest::clear_favor_clarifai_workflows() {
  favor_clarifai_workflows_ = false;
}
inline bool PostWorkflowResultsRequest::_internal_favor_clarifai_workflows() const {
  return favor_clarifai_workflows_;
}
inline bool PostWorkflowResultsRequest::favor_clarifai_workflows() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostWorkflowResultsRequest.favor_clarifai_workflows)
  return _internal_favor_clarifai_workflows();
}
inline void PostWorkflowResultsRequest::_internal_set_favor_clarifai_workflows(bool value) {
  
  favor_clarifai_workflows_ = value;
}
inline void PostWorkflowResultsRequest::set_favor_clarifai_workflows(bool value) {
  _internal_set_favor_clarifai_workflows(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PostWorkflowResultsRequest.favor_clarifai_workflows)
}

// -------------------------------------------------------------------

// PostWorkflowResultsResponse

// .clarifai.api.status.Status status = 1;
inline bool PostWorkflowResultsResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool PostWorkflowResultsResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& PostWorkflowResultsResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& PostWorkflowResultsResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostWorkflowResultsResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* PostWorkflowResultsResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostWorkflowResultsResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* PostWorkflowResultsResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* PostWorkflowResultsResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostWorkflowResultsResponse.status)
  return _internal_mutable_status();
}
inline void PostWorkflowResultsResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostWorkflowResultsResponse.status)
}

// .clarifai.api.Workflow workflow = 2;
inline bool PostWorkflowResultsResponse::_internal_has_workflow() const {
  return this != internal_default_instance() && workflow_ != nullptr;
}
inline bool PostWorkflowResultsResponse::has_workflow() const {
  return _internal_has_workflow();
}
inline const ::clarifai::api::Workflow& PostWorkflowResultsResponse::_internal_workflow() const {
  const ::clarifai::api::Workflow* p = workflow_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Workflow*>(
      &::clarifai::api::_Workflow_default_instance_);
}
inline const ::clarifai::api::Workflow& PostWorkflowResultsResponse::workflow() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostWorkflowResultsResponse.workflow)
  return _internal_workflow();
}
inline ::clarifai::api::Workflow* PostWorkflowResultsResponse::release_workflow() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostWorkflowResultsResponse.workflow)
  
  ::clarifai::api::Workflow* temp = workflow_;
  workflow_ = nullptr;
  return temp;
}
inline ::clarifai::api::Workflow* PostWorkflowResultsResponse::_internal_mutable_workflow() {
  
  if (workflow_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Workflow>(GetArenaNoVirtual());
    workflow_ = p;
  }
  return workflow_;
}
inline ::clarifai::api::Workflow* PostWorkflowResultsResponse::mutable_workflow() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostWorkflowResultsResponse.workflow)
  return _internal_mutable_workflow();
}
inline void PostWorkflowResultsResponse::set_allocated_workflow(::clarifai::api::Workflow* workflow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(workflow_);
  }
  if (workflow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      workflow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, workflow, submessage_arena);
    }
    
  } else {
    
  }
  workflow_ = workflow;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostWorkflowResultsResponse.workflow)
}

// repeated .clarifai.api.WorkflowResult results = 3;
inline int PostWorkflowResultsResponse::_internal_results_size() const {
  return results_.size();
}
inline int PostWorkflowResultsResponse::results_size() const {
  return _internal_results_size();
}
inline ::clarifai::api::WorkflowResult* PostWorkflowResultsResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostWorkflowResultsResponse.results)
  return results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::WorkflowResult >*
PostWorkflowResultsResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostWorkflowResultsResponse.results)
  return &results_;
}
inline const ::clarifai::api::WorkflowResult& PostWorkflowResultsResponse::_internal_results(int index) const {
  return results_.Get(index);
}
inline const ::clarifai::api::WorkflowResult& PostWorkflowResultsResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostWorkflowResultsResponse.results)
  return _internal_results(index);
}
inline ::clarifai::api::WorkflowResult* PostWorkflowResultsResponse::_internal_add_results() {
  return results_.Add();
}
inline ::clarifai::api::WorkflowResult* PostWorkflowResultsResponse::add_results() {
  // @@protoc_insertion_point(field_add:clarifai.api.PostWorkflowResultsResponse.results)
  return _internal_add_results();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::WorkflowResult >&
PostWorkflowResultsResponse::results() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostWorkflowResultsResponse.results)
  return results_;
}

// -------------------------------------------------------------------

// PostWorkflowResultsSimilarityRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostWorkflowResultsSimilarityRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostWorkflowResultsSimilarityRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostWorkflowResultsSimilarityRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostWorkflowResultsSimilarityRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostWorkflowResultsSimilarityRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* PostWorkflowResultsSimilarityRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostWorkflowResultsSimilarityRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostWorkflowResultsSimilarityRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostWorkflowResultsSimilarityRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostWorkflowResultsSimilarityRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void PostWorkflowResultsSimilarityRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostWorkflowResultsSimilarityRequest.user_app_id)
}

// string workflow_id = 2;
inline void PostWorkflowResultsSimilarityRequest::clear_workflow_id() {
  workflow_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PostWorkflowResultsSimilarityRequest::workflow_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostWorkflowResultsSimilarityRequest.workflow_id)
  return _internal_workflow_id();
}
inline void PostWorkflowResultsSimilarityRequest::set_workflow_id(const std::string& value) {
  _internal_set_workflow_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PostWorkflowResultsSimilarityRequest.workflow_id)
}
inline std::string* PostWorkflowResultsSimilarityRequest::mutable_workflow_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostWorkflowResultsSimilarityRequest.workflow_id)
  return _internal_mutable_workflow_id();
}
inline const std::string& PostWorkflowResultsSimilarityRequest::_internal_workflow_id() const {
  return workflow_id_.GetNoArena();
}
inline void PostWorkflowResultsSimilarityRequest::_internal_set_workflow_id(const std::string& value) {
  
  workflow_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PostWorkflowResultsSimilarityRequest::set_workflow_id(std::string&& value) {
  
  workflow_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.PostWorkflowResultsSimilarityRequest.workflow_id)
}
inline void PostWorkflowResultsSimilarityRequest::set_workflow_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  workflow_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.PostWorkflowResultsSimilarityRequest.workflow_id)
}
inline void PostWorkflowResultsSimilarityRequest::set_workflow_id(const char* value, size_t size) {
  
  workflow_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PostWorkflowResultsSimilarityRequest.workflow_id)
}
inline std::string* PostWorkflowResultsSimilarityRequest::_internal_mutable_workflow_id() {
  
  return workflow_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PostWorkflowResultsSimilarityRequest::release_workflow_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostWorkflowResultsSimilarityRequest.workflow_id)
  
  return workflow_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PostWorkflowResultsSimilarityRequest::set_allocated_workflow_id(std::string* workflow_id) {
  if (workflow_id != nullptr) {
    
  } else {
    
  }
  workflow_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), workflow_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostWorkflowResultsSimilarityRequest.workflow_id)
}

// string model_version_id = 3;
inline void PostWorkflowResultsSimilarityRequest::clear_model_version_id() {
  model_version_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PostWorkflowResultsSimilarityRequest::model_version_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostWorkflowResultsSimilarityRequest.model_version_id)
  return _internal_model_version_id();
}
inline void PostWorkflowResultsSimilarityRequest::set_model_version_id(const std::string& value) {
  _internal_set_model_version_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PostWorkflowResultsSimilarityRequest.model_version_id)
}
inline std::string* PostWorkflowResultsSimilarityRequest::mutable_model_version_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostWorkflowResultsSimilarityRequest.model_version_id)
  return _internal_mutable_model_version_id();
}
inline const std::string& PostWorkflowResultsSimilarityRequest::_internal_model_version_id() const {
  return model_version_id_.GetNoArena();
}
inline void PostWorkflowResultsSimilarityRequest::_internal_set_model_version_id(const std::string& value) {
  
  model_version_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PostWorkflowResultsSimilarityRequest::set_model_version_id(std::string&& value) {
  
  model_version_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.PostWorkflowResultsSimilarityRequest.model_version_id)
}
inline void PostWorkflowResultsSimilarityRequest::set_model_version_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_version_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.PostWorkflowResultsSimilarityRequest.model_version_id)
}
inline void PostWorkflowResultsSimilarityRequest::set_model_version_id(const char* value, size_t size) {
  
  model_version_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PostWorkflowResultsSimilarityRequest.model_version_id)
}
inline std::string* PostWorkflowResultsSimilarityRequest::_internal_mutable_model_version_id() {
  
  return model_version_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PostWorkflowResultsSimilarityRequest::release_model_version_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostWorkflowResultsSimilarityRequest.model_version_id)
  
  return model_version_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PostWorkflowResultsSimilarityRequest::set_allocated_model_version_id(std::string* model_version_id) {
  if (model_version_id != nullptr) {
    
  } else {
    
  }
  model_version_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_version_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostWorkflowResultsSimilarityRequest.model_version_id)
}

// repeated .clarifai.api.Input probe_inputs = 4;
inline int PostWorkflowResultsSimilarityRequest::_internal_probe_inputs_size() const {
  return probe_inputs_.size();
}
inline int PostWorkflowResultsSimilarityRequest::probe_inputs_size() const {
  return _internal_probe_inputs_size();
}
inline ::clarifai::api::Input* PostWorkflowResultsSimilarityRequest::mutable_probe_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostWorkflowResultsSimilarityRequest.probe_inputs)
  return probe_inputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input >*
PostWorkflowResultsSimilarityRequest::mutable_probe_inputs() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostWorkflowResultsSimilarityRequest.probe_inputs)
  return &probe_inputs_;
}
inline const ::clarifai::api::Input& PostWorkflowResultsSimilarityRequest::_internal_probe_inputs(int index) const {
  return probe_inputs_.Get(index);
}
inline const ::clarifai::api::Input& PostWorkflowResultsSimilarityRequest::probe_inputs(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostWorkflowResultsSimilarityRequest.probe_inputs)
  return _internal_probe_inputs(index);
}
inline ::clarifai::api::Input* PostWorkflowResultsSimilarityRequest::_internal_add_probe_inputs() {
  return probe_inputs_.Add();
}
inline ::clarifai::api::Input* PostWorkflowResultsSimilarityRequest::add_probe_inputs() {
  // @@protoc_insertion_point(field_add:clarifai.api.PostWorkflowResultsSimilarityRequest.probe_inputs)
  return _internal_add_probe_inputs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input >&
PostWorkflowResultsSimilarityRequest::probe_inputs() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostWorkflowResultsSimilarityRequest.probe_inputs)
  return probe_inputs_;
}

// repeated .clarifai.api.Input pool_inputs = 5;
inline int PostWorkflowResultsSimilarityRequest::_internal_pool_inputs_size() const {
  return pool_inputs_.size();
}
inline int PostWorkflowResultsSimilarityRequest::pool_inputs_size() const {
  return _internal_pool_inputs_size();
}
inline ::clarifai::api::Input* PostWorkflowResultsSimilarityRequest::mutable_pool_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostWorkflowResultsSimilarityRequest.pool_inputs)
  return pool_inputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input >*
PostWorkflowResultsSimilarityRequest::mutable_pool_inputs() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostWorkflowResultsSimilarityRequest.pool_inputs)
  return &pool_inputs_;
}
inline const ::clarifai::api::Input& PostWorkflowResultsSimilarityRequest::_internal_pool_inputs(int index) const {
  return pool_inputs_.Get(index);
}
inline const ::clarifai::api::Input& PostWorkflowResultsSimilarityRequest::pool_inputs(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostWorkflowResultsSimilarityRequest.pool_inputs)
  return _internal_pool_inputs(index);
}
inline ::clarifai::api::Input* PostWorkflowResultsSimilarityRequest::_internal_add_pool_inputs() {
  return pool_inputs_.Add();
}
inline ::clarifai::api::Input* PostWorkflowResultsSimilarityRequest::add_pool_inputs() {
  // @@protoc_insertion_point(field_add:clarifai.api.PostWorkflowResultsSimilarityRequest.pool_inputs)
  return _internal_add_pool_inputs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input >&
PostWorkflowResultsSimilarityRequest::pool_inputs() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostWorkflowResultsSimilarityRequest.pool_inputs)
  return pool_inputs_;
}

// bool favor_clarifai_workflows = 6;
inline void PostWorkflowResultsSimilarityRequest::clear_favor_clarifai_workflows() {
  favor_clarifai_workflows_ = false;
}
inline bool PostWorkflowResultsSimilarityRequest::_internal_favor_clarifai_workflows() const {
  return favor_clarifai_workflows_;
}
inline bool PostWorkflowResultsSimilarityRequest::favor_clarifai_workflows() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostWorkflowResultsSimilarityRequest.favor_clarifai_workflows)
  return _internal_favor_clarifai_workflows();
}
inline void PostWorkflowResultsSimilarityRequest::_internal_set_favor_clarifai_workflows(bool value) {
  
  favor_clarifai_workflows_ = value;
}
inline void PostWorkflowResultsSimilarityRequest::set_favor_clarifai_workflows(bool value) {
  _internal_set_favor_clarifai_workflows(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PostWorkflowResultsSimilarityRequest.favor_clarifai_workflows)
}

// -------------------------------------------------------------------

// PostWorkflowResultsSimilarityResponse

// .clarifai.api.status.Status status = 1;
inline bool PostWorkflowResultsSimilarityResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool PostWorkflowResultsSimilarityResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& PostWorkflowResultsSimilarityResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& PostWorkflowResultsSimilarityResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostWorkflowResultsSimilarityResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* PostWorkflowResultsSimilarityResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostWorkflowResultsSimilarityResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* PostWorkflowResultsSimilarityResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* PostWorkflowResultsSimilarityResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostWorkflowResultsSimilarityResponse.status)
  return _internal_mutable_status();
}
inline void PostWorkflowResultsSimilarityResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostWorkflowResultsSimilarityResponse.status)
}

// repeated .clarifai.api.WorkflowResultsSimilarity results = 2;
inline int PostWorkflowResultsSimilarityResponse::_internal_results_size() const {
  return results_.size();
}
inline int PostWorkflowResultsSimilarityResponse::results_size() const {
  return _internal_results_size();
}
inline ::clarifai::api::WorkflowResultsSimilarity* PostWorkflowResultsSimilarityResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostWorkflowResultsSimilarityResponse.results)
  return results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::WorkflowResultsSimilarity >*
PostWorkflowResultsSimilarityResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostWorkflowResultsSimilarityResponse.results)
  return &results_;
}
inline const ::clarifai::api::WorkflowResultsSimilarity& PostWorkflowResultsSimilarityResponse::_internal_results(int index) const {
  return results_.Get(index);
}
inline const ::clarifai::api::WorkflowResultsSimilarity& PostWorkflowResultsSimilarityResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostWorkflowResultsSimilarityResponse.results)
  return _internal_results(index);
}
inline ::clarifai::api::WorkflowResultsSimilarity* PostWorkflowResultsSimilarityResponse::_internal_add_results() {
  return results_.Add();
}
inline ::clarifai::api::WorkflowResultsSimilarity* PostWorkflowResultsSimilarityResponse::add_results() {
  // @@protoc_insertion_point(field_add:clarifai.api.PostWorkflowResultsSimilarityResponse.results)
  return _internal_add_results();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::WorkflowResultsSimilarity >&
PostWorkflowResultsSimilarityResponse::results() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostWorkflowResultsSimilarityResponse.results)
  return results_;
}

// -------------------------------------------------------------------

// TrainingTemplate

// string name = 1;
inline void TrainingTemplate::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TrainingTemplate::name() const {
  // @@protoc_insertion_point(field_get:clarifai.api.TrainingTemplate.name)
  return _internal_name();
}
inline void TrainingTemplate::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:clarifai.api.TrainingTemplate.name)
}
inline std::string* TrainingTemplate::mutable_name() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.TrainingTemplate.name)
  return _internal_mutable_name();
}
inline const std::string& TrainingTemplate::_internal_name() const {
  return name_.GetNoArena();
}
inline void TrainingTemplate::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TrainingTemplate::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.TrainingTemplate.name)
}
inline void TrainingTemplate::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.TrainingTemplate.name)
}
inline void TrainingTemplate::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.TrainingTemplate.name)
}
inline std::string* TrainingTemplate::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TrainingTemplate::release_name() {
  // @@protoc_insertion_point(field_release:clarifai.api.TrainingTemplate.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TrainingTemplate::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.TrainingTemplate.name)
}

// .google.protobuf.Struct default_args = 2;
inline bool TrainingTemplate::_internal_has_default_args() const {
  return this != internal_default_instance() && default_args_ != nullptr;
}
inline bool TrainingTemplate::has_default_args() const {
  return _internal_has_default_args();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& TrainingTemplate::_internal_default_args() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = default_args_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& TrainingTemplate::default_args() const {
  // @@protoc_insertion_point(field_get:clarifai.api.TrainingTemplate.default_args)
  return _internal_default_args();
}
inline PROTOBUF_NAMESPACE_ID::Struct* TrainingTemplate::release_default_args() {
  // @@protoc_insertion_point(field_release:clarifai.api.TrainingTemplate.default_args)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = default_args_;
  default_args_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* TrainingTemplate::_internal_mutable_default_args() {
  
  if (default_args_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArenaNoVirtual());
    default_args_ = p;
  }
  return default_args_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* TrainingTemplate::mutable_default_args() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.TrainingTemplate.default_args)
  return _internal_mutable_default_args();
}
inline void TrainingTemplate::set_allocated_default_args(PROTOBUF_NAMESPACE_ID::Struct* default_args) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(default_args_);
  }
  if (default_args) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(default_args)->GetArena();
    if (message_arena != submessage_arena) {
      default_args = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, default_args, submessage_arena);
    }
    
  } else {
    
  }
  default_args_ = default_args;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.TrainingTemplate.default_args)
}

// string doc_string = 3;
inline void TrainingTemplate::clear_doc_string() {
  doc_string_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TrainingTemplate::doc_string() const {
  // @@protoc_insertion_point(field_get:clarifai.api.TrainingTemplate.doc_string)
  return _internal_doc_string();
}
inline void TrainingTemplate::set_doc_string(const std::string& value) {
  _internal_set_doc_string(value);
  // @@protoc_insertion_point(field_set:clarifai.api.TrainingTemplate.doc_string)
}
inline std::string* TrainingTemplate::mutable_doc_string() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.TrainingTemplate.doc_string)
  return _internal_mutable_doc_string();
}
inline const std::string& TrainingTemplate::_internal_doc_string() const {
  return doc_string_.GetNoArena();
}
inline void TrainingTemplate::_internal_set_doc_string(const std::string& value) {
  
  doc_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TrainingTemplate::set_doc_string(std::string&& value) {
  
  doc_string_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.TrainingTemplate.doc_string)
}
inline void TrainingTemplate::set_doc_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  doc_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.TrainingTemplate.doc_string)
}
inline void TrainingTemplate::set_doc_string(const char* value, size_t size) {
  
  doc_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.TrainingTemplate.doc_string)
}
inline std::string* TrainingTemplate::_internal_mutable_doc_string() {
  
  return doc_string_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TrainingTemplate::release_doc_string() {
  // @@protoc_insertion_point(field_release:clarifai.api.TrainingTemplate.doc_string)
  
  return doc_string_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TrainingTemplate::set_allocated_doc_string(std::string* doc_string) {
  if (doc_string != nullptr) {
    
  } else {
    
  }
  doc_string_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), doc_string);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.TrainingTemplate.doc_string)
}

// string model_type = 4;
inline void TrainingTemplate::clear_model_type() {
  model_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TrainingTemplate::model_type() const {
  // @@protoc_insertion_point(field_get:clarifai.api.TrainingTemplate.model_type)
  return _internal_model_type();
}
inline void TrainingTemplate::set_model_type(const std::string& value) {
  _internal_set_model_type(value);
  // @@protoc_insertion_point(field_set:clarifai.api.TrainingTemplate.model_type)
}
inline std::string* TrainingTemplate::mutable_model_type() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.TrainingTemplate.model_type)
  return _internal_mutable_model_type();
}
inline const std::string& TrainingTemplate::_internal_model_type() const {
  return model_type_.GetNoArena();
}
inline void TrainingTemplate::_internal_set_model_type(const std::string& value) {
  
  model_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TrainingTemplate::set_model_type(std::string&& value) {
  
  model_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.TrainingTemplate.model_type)
}
inline void TrainingTemplate::set_model_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.TrainingTemplate.model_type)
}
inline void TrainingTemplate::set_model_type(const char* value, size_t size) {
  
  model_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.TrainingTemplate.model_type)
}
inline std::string* TrainingTemplate::_internal_mutable_model_type() {
  
  return model_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TrainingTemplate::release_model_type() {
  // @@protoc_insertion_point(field_release:clarifai.api.TrainingTemplate.model_type)
  
  return model_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TrainingTemplate::set_allocated_model_type(std::string* model_type) {
  if (model_type != nullptr) {
    
  } else {
    
  }
  model_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_type);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.TrainingTemplate.model_type)
}

// -------------------------------------------------------------------

// ListTrainingTemplatesRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool ListTrainingTemplatesRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool ListTrainingTemplatesRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& ListTrainingTemplatesRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& ListTrainingTemplatesRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListTrainingTemplatesRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* ListTrainingTemplatesRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListTrainingTemplatesRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListTrainingTemplatesRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* ListTrainingTemplatesRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListTrainingTemplatesRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void ListTrainingTemplatesRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListTrainingTemplatesRequest.user_app_id)
}

// -------------------------------------------------------------------

// MultiTrainingTemplatesResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiTrainingTemplatesResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiTrainingTemplatesResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiTrainingTemplatesResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiTrainingTemplatesResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiTrainingTemplatesResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* MultiTrainingTemplatesResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiTrainingTemplatesResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiTrainingTemplatesResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiTrainingTemplatesResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiTrainingTemplatesResponse.status)
  return _internal_mutable_status();
}
inline void MultiTrainingTemplatesResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiTrainingTemplatesResponse.status)
}

// repeated .clarifai.api.TrainingTemplate training_template = 2;
inline int MultiTrainingTemplatesResponse::_internal_training_template_size() const {
  return training_template_.size();
}
inline int MultiTrainingTemplatesResponse::training_template_size() const {
  return _internal_training_template_size();
}
inline void MultiTrainingTemplatesResponse::clear_training_template() {
  training_template_.Clear();
}
inline ::clarifai::api::TrainingTemplate* MultiTrainingTemplatesResponse::mutable_training_template(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiTrainingTemplatesResponse.training_template)
  return training_template_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::TrainingTemplate >*
MultiTrainingTemplatesResponse::mutable_training_template() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiTrainingTemplatesResponse.training_template)
  return &training_template_;
}
inline const ::clarifai::api::TrainingTemplate& MultiTrainingTemplatesResponse::_internal_training_template(int index) const {
  return training_template_.Get(index);
}
inline const ::clarifai::api::TrainingTemplate& MultiTrainingTemplatesResponse::training_template(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiTrainingTemplatesResponse.training_template)
  return _internal_training_template(index);
}
inline ::clarifai::api::TrainingTemplate* MultiTrainingTemplatesResponse::_internal_add_training_template() {
  return training_template_.Add();
}
inline ::clarifai::api::TrainingTemplate* MultiTrainingTemplatesResponse::add_training_template() {
  // @@protoc_insertion_point(field_add:clarifai.api.MultiTrainingTemplatesResponse.training_template)
  return _internal_add_training_template();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::TrainingTemplate >&
MultiTrainingTemplatesResponse::training_template() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiTrainingTemplatesResponse.training_template)
  return training_template_;
}

// -------------------------------------------------------------------

// PostAppDuplicationsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostAppDuplicationsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostAppDuplicationsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostAppDuplicationsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostAppDuplicationsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostAppDuplicationsRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* PostAppDuplicationsRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostAppDuplicationsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostAppDuplicationsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostAppDuplicationsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostAppDuplicationsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void PostAppDuplicationsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostAppDuplicationsRequest.user_app_id)
}

// repeated .clarifai.api.AppDuplication app_duplications = 2;
inline int PostAppDuplicationsRequest::_internal_app_duplications_size() const {
  return app_duplications_.size();
}
inline int PostAppDuplicationsRequest::app_duplications_size() const {
  return _internal_app_duplications_size();
}
inline ::clarifai::api::AppDuplication* PostAppDuplicationsRequest::mutable_app_duplications(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostAppDuplicationsRequest.app_duplications)
  return app_duplications_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::AppDuplication >*
PostAppDuplicationsRequest::mutable_app_duplications() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostAppDuplicationsRequest.app_duplications)
  return &app_duplications_;
}
inline const ::clarifai::api::AppDuplication& PostAppDuplicationsRequest::_internal_app_duplications(int index) const {
  return app_duplications_.Get(index);
}
inline const ::clarifai::api::AppDuplication& PostAppDuplicationsRequest::app_duplications(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostAppDuplicationsRequest.app_duplications)
  return _internal_app_duplications(index);
}
inline ::clarifai::api::AppDuplication* PostAppDuplicationsRequest::_internal_add_app_duplications() {
  return app_duplications_.Add();
}
inline ::clarifai::api::AppDuplication* PostAppDuplicationsRequest::add_app_duplications() {
  // @@protoc_insertion_point(field_add:clarifai.api.PostAppDuplicationsRequest.app_duplications)
  return _internal_add_app_duplications();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::AppDuplication >&
PostAppDuplicationsRequest::app_duplications() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostAppDuplicationsRequest.app_duplications)
  return app_duplications_;
}

// -------------------------------------------------------------------

// GetAppDuplicationRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool GetAppDuplicationRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool GetAppDuplicationRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& GetAppDuplicationRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& GetAppDuplicationRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetAppDuplicationRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* GetAppDuplicationRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetAppDuplicationRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetAppDuplicationRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* GetAppDuplicationRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetAppDuplicationRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void GetAppDuplicationRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetAppDuplicationRequest.user_app_id)
}

// string app_duplication_id = 2;
inline void GetAppDuplicationRequest::clear_app_duplication_id() {
  app_duplication_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetAppDuplicationRequest::app_duplication_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetAppDuplicationRequest.app_duplication_id)
  return _internal_app_duplication_id();
}
inline void GetAppDuplicationRequest::set_app_duplication_id(const std::string& value) {
  _internal_set_app_duplication_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.GetAppDuplicationRequest.app_duplication_id)
}
inline std::string* GetAppDuplicationRequest::mutable_app_duplication_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetAppDuplicationRequest.app_duplication_id)
  return _internal_mutable_app_duplication_id();
}
inline const std::string& GetAppDuplicationRequest::_internal_app_duplication_id() const {
  return app_duplication_id_.GetNoArena();
}
inline void GetAppDuplicationRequest::_internal_set_app_duplication_id(const std::string& value) {
  
  app_duplication_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetAppDuplicationRequest::set_app_duplication_id(std::string&& value) {
  
  app_duplication_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.GetAppDuplicationRequest.app_duplication_id)
}
inline void GetAppDuplicationRequest::set_app_duplication_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  app_duplication_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.GetAppDuplicationRequest.app_duplication_id)
}
inline void GetAppDuplicationRequest::set_app_duplication_id(const char* value, size_t size) {
  
  app_duplication_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.GetAppDuplicationRequest.app_duplication_id)
}
inline std::string* GetAppDuplicationRequest::_internal_mutable_app_duplication_id() {
  
  return app_duplication_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetAppDuplicationRequest::release_app_duplication_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetAppDuplicationRequest.app_duplication_id)
  
  return app_duplication_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetAppDuplicationRequest::set_allocated_app_duplication_id(std::string* app_duplication_id) {
  if (app_duplication_id != nullptr) {
    
  } else {
    
  }
  app_duplication_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_duplication_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetAppDuplicationRequest.app_duplication_id)
}

// -------------------------------------------------------------------

// ListAppDuplicationsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool ListAppDuplicationsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool ListAppDuplicationsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& ListAppDuplicationsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& ListAppDuplicationsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListAppDuplicationsRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* ListAppDuplicationsRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListAppDuplicationsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListAppDuplicationsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* ListAppDuplicationsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListAppDuplicationsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void ListAppDuplicationsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListAppDuplicationsRequest.user_app_id)
}

// -------------------------------------------------------------------

// MultiAppDuplicationsResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiAppDuplicationsResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiAppDuplicationsResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiAppDuplicationsResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiAppDuplicationsResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiAppDuplicationsResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* MultiAppDuplicationsResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiAppDuplicationsResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiAppDuplicationsResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiAppDuplicationsResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiAppDuplicationsResponse.status)
  return _internal_mutable_status();
}
inline void MultiAppDuplicationsResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiAppDuplicationsResponse.status)
}

// repeated .clarifai.api.AppDuplication app_duplications = 2;
inline int MultiAppDuplicationsResponse::_internal_app_duplications_size() const {
  return app_duplications_.size();
}
inline int MultiAppDuplicationsResponse::app_duplications_size() const {
  return _internal_app_duplications_size();
}
inline ::clarifai::api::AppDuplication* MultiAppDuplicationsResponse::mutable_app_duplications(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiAppDuplicationsResponse.app_duplications)
  return app_duplications_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::AppDuplication >*
MultiAppDuplicationsResponse::mutable_app_duplications() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiAppDuplicationsResponse.app_duplications)
  return &app_duplications_;
}
inline const ::clarifai::api::AppDuplication& MultiAppDuplicationsResponse::_internal_app_duplications(int index) const {
  return app_duplications_.Get(index);
}
inline const ::clarifai::api::AppDuplication& MultiAppDuplicationsResponse::app_duplications(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiAppDuplicationsResponse.app_duplications)
  return _internal_app_duplications(index);
}
inline ::clarifai::api::AppDuplication* MultiAppDuplicationsResponse::_internal_add_app_duplications() {
  return app_duplications_.Add();
}
inline ::clarifai::api::AppDuplication* MultiAppDuplicationsResponse::add_app_duplications() {
  // @@protoc_insertion_point(field_add:clarifai.api.MultiAppDuplicationsResponse.app_duplications)
  return _internal_add_app_duplications();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::AppDuplication >&
MultiAppDuplicationsResponse::app_duplications() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiAppDuplicationsResponse.app_duplications)
  return app_duplications_;
}

// -------------------------------------------------------------------

// SingleAppDuplicationResponse

// .clarifai.api.status.Status status = 1;
inline bool SingleAppDuplicationResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SingleAppDuplicationResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& SingleAppDuplicationResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& SingleAppDuplicationResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleAppDuplicationResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* SingleAppDuplicationResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleAppDuplicationResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* SingleAppDuplicationResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* SingleAppDuplicationResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleAppDuplicationResponse.status)
  return _internal_mutable_status();
}
inline void SingleAppDuplicationResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleAppDuplicationResponse.status)
}

// .clarifai.api.AppDuplication app_duplication = 2;
inline bool SingleAppDuplicationResponse::_internal_has_app_duplication() const {
  return this != internal_default_instance() && app_duplication_ != nullptr;
}
inline bool SingleAppDuplicationResponse::has_app_duplication() const {
  return _internal_has_app_duplication();
}
inline const ::clarifai::api::AppDuplication& SingleAppDuplicationResponse::_internal_app_duplication() const {
  const ::clarifai::api::AppDuplication* p = app_duplication_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::AppDuplication*>(
      &::clarifai::api::_AppDuplication_default_instance_);
}
inline const ::clarifai::api::AppDuplication& SingleAppDuplicationResponse::app_duplication() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleAppDuplicationResponse.app_duplication)
  return _internal_app_duplication();
}
inline ::clarifai::api::AppDuplication* SingleAppDuplicationResponse::release_app_duplication() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleAppDuplicationResponse.app_duplication)
  
  ::clarifai::api::AppDuplication* temp = app_duplication_;
  app_duplication_ = nullptr;
  return temp;
}
inline ::clarifai::api::AppDuplication* SingleAppDuplicationResponse::_internal_mutable_app_duplication() {
  
  if (app_duplication_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::AppDuplication>(GetArenaNoVirtual());
    app_duplication_ = p;
  }
  return app_duplication_;
}
inline ::clarifai::api::AppDuplication* SingleAppDuplicationResponse::mutable_app_duplication() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleAppDuplicationResponse.app_duplication)
  return _internal_mutable_app_duplication();
}
inline void SingleAppDuplicationResponse::set_allocated_app_duplication(::clarifai::api::AppDuplication* app_duplication) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(app_duplication_);
  }
  if (app_duplication) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      app_duplication = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, app_duplication, submessage_arena);
    }
    
  } else {
    
  }
  app_duplication_ = app_duplication;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleAppDuplicationResponse.app_duplication)
}

// -------------------------------------------------------------------

// PostTasksRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostTasksRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostTasksRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostTasksRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostTasksRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostTasksRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* PostTasksRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostTasksRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostTasksRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostTasksRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostTasksRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void PostTasksRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostTasksRequest.user_app_id)
}

// repeated .clarifai.api.Task tasks = 2;
inline int PostTasksRequest::_internal_tasks_size() const {
  return tasks_.size();
}
inline int PostTasksRequest::tasks_size() const {
  return _internal_tasks_size();
}
inline ::clarifai::api::Task* PostTasksRequest::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostTasksRequest.tasks)
  return tasks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Task >*
PostTasksRequest::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostTasksRequest.tasks)
  return &tasks_;
}
inline const ::clarifai::api::Task& PostTasksRequest::_internal_tasks(int index) const {
  return tasks_.Get(index);
}
inline const ::clarifai::api::Task& PostTasksRequest::tasks(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostTasksRequest.tasks)
  return _internal_tasks(index);
}
inline ::clarifai::api::Task* PostTasksRequest::_internal_add_tasks() {
  return tasks_.Add();
}
inline ::clarifai::api::Task* PostTasksRequest::add_tasks() {
  // @@protoc_insertion_point(field_add:clarifai.api.PostTasksRequest.tasks)
  return _internal_add_tasks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Task >&
PostTasksRequest::tasks() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostTasksRequest.tasks)
  return tasks_;
}

// -------------------------------------------------------------------

// GetTaskRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool GetTaskRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool GetTaskRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& GetTaskRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& GetTaskRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetTaskRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* GetTaskRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetTaskRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetTaskRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* GetTaskRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetTaskRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void GetTaskRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetTaskRequest.user_app_id)
}

// string task_id = 2;
inline void GetTaskRequest::clear_task_id() {
  task_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetTaskRequest::task_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetTaskRequest.task_id)
  return _internal_task_id();
}
inline void GetTaskRequest::set_task_id(const std::string& value) {
  _internal_set_task_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.GetTaskRequest.task_id)
}
inline std::string* GetTaskRequest::mutable_task_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetTaskRequest.task_id)
  return _internal_mutable_task_id();
}
inline const std::string& GetTaskRequest::_internal_task_id() const {
  return task_id_.GetNoArena();
}
inline void GetTaskRequest::_internal_set_task_id(const std::string& value) {
  
  task_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetTaskRequest::set_task_id(std::string&& value) {
  
  task_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.GetTaskRequest.task_id)
}
inline void GetTaskRequest::set_task_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  task_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.GetTaskRequest.task_id)
}
inline void GetTaskRequest::set_task_id(const char* value, size_t size) {
  
  task_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.GetTaskRequest.task_id)
}
inline std::string* GetTaskRequest::_internal_mutable_task_id() {
  
  return task_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetTaskRequest::release_task_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetTaskRequest.task_id)
  
  return task_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetTaskRequest::set_allocated_task_id(std::string* task_id) {
  if (task_id != nullptr) {
    
  } else {
    
  }
  task_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetTaskRequest.task_id)
}

// -------------------------------------------------------------------

// ListTasksRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool ListTasksRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool ListTasksRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& ListTasksRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& ListTasksRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListTasksRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* ListTasksRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListTasksRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListTasksRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* ListTasksRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListTasksRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void ListTasksRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListTasksRequest.user_app_id)
}

// uint32 page = 2;
inline void ListTasksRequest::clear_page() {
  page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListTasksRequest::_internal_page() const {
  return page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListTasksRequest::page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListTasksRequest.page)
  return _internal_page();
}
inline void ListTasksRequest::_internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  page_ = value;
}
inline void ListTasksRequest::set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListTasksRequest.page)
}

// uint32 per_page = 3;
inline void ListTasksRequest::clear_per_page() {
  per_page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListTasksRequest::_internal_per_page() const {
  return per_page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListTasksRequest::per_page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListTasksRequest.per_page)
  return _internal_per_page();
}
inline void ListTasksRequest::_internal_set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  per_page_ = value;
}
inline void ListTasksRequest::set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_per_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListTasksRequest.per_page)
}

// -------------------------------------------------------------------

// PatchTasksRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PatchTasksRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PatchTasksRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PatchTasksRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PatchTasksRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchTasksRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* PatchTasksRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchTasksRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchTasksRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PatchTasksRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchTasksRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void PatchTasksRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchTasksRequest.user_app_id)
}

// repeated .clarifai.api.Task tasks = 2;
inline int PatchTasksRequest::_internal_tasks_size() const {
  return tasks_.size();
}
inline int PatchTasksRequest::tasks_size() const {
  return _internal_tasks_size();
}
inline ::clarifai::api::Task* PatchTasksRequest::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchTasksRequest.tasks)
  return tasks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Task >*
PatchTasksRequest::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PatchTasksRequest.tasks)
  return &tasks_;
}
inline const ::clarifai::api::Task& PatchTasksRequest::_internal_tasks(int index) const {
  return tasks_.Get(index);
}
inline const ::clarifai::api::Task& PatchTasksRequest::tasks(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchTasksRequest.tasks)
  return _internal_tasks(index);
}
inline ::clarifai::api::Task* PatchTasksRequest::_internal_add_tasks() {
  return tasks_.Add();
}
inline ::clarifai::api::Task* PatchTasksRequest::add_tasks() {
  // @@protoc_insertion_point(field_add:clarifai.api.PatchTasksRequest.tasks)
  return _internal_add_tasks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Task >&
PatchTasksRequest::tasks() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PatchTasksRequest.tasks)
  return tasks_;
}

// string action = 3;
inline void PatchTasksRequest::clear_action() {
  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PatchTasksRequest::action() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchTasksRequest.action)
  return _internal_action();
}
inline void PatchTasksRequest::set_action(const std::string& value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PatchTasksRequest.action)
}
inline std::string* PatchTasksRequest::mutable_action() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchTasksRequest.action)
  return _internal_mutable_action();
}
inline const std::string& PatchTasksRequest::_internal_action() const {
  return action_.GetNoArena();
}
inline void PatchTasksRequest::_internal_set_action(const std::string& value) {
  
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PatchTasksRequest::set_action(std::string&& value) {
  
  action_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.PatchTasksRequest.action)
}
inline void PatchTasksRequest::set_action(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.PatchTasksRequest.action)
}
inline void PatchTasksRequest::set_action(const char* value, size_t size) {
  
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PatchTasksRequest.action)
}
inline std::string* PatchTasksRequest::_internal_mutable_action() {
  
  return action_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PatchTasksRequest::release_action() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchTasksRequest.action)
  
  return action_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PatchTasksRequest::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchTasksRequest.action)
}

// -------------------------------------------------------------------

// DeleteTasksRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool DeleteTasksRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool DeleteTasksRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& DeleteTasksRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& DeleteTasksRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteTasksRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* DeleteTasksRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteTasksRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteTasksRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* DeleteTasksRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteTasksRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void DeleteTasksRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteTasksRequest.user_app_id)
}

// repeated string ids = 2;
inline int DeleteTasksRequest::_internal_ids_size() const {
  return ids_.size();
}
inline int DeleteTasksRequest::ids_size() const {
  return _internal_ids_size();
}
inline void DeleteTasksRequest::clear_ids() {
  ids_.Clear();
}
inline std::string* DeleteTasksRequest::add_ids() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.DeleteTasksRequest.ids)
  return _internal_add_ids();
}
inline const std::string& DeleteTasksRequest::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const std::string& DeleteTasksRequest::ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteTasksRequest.ids)
  return _internal_ids(index);
}
inline std::string* DeleteTasksRequest::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteTasksRequest.ids)
  return ids_.Mutable(index);
}
inline void DeleteTasksRequest::set_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteTasksRequest.ids)
  ids_.Mutable(index)->assign(value);
}
inline void DeleteTasksRequest::set_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteTasksRequest.ids)
  ids_.Mutable(index)->assign(std::move(value));
}
inline void DeleteTasksRequest::set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.DeleteTasksRequest.ids)
}
inline void DeleteTasksRequest::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.DeleteTasksRequest.ids)
}
inline std::string* DeleteTasksRequest::_internal_add_ids() {
  return ids_.Add();
}
inline void DeleteTasksRequest::add_ids(const std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.DeleteTasksRequest.ids)
}
inline void DeleteTasksRequest::add_ids(std::string&& value) {
  ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.DeleteTasksRequest.ids)
}
inline void DeleteTasksRequest::add_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.DeleteTasksRequest.ids)
}
inline void DeleteTasksRequest::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.DeleteTasksRequest.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeleteTasksRequest::ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.DeleteTasksRequest.ids)
  return ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeleteTasksRequest::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.DeleteTasksRequest.ids)
  return &ids_;
}

// -------------------------------------------------------------------

// MultiTaskResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiTaskResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiTaskResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiTaskResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiTaskResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiTaskResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* MultiTaskResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiTaskResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiTaskResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiTaskResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiTaskResponse.status)
  return _internal_mutable_status();
}
inline void MultiTaskResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiTaskResponse.status)
}

// repeated .clarifai.api.Task tasks = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int MultiTaskResponse::_internal_tasks_size() const {
  return tasks_.size();
}
inline int MultiTaskResponse::tasks_size() const {
  return _internal_tasks_size();
}
inline ::clarifai::api::Task* MultiTaskResponse::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiTaskResponse.tasks)
  return tasks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Task >*
MultiTaskResponse::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiTaskResponse.tasks)
  return &tasks_;
}
inline const ::clarifai::api::Task& MultiTaskResponse::_internal_tasks(int index) const {
  return tasks_.Get(index);
}
inline const ::clarifai::api::Task& MultiTaskResponse::tasks(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiTaskResponse.tasks)
  return _internal_tasks(index);
}
inline ::clarifai::api::Task* MultiTaskResponse::_internal_add_tasks() {
  return tasks_.Add();
}
inline ::clarifai::api::Task* MultiTaskResponse::add_tasks() {
  // @@protoc_insertion_point(field_add:clarifai.api.MultiTaskResponse.tasks)
  return _internal_add_tasks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Task >&
MultiTaskResponse::tasks() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiTaskResponse.tasks)
  return tasks_;
}

// -------------------------------------------------------------------

// SingleTaskResponse

// .clarifai.api.status.Status status = 1;
inline bool SingleTaskResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SingleTaskResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& SingleTaskResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& SingleTaskResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleTaskResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* SingleTaskResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleTaskResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* SingleTaskResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* SingleTaskResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleTaskResponse.status)
  return _internal_mutable_status();
}
inline void SingleTaskResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleTaskResponse.status)
}

// .clarifai.api.Task task = 2;
inline bool SingleTaskResponse::_internal_has_task() const {
  return this != internal_default_instance() && task_ != nullptr;
}
inline bool SingleTaskResponse::has_task() const {
  return _internal_has_task();
}
inline const ::clarifai::api::Task& SingleTaskResponse::_internal_task() const {
  const ::clarifai::api::Task* p = task_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Task*>(
      &::clarifai::api::_Task_default_instance_);
}
inline const ::clarifai::api::Task& SingleTaskResponse::task() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleTaskResponse.task)
  return _internal_task();
}
inline ::clarifai::api::Task* SingleTaskResponse::release_task() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleTaskResponse.task)
  
  ::clarifai::api::Task* temp = task_;
  task_ = nullptr;
  return temp;
}
inline ::clarifai::api::Task* SingleTaskResponse::_internal_mutable_task() {
  
  if (task_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Task>(GetArenaNoVirtual());
    task_ = p;
  }
  return task_;
}
inline ::clarifai::api::Task* SingleTaskResponse::mutable_task() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleTaskResponse.task)
  return _internal_mutable_task();
}
inline void SingleTaskResponse::set_allocated_task(::clarifai::api::Task* task) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_);
  }
  if (task) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      task = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, task, submessage_arena);
    }
    
  } else {
    
  }
  task_ = task;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleTaskResponse.task)
}

// -------------------------------------------------------------------

// PostCollectorsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostCollectorsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostCollectorsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostCollectorsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostCollectorsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostCollectorsRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* PostCollectorsRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostCollectorsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostCollectorsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostCollectorsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostCollectorsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void PostCollectorsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostCollectorsRequest.user_app_id)
}

// repeated .clarifai.api.Collector collectors = 2;
inline int PostCollectorsRequest::_internal_collectors_size() const {
  return collectors_.size();
}
inline int PostCollectorsRequest::collectors_size() const {
  return _internal_collectors_size();
}
inline ::clarifai::api::Collector* PostCollectorsRequest::mutable_collectors(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostCollectorsRequest.collectors)
  return collectors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collector >*
PostCollectorsRequest::mutable_collectors() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostCollectorsRequest.collectors)
  return &collectors_;
}
inline const ::clarifai::api::Collector& PostCollectorsRequest::_internal_collectors(int index) const {
  return collectors_.Get(index);
}
inline const ::clarifai::api::Collector& PostCollectorsRequest::collectors(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostCollectorsRequest.collectors)
  return _internal_collectors(index);
}
inline ::clarifai::api::Collector* PostCollectorsRequest::_internal_add_collectors() {
  return collectors_.Add();
}
inline ::clarifai::api::Collector* PostCollectorsRequest::add_collectors() {
  // @@protoc_insertion_point(field_add:clarifai.api.PostCollectorsRequest.collectors)
  return _internal_add_collectors();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collector >&
PostCollectorsRequest::collectors() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostCollectorsRequest.collectors)
  return collectors_;
}

// -------------------------------------------------------------------

// PatchCollectorsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PatchCollectorsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PatchCollectorsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PatchCollectorsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PatchCollectorsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchCollectorsRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* PatchCollectorsRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchCollectorsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchCollectorsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PatchCollectorsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchCollectorsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void PatchCollectorsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchCollectorsRequest.user_app_id)
}

// repeated .clarifai.api.Collector collectors = 2;
inline int PatchCollectorsRequest::_internal_collectors_size() const {
  return collectors_.size();
}
inline int PatchCollectorsRequest::collectors_size() const {
  return _internal_collectors_size();
}
inline ::clarifai::api::Collector* PatchCollectorsRequest::mutable_collectors(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchCollectorsRequest.collectors)
  return collectors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collector >*
PatchCollectorsRequest::mutable_collectors() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PatchCollectorsRequest.collectors)
  return &collectors_;
}
inline const ::clarifai::api::Collector& PatchCollectorsRequest::_internal_collectors(int index) const {
  return collectors_.Get(index);
}
inline const ::clarifai::api::Collector& PatchCollectorsRequest::collectors(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchCollectorsRequest.collectors)
  return _internal_collectors(index);
}
inline ::clarifai::api::Collector* PatchCollectorsRequest::_internal_add_collectors() {
  return collectors_.Add();
}
inline ::clarifai::api::Collector* PatchCollectorsRequest::add_collectors() {
  // @@protoc_insertion_point(field_add:clarifai.api.PatchCollectorsRequest.collectors)
  return _internal_add_collectors();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collector >&
PatchCollectorsRequest::collectors() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PatchCollectorsRequest.collectors)
  return collectors_;
}

// string action = 3;
inline void PatchCollectorsRequest::clear_action() {
  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PatchCollectorsRequest::action() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchCollectorsRequest.action)
  return _internal_action();
}
inline void PatchCollectorsRequest::set_action(const std::string& value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PatchCollectorsRequest.action)
}
inline std::string* PatchCollectorsRequest::mutable_action() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchCollectorsRequest.action)
  return _internal_mutable_action();
}
inline const std::string& PatchCollectorsRequest::_internal_action() const {
  return action_.GetNoArena();
}
inline void PatchCollectorsRequest::_internal_set_action(const std::string& value) {
  
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PatchCollectorsRequest::set_action(std::string&& value) {
  
  action_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.PatchCollectorsRequest.action)
}
inline void PatchCollectorsRequest::set_action(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.PatchCollectorsRequest.action)
}
inline void PatchCollectorsRequest::set_action(const char* value, size_t size) {
  
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PatchCollectorsRequest.action)
}
inline std::string* PatchCollectorsRequest::_internal_mutable_action() {
  
  return action_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PatchCollectorsRequest::release_action() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchCollectorsRequest.action)
  
  return action_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PatchCollectorsRequest::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchCollectorsRequest.action)
}

// -------------------------------------------------------------------

// DeleteCollectorsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool DeleteCollectorsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool DeleteCollectorsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& DeleteCollectorsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& DeleteCollectorsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteCollectorsRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* DeleteCollectorsRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteCollectorsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteCollectorsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* DeleteCollectorsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteCollectorsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void DeleteCollectorsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteCollectorsRequest.user_app_id)
}

// repeated string ids = 2;
inline int DeleteCollectorsRequest::_internal_ids_size() const {
  return ids_.size();
}
inline int DeleteCollectorsRequest::ids_size() const {
  return _internal_ids_size();
}
inline void DeleteCollectorsRequest::clear_ids() {
  ids_.Clear();
}
inline std::string* DeleteCollectorsRequest::add_ids() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.DeleteCollectorsRequest.ids)
  return _internal_add_ids();
}
inline const std::string& DeleteCollectorsRequest::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const std::string& DeleteCollectorsRequest::ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteCollectorsRequest.ids)
  return _internal_ids(index);
}
inline std::string* DeleteCollectorsRequest::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteCollectorsRequest.ids)
  return ids_.Mutable(index);
}
inline void DeleteCollectorsRequest::set_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteCollectorsRequest.ids)
  ids_.Mutable(index)->assign(value);
}
inline void DeleteCollectorsRequest::set_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteCollectorsRequest.ids)
  ids_.Mutable(index)->assign(std::move(value));
}
inline void DeleteCollectorsRequest::set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.DeleteCollectorsRequest.ids)
}
inline void DeleteCollectorsRequest::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.DeleteCollectorsRequest.ids)
}
inline std::string* DeleteCollectorsRequest::_internal_add_ids() {
  return ids_.Add();
}
inline void DeleteCollectorsRequest::add_ids(const std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.DeleteCollectorsRequest.ids)
}
inline void DeleteCollectorsRequest::add_ids(std::string&& value) {
  ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.DeleteCollectorsRequest.ids)
}
inline void DeleteCollectorsRequest::add_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.DeleteCollectorsRequest.ids)
}
inline void DeleteCollectorsRequest::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.DeleteCollectorsRequest.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeleteCollectorsRequest::ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.DeleteCollectorsRequest.ids)
  return ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeleteCollectorsRequest::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.DeleteCollectorsRequest.ids)
  return &ids_;
}

// bool delete_all = 3;
inline void DeleteCollectorsRequest::clear_delete_all() {
  delete_all_ = false;
}
inline bool DeleteCollectorsRequest::_internal_delete_all() const {
  return delete_all_;
}
inline bool DeleteCollectorsRequest::delete_all() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteCollectorsRequest.delete_all)
  return _internal_delete_all();
}
inline void DeleteCollectorsRequest::_internal_set_delete_all(bool value) {
  
  delete_all_ = value;
}
inline void DeleteCollectorsRequest::set_delete_all(bool value) {
  _internal_set_delete_all(value);
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteCollectorsRequest.delete_all)
}

// -------------------------------------------------------------------

// GetCollectorRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool GetCollectorRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool GetCollectorRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& GetCollectorRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& GetCollectorRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetCollectorRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* GetCollectorRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetCollectorRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetCollectorRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* GetCollectorRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetCollectorRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void GetCollectorRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetCollectorRequest.user_app_id)
}

// string collector_id = 2;
inline void GetCollectorRequest::clear_collector_id() {
  collector_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetCollectorRequest::collector_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetCollectorRequest.collector_id)
  return _internal_collector_id();
}
inline void GetCollectorRequest::set_collector_id(const std::string& value) {
  _internal_set_collector_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.GetCollectorRequest.collector_id)
}
inline std::string* GetCollectorRequest::mutable_collector_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetCollectorRequest.collector_id)
  return _internal_mutable_collector_id();
}
inline const std::string& GetCollectorRequest::_internal_collector_id() const {
  return collector_id_.GetNoArena();
}
inline void GetCollectorRequest::_internal_set_collector_id(const std::string& value) {
  
  collector_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetCollectorRequest::set_collector_id(std::string&& value) {
  
  collector_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.GetCollectorRequest.collector_id)
}
inline void GetCollectorRequest::set_collector_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collector_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.GetCollectorRequest.collector_id)
}
inline void GetCollectorRequest::set_collector_id(const char* value, size_t size) {
  
  collector_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.GetCollectorRequest.collector_id)
}
inline std::string* GetCollectorRequest::_internal_mutable_collector_id() {
  
  return collector_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetCollectorRequest::release_collector_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetCollectorRequest.collector_id)
  
  return collector_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetCollectorRequest::set_allocated_collector_id(std::string* collector_id) {
  if (collector_id != nullptr) {
    
  } else {
    
  }
  collector_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collector_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetCollectorRequest.collector_id)
}

// -------------------------------------------------------------------

// ListCollectorsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool ListCollectorsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool ListCollectorsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& ListCollectorsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& ListCollectorsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListCollectorsRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* ListCollectorsRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListCollectorsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListCollectorsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* ListCollectorsRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListCollectorsRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void ListCollectorsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListCollectorsRequest.user_app_id)
}

// uint32 page = 2;
inline void ListCollectorsRequest::clear_page() {
  page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListCollectorsRequest::_internal_page() const {
  return page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListCollectorsRequest::page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListCollectorsRequest.page)
  return _internal_page();
}
inline void ListCollectorsRequest::_internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  page_ = value;
}
inline void ListCollectorsRequest::set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListCollectorsRequest.page)
}

// uint32 per_page = 3;
inline void ListCollectorsRequest::clear_per_page() {
  per_page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListCollectorsRequest::_internal_per_page() const {
  return per_page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListCollectorsRequest::per_page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListCollectorsRequest.per_page)
  return _internal_per_page();
}
inline void ListCollectorsRequest::_internal_set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  per_page_ = value;
}
inline void ListCollectorsRequest::set_per_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_per_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListCollectorsRequest.per_page)
}

// -------------------------------------------------------------------

// MultiCollectorResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiCollectorResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiCollectorResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiCollectorResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiCollectorResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiCollectorResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* MultiCollectorResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiCollectorResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiCollectorResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiCollectorResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiCollectorResponse.status)
  return _internal_mutable_status();
}
inline void MultiCollectorResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiCollectorResponse.status)
}

// repeated .clarifai.api.Collector collectors = 2;
inline int MultiCollectorResponse::_internal_collectors_size() const {
  return collectors_.size();
}
inline int MultiCollectorResponse::collectors_size() const {
  return _internal_collectors_size();
}
inline ::clarifai::api::Collector* MultiCollectorResponse::mutable_collectors(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiCollectorResponse.collectors)
  return collectors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collector >*
MultiCollectorResponse::mutable_collectors() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiCollectorResponse.collectors)
  return &collectors_;
}
inline const ::clarifai::api::Collector& MultiCollectorResponse::_internal_collectors(int index) const {
  return collectors_.Get(index);
}
inline const ::clarifai::api::Collector& MultiCollectorResponse::collectors(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiCollectorResponse.collectors)
  return _internal_collectors(index);
}
inline ::clarifai::api::Collector* MultiCollectorResponse::_internal_add_collectors() {
  return collectors_.Add();
}
inline ::clarifai::api::Collector* MultiCollectorResponse::add_collectors() {
  // @@protoc_insertion_point(field_add:clarifai.api.MultiCollectorResponse.collectors)
  return _internal_add_collectors();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collector >&
MultiCollectorResponse::collectors() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiCollectorResponse.collectors)
  return collectors_;
}

// -------------------------------------------------------------------

// SingleCollectorResponse

// .clarifai.api.status.Status status = 1;
inline bool SingleCollectorResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SingleCollectorResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& SingleCollectorResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& SingleCollectorResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleCollectorResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* SingleCollectorResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleCollectorResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* SingleCollectorResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* SingleCollectorResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleCollectorResponse.status)
  return _internal_mutable_status();
}
inline void SingleCollectorResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleCollectorResponse.status)
}

// .clarifai.api.Collector collector = 2;
inline bool SingleCollectorResponse::_internal_has_collector() const {
  return this != internal_default_instance() && collector_ != nullptr;
}
inline bool SingleCollectorResponse::has_collector() const {
  return _internal_has_collector();
}
inline const ::clarifai::api::Collector& SingleCollectorResponse::_internal_collector() const {
  const ::clarifai::api::Collector* p = collector_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Collector*>(
      &::clarifai::api::_Collector_default_instance_);
}
inline const ::clarifai::api::Collector& SingleCollectorResponse::collector() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleCollectorResponse.collector)
  return _internal_collector();
}
inline ::clarifai::api::Collector* SingleCollectorResponse::release_collector() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleCollectorResponse.collector)
  
  ::clarifai::api::Collector* temp = collector_;
  collector_ = nullptr;
  return temp;
}
inline ::clarifai::api::Collector* SingleCollectorResponse::_internal_mutable_collector() {
  
  if (collector_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Collector>(GetArenaNoVirtual());
    collector_ = p;
  }
  return collector_;
}
inline ::clarifai::api::Collector* SingleCollectorResponse::mutable_collector() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleCollectorResponse.collector)
  return _internal_mutable_collector();
}
inline void SingleCollectorResponse::set_allocated_collector(::clarifai::api::Collector* collector) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(collector_);
  }
  if (collector) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      collector = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, collector, submessage_arena);
    }
    
  } else {
    
  }
  collector_ = collector;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleCollectorResponse.collector)
}

// -------------------------------------------------------------------

// PostStatValuesRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostStatValuesRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostStatValuesRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostStatValuesRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostStatValuesRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostStatValuesRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* PostStatValuesRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostStatValuesRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostStatValuesRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostStatValuesRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostStatValuesRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void PostStatValuesRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostStatValuesRequest.user_app_id)
}

// repeated .clarifai.api.StatValue stat_values = 2;
inline int PostStatValuesRequest::_internal_stat_values_size() const {
  return stat_values_.size();
}
inline int PostStatValuesRequest::stat_values_size() const {
  return _internal_stat_values_size();
}
inline ::clarifai::api::StatValue* PostStatValuesRequest::mutable_stat_values(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostStatValuesRequest.stat_values)
  return stat_values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::StatValue >*
PostStatValuesRequest::mutable_stat_values() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostStatValuesRequest.stat_values)
  return &stat_values_;
}
inline const ::clarifai::api::StatValue& PostStatValuesRequest::_internal_stat_values(int index) const {
  return stat_values_.Get(index);
}
inline const ::clarifai::api::StatValue& PostStatValuesRequest::stat_values(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostStatValuesRequest.stat_values)
  return _internal_stat_values(index);
}
inline ::clarifai::api::StatValue* PostStatValuesRequest::_internal_add_stat_values() {
  return stat_values_.Add();
}
inline ::clarifai::api::StatValue* PostStatValuesRequest::add_stat_values() {
  // @@protoc_insertion_point(field_add:clarifai.api.PostStatValuesRequest.stat_values)
  return _internal_add_stat_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::StatValue >&
PostStatValuesRequest::stat_values() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostStatValuesRequest.stat_values)
  return stat_values_;
}

// -------------------------------------------------------------------

// MultiStatValueResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiStatValueResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiStatValueResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiStatValueResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiStatValueResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiStatValueResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* MultiStatValueResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiStatValueResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiStatValueResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiStatValueResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiStatValueResponse.status)
  return _internal_mutable_status();
}
inline void MultiStatValueResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiStatValueResponse.status)
}

// repeated .clarifai.api.StatValue stat_values = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int MultiStatValueResponse::_internal_stat_values_size() const {
  return stat_values_.size();
}
inline int MultiStatValueResponse::stat_values_size() const {
  return _internal_stat_values_size();
}
inline ::clarifai::api::StatValue* MultiStatValueResponse::mutable_stat_values(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiStatValueResponse.stat_values)
  return stat_values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::StatValue >*
MultiStatValueResponse::mutable_stat_values() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiStatValueResponse.stat_values)
  return &stat_values_;
}
inline const ::clarifai::api::StatValue& MultiStatValueResponse::_internal_stat_values(int index) const {
  return stat_values_.Get(index);
}
inline const ::clarifai::api::StatValue& MultiStatValueResponse::stat_values(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiStatValueResponse.stat_values)
  return _internal_stat_values(index);
}
inline ::clarifai::api::StatValue* MultiStatValueResponse::_internal_add_stat_values() {
  return stat_values_.Add();
}
inline ::clarifai::api::StatValue* MultiStatValueResponse::add_stat_values() {
  // @@protoc_insertion_point(field_add:clarifai.api.MultiStatValueResponse.stat_values)
  return _internal_add_stat_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::StatValue >&
MultiStatValueResponse::stat_values() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiStatValueResponse.stat_values)
  return stat_values_;
}

// -------------------------------------------------------------------

// PostStatValuesAggregateRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostStatValuesAggregateRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostStatValuesAggregateRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostStatValuesAggregateRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostStatValuesAggregateRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostStatValuesAggregateRequest.user_app_id)
  return _internal_user_app_id();
}
inline ::clarifai::api::UserAppIDSet* PostStatValuesAggregateRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostStatValuesAggregateRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostStatValuesAggregateRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostStatValuesAggregateRequest::mutable_user_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostStatValuesAggregateRequest.user_app_id)
  return _internal_mutable_user_app_id();
}
inline void PostStatValuesAggregateRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostStatValuesAggregateRequest.user_app_id)
}

// repeated .clarifai.api.StatValueAggregateQuery stat_value_aggregate_queries = 2;
inline int PostStatValuesAggregateRequest::_internal_stat_value_aggregate_queries_size() const {
  return stat_value_aggregate_queries_.size();
}
inline int PostStatValuesAggregateRequest::stat_value_aggregate_queries_size() const {
  return _internal_stat_value_aggregate_queries_size();
}
inline ::clarifai::api::StatValueAggregateQuery* PostStatValuesAggregateRequest::mutable_stat_value_aggregate_queries(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostStatValuesAggregateRequest.stat_value_aggregate_queries)
  return stat_value_aggregate_queries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::StatValueAggregateQuery >*
PostStatValuesAggregateRequest::mutable_stat_value_aggregate_queries() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostStatValuesAggregateRequest.stat_value_aggregate_queries)
  return &stat_value_aggregate_queries_;
}
inline const ::clarifai::api::StatValueAggregateQuery& PostStatValuesAggregateRequest::_internal_stat_value_aggregate_queries(int index) const {
  return stat_value_aggregate_queries_.Get(index);
}
inline const ::clarifai::api::StatValueAggregateQuery& PostStatValuesAggregateRequest::stat_value_aggregate_queries(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostStatValuesAggregateRequest.stat_value_aggregate_queries)
  return _internal_stat_value_aggregate_queries(index);
}
inline ::clarifai::api::StatValueAggregateQuery* PostStatValuesAggregateRequest::_internal_add_stat_value_aggregate_queries() {
  return stat_value_aggregate_queries_.Add();
}
inline ::clarifai::api::StatValueAggregateQuery* PostStatValuesAggregateRequest::add_stat_value_aggregate_queries() {
  // @@protoc_insertion_point(field_add:clarifai.api.PostStatValuesAggregateRequest.stat_value_aggregate_queries)
  return _internal_add_stat_value_aggregate_queries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::StatValueAggregateQuery >&
PostStatValuesAggregateRequest::stat_value_aggregate_queries() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostStatValuesAggregateRequest.stat_value_aggregate_queries)
  return stat_value_aggregate_queries_;
}

// -------------------------------------------------------------------

// MultiStatValueAggregateResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiStatValueAggregateResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiStatValueAggregateResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiStatValueAggregateResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiStatValueAggregateResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiStatValueAggregateResponse.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* MultiStatValueAggregateResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiStatValueAggregateResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiStatValueAggregateResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiStatValueAggregateResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiStatValueAggregateResponse.status)
  return _internal_mutable_status();
}
inline void MultiStatValueAggregateResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiStatValueAggregateResponse.status)
}

// repeated .clarifai.api.StatValueAggregateResult stat_value_aggregate_results = 2;
inline int MultiStatValueAggregateResponse::_internal_stat_value_aggregate_results_size() const {
  return stat_value_aggregate_results_.size();
}
inline int MultiStatValueAggregateResponse::stat_value_aggregate_results_size() const {
  return _internal_stat_value_aggregate_results_size();
}
inline ::clarifai::api::StatValueAggregateResult* MultiStatValueAggregateResponse::mutable_stat_value_aggregate_results(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiStatValueAggregateResponse.stat_value_aggregate_results)
  return stat_value_aggregate_results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::StatValueAggregateResult >*
MultiStatValueAggregateResponse::mutable_stat_value_aggregate_results() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiStatValueAggregateResponse.stat_value_aggregate_results)
  return &stat_value_aggregate_results_;
}
inline const ::clarifai::api::StatValueAggregateResult& MultiStatValueAggregateResponse::_internal_stat_value_aggregate_results(int index) const {
  return stat_value_aggregate_results_.Get(index);
}
inline const ::clarifai::api::StatValueAggregateResult& MultiStatValueAggregateResponse::stat_value_aggregate_results(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiStatValueAggregateResponse.stat_value_aggregate_results)
  return _internal_stat_value_aggregate_results(index);
}
inline ::clarifai::api::StatValueAggregateResult* MultiStatValueAggregateResponse::_internal_add_stat_value_aggregate_results() {
  return stat_value_aggregate_results_.Add();
}
inline ::clarifai::api::StatValueAggregateResult* MultiStatValueAggregateResponse::add_stat_value_aggregate_results() {
  // @@protoc_insertion_point(field_add:clarifai.api.MultiStatValueAggregateResponse.stat_value_aggregate_results)
  return _internal_add_stat_value_aggregate_results();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::StatValueAggregateResult >&
MultiStatValueAggregateResponse::stat_value_aggregate_results() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiStatValueAggregateResponse.stat_value_aggregate_results)
  return stat_value_aggregate_results_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace clarifai

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fclarifai_2fapi_2fservice_2eproto
