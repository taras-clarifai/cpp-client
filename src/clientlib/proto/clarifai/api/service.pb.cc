// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/clarifai/api/service.proto

#include "proto/clarifai/api/service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<13> scc_info_Annotation_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AnnotationSearchMetrics_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_App_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_AppDuplication_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AttributeQuery_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AuthMethod_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BillingCycle_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Collaboration_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Collaborator_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Collector_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Concept_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ConceptCount_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConceptLanguage_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ConceptMapping_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConceptMappingJob_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConceptQuery_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConceptReference_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConceptRelation_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreditCard_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DimensionList_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EmailAddress_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EndpointDeps_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_EventsCollection_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FieldsValue_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InputCount_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InvoiceItem_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Key_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KnowledgeGraph_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_License_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_LicenseLimit_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Model_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelQuery_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_ModelVersion_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Output_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_OutputConfig_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pagination_proto_2fclarifai_2fapi_2fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Password_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PasswordPolicy_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PasswordViolations_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PatchAction_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Plan_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Query_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RealtimeCount_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScopeDeps_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Search_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StatValue_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StatValueAggregateQuery_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StatValueAggregateResult_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Task_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrainingTemplate_proto_2fclarifai_2fapi_2fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UsageInterval_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_User_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserInfo_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserPassword_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Vocab_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Workflow_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_WorkflowResult_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WorkflowResultsSimilarity_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fduration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Duration_google_2fprotobuf_2fduration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fstruct_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace clarifai {
namespace api {
class TestMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestMessage> _instance;
} _TestMessage_default_instance_;
class PaginationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Pagination> _instance;
} _Pagination_default_instance_;
class GetAnnotationRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAnnotationRequest> _instance;
} _GetAnnotationRequest_default_instance_;
class ListAnnotationsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListAnnotationsRequest> _instance;
} _ListAnnotationsRequest_default_instance_;
class PostAnnotationsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostAnnotationsRequest> _instance;
} _PostAnnotationsRequest_default_instance_;
class PatchAnnotationsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PatchAnnotationsRequest> _instance;
} _PatchAnnotationsRequest_default_instance_;
class DeleteAnnotationRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteAnnotationRequest> _instance;
} _DeleteAnnotationRequest_default_instance_;
class DeleteAnnotationsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteAnnotationsRequest> _instance;
} _DeleteAnnotationsRequest_default_instance_;
class SingleAnnotationResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleAnnotationResponse> _instance;
} _SingleAnnotationResponse_default_instance_;
class MultiAnnotationResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiAnnotationResponse> _instance;
} _MultiAnnotationResponse_default_instance_;
class GetAppRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAppRequest> _instance;
} _GetAppRequest_default_instance_;
class ListAppsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListAppsRequest> _instance;
} _ListAppsRequest_default_instance_;
class PostAppsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostAppsRequest> _instance;
} _PostAppsRequest_default_instance_;
class DeleteAppRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteAppRequest> _instance;
} _DeleteAppRequest_default_instance_;
class PatchAppsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PatchAppsRequest> _instance;
} _PatchAppsRequest_default_instance_;
class SingleAppResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleAppResponse> _instance;
} _SingleAppResponse_default_instance_;
class MultiAppResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiAppResponse> _instance;
} _MultiAppResponse_default_instance_;
class ListCollaboratorsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListCollaboratorsRequest> _instance;
} _ListCollaboratorsRequest_default_instance_;
class PostCollaboratorsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostCollaboratorsRequest> _instance;
} _PostCollaboratorsRequest_default_instance_;
class PatchCollaboratorsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PatchCollaboratorsRequest> _instance;
} _PatchCollaboratorsRequest_default_instance_;
class DeleteCollaboratorsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteCollaboratorsRequest> _instance;
} _DeleteCollaboratorsRequest_default_instance_;
class MultiCollaboratorsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiCollaboratorsResponse> _instance;
} _MultiCollaboratorsResponse_default_instance_;
class ListCollaborationsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListCollaborationsRequest> _instance;
} _ListCollaborationsRequest_default_instance_;
class MultiCollaborationsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiCollaborationsResponse> _instance;
} _MultiCollaborationsResponse_default_instance_;
class PostVerifyEmailRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostVerifyEmailRequest> _instance;
} _PostVerifyEmailRequest_default_instance_;
class SingleVerifyEmailResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleVerifyEmailResponse> _instance;
} _SingleVerifyEmailResponse_default_instance_;
class ListAuthMethodsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListAuthMethodsRequest> _instance;
} _ListAuthMethodsRequest_default_instance_;
class ListAuthMethodsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListAuthMethodsResponse> _instance;
} _ListAuthMethodsResponse_default_instance_;
class RequestResetPasswordRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestResetPasswordRequest> _instance;
} _RequestResetPasswordRequest_default_instance_;
class CompleteResetPasswordRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CompleteResetPasswordRequest> _instance;
} _CompleteResetPasswordRequest_default_instance_;
class PostLoginRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostLoginRequest> _instance;
} _PostLoginRequest_default_instance_;
class PostSignupRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostSignupRequest> _instance;
} _PostSignupRequest_default_instance_;
class SingleLoginResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleLoginResponse> _instance;
} _SingleLoginResponse_default_instance_;
class GetBillingUsageRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetBillingUsageRequest> _instance;
} _GetBillingUsageRequest_default_instance_;
class GetBillingUsageResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetBillingUsageResponse> _instance;
} _GetBillingUsageResponse_default_instance_;
class GetStatusCodeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetStatusCodeRequest> _instance;
} _GetStatusCodeRequest_default_instance_;
class ListStatusCodesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListStatusCodesRequest> _instance;
} _ListStatusCodesRequest_default_instance_;
class SingleStatusCodeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleStatusCodeResponse> _instance;
} _SingleStatusCodeResponse_default_instance_;
class MultiStatusCodeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiStatusCodeResponse> _instance;
} _MultiStatusCodeResponse_default_instance_;
class GetConceptRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetConceptRequest> _instance;
} _GetConceptRequest_default_instance_;
class ListConceptsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListConceptsRequest> _instance;
} _ListConceptsRequest_default_instance_;
class PostConceptsSearchesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostConceptsSearchesRequest> _instance;
} _PostConceptsSearchesRequest_default_instance_;
class PostConceptsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostConceptsRequest> _instance;
} _PostConceptsRequest_default_instance_;
class PatchConceptsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PatchConceptsRequest> _instance;
} _PatchConceptsRequest_default_instance_;
class GetConceptCountsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetConceptCountsRequest> _instance;
} _GetConceptCountsRequest_default_instance_;
class SingleConceptResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleConceptResponse> _instance;
} _SingleConceptResponse_default_instance_;
class MultiConceptResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiConceptResponse> _instance;
} _MultiConceptResponse_default_instance_;
class MultiConceptCountResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiConceptCountResponse> _instance;
} _MultiConceptCountResponse_default_instance_;
class ListConceptRelationsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListConceptRelationsRequest> _instance;
} _ListConceptRelationsRequest_default_instance_;
class PostConceptRelationsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostConceptRelationsRequest> _instance;
} _PostConceptRelationsRequest_default_instance_;
class DeleteConceptRelationsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteConceptRelationsRequest> _instance;
} _DeleteConceptRelationsRequest_default_instance_;
class ListKnowledgeGraphsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListKnowledgeGraphsRequest> _instance;
} _ListKnowledgeGraphsRequest_default_instance_;
class PostKnowledgeGraphsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostKnowledgeGraphsRequest> _instance;
} _PostKnowledgeGraphsRequest_default_instance_;
class ListConceptMappingsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListConceptMappingsRequest> _instance;
} _ListConceptMappingsRequest_default_instance_;
class PostConceptMappingsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostConceptMappingsRequest> _instance;
} _PostConceptMappingsRequest_default_instance_;
class PostConceptMappingJobsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostConceptMappingJobsRequest> _instance;
} _PostConceptMappingJobsRequest_default_instance_;
class SingleConceptRelationResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleConceptRelationResponse> _instance;
} _SingleConceptRelationResponse_default_instance_;
class MultiConceptRelationResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiConceptRelationResponse> _instance;
} _MultiConceptRelationResponse_default_instance_;
class SingleKnowledgeGraphResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleKnowledgeGraphResponse> _instance;
} _SingleKnowledgeGraphResponse_default_instance_;
class MultiKnowledgeGraphResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiKnowledgeGraphResponse> _instance;
} _MultiKnowledgeGraphResponse_default_instance_;
class SingleConceptMappingResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleConceptMappingResponse> _instance;
} _SingleConceptMappingResponse_default_instance_;
class MultiConceptMappingResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiConceptMappingResponse> _instance;
} _MultiConceptMappingResponse_default_instance_;
class SingleConceptMappingJobResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleConceptMappingJobResponse> _instance;
} _SingleConceptMappingJobResponse_default_instance_;
class MultiConceptMappingJobResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiConceptMappingJobResponse> _instance;
} _MultiConceptMappingJobResponse_default_instance_;
class GetConceptLanguageRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetConceptLanguageRequest> _instance;
} _GetConceptLanguageRequest_default_instance_;
class ListConceptLanguagesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListConceptLanguagesRequest> _instance;
} _ListConceptLanguagesRequest_default_instance_;
class PatchConceptLanguagesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PatchConceptLanguagesRequest> _instance;
} _PatchConceptLanguagesRequest_default_instance_;
class PostConceptLanguagesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostConceptLanguagesRequest> _instance;
} _PostConceptLanguagesRequest_default_instance_;
class SingleConceptLanguageResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleConceptLanguageResponse> _instance;
} _SingleConceptLanguageResponse_default_instance_;
class MultiConceptLanguageResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiConceptLanguageResponse> _instance;
} _MultiConceptLanguageResponse_default_instance_;
class ListConceptReferencesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListConceptReferencesRequest> _instance;
} _ListConceptReferencesRequest_default_instance_;
class SingleConceptReferenceResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleConceptReferenceResponse> _instance;
} _SingleConceptReferenceResponse_default_instance_;
class MultiConceptReferenceResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiConceptReferenceResponse> _instance;
} _MultiConceptReferenceResponse_default_instance_;
class GetHealthzRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetHealthzRequest> _instance;
} _GetHealthzRequest_default_instance_;
class GetHealthzResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetHealthzResponse> _instance;
} _GetHealthzResponse_default_instance_;
class GetInputRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetInputRequest> _instance;
} _GetInputRequest_default_instance_;
class ListInputsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListInputsRequest> _instance;
} _ListInputsRequest_default_instance_;
class StreamInputsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamInputsRequest> _instance;
} _StreamInputsRequest_default_instance_;
class PostInputsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostInputsRequest> _instance;
} _PostInputsRequest_default_instance_;
class PostInputsFileRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostInputsFileRequest> _instance;
} _PostInputsFileRequest_default_instance_;
class PostInputsNiFiRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostInputsNiFiRequest> _instance;
} _PostInputsNiFiRequest_default_instance_;
class PatchInputsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PatchInputsRequest> _instance;
} _PatchInputsRequest_default_instance_;
class DeleteInputRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteInputRequest> _instance;
} _DeleteInputRequest_default_instance_;
class DeleteInputsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteInputsRequest> _instance;
} _DeleteInputsRequest_default_instance_;
class SingleInputResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleInputResponse> _instance;
} _SingleInputResponse_default_instance_;
class MultiInputResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiInputResponse> _instance;
} _MultiInputResponse_default_instance_;
class SingleInputCountResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleInputCountResponse> _instance;
} _SingleInputCountResponse_default_instance_;
class GetInputCountRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetInputCountRequest> _instance;
} _GetInputCountRequest_default_instance_;
class PostModelOutputsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostModelOutputsRequest> _instance;
} _PostModelOutputsRequest_default_instance_;
class ListModelInputsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListModelInputsRequest> _instance;
} _ListModelInputsRequest_default_instance_;
class GetKeyRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetKeyRequest> _instance;
} _GetKeyRequest_default_instance_;
class ListKeysRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListKeysRequest> _instance;
} _ListKeysRequest_default_instance_;
class ListAppKeysRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListAppKeysRequest> _instance;
} _ListAppKeysRequest_default_instance_;
class PostKeysRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostKeysRequest> _instance;
} _PostKeysRequest_default_instance_;
class DeleteKeyRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteKeyRequest> _instance;
} _DeleteKeyRequest_default_instance_;
class PatchKeysRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PatchKeysRequest> _instance;
} _PatchKeysRequest_default_instance_;
class SingleKeyResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleKeyResponse> _instance;
} _SingleKeyResponse_default_instance_;
class MultiKeyResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiKeyResponse> _instance;
} _MultiKeyResponse_default_instance_;
class FetchLicenseRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FetchLicenseRequest> _instance;
} _FetchLicenseRequest_default_instance_;
class FetchLicenseResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FetchLicenseResponse> _instance;
} _FetchLicenseResponse_default_instance_;
class ValidateLicenseRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ValidateLicenseRequest> _instance;
} _ValidateLicenseRequest_default_instance_;
class ValidateLicenseResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ValidateLicenseResponse> _instance;
} _ValidateLicenseResponse_default_instance_;
class ListLicensesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListLicensesRequest> _instance;
} _ListLicensesRequest_default_instance_;
class GetLicenseRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLicenseRequest> _instance;
} _GetLicenseRequest_default_instance_;
class SingleLicenseResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleLicenseResponse> _instance;
} _SingleLicenseResponse_default_instance_;
class MultipleLicensesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultipleLicensesResponse> _instance;
} _MultipleLicensesResponse_default_instance_;
class GetModelRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetModelRequest> _instance;
} _GetModelRequest_default_instance_;
class GetModelOutputInfoRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetModelOutputInfoRequest> _instance;
} _GetModelOutputInfoRequest_default_instance_;
class ListModelsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListModelsRequest> _instance;
} _ListModelsRequest_default_instance_;
class PostModelsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostModelsRequest> _instance;
} _PostModelsRequest_default_instance_;
class PatchModelsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PatchModelsRequest> _instance;
} _PatchModelsRequest_default_instance_;
class DeleteModelRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteModelRequest> _instance;
} _DeleteModelRequest_default_instance_;
class DeleteModelsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteModelsRequest> _instance;
} _DeleteModelsRequest_default_instance_;
class PostModelsSearchesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostModelsSearchesRequest> _instance;
} _PostModelsSearchesRequest_default_instance_;
class SingleModelResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleModelResponse> _instance;
} _SingleModelResponse_default_instance_;
class MultiModelResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiModelResponse> _instance;
} _MultiModelResponse_default_instance_;
class GetModelVersionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetModelVersionRequest> _instance;
} _GetModelVersionRequest_default_instance_;
class ListModelVersionsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListModelVersionsRequest> _instance;
} _ListModelVersionsRequest_default_instance_;
class DeleteModelVersionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteModelVersionRequest> _instance;
} _DeleteModelVersionRequest_default_instance_;
class SingleModelVersionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleModelVersionResponse> _instance;
} _SingleModelVersionResponse_default_instance_;
class MultiModelVersionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiModelVersionResponse> _instance;
} _MultiModelVersionResponse_default_instance_;
class PostModelVersionsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostModelVersionsRequest> _instance;
} _PostModelVersionsRequest_default_instance_;
class PostModelVersionMetricsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostModelVersionMetricsRequest> _instance;
} _PostModelVersionMetricsRequest_default_instance_;
class PostModelVersionsDeploymentRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostModelVersionsDeploymentRequest> _instance;
} _PostModelVersionsDeploymentRequest_default_instance_;
class DeleteModelVersionsDeploymentRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteModelVersionsDeploymentRequest> _instance;
} _DeleteModelVersionsDeploymentRequest_default_instance_;
class GetModelVersionMetricsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetModelVersionMetricsRequest> _instance;
} _GetModelVersionMetricsRequest_default_instance_;
class MultiOutputResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiOutputResponse> _instance;
} _MultiOutputResponse_default_instance_;
class ListScopesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListScopesRequest> _instance;
} _ListScopesRequest_default_instance_;
class MyScopesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MyScopesRequest> _instance;
} _MyScopesRequest_default_instance_;
class MultiScopeDepsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiScopeDepsResponse> _instance;
} _MultiScopeDepsResponse_default_instance_;
class MultiScopeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiScopeResponse> _instance;
} _MultiScopeResponse_default_instance_;
class GetSearchRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetSearchRequest> _instance;
} _GetSearchRequest_default_instance_;
class ListSearchesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListSearchesRequest> _instance;
} _ListSearchesRequest_default_instance_;
class PostSearchesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostSearchesRequest> _instance;
} _PostSearchesRequest_default_instance_;
class PostSearchesByIDRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostSearchesByIDRequest> _instance;
} _PostSearchesByIDRequest_default_instance_;
class DeleteSearchRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteSearchRequest> _instance;
} _DeleteSearchRequest_default_instance_;
class PostAttributeSearchRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostAttributeSearchRequest> _instance;
} _PostAttributeSearchRequest_default_instance_;
class PostAnnotationsSearchesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostAnnotationsSearchesRequest> _instance;
} _PostAnnotationsSearchesRequest_default_instance_;
class PostInputsSearchesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostInputsSearchesRequest> _instance;
} _PostInputsSearchesRequest_default_instance_;
class SingleSearchResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleSearchResponse> _instance;
} _SingleSearchResponse_default_instance_;
class MultiSearchResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiSearchResponse> _instance;
} _MultiSearchResponse_default_instance_;
class PostAnnotationSearchMetricsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostAnnotationSearchMetricsRequest> _instance;
} _PostAnnotationSearchMetricsRequest_default_instance_;
class GetAnnotationSearchMetricsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAnnotationSearchMetricsRequest> _instance;
} _GetAnnotationSearchMetricsRequest_default_instance_;
class ListAnnotationSearchMetricsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListAnnotationSearchMetricsRequest> _instance;
} _ListAnnotationSearchMetricsRequest_default_instance_;
class MultiAnnotationSearchMetricsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiAnnotationSearchMetricsResponse> _instance;
} _MultiAnnotationSearchMetricsResponse_default_instance_;
class ListClustersRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListClustersRequest> _instance;
} _ListClustersRequest_default_instance_;
class ListAnnotationsForClusterRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListAnnotationsForClusterRequest> _instance;
} _ListAnnotationsForClusterRequest_default_instance_;
class PostClustersSearchesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostClustersSearchesRequest> _instance;
} _PostClustersSearchesRequest_default_instance_;
class MultiClusterResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiClusterResponse> _instance;
} _MultiClusterResponse_default_instance_;
class GetSubscriptionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetSubscriptionRequest> _instance;
} _GetSubscriptionRequest_default_instance_;
class PostSubscriptionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostSubscriptionRequest> _instance;
} _PostSubscriptionRequest_default_instance_;
class SingleSubscriptionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleSubscriptionResponse> _instance;
} _SingleSubscriptionResponse_default_instance_;
class ListCreditCardsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListCreditCardsRequest> _instance;
} _ListCreditCardsRequest_default_instance_;
class MultipleCreditCardResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultipleCreditCardResponse> _instance;
} _MultipleCreditCardResponse_default_instance_;
class PostCreditCardRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostCreditCardRequest> _instance;
} _PostCreditCardRequest_default_instance_;
class SingleCreditCardResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleCreditCardResponse> _instance;
} _SingleCreditCardResponse_default_instance_;
class DeleteCreditCardRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteCreditCardRequest> _instance;
} _DeleteCreditCardRequest_default_instance_;
class PatchCreditCardsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PatchCreditCardsRequest> _instance;
} _PatchCreditCardsRequest_default_instance_;
class PostHistoricalUsageRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostHistoricalUsageRequest> _instance;
} _PostHistoricalUsageRequest_default_instance_;
class PostHistoricalUsageResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostHistoricalUsageResponse> _instance;
} _PostHistoricalUsageResponse_default_instance_;
class GetRealtimeUsageRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetRealtimeUsageRequest> _instance;
} _GetRealtimeUsageRequest_default_instance_;
class GetRealtimeUsageResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetRealtimeUsageResponse> _instance;
} _GetRealtimeUsageResponse_default_instance_;
class ListUsageIntervalsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListUsageIntervalsRequest> _instance;
} _ListUsageIntervalsRequest_default_instance_;
class ListUsageIntervalsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListUsageIntervalsResponse> _instance;
} _ListUsageIntervalsResponse_default_instance_;
class ListUserBillingCyclesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListUserBillingCyclesRequest> _instance;
} _ListUserBillingCyclesRequest_default_instance_;
class ListUserBillingCyclesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListUserBillingCyclesResponse> _instance;
} _ListUserBillingCyclesResponse_default_instance_;
class PostUsageRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostUsageRequest> _instance;
} _PostUsageRequest_default_instance_;
class PostUsageResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostUsageResponse> _instance;
} _PostUsageResponse_default_instance_;
class GetUserRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetUserRequest> _instance;
} _GetUserRequest_default_instance_;
class PostUserConsentRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostUserConsentRequest> _instance;
} _PostUserConsentRequest_default_instance_;
class SingleUserResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleUserResponse> _instance;
} _SingleUserResponse_default_instance_;
class MultiUserResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiUserResponse> _instance;
} _MultiUserResponse_default_instance_;
class PatchUserRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PatchUserRequest> _instance;
} _PatchUserRequest_default_instance_;
class PostEmailsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostEmailsRequest> _instance;
} _PostEmailsRequest_default_instance_;
class SingleEmailResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleEmailResponse> _instance;
} _SingleEmailResponse_default_instance_;
class MultipleEmailResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultipleEmailResponse> _instance;
} _MultipleEmailResponse_default_instance_;
class ListEmailsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListEmailsRequest> _instance;
} _ListEmailsRequest_default_instance_;
class PostResendVerifyRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostResendVerifyRequest> _instance;
} _PostResendVerifyRequest_default_instance_;
class SingleResendVerifyResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleResendVerifyResponse> _instance;
} _SingleResendVerifyResponse_default_instance_;
class DeleteEmailRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteEmailRequest> _instance;
} _DeleteEmailRequest_default_instance_;
class PostPrimaryEmailRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostPrimaryEmailRequest> _instance;
} _PostPrimaryEmailRequest_default_instance_;
class PostValidatePasswordRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostValidatePasswordRequest> _instance;
} _PostValidatePasswordRequest_default_instance_;
class SinglePasswordValidationResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SinglePasswordValidationResponse> _instance;
} _SinglePasswordValidationResponse_default_instance_;
class ListPasswordPoliciesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListPasswordPoliciesRequest> _instance;
} _ListPasswordPoliciesRequest_default_instance_;
class PostPasswordPoliciesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostPasswordPoliciesRequest> _instance;
} _PostPasswordPoliciesRequest_default_instance_;
class PatchPasswordPoliciesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PatchPasswordPoliciesRequest> _instance;
} _PatchPasswordPoliciesRequest_default_instance_;
class DeletePasswordPoliciesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeletePasswordPoliciesRequest> _instance;
} _DeletePasswordPoliciesRequest_default_instance_;
class MultiplePasswordPoliciesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiplePasswordPoliciesResponse> _instance;
} _MultiplePasswordPoliciesResponse_default_instance_;
class GetVocabRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetVocabRequest> _instance;
} _GetVocabRequest_default_instance_;
class ListVocabsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListVocabsRequest> _instance;
} _ListVocabsRequest_default_instance_;
class PostVocabsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostVocabsRequest> _instance;
} _PostVocabsRequest_default_instance_;
class PatchVocabsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PatchVocabsRequest> _instance;
} _PatchVocabsRequest_default_instance_;
class DeleteVocabRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteVocabRequest> _instance;
} _DeleteVocabRequest_default_instance_;
class DeleteVocabsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteVocabsRequest> _instance;
} _DeleteVocabsRequest_default_instance_;
class ListVocabConceptsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListVocabConceptsRequest> _instance;
} _ListVocabConceptsRequest_default_instance_;
class PostVocabConceptsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostVocabConceptsRequest> _instance;
} _PostVocabConceptsRequest_default_instance_;
class DeleteVocabConceptRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteVocabConceptRequest> _instance;
} _DeleteVocabConceptRequest_default_instance_;
class DeleteVocabConceptsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteVocabConceptsRequest> _instance;
} _DeleteVocabConceptsRequest_default_instance_;
class SingleVocabResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleVocabResponse> _instance;
} _SingleVocabResponse_default_instance_;
class MultiVocabResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiVocabResponse> _instance;
} _MultiVocabResponse_default_instance_;
class GetWorkflowRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetWorkflowRequest> _instance;
} _GetWorkflowRequest_default_instance_;
class ListWorkflowsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListWorkflowsRequest> _instance;
} _ListWorkflowsRequest_default_instance_;
class ListPublicWorkflowsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListPublicWorkflowsRequest> _instance;
} _ListPublicWorkflowsRequest_default_instance_;
class PostWorkflowsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostWorkflowsRequest> _instance;
} _PostWorkflowsRequest_default_instance_;
class PatchWorkflowsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PatchWorkflowsRequest> _instance;
} _PatchWorkflowsRequest_default_instance_;
class DeleteWorkflowRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteWorkflowRequest> _instance;
} _DeleteWorkflowRequest_default_instance_;
class DeleteWorkflowsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteWorkflowsRequest> _instance;
} _DeleteWorkflowsRequest_default_instance_;
class SingleWorkflowResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleWorkflowResponse> _instance;
} _SingleWorkflowResponse_default_instance_;
class MultiWorkflowResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiWorkflowResponse> _instance;
} _MultiWorkflowResponse_default_instance_;
class PostWorkflowResultsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostWorkflowResultsRequest> _instance;
} _PostWorkflowResultsRequest_default_instance_;
class PostWorkflowResultsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostWorkflowResultsResponse> _instance;
} _PostWorkflowResultsResponse_default_instance_;
class PostWorkflowResultsSimilarityRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostWorkflowResultsSimilarityRequest> _instance;
} _PostWorkflowResultsSimilarityRequest_default_instance_;
class PostWorkflowResultsSimilarityResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostWorkflowResultsSimilarityResponse> _instance;
} _PostWorkflowResultsSimilarityResponse_default_instance_;
class TrainingTemplateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrainingTemplate> _instance;
} _TrainingTemplate_default_instance_;
class ListTrainingTemplatesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListTrainingTemplatesRequest> _instance;
} _ListTrainingTemplatesRequest_default_instance_;
class MultiTrainingTemplatesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiTrainingTemplatesResponse> _instance;
} _MultiTrainingTemplatesResponse_default_instance_;
class PostAppDuplicationsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostAppDuplicationsRequest> _instance;
} _PostAppDuplicationsRequest_default_instance_;
class GetAppDuplicationRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAppDuplicationRequest> _instance;
} _GetAppDuplicationRequest_default_instance_;
class ListAppDuplicationsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListAppDuplicationsRequest> _instance;
} _ListAppDuplicationsRequest_default_instance_;
class MultiAppDuplicationsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiAppDuplicationsResponse> _instance;
} _MultiAppDuplicationsResponse_default_instance_;
class SingleAppDuplicationResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleAppDuplicationResponse> _instance;
} _SingleAppDuplicationResponse_default_instance_;
class PostTasksRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostTasksRequest> _instance;
} _PostTasksRequest_default_instance_;
class GetTaskRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetTaskRequest> _instance;
} _GetTaskRequest_default_instance_;
class ListTasksRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListTasksRequest> _instance;
} _ListTasksRequest_default_instance_;
class PatchTasksRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PatchTasksRequest> _instance;
} _PatchTasksRequest_default_instance_;
class DeleteTasksRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteTasksRequest> _instance;
} _DeleteTasksRequest_default_instance_;
class MultiTaskResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiTaskResponse> _instance;
} _MultiTaskResponse_default_instance_;
class SingleTaskResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleTaskResponse> _instance;
} _SingleTaskResponse_default_instance_;
class PostCollectorsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostCollectorsRequest> _instance;
} _PostCollectorsRequest_default_instance_;
class PatchCollectorsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PatchCollectorsRequest> _instance;
} _PatchCollectorsRequest_default_instance_;
class DeleteCollectorsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteCollectorsRequest> _instance;
} _DeleteCollectorsRequest_default_instance_;
class GetCollectorRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetCollectorRequest> _instance;
} _GetCollectorRequest_default_instance_;
class ListCollectorsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListCollectorsRequest> _instance;
} _ListCollectorsRequest_default_instance_;
class MultiCollectorResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiCollectorResponse> _instance;
} _MultiCollectorResponse_default_instance_;
class SingleCollectorResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleCollectorResponse> _instance;
} _SingleCollectorResponse_default_instance_;
class PostStatValuesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostStatValuesRequest> _instance;
} _PostStatValuesRequest_default_instance_;
class MultiStatValueResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiStatValueResponse> _instance;
} _MultiStatValueResponse_default_instance_;
class PostStatValuesAggregateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostStatValuesAggregateRequest> _instance;
} _PostStatValuesAggregateRequest_default_instance_;
class MultiStatValueAggregateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiStatValueAggregateResponse> _instance;
} _MultiStatValueAggregateResponse_default_instance_;
}  // namespace api
}  // namespace clarifai
static void InitDefaultsscc_info_CompleteResetPasswordRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_CompleteResetPasswordRequest_default_instance_;
    new (ptr) ::clarifai::api::CompleteResetPasswordRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::CompleteResetPasswordRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CompleteResetPasswordRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CompleteResetPasswordRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {}};

static void InitDefaultsscc_info_DeleteAnnotationRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_DeleteAnnotationRequest_default_instance_;
    new (ptr) ::clarifai::api::DeleteAnnotationRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::DeleteAnnotationRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeleteAnnotationRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeleteAnnotationRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_DeleteAnnotationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_DeleteAnnotationsRequest_default_instance_;
    new (ptr) ::clarifai::api::DeleteAnnotationsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::DeleteAnnotationsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeleteAnnotationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeleteAnnotationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_DeleteAppRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_DeleteAppRequest_default_instance_;
    new (ptr) ::clarifai::api::DeleteAppRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::DeleteAppRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeleteAppRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeleteAppRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_DeleteCollaboratorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_DeleteCollaboratorsRequest_default_instance_;
    new (ptr) ::clarifai::api::DeleteCollaboratorsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::DeleteCollaboratorsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeleteCollaboratorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeleteCollaboratorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_DeleteCollectorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_DeleteCollectorsRequest_default_instance_;
    new (ptr) ::clarifai::api::DeleteCollectorsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::DeleteCollectorsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeleteCollectorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeleteCollectorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_DeleteConceptRelationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_DeleteConceptRelationsRequest_default_instance_;
    new (ptr) ::clarifai::api::DeleteConceptRelationsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::DeleteConceptRelationsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeleteConceptRelationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeleteConceptRelationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_DeleteCreditCardRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_DeleteCreditCardRequest_default_instance_;
    new (ptr) ::clarifai::api::DeleteCreditCardRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::DeleteCreditCardRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DeleteCreditCardRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DeleteCreditCardRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_CreditCard_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_DeleteEmailRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_DeleteEmailRequest_default_instance_;
    new (ptr) ::clarifai::api::DeleteEmailRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::DeleteEmailRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeleteEmailRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeleteEmailRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_DeleteInputRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_DeleteInputRequest_default_instance_;
    new (ptr) ::clarifai::api::DeleteInputRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::DeleteInputRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeleteInputRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeleteInputRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_DeleteInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_DeleteInputsRequest_default_instance_;
    new (ptr) ::clarifai::api::DeleteInputsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::DeleteInputsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeleteInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeleteInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_DeleteKeyRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_DeleteKeyRequest_default_instance_;
    new (ptr) ::clarifai::api::DeleteKeyRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::DeleteKeyRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeleteKeyRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeleteKeyRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_DeleteModelRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_DeleteModelRequest_default_instance_;
    new (ptr) ::clarifai::api::DeleteModelRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::DeleteModelRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeleteModelRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeleteModelRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_DeleteModelVersionRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_DeleteModelVersionRequest_default_instance_;
    new (ptr) ::clarifai::api::DeleteModelVersionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::DeleteModelVersionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeleteModelVersionRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeleteModelVersionRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_DeleteModelVersionsDeploymentRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_DeleteModelVersionsDeploymentRequest_default_instance_;
    new (ptr) ::clarifai::api::DeleteModelVersionsDeploymentRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::DeleteModelVersionsDeploymentRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeleteModelVersionsDeploymentRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeleteModelVersionsDeploymentRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_DeleteModelsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_DeleteModelsRequest_default_instance_;
    new (ptr) ::clarifai::api::DeleteModelsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::DeleteModelsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeleteModelsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeleteModelsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_DeletePasswordPoliciesRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_DeletePasswordPoliciesRequest_default_instance_;
    new (ptr) ::clarifai::api::DeletePasswordPoliciesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::DeletePasswordPoliciesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeletePasswordPoliciesRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeletePasswordPoliciesRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_DeleteSearchRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_DeleteSearchRequest_default_instance_;
    new (ptr) ::clarifai::api::DeleteSearchRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::DeleteSearchRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeleteSearchRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeleteSearchRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_DeleteTasksRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_DeleteTasksRequest_default_instance_;
    new (ptr) ::clarifai::api::DeleteTasksRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::DeleteTasksRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeleteTasksRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeleteTasksRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_DeleteVocabConceptRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_DeleteVocabConceptRequest_default_instance_;
    new (ptr) ::clarifai::api::DeleteVocabConceptRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::DeleteVocabConceptRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeleteVocabConceptRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeleteVocabConceptRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_DeleteVocabConceptsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_DeleteVocabConceptsRequest_default_instance_;
    new (ptr) ::clarifai::api::DeleteVocabConceptsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::DeleteVocabConceptsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeleteVocabConceptsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeleteVocabConceptsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_DeleteVocabRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_DeleteVocabRequest_default_instance_;
    new (ptr) ::clarifai::api::DeleteVocabRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::DeleteVocabRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeleteVocabRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeleteVocabRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_DeleteVocabsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_DeleteVocabsRequest_default_instance_;
    new (ptr) ::clarifai::api::DeleteVocabsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::DeleteVocabsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeleteVocabsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeleteVocabsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_DeleteWorkflowRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_DeleteWorkflowRequest_default_instance_;
    new (ptr) ::clarifai::api::DeleteWorkflowRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::DeleteWorkflowRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeleteWorkflowRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeleteWorkflowRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_DeleteWorkflowsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_DeleteWorkflowsRequest_default_instance_;
    new (ptr) ::clarifai::api::DeleteWorkflowsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::DeleteWorkflowsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeleteWorkflowsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeleteWorkflowsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_FetchLicenseRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_FetchLicenseRequest_default_instance_;
    new (ptr) ::clarifai::api::FetchLicenseRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::FetchLicenseRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FetchLicenseRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FetchLicenseRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {}};

static void InitDefaultsscc_info_FetchLicenseResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_FetchLicenseResponse_default_instance_;
    new (ptr) ::clarifai::api::FetchLicenseResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::FetchLicenseResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FetchLicenseResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_FetchLicenseResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_GetAnnotationRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_GetAnnotationRequest_default_instance_;
    new (ptr) ::clarifai::api::GetAnnotationRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::GetAnnotationRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetAnnotationRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetAnnotationRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_GetAnnotationSearchMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_GetAnnotationSearchMetricsRequest_default_instance_;
    new (ptr) ::clarifai::api::GetAnnotationSearchMetricsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::GetAnnotationSearchMetricsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetAnnotationSearchMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetAnnotationSearchMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_GetAppDuplicationRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_GetAppDuplicationRequest_default_instance_;
    new (ptr) ::clarifai::api::GetAppDuplicationRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::GetAppDuplicationRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetAppDuplicationRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetAppDuplicationRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_GetAppRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_GetAppRequest_default_instance_;
    new (ptr) ::clarifai::api::GetAppRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::GetAppRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetAppRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetAppRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_GetBillingUsageRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_GetBillingUsageRequest_default_instance_;
    new (ptr) ::clarifai::api::GetBillingUsageRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::GetBillingUsageRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetBillingUsageRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetBillingUsageRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {}};

static void InitDefaultsscc_info_GetBillingUsageResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_GetBillingUsageResponse_default_instance_;
    new (ptr) ::clarifai::api::GetBillingUsageResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::GetBillingUsageResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GetBillingUsageResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_GetBillingUsageResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_InvoiceItem_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_BillingCycle_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_GetCollectorRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_GetCollectorRequest_default_instance_;
    new (ptr) ::clarifai::api::GetCollectorRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::GetCollectorRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetCollectorRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetCollectorRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_GetConceptCountsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_GetConceptCountsRequest_default_instance_;
    new (ptr) ::clarifai::api::GetConceptCountsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::GetConceptCountsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetConceptCountsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetConceptCountsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_GetConceptLanguageRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_GetConceptLanguageRequest_default_instance_;
    new (ptr) ::clarifai::api::GetConceptLanguageRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::GetConceptLanguageRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetConceptLanguageRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetConceptLanguageRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_GetConceptRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_GetConceptRequest_default_instance_;
    new (ptr) ::clarifai::api::GetConceptRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::GetConceptRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetConceptRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetConceptRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_GetHealthzRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_GetHealthzRequest_default_instance_;
    new (ptr) ::clarifai::api::GetHealthzRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::GetHealthzRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetHealthzRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetHealthzRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {}};

static void InitDefaultsscc_info_GetHealthzResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_GetHealthzResponse_default_instance_;
    new (ptr) ::clarifai::api::GetHealthzResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::GetHealthzResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetHealthzResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetHealthzResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,}};

static void InitDefaultsscc_info_GetInputCountRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_GetInputCountRequest_default_instance_;
    new (ptr) ::clarifai::api::GetInputCountRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::GetInputCountRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetInputCountRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetInputCountRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_GetInputRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_GetInputRequest_default_instance_;
    new (ptr) ::clarifai::api::GetInputRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::GetInputRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetInputRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetInputRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_GetKeyRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_GetKeyRequest_default_instance_;
    new (ptr) ::clarifai::api::GetKeyRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::GetKeyRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetKeyRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetKeyRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_GetLicenseRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_GetLicenseRequest_default_instance_;
    new (ptr) ::clarifai::api::GetLicenseRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::GetLicenseRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetLicenseRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetLicenseRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_GetModelOutputInfoRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_GetModelOutputInfoRequest_default_instance_;
    new (ptr) ::clarifai::api::GetModelOutputInfoRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::GetModelOutputInfoRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetModelOutputInfoRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetModelOutputInfoRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_GetModelRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_GetModelRequest_default_instance_;
    new (ptr) ::clarifai::api::GetModelRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::GetModelRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetModelRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetModelRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_GetModelVersionMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_GetModelVersionMetricsRequest_default_instance_;
    new (ptr) ::clarifai::api::GetModelVersionMetricsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::GetModelVersionMetricsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetModelVersionMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetModelVersionMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_FieldsValue_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_GetModelVersionRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_GetModelVersionRequest_default_instance_;
    new (ptr) ::clarifai::api::GetModelVersionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::GetModelVersionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetModelVersionRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetModelVersionRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_GetRealtimeUsageRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_GetRealtimeUsageRequest_default_instance_;
    new (ptr) ::clarifai::api::GetRealtimeUsageRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::GetRealtimeUsageRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetRealtimeUsageRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetRealtimeUsageRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_GetRealtimeUsageResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_GetRealtimeUsageResponse_default_instance_;
    new (ptr) ::clarifai::api::GetRealtimeUsageResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::GetRealtimeUsageResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetRealtimeUsageResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetRealtimeUsageResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_RealtimeCount_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_GetSearchRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_GetSearchRequest_default_instance_;
    new (ptr) ::clarifai::api::GetSearchRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::GetSearchRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetSearchRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetSearchRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_GetStatusCodeRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_GetStatusCodeRequest_default_instance_;
    new (ptr) ::clarifai::api::GetStatusCodeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::GetStatusCodeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetStatusCodeRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetStatusCodeRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {}};

static void InitDefaultsscc_info_GetSubscriptionRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_GetSubscriptionRequest_default_instance_;
    new (ptr) ::clarifai::api::GetSubscriptionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::GetSubscriptionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetSubscriptionRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetSubscriptionRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {}};

static void InitDefaultsscc_info_GetTaskRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_GetTaskRequest_default_instance_;
    new (ptr) ::clarifai::api::GetTaskRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::GetTaskRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetTaskRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetTaskRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_GetUserRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_GetUserRequest_default_instance_;
    new (ptr) ::clarifai::api::GetUserRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::GetUserRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetUserRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetUserRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_GetVocabRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_GetVocabRequest_default_instance_;
    new (ptr) ::clarifai::api::GetVocabRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::GetVocabRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetVocabRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetVocabRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_GetWorkflowRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_GetWorkflowRequest_default_instance_;
    new (ptr) ::clarifai::api::GetWorkflowRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::GetWorkflowRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetWorkflowRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetWorkflowRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_ListAnnotationSearchMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ListAnnotationSearchMetricsRequest_default_instance_;
    new (ptr) ::clarifai::api::ListAnnotationSearchMetricsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ListAnnotationSearchMetricsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListAnnotationSearchMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListAnnotationSearchMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_ListAnnotationsForClusterRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ListAnnotationsForClusterRequest_default_instance_;
    new (ptr) ::clarifai::api::ListAnnotationsForClusterRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ListAnnotationsForClusterRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListAnnotationsForClusterRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListAnnotationsForClusterRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_ListAnnotationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ListAnnotationsRequest_default_instance_;
    new (ptr) ::clarifai::api::ListAnnotationsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ListAnnotationsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ListAnnotationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ListAnnotationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,}};

static void InitDefaultsscc_info_ListAppDuplicationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ListAppDuplicationsRequest_default_instance_;
    new (ptr) ::clarifai::api::ListAppDuplicationsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ListAppDuplicationsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListAppDuplicationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListAppDuplicationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_ListAppKeysRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ListAppKeysRequest_default_instance_;
    new (ptr) ::clarifai::api::ListAppKeysRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ListAppKeysRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListAppKeysRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListAppKeysRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_ListAppsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ListAppsRequest_default_instance_;
    new (ptr) ::clarifai::api::ListAppsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ListAppsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListAppsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListAppsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_ListAuthMethodsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ListAuthMethodsRequest_default_instance_;
    new (ptr) ::clarifai::api::ListAuthMethodsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ListAuthMethodsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListAuthMethodsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListAuthMethodsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {}};

static void InitDefaultsscc_info_ListAuthMethodsResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ListAuthMethodsResponse_default_instance_;
    new (ptr) ::clarifai::api::ListAuthMethodsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ListAuthMethodsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ListAuthMethodsResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ListAuthMethodsResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_AuthMethod_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_ListClustersRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ListClustersRequest_default_instance_;
    new (ptr) ::clarifai::api::ListClustersRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ListClustersRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListClustersRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListClustersRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_ListCollaborationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ListCollaborationsRequest_default_instance_;
    new (ptr) ::clarifai::api::ListCollaborationsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ListCollaborationsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListCollaborationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListCollaborationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_ListCollaboratorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ListCollaboratorsRequest_default_instance_;
    new (ptr) ::clarifai::api::ListCollaboratorsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ListCollaboratorsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListCollaboratorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListCollaboratorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_ListCollectorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ListCollectorsRequest_default_instance_;
    new (ptr) ::clarifai::api::ListCollectorsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ListCollectorsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListCollectorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListCollectorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_ListConceptLanguagesRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ListConceptLanguagesRequest_default_instance_;
    new (ptr) ::clarifai::api::ListConceptLanguagesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ListConceptLanguagesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListConceptLanguagesRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListConceptLanguagesRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_ListConceptMappingsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ListConceptMappingsRequest_default_instance_;
    new (ptr) ::clarifai::api::ListConceptMappingsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ListConceptMappingsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListConceptMappingsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListConceptMappingsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_ListConceptReferencesRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ListConceptReferencesRequest_default_instance_;
    new (ptr) ::clarifai::api::ListConceptReferencesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ListConceptReferencesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListConceptReferencesRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListConceptReferencesRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_ListConceptRelationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ListConceptRelationsRequest_default_instance_;
    new (ptr) ::clarifai::api::ListConceptRelationsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ListConceptRelationsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListConceptRelationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListConceptRelationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_ListConceptsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ListConceptsRequest_default_instance_;
    new (ptr) ::clarifai::api::ListConceptsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ListConceptsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListConceptsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListConceptsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_ListCreditCardsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ListCreditCardsRequest_default_instance_;
    new (ptr) ::clarifai::api::ListCreditCardsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ListCreditCardsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListCreditCardsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListCreditCardsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_ListEmailsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ListEmailsRequest_default_instance_;
    new (ptr) ::clarifai::api::ListEmailsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ListEmailsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListEmailsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListEmailsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_ListInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ListInputsRequest_default_instance_;
    new (ptr) ::clarifai::api::ListInputsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ListInputsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ListInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ListInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,}};

static void InitDefaultsscc_info_ListKeysRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ListKeysRequest_default_instance_;
    new (ptr) ::clarifai::api::ListKeysRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ListKeysRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListKeysRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListKeysRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_ListKnowledgeGraphsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ListKnowledgeGraphsRequest_default_instance_;
    new (ptr) ::clarifai::api::ListKnowledgeGraphsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ListKnowledgeGraphsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListKnowledgeGraphsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListKnowledgeGraphsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_ListLicensesRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ListLicensesRequest_default_instance_;
    new (ptr) ::clarifai::api::ListLicensesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ListLicensesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListLicensesRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListLicensesRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_ListModelInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ListModelInputsRequest_default_instance_;
    new (ptr) ::clarifai::api::ListModelInputsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ListModelInputsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListModelInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListModelInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_ListModelVersionsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ListModelVersionsRequest_default_instance_;
    new (ptr) ::clarifai::api::ListModelVersionsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ListModelVersionsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListModelVersionsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListModelVersionsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_ListModelsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ListModelsRequest_default_instance_;
    new (ptr) ::clarifai::api::ListModelsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ListModelsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListModelsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListModelsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_ListPasswordPoliciesRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ListPasswordPoliciesRequest_default_instance_;
    new (ptr) ::clarifai::api::ListPasswordPoliciesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ListPasswordPoliciesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListPasswordPoliciesRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListPasswordPoliciesRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_ListPublicWorkflowsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ListPublicWorkflowsRequest_default_instance_;
    new (ptr) ::clarifai::api::ListPublicWorkflowsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ListPublicWorkflowsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListPublicWorkflowsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListPublicWorkflowsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {}};

static void InitDefaultsscc_info_ListScopesRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ListScopesRequest_default_instance_;
    new (ptr) ::clarifai::api::ListScopesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ListScopesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListScopesRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListScopesRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {}};

static void InitDefaultsscc_info_ListSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ListSearchesRequest_default_instance_;
    new (ptr) ::clarifai::api::ListSearchesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ListSearchesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_ListStatusCodesRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ListStatusCodesRequest_default_instance_;
    new (ptr) ::clarifai::api::ListStatusCodesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ListStatusCodesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListStatusCodesRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListStatusCodesRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {}};

static void InitDefaultsscc_info_ListTasksRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ListTasksRequest_default_instance_;
    new (ptr) ::clarifai::api::ListTasksRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ListTasksRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListTasksRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListTasksRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_ListTrainingTemplatesRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ListTrainingTemplatesRequest_default_instance_;
    new (ptr) ::clarifai::api::ListTrainingTemplatesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ListTrainingTemplatesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListTrainingTemplatesRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListTrainingTemplatesRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_ListUsageIntervalsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ListUsageIntervalsRequest_default_instance_;
    new (ptr) ::clarifai::api::ListUsageIntervalsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ListUsageIntervalsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListUsageIntervalsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListUsageIntervalsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {}};

static void InitDefaultsscc_info_ListUsageIntervalsResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ListUsageIntervalsResponse_default_instance_;
    new (ptr) ::clarifai::api::ListUsageIntervalsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ListUsageIntervalsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ListUsageIntervalsResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ListUsageIntervalsResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_UsageInterval_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_ListUserBillingCyclesRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ListUserBillingCyclesRequest_default_instance_;
    new (ptr) ::clarifai::api::ListUserBillingCyclesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ListUserBillingCyclesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListUserBillingCyclesRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListUserBillingCyclesRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_ListUserBillingCyclesResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ListUserBillingCyclesResponse_default_instance_;
    new (ptr) ::clarifai::api::ListUserBillingCyclesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ListUserBillingCyclesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ListUserBillingCyclesResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ListUserBillingCyclesResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_BillingCycle_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_ListVocabConceptsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ListVocabConceptsRequest_default_instance_;
    new (ptr) ::clarifai::api::ListVocabConceptsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ListVocabConceptsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListVocabConceptsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListVocabConceptsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_ListVocabsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ListVocabsRequest_default_instance_;
    new (ptr) ::clarifai::api::ListVocabsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ListVocabsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListVocabsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListVocabsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_ListWorkflowsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ListWorkflowsRequest_default_instance_;
    new (ptr) ::clarifai::api::ListWorkflowsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ListWorkflowsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListWorkflowsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListWorkflowsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_MultiAnnotationResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MultiAnnotationResponse_default_instance_;
    new (ptr) ::clarifai::api::MultiAnnotationResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MultiAnnotationResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiAnnotationResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MultiAnnotationResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_Annotation_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_MultiAnnotationSearchMetricsResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MultiAnnotationSearchMetricsResponse_default_instance_;
    new (ptr) ::clarifai::api::MultiAnnotationSearchMetricsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MultiAnnotationSearchMetricsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiAnnotationSearchMetricsResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MultiAnnotationSearchMetricsResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_AnnotationSearchMetrics_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_MultiAppDuplicationsResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MultiAppDuplicationsResponse_default_instance_;
    new (ptr) ::clarifai::api::MultiAppDuplicationsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MultiAppDuplicationsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiAppDuplicationsResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MultiAppDuplicationsResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_AppDuplication_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_MultiAppResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MultiAppResponse_default_instance_;
    new (ptr) ::clarifai::api::MultiAppResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MultiAppResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiAppResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MultiAppResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_App_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_MultiClusterResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MultiClusterResponse_default_instance_;
    new (ptr) ::clarifai::api::MultiClusterResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MultiClusterResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MultiClusterResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_MultiClusterResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_Annotation_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Search_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_MultiCollaborationsResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MultiCollaborationsResponse_default_instance_;
    new (ptr) ::clarifai::api::MultiCollaborationsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MultiCollaborationsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiCollaborationsResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MultiCollaborationsResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_Collaboration_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_MultiCollaboratorsResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MultiCollaboratorsResponse_default_instance_;
    new (ptr) ::clarifai::api::MultiCollaboratorsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MultiCollaboratorsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiCollaboratorsResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MultiCollaboratorsResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_Collaborator_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_MultiCollectorResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MultiCollectorResponse_default_instance_;
    new (ptr) ::clarifai::api::MultiCollectorResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MultiCollectorResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiCollectorResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MultiCollectorResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_Collector_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_MultiConceptCountResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MultiConceptCountResponse_default_instance_;
    new (ptr) ::clarifai::api::MultiConceptCountResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MultiConceptCountResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiConceptCountResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MultiConceptCountResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_ConceptCount_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_MultiConceptLanguageResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MultiConceptLanguageResponse_default_instance_;
    new (ptr) ::clarifai::api::MultiConceptLanguageResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MultiConceptLanguageResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiConceptLanguageResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MultiConceptLanguageResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_ConceptLanguage_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_MultiConceptMappingJobResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MultiConceptMappingJobResponse_default_instance_;
    new (ptr) ::clarifai::api::MultiConceptMappingJobResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MultiConceptMappingJobResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MultiConceptMappingJobResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MultiConceptMappingJobResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,}};

static void InitDefaultsscc_info_MultiConceptMappingResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MultiConceptMappingResponse_default_instance_;
    new (ptr) ::clarifai::api::MultiConceptMappingResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MultiConceptMappingResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiConceptMappingResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MultiConceptMappingResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_ConceptMapping_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_MultiConceptReferenceResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MultiConceptReferenceResponse_default_instance_;
    new (ptr) ::clarifai::api::MultiConceptReferenceResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MultiConceptReferenceResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiConceptReferenceResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MultiConceptReferenceResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_ConceptReference_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_MultiConceptRelationResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MultiConceptRelationResponse_default_instance_;
    new (ptr) ::clarifai::api::MultiConceptRelationResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MultiConceptRelationResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiConceptRelationResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MultiConceptRelationResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_ConceptRelation_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_MultiConceptResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MultiConceptResponse_default_instance_;
    new (ptr) ::clarifai::api::MultiConceptResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MultiConceptResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiConceptResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MultiConceptResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_Concept_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_MultiInputResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MultiInputResponse_default_instance_;
    new (ptr) ::clarifai::api::MultiInputResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MultiInputResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiInputResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MultiInputResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_Annotation_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_MultiKeyResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MultiKeyResponse_default_instance_;
    new (ptr) ::clarifai::api::MultiKeyResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MultiKeyResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiKeyResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MultiKeyResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_Key_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_MultiKnowledgeGraphResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MultiKnowledgeGraphResponse_default_instance_;
    new (ptr) ::clarifai::api::MultiKnowledgeGraphResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MultiKnowledgeGraphResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiKnowledgeGraphResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MultiKnowledgeGraphResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_KnowledgeGraph_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_MultiModelResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MultiModelResponse_default_instance_;
    new (ptr) ::clarifai::api::MultiModelResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MultiModelResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiModelResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MultiModelResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_Model_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_MultiModelVersionResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MultiModelVersionResponse_default_instance_;
    new (ptr) ::clarifai::api::MultiModelVersionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MultiModelVersionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiModelVersionResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MultiModelVersionResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_ModelVersion_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_MultiOutputResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MultiOutputResponse_default_instance_;
    new (ptr) ::clarifai::api::MultiOutputResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MultiOutputResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiOutputResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MultiOutputResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_Output_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_MultiScopeDepsResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MultiScopeDepsResponse_default_instance_;
    new (ptr) ::clarifai::api::MultiScopeDepsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MultiScopeDepsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MultiScopeDepsResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_MultiScopeDepsResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_ScopeDeps_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_EndpointDeps_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_MultiScopeResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MultiScopeResponse_default_instance_;
    new (ptr) ::clarifai::api::MultiScopeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MultiScopeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiScopeResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MultiScopeResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_App_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_MultiSearchResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MultiSearchResponse_default_instance_;
    new (ptr) ::clarifai::api::MultiSearchResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MultiSearchResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_MultiSearchResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_MultiSearchResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_Annotation_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Query_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Search_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_MultiStatValueAggregateResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MultiStatValueAggregateResponse_default_instance_;
    new (ptr) ::clarifai::api::MultiStatValueAggregateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MultiStatValueAggregateResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiStatValueAggregateResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MultiStatValueAggregateResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_StatValueAggregateResult_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_MultiStatValueResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MultiStatValueResponse_default_instance_;
    new (ptr) ::clarifai::api::MultiStatValueResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MultiStatValueResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiStatValueResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MultiStatValueResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_StatValue_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_MultiStatusCodeResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MultiStatusCodeResponse_default_instance_;
    new (ptr) ::clarifai::api::MultiStatusCodeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MultiStatusCodeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MultiStatusCodeResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MultiStatusCodeResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,}};

static void InitDefaultsscc_info_MultiTaskResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MultiTaskResponse_default_instance_;
    new (ptr) ::clarifai::api::MultiTaskResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MultiTaskResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiTaskResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MultiTaskResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_Task_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_MultiTrainingTemplatesResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MultiTrainingTemplatesResponse_default_instance_;
    new (ptr) ::clarifai::api::MultiTrainingTemplatesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MultiTrainingTemplatesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiTrainingTemplatesResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MultiTrainingTemplatesResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_TrainingTemplate_proto_2fclarifai_2fapi_2fservice_2eproto.base,}};

static void InitDefaultsscc_info_MultiUserResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MultiUserResponse_default_instance_;
    new (ptr) ::clarifai::api::MultiUserResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MultiUserResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiUserResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MultiUserResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_User_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_MultiVocabResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MultiVocabResponse_default_instance_;
    new (ptr) ::clarifai::api::MultiVocabResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MultiVocabResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiVocabResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MultiVocabResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_Vocab_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_MultiWorkflowResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MultiWorkflowResponse_default_instance_;
    new (ptr) ::clarifai::api::MultiWorkflowResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MultiWorkflowResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiWorkflowResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MultiWorkflowResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_Workflow_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_MultipleCreditCardResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MultipleCreditCardResponse_default_instance_;
    new (ptr) ::clarifai::api::MultipleCreditCardResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MultipleCreditCardResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultipleCreditCardResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MultipleCreditCardResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_CreditCard_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_MultipleEmailResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MultipleEmailResponse_default_instance_;
    new (ptr) ::clarifai::api::MultipleEmailResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MultipleEmailResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultipleEmailResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MultipleEmailResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_EmailAddress_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_MultipleLicensesResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MultipleLicensesResponse_default_instance_;
    new (ptr) ::clarifai::api::MultipleLicensesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MultipleLicensesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultipleLicensesResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MultipleLicensesResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_License_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_MultiplePasswordPoliciesResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MultiplePasswordPoliciesResponse_default_instance_;
    new (ptr) ::clarifai::api::MultiplePasswordPoliciesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MultiplePasswordPoliciesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiplePasswordPoliciesResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MultiplePasswordPoliciesResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_PasswordPolicy_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_MyScopesRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_MyScopesRequest_default_instance_;
    new (ptr) ::clarifai::api::MyScopesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::MyScopesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MyScopesRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MyScopesRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_Pagination_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_Pagination_default_instance_;
    new (ptr) ::clarifai::api::Pagination();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::Pagination::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pagination_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Pagination_proto_2fclarifai_2fapi_2fservice_2eproto}, {}};

static void InitDefaultsscc_info_PatchAnnotationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PatchAnnotationsRequest_default_instance_;
    new (ptr) ::clarifai::api::PatchAnnotationsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PatchAnnotationsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PatchAnnotationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PatchAnnotationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Annotation_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PatchAppsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PatchAppsRequest_default_instance_;
    new (ptr) ::clarifai::api::PatchAppsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PatchAppsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PatchAppsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PatchAppsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_App_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_PatchAction_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PatchCollaboratorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PatchCollaboratorsRequest_default_instance_;
    new (ptr) ::clarifai::api::PatchCollaboratorsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PatchCollaboratorsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PatchCollaboratorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PatchCollaboratorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Collaborator_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PatchCollectorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PatchCollectorsRequest_default_instance_;
    new (ptr) ::clarifai::api::PatchCollectorsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PatchCollectorsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PatchCollectorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PatchCollectorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Collector_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PatchConceptLanguagesRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PatchConceptLanguagesRequest_default_instance_;
    new (ptr) ::clarifai::api::PatchConceptLanguagesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PatchConceptLanguagesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PatchConceptLanguagesRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PatchConceptLanguagesRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_ConceptLanguage_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PatchConceptsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PatchConceptsRequest_default_instance_;
    new (ptr) ::clarifai::api::PatchConceptsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PatchConceptsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PatchConceptsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PatchConceptsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Concept_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PatchCreditCardsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PatchCreditCardsRequest_default_instance_;
    new (ptr) ::clarifai::api::PatchCreditCardsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PatchCreditCardsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PatchCreditCardsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PatchCreditCardsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_CreditCard_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_PatchAction_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PatchInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PatchInputsRequest_default_instance_;
    new (ptr) ::clarifai::api::PatchInputsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PatchInputsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PatchInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PatchInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Annotation_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PatchKeysRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PatchKeysRequest_default_instance_;
    new (ptr) ::clarifai::api::PatchKeysRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PatchKeysRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PatchKeysRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PatchKeysRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Key_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PatchModelsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PatchModelsRequest_default_instance_;
    new (ptr) ::clarifai::api::PatchModelsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PatchModelsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PatchModelsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PatchModelsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Model_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PatchPasswordPoliciesRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PatchPasswordPoliciesRequest_default_instance_;
    new (ptr) ::clarifai::api::PatchPasswordPoliciesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PatchPasswordPoliciesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PatchPasswordPoliciesRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PatchPasswordPoliciesRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_PasswordPolicy_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PatchTasksRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PatchTasksRequest_default_instance_;
    new (ptr) ::clarifai::api::PatchTasksRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PatchTasksRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PatchTasksRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PatchTasksRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Task_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PatchUserRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PatchUserRequest_default_instance_;
    new (ptr) ::clarifai::api::PatchUserRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PatchUserRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_PatchUserRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_PatchUserRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_UserInfo_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_UserPassword_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto.base,
      &scc_info_PatchAction_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PatchVocabsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PatchVocabsRequest_default_instance_;
    new (ptr) ::clarifai::api::PatchVocabsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PatchVocabsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PatchVocabsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PatchVocabsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Vocab_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PatchWorkflowsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PatchWorkflowsRequest_default_instance_;
    new (ptr) ::clarifai::api::PatchWorkflowsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PatchWorkflowsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PatchWorkflowsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PatchWorkflowsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Workflow_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostAnnotationSearchMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostAnnotationSearchMetricsRequest_default_instance_;
    new (ptr) ::clarifai::api::PostAnnotationSearchMetricsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostAnnotationSearchMetricsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PostAnnotationSearchMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PostAnnotationSearchMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Search_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Annotation_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostAnnotationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostAnnotationsRequest_default_instance_;
    new (ptr) ::clarifai::api::PostAnnotationsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostAnnotationsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PostAnnotationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PostAnnotationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Annotation_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostAnnotationsSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostAnnotationsSearchesRequest_default_instance_;
    new (ptr) ::clarifai::api::PostAnnotationsSearchesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostAnnotationsSearchesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PostAnnotationsSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PostAnnotationsSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Search_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Pagination_proto_2fclarifai_2fapi_2fservice_2eproto.base,}};

static void InitDefaultsscc_info_PostAppDuplicationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostAppDuplicationsRequest_default_instance_;
    new (ptr) ::clarifai::api::PostAppDuplicationsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostAppDuplicationsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PostAppDuplicationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PostAppDuplicationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_AppDuplication_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostAppsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostAppsRequest_default_instance_;
    new (ptr) ::clarifai::api::PostAppsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostAppsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PostAppsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PostAppsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_App_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostAttributeSearchRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostAttributeSearchRequest_default_instance_;
    new (ptr) ::clarifai::api::PostAttributeSearchRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostAttributeSearchRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PostAttributeSearchRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PostAttributeSearchRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Pagination_proto_2fclarifai_2fapi_2fservice_2eproto.base,
      &scc_info_AttributeQuery_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostClustersSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostClustersSearchesRequest_default_instance_;
    new (ptr) ::clarifai::api::PostClustersSearchesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostClustersSearchesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PostClustersSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PostClustersSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Search_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Pagination_proto_2fclarifai_2fapi_2fservice_2eproto.base,}};

static void InitDefaultsscc_info_PostCollaboratorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostCollaboratorsRequest_default_instance_;
    new (ptr) ::clarifai::api::PostCollaboratorsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostCollaboratorsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PostCollaboratorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PostCollaboratorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Collaborator_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostCollectorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostCollectorsRequest_default_instance_;
    new (ptr) ::clarifai::api::PostCollectorsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostCollectorsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PostCollectorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PostCollectorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Collector_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostConceptLanguagesRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostConceptLanguagesRequest_default_instance_;
    new (ptr) ::clarifai::api::PostConceptLanguagesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostConceptLanguagesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PostConceptLanguagesRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PostConceptLanguagesRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_ConceptLanguage_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostConceptMappingJobsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostConceptMappingJobsRequest_default_instance_;
    new (ptr) ::clarifai::api::PostConceptMappingJobsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostConceptMappingJobsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PostConceptMappingJobsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PostConceptMappingJobsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_ConceptMappingJob_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostConceptMappingsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostConceptMappingsRequest_default_instance_;
    new (ptr) ::clarifai::api::PostConceptMappingsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostConceptMappingsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PostConceptMappingsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PostConceptMappingsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_ConceptMapping_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_KnowledgeGraph_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostConceptRelationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostConceptRelationsRequest_default_instance_;
    new (ptr) ::clarifai::api::PostConceptRelationsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostConceptRelationsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PostConceptRelationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PostConceptRelationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_ConceptRelation_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostConceptsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostConceptsRequest_default_instance_;
    new (ptr) ::clarifai::api::PostConceptsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostConceptsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PostConceptsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PostConceptsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Concept_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostConceptsSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostConceptsSearchesRequest_default_instance_;
    new (ptr) ::clarifai::api::PostConceptsSearchesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostConceptsSearchesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PostConceptsSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PostConceptsSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_ConceptQuery_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Pagination_proto_2fclarifai_2fapi_2fservice_2eproto.base,}};

static void InitDefaultsscc_info_PostCreditCardRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostCreditCardRequest_default_instance_;
    new (ptr) ::clarifai::api::PostCreditCardRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostCreditCardRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PostCreditCardRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PostCreditCardRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_CreditCard_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostEmailsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostEmailsRequest_default_instance_;
    new (ptr) ::clarifai::api::PostEmailsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostEmailsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PostEmailsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PostEmailsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostHistoricalUsageRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostHistoricalUsageRequest_default_instance_;
    new (ptr) ::clarifai::api::PostHistoricalUsageRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostHistoricalUsageRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PostHistoricalUsageRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PostHistoricalUsageRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostHistoricalUsageResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostHistoricalUsageResponse_default_instance_;
    new (ptr) ::clarifai::api::PostHistoricalUsageResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostHistoricalUsageResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PostHistoricalUsageResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PostHistoricalUsageResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,
      &scc_info_DimensionList_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostInputsFileRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostInputsFileRequest_default_instance_;
    new (ptr) ::clarifai::api::PostInputsFileRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostInputsFileRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PostInputsFileRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PostInputsFileRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostInputsNiFiRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostInputsNiFiRequest_default_instance_;
    new (ptr) ::clarifai::api::PostInputsNiFiRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostInputsNiFiRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PostInputsNiFiRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PostInputsNiFiRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto.base,}};

static void InitDefaultsscc_info_PostInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostInputsRequest_default_instance_;
    new (ptr) ::clarifai::api::PostInputsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostInputsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PostInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PostInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Annotation_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostInputsSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostInputsSearchesRequest_default_instance_;
    new (ptr) ::clarifai::api::PostInputsSearchesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostInputsSearchesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PostInputsSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PostInputsSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Search_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Pagination_proto_2fclarifai_2fapi_2fservice_2eproto.base,}};

static void InitDefaultsscc_info_PostKeysRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostKeysRequest_default_instance_;
    new (ptr) ::clarifai::api::PostKeysRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostKeysRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PostKeysRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PostKeysRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Key_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostKnowledgeGraphsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostKnowledgeGraphsRequest_default_instance_;
    new (ptr) ::clarifai::api::PostKnowledgeGraphsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostKnowledgeGraphsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PostKnowledgeGraphsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PostKnowledgeGraphsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_KnowledgeGraph_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostLoginRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostLoginRequest_default_instance_;
    new (ptr) ::clarifai::api::PostLoginRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostLoginRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PostLoginRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PostLoginRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {}};

static void InitDefaultsscc_info_PostModelOutputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostModelOutputsRequest_default_instance_;
    new (ptr) ::clarifai::api::PostModelOutputsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostModelOutputsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PostModelOutputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PostModelOutputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Annotation_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Model_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostModelVersionMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostModelVersionMetricsRequest_default_instance_;
    new (ptr) ::clarifai::api::PostModelVersionMetricsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostModelVersionMetricsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PostModelVersionMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PostModelVersionMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Search_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostModelVersionsDeploymentRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostModelVersionsDeploymentRequest_default_instance_;
    new (ptr) ::clarifai::api::PostModelVersionsDeploymentRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostModelVersionsDeploymentRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PostModelVersionsDeploymentRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PostModelVersionsDeploymentRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostModelVersionsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostModelVersionsRequest_default_instance_;
    new (ptr) ::clarifai::api::PostModelVersionsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostModelVersionsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PostModelVersionsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PostModelVersionsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_ModelVersion_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Search_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostModelsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostModelsRequest_default_instance_;
    new (ptr) ::clarifai::api::PostModelsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostModelsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PostModelsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PostModelsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Model_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostModelsSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostModelsSearchesRequest_default_instance_;
    new (ptr) ::clarifai::api::PostModelsSearchesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostModelsSearchesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PostModelsSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PostModelsSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_ModelQuery_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Pagination_proto_2fclarifai_2fapi_2fservice_2eproto.base,}};

static void InitDefaultsscc_info_PostPasswordPoliciesRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostPasswordPoliciesRequest_default_instance_;
    new (ptr) ::clarifai::api::PostPasswordPoliciesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostPasswordPoliciesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PostPasswordPoliciesRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PostPasswordPoliciesRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_PasswordPolicy_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostPrimaryEmailRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostPrimaryEmailRequest_default_instance_;
    new (ptr) ::clarifai::api::PostPrimaryEmailRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostPrimaryEmailRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PostPrimaryEmailRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PostPrimaryEmailRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostResendVerifyRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostResendVerifyRequest_default_instance_;
    new (ptr) ::clarifai::api::PostResendVerifyRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostResendVerifyRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PostResendVerifyRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PostResendVerifyRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostSearchesByIDRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostSearchesByIDRequest_default_instance_;
    new (ptr) ::clarifai::api::PostSearchesByIDRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostSearchesByIDRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PostSearchesByIDRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PostSearchesByIDRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Pagination_proto_2fclarifai_2fapi_2fservice_2eproto.base,}};

static void InitDefaultsscc_info_PostSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostSearchesRequest_default_instance_;
    new (ptr) ::clarifai::api::PostSearchesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostSearchesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_PostSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_PostSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Query_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Search_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Pagination_proto_2fclarifai_2fapi_2fservice_2eproto.base,}};

static void InitDefaultsscc_info_PostSignupRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostSignupRequest_default_instance_;
    new (ptr) ::clarifai::api::PostSignupRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostSignupRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PostSignupRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PostSignupRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {}};

static void InitDefaultsscc_info_PostStatValuesAggregateRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostStatValuesAggregateRequest_default_instance_;
    new (ptr) ::clarifai::api::PostStatValuesAggregateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostStatValuesAggregateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PostStatValuesAggregateRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PostStatValuesAggregateRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_StatValueAggregateQuery_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostStatValuesRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostStatValuesRequest_default_instance_;
    new (ptr) ::clarifai::api::PostStatValuesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostStatValuesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PostStatValuesRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PostStatValuesRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_StatValue_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostSubscriptionRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostSubscriptionRequest_default_instance_;
    new (ptr) ::clarifai::api::PostSubscriptionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostSubscriptionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PostSubscriptionRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PostSubscriptionRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Plan_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostTasksRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostTasksRequest_default_instance_;
    new (ptr) ::clarifai::api::PostTasksRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostTasksRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PostTasksRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PostTasksRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Task_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostUsageRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostUsageRequest_default_instance_;
    new (ptr) ::clarifai::api::PostUsageRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostUsageRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PostUsageRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PostUsageRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_EventsCollection_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostUsageResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostUsageResponse_default_instance_;
    new (ptr) ::clarifai::api::PostUsageResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostUsageResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PostUsageResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PostUsageResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,}};

static void InitDefaultsscc_info_PostUserConsentRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostUserConsentRequest_default_instance_;
    new (ptr) ::clarifai::api::PostUserConsentRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostUserConsentRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PostUserConsentRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PostUserConsentRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostValidatePasswordRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostValidatePasswordRequest_default_instance_;
    new (ptr) ::clarifai::api::PostValidatePasswordRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostValidatePasswordRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PostValidatePasswordRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PostValidatePasswordRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Password_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostVerifyEmailRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostVerifyEmailRequest_default_instance_;
    new (ptr) ::clarifai::api::PostVerifyEmailRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostVerifyEmailRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PostVerifyEmailRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PostVerifyEmailRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {}};

static void InitDefaultsscc_info_PostVocabConceptsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostVocabConceptsRequest_default_instance_;
    new (ptr) ::clarifai::api::PostVocabConceptsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostVocabConceptsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PostVocabConceptsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PostVocabConceptsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Concept_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostVocabsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostVocabsRequest_default_instance_;
    new (ptr) ::clarifai::api::PostVocabsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostVocabsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PostVocabsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PostVocabsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Vocab_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostWorkflowResultsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostWorkflowResultsRequest_default_instance_;
    new (ptr) ::clarifai::api::PostWorkflowResultsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostWorkflowResultsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PostWorkflowResultsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PostWorkflowResultsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Annotation_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_OutputConfig_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostWorkflowResultsResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostWorkflowResultsResponse_default_instance_;
    new (ptr) ::clarifai::api::PostWorkflowResultsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostWorkflowResultsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PostWorkflowResultsResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PostWorkflowResultsResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_Workflow_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_WorkflowResult_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostWorkflowResultsSimilarityRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostWorkflowResultsSimilarityRequest_default_instance_;
    new (ptr) ::clarifai::api::PostWorkflowResultsSimilarityRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostWorkflowResultsSimilarityRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PostWorkflowResultsSimilarityRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PostWorkflowResultsSimilarityRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Annotation_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostWorkflowResultsSimilarityResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostWorkflowResultsSimilarityResponse_default_instance_;
    new (ptr) ::clarifai::api::PostWorkflowResultsSimilarityResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostWorkflowResultsSimilarityResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PostWorkflowResultsSimilarityResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PostWorkflowResultsSimilarityResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_WorkflowResultsSimilarity_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PostWorkflowsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_PostWorkflowsRequest_default_instance_;
    new (ptr) ::clarifai::api::PostWorkflowsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::PostWorkflowsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PostWorkflowsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PostWorkflowsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Workflow_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_RequestResetPasswordRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_RequestResetPasswordRequest_default_instance_;
    new (ptr) ::clarifai::api::RequestResetPasswordRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::RequestResetPasswordRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestResetPasswordRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RequestResetPasswordRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {}};

static void InitDefaultsscc_info_SingleAnnotationResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_SingleAnnotationResponse_default_instance_;
    new (ptr) ::clarifai::api::SingleAnnotationResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::SingleAnnotationResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SingleAnnotationResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SingleAnnotationResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_Annotation_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_SingleAppDuplicationResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_SingleAppDuplicationResponse_default_instance_;
    new (ptr) ::clarifai::api::SingleAppDuplicationResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::SingleAppDuplicationResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SingleAppDuplicationResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SingleAppDuplicationResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_AppDuplication_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_SingleAppResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_SingleAppResponse_default_instance_;
    new (ptr) ::clarifai::api::SingleAppResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::SingleAppResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SingleAppResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SingleAppResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_App_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_SingleCollectorResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_SingleCollectorResponse_default_instance_;
    new (ptr) ::clarifai::api::SingleCollectorResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::SingleCollectorResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SingleCollectorResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SingleCollectorResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_Collector_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_SingleConceptLanguageResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_SingleConceptLanguageResponse_default_instance_;
    new (ptr) ::clarifai::api::SingleConceptLanguageResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::SingleConceptLanguageResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SingleConceptLanguageResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SingleConceptLanguageResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_ConceptLanguage_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_SingleConceptMappingJobResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_SingleConceptMappingJobResponse_default_instance_;
    new (ptr) ::clarifai::api::SingleConceptMappingJobResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::SingleConceptMappingJobResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SingleConceptMappingJobResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SingleConceptMappingJobResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,}};

static void InitDefaultsscc_info_SingleConceptMappingResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_SingleConceptMappingResponse_default_instance_;
    new (ptr) ::clarifai::api::SingleConceptMappingResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::SingleConceptMappingResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SingleConceptMappingResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SingleConceptMappingResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_ConceptMapping_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_SingleConceptReferenceResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_SingleConceptReferenceResponse_default_instance_;
    new (ptr) ::clarifai::api::SingleConceptReferenceResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::SingleConceptReferenceResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SingleConceptReferenceResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SingleConceptReferenceResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_ConceptReference_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_SingleConceptRelationResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_SingleConceptRelationResponse_default_instance_;
    new (ptr) ::clarifai::api::SingleConceptRelationResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::SingleConceptRelationResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SingleConceptRelationResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SingleConceptRelationResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_ConceptRelation_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_SingleConceptResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_SingleConceptResponse_default_instance_;
    new (ptr) ::clarifai::api::SingleConceptResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::SingleConceptResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SingleConceptResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SingleConceptResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_Concept_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_SingleCreditCardResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_SingleCreditCardResponse_default_instance_;
    new (ptr) ::clarifai::api::SingleCreditCardResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::SingleCreditCardResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SingleCreditCardResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SingleCreditCardResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_CreditCard_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_SingleEmailResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_SingleEmailResponse_default_instance_;
    new (ptr) ::clarifai::api::SingleEmailResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::SingleEmailResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SingleEmailResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SingleEmailResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_EmailAddress_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_SingleInputCountResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_SingleInputCountResponse_default_instance_;
    new (ptr) ::clarifai::api::SingleInputCountResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::SingleInputCountResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SingleInputCountResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SingleInputCountResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_InputCount_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_SingleInputResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_SingleInputResponse_default_instance_;
    new (ptr) ::clarifai::api::SingleInputResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::SingleInputResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SingleInputResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SingleInputResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_Annotation_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_SingleKeyResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_SingleKeyResponse_default_instance_;
    new (ptr) ::clarifai::api::SingleKeyResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::SingleKeyResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SingleKeyResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SingleKeyResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_Key_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_SingleKnowledgeGraphResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_SingleKnowledgeGraphResponse_default_instance_;
    new (ptr) ::clarifai::api::SingleKnowledgeGraphResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::SingleKnowledgeGraphResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SingleKnowledgeGraphResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SingleKnowledgeGraphResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_KnowledgeGraph_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_SingleLicenseResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_SingleLicenseResponse_default_instance_;
    new (ptr) ::clarifai::api::SingleLicenseResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::SingleLicenseResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SingleLicenseResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SingleLicenseResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_License_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_SingleLoginResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_SingleLoginResponse_default_instance_;
    new (ptr) ::clarifai::api::SingleLoginResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::SingleLoginResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SingleLoginResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SingleLoginResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_EmailAddress_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_SingleModelResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_SingleModelResponse_default_instance_;
    new (ptr) ::clarifai::api::SingleModelResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::SingleModelResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SingleModelResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SingleModelResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_Model_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_SingleModelVersionResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_SingleModelVersionResponse_default_instance_;
    new (ptr) ::clarifai::api::SingleModelVersionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::SingleModelVersionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SingleModelVersionResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SingleModelVersionResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_ModelVersion_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_SinglePasswordValidationResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_SinglePasswordValidationResponse_default_instance_;
    new (ptr) ::clarifai::api::SinglePasswordValidationResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::SinglePasswordValidationResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SinglePasswordValidationResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SinglePasswordValidationResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_PasswordViolations_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_SingleResendVerifyResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_SingleResendVerifyResponse_default_instance_;
    new (ptr) ::clarifai::api::SingleResendVerifyResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::SingleResendVerifyResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SingleResendVerifyResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SingleResendVerifyResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,}};

static void InitDefaultsscc_info_SingleSearchResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_SingleSearchResponse_default_instance_;
    new (ptr) ::clarifai::api::SingleSearchResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::SingleSearchResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SingleSearchResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SingleSearchResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_Search_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_SingleStatusCodeResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_SingleStatusCodeResponse_default_instance_;
    new (ptr) ::clarifai::api::SingleStatusCodeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::SingleStatusCodeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SingleStatusCodeResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SingleStatusCodeResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,}};

static void InitDefaultsscc_info_SingleSubscriptionResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_SingleSubscriptionResponse_default_instance_;
    new (ptr) ::clarifai::api::SingleSubscriptionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::SingleSubscriptionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SingleSubscriptionResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SingleSubscriptionResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_Plan_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_SingleTaskResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_SingleTaskResponse_default_instance_;
    new (ptr) ::clarifai::api::SingleTaskResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::SingleTaskResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SingleTaskResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SingleTaskResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_Task_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_SingleUserResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_SingleUserResponse_default_instance_;
    new (ptr) ::clarifai::api::SingleUserResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::SingleUserResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SingleUserResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SingleUserResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_User_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_SingleVerifyEmailResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_SingleVerifyEmailResponse_default_instance_;
    new (ptr) ::clarifai::api::SingleVerifyEmailResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::SingleVerifyEmailResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SingleVerifyEmailResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SingleVerifyEmailResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,}};

static void InitDefaultsscc_info_SingleVocabResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_SingleVocabResponse_default_instance_;
    new (ptr) ::clarifai::api::SingleVocabResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::SingleVocabResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SingleVocabResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SingleVocabResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_Vocab_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_SingleWorkflowResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_SingleWorkflowResponse_default_instance_;
    new (ptr) ::clarifai::api::SingleWorkflowResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::SingleWorkflowResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SingleWorkflowResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SingleWorkflowResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_Workflow_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_StreamInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_StreamInputsRequest_default_instance_;
    new (ptr) ::clarifai::api::StreamInputsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::StreamInputsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StreamInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StreamInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_TestMessage_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_TestMessage_default_instance_;
    new (ptr) ::clarifai::api::TestMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::TestMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TestMessage_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TestMessage_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto.base,}};

static void InitDefaultsscc_info_TrainingTemplate_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_TrainingTemplate_default_instance_;
    new (ptr) ::clarifai::api::TrainingTemplate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::TrainingTemplate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrainingTemplate_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TrainingTemplate_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto.base,}};

static void InitDefaultsscc_info_ValidateLicenseRequest_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ValidateLicenseRequest_default_instance_;
    new (ptr) ::clarifai::api::ValidateLicenseRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ValidateLicenseRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ValidateLicenseRequest_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ValidateLicenseRequest_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_ValidateLicenseResponse_proto_2fclarifai_2fapi_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::api::_ValidateLicenseResponse_default_instance_;
    new (ptr) ::clarifai::api::ValidateLicenseResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::api::ValidateLicenseResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ValidateLicenseResponse_proto_2fclarifai_2fapi_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ValidateLicenseResponse_proto_2fclarifai_2fapi_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_LicenseLimit_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[239];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_proto_2fclarifai_2fapi_2fservice_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fclarifai_2fapi_2fservice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TestMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TestMessage, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TestMessage, value_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TestMessage, byts_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TestMessage, int_32_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TestMessage, int_64_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TestMessage, f_32_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TestMessage, f_64_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TestMessage, s_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Pagination, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Pagination, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Pagination, per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetAnnotationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetAnnotationRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetAnnotationRequest, annotation_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetAnnotationRequest, input_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationsRequest, ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationsRequest, input_ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationsRequest, user_ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationsRequest, model_version_ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationsRequest, statuses_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationsRequest, list_all_annotations_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationsRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationsRequest, per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAnnotationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAnnotationsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAnnotationsRequest, annotations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAnnotationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAnnotationsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAnnotationsRequest, annotations_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAnnotationsRequest, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteAnnotationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteAnnotationRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteAnnotationRequest, input_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteAnnotationRequest, annotation_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteAnnotationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteAnnotationsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteAnnotationsRequest, ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteAnnotationsRequest, input_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleAnnotationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleAnnotationResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleAnnotationResponse, annotation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiAnnotationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiAnnotationResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiAnnotationResponse, annotations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetAppRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetAppRequest, user_app_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAppsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAppsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAppsRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAppsRequest, per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAppsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAppsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAppsRequest, apps_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteAppRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteAppRequest, user_app_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAppsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAppsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAppsRequest, apps_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAppsRequest, action_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAppsRequest, metadata_action_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAppsRequest, reindex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleAppResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleAppResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleAppResponse, app_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiAppResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiAppResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiAppResponse, apps_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListCollaboratorsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListCollaboratorsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListCollaboratorsRequest, list_all_collaborators_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostCollaboratorsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostCollaboratorsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostCollaboratorsRequest, collaborators_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchCollaboratorsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchCollaboratorsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchCollaboratorsRequest, collaborators_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchCollaboratorsRequest, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteCollaboratorsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteCollaboratorsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteCollaboratorsRequest, collaborator_ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteCollaboratorsRequest, user_emails_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiCollaboratorsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiCollaboratorsResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiCollaboratorsResponse, collaborators_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListCollaborationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListCollaborationsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListCollaborationsRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListCollaborationsRequest, per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiCollaborationsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiCollaborationsResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiCollaborationsResponse, collaborations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostVerifyEmailRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostVerifyEmailRequest, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleVerifyEmailResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleVerifyEmailResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAuthMethodsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAuthMethodsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAuthMethodsResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAuthMethodsResponse, auth_methods_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::RequestResetPasswordRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::RequestResetPasswordRequest, email_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::CompleteResetPasswordRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::CompleteResetPasswordRequest, key_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::CompleteResetPasswordRequest, new_password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostLoginRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostLoginRequest, email_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostLoginRequest, password_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostLoginRequest, long_lived_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostSignupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostSignupRequest, email_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostSignupRequest, password_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostSignupRequest, first_name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostSignupRequest, last_name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostSignupRequest, company_name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostSignupRequest, captcha_response_token_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostSignupRequest, aws_registration_token_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostSignupRequest, gdpr_consent_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostSignupRequest, tos_consent_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostSignupRequest, marketing_consent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleLoginResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleLoginResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleLoginResponse, email_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleLoginResponse, first_name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleLoginResponse, last_name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleLoginResponse, company_name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleLoginResponse, date_joined_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleLoginResponse, email_addresses_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleLoginResponse, session_token_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleLoginResponse, token_expires_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleLoginResponse, v2_user_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleLoginResponse, date_gdpr_consent_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleLoginResponse, date_tos_consent_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleLoginResponse, date_marketing_consent_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleLoginResponse, password_expired_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleLoginResponse, is_new_user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetBillingUsageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetBillingUsageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetBillingUsageResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetBillingUsageResponse, invoice_items_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetBillingUsageResponse, billing_cycle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetStatusCodeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetStatusCodeRequest, status_code_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListStatusCodesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleStatusCodeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleStatusCodeResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiStatusCodeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiStatusCodeResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiStatusCodeResponse, statuses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetConceptRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetConceptRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetConceptRequest, concept_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptsRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptsRequest, per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptsSearchesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptsSearchesRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptsSearchesRequest, concept_query_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptsSearchesRequest, pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptsRequest, concepts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchConceptsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchConceptsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchConceptsRequest, concepts_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchConceptsRequest, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetConceptCountsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetConceptCountsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetConceptCountsRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetConceptCountsRequest, per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleConceptResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleConceptResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleConceptResponse, concept_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptResponse, concepts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptCountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptCountResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptCountResponse, concept_counts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptRelationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptRelationsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptRelationsRequest, concept_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptRelationsRequest, predicate_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptRelationsRequest, knowledge_graph_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptRelationsRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptRelationsRequest, per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptRelationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptRelationsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptRelationsRequest, concept_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptRelationsRequest, concept_relations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteConceptRelationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteConceptRelationsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteConceptRelationsRequest, concept_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteConceptRelationsRequest, ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListKnowledgeGraphsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListKnowledgeGraphsRequest, user_app_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostKnowledgeGraphsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostKnowledgeGraphsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostKnowledgeGraphsRequest, knowledge_graphs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptMappingsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptMappingsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptMappingsRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptMappingsRequest, per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptMappingsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptMappingsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptMappingsRequest, concept_mappings_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptMappingsRequest, knowledge_graph_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptMappingJobsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptMappingJobsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptMappingJobsRequest, concept_mapping_jobs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleConceptRelationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleConceptRelationResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleConceptRelationResponse, concept_relation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptRelationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptRelationResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptRelationResponse, concept_relations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleKnowledgeGraphResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleKnowledgeGraphResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleKnowledgeGraphResponse, knowledge_graph_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiKnowledgeGraphResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiKnowledgeGraphResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiKnowledgeGraphResponse, knowledge_graphs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleConceptMappingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleConceptMappingResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleConceptMappingResponse, concept_mapping_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptMappingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptMappingResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptMappingResponse, concept_mappings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleConceptMappingJobResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleConceptMappingJobResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleConceptMappingJobResponse, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptMappingJobResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptMappingJobResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptMappingJobResponse, ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetConceptLanguageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetConceptLanguageRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetConceptLanguageRequest, concept_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetConceptLanguageRequest, language_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptLanguagesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptLanguagesRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptLanguagesRequest, concept_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptLanguagesRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptLanguagesRequest, per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchConceptLanguagesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchConceptLanguagesRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchConceptLanguagesRequest, concept_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchConceptLanguagesRequest, concept_languages_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchConceptLanguagesRequest, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptLanguagesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptLanguagesRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptLanguagesRequest, concept_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptLanguagesRequest, concept_languages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleConceptLanguageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleConceptLanguageResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleConceptLanguageResponse, concept_language_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptLanguageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptLanguageResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptLanguageResponse, concept_languages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptReferencesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptReferencesRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptReferencesRequest, concept_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptReferencesRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptReferencesRequest, per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleConceptReferenceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleConceptReferenceResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleConceptReferenceResponse, concept_reference_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptReferenceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptReferenceResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptReferenceResponse, concept_references_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetHealthzRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetHealthzResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetHealthzResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetHealthzResponse, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetInputRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetInputRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetInputRequest, input_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListInputsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListInputsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListInputsRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListInputsRequest, per_page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListInputsRequest, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListInputsRequest, ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StreamInputsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StreamInputsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StreamInputsRequest, per_page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StreamInputsRequest, last_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StreamInputsRequest, descending_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostInputsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostInputsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostInputsRequest, inputs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostInputsFileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostInputsFileRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostInputsFileRequest, url_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostInputsFileRequest, filetype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostInputsNiFiRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostInputsNiFiRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostInputsNiFiRequest, urls_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostInputsNiFiRequest, metadata_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostInputsNiFiRequest, params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchInputsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchInputsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchInputsRequest, inputs_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchInputsRequest, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteInputRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteInputRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteInputRequest, input_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteInputsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteInputsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteInputsRequest, ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteInputsRequest, delete_all_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleInputResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleInputResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleInputResponse, input_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiInputResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiInputResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiInputResponse, inputs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleInputCountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleInputCountResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleInputCountResponse, counts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetInputCountRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetInputCountRequest, user_app_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelOutputsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelOutputsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelOutputsRequest, model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelOutputsRequest, version_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelOutputsRequest, inputs_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelOutputsRequest, model_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelInputsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelInputsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelInputsRequest, model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelInputsRequest, version_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelInputsRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelInputsRequest, per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetKeyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetKeyRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetKeyRequest, key_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListKeysRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListKeysRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListKeysRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListKeysRequest, per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAppKeysRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAppKeysRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAppKeysRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAppKeysRequest, per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostKeysRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostKeysRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostKeysRequest, keys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteKeyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteKeyRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteKeyRequest, key_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchKeysRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchKeysRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchKeysRequest, keys_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchKeysRequest, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleKeyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleKeyResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleKeyResponse, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiKeyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiKeyResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiKeyResponse, keys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::FetchLicenseRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::FetchLicenseRequest, license_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::FetchLicenseRequest, public_key_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::FetchLicenseRequest, signature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::FetchLicenseResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::FetchLicenseResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::FetchLicenseResponse, encrypted_bytes_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::FetchLicenseResponse, activated_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::FetchLicenseResponse, public_key_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::FetchLicenseResponse, signature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ValidateLicenseRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ValidateLicenseRequest, license_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ValidateLicenseRequest, request_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ValidateLicenseRequest, activated_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ValidateLicenseRequest, public_key_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ValidateLicenseRequest, signature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ValidateLicenseResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ValidateLicenseResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ValidateLicenseResponse, request_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ValidateLicenseResponse, limits_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ValidateLicenseResponse, signature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListLicensesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListLicensesRequest, user_app_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetLicenseRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetLicenseRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetLicenseRequest, license_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleLicenseResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleLicenseResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleLicenseResponse, license_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultipleLicensesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultipleLicensesResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultipleLicensesResponse, licenses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelRequest, model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelRequest, version_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelRequest, language_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelRequest, trained_before_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelOutputInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelOutputInfoRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelOutputInfoRequest, model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelOutputInfoRequest, version_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelsRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelsRequest, per_page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelsRequest, ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelsRequest, model_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelsRequest, models_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelsRequest, models_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelsRequest, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteModelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteModelRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteModelRequest, model_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteModelsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteModelsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteModelsRequest, ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteModelsRequest, delete_all_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelsSearchesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelsSearchesRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelsSearchesRequest, model_query_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelsSearchesRequest, pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleModelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleModelResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleModelResponse, model_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelResponse, models_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelVersionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelVersionRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelVersionRequest, model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelVersionRequest, version_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelVersionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelVersionsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelVersionsRequest, model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelVersionsRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelVersionsRequest, per_page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelVersionsRequest, concept_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteModelVersionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteModelVersionRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteModelVersionRequest, model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteModelVersionRequest, version_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleModelVersionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleModelVersionResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleModelVersionResponse, model_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelVersionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelVersionResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelVersionResponse, model_versions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionsRequest, model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionsRequest, model_versions_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionsRequest, search_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionsRequest, train_search_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionsRequest, test_search_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionsRequest, evaluate_after_training_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionMetricsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionMetricsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionMetricsRequest, model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionMetricsRequest, version_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionMetricsRequest, max_examples_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionMetricsRequest, test_search_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionsDeploymentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionsDeploymentRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionsDeploymentRequest, model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionsDeploymentRequest, version_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteModelVersionsDeploymentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteModelVersionsDeploymentRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteModelVersionsDeploymentRequest, model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteModelVersionsDeploymentRequest, version_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelVersionMetricsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelVersionMetricsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelVersionMetricsRequest, model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelVersionMetricsRequest, version_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelVersionMetricsRequest, fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiOutputResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiOutputResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiOutputResponse, outputs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListScopesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListScopesRequest, key_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MyScopesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MyScopesRequest, user_app_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiScopeDepsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiScopeDepsResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiScopeDepsResponse, scope_deps_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiScopeDepsResponse, endpoint_deps_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiScopeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiScopeResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiScopeResponse, scopes_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiScopeResponse, app_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiScopeResponse, endpoints_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetSearchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetSearchRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetSearchRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListSearchesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListSearchesRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListSearchesRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListSearchesRequest, per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostSearchesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostSearchesRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostSearchesRequest, query_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostSearchesRequest, searches_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostSearchesRequest, pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostSearchesByIDRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostSearchesByIDRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostSearchesByIDRequest, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostSearchesByIDRequest, pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteSearchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteSearchRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteSearchRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAttributeSearchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAttributeSearchRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAttributeSearchRequest, pagination_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAttributeSearchRequest, brute_force_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAttributeSearchRequest, attribute_query_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAttributeSearchRequest, min_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAnnotationsSearchesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAnnotationsSearchesRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAnnotationsSearchesRequest, searches_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAnnotationsSearchesRequest, pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostInputsSearchesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostInputsSearchesRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostInputsSearchesRequest, searches_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostInputsSearchesRequest, pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleSearchResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleSearchResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleSearchResponse, search_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiSearchResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiSearchResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiSearchResponse, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiSearchResponse, hits_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiSearchResponse, query_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiSearchResponse, searches_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAnnotationSearchMetricsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAnnotationSearchMetricsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAnnotationSearchMetricsRequest, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAnnotationSearchMetricsRequest, ground_truth_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAnnotationSearchMetricsRequest, search_to_eval_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAnnotationSearchMetricsRequest, data_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAnnotationSearchMetricsRequest, evaluation_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetAnnotationSearchMetricsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetAnnotationSearchMetricsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetAnnotationSearchMetricsRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationSearchMetricsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationSearchMetricsRequest, user_app_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiAnnotationSearchMetricsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiAnnotationSearchMetricsResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiAnnotationSearchMetricsResponse, annotation_search_metrics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListClustersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListClustersRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListClustersRequest, ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListClustersRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListClustersRequest, per_page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListClustersRequest, annotations_per_cluster_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationsForClusterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationsForClusterRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationsForClusterRequest, cluster_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationsForClusterRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationsForClusterRequest, per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostClustersSearchesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostClustersSearchesRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostClustersSearchesRequest, searches_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostClustersSearchesRequest, pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiClusterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiClusterResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiClusterResponse, clusters_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiClusterResponse, searches_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetSubscriptionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostSubscriptionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostSubscriptionRequest, signup_code_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostSubscriptionRequest, plan_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleSubscriptionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleSubscriptionResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleSubscriptionResponse, plan_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleSubscriptionResponse, signup_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListCreditCardsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListCreditCardsRequest, user_app_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultipleCreditCardResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultipleCreditCardResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultipleCreditCardResponse, cards_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostCreditCardRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostCreditCardRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostCreditCardRequest, source_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostCreditCardRequest, card_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleCreditCardResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleCreditCardResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleCreditCardResponse, card_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteCreditCardRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteCreditCardRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteCreditCardRequest, card_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchCreditCardsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchCreditCardsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchCreditCardsRequest, cards_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchCreditCardsRequest, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostHistoricalUsageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostHistoricalUsageRequest, user_app_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostHistoricalUsageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostHistoricalUsageResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostHistoricalUsageResponse, interval_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostHistoricalUsageResponse, usage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetRealtimeUsageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetRealtimeUsageRequest, user_app_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetRealtimeUsageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetRealtimeUsageResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetRealtimeUsageResponse, realtime_usage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListUsageIntervalsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListUsageIntervalsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListUsageIntervalsResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListUsageIntervalsResponse, usage_intervals_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListUserBillingCyclesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListUserBillingCyclesRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListUserBillingCyclesRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListUserBillingCyclesRequest, per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListUserBillingCyclesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListUserBillingCyclesResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListUserBillingCyclesResponse, billing_cycles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostUsageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostUsageRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostUsageRequest, events_collections_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostUsageRequest, public_key_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostUsageRequest, signature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostUsageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostUsageResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetUserRequest, user_app_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostUserConsentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostUserConsentRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostUserConsentRequest, consent_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostUserConsentRequest, fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleUserResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleUserResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleUserResponse, user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiUserResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiUserResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiUserResponse, users_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchUserRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchUserRequest, info_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchUserRequest, pass_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchUserRequest, metadata_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchUserRequest, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostEmailsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostEmailsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostEmailsRequest, emails_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleEmailResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleEmailResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleEmailResponse, email_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultipleEmailResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultipleEmailResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultipleEmailResponse, emails_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListEmailsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListEmailsRequest, user_app_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostResendVerifyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostResendVerifyRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostResendVerifyRequest, email_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleResendVerifyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleResendVerifyResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteEmailRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteEmailRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteEmailRequest, email_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostPrimaryEmailRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostPrimaryEmailRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostPrimaryEmailRequest, email_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostValidatePasswordRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostValidatePasswordRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostValidatePasswordRequest, password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SinglePasswordValidationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SinglePasswordValidationResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SinglePasswordValidationResponse, password_violations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListPasswordPoliciesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListPasswordPoliciesRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListPasswordPoliciesRequest, user_ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListPasswordPoliciesRequest, organization_ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListPasswordPoliciesRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListPasswordPoliciesRequest, per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostPasswordPoliciesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostPasswordPoliciesRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostPasswordPoliciesRequest, password_policies_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchPasswordPoliciesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchPasswordPoliciesRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchPasswordPoliciesRequest, password_policies_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchPasswordPoliciesRequest, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeletePasswordPoliciesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeletePasswordPoliciesRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeletePasswordPoliciesRequest, ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiplePasswordPoliciesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiplePasswordPoliciesResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiplePasswordPoliciesResponse, password_policies_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetVocabRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetVocabRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetVocabRequest, vocab_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListVocabsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListVocabsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListVocabsRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListVocabsRequest, per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostVocabsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostVocabsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostVocabsRequest, vocabs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchVocabsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchVocabsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchVocabsRequest, vocabs_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchVocabsRequest, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteVocabRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteVocabRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteVocabRequest, vocab_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteVocabsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteVocabsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteVocabsRequest, ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteVocabsRequest, delete_all_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListVocabConceptsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListVocabConceptsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListVocabConceptsRequest, vocab_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListVocabConceptsRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListVocabConceptsRequest, per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostVocabConceptsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostVocabConceptsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostVocabConceptsRequest, vocab_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostVocabConceptsRequest, concepts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteVocabConceptRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteVocabConceptRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteVocabConceptRequest, vocab_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteVocabConceptRequest, concept_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteVocabConceptsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteVocabConceptsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteVocabConceptsRequest, vocab_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteVocabConceptsRequest, ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteVocabConceptsRequest, delete_all_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleVocabResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleVocabResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleVocabResponse, vocab_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiVocabResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiVocabResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiVocabResponse, vocabs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetWorkflowRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetWorkflowRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetWorkflowRequest, workflow_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetWorkflowRequest, favor_clarifai_workflows_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListWorkflowsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListWorkflowsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListWorkflowsRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListWorkflowsRequest, per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListPublicWorkflowsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListPublicWorkflowsRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListPublicWorkflowsRequest, per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowsRequest, workflows_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchWorkflowsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchWorkflowsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchWorkflowsRequest, workflows_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchWorkflowsRequest, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteWorkflowRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteWorkflowRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteWorkflowRequest, workflow_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteWorkflowsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteWorkflowsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteWorkflowsRequest, ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteWorkflowsRequest, delete_all_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleWorkflowResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleWorkflowResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleWorkflowResponse, workflow_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiWorkflowResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiWorkflowResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiWorkflowResponse, workflows_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsRequest, workflow_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsRequest, inputs_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsRequest, output_config_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsRequest, favor_clarifai_workflows_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsResponse, workflow_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsResponse, results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsSimilarityRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsSimilarityRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsSimilarityRequest, workflow_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsSimilarityRequest, model_version_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsSimilarityRequest, probe_inputs_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsSimilarityRequest, pool_inputs_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsSimilarityRequest, favor_clarifai_workflows_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsSimilarityResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsSimilarityResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsSimilarityResponse, results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TrainingTemplate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TrainingTemplate, name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TrainingTemplate, default_args_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TrainingTemplate, doc_string_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::TrainingTemplate, model_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListTrainingTemplatesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListTrainingTemplatesRequest, user_app_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiTrainingTemplatesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiTrainingTemplatesResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiTrainingTemplatesResponse, training_template_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAppDuplicationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAppDuplicationsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAppDuplicationsRequest, app_duplications_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetAppDuplicationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetAppDuplicationRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetAppDuplicationRequest, app_duplication_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAppDuplicationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAppDuplicationsRequest, user_app_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiAppDuplicationsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiAppDuplicationsResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiAppDuplicationsResponse, app_duplications_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleAppDuplicationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleAppDuplicationResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleAppDuplicationResponse, app_duplication_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostTasksRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostTasksRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostTasksRequest, tasks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetTaskRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetTaskRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetTaskRequest, task_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListTasksRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListTasksRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListTasksRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListTasksRequest, per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchTasksRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchTasksRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchTasksRequest, tasks_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchTasksRequest, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteTasksRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteTasksRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteTasksRequest, ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiTaskResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiTaskResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiTaskResponse, tasks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleTaskResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleTaskResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleTaskResponse, task_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostCollectorsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostCollectorsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostCollectorsRequest, collectors_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchCollectorsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchCollectorsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchCollectorsRequest, collectors_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchCollectorsRequest, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteCollectorsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteCollectorsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteCollectorsRequest, ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteCollectorsRequest, delete_all_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetCollectorRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetCollectorRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetCollectorRequest, collector_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListCollectorsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListCollectorsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListCollectorsRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListCollectorsRequest, per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiCollectorResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiCollectorResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiCollectorResponse, collectors_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleCollectorResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleCollectorResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleCollectorResponse, collector_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostStatValuesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostStatValuesRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostStatValuesRequest, stat_values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiStatValueResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiStatValueResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiStatValueResponse, stat_values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostStatValuesAggregateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostStatValuesAggregateRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostStatValuesAggregateRequest, stat_value_aggregate_queries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiStatValueAggregateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiStatValueAggregateResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiStatValueAggregateResponse, stat_value_aggregate_results_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::clarifai::api::TestMessage)},
  { 13, -1, sizeof(::clarifai::api::Pagination)},
  { 20, -1, sizeof(::clarifai::api::GetAnnotationRequest)},
  { 28, -1, sizeof(::clarifai::api::ListAnnotationsRequest)},
  { 42, -1, sizeof(::clarifai::api::PostAnnotationsRequest)},
  { 49, -1, sizeof(::clarifai::api::PatchAnnotationsRequest)},
  { 57, -1, sizeof(::clarifai::api::DeleteAnnotationRequest)},
  { 65, -1, sizeof(::clarifai::api::DeleteAnnotationsRequest)},
  { 73, -1, sizeof(::clarifai::api::SingleAnnotationResponse)},
  { 80, -1, sizeof(::clarifai::api::MultiAnnotationResponse)},
  { 87, -1, sizeof(::clarifai::api::GetAppRequest)},
  { 93, -1, sizeof(::clarifai::api::ListAppsRequest)},
  { 101, -1, sizeof(::clarifai::api::PostAppsRequest)},
  { 108, -1, sizeof(::clarifai::api::DeleteAppRequest)},
  { 114, -1, sizeof(::clarifai::api::PatchAppsRequest)},
  { 124, -1, sizeof(::clarifai::api::SingleAppResponse)},
  { 131, -1, sizeof(::clarifai::api::MultiAppResponse)},
  { 138, -1, sizeof(::clarifai::api::ListCollaboratorsRequest)},
  { 145, -1, sizeof(::clarifai::api::PostCollaboratorsRequest)},
  { 152, -1, sizeof(::clarifai::api::PatchCollaboratorsRequest)},
  { 160, -1, sizeof(::clarifai::api::DeleteCollaboratorsRequest)},
  { 168, -1, sizeof(::clarifai::api::MultiCollaboratorsResponse)},
  { 175, -1, sizeof(::clarifai::api::ListCollaborationsRequest)},
  { 183, -1, sizeof(::clarifai::api::MultiCollaborationsResponse)},
  { 190, -1, sizeof(::clarifai::api::PostVerifyEmailRequest)},
  { 196, -1, sizeof(::clarifai::api::SingleVerifyEmailResponse)},
  { 202, -1, sizeof(::clarifai::api::ListAuthMethodsRequest)},
  { 207, -1, sizeof(::clarifai::api::ListAuthMethodsResponse)},
  { 214, -1, sizeof(::clarifai::api::RequestResetPasswordRequest)},
  { 220, -1, sizeof(::clarifai::api::CompleteResetPasswordRequest)},
  { 227, -1, sizeof(::clarifai::api::PostLoginRequest)},
  { 235, -1, sizeof(::clarifai::api::PostSignupRequest)},
  { 250, -1, sizeof(::clarifai::api::SingleLoginResponse)},
  { 270, -1, sizeof(::clarifai::api::GetBillingUsageRequest)},
  { 275, -1, sizeof(::clarifai::api::GetBillingUsageResponse)},
  { 283, -1, sizeof(::clarifai::api::GetStatusCodeRequest)},
  { 289, -1, sizeof(::clarifai::api::ListStatusCodesRequest)},
  { 294, -1, sizeof(::clarifai::api::SingleStatusCodeResponse)},
  { 300, -1, sizeof(::clarifai::api::MultiStatusCodeResponse)},
  { 307, -1, sizeof(::clarifai::api::GetConceptRequest)},
  { 314, -1, sizeof(::clarifai::api::ListConceptsRequest)},
  { 322, -1, sizeof(::clarifai::api::PostConceptsSearchesRequest)},
  { 330, -1, sizeof(::clarifai::api::PostConceptsRequest)},
  { 337, -1, sizeof(::clarifai::api::PatchConceptsRequest)},
  { 345, -1, sizeof(::clarifai::api::GetConceptCountsRequest)},
  { 353, -1, sizeof(::clarifai::api::SingleConceptResponse)},
  { 360, -1, sizeof(::clarifai::api::MultiConceptResponse)},
  { 367, -1, sizeof(::clarifai::api::MultiConceptCountResponse)},
  { 374, -1, sizeof(::clarifai::api::ListConceptRelationsRequest)},
  { 385, -1, sizeof(::clarifai::api::PostConceptRelationsRequest)},
  { 393, -1, sizeof(::clarifai::api::DeleteConceptRelationsRequest)},
  { 401, -1, sizeof(::clarifai::api::ListKnowledgeGraphsRequest)},
  { 407, -1, sizeof(::clarifai::api::PostKnowledgeGraphsRequest)},
  { 414, -1, sizeof(::clarifai::api::ListConceptMappingsRequest)},
  { 422, -1, sizeof(::clarifai::api::PostConceptMappingsRequest)},
  { 430, -1, sizeof(::clarifai::api::PostConceptMappingJobsRequest)},
  { 437, -1, sizeof(::clarifai::api::SingleConceptRelationResponse)},
  { 444, -1, sizeof(::clarifai::api::MultiConceptRelationResponse)},
  { 451, -1, sizeof(::clarifai::api::SingleKnowledgeGraphResponse)},
  { 458, -1, sizeof(::clarifai::api::MultiKnowledgeGraphResponse)},
  { 465, -1, sizeof(::clarifai::api::SingleConceptMappingResponse)},
  { 472, -1, sizeof(::clarifai::api::MultiConceptMappingResponse)},
  { 479, -1, sizeof(::clarifai::api::SingleConceptMappingJobResponse)},
  { 486, -1, sizeof(::clarifai::api::MultiConceptMappingJobResponse)},
  { 493, -1, sizeof(::clarifai::api::GetConceptLanguageRequest)},
  { 501, -1, sizeof(::clarifai::api::ListConceptLanguagesRequest)},
  { 510, -1, sizeof(::clarifai::api::PatchConceptLanguagesRequest)},
  { 519, -1, sizeof(::clarifai::api::PostConceptLanguagesRequest)},
  { 527, -1, sizeof(::clarifai::api::SingleConceptLanguageResponse)},
  { 534, -1, sizeof(::clarifai::api::MultiConceptLanguageResponse)},
  { 541, -1, sizeof(::clarifai::api::ListConceptReferencesRequest)},
  { 550, -1, sizeof(::clarifai::api::SingleConceptReferenceResponse)},
  { 557, -1, sizeof(::clarifai::api::MultiConceptReferenceResponse)},
  { 564, -1, sizeof(::clarifai::api::GetHealthzRequest)},
  { 569, -1, sizeof(::clarifai::api::GetHealthzResponse)},
  { 576, -1, sizeof(::clarifai::api::GetInputRequest)},
  { 583, -1, sizeof(::clarifai::api::ListInputsRequest)},
  { 593, -1, sizeof(::clarifai::api::StreamInputsRequest)},
  { 602, -1, sizeof(::clarifai::api::PostInputsRequest)},
  { 609, -1, sizeof(::clarifai::api::PostInputsFileRequest)},
  { 617, -1, sizeof(::clarifai::api::PostInputsNiFiRequest)},
  { 626, -1, sizeof(::clarifai::api::PatchInputsRequest)},
  { 634, -1, sizeof(::clarifai::api::DeleteInputRequest)},
  { 641, -1, sizeof(::clarifai::api::DeleteInputsRequest)},
  { 649, -1, sizeof(::clarifai::api::SingleInputResponse)},
  { 656, -1, sizeof(::clarifai::api::MultiInputResponse)},
  { 663, -1, sizeof(::clarifai::api::SingleInputCountResponse)},
  { 670, -1, sizeof(::clarifai::api::GetInputCountRequest)},
  { 676, -1, sizeof(::clarifai::api::PostModelOutputsRequest)},
  { 686, -1, sizeof(::clarifai::api::ListModelInputsRequest)},
  { 696, -1, sizeof(::clarifai::api::GetKeyRequest)},
  { 703, -1, sizeof(::clarifai::api::ListKeysRequest)},
  { 711, -1, sizeof(::clarifai::api::ListAppKeysRequest)},
  { 719, -1, sizeof(::clarifai::api::PostKeysRequest)},
  { 726, -1, sizeof(::clarifai::api::DeleteKeyRequest)},
  { 733, -1, sizeof(::clarifai::api::PatchKeysRequest)},
  { 741, -1, sizeof(::clarifai::api::SingleKeyResponse)},
  { 748, -1, sizeof(::clarifai::api::MultiKeyResponse)},
  { 755, -1, sizeof(::clarifai::api::FetchLicenseRequest)},
  { 763, -1, sizeof(::clarifai::api::FetchLicenseResponse)},
  { 773, -1, sizeof(::clarifai::api::ValidateLicenseRequest)},
  { 783, -1, sizeof(::clarifai::api::ValidateLicenseResponse)},
  { 792, -1, sizeof(::clarifai::api::ListLicensesRequest)},
  { 798, -1, sizeof(::clarifai::api::GetLicenseRequest)},
  { 805, -1, sizeof(::clarifai::api::SingleLicenseResponse)},
  { 812, -1, sizeof(::clarifai::api::MultipleLicensesResponse)},
  { 819, -1, sizeof(::clarifai::api::GetModelRequest)},
  { 829, -1, sizeof(::clarifai::api::GetModelOutputInfoRequest)},
  { 837, -1, sizeof(::clarifai::api::ListModelsRequest)},
  { 846, -1, sizeof(::clarifai::api::PostModelsRequest)},
  { 854, -1, sizeof(::clarifai::api::PatchModelsRequest)},
  { 862, -1, sizeof(::clarifai::api::DeleteModelRequest)},
  { 869, -1, sizeof(::clarifai::api::DeleteModelsRequest)},
  { 877, -1, sizeof(::clarifai::api::PostModelsSearchesRequest)},
  { 885, -1, sizeof(::clarifai::api::SingleModelResponse)},
  { 892, -1, sizeof(::clarifai::api::MultiModelResponse)},
  { 899, -1, sizeof(::clarifai::api::GetModelVersionRequest)},
  { 907, -1, sizeof(::clarifai::api::ListModelVersionsRequest)},
  { 917, -1, sizeof(::clarifai::api::DeleteModelVersionRequest)},
  { 925, -1, sizeof(::clarifai::api::SingleModelVersionResponse)},
  { 932, -1, sizeof(::clarifai::api::MultiModelVersionResponse)},
  { 939, -1, sizeof(::clarifai::api::PostModelVersionsRequest)},
  { 951, -1, sizeof(::clarifai::api::PostModelVersionMetricsRequest)},
  { 961, -1, sizeof(::clarifai::api::PostModelVersionsDeploymentRequest)},
  { 969, -1, sizeof(::clarifai::api::DeleteModelVersionsDeploymentRequest)},
  { 977, -1, sizeof(::clarifai::api::GetModelVersionMetricsRequest)},
  { 986, -1, sizeof(::clarifai::api::MultiOutputResponse)},
  { 993, -1, sizeof(::clarifai::api::ListScopesRequest)},
  { 999, -1, sizeof(::clarifai::api::MyScopesRequest)},
  { 1005, -1, sizeof(::clarifai::api::MultiScopeDepsResponse)},
  { 1013, -1, sizeof(::clarifai::api::MultiScopeResponse)},
  { 1022, -1, sizeof(::clarifai::api::GetSearchRequest)},
  { 1029, -1, sizeof(::clarifai::api::ListSearchesRequest)},
  { 1037, -1, sizeof(::clarifai::api::PostSearchesRequest)},
  { 1046, -1, sizeof(::clarifai::api::PostSearchesByIDRequest)},
  { 1054, -1, sizeof(::clarifai::api::DeleteSearchRequest)},
  { 1061, -1, sizeof(::clarifai::api::PostAttributeSearchRequest)},
  { 1071, -1, sizeof(::clarifai::api::PostAnnotationsSearchesRequest)},
  { 1079, -1, sizeof(::clarifai::api::PostInputsSearchesRequest)},
  { 1087, -1, sizeof(::clarifai::api::SingleSearchResponse)},
  { 1094, -1, sizeof(::clarifai::api::MultiSearchResponse)},
  { 1104, -1, sizeof(::clarifai::api::PostAnnotationSearchMetricsRequest)},
  { 1115, -1, sizeof(::clarifai::api::GetAnnotationSearchMetricsRequest)},
  { 1122, -1, sizeof(::clarifai::api::ListAnnotationSearchMetricsRequest)},
  { 1128, -1, sizeof(::clarifai::api::MultiAnnotationSearchMetricsResponse)},
  { 1135, -1, sizeof(::clarifai::api::ListClustersRequest)},
  { 1145, -1, sizeof(::clarifai::api::ListAnnotationsForClusterRequest)},
  { 1154, -1, sizeof(::clarifai::api::PostClustersSearchesRequest)},
  { 1162, -1, sizeof(::clarifai::api::MultiClusterResponse)},
  { 1170, -1, sizeof(::clarifai::api::GetSubscriptionRequest)},
  { 1175, -1, sizeof(::clarifai::api::PostSubscriptionRequest)},
  { 1182, -1, sizeof(::clarifai::api::SingleSubscriptionResponse)},
  { 1190, -1, sizeof(::clarifai::api::ListCreditCardsRequest)},
  { 1196, -1, sizeof(::clarifai::api::MultipleCreditCardResponse)},
  { 1203, -1, sizeof(::clarifai::api::PostCreditCardRequest)},
  { 1211, -1, sizeof(::clarifai::api::SingleCreditCardResponse)},
  { 1218, -1, sizeof(::clarifai::api::DeleteCreditCardRequest)},
  { 1225, -1, sizeof(::clarifai::api::PatchCreditCardsRequest)},
  { 1233, -1, sizeof(::clarifai::api::PostHistoricalUsageRequest)},
  { 1239, -1, sizeof(::clarifai::api::PostHistoricalUsageResponse)},
  { 1247, -1, sizeof(::clarifai::api::GetRealtimeUsageRequest)},
  { 1253, -1, sizeof(::clarifai::api::GetRealtimeUsageResponse)},
  { 1260, -1, sizeof(::clarifai::api::ListUsageIntervalsRequest)},
  { 1265, -1, sizeof(::clarifai::api::ListUsageIntervalsResponse)},
  { 1272, -1, sizeof(::clarifai::api::ListUserBillingCyclesRequest)},
  { 1280, -1, sizeof(::clarifai::api::ListUserBillingCyclesResponse)},
  { 1287, -1, sizeof(::clarifai::api::PostUsageRequest)},
  { 1296, -1, sizeof(::clarifai::api::PostUsageResponse)},
  { 1302, -1, sizeof(::clarifai::api::GetUserRequest)},
  { 1308, -1, sizeof(::clarifai::api::PostUserConsentRequest)},
  { 1316, -1, sizeof(::clarifai::api::SingleUserResponse)},
  { 1323, -1, sizeof(::clarifai::api::MultiUserResponse)},
  { 1330, -1, sizeof(::clarifai::api::PatchUserRequest)},
  { 1340, -1, sizeof(::clarifai::api::PostEmailsRequest)},
  { 1347, -1, sizeof(::clarifai::api::SingleEmailResponse)},
  { 1354, -1, sizeof(::clarifai::api::MultipleEmailResponse)},
  { 1361, -1, sizeof(::clarifai::api::ListEmailsRequest)},
  { 1367, -1, sizeof(::clarifai::api::PostResendVerifyRequest)},
  { 1374, -1, sizeof(::clarifai::api::SingleResendVerifyResponse)},
  { 1380, -1, sizeof(::clarifai::api::DeleteEmailRequest)},
  { 1387, -1, sizeof(::clarifai::api::PostPrimaryEmailRequest)},
  { 1394, -1, sizeof(::clarifai::api::PostValidatePasswordRequest)},
  { 1401, -1, sizeof(::clarifai::api::SinglePasswordValidationResponse)},
  { 1408, -1, sizeof(::clarifai::api::ListPasswordPoliciesRequest)},
  { 1418, -1, sizeof(::clarifai::api::PostPasswordPoliciesRequest)},
  { 1425, -1, sizeof(::clarifai::api::PatchPasswordPoliciesRequest)},
  { 1433, -1, sizeof(::clarifai::api::DeletePasswordPoliciesRequest)},
  { 1440, -1, sizeof(::clarifai::api::MultiplePasswordPoliciesResponse)},
  { 1447, -1, sizeof(::clarifai::api::GetVocabRequest)},
  { 1454, -1, sizeof(::clarifai::api::ListVocabsRequest)},
  { 1462, -1, sizeof(::clarifai::api::PostVocabsRequest)},
  { 1469, -1, sizeof(::clarifai::api::PatchVocabsRequest)},
  { 1477, -1, sizeof(::clarifai::api::DeleteVocabRequest)},
  { 1484, -1, sizeof(::clarifai::api::DeleteVocabsRequest)},
  { 1492, -1, sizeof(::clarifai::api::ListVocabConceptsRequest)},
  { 1501, -1, sizeof(::clarifai::api::PostVocabConceptsRequest)},
  { 1509, -1, sizeof(::clarifai::api::DeleteVocabConceptRequest)},
  { 1517, -1, sizeof(::clarifai::api::DeleteVocabConceptsRequest)},
  { 1526, -1, sizeof(::clarifai::api::SingleVocabResponse)},
  { 1533, -1, sizeof(::clarifai::api::MultiVocabResponse)},
  { 1540, -1, sizeof(::clarifai::api::GetWorkflowRequest)},
  { 1548, -1, sizeof(::clarifai::api::ListWorkflowsRequest)},
  { 1556, -1, sizeof(::clarifai::api::ListPublicWorkflowsRequest)},
  { 1563, -1, sizeof(::clarifai::api::PostWorkflowsRequest)},
  { 1570, -1, sizeof(::clarifai::api::PatchWorkflowsRequest)},
  { 1578, -1, sizeof(::clarifai::api::DeleteWorkflowRequest)},
  { 1585, -1, sizeof(::clarifai::api::DeleteWorkflowsRequest)},
  { 1593, -1, sizeof(::clarifai::api::SingleWorkflowResponse)},
  { 1600, -1, sizeof(::clarifai::api::MultiWorkflowResponse)},
  { 1607, -1, sizeof(::clarifai::api::PostWorkflowResultsRequest)},
  { 1617, -1, sizeof(::clarifai::api::PostWorkflowResultsResponse)},
  { 1625, -1, sizeof(::clarifai::api::PostWorkflowResultsSimilarityRequest)},
  { 1636, -1, sizeof(::clarifai::api::PostWorkflowResultsSimilarityResponse)},
  { 1643, -1, sizeof(::clarifai::api::TrainingTemplate)},
  { 1652, -1, sizeof(::clarifai::api::ListTrainingTemplatesRequest)},
  { 1658, -1, sizeof(::clarifai::api::MultiTrainingTemplatesResponse)},
  { 1665, -1, sizeof(::clarifai::api::PostAppDuplicationsRequest)},
  { 1672, -1, sizeof(::clarifai::api::GetAppDuplicationRequest)},
  { 1679, -1, sizeof(::clarifai::api::ListAppDuplicationsRequest)},
  { 1685, -1, sizeof(::clarifai::api::MultiAppDuplicationsResponse)},
  { 1692, -1, sizeof(::clarifai::api::SingleAppDuplicationResponse)},
  { 1699, -1, sizeof(::clarifai::api::PostTasksRequest)},
  { 1706, -1, sizeof(::clarifai::api::GetTaskRequest)},
  { 1713, -1, sizeof(::clarifai::api::ListTasksRequest)},
  { 1721, -1, sizeof(::clarifai::api::PatchTasksRequest)},
  { 1729, -1, sizeof(::clarifai::api::DeleteTasksRequest)},
  { 1736, -1, sizeof(::clarifai::api::MultiTaskResponse)},
  { 1743, -1, sizeof(::clarifai::api::SingleTaskResponse)},
  { 1750, -1, sizeof(::clarifai::api::PostCollectorsRequest)},
  { 1757, -1, sizeof(::clarifai::api::PatchCollectorsRequest)},
  { 1765, -1, sizeof(::clarifai::api::DeleteCollectorsRequest)},
  { 1773, -1, sizeof(::clarifai::api::GetCollectorRequest)},
  { 1780, -1, sizeof(::clarifai::api::ListCollectorsRequest)},
  { 1788, -1, sizeof(::clarifai::api::MultiCollectorResponse)},
  { 1795, -1, sizeof(::clarifai::api::SingleCollectorResponse)},
  { 1802, -1, sizeof(::clarifai::api::PostStatValuesRequest)},
  { 1809, -1, sizeof(::clarifai::api::MultiStatValueResponse)},
  { 1816, -1, sizeof(::clarifai::api::PostStatValuesAggregateRequest)},
  { 1823, -1, sizeof(::clarifai::api::MultiStatValueAggregateResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_TestMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Pagination_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetAnnotationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListAnnotationsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostAnnotationsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PatchAnnotationsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeleteAnnotationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeleteAnnotationsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleAnnotationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiAnnotationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetAppRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListAppsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostAppsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeleteAppRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PatchAppsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleAppResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiAppResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListCollaboratorsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostCollaboratorsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PatchCollaboratorsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeleteCollaboratorsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiCollaboratorsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListCollaborationsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiCollaborationsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostVerifyEmailRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleVerifyEmailResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListAuthMethodsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListAuthMethodsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_RequestResetPasswordRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_CompleteResetPasswordRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostLoginRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostSignupRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleLoginResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetBillingUsageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetBillingUsageResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetStatusCodeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListStatusCodesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleStatusCodeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiStatusCodeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetConceptRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListConceptsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostConceptsSearchesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostConceptsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PatchConceptsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetConceptCountsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleConceptResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiConceptResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiConceptCountResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListConceptRelationsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostConceptRelationsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeleteConceptRelationsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListKnowledgeGraphsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostKnowledgeGraphsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListConceptMappingsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostConceptMappingsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostConceptMappingJobsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleConceptRelationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiConceptRelationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleKnowledgeGraphResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiKnowledgeGraphResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleConceptMappingResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiConceptMappingResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleConceptMappingJobResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiConceptMappingJobResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetConceptLanguageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListConceptLanguagesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PatchConceptLanguagesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostConceptLanguagesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleConceptLanguageResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiConceptLanguageResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListConceptReferencesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleConceptReferenceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiConceptReferenceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetHealthzRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetHealthzResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetInputRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListInputsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_StreamInputsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostInputsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostInputsFileRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostInputsNiFiRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PatchInputsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeleteInputRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeleteInputsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleInputResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiInputResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleInputCountResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetInputCountRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostModelOutputsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListModelInputsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetKeyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListKeysRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListAppKeysRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostKeysRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeleteKeyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PatchKeysRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleKeyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiKeyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_FetchLicenseRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_FetchLicenseResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ValidateLicenseRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ValidateLicenseResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListLicensesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetLicenseRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleLicenseResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultipleLicensesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetModelRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetModelOutputInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListModelsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostModelsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PatchModelsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeleteModelRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeleteModelsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostModelsSearchesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleModelResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiModelResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetModelVersionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListModelVersionsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeleteModelVersionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleModelVersionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiModelVersionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostModelVersionsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostModelVersionMetricsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostModelVersionsDeploymentRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeleteModelVersionsDeploymentRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetModelVersionMetricsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiOutputResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListScopesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MyScopesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiScopeDepsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiScopeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetSearchRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListSearchesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostSearchesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostSearchesByIDRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeleteSearchRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostAttributeSearchRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostAnnotationsSearchesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostInputsSearchesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleSearchResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiSearchResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostAnnotationSearchMetricsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetAnnotationSearchMetricsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListAnnotationSearchMetricsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiAnnotationSearchMetricsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListClustersRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListAnnotationsForClusterRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostClustersSearchesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiClusterResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetSubscriptionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostSubscriptionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleSubscriptionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListCreditCardsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultipleCreditCardResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostCreditCardRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleCreditCardResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeleteCreditCardRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PatchCreditCardsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostHistoricalUsageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostHistoricalUsageResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetRealtimeUsageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetRealtimeUsageResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListUsageIntervalsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListUsageIntervalsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListUserBillingCyclesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListUserBillingCyclesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostUsageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostUsageResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetUserRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostUserConsentRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleUserResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiUserResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PatchUserRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostEmailsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleEmailResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultipleEmailResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListEmailsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostResendVerifyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleResendVerifyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeleteEmailRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostPrimaryEmailRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostValidatePasswordRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SinglePasswordValidationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListPasswordPoliciesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostPasswordPoliciesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PatchPasswordPoliciesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeletePasswordPoliciesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiplePasswordPoliciesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetVocabRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListVocabsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostVocabsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PatchVocabsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeleteVocabRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeleteVocabsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListVocabConceptsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostVocabConceptsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeleteVocabConceptRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeleteVocabConceptsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleVocabResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiVocabResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetWorkflowRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListWorkflowsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListPublicWorkflowsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostWorkflowsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PatchWorkflowsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeleteWorkflowRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeleteWorkflowsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleWorkflowResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiWorkflowResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostWorkflowResultsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostWorkflowResultsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostWorkflowResultsSimilarityRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostWorkflowResultsSimilarityResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_TrainingTemplate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListTrainingTemplatesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiTrainingTemplatesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostAppDuplicationsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetAppDuplicationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListAppDuplicationsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiAppDuplicationsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleAppDuplicationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostTasksRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetTaskRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListTasksRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PatchTasksRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeleteTasksRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiTaskResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleTaskResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostCollectorsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PatchCollectorsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeleteCollectorsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetCollectorRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListCollectorsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiCollectorResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleCollectorResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostStatValuesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiStatValueResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostStatValuesAggregateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiStatValueAggregateResponse_default_instance_),
};

const char descriptor_table_protodef_proto_2fclarifai_2fapi_2fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n proto/clarifai/api/service.proto\022\014clar"
  "ifai.api\032\"proto/clarifai/api/resources.p"
  "roto\032&proto/clarifai/api/status/status.p"
  "roto\032)proto/clarifai/api/utils/extension"
  "s.proto\032%proto/clarifai/auth/scope/scope"
  ".proto\032(proto/clarifai/auth/util/extensi"
  "on.proto\032\034google/api/annotations.proto\032\036"
  "google/protobuf/duration.proto\032\034google/p"
  "rotobuf/struct.proto\032\037google/protobuf/ti"
  "mestamp.proto\"\267\001\n\013TestMessage\022+\n\006status\030"
  "\001 \001(\0132\033.clarifai.api.status.Status\022\r\n\005va"
  "lue\030\002 \001(\t\022\014\n\004byts\030\003 \001(\014\022\016\n\006int_32\030\004 \001(\r\022"
  "\016\n\006int_64\030\005 \001(\004\022\014\n\004f_32\030\006 \001(\002\022\014\n\004f_64\030\007 "
  "\001(\001\022\"\n\001s\030\010 \001(\0132\027.google.protobuf.Struct\""
  ",\n\nPagination\022\014\n\004page\030\001 \001(\r\022\020\n\010per_page\030"
  "\002 \001(\r\"p\n\024GetAnnotationRequest\022/\n\013user_ap"
  "p_id\030\001 \001(\0132\032.clarifai.api.UserAppIDSet\022\025"
  "\n\rannotation_id\030\002 \001(\t\022\020\n\010input_id\030\003 \001(\t\""
  "\211\002\n\026ListAnnotationsRequest\022/\n\013user_app_i"
  "d\030\001 \001(\0132\032.clarifai.api.UserAppIDSet\022\013\n\003i"
  "ds\030\002 \003(\t\022\021\n\tinput_ids\030\003 \003(\t\022\020\n\010user_ids\030"
  "\t \003(\t\022\031\n\021model_version_ids\030\n \003(\t\022-\n\010stat"
  "uses\030\005 \003(\0132\033.clarifai.api.status.Status\022"
  "\034\n\024list_all_annotations\030\006 \001(\010\022\014\n\004page\030\007 "
  "\001(\r\022\020\n\010per_page\030\010 \001(\rJ\004\010\004\020\005\"x\n\026PostAnnot"
  "ationsRequest\022/\n\013user_app_id\030\001 \001(\0132\032.cla"
  "rifai.api.UserAppIDSet\022-\n\013annotations\030\002 "
  "\003(\0132\030.clarifai.api.Annotation\"\211\001\n\027PatchA"
  "nnotationsRequest\022/\n\013user_app_id\030\001 \001(\0132\032"
  ".clarifai.api.UserAppIDSet\022-\n\013annotation"
  "s\030\002 \003(\0132\030.clarifai.api.Annotation\022\016\n\006act"
  "ion\030\003 \001(\t\"s\n\027DeleteAnnotationRequest\022/\n\013"
  "user_app_id\030\001 \001(\0132\032.clarifai.api.UserApp"
  "IDSet\022\020\n\010input_id\030\002 \001(\t\022\025\n\rannotation_id"
  "\030\003 \001(\t\"k\n\030DeleteAnnotationsRequest\022/\n\013us"
  "er_app_id\030\001 \001(\0132\032.clarifai.api.UserAppID"
  "Set\022\013\n\003ids\030\002 \003(\t\022\021\n\tinput_ids\030\003 \003(\t\"u\n\030S"
  "ingleAnnotationResponse\022+\n\006status\030\001 \001(\0132"
  "\033.clarifai.api.status.Status\022,\n\nannotati"
  "on\030\002 \001(\0132\030.clarifai.api.Annotation\"{\n\027Mu"
  "ltiAnnotationResponse\022+\n\006status\030\001 \001(\0132\033."
  "clarifai.api.status.Status\0223\n\013annotation"
  "s\030\002 \003(\0132\030.clarifai.api.AnnotationB\004\200\265\030\001\""
  "@\n\rGetAppRequest\022/\n\013user_app_id\030\001 \001(\0132\032."
  "clarifai.api.UserAppIDSet\"b\n\017ListAppsReq"
  "uest\022/\n\013user_app_id\030\001 \001(\0132\032.clarifai.api"
  ".UserAppIDSet\022\014\n\004page\030\002 \001(\r\022\020\n\010per_page\030"
  "\003 \001(\r\"c\n\017PostAppsRequest\022/\n\013user_app_id\030"
  "\001 \001(\0132\032.clarifai.api.UserAppIDSet\022\037\n\004app"
  "s\030\002 \003(\0132\021.clarifai.api.App\"C\n\020DeleteAppR"
  "equest\022/\n\013user_app_id\030\001 \001(\0132\032.clarifai.a"
  "pi.UserAppIDSet\"\271\001\n\020PatchAppsRequest\022/\n\013"
  "user_app_id\030\001 \001(\0132\032.clarifai.api.UserApp"
  "IDSet\022\037\n\004apps\030\002 \003(\0132\021.clarifai.api.App\022\016"
  "\n\006action\030\003 \001(\t\0222\n\017metadata_action\030\004 \001(\0132"
  "\031.clarifai.api.PatchAction\022\017\n\007reindex\030\005 "
  "\001(\010\"`\n\021SingleAppResponse\022+\n\006status\030\001 \001(\013"
  "2\033.clarifai.api.status.Status\022\036\n\003app\030\002 \001"
  "(\0132\021.clarifai.api.App\"f\n\020MultiAppRespons"
  "e\022+\n\006status\030\001 \001(\0132\033.clarifai.api.status."
  "Status\022%\n\004apps\030\002 \003(\0132\021.clarifai.api.AppB"
  "\004\200\265\030\001\"k\n\030ListCollaboratorsRequest\022/\n\013use"
  "r_app_id\030\001 \001(\0132\032.clarifai.api.UserAppIDS"
  "et\022\036\n\026list_all_collaborators\030\002 \001(\010\"~\n\030Po"
  "stCollaboratorsRequest\022/\n\013user_app_id\030\001 "
  "\001(\0132\032.clarifai.api.UserAppIDSet\0221\n\rcolla"
  "borators\030\002 \003(\0132\032.clarifai.api.Collaborat"
  "or\"\217\001\n\031PatchCollaboratorsRequest\022/\n\013user"
  "_app_id\030\001 \001(\0132\032.clarifai.api.UserAppIDSe"
  "t\0221\n\rcollaborators\030\002 \003(\0132\032.clarifai.api."
  "Collaborator\022\016\n\006action\030\003 \001(\t\"|\n\032DeleteCo"
  "llaboratorsRequest\022/\n\013user_app_id\030\001 \001(\0132"
  "\032.clarifai.api.UserAppIDSet\022\030\n\020collabora"
  "tor_ids\030\002 \003(\t\022\023\n\013user_emails\030\003 \003(\t\"|\n\032Mu"
  "ltiCollaboratorsResponse\022+\n\006status\030\001 \001(\013"
  "2\033.clarifai.api.status.Status\0221\n\rcollabo"
  "rators\030\002 \003(\0132\032.clarifai.api.Collaborator"
  "\"l\n\031ListCollaborationsRequest\022/\n\013user_ap"
  "p_id\030\001 \001(\0132\032.clarifai.api.UserAppIDSet\022\014"
  "\n\004page\030\002 \001(\r\022\020\n\010per_page\030\003 \001(\r\"\177\n\033MultiC"
  "ollaborationsResponse\022+\n\006status\030\001 \001(\0132\033."
  "clarifai.api.status.Status\0223\n\016collaborat"
  "ions\030\002 \003(\0132\033.clarifai.api.Collaboration\""
  "%\n\026PostVerifyEmailRequest\022\013\n\003key\030\001 \001(\t\"H"
  "\n\031SingleVerifyEmailResponse\022+\n\006status\030\001 "
  "\001(\0132\033.clarifai.api.status.Status\"\030\n\026List"
  "AuthMethodsRequest\"v\n\027ListAuthMethodsRes"
  "ponse\022+\n\006status\030\001 \001(\0132\033.clarifai.api.sta"
  "tus.Status\022.\n\014auth_methods\030\002 \003(\0132\030.clari"
  "fai.api.AuthMethod\",\n\033RequestResetPasswo"
  "rdRequest\022\r\n\005email\030\001 \001(\t\"A\n\034CompleteRese"
  "tPasswordRequest\022\013\n\003key\030\001 \001(\t\022\024\n\014new_pas"
  "sword\030\002 \001(\t\"G\n\020PostLoginRequest\022\r\n\005email"
  "\030\001 \001(\t\022\020\n\010password\030\002 \001(\t\022\022\n\nlong_lived\030\003"
  " \001(\010\"\367\001\n\021PostSignupRequest\022\r\n\005email\030\001 \001("
  "\t\022\020\n\010password\030\002 \001(\t\022\022\n\nfirst_name\030\003 \001(\t\022"
  "\021\n\tlast_name\030\004 \001(\t\022\024\n\014company_name\030\005 \001(\t"
  "\022\036\n\026captcha_response_token\030\006 \001(\t\022\036\n\026aws_"
  "registration_token\030\007 \001(\t\022\024\n\014gdpr_consent"
  "\030\010 \001(\010\022\023\n\013tos_consent\030\t \001(\010\022\031\n\021marketing"
  "_consent\030\n \001(\010\"\241\003\n\023SingleLoginResponse\022+"
  "\n\006status\030\001 \001(\0132\033.clarifai.api.status.Sta"
  "tus\022\r\n\005email\030\002 \001(\t\022\022\n\nfirst_name\030\003 \001(\t\022\021"
  "\n\tlast_name\030\004 \001(\t\022\024\n\014company_name\030\005 \001(\t\022"
  "\023\n\013date_joined\030\006 \001(\t\0223\n\017email_addresses\030"
  "\010 \003(\0132\032.clarifai.api.EmailAddress\022\025\n\rses"
  "sion_token\030\t \001(\t\022\025\n\rtoken_expires\030\n \001(\t\022"
  "\022\n\nv2_user_id\030\013 \001(\t\022\031\n\021date_gdpr_consent"
  "\030\014 \001(\t\022\030\n\020date_tos_consent\030\r \001(\t\022\036\n\026date"
  "_marketing_consent\030\016 \001(\t\022\033\n\023password_exp"
  "ired_at\030\017 \001(\t\022\023\n\013is_new_user\030\020 \001(\010\"\030\n\026Ge"
  "tBillingUsageRequest\"\253\001\n\027GetBillingUsage"
  "Response\022+\n\006status\030\001 \001(\0132\033.clarifai.api."
  "status.Status\0220\n\rinvoice_items\030\002 \003(\0132\031.c"
  "larifai.api.InvoiceItem\0221\n\rbilling_cycle"
  "\030\003 \001(\0132\032.clarifai.api.BillingCycle\".\n\024Ge"
  "tStatusCodeRequest\022\026\n\016status_code_id\030\001 \001"
  "(\t\"\030\n\026ListStatusCodesRequest\"G\n\030SingleSt"
  "atusCodeResponse\022+\n\006status\030\001 \001(\0132\033.clari"
  "fai.api.status.Status\"u\n\027MultiStatusCode"
  "Response\022+\n\006status\030\001 \001(\0132\033.clarifai.api."
  "status.Status\022-\n\010statuses\030\002 \003(\0132\033.clarif"
  "ai.api.status.Status\"X\n\021GetConceptReques"
  "t\022/\n\013user_app_id\030\001 \001(\0132\032.clarifai.api.Us"
  "erAppIDSet\022\022\n\nconcept_id\030\002 \001(\t\"f\n\023ListCo"
  "nceptsRequest\022/\n\013user_app_id\030\001 \001(\0132\032.cla"
  "rifai.api.UserAppIDSet\022\014\n\004page\030\002 \001(\r\022\020\n\010"
  "per_page\030\003 \001(\r\"\257\001\n\033PostConceptsSearchesR"
  "equest\022/\n\013user_app_id\030\001 \001(\0132\032.clarifai.a"
  "pi.UserAppIDSet\0221\n\rconcept_query\030\002 \001(\0132\032"
  ".clarifai.api.ConceptQuery\022,\n\npagination"
  "\030\003 \001(\0132\030.clarifai.api.Pagination\"o\n\023Post"
  "ConceptsRequest\022/\n\013user_app_id\030\001 \001(\0132\032.c"
  "larifai.api.UserAppIDSet\022\'\n\010concepts\030\002 \003"
  "(\0132\025.clarifai.api.Concept\"\200\001\n\024PatchConce"
  "ptsRequest\022/\n\013user_app_id\030\001 \001(\0132\032.clarif"
  "ai.api.UserAppIDSet\022\'\n\010concepts\030\002 \003(\0132\025."
  "clarifai.api.Concept\022\016\n\006action\030\003 \001(\t\"j\n\027"
  "GetConceptCountsRequest\022/\n\013user_app_id\030\001"
  " \001(\0132\032.clarifai.api.UserAppIDSet\022\014\n\004page"
  "\030\002 \001(\r\022\020\n\010per_page\030\003 \001(\r\"l\n\025SingleConcep"
  "tResponse\022+\n\006status\030\001 \001(\0132\033.clarifai.api"
  ".status.Status\022&\n\007concept\030\002 \001(\0132\025.clarif"
  "ai.api.Concept\"r\n\024MultiConceptResponse\022+"
  "\n\006status\030\001 \001(\0132\033.clarifai.api.status.Sta"
  "tus\022-\n\010concepts\030\002 \003(\0132\025.clarifai.api.Con"
  "ceptB\004\200\265\030\001\"\202\001\n\031MultiConceptCountResponse"
  "\022+\n\006status\030\001 \001(\0132\033.clarifai.api.status.S"
  "tatus\0228\n\016concept_counts\030\002 \003(\0132\032.clarifai"
  ".api.ConceptCountB\004\200\265\030\001\"\261\001\n\033ListConceptR"
  "elationsRequest\022/\n\013user_app_id\030\001 \001(\0132\032.c"
  "larifai.api.UserAppIDSet\022\022\n\nconcept_id\030\002"
  " \001(\t\022\021\n\tpredicate\030\003 \001(\t\022\032\n\022knowledge_gra"
  "ph_id\030\004 \001(\t\022\014\n\004page\030\005 \001(\r\022\020\n\010per_page\030\006 "
  "\001(\r\"\234\001\n\033PostConceptRelationsRequest\022/\n\013u"
  "ser_app_id\030\001 \001(\0132\032.clarifai.api.UserAppI"
  "DSet\022\022\n\nconcept_id\030\002 \001(\t\0228\n\021concept_rela"
  "tions\030\003 \003(\0132\035.clarifai.api.ConceptRelati"
  "on\"q\n\035DeleteConceptRelationsRequest\022/\n\013u"
  "ser_app_id\030\001 \001(\0132\032.clarifai.api.UserAppI"
  "DSet\022\022\n\nconcept_id\030\002 \001(\t\022\013\n\003ids\030\003 \003(\t\"M\n"
  "\032ListKnowledgeGraphsRequest\022/\n\013user_app_"
  "id\030\001 \001(\0132\032.clarifai.api.UserAppIDSet\"\205\001\n"
  "\032PostKnowledgeGraphsRequest\022/\n\013user_app_"
  "id\030\001 \001(\0132\032.clarifai.api.UserAppIDSet\0226\n\020"
  "knowledge_graphs\030\002 \003(\0132\034.clarifai.api.Kn"
  "owledgeGraph\"m\n\032ListConceptMappingsReque"
  "st\022/\n\013user_app_id\030\001 \001(\0132\032.clarifai.api.U"
  "serAppIDSet\022\014\n\004page\030\002 \001(\r\022\020\n\010per_page\030\003 "
  "\001(\r\"\274\001\n\032PostConceptMappingsRequest\022/\n\013us"
  "er_app_id\030\001 \001(\0132\032.clarifai.api.UserAppID"
  "Set\0226\n\020concept_mappings\030\002 \003(\0132\034.clarifai"
  ".api.ConceptMapping\0225\n\017knowledge_graph\030\003"
  " \001(\0132\034.clarifai.api.KnowledgeGraph\"\217\001\n\035P"
  "ostConceptMappingJobsRequest\022/\n\013user_app"
  "_id\030\001 \001(\0132\032.clarifai.api.UserAppIDSet\022=\n"
  "\024concept_mapping_jobs\030\002 \003(\0132\037.clarifai.a"
  "pi.ConceptMappingJob\"\205\001\n\035SingleConceptRe"
  "lationResponse\022+\n\006status\030\001 \001(\0132\033.clarifa"
  "i.api.status.Status\0227\n\020concept_relation\030"
  "\002 \001(\0132\035.clarifai.api.ConceptRelation\"\213\001\n"
  "\034MultiConceptRelationResponse\022+\n\006status\030"
  "\001 \001(\0132\033.clarifai.api.status.Status\022>\n\021co"
  "ncept_relations\030\002 \003(\0132\035.clarifai.api.Con"
  "ceptRelationB\004\200\265\030\001\"\202\001\n\034SingleKnowledgeGr"
  "aphResponse\022+\n\006status\030\001 \001(\0132\033.clarifai.a"
  "pi.status.Status\0225\n\017knowledge_graph\030\002 \001("
  "\0132\034.clarifai.api.KnowledgeGraph\"\210\001\n\033Mult"
  "iKnowledgeGraphResponse\022+\n\006status\030\001 \001(\0132"
  "\033.clarifai.api.status.Status\022<\n\020knowledg"
  "e_graphs\030\002 \003(\0132\034.clarifai.api.KnowledgeG"
  "raphB\004\200\265\030\001\"\202\001\n\034SingleConceptMappingRespo"
  "nse\022+\n\006status\030\001 \001(\0132\033.clarifai.api.statu"
  "s.Status\0225\n\017concept_mapping\030\002 \001(\0132\034.clar"
  "ifai.api.ConceptMapping\"\210\001\n\033MultiConcept"
  "MappingResponse\022+\n\006status\030\001 \001(\0132\033.clarif"
  "ai.api.status.Status\022<\n\020concept_mappings"
  "\030\002 \003(\0132\034.clarifai.api.ConceptMappingB\004\200\265"
  "\030\001\"Z\n\037SingleConceptMappingJobResponse\022+\n"
  "\006status\030\001 \001(\0132\033.clarifai.api.status.Stat"
  "us\022\n\n\002id\030\002 \001(\t\"Z\n\036MultiConceptMappingJob"
  "Response\022+\n\006status\030\001 \001(\0132\033.clarifai.api."
  "status.Status\022\013\n\003ids\030\002 \003(\t\"r\n\031GetConcept"
  "LanguageRequest\022/\n\013user_app_id\030\001 \001(\0132\032.c"
  "larifai.api.UserAppIDSet\022\022\n\nconcept_id\030\002"
  " \001(\t\022\020\n\010language\030\003 \001(\t\"\202\001\n\033ListConceptLa"
  "nguagesRequest\022/\n\013user_app_id\030\001 \001(\0132\032.cl"
  "arifai.api.UserAppIDSet\022\022\n\nconcept_id\030\002 "
  "\001(\t\022\014\n\004page\030\003 \001(\r\022\020\n\010per_page\030\004 \001(\r\"\255\001\n\034"
  "PatchConceptLanguagesRequest\022/\n\013user_app"
  "_id\030\001 \001(\0132\032.clarifai.api.UserAppIDSet\022\022\n"
  "\nconcept_id\030\002 \001(\t\0228\n\021concept_languages\030\003"
  " \003(\0132\035.clarifai.api.ConceptLanguage\022\016\n\006a"
  "ction\030\004 \001(\t\"\234\001\n\033PostConceptLanguagesRequ"
  "est\022/\n\013user_app_id\030\001 \001(\0132\032.clarifai.api."
  "UserAppIDSet\022\022\n\nconcept_id\030\002 \001(\t\0228\n\021conc"
  "ept_languages\030\003 \003(\0132\035.clarifai.api.Conce"
  "ptLanguage\"\205\001\n\035SingleConceptLanguageResp"
  "onse\022+\n\006status\030\001 \001(\0132\033.clarifai.api.stat"
  "us.Status\0227\n\020concept_language\030\002 \001(\0132\035.cl"
  "arifai.api.ConceptLanguage\"\213\001\n\034MultiConc"
  "eptLanguageResponse\022+\n\006status\030\001 \001(\0132\033.cl"
  "arifai.api.status.Status\022>\n\021concept_lang"
  "uages\030\002 \003(\0132\035.clarifai.api.ConceptLangua"
  "geB\004\200\265\030\001\"\203\001\n\034ListConceptReferencesReques"
  "t\022/\n\013user_app_id\030\001 \001(\0132\032.clarifai.api.Us"
  "erAppIDSet\022\022\n\nconcept_id\030\002 \001(\t\022\014\n\004page\030\003"
  " \001(\r\022\020\n\010per_page\030\004 \001(\r\"\210\001\n\036SingleConcept"
  "ReferenceResponse\022+\n\006status\030\001 \001(\0132\033.clar"
  "ifai.api.status.Status\0229\n\021concept_refere"
  "nce\030\002 \001(\0132\036.clarifai.api.ConceptReferenc"
  "e\"\216\001\n\035MultiConceptReferenceResponse\022+\n\006s"
  "tatus\030\001 \001(\0132\033.clarifai.api.status.Status"
  "\022@\n\022concept_references\030\002 \003(\0132\036.clarifai."
  "api.ConceptReferenceB\004\200\265\030\001\"\023\n\021GetHealthz"
  "Request\"O\n\022GetHealthzResponse\022+\n\006status\030"
  "\001 \001(\0132\033.clarifai.api.status.Status\022\014\n\004ti"
  "me\030\002 \001(\t\"T\n\017GetInputRequest\022/\n\013user_app_"
  "id\030\001 \001(\0132\032.clarifai.api.UserAppIDSet\022\020\n\010"
  "input_id\030\002 \001(\t\"\236\001\n\021ListInputsRequest\022/\n\013"
  "user_app_id\030\001 \001(\0132\032.clarifai.api.UserApp"
  "IDSet\022\014\n\004page\030\002 \001(\r\022\020\n\010per_page\030\003 \001(\r\022+\n"
  "\006status\030\005 \001(\0132\033.clarifai.api.status.Stat"
  "us\022\013\n\003ids\030\004 \003(\t\"}\n\023StreamInputsRequest\022/"
  "\n\013user_app_id\030\001 \001(\0132\032.clarifai.api.UserA"
  "ppIDSet\022\020\n\010per_page\030\002 \001(\r\022\017\n\007last_id\030\003 \001"
  "(\t\022\022\n\ndescending\030\004 \001(\010\"i\n\021PostInputsRequ"
  "est\022/\n\013user_app_id\030\001 \001(\0132\032.clarifai.api."
  "UserAppIDSet\022#\n\006inputs\030\002 \003(\0132\023.clarifai."
  "api.Input\"g\n\025PostInputsFileRequest\022/\n\013us"
  "er_app_id\030\001 \001(\0132\032.clarifai.api.UserAppID"
  "Set\022\013\n\003url\030\002 \001(\t\022\020\n\010filetype\030\003 \001(\t\"\314\001\n\025P"
  "ostInputsNiFiRequest\022/\n\013user_app_id\030\001 \001("
  "\0132\032.clarifai.api.UserAppIDSet\022(\n\004urls\030\002 "
  "\001(\0132\032.google.protobuf.ListValue\022)\n\010metad"
  "ata\030\003 \001(\0132\027.google.protobuf.Struct\022\'\n\006pa"
  "rams\030\004 \001(\0132\027.google.protobuf.Struct:\004\240\234\'"
  "\001\"z\n\022PatchInputsRequest\022/\n\013user_app_id\030\001"
  " \001(\0132\032.clarifai.api.UserAppIDSet\022#\n\006inpu"
  "ts\030\002 \003(\0132\023.clarifai.api.Input\022\016\n\006action\030"
  "\003 \001(\t\"W\n\022DeleteInputRequest\022/\n\013user_app_"
  "id\030\001 \001(\0132\032.clarifai.api.UserAppIDSet\022\020\n\010"
  "input_id\030\002 \001(\t\"g\n\023DeleteInputsRequest\022/\n"
  "\013user_app_id\030\001 \001(\0132\032.clarifai.api.UserAp"
  "pIDSet\022\013\n\003ids\030\002 \003(\t\022\022\n\ndelete_all\030\003 \001(\010\""
  "f\n\023SingleInputResponse\022+\n\006status\030\001 \001(\0132\033"
  ".clarifai.api.status.Status\022\"\n\005input\030\002 \001"
  "(\0132\023.clarifai.api.Input\"l\n\022MultiInputRes"
  "ponse\022+\n\006status\030\001 \001(\0132\033.clarifai.api.sta"
  "tus.Status\022)\n\006inputs\030\002 \003(\0132\023.clarifai.ap"
  "i.InputB\004\200\265\030\001\"q\n\030SingleInputCountRespons"
  "e\022+\n\006status\030\001 \001(\0132\033.clarifai.api.status."
  "Status\022(\n\006counts\030\002 \001(\0132\030.clarifai.api.In"
  "putCount\"G\n\024GetInputCountRequest\022/\n\013user"
  "_app_id\030\001 \001(\0132\032.clarifai.api.UserAppIDSe"
  "t\"\271\001\n\027PostModelOutputsRequest\022/\n\013user_ap"
  "p_id\030\001 \001(\0132\032.clarifai.api.UserAppIDSet\022\020"
  "\n\010model_id\030\002 \001(\t\022\022\n\nversion_id\030\003 \001(\t\022#\n\006"
  "inputs\030\004 \003(\0132\023.clarifai.api.Input\022\"\n\005mod"
  "el\030\005 \001(\0132\023.clarifai.api.Model\"\217\001\n\026ListMo"
  "delInputsRequest\022/\n\013user_app_id\030\001 \001(\0132\032."
  "clarifai.api.UserAppIDSet\022\020\n\010model_id\030\002 "
  "\001(\t\022\022\n\nversion_id\030\003 \001(\t\022\014\n\004page\030\004 \001(\r\022\020\n"
  "\010per_page\030\005 \001(\r\"P\n\rGetKeyRequest\022/\n\013user"
  "_app_id\030\001 \001(\0132\032.clarifai.api.UserAppIDSe"
  "t\022\016\n\006key_id\030\002 \001(\t\"b\n\017ListKeysRequest\022/\n\013"
  "user_app_id\030\001 \001(\0132\032.clarifai.api.UserApp"
  "IDSet\022\014\n\004page\030\002 \001(\r\022\020\n\010per_page\030\003 \001(\r\"e\n"
  "\022ListAppKeysRequest\022/\n\013user_app_id\030\001 \001(\013"
  "2\032.clarifai.api.UserAppIDSet\022\014\n\004page\030\002 \001"
  "(\r\022\020\n\010per_page\030\003 \001(\r\"c\n\017PostKeysRequest\022"
  "/\n\013user_app_id\030\001 \001(\0132\032.clarifai.api.User"
  "AppIDSet\022\037\n\004keys\030\002 \003(\0132\021.clarifai.api.Ke"
  "y\"S\n\020DeleteKeyRequest\022/\n\013user_app_id\030\001 \001"
  "(\0132\032.clarifai.api.UserAppIDSet\022\016\n\006key_id"
  "\030\002 \001(\t\"t\n\020PatchKeysRequest\022/\n\013user_app_i"
  "d\030\001 \001(\0132\032.clarifai.api.UserAppIDSet\022\037\n\004k"
  "eys\030\002 \003(\0132\021.clarifai.api.Key\022\016\n\006action\030\003"
  " \001(\t\"`\n\021SingleKeyResponse\022+\n\006status\030\001 \001("
  "\0132\033.clarifai.api.status.Status\022\036\n\003key\030\002 "
  "\001(\0132\021.clarifai.api.Key\"f\n\020MultiKeyRespon"
  "se\022+\n\006status\030\001 \001(\0132\033.clarifai.api.status"
  ".Status\022%\n\004keys\030\002 \003(\0132\021.clarifai.api.Key"
  "B\004\200\265\030\001\"P\n\023FetchLicenseRequest\022\022\n\nlicense"
  "_id\030\001 \001(\t\022\022\n\npublic_key\030\002 \001(\t\022\021\n\tsignatu"
  "re\030\003 \001(\014\"\265\001\n\024FetchLicenseResponse\022+\n\006sta"
  "tus\030\001 \001(\0132\033.clarifai.api.status.Status\022\027"
  "\n\017encrypted_bytes\030\002 \001(\014\0220\n\014activated_at\030"
  "\003 \001(\0132\032.google.protobuf.Timestamp\022\022\n\npub"
  "lic_key\030\004 \001(\t\022\021\n\tsignature\030\005 \001(\014\"\231\001\n\026Val"
  "idateLicenseRequest\022\022\n\nlicense_id\030\001 \001(\t\022"
  "\022\n\nrequest_id\030\002 \001(\t\0220\n\014activated_at\030\003 \001("
  "\0132\032.google.protobuf.Timestamp\022\022\n\npublic_"
  "key\030\004 \001(\t\022\021\n\tsignature\030\005 \001(\014\"\231\001\n\027Validat"
  "eLicenseResponse\022+\n\006status\030\001 \001(\0132\033.clari"
  "fai.api.status.Status\022\022\n\nrequest_id\030\002 \001("
  "\t\022*\n\006limits\030\003 \003(\0132\032.clarifai.api.License"
  "Limit\022\021\n\tsignature\030\004 \001(\014\"F\n\023ListLicenses"
  "Request\022/\n\013user_app_id\030\001 \001(\0132\032.clarifai."
  "api.UserAppIDSet\"X\n\021GetLicenseRequest\022/\n"
  "\013user_app_id\030\001 \001(\0132\032.clarifai.api.UserAp"
  "pIDSet\022\022\n\nlicense_id\030\002 \001(\t\"l\n\025SingleLice"
  "nseResponse\022+\n\006status\030\001 \001(\0132\033.clarifai.a"
  "pi.status.Status\022&\n\007license\030\002 \001(\0132\025.clar"
  "ifai.api.License\"v\n\030MultipleLicensesResp"
  "onse\022+\n\006status\030\001 \001(\0132\033.clarifai.api.stat"
  "us.Status\022-\n\010licenses\030\002 \003(\0132\025.clarifai.a"
  "pi.LicenseB\004\200\265\030\001\"\222\001\n\017GetModelRequest\022/\n\013"
  "user_app_id\030\001 \001(\0132\032.clarifai.api.UserApp"
  "IDSet\022\020\n\010model_id\030\002 \001(\t\022\022\n\nversion_id\030\003 "
  "\001(\t\022\020\n\010language\030\004 \001(\t\022\026\n\016trained_before\030"
  "\005 \001(\010\"r\n\031GetModelOutputInfoRequest\022/\n\013us"
  "er_app_id\030\001 \001(\0132\032.clarifai.api.UserAppID"
  "Set\022\020\n\010model_id\030\002 \001(\t\022\022\n\nversion_id\030\003 \001("
  "\t\"q\n\021ListModelsRequest\022/\n\013user_app_id\030\001 "
  "\001(\0132\032.clarifai.api.UserAppIDSet\022\014\n\004page\030"
  "\002 \001(\r\022\020\n\010per_page\030\003 \001(\r\022\013\n\003ids\030\004 \003(\t\"\221\001\n"
  "\021PostModelsRequest\022/\n\013user_app_id\030\001 \001(\0132"
  "\032.clarifai.api.UserAppIDSet\022&\n\005model\030\002 \001"
  "(\0132\023.clarifai.api.ModelB\002\030\001\022#\n\006models\030\003 "
  "\003(\0132\023.clarifai.api.Model\"z\n\022PatchModelsR"
  "equest\022/\n\013user_app_id\030\001 \001(\0132\032.clarifai.a"
  "pi.UserAppIDSet\022#\n\006models\030\002 \003(\0132\023.clarif"
  "ai.api.Model\022\016\n\006action\030\003 \001(\t\"W\n\022DeleteMo"
  "delRequest\022/\n\013user_app_id\030\001 \001(\0132\032.clarif"
  "ai.api.UserAppIDSet\022\020\n\010model_id\030\002 \001(\t\"g\n"
  "\023DeleteModelsRequest\022/\n\013user_app_id\030\001 \001("
  "\0132\032.clarifai.api.UserAppIDSet\022\013\n\003ids\030\002 \003"
  "(\t\022\022\n\ndelete_all\030\003 \001(\010\"\251\001\n\031PostModelsSea"
  "rchesRequest\022/\n\013user_app_id\030\001 \001(\0132\032.clar"
  "ifai.api.UserAppIDSet\022-\n\013model_query\030\002 \001"
  "(\0132\030.clarifai.api.ModelQuery\022,\n\npaginati"
  "on\030\003 \001(\0132\030.clarifai.api.Pagination\"f\n\023Si"
  "ngleModelResponse\022+\n\006status\030\001 \001(\0132\033.clar"
  "ifai.api.status.Status\022\"\n\005model\030\002 \001(\0132\023."
  "clarifai.api.Model\"l\n\022MultiModelResponse"
  "\022+\n\006status\030\001 \001(\0132\033.clarifai.api.status.S"
  "tatus\022)\n\006models\030\002 \003(\0132\023.clarifai.api.Mod"
  "elB\004\200\265\030\001\"o\n\026GetModelVersionRequest\022/\n\013us"
  "er_app_id\030\001 \001(\0132\032.clarifai.api.UserAppID"
  "Set\022\020\n\010model_id\030\002 \001(\t\022\022\n\nversion_id\030\003 \001("
  "\t\"\222\001\n\030ListModelVersionsRequest\022/\n\013user_a"
  "pp_id\030\001 \001(\0132\032.clarifai.api.UserAppIDSet\022"
  "\020\n\010model_id\030\002 \001(\t\022\014\n\004page\030\003 \001(\r\022\020\n\010per_p"
  "age\030\004 \001(\r\022\023\n\013concept_ids\030\005 \003(\t\"r\n\031Delete"
  "ModelVersionRequest\022/\n\013user_app_id\030\001 \001(\013"
  "2\032.clarifai.api.UserAppIDSet\022\020\n\010model_id"
  "\030\003 \001(\t\022\022\n\nversion_id\030\004 \001(\t\"|\n\032SingleMode"
  "lVersionResponse\022+\n\006status\030\001 \001(\0132\033.clari"
  "fai.api.status.Status\0221\n\rmodel_version\030\002"
  " \001(\0132\032.clarifai.api.ModelVersion\"\202\001\n\031Mul"
  "tiModelVersionResponse\022+\n\006status\030\001 \001(\0132\033"
  ".clarifai.api.status.Status\0228\n\016model_ver"
  "sions\030\002 \003(\0132\032.clarifai.api.ModelVersionB"
  "\004\200\265\030\001\"\263\002\n\030PostModelVersionsRequest\022/\n\013us"
  "er_app_id\030\001 \001(\0132\032.clarifai.api.UserAppID"
  "Set\022\020\n\010model_id\030\002 \001(\t\0222\n\016model_versions\030"
  "\003 \003(\0132\032.clarifai.api.ModelVersion\022(\n\006sea"
  "rch\030\004 \001(\0132\024.clarifai.api.SearchB\002\030\001\022*\n\014t"
  "rain_search\030\005 \001(\0132\024.clarifai.api.Search\022"
  ")\n\013test_search\030\006 \001(\0132\024.clarifai.api.Sear"
  "ch\022\037\n\027evaluate_after_training\030\007 \001(\010\"\270\001\n\036"
  "PostModelVersionMetricsRequest\022/\n\013user_a"
  "pp_id\030\001 \001(\0132\032.clarifai.api.UserAppIDSet\022"
  "\020\n\010model_id\030\002 \001(\t\022\022\n\nversion_id\030\003 \001(\t\022\024\n"
  "\014max_examples\030\004 \001(\r\022)\n\013test_search\030\005 \001(\013"
  "2\024.clarifai.api.Search\"|\n\"PostModelVersi"
  "onsDeploymentRequest\022/\n\013user_app_id\030\001 \001("
  "\0132\032.clarifai.api.UserAppIDSet\022\020\n\010model_i"
  "d\030\002 \001(\t\022\023\n\013version_ids\030\003 \003(\t\"~\n$DeleteMo"
  "delVersionsDeploymentRequest\022/\n\013user_app"
  "_id\030\001 \001(\0132\032.clarifai.api.UserAppIDSet\022\020\n"
  "\010model_id\030\002 \001(\t\022\023\n\013version_ids\030\003 \003(\t\"\241\001\n"
  "\035GetModelVersionMetricsRequest\022/\n\013user_a"
  "pp_id\030\001 \001(\0132\032.clarifai.api.UserAppIDSet\022"
  "\020\n\010model_id\030\002 \001(\t\022\022\n\nversion_id\030\003 \001(\t\022)\n"
  "\006fields\030\004 \001(\0132\031.clarifai.api.FieldsValue"
  "\"o\n\023MultiOutputResponse\022+\n\006status\030\001 \001(\0132"
  "\033.clarifai.api.status.Status\022+\n\007outputs\030"
  "\002 \003(\0132\024.clarifai.api.OutputB\004\200\265\030\001\"%\n\021Lis"
  "tScopesRequest\022\020\n\010key_type\030\001 \001(\t\"B\n\017MySc"
  "opesRequest\022/\n\013user_app_id\030\001 \001(\0132\032.clari"
  "fai.api.UserAppIDSet\"\245\001\n\026MultiScopeDepsR"
  "esponse\022+\n\006status\030\001 \001(\0132\033.clarifai.api.s"
  "tatus.Status\022+\n\nscope_deps\030\002 \003(\0132\027.clari"
  "fai.api.ScopeDeps\0221\n\rendpoint_deps\030\003 \003(\013"
  "2\032.clarifai.api.EndpointDeps\"\204\001\n\022MultiSc"
  "opeResponse\022+\n\006status\030\001 \001(\0132\033.clarifai.a"
  "pi.status.Status\022\016\n\006scopes\030\002 \003(\t\022\036\n\003app\030"
  "\003 \001(\0132\021.clarifai.api.App\022\021\n\tendpoints\030\004 "
  "\003(\t\"O\n\020GetSearchRequest\022/\n\013user_app_id\030\001"
  " \001(\0132\032.clarifai.api.UserAppIDSet\022\n\n\002id\030\002"
  " \001(\t\"f\n\023ListSearchesRequest\022/\n\013user_app_"
  "id\030\001 \001(\0132\032.clarifai.api.UserAppIDSet\022\014\n\004"
  "page\030\002 \001(\r\022\020\n\010per_page\030\003 \001(\r\"\304\001\n\023PostSea"
  "rchesRequest\022/\n\013user_app_id\030\001 \001(\0132\032.clar"
  "ifai.api.UserAppIDSet\022&\n\005query\030\002 \001(\0132\023.c"
  "larifai.api.QueryB\002\030\001\022&\n\010searches\030\003 \003(\0132"
  "\024.clarifai.api.Search\022,\n\npagination\030\004 \001("
  "\0132\030.clarifai.api.Pagination\"\204\001\n\027PostSear"
  "chesByIDRequest\022/\n\013user_app_id\030\001 \001(\0132\032.c"
  "larifai.api.UserAppIDSet\022\n\n\002id\030\002 \001(\t\022,\n\n"
  "pagination\030\003 \001(\0132\030.clarifai.api.Paginati"
  "on\"R\n\023DeleteSearchRequest\022/\n\013user_app_id"
  "\030\001 \001(\0132\032.clarifai.api.UserAppIDSet\022\n\n\002id"
  "\030\002 \001(\t\"\332\001\n\032PostAttributeSearchRequest\022/\n"
  "\013user_app_id\030\001 \001(\0132\032.clarifai.api.UserAp"
  "pIDSet\022,\n\npagination\030\003 \001(\0132\030.clarifai.ap"
  "i.Pagination\022\023\n\013brute_force\030\004 \001(\010\0225\n\017att"
  "ribute_query\030\005 \001(\0132\034.clarifai.api.Attrib"
  "uteQuery\022\021\n\tmin_value\030\006 \001(\002\"\247\001\n\036PostAnno"
  "tationsSearchesRequest\022/\n\013user_app_id\030\001 "
  "\001(\0132\032.clarifai.api.UserAppIDSet\022&\n\010searc"
  "hes\030\002 \003(\0132\024.clarifai.api.Search\022,\n\npagin"
  "ation\030\003 \001(\0132\030.clarifai.api.Pagination\"\242\001"
  "\n\031PostInputsSearchesRequest\022/\n\013user_app_"
  "id\030\001 \001(\0132\032.clarifai.api.UserAppIDSet\022&\n\010"
  "searches\030\002 \003(\0132\024.clarifai.api.Search\022,\n\n"
  "pagination\030\003 \001(\0132\030.clarifai.api.Paginati"
  "on\"i\n\024SingleSearchResponse\022+\n\006status\030\001 \001"
  "(\0132\033.clarifai.api.status.Status\022$\n\006searc"
  "h\030\005 \001(\0132\024.clarifai.api.Search\"\301\001\n\023MultiS"
  "earchResponse\022+\n\006status\030\001 \001(\0132\033.clarifai"
  ".api.status.Status\022\n\n\002id\030\002 \001(\t\022%\n\004hits\030\003"
  " \003(\0132\021.clarifai.api.HitB\004\200\265\030\001\022\"\n\005query\030\004"
  " \001(\0132\023.clarifai.api.Query\022&\n\010searches\030\005 "
  "\003(\0132\024.clarifai.api.Search\"\224\002\n\"PostAnnota"
  "tionSearchMetricsRequest\022/\n\013user_app_id\030"
  "\001 \001(\0132\032.clarifai.api.UserAppIDSet\022\n\n\002id\030"
  "\002 \001(\t\022*\n\014ground_truth\030\003 \001(\0132\024.clarifai.a"
  "pi.Search\022,\n\016search_to_eval\030\004 \001(\0132\024.clar"
  "ifai.api.Search\022 \n\004data\030\005 \001(\0132\022.clarifai"
  ".api.Data\0225\n\017evaluation_type\030\006 \001(\0162\034.cla"
  "rifai.api.EvaluationType\"`\n!GetAnnotatio"
  "nSearchMetricsRequest\022/\n\013user_app_id\030\001 \001"
  "(\0132\032.clarifai.api.UserAppIDSet\022\n\n\002id\030\002 \001"
  "(\t\"U\n\"ListAnnotationSearchMetricsRequest"
  "\022/\n\013user_app_id\030\001 \001(\0132\032.clarifai.api.Use"
  "rAppIDSet\"\235\001\n$MultiAnnotationSearchMetri"
  "csResponse\022+\n\006status\030\001 \001(\0132\033.clarifai.ap"
  "i.status.Status\022H\n\031annotation_search_met"
  "rics\030\002 \003(\0132%.clarifai.api.AnnotationSear"
  "chMetrics\"\224\001\n\023ListClustersRequest\022/\n\013use"
  "r_app_id\030\001 \001(\0132\032.clarifai.api.UserAppIDS"
  "et\022\013\n\003ids\030\002 \003(\t\022\014\n\004page\030\003 \001(\r\022\020\n\010per_pag"
  "e\030\004 \001(\r\022\037\n\027annotations_per_cluster\030\005 \001(\r"
  "\"\207\001\n ListAnnotationsForClusterRequest\022/\n"
  "\013user_app_id\030\001 \001(\0132\032.clarifai.api.UserAp"
  "pIDSet\022\022\n\ncluster_id\030\002 \001(\t\022\014\n\004page\030\003 \001(\r"
  "\022\020\n\010per_page\030\004 \001(\r\"\244\001\n\033PostClustersSearc"
  "hesRequest\022/\n\013user_app_id\030\001 \001(\0132\032.clarif"
  "ai.api.UserAppIDSet\022&\n\010searches\030\002 \003(\0132\024."
  "clarifai.api.Search\022,\n\npagination\030\003 \001(\0132"
  "\030.clarifai.api.Pagination\"\232\001\n\024MultiClust"
  "erResponse\022+\n\006status\030\001 \001(\0132\033.clarifai.ap"
  "i.status.Status\022-\n\010clusters\030\002 \003(\0132\025.clar"
  "ifai.api.ClusterB\004\200\265\030\001\022&\n\010searches\030\003 \003(\013"
  "2\024.clarifai.api.Search\"\030\n\026GetSubscriptio"
  "nRequest\"P\n\027PostSubscriptionRequest\022\023\n\013s"
  "ignup_code\030\001 \001(\t\022 \n\004plan\030\002 \001(\0132\022.clarifa"
  "i.api.Plan\"\200\001\n\032SingleSubscriptionRespons"
  "e\022+\n\006status\030\001 \001(\0132\033.clarifai.api.status."
  "Status\022 \n\004plan\030\002 \001(\0132\022.clarifai.api.Plan"
  "\022\023\n\013signup_code\030\003 \001(\t\"I\n\026ListCreditCards"
  "Request\022/\n\013user_app_id\030\001 \001(\0132\032.clarifai."
  "api.UserAppIDSet\"r\n\032MultipleCreditCardRe"
  "sponse\022+\n\006status\030\001 \001(\0132\033.clarifai.api.st"
  "atus.Status\022\'\n\005cards\030\002 \003(\0132\030.clarifai.ap"
  "i.CreditCard\"\200\001\n\025PostCreditCardRequest\022/"
  "\n\013user_app_id\030\001 \001(\0132\032.clarifai.api.UserA"
  "ppIDSet\022\016\n\006source\030\002 \001(\t\022&\n\004card\030\003 \001(\0132\030."
  "clarifai.api.CreditCard\"o\n\030SingleCreditC"
  "ardResponse\022+\n\006status\030\001 \001(\0132\033.clarifai.a"
  "pi.status.Status\022&\n\004card\030\002 \001(\0132\030.clarifa"
  "i.api.CreditCard\"r\n\027DeleteCreditCardRequ"
  "est\022/\n\013user_app_id\030\001 \001(\0132\032.clarifai.api."
  "UserAppIDSet\022&\n\004card\030\002 \001(\0132\030.clarifai.ap"
  "i.CreditCard\"\236\001\n\027PatchCreditCardsRequest"
  "\022/\n\013user_app_id\030\001 \001(\0132\032.clarifai.api.Use"
  "rAppIDSet\022\'\n\005cards\030\002 \003(\0132\030.clarifai.api."
  "CreditCard\022)\n\006action\030\003 \001(\0132\031.clarifai.ap"
  "i.PatchAction\"M\n\032PostHistoricalUsageRequ"
  "est\022/\n\013user_app_id\030\001 \001(\0132\032.clarifai.api."
  "UserAppIDSet\"\251\001\n\033PostHistoricalUsageResp"
  "onse\022+\n\006status\030\001 \001(\0132\033.clarifai.api.stat"
  "us.Status\022+\n\010interval\030\002 \001(\0132\031.google.pro"
  "tobuf.Duration\0220\n\005usage\030\003 \003(\0132\033.clarifai"
  ".api.DimensionListB\004\200\265\030\001\"J\n\027GetRealtimeU"
  "sageRequest\022/\n\013user_app_id\030\001 \001(\0132\032.clari"
  "fai.api.UserAppIDSet\"|\n\030GetRealtimeUsage"
  "Response\022+\n\006status\030\001 \001(\0132\033.clarifai.api."
  "status.Status\0223\n\016realtime_usage\030\004 \003(\0132\033."
  "clarifai.api.RealtimeCount\"\033\n\031ListUsageI"
  "ntervalsRequest\"\177\n\032ListUsageIntervalsRes"
  "ponse\022+\n\006status\030\001 \001(\0132\033.clarifai.api.sta"
  "tus.Status\0224\n\017usage_intervals\030\002 \003(\0132\033.cl"
  "arifai.api.UsageInterval\"o\n\034ListUserBill"
  "ingCyclesRequest\022/\n\013user_app_id\030\001 \001(\0132\032."
  "clarifai.api.UserAppIDSet\022\014\n\004page\030\002 \001(\r\022"
  "\020\n\010per_page\030\003 \001(\r\"\206\001\n\035ListUserBillingCyc"
  "lesResponse\022+\n\006status\030\001 \001(\0132\033.clarifai.a"
  "pi.status.Status\0228\n\016billing_cycles\030\002 \003(\013"
  "2\032.clarifai.api.BillingCycleB\004\200\265\030\001\"\246\001\n\020P"
  "ostUsageRequest\022/\n\013user_app_id\030\001 \001(\0132\032.c"
  "larifai.api.UserAppIDSet\022:\n\022events_colle"
  "ctions\030\002 \003(\0132\036.clarifai.api.EventsCollec"
  "tion\022\022\n\npublic_key\030\003 \001(\t\022\021\n\tsignature\030\004 "
  "\001(\014\"@\n\021PostUsageResponse\022+\n\006status\030\001 \001(\013"
  "2\033.clarifai.api.status.Status\"A\n\016GetUser"
  "Request\022/\n\013user_app_id\030\001 \001(\0132\032.clarifai."
  "api.UserAppIDSet\"j\n\026PostUserConsentReque"
  "st\022/\n\013user_app_id\030\001 \001(\0132\032.clarifai.api.U"
  "serAppIDSet\022\017\n\007consent\030\002 \001(\010\022\016\n\006fields\030\003"
  " \003(\t\"c\n\022SingleUserResponse\022+\n\006status\030\001 \001"
  "(\0132\033.clarifai.api.status.Status\022 \n\004user\030"
  "\002 \001(\0132\022.clarifai.api.User\"i\n\021MultiUserRe"
  "sponse\022+\n\006status\030\001 \001(\0132\033.clarifai.api.st"
  "atus.Status\022\'\n\005users\030\002 \003(\0132\022.clarifai.ap"
  "i.UserB\004\200\265\030\001\"\351\001\n\020PatchUserRequest\022/\n\013use"
  "r_app_id\030\001 \001(\0132\032.clarifai.api.UserAppIDS"
  "et\022$\n\004info\030\002 \001(\0132\026.clarifai.api.UserInfo"
  "\022(\n\004pass\030\003 \001(\0132\032.clarifai.api.UserPasswo"
  "rd\022)\n\010metadata\030\004 \001(\0132\027.google.protobuf.S"
  "truct\022)\n\006action\030\005 \001(\0132\031.clarifai.api.Pat"
  "chAction\"T\n\021PostEmailsRequest\022/\n\013user_ap"
  "p_id\030\001 \001(\0132\032.clarifai.api.UserAppIDSet\022\016"
  "\n\006emails\030\002 \003(\t\"m\n\023SingleEmailResponse\022+\n"
  "\006status\030\001 \001(\0132\033.clarifai.api.status.Stat"
  "us\022)\n\005email\030\002 \001(\0132\032.clarifai.api.EmailAd"
  "dress\"p\n\025MultipleEmailResponse\022+\n\006status"
  "\030\001 \001(\0132\033.clarifai.api.status.Status\022*\n\006e"
  "mails\030\002 \003(\0132\032.clarifai.api.EmailAddress\""
  "D\n\021ListEmailsRequest\022/\n\013user_app_id\030\001 \001("
  "\0132\032.clarifai.api.UserAppIDSet\"Y\n\027PostRes"
  "endVerifyRequest\022/\n\013user_app_id\030\001 \001(\0132\032."
  "clarifai.api.UserAppIDSet\022\r\n\005email\030\002 \001(\t"
  "\"I\n\032SingleResendVerifyResponse\022+\n\006status"
  "\030\001 \001(\0132\033.clarifai.api.status.Status\"T\n\022D"
  "eleteEmailRequest\022/\n\013user_app_id\030\001 \001(\0132\032"
  ".clarifai.api.UserAppIDSet\022\r\n\005email\030\002 \001("
  "\t\"Y\n\027PostPrimaryEmailRequest\022/\n\013user_app"
  "_id\030\001 \001(\0132\032.clarifai.api.UserAppIDSet\022\r\n"
  "\005email\030\002 \001(\t\"x\n\033PostValidatePasswordRequ"
  "est\022/\n\013user_app_id\030\001 \001(\0132\032.clarifai.api."
  "UserAppIDSet\022(\n\010password\030\002 \001(\0132\026.clarifa"
  "i.api.Password\"\216\001\n SinglePasswordValidat"
  "ionResponse\022+\n\006status\030\001 \001(\0132\033.clarifai.a"
  "pi.status.Status\022=\n\023password_violations\030"
  "\002 \001(\0132 .clarifai.api.PasswordViolations\""
  "\232\001\n\033ListPasswordPoliciesRequest\022/\n\013user_"
  "app_id\030\001 \001(\0132\032.clarifai.api.UserAppIDSet"
  "\022\020\n\010user_ids\030\002 \003(\t\022\030\n\020organization_ids\030\003"
  " \003(\t\022\014\n\004page\030\004 \001(\r\022\020\n\010per_page\030\005 \001(\r\"\207\001\n"
  "\033PostPasswordPoliciesRequest\022/\n\013user_app"
  "_id\030\001 \001(\0132\032.clarifai.api.UserAppIDSet\0227\n"
  "\021password_policies\030\002 \003(\0132\034.clarifai.api."
  "PasswordPolicy\"\230\001\n\034PatchPasswordPolicies"
  "Request\022/\n\013user_app_id\030\001 \001(\0132\032.clarifai."
  "api.UserAppIDSet\0227\n\021password_policies\030\002 "
  "\003(\0132\034.clarifai.api.PasswordPolicy\022\016\n\006act"
  "ion\030\003 \001(\t\"]\n\035DeletePasswordPoliciesReque"
  "st\022/\n\013user_app_id\030\001 \001(\0132\032.clarifai.api.U"
  "serAppIDSet\022\013\n\003ids\030\002 \003(\t\"\210\001\n MultiplePas"
  "swordPoliciesResponse\022+\n\006status\030\001 \001(\0132\033."
  "clarifai.api.status.Status\0227\n\021password_p"
  "olicies\030\002 \003(\0132\034.clarifai.api.PasswordPol"
  "icy\"T\n\017GetVocabRequest\022/\n\013user_app_id\030\001 "
  "\001(\0132\032.clarifai.api.UserAppIDSet\022\020\n\010vocab"
  "_id\030\002 \001(\t\"d\n\021ListVocabsRequest\022/\n\013user_a"
  "pp_id\030\001 \001(\0132\032.clarifai.api.UserAppIDSet\022"
  "\014\n\004page\030\002 \001(\r\022\020\n\010per_page\030\003 \001(\r\"i\n\021PostV"
  "ocabsRequest\022/\n\013user_app_id\030\001 \001(\0132\032.clar"
  "ifai.api.UserAppIDSet\022#\n\006vocabs\030\002 \003(\0132\023."
  "clarifai.api.Vocab\"z\n\022PatchVocabsRequest"
  "\022/\n\013user_app_id\030\001 \001(\0132\032.clarifai.api.Use"
  "rAppIDSet\022#\n\006vocabs\030\002 \003(\0132\023.clarifai.api"
  ".Vocab\022\016\n\006action\030\003 \001(\t\"W\n\022DeleteVocabReq"
  "uest\022/\n\013user_app_id\030\001 \001(\0132\032.clarifai.api"
  ".UserAppIDSet\022\020\n\010vocab_id\030\002 \001(\t\"g\n\023Delet"
  "eVocabsRequest\022/\n\013user_app_id\030\001 \001(\0132\032.cl"
  "arifai.api.UserAppIDSet\022\013\n\003ids\030\002 \003(\t\022\022\n\n"
  "delete_all\030\003 \001(\010\"}\n\030ListVocabConceptsReq"
  "uest\022/\n\013user_app_id\030\001 \001(\0132\032.clarifai.api"
  ".UserAppIDSet\022\020\n\010vocab_id\030\002 \001(\t\022\014\n\004page\030"
  "\003 \001(\r\022\020\n\010per_page\030\004 \001(\r\"\206\001\n\030PostVocabCon"
  "ceptsRequest\022/\n\013user_app_id\030\001 \001(\0132\032.clar"
  "ifai.api.UserAppIDSet\022\020\n\010vocab_id\030\002 \001(\t\022"
  "\'\n\010concepts\030\003 \003(\0132\025.clarifai.api.Concept"
  "\"r\n\031DeleteVocabConceptRequest\022/\n\013user_ap"
  "p_id\030\001 \001(\0132\032.clarifai.api.UserAppIDSet\022\020"
  "\n\010vocab_id\030\002 \001(\t\022\022\n\nconcept_id\030\003 \001(\t\"\200\001\n"
  "\032DeleteVocabConceptsRequest\022/\n\013user_app_"
  "id\030\001 \001(\0132\032.clarifai.api.UserAppIDSet\022\020\n\010"
  "vocab_id\030\002 \001(\t\022\013\n\003ids\030\003 \003(\t\022\022\n\ndelete_al"
  "l\030\004 \001(\010\"f\n\023SingleVocabResponse\022+\n\006status"
  "\030\001 \001(\0132\033.clarifai.api.status.Status\022\"\n\005v"
  "ocab\030\002 \001(\0132\023.clarifai.api.Vocab\"l\n\022Multi"
  "VocabResponse\022+\n\006status\030\001 \001(\0132\033.clarifai"
  ".api.status.Status\022)\n\006vocabs\030\002 \003(\0132\023.cla"
  "rifai.api.VocabB\004\200\265\030\001\"|\n\022GetWorkflowRequ"
  "est\022/\n\013user_app_id\030\001 \001(\0132\032.clarifai.api."
  "UserAppIDSet\022\023\n\013workflow_id\030\002 \001(\t\022 \n\030fav"
  "or_clarifai_workflows\030\003 \001(\010\"g\n\024ListWorkf"
  "lowsRequest\022/\n\013user_app_id\030\001 \001(\0132\032.clari"
  "fai.api.UserAppIDSet\022\014\n\004page\030\002 \001(\r\022\020\n\010pe"
  "r_page\030\003 \001(\r\"<\n\032ListPublicWorkflowsReque"
  "st\022\014\n\004page\030\001 \001(\r\022\020\n\010per_page\030\002 \001(\r\"r\n\024Po"
  "stWorkflowsRequest\022/\n\013user_app_id\030\001 \001(\0132"
  "\032.clarifai.api.UserAppIDSet\022)\n\tworkflows"
  "\030\002 \003(\0132\026.clarifai.api.Workflow\"\203\001\n\025Patch"
  "WorkflowsRequest\022/\n\013user_app_id\030\001 \001(\0132\032."
  "clarifai.api.UserAppIDSet\022)\n\tworkflows\030\002"
  " \003(\0132\026.clarifai.api.Workflow\022\016\n\006action\030\003"
  " \001(\t\"]\n\025DeleteWorkflowRequest\022/\n\013user_ap"
  "p_id\030\001 \001(\0132\032.clarifai.api.UserAppIDSet\022\023"
  "\n\013workflow_id\030\002 \001(\t\"j\n\026DeleteWorkflowsRe"
  "quest\022/\n\013user_app_id\030\001 \001(\0132\032.clarifai.ap"
  "i.UserAppIDSet\022\013\n\003ids\030\002 \003(\t\022\022\n\ndelete_al"
  "l\030\003 \001(\010\"o\n\026SingleWorkflowResponse\022+\n\006sta"
  "tus\030\001 \001(\0132\033.clarifai.api.status.Status\022("
  "\n\010workflow\030\002 \001(\0132\026.clarifai.api.Workflow"
  "\"u\n\025MultiWorkflowResponse\022+\n\006status\030\001 \001("
  "\0132\033.clarifai.api.status.Status\022/\n\tworkfl"
  "ows\030\002 \003(\0132\026.clarifai.api.WorkflowB\004\200\265\030\001\""
  "\334\001\n\032PostWorkflowResultsRequest\022/\n\013user_a"
  "pp_id\030\001 \001(\0132\032.clarifai.api.UserAppIDSet\022"
  "\023\n\013workflow_id\030\002 \001(\t\022#\n\006inputs\030\003 \003(\0132\023.c"
  "larifai.api.Input\0221\n\routput_config\030\004 \001(\013"
  "2\032.clarifai.api.OutputConfig\022 \n\030favor_cl"
  "arifai_workflows\030\005 \001(\010\"\243\001\n\033PostWorkflowR"
  "esultsResponse\022+\n\006status\030\001 \001(\0132\033.clarifa"
  "i.api.status.Status\022(\n\010workflow\030\002 \001(\0132\026."
  "clarifai.api.Workflow\022-\n\007results\030\003 \003(\0132\034"
  ".clarifai.api.WorkflowResult\"\375\001\n$PostWor"
  "kflowResultsSimilarityRequest\022/\n\013user_ap"
  "p_id\030\001 \001(\0132\032.clarifai.api.UserAppIDSet\022\023"
  "\n\013workflow_id\030\002 \001(\t\022\030\n\020model_version_id\030"
  "\003 \001(\t\022)\n\014probe_inputs\030\004 \003(\0132\023.clarifai.a"
  "pi.Input\022(\n\013pool_inputs\030\005 \003(\0132\023.clarifai"
  ".api.Input\022 \n\030favor_clarifai_workflows\030\006"
  " \001(\010\"\216\001\n%PostWorkflowResultsSimilarityRe"
  "sponse\022+\n\006status\030\001 \001(\0132\033.clarifai.api.st"
  "atus.Status\0228\n\007results\030\002 \003(\0132\'.clarifai."
  "api.WorkflowResultsSimilarity\"w\n\020Trainin"
  "gTemplate\022\014\n\004name\030\001 \001(\t\022-\n\014default_args\030"
  "\002 \001(\0132\027.google.protobuf.Struct\022\022\n\ndoc_st"
  "ring\030\003 \001(\t\022\022\n\nmodel_type\030\004 \001(\t\"O\n\034ListTr"
  "ainingTemplatesRequest\022/\n\013user_app_id\030\001 "
  "\001(\0132\032.clarifai.api.UserAppIDSet\"\210\001\n\036Mult"
  "iTrainingTemplatesResponse\022+\n\006status\030\001 \001"
  "(\0132\033.clarifai.api.status.Status\0229\n\021train"
  "ing_template\030\002 \003(\0132\036.clarifai.api.Traini"
  "ngTemplate\"\205\001\n\032PostAppDuplicationsReques"
  "t\022/\n\013user_app_id\030\001 \001(\0132\032.clarifai.api.Us"
  "erAppIDSet\0226\n\020app_duplications\030\002 \003(\0132\034.c"
  "larifai.api.AppDuplication\"g\n\030GetAppDupl"
  "icationRequest\022/\n\013user_app_id\030\001 \001(\0132\032.cl"
  "arifai.api.UserAppIDSet\022\032\n\022app_duplicati"
  "on_id\030\002 \001(\t\"M\n\032ListAppDuplicationsReques"
  "t\022/\n\013user_app_id\030\001 \001(\0132\032.clarifai.api.Us"
  "erAppIDSet\"\203\001\n\034MultiAppDuplicationsRespo"
  "nse\022+\n\006status\030\001 \001(\0132\033.clarifai.api.statu"
  "s.Status\0226\n\020app_duplications\030\002 \003(\0132\034.cla"
  "rifai.api.AppDuplication\"\202\001\n\034SingleAppDu"
  "plicationResponse\022+\n\006status\030\001 \001(\0132\033.clar"
  "ifai.api.status.Status\0225\n\017app_duplicatio"
  "n\030\002 \001(\0132\034.clarifai.api.AppDuplication\"f\n"
  "\020PostTasksRequest\022/\n\013user_app_id\030\001 \001(\0132\032"
  ".clarifai.api.UserAppIDSet\022!\n\005tasks\030\002 \003("
  "\0132\022.clarifai.api.Task\"R\n\016GetTaskRequest\022"
  "/\n\013user_app_id\030\001 \001(\0132\032.clarifai.api.User"
  "AppIDSet\022\017\n\007task_id\030\002 \001(\t\"c\n\020ListTasksRe"
  "quest\022/\n\013user_app_id\030\001 \001(\0132\032.clarifai.ap"
  "i.UserAppIDSet\022\014\n\004page\030\002 \001(\r\022\020\n\010per_page"
  "\030\003 \001(\r\"w\n\021PatchTasksRequest\022/\n\013user_app_"
  "id\030\001 \001(\0132\032.clarifai.api.UserAppIDSet\022!\n\005"
  "tasks\030\002 \003(\0132\022.clarifai.api.Task\022\016\n\006actio"
  "n\030\003 \001(\t\"R\n\022DeleteTasksRequest\022/\n\013user_ap"
  "p_id\030\001 \001(\0132\032.clarifai.api.UserAppIDSet\022\013"
  "\n\003ids\030\002 \003(\t\"i\n\021MultiTaskResponse\022+\n\006stat"
  "us\030\001 \001(\0132\033.clarifai.api.status.Status\022\'\n"
  "\005tasks\030\002 \003(\0132\022.clarifai.api.TaskB\004\200\265\030\001\"c"
  "\n\022SingleTaskResponse\022+\n\006status\030\001 \001(\0132\033.c"
  "larifai.api.status.Status\022 \n\004task\030\002 \001(\0132"
  "\022.clarifai.api.Task\"u\n\025PostCollectorsReq"
  "uest\022/\n\013user_app_id\030\001 \001(\0132\032.clarifai.api"
  ".UserAppIDSet\022+\n\ncollectors\030\002 \003(\0132\027.clar"
  "ifai.api.Collector\"\206\001\n\026PatchCollectorsRe"
  "quest\022/\n\013user_app_id\030\001 \001(\0132\032.clarifai.ap"
  "i.UserAppIDSet\022+\n\ncollectors\030\002 \003(\0132\027.cla"
  "rifai.api.Collector\022\016\n\006action\030\003 \001(\t\"k\n\027D"
  "eleteCollectorsRequest\022/\n\013user_app_id\030\001 "
  "\001(\0132\032.clarifai.api.UserAppIDSet\022\013\n\003ids\030\002"
  " \003(\t\022\022\n\ndelete_all\030\003 \001(\010\"\\\n\023GetCollector"
  "Request\022/\n\013user_app_id\030\001 \001(\0132\032.clarifai."
  "api.UserAppIDSet\022\024\n\014collector_id\030\002 \001(\t\"h"
  "\n\025ListCollectorsRequest\022/\n\013user_app_id\030\001"
  " \001(\0132\032.clarifai.api.UserAppIDSet\022\014\n\004page"
  "\030\002 \001(\r\022\020\n\010per_page\030\003 \001(\r\"r\n\026MultiCollect"
  "orResponse\022+\n\006status\030\001 \001(\0132\033.clarifai.ap"
  "i.status.Status\022+\n\ncollectors\030\002 \003(\0132\027.cl"
  "arifai.api.Collector\"r\n\027SingleCollectorR"
  "esponse\022+\n\006status\030\001 \001(\0132\033.clarifai.api.s"
  "tatus.Status\022*\n\tcollector\030\002 \001(\0132\027.clarif"
  "ai.api.Collector\"v\n\025PostStatValuesReques"
  "t\022/\n\013user_app_id\030\001 \001(\0132\032.clarifai.api.Us"
  "erAppIDSet\022,\n\013stat_values\030\002 \003(\0132\027.clarif"
  "ai.api.StatValue\"y\n\026MultiStatValueRespon"
  "se\022+\n\006status\030\001 \001(\0132\033.clarifai.api.status"
  ".Status\0222\n\013stat_values\030\002 \003(\0132\027.clarifai."
  "api.StatValueB\004\200\265\030\001\"\236\001\n\036PostStatValuesAg"
  "gregateRequest\022/\n\013user_app_id\030\001 \001(\0132\032.cl"
  "arifai.api.UserAppIDSet\022K\n\034stat_value_ag"
  "gregate_queries\030\002 \003(\0132%.clarifai.api.Sta"
  "tValueAggregateQuery\"\234\001\n\037MultiStatValueA"
  "ggregateResponse\022+\n\006status\030\001 \001(\0132\033.clari"
  "fai.api.status.Status\022L\n\034stat_value_aggr"
  "egate_results\030\002 \003(\0132&.clarifai.api.StatV"
  "alueAggregateResult2\237\206\002\n\002V2\022a\n\004Echo\022\031.cl"
  "arifai.api.TestMessage\032\031.clarifai.api.Te"
  "stMessage\"#\202\323\344\223\002\025\"\020/v2/example/echo:\001*\210\234"
  "\'\001\230\234\'\002\022\334\001\n\020GetConceptCounts\022%.clarifai.a"
  "pi.GetConceptCountsRequest\032\'.clarifai.ap"
  "i.MultiConceptCountResponse\"x\202\323\344\223\002b\022I/v2"
  "/users/{user_app_id.user_id}/apps/{user_"
  "app_id.app_id}/concepts/statusZ\025\022\023/v2/co"
  "ncepts/status\230\234\'\002\220\234\'&\220\234\'\013\220\234\'\005\022\320\001\n\nGetCon"
  "cept\022\037.clarifai.api.GetConceptRequest\032#."
  "clarifai.api.SingleConceptResponse\"|\202\323\344\223"
  "\002n\022O/v2/users/{user_app_id.user_id}/apps"
  "/{user_app_id.app_id}/concepts/{concept_"
  "id}Z\033\022\031/v2/concepts/{concept_id}\230\234\'\002\220\234\'\013"
  "\022\271\001\n\014ListConcepts\022!.clarifai.api.ListCon"
  "ceptsRequest\032\".clarifai.api.MultiConcept"
  "Response\"b\202\323\344\223\002T\022B/v2/users/{user_app_id"
  ".user_id}/apps/{user_app_id.app_id}/conc"
  "eptsZ\016\022\014/v2/concepts\230\234\'\002\220\234\'\013\022\352\001\n\024PostCon"
  "ceptsSearches\022).clarifai.api.PostConcept"
  "sSearchesRequest\032\".clarifai.api.MultiCon"
  "ceptResponse\"\202\001\202\323\344\223\002l\"K/v2/users/{user_a"
  "pp_id.user_id}/apps/{user_app_id.app_id}"
  "/concepts/searches:\001*Z\032\"\025/v2/concepts/se"
  "arches:\001*\230\234\'\002\220\234\'\013\220\234\'\017\220\234\'\023\022\303\001\n\014PostConcep"
  "ts\022!.clarifai.api.PostConceptsRequest\032\"."
  "clarifai.api.MultiConceptResponse\"l\202\323\344\223\002"
  "Z\"B/v2/users/{user_app_id.user_id}/apps/"
  "{user_app_id.app_id}/concepts:\001*Z\021\"\014/v2/"
  "concepts:\001*\230\234\'\002\220\234\'\n\220\234\'\013\022\305\001\n\rPatchConcept"
  "s\022\".clarifai.api.PatchConceptsRequest\032\"."
  "clarifai.api.MultiConceptResponse\"l\202\323\344\223\002"
  "Z2B/v2/users/{user_app_id.user_id}/apps/"
  "{user_app_id.app_id}/concepts:\001*Z\0212\014/v2/"
  "concepts:\001*\230\234\'\002\220\234\'\n\220\234\'\013\022\306\001\n\010GetVocab\022\035.c"
  "larifai.api.GetVocabRequest\032!.clarifai.a"
  "pi.SingleVocabResponse\"x\202\323\344\223\002f\022K/v2/user"
  "s/{user_app_id.user_id}/apps/{user_app_i"
  "d.app_id}/vocabs/{vocab_id}Z\027\022\025/v2/vocab"
  "s/{vocab_id}\210\234\'\001\230\234\'\002\220\234\'\013\022\263\001\n\nListVocabs\022"
  "\037.clarifai.api.ListVocabsRequest\032 .clari"
  "fai.api.MultiVocabResponse\"b\202\323\344\223\002P\022@/v2/"
  "users/{user_app_id.user_id}/apps/{user_a"
  "pp_id.app_id}/vocabsZ\014\022\n/v2/vocabs\210\234\'\001\230\234"
  "\'\002\220\234\'\013\022\275\001\n\nPostVocabs\022\037.clarifai.api.Pos"
  "tVocabsRequest\032 .clarifai.api.MultiVocab"
  "Response\"l\202\323\344\223\002V\"@/v2/users/{user_app_id"
  ".user_id}/apps/{user_app_id.app_id}/voca"
  "bs:\001*Z\017\"\n/v2/vocabs:\001*\210\234\'\001\230\234\'\002\220\234\'\n\220\234\'\013\022\277"
  "\001\n\013PatchVocabs\022 .clarifai.api.PatchVocab"
  "sRequest\032 .clarifai.api.MultiVocabRespon"
  "se\"l\202\323\344\223\002V2@/v2/users/{user_app_id.user_"
  "id}/apps/{user_app_id.app_id}/vocabs:\001*Z"
  "\0172\n/v2/vocabs:\001*\210\234\'\001\230\234\'\002\220\234\'\n\220\234\'\013\022\325\001\n\013Del"
  "eteVocab\022 .clarifai.api.DeleteVocabReque"
  "st\032!.clarifai.api.status.BaseResponse\"\200\001"
  "\202\323\344\223\002f*K/v2/users/{user_app_id.user_id}/"
  "apps/{user_app_id.app_id}/vocabs/{vocab_"
  "id}Z\027*\025/v2/vocabs/{vocab_id}\210\234\'\001\230\234\'\002\220\234\'\n"
  "\220\234\'\r\220\234\'\013\022\306\001\n\014DeleteVocabs\022!.clarifai.api"
  ".DeleteVocabsRequest\032!.clarifai.api.stat"
  "us.BaseResponse\"p\202\323\344\223\002V*@/v2/users/{user"
  "_app_id.user_id}/apps/{user_app_id.app_i"
  "d}/vocabs:\001*Z\017*\n/v2/vocabs:\001*\210\234\'\001\230\234\'\002\220\234\'"
  "\n\220\234\'\r\220\234\'\013\022\354\001\n\021ListVocabConcepts\022&.clarif"
  "ai.api.ListVocabConceptsRequest\032\".clarif"
  "ai.api.MultiConceptResponse\"\212\001\202\323\344\223\002x\022T/v"
  "2/users/{user_app_id.user_id}/apps/{user"
  "_app_id.app_id}/vocabs/{vocab_id}/concep"
  "tsZ \022\036/v2/vocabs/{vocab_id}/concepts\210\234\'\001"
  "\230\234\'\002\220\234\'\013\022\366\001\n\021PostVocabConcepts\022&.clarifa"
  "i.api.PostVocabConceptsRequest\032\".clarifa"
  "i.api.MultiConceptResponse\"\224\001\202\323\344\223\002~\"T/v2"
  "/users/{user_app_id.user_id}/apps/{user_"
  "app_id.app_id}/vocabs/{vocab_id}/concept"
  "s:\001*Z#\"\036/v2/vocabs/{vocab_id}/concepts:\001"
  "*\210\234\'\001\230\234\'\002\220\234\'\n\220\234\'\013\022\220\002\n\022DeleteVocabConcept"
  "\022\'.clarifai.api.DeleteVocabConceptReques"
  "t\032!.clarifai.api.status.BaseResponse\"\255\001\202"
  "\323\344\223\002\222\001*a/v2/users/{user_app_id.user_id}/"
  "apps/{user_app_id.app_id}/vocabs/{vocab_"
  "id}/concepts/{concept_id}Z-*+/v2/vocabs/"
  "{vocab_id}/concepts/{concept_id}\210\234\'\001\230\234\'\002"
  "\220\234\'\n\220\234\'\r\220\234\'\013\022\375\001\n\023DeleteVocabConcepts\022(.c"
  "larifai.api.DeleteVocabConceptsRequest\032!"
  ".clarifai.api.status.BaseResponse\"\230\001\202\323\344\223"
  "\002~*T/v2/users/{user_app_id.user_id}/apps"
  "/{user_app_id.app_id}/vocabs/{vocab_id}/"
  "concepts:\001*Z#*\036/v2/vocabs/{vocab_id}/con"
  "cepts:\001*\210\234\'\001\230\234\'\002\220\234\'\n\220\234\'\r\220\234\'\013\022\230\002\n\022GetConc"
  "eptLanguage\022\'.clarifai.api.GetConceptLan"
  "guageRequest\032+.clarifai.api.SingleConcep"
  "tLanguageResponse\"\253\001\202\323\344\223\002\230\001\022d/v2/users/{"
  "user_app_id.user_id}/apps/{user_app_id.a"
  "pp_id}/concepts/{concept_id}/languages/{"
  "language}Z0\022./v2/concepts/{concept_id}/l"
  "anguages/{language}\210\234\'\001\230\234\'\002\220\234\'\013\022\205\002\n\024List"
  "ConceptLanguages\022).clarifai.api.ListConc"
  "eptLanguagesRequest\032*.clarifai.api.Multi"
  "ConceptLanguageResponse\"\225\001\202\323\344\223\002\202\001\022Y/v2/u"
  "sers/{user_app_id.user_id}/apps/{user_ap"
  "p_id.app_id}/concepts/{concept_id}/langu"
  "agesZ%\022#/v2/concepts/{concept_id}/langua"
  "ges\210\234\'\001\230\234\'\002\220\234\'\013\022\217\002\n\024PostConceptLanguages"
  "\022).clarifai.api.PostConceptLanguagesRequ"
  "est\032*.clarifai.api.MultiConceptLanguageR"
  "esponse\"\237\001\202\323\344\223\002\210\001\"Y/v2/users/{user_app_i"
  "d.user_id}/apps/{user_app_id.app_id}/con"
  "cepts/{concept_id}/languages:\001*Z(\"#/v2/c"
  "oncepts/{concept_id}/languages:\001*\210\234\'\001\230\234\'"
  "\002\220\234\'\n\220\234\'\013\022\221\002\n\025PatchConceptLanguages\022*.cl"
  "arifai.api.PatchConceptLanguagesRequest\032"
  "*.clarifai.api.MultiConceptLanguageRespo"
  "nse\"\237\001\202\323\344\223\002\210\0012Y/v2/users/{user_app_id.us"
  "er_id}/apps/{user_app_id.app_id}/concept"
  "s/{concept_id}/languages:\001*Z(2#/v2/conce"
  "pts/{concept_id}/languages:\001*\210\234\'\001\230\234\'\002\220\234\'"
  "\n\220\234\'\013\022\212\002\n\025ListConceptReferences\022*.clarif"
  "ai.api.ListConceptReferencesRequest\032+.cl"
  "arifai.api.MultiConceptReferenceResponse"
  "\"\227\001\202\323\344\223\002\204\001\022Z/v2/users/{user_app_id.user_"
  "id}/apps/{user_app_id.app_id}/concepts/{"
  "concept_id}/referencesZ&\022$/v2/concepts/{"
  "concept_id}/references\210\234\'\001\230\234\'\002\220\234\'\013\022\205\002\n\024L"
  "istConceptRelations\022).clarifai.api.ListC"
  "onceptRelationsRequest\032*.clarifai.api.Mu"
  "ltiConceptRelationResponse\"\225\001\202\323\344\223\002\202\001\022Y/v"
  "2/users/{user_app_id.user_id}/apps/{user"
  "_app_id.app_id}/concepts/{concept_id}/re"
  "lationsZ%\022#/v2/concepts/{concept_id}/rel"
  "ations\210\234\'\001\230\234\'\005\220\234\'\013\022\217\002\n\024PostConceptRelati"
  "ons\022).clarifai.api.PostConceptRelationsR"
  "equest\032*.clarifai.api.MultiConceptRelati"
  "onResponse\"\237\001\202\323\344\223\002\210\001\"Y/v2/users/{user_ap"
  "p_id.user_id}/apps/{user_app_id.app_id}/"
  "concepts/{concept_id}/relations:\001*Z(\"#/v"
  "2/concepts/{concept_id}/relations:\001*\210\234\'\001"
  "\230\234\'\005\220\234\'\n\220\234\'\013\022\216\002\n\026DeleteConceptRelations\022"
  "+.clarifai.api.DeleteConceptRelationsReq"
  "uest\032!.clarifai.api.status.BaseResponse\""
  "\243\001\202\323\344\223\002\210\001*Y/v2/users/{user_app_id.user_i"
  "d}/apps/{user_app_id.app_id}/concepts/{c"
  "oncept_id}/relations:\001*Z(*#/v2/concepts/"
  "{concept_id}/relations:\001*\210\234\'\001\230\234\'\005\220\234\'\r\220\234\'"
  "\n\220\234\'\013\022\365\001\n\023ListKnowledgeGraphs\022(.clarifai"
  ".api.ListKnowledgeGraphsRequest\032).clarif"
  "ai.api.MultiKnowledgeGraphResponse\"\210\001\202\323\344"
  "\223\002v\022S/v2/users/{user_app_id.user_id}/app"
  "s/{user_app_id.app_id}/concepts/knowledg"
  "e_graphsZ\037\022\035/v2/concepts/knowledge_graph"
  "s\210\234\'\001\230\234\'\002\220\234\'\013\022\377\001\n\023PostKnowledgeGraphs\022(."
  "clarifai.api.PostKnowledgeGraphsRequest\032"
  ").clarifai.api.MultiKnowledgeGraphRespon"
  "se\"\222\001\202\323\344\223\002|\"S/v2/users/{user_app_id.user"
  "_id}/apps/{user_app_id.app_id}/concepts/"
  "knowledge_graphs:\001*Z\"\"\035/v2/concepts/know"
  "ledge_graphs:\001*\210\234\'\001\230\234\'\002\220\234\'\n\220\234\'\013\022\202\002\n\026Post"
  "ConceptMappingJobs\022+.clarifai.api.PostCo"
  "nceptMappingJobsRequest\032,.clarifai.api.M"
  "ultiConceptMappingJobResponse\"\214\001\202\323\344\223\002v\"P"
  "/v2/users/{user_app_id.user_id}/apps/{us"
  "er_app_id.app_id}/concepts/mappings/jobs"
  ":\001*Z\037\"\032/v2/concepts/mappings/jobs:\001*\210\234\'\001"
  "\230\234\'\002\220\234\'\n\220\234\'\013\022\344\001\n\023ListConceptMappings\022(.c"
  "larifai.api.ListConceptMappingsRequest\032)"
  ".clarifai.api.MultiConceptMappingRespons"
  "e\"x\202\323\344\223\002f\022K/v2/users/{user_app_id.user_i"
  "d}/apps/{user_app_id.app_id}/concepts/ma"
  "ppingsZ\027\022\025/v2/concepts/mappings\210\234\'\001\230\234\'\002\220"
  "\234\'\013\022\357\001\n\023PostConceptMappings\022(.clarifai.a"
  "pi.PostConceptMappingsRequest\032).clarifai"
  ".api.MultiConceptMappingResponse\"\202\001\202\323\344\223\002"
  "l\"K/v2/users/{user_app_id.user_id}/apps/"
  "{user_app_id.app_id}/concepts/mappings:\001"
  "*Z\032\"\025/v2/concepts/mappings:\001*\210\234\'\001\230\234\'\002\220\234\'"
  "\n\220\234\'\013\022\227\002\n\rGetAnnotation\022\".clarifai.api.G"
  "etAnnotationRequest\032&.clarifai.api.Singl"
  "eAnnotationResponse\"\271\001\202\323\344\223\002\236\001\022g/v2/users"
  "/{user_app_id.user_id}/apps/{user_app_id"
  ".app_id}/inputs/{input_id}/annotations/{"
  "annotation_id}Z3\0221/v2/inputs/{input_id}/"
  "annotations/{annotation_id}\210\234\'\001\230\234\'\002\220\234\'&\220"
  "\234\'\013\220\234\'\017\022\324\001\n\017ListAnnotations\022$.clarifai.a"
  "pi.ListAnnotationsRequest\032%.clarifai.api"
  ".MultiAnnotationResponse\"t\202\323\344\223\002Z\022E/v2/us"
  "ers/{user_app_id.user_id}/apps/{user_app"
  "_id.app_id}/annotationsZ\021\022\017/v2/annotatio"
  "ns\210\234\'\001\230\234\'\002\220\234\'&\220\234\'\013\220\234\'\017\022\347\001\n\017PostAnnotatio"
  "ns\022$.clarifai.api.PostAnnotationsRequest"
  "\032%.clarifai.api.MultiAnnotationResponse\""
  "\206\001\202\323\344\223\002`\"E/v2/users/{user_app_id.user_id"
  "}/apps/{user_app_id.app_id}/annotations:"
  "\001*Z\024\"\017/v2/annotations:\001*\210\234\'\001\230\234\'\002\220\234\'\005\220\234\'%"
  "\220\234\'&\220\234\'\013\220\234\'\017\220\234\'\023\022\340\001\n\020PatchAnnotations\022%."
  "clarifai.api.PatchAnnotationsRequest\032%.c"
  "larifai.api.MultiAnnotationResponse\"~\202\323\344"
  "\223\002`2E/v2/users/{user_app_id.user_id}/app"
  "s/{user_app_id.app_id}/annotations:\001*Z\0242"
  "\017/v2/annotations:\001*\210\234\'\001\230\234\'\002\220\234\'%\220\234\'&\220\234\'\013\220"
  "\234\'\017\022\234\002\n\020DeleteAnnotation\022%.clarifai.api."
  "DeleteAnnotationRequest\032!.clarifai.api.s"
  "tatus.BaseResponse\"\275\001\202\323\344\223\002\236\001*g/v2/users/"
  "{user_app_id.user_id}/apps/{user_app_id."
  "app_id}/inputs/{input_id}/annotations/{a"
  "nnotation_id}Z3*1/v2/inputs/{input_id}/a"
  "nnotations/{annotation_id}\210\234\'\001\230\234\'\002\220\234\'%\220\234"
  "\'(\220\234\'&\220\234\'\023\022\320\002\n\021DeleteAnnotations\022&.clari"
  "fai.api.DeleteAnnotationsRequest\032!.clari"
  "fai.api.status.BaseResponse\"\357\001\202\323\344\223\002\320\001*L/"
  "v2/users/{user_app_id.user_id}/apps/{use"
  "r_app_id.app_id}/inputs/annotations:\001*Z\033"
  "*\026/v2/inputs/annotations:\001*ZJ*E/v2/users"
  "/{user_app_id.user_id}/apps/{user_app_id"
  ".app_id}/annotations:\001*Z\024*\017/v2/annotatio"
  "ns:\001*\210\234\'\001\230\234\'\002\220\234\'%\220\234\'(\220\234\'&\220\234\'\023\022\201\002\n\027PostAn"
  "notationsSearches\022,.clarifai.api.PostAnn"
  "otationsSearchesRequest\032!.clarifai.api.M"
  "ultiSearchResponse\"\224\001\202\323\344\223\002r\"N/v2/users/{"
  "user_app_id.user_id}/apps/{user_app_id.a"
  "pp_id}/annotations/searches:\001*Z\035\"\030/v2/an"
  "notations/searches:\001*\230\234\'\002\220\234\'&\220\234\'\013\220\234\'\005\220\234\'"
  "\017\220\234\'\003\220\234\'\023\022\321\001\n\rGetInputCount\022\".clarifai.a"
  "pi.GetInputCountRequest\032&.clarifai.api.S"
  "ingleInputCountResponse\"t\202\323\344\223\002^\022G/v2/use"
  "rs/{user_app_id.user_id}/apps/{user_app_"
  "id.app_id}/inputs/statusZ\023\022\021/v2/inputs/s"
  "tatus\230\234\'\002\220\234\'&\220\234\'\013\220\234\'\005\022\315\001\n\014StreamInputs\022!"
  ".clarifai.api.StreamInputsRequest\032 .clar"
  "ifai.api.MultiInputResponse\"x\202\323\344\223\002^\022G/v2"
  "/users/{user_app_id.user_id}/apps/{user_"
  "app_id.app_id}/inputs/streamZ\023\022\021/v2/inpu"
  "ts/stream\210\234\'\001\230\234\'\002\220\234\'&\220\234\'\013\220\234\'\005\022\312\001\n\010GetInp"
  "ut\022\035.clarifai.api.GetInputRequest\032!.clar"
  "ifai.api.SingleInputResponse\"|\202\323\344\223\002f\022K/v"
  "2/users/{user_app_id.user_id}/apps/{user"
  "_app_id.app_id}/inputs/{input_id}Z\027\022\025/v2"
  "/inputs/{input_id}\230\234\'\002\220\234\'&\220\234\'\013\220\234\'\005\022\267\001\n\nL"
  "istInputs\022\037.clarifai.api.ListInputsReque"
  "st\032 .clarifai.api.MultiInputResponse\"f\202\323"
  "\344\223\002P\022@/v2/users/{user_app_id.user_id}/ap"
  "ps/{user_app_id.app_id}/inputsZ\014\022\n/v2/in"
  "puts\230\234\'\002\220\234\'&\220\234\'\013\220\234\'\005\022\322\001\n\nPostInputs\022\037.cl"
  "arifai.api.PostInputsRequest\032 .clarifai."
  "api.MultiInputResponse\"\200\001\202\323\344\223\002V\"@/v2/use"
  "rs/{user_app_id.user_id}/apps/{user_app_"
  "id.app_id}/inputs:\001*Z\017\"\n/v2/inputs:\001*\230\234\'"
  "\002\220\234\'%\220\234\'&\220\234\'\013\220\234\'\004\220\234\'\005\220\234\'\017\220\234\'\002\220\234\'\023\022\313\001\n\016Po"
  "stInputsFile\022#.clarifai.api.PostInputsFi"
  "leRequest\032 .clarifai.api.MultiInputRespo"
  "nse\"r\202\323\344\223\002`\"E/v2/users/{user_app_id.user"
  "_id}/apps/{user_app_id.app_id}/inputs/fi"
  "le:\001*Z\024\"\017/v2/inputs/file:\001*\210\234\'\001\230\234\'\002\220\234\'\004\022"
  "\334\001\n\016PostInputsNiFi\022#.clarifai.api.PostIn"
  "putsNiFiRequest\032 .clarifai.api.MultiInpu"
  "tResponse\"\202\001\202\323\344\223\002p\"M/v2/users/{user_app_"
  "id.user_id}/apps/{user_app_id.app_id}/ve"
  "ndors/nifi/inputs:\001*Z\034\"\027/v2/vendors/nifi"
  "/inputs:\001*\210\234\'\001\230\234\'\002\220\234\'\004\022\313\001\n\013PatchInputs\022 "
  ".clarifai.api.PatchInputsRequest\032 .clari"
  "fai.api.MultiInputResponse\"x\202\323\344\223\002V2@/v2/"
  "users/{user_app_id.user_id}/apps/{user_a"
  "pp_id.app_id}/inputs:\001*Z\0172\n/v2/inputs:\001*"
  "\230\234\'\002\220\234\'%\220\234\'&\220\234\'\013\220\234\'\004\220\234\'\005\220\234\'\017\022\345\001\n\013DeleteI"
  "nput\022 .clarifai.api.DeleteInputRequest\032!"
  ".clarifai.api.status.BaseResponse\"\220\001\202\323\344\223"
  "\002f*K/v2/users/{user_app_id.user_id}/apps"
  "/{user_app_id.app_id}/inputs/{input_id}Z"
  "\027*\025/v2/inputs/{input_id}\230\234\'\002\220\234\'%\220\234\'(\220\234\'&"
  "\220\234\'\004\220\234\'\010\220\234\'\005\220\234\'\017\220\234\'\023\022\327\001\n\014DeleteInputs\022!."
  "clarifai.api.DeleteInputsRequest\032!.clari"
  "fai.api.status.BaseResponse\"\200\001\202\323\344\223\002V*@/v"
  "2/users/{user_app_id.user_id}/apps/{user"
  "_app_id.app_id}/inputs:\001*Z\017*\n/v2/inputs:"
  "\001*\230\234\'\002\220\234\'%\220\234\'(\220\234\'&\220\234\'\004\220\234\'\010\220\234\'\005\220\234\'\017\220\234\'\023\022\355"
  "\001\n\022PostInputsSearches\022\'.clarifai.api.Pos"
  "tInputsSearchesRequest\032!.clarifai.api.Mu"
  "ltiSearchResponse\"\212\001\202\323\344\223\002h\"I/v2/users/{u"
  "ser_app_id.user_id}/apps/{user_app_id.ap"
  "p_id}/inputs/searches:\001*Z\030\"\023/v2/inputs/s"
  "earches:\001*\230\234\'\002\220\234\'&\220\234\'\013\220\234\'\005\220\234\'\017\220\234\'\003\220\234\'\023\022\234"
  "\003\n\020PostModelOutputs\022%.clarifai.api.PostM"
  "odelOutputsRequest\032!.clarifai.api.MultiO"
  "utputResponse\"\275\002\202\323\344\223\002\246\002\"i/v2/users/{user"
  "_app_id.user_id}/apps/{user_app_id.app_i"
  "d}/models/{model_id}/versions/{version_i"
  "d}/outputs:\001*Z8\"3/v2/models/{model_id}/v"
  "ersions/{version_id}/outputs:\001*ZX\"S/v2/u"
  "sers/{user_app_id.user_id}/apps/{user_ap"
  "p_id.app_id}/models/{model_id}/outputs:\001"
  "*Z\"\"\035/v2/models/{model_id}/outputs:\001*\230\234\'"
  "\002\220\234\'\013\220\234\'\017\220\234\'\002\022\306\001\n\010GetModel\022\035.clarifai.ap"
  "i.GetModelRequest\032!.clarifai.api.SingleM"
  "odelResponse\"x\202\323\344\223\002f\022K/v2/users/{user_ap"
  "p_id.user_id}/apps/{user_app_id.app_id}/"
  "models/{model_id}Z\027\022\025/v2/models/{model_i"
  "d}\230\234\'\002\220\234\'\013\220\234\'\017\022\226\003\n\022GetModelOutputInfo\022\035."
  "clarifai.api.GetModelRequest\032!.clarifai."
  "api.SingleModelResponse\"\275\002\202\323\344\223\002\252\002\022W/v2/u"
  "sers/{user_app_id.user_id}/apps/{user_ap"
  "p_id.app_id}/models/{model_id}/output_in"
  "foZ#\022!/v2/models/{model_id}/output_infoZ"
  "o\022m/v2/users/{user_app_id.user_id}/apps/"
  "{user_app_id.app_id}/models/{model_id}/v"
  "ersions/{version_id}/output_infoZ9\0227/v2/"
  "models/{model_id}/versions/{version_id}/"
  "output_info\230\234\'\002\220\234\'\013\220\234\'\017\022\263\001\n\nListModels\022\037"
  ".clarifai.api.ListModelsRequest\032 .clarif"
  "ai.api.MultiModelResponse\"b\202\323\344\223\002P\022@/v2/u"
  "sers/{user_app_id.user_id}/apps/{user_ap"
  "p_id.app_id}/modelsZ\014\022\n/v2/models\230\234\'\002\220\234\'"
  "\013\220\234\'\017\022\333\001\n\022PostModelsSearches\022\'.clarifai."
  "api.PostModelsSearchesRequest\032 .clarifai"
  ".api.MultiModelResponse\"z\202\323\344\223\002h\"I/v2/use"
  "rs/{user_app_id.user_id}/apps/{user_app_"
  "id.app_id}/models/searches:\001*Z\030\"\023/v2/mod"
  "els/searches:\001*\230\234\'\002\220\234\'\013\220\234\'\017\022\306\001\n\nPostMode"
  "ls\022\037.clarifai.api.PostModelsRequest\032!.cl"
  "arifai.api.SingleModelResponse\"t\202\323\344\223\002V\"@"
  "/v2/users/{user_app_id.user_id}/apps/{us"
  "er_app_id.app_id}/models:\001*Z\017\"\n/v2/model"
  "s:\001*\230\234\'\002\220\234\'\013\220\234\'\016\220\234\'\017\220\234\'\032\220\234\'\023\022\303\001\n\013PatchMo"
  "dels\022 .clarifai.api.PatchModelsRequest\032 "
  ".clarifai.api.MultiModelResponse\"p\202\323\344\223\002V"
  "2@/v2/users/{user_app_id.user_id}/apps/{"
  "user_app_id.app_id}/models:\001*Z\0172\n/v2/mod"
  "els:\001*\230\234\'\002\220\234\'\013\220\234\'\016\220\234\'\017\220\234\'\032\022\331\001\n\013DeleteMod"
  "el\022 .clarifai.api.DeleteModelRequest\032!.c"
  "larifai.api.status.BaseResponse\"\204\001\202\323\344\223\002f"
  "*K/v2/users/{user_app_id.user_id}/apps/{"
  "user_app_id.app_id}/models/{model_id}Z\027*"
  "\025/v2/models/{model_id}\230\234\'\002\220\234\'\013\220\234\'\016\220\234\'\021\220\234"
  "\'\017\220\234\'\023\022\312\001\n\014DeleteModels\022!.clarifai.api.D"
  "eleteModelsRequest\032!.clarifai.api.status"
  ".BaseResponse\"t\202\323\344\223\002V*@/v2/users/{user_a"
  "pp_id.user_id}/apps/{user_app_id.app_id}"
  "/models:\001*Z\017*\n/v2/models:\001*\230\234\'\002\220\234\'\013\220\234\'\016\220"
  "\234\'\021\220\234\'\017\220\234\'\023\022\215\003\n\017ListModelInputs\022$.clarif"
  "ai.api.ListModelInputsRequest\032 .clarifai"
  ".api.MultiInputResponse\"\261\002\202\323\344\223\002\226\002\022R/v2/u"
  "sers/{user_app_id.user_id}/apps/{user_ap"
  "p_id.app_id}/models/{model_id}/inputsZ\036\022"
  "\034/v2/models/{model_id}/inputsZj\022h/v2/use"
  "rs/{user_app_id.user_id}/apps/{user_app_"
  "id.app_id}/models/{model_id}/versions/{v"
  "ersion_id}/inputsZ4\0222/v2/models/{model_i"
  "d}/versions/{version_id}/inputs\230\234\'\002\220\234\'&\220"
  "\234\'\013\220\234\'\005\220\234\'\017\022\211\002\n\017GetModelVersion\022$.clarif"
  "ai.api.GetModelVersionRequest\032(.clarifai"
  ".api.SingleModelVersionResponse\"\245\001\202\323\344\223\002\222"
  "\001\022a/v2/users/{user_app_id.user_id}/apps/"
  "{user_app_id.app_id}/models/{model_id}/v"
  "ersions/{version_id}Z-\022+/v2/models/{mode"
  "l_id}/versions/{version_id}\230\234\'\002\220\234\'\013\220\234\'\017\022"
  "\361\001\n\021ListModelVersions\022&.clarifai.api.Lis"
  "tModelVersionsRequest\032\'.clarifai.api.Mul"
  "tiModelVersionResponse\"\212\001\202\323\344\223\002x\022T/v2/use"
  "rs/{user_app_id.user_id}/apps/{user_app_"
  "id.app_id}/models/{model_id}/versionsZ \022"
  "\036/v2/models/{model_id}/versions\230\234\'\002\220\234\'\013\220"
  "\234\'\017\022\215\002\n\021PostModelVersions\022&.clarifai.api"
  ".PostModelVersionsRequest\032!.clarifai.api"
  ".SingleModelResponse\"\254\001\202\323\344\223\002~\"T/v2/users"
  "/{user_app_id.user_id}/apps/{user_app_id"
  ".app_id}/models/{model_id}/versions:\001*Z#"
  "\"\036/v2/models/{model_id}/versions:\001*\230\234\'\002\220"
  "\234\'&\220\234\'\013\220\234\'\005\220\234\'\016\220\234\'\017\220\234\'\032\220\234\'\023\220\234\'5\220\234\'6\022\224\002\n\022"
  "DeleteModelVersion\022\'.clarifai.api.Delete"
  "ModelVersionRequest\032!.clarifai.api.statu"
  "s.BaseResponse\"\261\001\202\323\344\223\002\222\001*a/v2/users/{use"
  "r_app_id.user_id}/apps/{user_app_id.app_"
  "id}/models/{model_id}/versions/{version_"
  "id}Z-*+/v2/models/{model_id}/versions/{v"
  "ersion_id}\230\234\'\002\220\234\'\013\220\234\'\016\220\234\'\021\220\234\'\017\220\234\'\023\022\263\002\n\026G"
  "etModelVersionMetrics\022+.clarifai.api.Get"
  "ModelVersionMetricsRequest\032(.clarifai.ap"
  "i.SingleModelVersionResponse\"\301\001\202\323\344\223\002\242\001\022i"
  "/v2/users/{user_app_id.user_id}/apps/{us"
  "er_app_id.app_id}/models/{model_id}/vers"
  "ions/{version_id}/metricsZ5\0223/v2/models/"
  "{model_id}/versions/{version_id}/metrics"
  "\230\234\'\002\220\234\'&\220\234\'\013\220\234\'\017\220\234\'\005\220\234\'5\022\317\002\n\027PostModelVe"
  "rsionMetrics\022,.clarifai.api.PostModelVer"
  "sionMetricsRequest\032(.clarifai.api.Single"
  "ModelVersionResponse\"\333\001\202\323\344\223\002\250\001\"i/v2/user"
  "s/{user_app_id.user_id}/apps/{user_app_i"
  "d.app_id}/models/{model_id}/versions/{ve"
  "rsion_id}/metrics:\001*Z8\"3/v2/models/{mode"
  "l_id}/versions/{version_id}/metrics:\001*\230\234"
  "\'\002\220\234\'&\220\234\'\013\220\234\'\005\220\234\'\016\220\234\'\017\220\234\'\032\220\234\'\002\220\234\'\023\220\234\'5\220\234"
  "\'6\022\232\002\n\033PostModelVersionsDeployment\0220.cla"
  "rifai.api.PostModelVersionsDeploymentReq"
  "uest\032\'.clarifai.api.MultiModelVersionRes"
  "ponse\"\237\001\202\323\344\223\002\204\001\"W/v2/users/{user_app_id."
  "user_id}/apps/{user_app_id.app_id}/model"
  "s/{model_id}/deployments:\001*Z&\"!/v2/model"
  "s/{model_id}/deployments:\001*\210\234\'\001\230\234\'\002\220\234\'\016\220"
  "\234\'\017\220\234\'\"\022\236\002\n\035DeleteModelVersionsDeploymen"
  "t\0222.clarifai.api.DeleteModelVersionsDepl"
  "oymentRequest\032\'.clarifai.api.MultiModelV"
  "ersionResponse\"\237\001\202\323\344\223\002\204\001*W/v2/users/{use"
  "r_app_id.user_id}/apps/{user_app_id.app_"
  "id}/models/{model_id}/deployments:\001*Z&*!"
  "/v2/models/{model_id}/deployments:\001*\210\234\'\001"
  "\230\234\'\002\220\234\'\016\220\234\'\017\220\234\'\"\022\334\001\n\013GetWorkflow\022 .clari"
  "fai.api.GetWorkflowRequest\032$.clarifai.ap"
  "i.SingleWorkflowResponse\"\204\001\202\323\344\223\002r\022Q/v2/u"
  "sers/{user_app_id.user_id}/apps/{user_ap"
  "p_id.app_id}/workflows/{workflow_id}Z\035\022\033"
  "/v2/workflows/{workflow_id}\230\234\'\002\220\234\'\017\220\234\'\023\022"
  "\302\001\n\rListWorkflows\022\".clarifai.api.ListWor"
  "kflowsRequest\032#.clarifai.api.MultiWorkfl"
  "owResponse\"h\202\323\344\223\002V\022C/v2/users/{user_app_"
  "id.user_id}/apps/{user_app_id.app_id}/wo"
  "rkflowsZ\017\022\r/v2/workflows\230\234\'\002\220\234\'\017\220\234\'\023\022\212\001\n"
  "\023ListPublicWorkflows\022(.clarifai.api.List"
  "PublicWorkflowsRequest\032#.clarifai.api.Mu"
  "ltiWorkflowResponse\"$\202\323\344\223\002\026\022\024/v2/public_"
  "workflows\210\234\'\001\230\234\'\003\022\314\001\n\rPostWorkflows\022\".cl"
  "arifai.api.PostWorkflowsRequest\032#.clarif"
  "ai.api.MultiWorkflowResponse\"r\202\323\344\223\002\\\"C/v"
  "2/users/{user_app_id.user_id}/apps/{user"
  "_app_id.app_id}/workflows:\001*Z\022\"\r/v2/work"
  "flows:\001*\230\234\'\002\220\234\'\017\220\234\'\022\220\234\'\023\022\316\001\n\016PatchWorkfl"
  "ows\022#.clarifai.api.PatchWorkflowsRequest"
  "\032#.clarifai.api.MultiWorkflowResponse\"r\202"
  "\323\344\223\002\\2C/v2/users/{user_app_id.user_id}/a"
  "pps/{user_app_id.app_id}/workflows:\001*Z\0222"
  "\r/v2/workflows:\001*\230\234\'\002\220\234\'\017\220\234\'\022\220\234\'\023\022\343\001\n\016De"
  "leteWorkflow\022#.clarifai.api.DeleteWorkfl"
  "owRequest\032!.clarifai.api.status.BaseResp"
  "onse\"\210\001\202\323\344\223\002r*Q/v2/users/{user_app_id.us"
  "er_id}/apps/{user_app_id.app_id}/workflo"
  "ws/{workflow_id}Z\035*\033/v2/workflows/{workf"
  "low_id}\230\234\'\002\220\234\'\022\220\234\'\025\220\234\'\023\022\316\001\n\017DeleteWorkfl"
  "ows\022$.clarifai.api.DeleteWorkflowsReques"
  "t\032!.clarifai.api.status.BaseResponse\"r\202\323"
  "\344\223\002\\*C/v2/users/{user_app_id.user_id}/ap"
  "ps/{user_app_id.app_id}/workflows:\001*Z\022*\r"
  "/v2/workflows:\001*\230\234\'\002\220\234\'\022\220\234\'\025\220\234\'\023\022\220\002\n\023Pos"
  "tWorkflowResults\022(.clarifai.api.PostWork"
  "flowResultsRequest\032).clarifai.api.PostWo"
  "rkflowResultsResponse\"\243\001\202\323\344\223\002\210\001\"Y/v2/use"
  "rs/{user_app_id.user_id}/apps/{user_app_"
  "id.app_id}/workflows/{workflow_id}/resul"
  "ts:\001*Z(\"#/v2/workflows/{workflow_id}/res"
  "ults:\001*\230\234\'\002\220\234\'\017\220\234\'\013\220\234\'\002\220\234\'\023\022\304\002\n\035PostWork"
  "flowResultsSimilarity\0222.clarifai.api.Pos"
  "tWorkflowResultsSimilarityRequest\0323.clar"
  "ifai.api.PostWorkflowResultsSimilarityRe"
  "sponse\"\271\001\202\323\344\223\002\236\001\"d/v2/users/{user_app_id"
  ".user_id}/apps/{user_app_id.app_id}/work"
  "flows/{workflow_id}/results/similarity:\001"
  "*Z3\"./v2/workflows/{workflow_id}/results"
  "/similarity:\001*\230\234\'\002\220\234\'\017\220\234\'\013\220\234\'\002\220\234\'\023\022\205\001\n\006G"
  "etKey\022\033.clarifai.api.GetKeyRequest\032\037.cla"
  "rifai.api.SingleKeyResponse\"=\202\323\344\223\002/\022-/v2"
  "/users/{user_app_id.user_id}/keys/{key_i"
  "d}\230\234\'\005\220\234\'0\022\177\n\010ListKeys\022\035.clarifai.api.Li"
  "stKeysRequest\032\036.clarifai.api.MultiKeyRes"
  "ponse\"4\202\323\344\223\002&\022$/v2/users/{user_app_id.us"
  "er_id}/keys\230\234\'\005\220\234\'0\022\237\001\n\013ListAppKeys\022 .cl"
  "arifai.api.ListAppKeysRequest\032\036.clarifai"
  ".api.MultiKeyResponse\"N\202\323\344\223\002@\022>/v2/users"
  "/{user_app_id.user_id}/apps/{user_app_id"
  ".app_id}/keys\230\234\'\005\220\234\'0\022\225\001\n\tDeleteKey\022\036.cl"
  "arifai.api.DeleteKeyRequest\032!.clarifai.a"
  "pi.status.BaseResponse\"E\202\323\344\223\002/*-/v2/user"
  "s/{user_app_id.user_id}/keys/{key_id}\230\234\'"
  "\005\220\234\'/\220\234\'1\220\234\'0\022\212\001\n\010PostKeys\022\035.clarifai.ap"
  "i.PostKeysRequest\032\036.clarifai.api.MultiKe"
  "yResponse\"\?\202\323\344\223\002)\"$/v2/users/{user_app_i"
  "d.user_id}/keys:\001*\230\234\'\005\220\234\'-\220\234\'/\220\234\'0\022\210\001\n\tP"
  "atchKeys\022\036.clarifai.api.PatchKeysRequest"
  "\032\036.clarifai.api.MultiKeyResponse\";\202\323\344\223\002)"
  "2$/v2/users/{user_app_id.user_id}/keys:\001"
  "*\230\234\'\005\220\234\'/\220\234\'0\022\300\001\n\010MyScopes\022\035.clarifai.ap"
  "i.MyScopesRequest\032 .clarifai.api.MultiSc"
  "opeResponse\"s\202\323\344\223\002e\022B/v2/users/{user_app"
  "_id.user_id}/apps/{user_app_id.app_id}/m"
  "yscopesZ\016\022\014/v2/myscopesZ\017\022\r/v2/my_scopes"
  "\210\234\'\001\230\234\'\002\022o\n\nListScopes\022\037.clarifai.api.Li"
  "stScopesRequest\032$.clarifai.api.MultiScop"
  "eDepsResponse\"\032\202\323\344\223\002\014\022\n/v2/scopes\210\234\'\001\230\234\'"
  "\003\022\266\001\n\006GetApp\022\033.clarifai.api.GetAppReques"
  "t\032\037.clarifai.api.SingleAppResponse\"n\202\323\344\223"
  "\002\\\0229/v2/users/{user_app_id.user_id}/apps"
  "/{user_app_id.app_id}Z\037\022\035/v2/apps/{user_"
  "app_id.app_id}\230\234\'\005\220\234\'-\220\234\'\023\022\217\001\n\010ListApps\022"
  "\035.clarifai.api.ListAppsRequest\032\036.clarifa"
  "i.api.MultiAppResponse\"D\202\323\344\223\0022\022$/v2/user"
  "s/{user_app_id.user_id}/appsZ\n\022\010/v2/apps"
  "\230\234\'\005\220\234\'-\220\234\'\023\022\245\001\n\tDeleteApp\022\036.clarifai.ap"
  "i.DeleteAppRequest\032!.clarifai.api.status"
  ".BaseResponse\"U\202\323\344\223\002;*9/v2/users/{user_a"
  "pp_id.user_id}/apps/{user_app_id.app_id}"
  "\230\234\'\005\220\234\',\220\234\'.\220\234\'-\220\234\'\023\022\222\001\n\010PostApps\022\035.clar"
  "ifai.api.PostAppsRequest\032\036.clarifai.api."
  "MultiAppResponse\"G\202\323\344\223\002)\"$/v2/users/{use"
  "r_app_id.user_id}/apps:\001*\230\234\'\005\220\234\',\220\234\'-\220\234\'"
  "\017\220\234\'\023\220\234\'\022\022\210\001\n\tPatchApps\022\036.clarifai.api.P"
  "atchAppsRequest\032\036.clarifai.api.MultiAppR"
  "esponse\";\202\323\344\223\002)2$/v2/users/{user_app_id."
  "user_id}/apps:\001*\230\234\'\005\220\234\',\220\234\'-\022z\n\007GetUser\022"
  "\034.clarifai.api.GetUserRequest\032 .clarifai"
  ".api.SingleUserResponse\"/\202\323\344\223\002!\022\037/v2/use"
  "rs/{user_app_id.user_id}\210\234\'\001\230\234\'\005\022\225\001\n\017Pos"
  "tUserConsent\022$.clarifai.api.PostUserCons"
  "entRequest\032 .clarifai.api.SingleUserResp"
  "onse\":\202\323\344\223\002,\"\'/v2/users/{user_app_id.use"
  "r_id}/consent:\001*\210\234\'\001\230\234\'\003\022\201\001\n\tPatchUser\022\036"
  ".clarifai.api.PatchUserRequest\032 .clarifa"
  "i.api.SingleUserResponse\"2\202\323\344\223\002$2\037/v2/us"
  "ers/{user_app_id.user_id}:\001*\210\234\'\001\230\234\'\003\022\236\001\n"
  "\nPostEmails\022\037.clarifai.api.PostEmailsReq"
  "uest\032#.clarifai.api.MultipleEmailRespons"
  "e\"J\202\323\344\223\002<\"&/v2/users/{user_app_id.user_i"
  "d}/emails:\001*Z\017\"\n/v2/emails:\001*\210\234\'\001\230\234\'\003\022\230\001"
  "\n\nListEmails\022\037.clarifai.api.ListEmailsRe"
  "quest\032#.clarifai.api.MultipleEmailRespon"
  "se\"D\202\323\344\223\0026\022&/v2/users/{user_app_id.user_"
  "id}/emailsZ\014\022\n/v2/emails\210\234\'\001\230\234\'\003\022\316\001\n\025Pos"
  "tResendVerifyEmail\022%.clarifai.api.PostRe"
  "sendVerifyRequest\032(.clarifai.api.SingleR"
  "esendVerifyResponse\"d\202\323\344\223\002V\"3/v2/users/{"
  "user_app_id.user_id}/resend_verification"
  ":\001*Z\034\"\027/v2/resend_verification:\001*\210\234\'\001\230\234\'"
  "\003\022\222\001\n\013DeleteEmail\022 .clarifai.api.DeleteE"
  "mailRequest\032!.clarifai.api.status.BaseRe"
  "sponse\">\202\323\344\223\0020*./v2/users/{user_app_id.u"
  "ser_id}/emails/{email}\210\234\'\001\230\234\'\003\022\270\001\n\020PostP"
  "rimaryEmail\022%.clarifai.api.PostPrimaryEm"
  "ailRequest\032!.clarifai.api.SingleEmailRes"
  "ponse\"Z\202\323\344\223\002L\"./v2/users/{user_app_id.us"
  "er_id}/emails/primary:\001*Z\027\"\022/v2/emails/p"
  "rimary:\001*\210\234\'\001\230\234\'\003\022\323\001\n\024PostValidatePasswo"
  "rd\022).clarifai.api.PostValidatePasswordRe"
  "quest\032..clarifai.api.SinglePasswordValid"
  "ationResponse\"`\202\323\344\223\002R\"1/v2/users/{user_a"
  "pp_id.user_id}/validate_password:\001*Z\032\"\025/"
  "v2/validate_password:\001*\230\234\'\005\220\234\':\022\315\001\n\024List"
  "PasswordPolicies\022).clarifai.api.ListPass"
  "wordPoliciesRequest\032..clarifai.api.Multi"
  "plePasswordPoliciesResponse\"Z\202\323\344\223\002L\0221/v2"
  "/users/{user_app_id.user_id}/password_po"
  "liciesZ\027\022\025/v2/password_policies\230\234\'\005\220\234\':\022"
  "\327\001\n\024PostPasswordPolicies\022).clarifai.api."
  "PostPasswordPoliciesRequest\032..clarifai.a"
  "pi.MultiplePasswordPoliciesResponse\"d\202\323\344"
  "\223\002R\"1/v2/users/{user_app_id.user_id}/pas"
  "sword_policies:\001*Z\032\"\025/v2/password_polici"
  "es:\001*\230\234\'\005\220\234\'9\220\234\':\022\331\001\n\025PatchPasswordPolic"
  "ies\022*.clarifai.api.PatchPasswordPolicies"
  "Request\032..clarifai.api.MultiplePasswordP"
  "oliciesResponse\"d\202\323\344\223\002R21/v2/users/{user"
  "_app_id.user_id}/password_policies:\001*Z\0322"
  "\025/v2/password_policies:\001*\230\234\'\005\220\234\'9\220\234\':\022\314\001"
  "\n\026DeletePasswordPolicies\022+.clarifai.api."
  "DeletePasswordPoliciesRequest\032!.clarifai"
  ".api.status.BaseResponse\"b\202\323\344\223\002L*1/v2/us"
  "ers/{user_app_id.user_id}/password_polic"
  "iesZ\027*\025/v2/password_policies\230\234\'\005\220\234\'9\220\234\';"
  "\220\234\':\022\301\001\n\tGetSearch\022\036.clarifai.api.GetSea"
  "rchRequest\032\".clarifai.api.SingleSearchRe"
  "sponse\"p\202\323\344\223\002^\022G/v2/users/{user_app_id.u"
  "ser_id}/apps/{user_app_id.app_id}/search"
  "es/{id}Z\023\022\021/v2/searches/{id}\210\234\'\001\230\234\'\002\220\234\'\003"
  "\022\274\001\n\014ListSearches\022!.clarifai.api.ListSea"
  "rchesRequest\032!.clarifai.api.MultiSearchR"
  "esponse\"f\202\323\344\223\002T\022B/v2/users/{user_app_id."
  "user_id}/apps/{user_app_id.app_id}/searc"
  "hesZ\016\022\014/v2/searches\210\234\'\001\230\234\'\002\220\234\'\003\022\322\001\n\014Post"
  "Searches\022!.clarifai.api.PostSearchesRequ"
  "est\032!.clarifai.api.MultiSearchResponse\"|"
  "\202\323\344\223\002Z\"B/v2/users/{user_app_id.user_id}/"
  "apps/{user_app_id.app_id}/searches:\001*Z\021\""
  "\014/v2/searches:\001*\230\234\'\002\220\234\'&\220\234\'\013\220\234\'\005\220\234\'\017\220\234\'\003"
  "\220\234\'\023\022\324\001\n\020PostSearchesByID\022%.clarifai.api"
  ".PostSearchesByIDRequest\032!.clarifai.api."
  "MultiSearchResponse\"v\202\323\344\223\002d\"G/v2/users/{"
  "user_app_id.user_id}/apps/{user_app_id.a"
  "pp_id}/searches/{id}:\001*Z\026\"\021/v2/searches/"
  "{id}:\001*\210\234\'\001\230\234\'\002\220\234\'\003\022\247\002\n\033PostAnnotationSe"
  "archMetrics\0220.clarifai.api.PostAnnotatio"
  "nSearchMetricsRequest\0322.clarifai.api.Mul"
  "tiAnnotationSearchMetricsResponse\"\241\001\202\323\344\223"
  "\002\202\001\"V/v2/users/{user_app_id.user_id}/app"
  "s/{user_app_id.app_id}/annotations/searc"
  "hes/metrics:\001*Z%\" /v2/annotations/search"
  "es/metrics:\001*\230\234\'\002\220\234\'&\220\234\'\013\220\234\'\005\220\234\'5\220\234\'6\022\245\002"
  "\n\032GetAnnotationSearchMetrics\022/.clarifai."
  "api.GetAnnotationSearchMetricsRequest\0322."
  "clarifai.api.MultiAnnotationSearchMetric"
  "sResponse\"\241\001\202\323\344\223\002\206\001\022[/v2/users/{user_app"
  "_id.user_id}/apps/{user_app_id.app_id}/a"
  "nnotations/searches/metrics/{id}Z\'\022%/v2/"
  "annotations/searches/metrics/{id}\230\234\'\002\220\234\'"
  "&\220\234\'\013\220\234\'\005\220\234\'5\022\234\002\n\033ListAnnotationSearchMe"
  "trics\0220.clarifai.api.ListAnnotationSearc"
  "hMetricsRequest\0322.clarifai.api.MultiAnno"
  "tationSearchMetricsResponse\"\226\001\202\323\344\223\002|\022V/v"
  "2/users/{user_app_id.user_id}/apps/{user"
  "_app_id.app_id}/annotations/searches/met"
  "ricsZ\"\022 /v2/annotations/searches/metrics"
  "\230\234\'\002\220\234\'&\220\234\'\013\220\234\'\005\220\234\'5\022\306\001\n\014DeleteSearch\022!."
  "clarifai.api.DeleteSearchRequest\032!.clari"
  "fai.api.status.BaseResponse\"p\202\323\344\223\002^*G/v2"
  "/users/{user_app_id.user_id}/apps/{user_"
  "app_id.app_id}/searches/{id}Z\023*\021/v2/sear"
  "ches/{id}\210\234\'\001\230\234\'\002\220\234\'\003\022\371\001\n\023PostAttributeS"
  "earch\022(.clarifai.api.PostAttributeSearch"
  "Request\032!.clarifai.api.MultiSearchRespon"
  "se\"\224\001\202\323\344\223\002n\"L/v2/users/{user_app_id.user"
  "_id}/apps/{user_app_id.app_id}/attribute"
  "_searches:\001*Z\033\"\026/v2/attribute_searches:\001"
  "*\210\234\'\001\230\234\'\002\220\234\'&\220\234\'\013\220\234\'\005\220\234\'\017\220\234\'\003\220\234\'\023\022\275\001\n\014Li"
  "stClusters\022!.clarifai.api.ListClustersRe"
  "quest\032\".clarifai.api.MultiClusterRespons"
  "e\"f\202\323\344\223\002T\022B/v2/users/{user_app_id.user_i"
  "d}/apps/{user_app_id.app_id}/clustersZ\016\022"
  "\014/v2/clusters\210\234\'\001\230\234\'\002\220\234\'\003\022\216\002\n\031ListAnnota"
  "tionsForCluster\022..clarifai.api.ListAnnot"
  "ationsForClusterRequest\032%.clarifai.api.M"
  "ultiAnnotationResponse\"\231\001\202\323\344\223\002\206\001\022[/v2/us"
  "ers/{user_app_id.user_id}/apps/{user_app"
  "_id.app_id}/clusters/{cluster_id}/annota"
  "tionsZ\'\022%/v2/clusters/{cluster_id}/annot"
  "ations\210\234\'\001\230\234\'\002\220\234\'\003\022\345\001\n\024PostClustersSearc"
  "hes\022).clarifai.api.PostClustersSearchesR"
  "equest\032\".clarifai.api.MultiClusterRespon"
  "se\"~\202\323\344\223\002l\"K/v2/users/{user_app_id.user_"
  "id}/apps/{user_app_id.app_id}/clusters/s"
  "earches:\001*Z\032\"\025/v2/clusters/searches:\001*\210\234"
  "\'\001\230\234\'\002\220\234\'\003\022\205\001\n\017PostVerifyEmail\022$.clarifa"
  "i.api.PostVerifyEmailRequest\032\'.clarifai."
  "api.SingleVerifyEmailResponse\"#\202\323\344\223\002\025\"\020/"
  "v2/verify_email:\001*\210\234\'\001\230\234\'\001\022\227\001\n\030PostReque"
  "stResetPassword\022).clarifai.api.RequestRe"
  "setPasswordRequest\032!.clarifai.api.status"
  ".BaseResponse\"-\202\323\344\223\002\037\"\032/v2/request_passw"
  "ord_reset:\001*\210\234\'\001\230\234\'\001\022\232\001\n\031PostCompleteRes"
  "etPassword\022*.clarifai.api.CompleteResetP"
  "asswordRequest\032!.clarifai.api.status.Bas"
  "eResponse\".\202\323\344\223\002 \"\033/v2/complete_password"
  "_reset:\001*\210\234\'\001\230\234\'\001\022l\n\tPostLogin\022\036.clarifa"
  "i.api.PostLoginRequest\032!.clarifai.api.Si"
  "ngleLoginResponse\"\034\202\323\344\223\002\016\"\t/v2/login:\001*\210"
  "\234\'\001\230\234\'\001\022o\n\nPostSignup\022\037.clarifai.api.Pos"
  "tSignupRequest\032!.clarifai.api.SingleLogi"
  "nResponse\"\035\202\323\344\223\002\017\"\n/v2/signup:\001*\210\234\'\001\230\234\'\001"
  "\022\200\001\n\017ListAuthMethods\022$.clarifai.api.List"
  "AuthMethodsRequest\032%.clarifai.api.ListAu"
  "thMethodsResponse\" \202\323\344\223\002\022\022\020/v2/auth/meth"
  "ods\210\234\'\001\230\234\'\001\022\204\001\n\017GetSubscription\022$.clarif"
  "ai.api.GetSubscriptionRequest\032(.clarifai"
  ".api.SingleSubscriptionResponse\"!\202\323\344\223\002\023\022"
  "\021/v2/subscriptions\210\234\'\001\230\234\'\003\022\211\001\n\020PostSubsc"
  "ription\022%.clarifai.api.PostSubscriptionR"
  "equest\032(.clarifai.api.SingleSubscription"
  "Response\"$\202\323\344\223\002\026\"\021/v2/subscriptions:\001*\210\234"
  "\'\001\230\234\'\003\022\263\001\n\017ListCreditCards\022$.clarifai.ap"
  "i.ListCreditCardsRequest\032(.clarifai.api."
  "MultipleCreditCardResponse\"P\202\323\344\223\002B\022,/v2/"
  "users/{user_app_id.user_id}/credit_cards"
  "Z\022\022\020/v2/credit_cards\210\234\'\001\230\234\'\003\022\265\001\n\016PostCre"
  "ditCard\022#.clarifai.api.PostCreditCardReq"
  "uest\032&.clarifai.api.SingleCreditCardResp"
  "onse\"V\202\323\344\223\002H\",/v2/users/{user_app_id.use"
  "r_id}/credit_cards:\001*Z\025\"\020/v2/credit_card"
  "s:\001*\210\234\'\001\230\234\'\003\022\264\001\n\020DeleteCreditCard\022%.clar"
  "ifai.api.DeleteCreditCardRequest\032!.clari"
  "fai.api.status.BaseResponse\"V\202\323\344\223\002H*,/v2"
  "/users/{user_app_id.user_id}/credit_card"
  "s:\001*Z\025*\020/v2/credit_cards:\001*\210\234\'\001\230\234\'\003\022\273\001\n\020"
  "PatchCreditCards\022%.clarifai.api.PatchCre"
  "ditCardsRequest\032(.clarifai.api.MultipleC"
  "reditCardResponse\"V\202\323\344\223\002H2,/v2/users/{us"
  "er_app_id.user_id}/credit_cards:\001*Z\0252\020/v"
  "2/credit_cards:\001*\210\234\'\001\230\234\'\003\022|\n\017ListStatusC"
  "odes\022$.clarifai.api.ListStatusCodesReque"
  "st\032%.clarifai.api.MultiStatusCodeRespons"
  "e\"\034\202\323\344\223\002\022\022\020/v2/status_codes\230\234\'\001\022\212\001\n\rGetS"
  "tatusCode\022\".clarifai.api.GetStatusCodeRe"
  "quest\032&.clarifai.api.SingleStatusCodeRes"
  "ponse\"-\202\323\344\223\002#\022!/v2/status_codes/{status_"
  "code_id}\230\234\'\001\022l\n\nGetHealthz\022\037.clarifai.ap"
  "i.GetHealthzRequest\032 .clarifai.api.GetHe"
  "althzResponse\"\033\202\323\344\223\002\r\022\013/v2/healthz\210\234\'\001\230\234"
  "\'\001\022\260\001\n\025ListUserBillingCycles\022*.clarifai."
  "api.ListUserBillingCyclesRequest\032+.clari"
  "fai.api.ListUserBillingCyclesResponse\">\202"
  "\323\344\223\0020\022./v2/users/{user_app_id.user_id}/b"
  "illing_cycles\210\234\'\001\230\234\'\003\022\201\001\n\017GetBillingUsag"
  "e\022$.clarifai.api.GetBillingUsageRequest\032"
  "%.clarifai.api.GetBillingUsageResponse\"!"
  "\202\323\344\223\002\023\022\021/v2/billing_usage\210\234\'\001\230\234\'\003\022\257\001\n\023Po"
  "stHistoricalUsage\022(.clarifai.api.PostHis"
  "toricalUsageRequest\032).clarifai.api.PostH"
  "istoricalUsageResponse\"C\202\323\344\223\0025\"0/v2/user"
  "s/{user_app_id.user_id}/historical_usage"
  ":\001*\210\234\'\001\230\234\'\003\022\214\001\n\022ListUsageIntervals\022\'.cla"
  "rifai.api.ListUsageIntervalsRequest\032(.cl"
  "arifai.api.ListUsageIntervalsResponse\"#\202"
  "\323\344\223\002\025\022\023/v2/usage_intervals\210\234\'\001\230\234\'\001\022\241\001\n\020G"
  "etRealtimeUsage\022%.clarifai.api.GetRealti"
  "meUsageRequest\032&.clarifai.api.GetRealtim"
  "eUsageResponse\">\202\323\344\223\0020\022./v2/users/{user_"
  "app_id.user_id}/realtime_usage\210\234\'\001\230\234\'\003\022\264"
  "\001\n\tPostUsage\022\036.clarifai.api.PostUsageReq"
  "uest\032\037.clarifai.api.PostUsageResponse\"f\202"
  "\323\344\223\002T\"\?/v2/users/{user_app_id.user_id}/a"
  "pps/{user_app_id.app_id}/usage:\001*Z\016\"\t/v2"
  "/usage:\001*\210\234\'\001\230\234\'\002\220\234\'\001\022\302\001\n\021ListCollaborat"
  "ors\022&.clarifai.api.ListCollaboratorsRequ"
  "est\032(.clarifai.api.MultiCollaboratorsRes"
  "ponse\"[\202\323\344\223\002I\022G/v2/users/{user_app_id.us"
  "er_id}/apps/{user_app_id.app_id}/collabo"
  "rators\210\234\'\001\230\234\'\002\220\234\'2\022\311\001\n\021PostCollaborators"
  "\022&.clarifai.api.PostCollaboratorsRequest"
  "\032(.clarifai.api.MultiCollaboratorsRespon"
  "se\"b\202\323\344\223\002L\"G/v2/users/{user_app_id.user_"
  "id}/apps/{user_app_id.app_id}/collaborat"
  "ors:\001*\210\234\'\001\230\234\'\002\220\234\'3\220\234\'2\022\317\001\n\022PatchCollabor"
  "ators\022\'.clarifai.api.PatchCollaboratorsR"
  "equest\032(.clarifai.api.MultiCollaborators"
  "Response\"f\202\323\344\223\002L2G/v2/users/{user_app_id"
  ".user_id}/apps/{user_app_id.app_id}/coll"
  "aborators:\001*\210\234\'\001\230\234\'\002\220\234\'3\220\234\'2\220\234\'4\022\322\001\n\023Del"
  "eteCollaborators\022(.clarifai.api.DeleteCo"
  "llaboratorsRequest\032!.clarifai.api.status"
  ".BaseResponse\"n\202\323\344\223\002L*G/v2/users/{user_a"
  "pp_id.user_id}/apps/{user_app_id.app_id}"
  "/collaborators:\001*\210\234\'\001\230\234\'\002\220\234\'3\220\234\'2\220\234\'4\220\234\'"
  "7\220\234\'8\022\276\001\n\022ListCollaborations\022\'.clarifai."
  "api.ListCollaborationsRequest\032).clarifai"
  ".api.MultiCollaborationsResponse\"T\202\323\344\223\002F"
  "\022./v2/users/{user_app_id.user_id}/collab"
  "orationsZ\024\022\022/v2/collaborations\210\234\'\001\230\234\'\003\022\207"
  "\001\n\014FetchLicense\022!.clarifai.api.FetchLice"
  "nseRequest\032\".clarifai.api.FetchLicenseRe"
  "sponse\"0\202\323\344\223\002\036\"\031/v2/licenses/{license_id"
  "}:\001*\210\234\'\001\230\234\'\002\220\234\'\001\022\301\001\n\014ListLicenses\022!.clar"
  "ifai.api.ListLicensesRequest\032&.clarifai."
  "api.MultipleLicensesResponse\"f\202\323\344\223\002T\022B/v"
  "2/users/{user_app_id.user_id}/apps/{user"
  "_app_id.app_id}/licensesZ\016\022\014/v2/licenses"
  "\210\234\'\001\230\234\'\002\220\234\'\001\022\325\001\n\nGetLicense\022\037.clarifai.a"
  "pi.GetLicenseRequest\032#.clarifai.api.Sing"
  "leLicenseResponse\"\200\001\202\323\344\223\002n\022O/v2/users/{u"
  "ser_app_id.user_id}/apps/{user_app_id.ap"
  "p_id}/licenses/{license_id}Z\033\022\031/v2/licen"
  "ses/{license_id}\210\234\'\001\230\234\'\002\220\234\'\001\022\231\001\n\017Validat"
  "eLicense\022$.clarifai.api.ValidateLicenseR"
  "equest\032%.clarifai.api.ValidateLicenseRes"
  "ponse\"9\202\323\344\223\002\'\"\"/v2/licenses/{license_id}"
  "/validate:\001*\210\234\'\001\230\234\'\002\220\234\'\001\022\333\001\n\025ListTrainin"
  "gTemplates\022*.clarifai.api.ListTrainingTe"
  "mplatesRequest\032,.clarifai.api.MultiTrain"
  "ingTemplatesResponse\"h\202\323\344\223\002V\022C/v2/users/"
  "{user_app_id.user_id}/apps/{user_app_id."
  "app_id}/templatesZ\017\022\r/v2/templates\210\234\'\001\230\234"
  "\'\002\220\234\'!\022\363\001\n\023PostAppDuplications\022(.clarifa"
  "i.api.PostAppDuplicationsRequest\032*.clari"
  "fai.api.MultiAppDuplicationsResponse\"\205\001\202"
  "\323\344\223\002K\"F/v2/users/{user_app_id.user_id}/a"
  "pps/{user_app_id.app_id}/duplications:\001*"
  "\210\234\'\001\230\234\'\002\220\234\'\016\220\234\'\017\220\234\'\032\220\234\'\n\220\234\'\013\220\234\'\004\220\234\'\005\220\234\'%"
  "\220\234\'&\220\234\'\022\220\234\'\023\022\251\001\n\023ListAppDuplications\022(.c"
  "larifai.api.ListAppDuplicationsRequest\032*"
  ".clarifai.api.MultiAppDuplicationsRespon"
  "se\"<\202\323\344\223\002.\022,/v2/users/{user_app_id.user_"
  "id}/duplications\210\234\'\001\230\234\'\003\022\272\001\n\021GetAppDupli"
  "cation\022&.clarifai.api.GetAppDuplicationR"
  "equest\032*.clarifai.api.SingleAppDuplicati"
  "onResponse\"Q\202\323\344\223\002C\022A/v2/users/{user_app_"
  "id.user_id}/duplications/{app_duplicatio"
  "n_id}\210\234\'\001\230\234\'\003\022\310\001\n\tPostTasks\022\036.clarifai.a"
  "pi.PostTasksRequest\032\037.clarifai.api.Multi"
  "TaskResponse\"z\202\323\344\223\002T\"\?/v2/users/{user_ap"
  "p_id.user_id}/apps/{user_app_id.app_id}/"
  "tasks:\001*Z\016\"\t/v2/tasks:\001*\210\234\'\001\230\234\'\002\220\234\'7\220\234\'8"
  "\220\234\'\003\220\234\'\013\220\234\'\023\220\234\'\017\022\320\001\n\007GetTask\022\034.clarifai."
  "api.GetTaskRequest\032 .clarifai.api.Single"
  "TaskResponse\"\204\001\202\323\344\223\002b\022I/v2/users/{user_a"
  "pp_id.user_id}/apps/{user_app_id.app_id}"
  "/tasks/{task_id}Z\025\022\023/v2/tasks/{task_id}\210"
  "\234\'\001\230\234\'\002\220\234\'8\220\234\'\003\220\234\'\013\220\234\'\023\220\234\'\017\022\276\001\n\tListTask"
  "s\022\036.clarifai.api.ListTasksRequest\032\037.clar"
  "ifai.api.MultiTaskResponse\"p\202\323\344\223\002N\022\?/v2/"
  "users/{user_app_id.user_id}/apps/{user_a"
  "pp_id.app_id}/tasksZ\013\022\t/v2/tasks\210\234\'\001\230\234\'\002"
  "\220\234\'8\220\234\'\003\220\234\'\013\220\234\'\023\220\234\'\017\022\312\001\n\nPatchTasks\022\037.cl"
  "arifai.api.PatchTasksRequest\032\037.clarifai."
  "api.MultiTaskResponse\"z\202\323\344\223\002T2\?/v2/users"
  "/{user_app_id.user_id}/apps/{user_app_id"
  ".app_id}/tasks:\001*Z\0162\t/v2/tasks:\001*\210\234\'\001\230\234\'"
  "\002\220\234\'7\220\234\'8\220\234\'\003\220\234\'\013\220\234\'\023\220\234\'\017\022\276\001\n\013DeleteTask"
  "s\022 .clarifai.api.DeleteTasksRequest\032!.cl"
  "arifai.api.status.BaseResponse\"j\202\323\344\223\002T*\?"
  "/v2/users/{user_app_id.user_id}/apps/{us"
  "er_app_id.app_id}/tasks:\001*Z\016*\t/v2/tasks:"
  "\001*\210\234\'\001\230\234\'\002\220\234\'7\220\234\'8\022\362\001\n\016PostCollectors\022#."
  "clarifai.api.PostCollectorsRequest\032$.cla"
  "rifai.api.MultiCollectorResponse\"\224\001\202\323\344\223\002"
  "^\"D/v2/users/{user_app_id.user_id}/apps/"
  "{user_app_id.app_id}/collectors:\001*Z\023\"\016/v"
  "2/collectors:\001*\210\234\'\001\230\234\'\002\220\234\'\004\220\234\'%\220\234\'&\220\234\')\220"
  "\234\'\013\220\234\'\004\220\234\'\005\220\234\'\017\220\234\'\002\220\234\'\023\022\343\001\n\014GetCollector"
  "\022!.clarifai.api.GetCollectorRequest\032%.cl"
  "arifai.api.SingleCollectorResponse\"\210\001\202\323\344"
  "\223\002v\022S/v2/users/{user_app_id.user_id}/app"
  "s/{user_app_id.app_id}/collectors/{colle"
  "ctor_id}Z\037\022\035/v2/collectors/{collector_id"
  "}\210\234\'\001\230\234\'\002\220\234\'*\022\307\001\n\016ListCollectors\022#.clari"
  "fai.api.ListCollectorsRequest\032$.clarifai"
  ".api.MultiCollectorResponse\"j\202\323\344\223\002X\022D/v2"
  "/users/{user_app_id.user_id}/apps/{user_"
  "app_id.app_id}/collectorsZ\020\022\016/v2/collect"
  "ors\210\234\'\001\230\234\'\002\220\234\'*\022\323\001\n\017PatchCollectors\022$.cl"
  "arifai.api.PatchCollectorsRequest\032$.clar"
  "ifai.api.MultiCollectorResponse\"t\202\323\344\223\002^2"
  "D/v2/users/{user_app_id.user_id}/apps/{u"
  "ser_app_id.app_id}/collectors:\001*Z\0232\016/v2/"
  "collectors:\001*\210\234\'\001\230\234\'\002\220\234\')\220\234\'*\022\326\001\n\020Delete"
  "Collectors\022%.clarifai.api.DeleteCollecto"
  "rsRequest\032!.clarifai.api.status.BaseResp"
  "onse\"x\202\323\344\223\002^*D/v2/users/{user_app_id.use"
  "r_id}/apps/{user_app_id.app_id}/collecto"
  "rs:\001*Z\023*\016/v2/collectors:\001*\210\234\'\001\230\234\'\002\220\234\')\220\234"
  "\'+\220\234\'*\022\315\001\n\016PostStatValues\022#.clarifai.api"
  ".PostStatValuesRequest\032$.clarifai.api.Mu"
  "ltiStatValueResponse\"p\202\323\344\223\002b\"F/v2/users/"
  "{user_app_id.user_id}/apps/{user_app_id."
  "app_id}/stats/values:\001*Z\025\"\020/v2/stats/val"
  "ues:\001*\210\234\'\001\230\234\'\002\022\375\001\n\027PostStatValuesAggrega"
  "te\022,.clarifai.api.PostStatValuesAggregat"
  "eRequest\032-.clarifai.api.MultiStatValueAg"
  "gregateResponse\"\204\001\202\323\344\223\002v\"P/v2/users/{use"
  "r_app_id.user_id}/apps/{user_app_id.app_"
  "id}/stats/values/aggregate:\001*Z\037\"\032/v2/sta"
  "ts/values/aggregate:\001*\210\234\'\001\230\234\'\002B%\n\025com.cl"
  "arifai.grpc.apiP\001Z\003api\242\002\004CAIPb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_deps[9] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto,
  &::descriptor_table_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto,
  &::descriptor_table_proto_2fclarifai_2fapi_2futils_2fextensions_2eproto,
  &::descriptor_table_proto_2fclarifai_2fauth_2fscope_2fscope_2eproto,
  &::descriptor_table_proto_2fclarifai_2fauth_2futil_2fextension_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_sccs[239] = {
  &scc_info_CompleteResetPasswordRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_DeleteAnnotationRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_DeleteAnnotationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_DeleteAppRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_DeleteCollaboratorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_DeleteCollectorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_DeleteConceptRelationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_DeleteCreditCardRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_DeleteEmailRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_DeleteInputRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_DeleteInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_DeleteKeyRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_DeleteModelRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_DeleteModelVersionRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_DeleteModelVersionsDeploymentRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_DeleteModelsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_DeletePasswordPoliciesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_DeleteSearchRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_DeleteTasksRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_DeleteVocabConceptRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_DeleteVocabConceptsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_DeleteVocabRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_DeleteVocabsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_DeleteWorkflowRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_DeleteWorkflowsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_FetchLicenseRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_FetchLicenseResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_GetAnnotationRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_GetAnnotationSearchMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_GetAppDuplicationRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_GetAppRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_GetBillingUsageRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_GetBillingUsageResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_GetCollectorRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_GetConceptCountsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_GetConceptLanguageRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_GetConceptRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_GetHealthzRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_GetHealthzResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_GetInputCountRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_GetInputRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_GetKeyRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_GetLicenseRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_GetModelOutputInfoRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_GetModelRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_GetModelVersionMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_GetModelVersionRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_GetRealtimeUsageRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_GetRealtimeUsageResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_GetSearchRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_GetStatusCodeRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_GetSubscriptionRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_GetTaskRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_GetUserRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_GetVocabRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_GetWorkflowRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ListAnnotationSearchMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ListAnnotationsForClusterRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ListAnnotationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ListAppDuplicationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ListAppKeysRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ListAppsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ListAuthMethodsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ListAuthMethodsResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ListClustersRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ListCollaborationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ListCollaboratorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ListCollectorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ListConceptLanguagesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ListConceptMappingsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ListConceptReferencesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ListConceptRelationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ListConceptsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ListCreditCardsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ListEmailsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ListInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ListKeysRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ListKnowledgeGraphsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ListLicensesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ListModelInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ListModelVersionsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ListModelsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ListPasswordPoliciesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ListPublicWorkflowsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ListScopesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ListSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ListStatusCodesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ListTasksRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ListTrainingTemplatesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ListUsageIntervalsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ListUsageIntervalsResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ListUserBillingCyclesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ListUserBillingCyclesResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ListVocabConceptsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ListVocabsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ListWorkflowsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MultiAnnotationResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MultiAnnotationSearchMetricsResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MultiAppDuplicationsResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MultiAppResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MultiClusterResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MultiCollaborationsResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MultiCollaboratorsResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MultiCollectorResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MultiConceptCountResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MultiConceptLanguageResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MultiConceptMappingJobResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MultiConceptMappingResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MultiConceptReferenceResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MultiConceptRelationResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MultiConceptResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MultiInputResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MultiKeyResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MultiKnowledgeGraphResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MultiModelResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MultiModelVersionResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MultiOutputResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MultiScopeDepsResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MultiScopeResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MultiSearchResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MultiStatValueAggregateResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MultiStatValueResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MultiStatusCodeResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MultiTaskResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MultiTrainingTemplatesResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MultiUserResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MultiVocabResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MultiWorkflowResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MultipleCreditCardResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MultipleEmailResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MultipleLicensesResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MultiplePasswordPoliciesResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_MyScopesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_Pagination_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PatchAnnotationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PatchAppsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PatchCollaboratorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PatchCollectorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PatchConceptLanguagesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PatchConceptsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PatchCreditCardsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PatchInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PatchKeysRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PatchModelsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PatchPasswordPoliciesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PatchTasksRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PatchUserRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PatchVocabsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PatchWorkflowsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostAnnotationSearchMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostAnnotationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostAnnotationsSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostAppDuplicationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostAppsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostAttributeSearchRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostClustersSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostCollaboratorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostCollectorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostConceptLanguagesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostConceptMappingJobsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostConceptMappingsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostConceptRelationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostConceptsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostConceptsSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostCreditCardRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostEmailsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostHistoricalUsageRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostHistoricalUsageResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostInputsFileRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostInputsNiFiRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostInputsSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostKeysRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostKnowledgeGraphsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostLoginRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostModelOutputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostModelVersionMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostModelVersionsDeploymentRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostModelVersionsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostModelsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostModelsSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostPasswordPoliciesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostPrimaryEmailRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostResendVerifyRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostSearchesByIDRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostSignupRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostStatValuesAggregateRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostStatValuesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostSubscriptionRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostTasksRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostUsageRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostUsageResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostUserConsentRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostValidatePasswordRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostVerifyEmailRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostVocabConceptsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostVocabsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostWorkflowResultsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostWorkflowResultsResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostWorkflowResultsSimilarityRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostWorkflowResultsSimilarityResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_PostWorkflowsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_RequestResetPasswordRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_SingleAnnotationResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_SingleAppDuplicationResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_SingleAppResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_SingleCollectorResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_SingleConceptLanguageResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_SingleConceptMappingJobResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_SingleConceptMappingResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_SingleConceptReferenceResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_SingleConceptRelationResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_SingleConceptResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_SingleCreditCardResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_SingleEmailResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_SingleInputCountResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_SingleInputResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_SingleKeyResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_SingleKnowledgeGraphResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_SingleLicenseResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_SingleLoginResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_SingleModelResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_SingleModelVersionResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_SinglePasswordValidationResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_SingleResendVerifyResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_SingleSearchResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_SingleStatusCodeResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_SingleSubscriptionResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_SingleTaskResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_SingleUserResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_SingleVerifyEmailResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_SingleVocabResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_SingleWorkflowResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_StreamInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_TestMessage_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_TrainingTemplate_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ValidateLicenseRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base,
  &scc_info_ValidateLicenseResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once;
static bool descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto = {
  &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_initialized, descriptor_table_protodef_proto_2fclarifai_2fapi_2fservice_2eproto, "proto/clarifai/api/service.proto", 63157,
  &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once, descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_sccs, descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_deps, 239, 9,
  schemas, file_default_instances, TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto::offsets,
  file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto, 239, file_level_enum_descriptors_proto_2fclarifai_2fapi_2fservice_2eproto, file_level_service_descriptors_proto_2fclarifai_2fapi_2fservice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2fclarifai_2fapi_2fservice_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto), true);
namespace clarifai {
namespace api {

// ===================================================================

void TestMessage::InitAsDefaultInstance() {
  ::clarifai::api::_TestMessage_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
  ::clarifai::api::_TestMessage_default_instance_._instance.get_mutable()->s_ = const_cast< PROTOBUF_NAMESPACE_ID::Struct*>(
      PROTOBUF_NAMESPACE_ID::Struct::internal_default_instance());
}
class TestMessage::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const TestMessage* msg);
  static const PROTOBUF_NAMESPACE_ID::Struct& s(const TestMessage* msg);
};

const ::clarifai::api::status::Status&
TestMessage::_Internal::status(const TestMessage* msg) {
  return *msg->status_;
}
const PROTOBUF_NAMESPACE_ID::Struct&
TestMessage::_Internal::s(const TestMessage* msg) {
  return *msg->s_;
}
void TestMessage::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void TestMessage::clear_s() {
  if (GetArenaNoVirtual() == nullptr && s_ != nullptr) {
    delete s_;
  }
  s_ = nullptr;
}
TestMessage::TestMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.TestMessage)
}
TestMessage::TestMessage(const TestMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  byts_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_byts().empty()) {
    byts_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.byts_);
  }
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_s()) {
    s_ = new PROTOBUF_NAMESPACE_ID::Struct(*from.s_);
  } else {
    s_ = nullptr;
  }
  ::memcpy(&int_64_, &from.int_64_,
    static_cast<size_t>(reinterpret_cast<char*>(&f_64_) -
    reinterpret_cast<char*>(&int_64_)) + sizeof(f_64_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.TestMessage)
}

void TestMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestMessage_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  byts_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f_64_) -
      reinterpret_cast<char*>(&status_)) + sizeof(f_64_));
}

TestMessage::~TestMessage() {
  // @@protoc_insertion_point(destructor:clarifai.api.TestMessage)
  SharedDtor();
}

void TestMessage::SharedDtor() {
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  byts_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete s_;
}

void TestMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestMessage& TestMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestMessage_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void TestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.TestMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  byts_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && s_ != nullptr) {
    delete s_;
  }
  s_ = nullptr;
  ::memset(&int_64_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f_64_) -
      reinterpret_cast<char*>(&int_64_)) + sizeof(f_64_));
  _internal_metadata_.Clear();
}

const char* TestMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.TestMessage.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes byts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_byts();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 int_32 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          int_32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 int_64 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          int_64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float f_32 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          f_32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // double f_64 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          f_64_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Struct s = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_s(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.TestMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.TestMessage.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  // bytes byts = 3;
  if (this->byts().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_byts(), target);
  }

  // uint32 int_32 = 4;
  if (this->int_32() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_int_32(), target);
  }

  // uint64 int_64 = 5;
  if (this->int_64() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_int_64(), target);
  }

  // float f_32 = 6;
  if (!(this->f_32() <= 0 && this->f_32() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_f_32(), target);
  }

  // double f_64 = 7;
  if (!(this->f_64() <= 0 && this->f_64() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_f_64(), target);
  }

  // .google.protobuf.Struct s = 8;
  if (this->has_s()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::s(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.TestMessage)
  return target;
}

size_t TestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.TestMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // bytes byts = 3;
  if (this->byts().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_byts());
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .google.protobuf.Struct s = 8;
  if (this->has_s()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *s_);
  }

  // uint64 int_64 = 5;
  if (this->int_64() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_int_64());
  }

  // uint32 int_32 = 4;
  if (this->int_32() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_int_32());
  }

  // float f_32 = 6;
  if (!(this->f_32() <= 0 && this->f_32() >= 0)) {
    total_size += 1 + 4;
  }

  // double f_64 = 7;
  if (!(this->f_64() <= 0 && this->f_64() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.TestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TestMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.TestMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.TestMessage)
    MergeFrom(*source);
  }
}

void TestMessage::MergeFrom(const TestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.TestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.byts().size() > 0) {

    byts_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.byts_);
  }
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.has_s()) {
    _internal_mutable_s()->PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_s());
  }
  if (from.int_64() != 0) {
    _internal_set_int_64(from._internal_int_64());
  }
  if (from.int_32() != 0) {
    _internal_set_int_32(from._internal_int_32());
  }
  if (!(from.f_32() <= 0 && from.f_32() >= 0)) {
    _internal_set_f_32(from._internal_f_32());
  }
  if (!(from.f_64() <= 0 && from.f_64() >= 0)) {
    _internal_set_f_64(from._internal_f_64());
  }
}

void TestMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.TestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMessage::CopyFrom(const TestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.TestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessage::IsInitialized() const {
  return true;
}

void TestMessage::InternalSwap(TestMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  byts_.Swap(&other->byts_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
  swap(s_, other->s_);
  swap(int_64_, other->int_64_);
  swap(int_32_, other->int_32_);
  swap(f_32_, other->f_32_);
  swap(f_64_, other->f_64_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Pagination::InitAsDefaultInstance() {
}
class Pagination::_Internal {
 public:
};

Pagination::Pagination()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.Pagination)
}
Pagination::Pagination(const Pagination& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Pagination)
}

void Pagination::SharedCtor() {
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
}

Pagination::~Pagination() {
  // @@protoc_insertion_point(destructor:clarifai.api.Pagination)
  SharedDtor();
}

void Pagination::SharedDtor() {
}

void Pagination::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Pagination& Pagination::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Pagination_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void Pagination::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Pagination)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear();
}

const char* Pagination::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 page = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 per_page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pagination::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Pagination)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 page = 1;
  if (this->page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_page(), target);
  }

  // uint32 per_page = 2;
  if (this->per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Pagination)
  return target;
}

size_t Pagination::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Pagination)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 page = 1;
  if (this->page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page());
  }

  // uint32 per_page = 2;
  if (this->per_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_per_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pagination::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.Pagination)
  GOOGLE_DCHECK_NE(&from, this);
  const Pagination* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Pagination>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.Pagination)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.Pagination)
    MergeFrom(*source);
  }
}

void Pagination::MergeFrom(const Pagination& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Pagination)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from.per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
}

void Pagination::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.Pagination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pagination::CopyFrom(const Pagination& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Pagination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pagination::IsInitialized() const {
  return true;
}

void Pagination::InternalSwap(Pagination* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(page_, other->page_);
  swap(per_page_, other->per_page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Pagination::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAnnotationRequest::InitAsDefaultInstance() {
  ::clarifai::api::_GetAnnotationRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class GetAnnotationRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetAnnotationRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetAnnotationRequest::_Internal::user_app_id(const GetAnnotationRequest* msg) {
  return *msg->user_app_id_;
}
void GetAnnotationRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetAnnotationRequest::GetAnnotationRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.GetAnnotationRequest)
}
GetAnnotationRequest::GetAnnotationRequest(const GetAnnotationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  annotation_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_annotation_id().empty()) {
    annotation_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.annotation_id_);
  }
  input_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_input_id().empty()) {
    input_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.input_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetAnnotationRequest)
}

void GetAnnotationRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAnnotationRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  annotation_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  input_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

GetAnnotationRequest::~GetAnnotationRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetAnnotationRequest)
  SharedDtor();
}

void GetAnnotationRequest::SharedDtor() {
  annotation_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  input_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetAnnotationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAnnotationRequest& GetAnnotationRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAnnotationRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void GetAnnotationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetAnnotationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  annotation_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  input_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetAnnotationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string annotation_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_annotation_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetAnnotationRequest.annotation_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string input_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_input_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetAnnotationRequest.input_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAnnotationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetAnnotationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string annotation_id = 2;
  if (this->annotation_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_annotation_id().data(), static_cast<int>(this->_internal_annotation_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetAnnotationRequest.annotation_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_annotation_id(), target);
  }

  // string input_id = 3;
  if (this->input_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_input_id().data(), static_cast<int>(this->_internal_input_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetAnnotationRequest.input_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_input_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetAnnotationRequest)
  return target;
}

size_t GetAnnotationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetAnnotationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string annotation_id = 2;
  if (this->annotation_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_annotation_id());
  }

  // string input_id = 3;
  if (this->input_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_input_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAnnotationRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.GetAnnotationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAnnotationRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAnnotationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.GetAnnotationRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.GetAnnotationRequest)
    MergeFrom(*source);
  }
}

void GetAnnotationRequest::MergeFrom(const GetAnnotationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetAnnotationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.annotation_id().size() > 0) {

    annotation_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.annotation_id_);
  }
  if (from.input_id().size() > 0) {

    input_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.input_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void GetAnnotationRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.GetAnnotationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAnnotationRequest::CopyFrom(const GetAnnotationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetAnnotationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAnnotationRequest::IsInitialized() const {
  return true;
}

void GetAnnotationRequest::InternalSwap(GetAnnotationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  annotation_id_.Swap(&other->annotation_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  input_id_.Swap(&other->input_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAnnotationRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListAnnotationsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_ListAnnotationsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class ListAnnotationsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListAnnotationsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListAnnotationsRequest::_Internal::user_app_id(const ListAnnotationsRequest* msg) {
  return *msg->user_app_id_;
}
void ListAnnotationsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void ListAnnotationsRequest::clear_statuses() {
  statuses_.Clear();
}
ListAnnotationsRequest::ListAnnotationsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ListAnnotationsRequest)
}
ListAnnotationsRequest::ListAnnotationsRequest(const ListAnnotationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ids_(from.ids_),
      input_ids_(from.input_ids_),
      statuses_(from.statuses_),
      user_ids_(from.user_ids_),
      model_version_ids_(from.model_version_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&list_all_annotations_, &from.list_all_annotations_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&list_all_annotations_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListAnnotationsRequest)
}

void ListAnnotationsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListAnnotationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

ListAnnotationsRequest::~ListAnnotationsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListAnnotationsRequest)
  SharedDtor();
}

void ListAnnotationsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListAnnotationsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListAnnotationsRequest& ListAnnotationsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListAnnotationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ListAnnotationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListAnnotationsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  input_ids_.Clear();
  statuses_.Clear();
  user_ids_.Clear();
  model_version_ids_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&list_all_annotations_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&list_all_annotations_)) + sizeof(per_page_));
  _internal_metadata_.Clear();
}

const char* ListAnnotationsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListAnnotationsRequest.ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string input_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_input_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListAnnotationsRequest.input_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.status.Status statuses = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_statuses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // bool list_all_annotations = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          list_all_annotations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 page = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 per_page = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string user_ids = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_user_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListAnnotationsRequest.user_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string model_version_ids = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_model_version_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListAnnotationsRequest.model_version_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListAnnotationsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListAnnotationsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated string ids = 2;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListAnnotationsRequest.ids");
    target = stream->WriteString(2, s, target);
  }

  // repeated string input_ids = 3;
  for (int i = 0, n = this->_internal_input_ids_size(); i < n; i++) {
    const auto& s = this->_internal_input_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListAnnotationsRequest.input_ids");
    target = stream->WriteString(3, s, target);
  }

  // repeated .clarifai.api.status.Status statuses = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_statuses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_statuses(i), target, stream);
  }

  // bool list_all_annotations = 6;
  if (this->list_all_annotations() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_list_all_annotations(), target);
  }

  // uint32 page = 7;
  if (this->page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_page(), target);
  }

  // uint32 per_page = 8;
  if (this->per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_per_page(), target);
  }

  // repeated string user_ids = 9;
  for (int i = 0, n = this->_internal_user_ids_size(); i < n; i++) {
    const auto& s = this->_internal_user_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListAnnotationsRequest.user_ids");
    target = stream->WriteString(9, s, target);
  }

  // repeated string model_version_ids = 10;
  for (int i = 0, n = this->_internal_model_version_ids_size(); i < n; i++) {
    const auto& s = this->_internal_model_version_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListAnnotationsRequest.model_version_ids");
    target = stream->WriteString(10, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListAnnotationsRequest)
  return target;
}

size_t ListAnnotationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListAnnotationsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ids_.size());
  for (int i = 0, n = ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ids_.Get(i));
  }

  // repeated string input_ids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(input_ids_.size());
  for (int i = 0, n = input_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      input_ids_.Get(i));
  }

  // repeated .clarifai.api.status.Status statuses = 5;
  total_size += 1UL * this->_internal_statuses_size();
  for (const auto& msg : this->statuses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string user_ids = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(user_ids_.size());
  for (int i = 0, n = user_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      user_ids_.Get(i));
  }

  // repeated string model_version_ids = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(model_version_ids_.size());
  for (int i = 0, n = model_version_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      model_version_ids_.Get(i));
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // bool list_all_annotations = 6;
  if (this->list_all_annotations() != 0) {
    total_size += 1 + 1;
  }

  // uint32 page = 7;
  if (this->page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page());
  }

  // uint32 per_page = 8;
  if (this->per_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_per_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListAnnotationsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ListAnnotationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListAnnotationsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListAnnotationsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ListAnnotationsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ListAnnotationsRequest)
    MergeFrom(*source);
  }
}

void ListAnnotationsRequest::MergeFrom(const ListAnnotationsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListAnnotationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  input_ids_.MergeFrom(from.input_ids_);
  statuses_.MergeFrom(from.statuses_);
  user_ids_.MergeFrom(from.user_ids_);
  model_version_ids_.MergeFrom(from.model_version_ids_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.list_all_annotations() != 0) {
    _internal_set_list_all_annotations(from._internal_list_all_annotations());
  }
  if (from.page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from.per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
}

void ListAnnotationsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ListAnnotationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListAnnotationsRequest::CopyFrom(const ListAnnotationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListAnnotationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListAnnotationsRequest::IsInitialized() const {
  return true;
}

void ListAnnotationsRequest::InternalSwap(ListAnnotationsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
  input_ids_.InternalSwap(&other->input_ids_);
  statuses_.InternalSwap(&other->statuses_);
  user_ids_.InternalSwap(&other->user_ids_);
  model_version_ids_.InternalSwap(&other->model_version_ids_);
  swap(user_app_id_, other->user_app_id_);
  swap(list_all_annotations_, other->list_all_annotations_);
  swap(page_, other->page_);
  swap(per_page_, other->per_page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListAnnotationsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostAnnotationsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostAnnotationsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PostAnnotationsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostAnnotationsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostAnnotationsRequest::_Internal::user_app_id(const PostAnnotationsRequest* msg) {
  return *msg->user_app_id_;
}
void PostAnnotationsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostAnnotationsRequest::clear_annotations() {
  annotations_.Clear();
}
PostAnnotationsRequest::PostAnnotationsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostAnnotationsRequest)
}
PostAnnotationsRequest::PostAnnotationsRequest(const PostAnnotationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      annotations_(from.annotations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostAnnotationsRequest)
}

void PostAnnotationsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostAnnotationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  user_app_id_ = nullptr;
}

PostAnnotationsRequest::~PostAnnotationsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostAnnotationsRequest)
  SharedDtor();
}

void PostAnnotationsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostAnnotationsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostAnnotationsRequest& PostAnnotationsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostAnnotationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostAnnotationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostAnnotationsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  annotations_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostAnnotationsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Annotation annotations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_annotations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostAnnotationsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostAnnotationsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Annotation annotations = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_annotations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_annotations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostAnnotationsRequest)
  return target;
}

size_t PostAnnotationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostAnnotationsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Annotation annotations = 2;
  total_size += 1UL * this->_internal_annotations_size();
  for (const auto& msg : this->annotations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostAnnotationsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostAnnotationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostAnnotationsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostAnnotationsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostAnnotationsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostAnnotationsRequest)
    MergeFrom(*source);
  }
}

void PostAnnotationsRequest::MergeFrom(const PostAnnotationsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostAnnotationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  annotations_.MergeFrom(from.annotations_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void PostAnnotationsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostAnnotationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostAnnotationsRequest::CopyFrom(const PostAnnotationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostAnnotationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostAnnotationsRequest::IsInitialized() const {
  return true;
}

void PostAnnotationsRequest::InternalSwap(PostAnnotationsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  annotations_.InternalSwap(&other->annotations_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostAnnotationsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PatchAnnotationsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PatchAnnotationsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PatchAnnotationsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchAnnotationsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchAnnotationsRequest::_Internal::user_app_id(const PatchAnnotationsRequest* msg) {
  return *msg->user_app_id_;
}
void PatchAnnotationsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PatchAnnotationsRequest::clear_annotations() {
  annotations_.Clear();
}
PatchAnnotationsRequest::PatchAnnotationsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PatchAnnotationsRequest)
}
PatchAnnotationsRequest::PatchAnnotationsRequest(const PatchAnnotationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      annotations_(from.annotations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action().empty()) {
    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchAnnotationsRequest)
}

void PatchAnnotationsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PatchAnnotationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

PatchAnnotationsRequest::~PatchAnnotationsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchAnnotationsRequest)
  SharedDtor();
}

void PatchAnnotationsRequest::SharedDtor() {
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PatchAnnotationsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PatchAnnotationsRequest& PatchAnnotationsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PatchAnnotationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PatchAnnotationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchAnnotationsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  annotations_.Clear();
  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PatchAnnotationsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Annotation annotations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_annotations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchAnnotationsRequest.action"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PatchAnnotationsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchAnnotationsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Annotation annotations = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_annotations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_annotations(i), target, stream);
  }

  // string action = 3;
  if (this->action().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchAnnotationsRequest.action");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchAnnotationsRequest)
  return target;
}

size_t PatchAnnotationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchAnnotationsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Annotation annotations = 2;
  total_size += 1UL * this->_internal_annotations_size();
  for (const auto& msg : this->annotations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string action = 3;
  if (this->action().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PatchAnnotationsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PatchAnnotationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PatchAnnotationsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PatchAnnotationsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PatchAnnotationsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PatchAnnotationsRequest)
    MergeFrom(*source);
  }
}

void PatchAnnotationsRequest::MergeFrom(const PatchAnnotationsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchAnnotationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  annotations_.MergeFrom(from.annotations_);
  if (from.action().size() > 0) {

    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void PatchAnnotationsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PatchAnnotationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatchAnnotationsRequest::CopyFrom(const PatchAnnotationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchAnnotationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchAnnotationsRequest::IsInitialized() const {
  return true;
}

void PatchAnnotationsRequest::InternalSwap(PatchAnnotationsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  annotations_.InternalSwap(&other->annotations_);
  action_.Swap(&other->action_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchAnnotationsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteAnnotationRequest::InitAsDefaultInstance() {
  ::clarifai::api::_DeleteAnnotationRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class DeleteAnnotationRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteAnnotationRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteAnnotationRequest::_Internal::user_app_id(const DeleteAnnotationRequest* msg) {
  return *msg->user_app_id_;
}
void DeleteAnnotationRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
DeleteAnnotationRequest::DeleteAnnotationRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.DeleteAnnotationRequest)
}
DeleteAnnotationRequest::DeleteAnnotationRequest(const DeleteAnnotationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  input_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_input_id().empty()) {
    input_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.input_id_);
  }
  annotation_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_annotation_id().empty()) {
    annotation_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.annotation_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteAnnotationRequest)
}

void DeleteAnnotationRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteAnnotationRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  input_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  annotation_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

DeleteAnnotationRequest::~DeleteAnnotationRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteAnnotationRequest)
  SharedDtor();
}

void DeleteAnnotationRequest::SharedDtor() {
  input_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  annotation_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void DeleteAnnotationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteAnnotationRequest& DeleteAnnotationRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteAnnotationRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void DeleteAnnotationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteAnnotationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  annotation_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* DeleteAnnotationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string input_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_input_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteAnnotationRequest.input_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string annotation_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_annotation_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteAnnotationRequest.annotation_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteAnnotationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteAnnotationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string input_id = 2;
  if (this->input_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_input_id().data(), static_cast<int>(this->_internal_input_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteAnnotationRequest.input_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_input_id(), target);
  }

  // string annotation_id = 3;
  if (this->annotation_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_annotation_id().data(), static_cast<int>(this->_internal_annotation_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteAnnotationRequest.annotation_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_annotation_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteAnnotationRequest)
  return target;
}

size_t DeleteAnnotationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteAnnotationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string input_id = 2;
  if (this->input_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_input_id());
  }

  // string annotation_id = 3;
  if (this->annotation_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_annotation_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteAnnotationRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.DeleteAnnotationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteAnnotationRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteAnnotationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.DeleteAnnotationRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.DeleteAnnotationRequest)
    MergeFrom(*source);
  }
}

void DeleteAnnotationRequest::MergeFrom(const DeleteAnnotationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteAnnotationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.input_id().size() > 0) {

    input_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.input_id_);
  }
  if (from.annotation_id().size() > 0) {

    annotation_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.annotation_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void DeleteAnnotationRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.DeleteAnnotationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteAnnotationRequest::CopyFrom(const DeleteAnnotationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteAnnotationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteAnnotationRequest::IsInitialized() const {
  return true;
}

void DeleteAnnotationRequest::InternalSwap(DeleteAnnotationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  input_id_.Swap(&other->input_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  annotation_id_.Swap(&other->annotation_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteAnnotationRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteAnnotationsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_DeleteAnnotationsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class DeleteAnnotationsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteAnnotationsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteAnnotationsRequest::_Internal::user_app_id(const DeleteAnnotationsRequest* msg) {
  return *msg->user_app_id_;
}
void DeleteAnnotationsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
DeleteAnnotationsRequest::DeleteAnnotationsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.DeleteAnnotationsRequest)
}
DeleteAnnotationsRequest::DeleteAnnotationsRequest(const DeleteAnnotationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ids_(from.ids_),
      input_ids_(from.input_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteAnnotationsRequest)
}

void DeleteAnnotationsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteAnnotationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  user_app_id_ = nullptr;
}

DeleteAnnotationsRequest::~DeleteAnnotationsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteAnnotationsRequest)
  SharedDtor();
}

void DeleteAnnotationsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void DeleteAnnotationsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteAnnotationsRequest& DeleteAnnotationsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteAnnotationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void DeleteAnnotationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteAnnotationsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  input_ids_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* DeleteAnnotationsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteAnnotationsRequest.ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string input_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_input_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteAnnotationsRequest.input_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteAnnotationsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteAnnotationsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated string ids = 2;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteAnnotationsRequest.ids");
    target = stream->WriteString(2, s, target);
  }

  // repeated string input_ids = 3;
  for (int i = 0, n = this->_internal_input_ids_size(); i < n; i++) {
    const auto& s = this->_internal_input_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteAnnotationsRequest.input_ids");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteAnnotationsRequest)
  return target;
}

size_t DeleteAnnotationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteAnnotationsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ids_.size());
  for (int i = 0, n = ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ids_.Get(i));
  }

  // repeated string input_ids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(input_ids_.size());
  for (int i = 0, n = input_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      input_ids_.Get(i));
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteAnnotationsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.DeleteAnnotationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteAnnotationsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteAnnotationsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.DeleteAnnotationsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.DeleteAnnotationsRequest)
    MergeFrom(*source);
  }
}

void DeleteAnnotationsRequest::MergeFrom(const DeleteAnnotationsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteAnnotationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  input_ids_.MergeFrom(from.input_ids_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void DeleteAnnotationsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.DeleteAnnotationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteAnnotationsRequest::CopyFrom(const DeleteAnnotationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteAnnotationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteAnnotationsRequest::IsInitialized() const {
  return true;
}

void DeleteAnnotationsRequest::InternalSwap(DeleteAnnotationsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
  input_ids_.InternalSwap(&other->input_ids_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteAnnotationsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SingleAnnotationResponse::InitAsDefaultInstance() {
  ::clarifai::api::_SingleAnnotationResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
  ::clarifai::api::_SingleAnnotationResponse_default_instance_._instance.get_mutable()->annotation_ = const_cast< ::clarifai::api::Annotation*>(
      ::clarifai::api::Annotation::internal_default_instance());
}
class SingleAnnotationResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleAnnotationResponse* msg);
  static const ::clarifai::api::Annotation& annotation(const SingleAnnotationResponse* msg);
};

const ::clarifai::api::status::Status&
SingleAnnotationResponse::_Internal::status(const SingleAnnotationResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::Annotation&
SingleAnnotationResponse::_Internal::annotation(const SingleAnnotationResponse* msg) {
  return *msg->annotation_;
}
void SingleAnnotationResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleAnnotationResponse::clear_annotation() {
  if (GetArenaNoVirtual() == nullptr && annotation_ != nullptr) {
    delete annotation_;
  }
  annotation_ = nullptr;
}
SingleAnnotationResponse::SingleAnnotationResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.SingleAnnotationResponse)
}
SingleAnnotationResponse::SingleAnnotationResponse(const SingleAnnotationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_annotation()) {
    annotation_ = new ::clarifai::api::Annotation(*from.annotation_);
  } else {
    annotation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleAnnotationResponse)
}

void SingleAnnotationResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SingleAnnotationResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&annotation_) -
      reinterpret_cast<char*>(&status_)) + sizeof(annotation_));
}

SingleAnnotationResponse::~SingleAnnotationResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleAnnotationResponse)
  SharedDtor();
}

void SingleAnnotationResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete annotation_;
}

void SingleAnnotationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleAnnotationResponse& SingleAnnotationResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleAnnotationResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void SingleAnnotationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleAnnotationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && annotation_ != nullptr) {
    delete annotation_;
  }
  annotation_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SingleAnnotationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Annotation annotation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_annotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleAnnotationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleAnnotationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.Annotation annotation = 2;
  if (this->has_annotation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::annotation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleAnnotationResponse)
  return target;
}

size_t SingleAnnotationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleAnnotationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.Annotation annotation = 2;
  if (this->has_annotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *annotation_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleAnnotationResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.SingleAnnotationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleAnnotationResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleAnnotationResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.SingleAnnotationResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.SingleAnnotationResponse)
    MergeFrom(*source);
  }
}

void SingleAnnotationResponse::MergeFrom(const SingleAnnotationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleAnnotationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.has_annotation()) {
    _internal_mutable_annotation()->::clarifai::api::Annotation::MergeFrom(from._internal_annotation());
  }
}

void SingleAnnotationResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.SingleAnnotationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleAnnotationResponse::CopyFrom(const SingleAnnotationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleAnnotationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleAnnotationResponse::IsInitialized() const {
  return true;
}

void SingleAnnotationResponse::InternalSwap(SingleAnnotationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(annotation_, other->annotation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleAnnotationResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiAnnotationResponse::InitAsDefaultInstance() {
  ::clarifai::api::_MultiAnnotationResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class MultiAnnotationResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiAnnotationResponse* msg);
};

const ::clarifai::api::status::Status&
MultiAnnotationResponse::_Internal::status(const MultiAnnotationResponse* msg) {
  return *msg->status_;
}
void MultiAnnotationResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiAnnotationResponse::clear_annotations() {
  annotations_.Clear();
}
MultiAnnotationResponse::MultiAnnotationResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MultiAnnotationResponse)
}
MultiAnnotationResponse::MultiAnnotationResponse(const MultiAnnotationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      annotations_(from.annotations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiAnnotationResponse)
}

void MultiAnnotationResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiAnnotationResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

MultiAnnotationResponse::~MultiAnnotationResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiAnnotationResponse)
  SharedDtor();
}

void MultiAnnotationResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void MultiAnnotationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiAnnotationResponse& MultiAnnotationResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiAnnotationResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiAnnotationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiAnnotationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  annotations_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultiAnnotationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Annotation annotations = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_annotations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiAnnotationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiAnnotationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.Annotation annotations = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_annotations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_annotations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiAnnotationResponse)
  return target;
}

size_t MultiAnnotationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiAnnotationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Annotation annotations = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_annotations_size();
  for (const auto& msg : this->annotations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiAnnotationResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MultiAnnotationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiAnnotationResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiAnnotationResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MultiAnnotationResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MultiAnnotationResponse)
    MergeFrom(*source);
  }
}

void MultiAnnotationResponse::MergeFrom(const MultiAnnotationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiAnnotationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  annotations_.MergeFrom(from.annotations_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void MultiAnnotationResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MultiAnnotationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiAnnotationResponse::CopyFrom(const MultiAnnotationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiAnnotationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiAnnotationResponse::IsInitialized() const {
  return true;
}

void MultiAnnotationResponse::InternalSwap(MultiAnnotationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  annotations_.InternalSwap(&other->annotations_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiAnnotationResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAppRequest::InitAsDefaultInstance() {
  ::clarifai::api::_GetAppRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class GetAppRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetAppRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetAppRequest::_Internal::user_app_id(const GetAppRequest* msg) {
  return *msg->user_app_id_;
}
void GetAppRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetAppRequest::GetAppRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.GetAppRequest)
}
GetAppRequest::GetAppRequest(const GetAppRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetAppRequest)
}

void GetAppRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAppRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  user_app_id_ = nullptr;
}

GetAppRequest::~GetAppRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetAppRequest)
  SharedDtor();
}

void GetAppRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetAppRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAppRequest& GetAppRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAppRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void GetAppRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetAppRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetAppRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAppRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetAppRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetAppRequest)
  return target;
}

size_t GetAppRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetAppRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAppRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.GetAppRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAppRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAppRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.GetAppRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.GetAppRequest)
    MergeFrom(*source);
  }
}

void GetAppRequest::MergeFrom(const GetAppRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetAppRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void GetAppRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.GetAppRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAppRequest::CopyFrom(const GetAppRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetAppRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAppRequest::IsInitialized() const {
  return true;
}

void GetAppRequest::InternalSwap(GetAppRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAppRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListAppsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_ListAppsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class ListAppsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListAppsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListAppsRequest::_Internal::user_app_id(const ListAppsRequest* msg) {
  return *msg->user_app_id_;
}
void ListAppsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListAppsRequest::ListAppsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ListAppsRequest)
}
ListAppsRequest::ListAppsRequest(const ListAppsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListAppsRequest)
}

void ListAppsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListAppsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

ListAppsRequest::~ListAppsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListAppsRequest)
  SharedDtor();
}

void ListAppsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListAppsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListAppsRequest& ListAppsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListAppsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ListAppsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListAppsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear();
}

const char* ListAppsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListAppsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListAppsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // uint32 page = 2;
  if (this->page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListAppsRequest)
  return target;
}

size_t ListAppsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListAppsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 2;
  if (this->page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->per_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_per_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListAppsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ListAppsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListAppsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListAppsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ListAppsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ListAppsRequest)
    MergeFrom(*source);
  }
}

void ListAppsRequest::MergeFrom(const ListAppsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListAppsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from.per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
}

void ListAppsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ListAppsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListAppsRequest::CopyFrom(const ListAppsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListAppsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListAppsRequest::IsInitialized() const {
  return true;
}

void ListAppsRequest::InternalSwap(ListAppsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_app_id_, other->user_app_id_);
  swap(page_, other->page_);
  swap(per_page_, other->per_page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListAppsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostAppsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostAppsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PostAppsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostAppsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostAppsRequest::_Internal::user_app_id(const PostAppsRequest* msg) {
  return *msg->user_app_id_;
}
void PostAppsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostAppsRequest::clear_apps() {
  apps_.Clear();
}
PostAppsRequest::PostAppsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostAppsRequest)
}
PostAppsRequest::PostAppsRequest(const PostAppsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      apps_(from.apps_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostAppsRequest)
}

void PostAppsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostAppsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  user_app_id_ = nullptr;
}

PostAppsRequest::~PostAppsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostAppsRequest)
  SharedDtor();
}

void PostAppsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostAppsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostAppsRequest& PostAppsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostAppsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostAppsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostAppsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  apps_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostAppsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.App apps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_apps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostAppsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostAppsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.App apps = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_apps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_apps(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostAppsRequest)
  return target;
}

size_t PostAppsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostAppsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.App apps = 2;
  total_size += 1UL * this->_internal_apps_size();
  for (const auto& msg : this->apps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostAppsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostAppsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostAppsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostAppsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostAppsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostAppsRequest)
    MergeFrom(*source);
  }
}

void PostAppsRequest::MergeFrom(const PostAppsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostAppsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  apps_.MergeFrom(from.apps_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void PostAppsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostAppsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostAppsRequest::CopyFrom(const PostAppsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostAppsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostAppsRequest::IsInitialized() const {
  return true;
}

void PostAppsRequest::InternalSwap(PostAppsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  apps_.InternalSwap(&other->apps_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostAppsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteAppRequest::InitAsDefaultInstance() {
  ::clarifai::api::_DeleteAppRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class DeleteAppRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteAppRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteAppRequest::_Internal::user_app_id(const DeleteAppRequest* msg) {
  return *msg->user_app_id_;
}
void DeleteAppRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
DeleteAppRequest::DeleteAppRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.DeleteAppRequest)
}
DeleteAppRequest::DeleteAppRequest(const DeleteAppRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteAppRequest)
}

void DeleteAppRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteAppRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  user_app_id_ = nullptr;
}

DeleteAppRequest::~DeleteAppRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteAppRequest)
  SharedDtor();
}

void DeleteAppRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void DeleteAppRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteAppRequest& DeleteAppRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteAppRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void DeleteAppRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteAppRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* DeleteAppRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteAppRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteAppRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteAppRequest)
  return target;
}

size_t DeleteAppRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteAppRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteAppRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.DeleteAppRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteAppRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteAppRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.DeleteAppRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.DeleteAppRequest)
    MergeFrom(*source);
  }
}

void DeleteAppRequest::MergeFrom(const DeleteAppRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteAppRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void DeleteAppRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.DeleteAppRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteAppRequest::CopyFrom(const DeleteAppRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteAppRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteAppRequest::IsInitialized() const {
  return true;
}

void DeleteAppRequest::InternalSwap(DeleteAppRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteAppRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PatchAppsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PatchAppsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
  ::clarifai::api::_PatchAppsRequest_default_instance_._instance.get_mutable()->metadata_action_ = const_cast< ::clarifai::api::PatchAction*>(
      ::clarifai::api::PatchAction::internal_default_instance());
}
class PatchAppsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchAppsRequest* msg);
  static const ::clarifai::api::PatchAction& metadata_action(const PatchAppsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchAppsRequest::_Internal::user_app_id(const PatchAppsRequest* msg) {
  return *msg->user_app_id_;
}
const ::clarifai::api::PatchAction&
PatchAppsRequest::_Internal::metadata_action(const PatchAppsRequest* msg) {
  return *msg->metadata_action_;
}
void PatchAppsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PatchAppsRequest::clear_apps() {
  apps_.Clear();
}
void PatchAppsRequest::clear_metadata_action() {
  if (GetArenaNoVirtual() == nullptr && metadata_action_ != nullptr) {
    delete metadata_action_;
  }
  metadata_action_ = nullptr;
}
PatchAppsRequest::PatchAppsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PatchAppsRequest)
}
PatchAppsRequest::PatchAppsRequest(const PatchAppsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      apps_(from.apps_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action().empty()) {
    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  if (from._internal_has_metadata_action()) {
    metadata_action_ = new ::clarifai::api::PatchAction(*from.metadata_action_);
  } else {
    metadata_action_ = nullptr;
  }
  reindex_ = from.reindex_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchAppsRequest)
}

void PatchAppsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PatchAppsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reindex_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(reindex_));
}

PatchAppsRequest::~PatchAppsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchAppsRequest)
  SharedDtor();
}

void PatchAppsRequest::SharedDtor() {
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
  if (this != internal_default_instance()) delete metadata_action_;
}

void PatchAppsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PatchAppsRequest& PatchAppsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PatchAppsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PatchAppsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchAppsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  apps_.Clear();
  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && metadata_action_ != nullptr) {
    delete metadata_action_;
  }
  metadata_action_ = nullptr;
  reindex_ = false;
  _internal_metadata_.Clear();
}

const char* PatchAppsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.App apps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_apps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchAppsRequest.action"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.PatchAction metadata_action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata_action(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool reindex = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          reindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PatchAppsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchAppsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.App apps = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_apps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_apps(i), target, stream);
  }

  // string action = 3;
  if (this->action().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchAppsRequest.action");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_action(), target);
  }

  // .clarifai.api.PatchAction metadata_action = 4;
  if (this->has_metadata_action()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::metadata_action(this), target, stream);
  }

  // bool reindex = 5;
  if (this->reindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_reindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchAppsRequest)
  return target;
}

size_t PatchAppsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchAppsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.App apps = 2;
  total_size += 1UL * this->_internal_apps_size();
  for (const auto& msg : this->apps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string action = 3;
  if (this->action().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // .clarifai.api.PatchAction metadata_action = 4;
  if (this->has_metadata_action()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_action_);
  }

  // bool reindex = 5;
  if (this->reindex() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PatchAppsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PatchAppsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PatchAppsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PatchAppsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PatchAppsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PatchAppsRequest)
    MergeFrom(*source);
  }
}

void PatchAppsRequest::MergeFrom(const PatchAppsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchAppsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  apps_.MergeFrom(from.apps_);
  if (from.action().size() > 0) {

    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.has_metadata_action()) {
    _internal_mutable_metadata_action()->::clarifai::api::PatchAction::MergeFrom(from._internal_metadata_action());
  }
  if (from.reindex() != 0) {
    _internal_set_reindex(from._internal_reindex());
  }
}

void PatchAppsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PatchAppsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatchAppsRequest::CopyFrom(const PatchAppsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchAppsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchAppsRequest::IsInitialized() const {
  return true;
}

void PatchAppsRequest::InternalSwap(PatchAppsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  apps_.InternalSwap(&other->apps_);
  action_.Swap(&other->action_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
  swap(metadata_action_, other->metadata_action_);
  swap(reindex_, other->reindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchAppsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SingleAppResponse::InitAsDefaultInstance() {
  ::clarifai::api::_SingleAppResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
  ::clarifai::api::_SingleAppResponse_default_instance_._instance.get_mutable()->app_ = const_cast< ::clarifai::api::App*>(
      ::clarifai::api::App::internal_default_instance());
}
class SingleAppResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleAppResponse* msg);
  static const ::clarifai::api::App& app(const SingleAppResponse* msg);
};

const ::clarifai::api::status::Status&
SingleAppResponse::_Internal::status(const SingleAppResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::App&
SingleAppResponse::_Internal::app(const SingleAppResponse* msg) {
  return *msg->app_;
}
void SingleAppResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleAppResponse::clear_app() {
  if (GetArenaNoVirtual() == nullptr && app_ != nullptr) {
    delete app_;
  }
  app_ = nullptr;
}
SingleAppResponse::SingleAppResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.SingleAppResponse)
}
SingleAppResponse::SingleAppResponse(const SingleAppResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_app()) {
    app_ = new ::clarifai::api::App(*from.app_);
  } else {
    app_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleAppResponse)
}

void SingleAppResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SingleAppResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&app_) -
      reinterpret_cast<char*>(&status_)) + sizeof(app_));
}

SingleAppResponse::~SingleAppResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleAppResponse)
  SharedDtor();
}

void SingleAppResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete app_;
}

void SingleAppResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleAppResponse& SingleAppResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleAppResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void SingleAppResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleAppResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && app_ != nullptr) {
    delete app_;
  }
  app_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SingleAppResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.App app = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_app(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleAppResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleAppResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.App app = 2;
  if (this->has_app()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::app(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleAppResponse)
  return target;
}

size_t SingleAppResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleAppResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.App app = 2;
  if (this->has_app()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *app_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleAppResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.SingleAppResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleAppResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleAppResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.SingleAppResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.SingleAppResponse)
    MergeFrom(*source);
  }
}

void SingleAppResponse::MergeFrom(const SingleAppResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleAppResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.has_app()) {
    _internal_mutable_app()->::clarifai::api::App::MergeFrom(from._internal_app());
  }
}

void SingleAppResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.SingleAppResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleAppResponse::CopyFrom(const SingleAppResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleAppResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleAppResponse::IsInitialized() const {
  return true;
}

void SingleAppResponse::InternalSwap(SingleAppResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(app_, other->app_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleAppResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiAppResponse::InitAsDefaultInstance() {
  ::clarifai::api::_MultiAppResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class MultiAppResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiAppResponse* msg);
};

const ::clarifai::api::status::Status&
MultiAppResponse::_Internal::status(const MultiAppResponse* msg) {
  return *msg->status_;
}
void MultiAppResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiAppResponse::clear_apps() {
  apps_.Clear();
}
MultiAppResponse::MultiAppResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MultiAppResponse)
}
MultiAppResponse::MultiAppResponse(const MultiAppResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      apps_(from.apps_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiAppResponse)
}

void MultiAppResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiAppResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

MultiAppResponse::~MultiAppResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiAppResponse)
  SharedDtor();
}

void MultiAppResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void MultiAppResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiAppResponse& MultiAppResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiAppResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiAppResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiAppResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  apps_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultiAppResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.App apps = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_apps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiAppResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiAppResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.App apps = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_apps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_apps(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiAppResponse)
  return target;
}

size_t MultiAppResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiAppResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.App apps = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_apps_size();
  for (const auto& msg : this->apps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiAppResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MultiAppResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiAppResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiAppResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MultiAppResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MultiAppResponse)
    MergeFrom(*source);
  }
}

void MultiAppResponse::MergeFrom(const MultiAppResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiAppResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  apps_.MergeFrom(from.apps_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void MultiAppResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MultiAppResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiAppResponse::CopyFrom(const MultiAppResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiAppResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiAppResponse::IsInitialized() const {
  return true;
}

void MultiAppResponse::InternalSwap(MultiAppResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  apps_.InternalSwap(&other->apps_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiAppResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListCollaboratorsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_ListCollaboratorsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class ListCollaboratorsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListCollaboratorsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListCollaboratorsRequest::_Internal::user_app_id(const ListCollaboratorsRequest* msg) {
  return *msg->user_app_id_;
}
void ListCollaboratorsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListCollaboratorsRequest::ListCollaboratorsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ListCollaboratorsRequest)
}
ListCollaboratorsRequest::ListCollaboratorsRequest(const ListCollaboratorsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  list_all_collaborators_ = from.list_all_collaborators_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListCollaboratorsRequest)
}

void ListCollaboratorsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListCollaboratorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&list_all_collaborators_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(list_all_collaborators_));
}

ListCollaboratorsRequest::~ListCollaboratorsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListCollaboratorsRequest)
  SharedDtor();
}

void ListCollaboratorsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListCollaboratorsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListCollaboratorsRequest& ListCollaboratorsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListCollaboratorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ListCollaboratorsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListCollaboratorsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  list_all_collaborators_ = false;
  _internal_metadata_.Clear();
}

const char* ListCollaboratorsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool list_all_collaborators = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          list_all_collaborators_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListCollaboratorsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListCollaboratorsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // bool list_all_collaborators = 2;
  if (this->list_all_collaborators() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_list_all_collaborators(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListCollaboratorsRequest)
  return target;
}

size_t ListCollaboratorsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListCollaboratorsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // bool list_all_collaborators = 2;
  if (this->list_all_collaborators() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListCollaboratorsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ListCollaboratorsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListCollaboratorsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListCollaboratorsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ListCollaboratorsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ListCollaboratorsRequest)
    MergeFrom(*source);
  }
}

void ListCollaboratorsRequest::MergeFrom(const ListCollaboratorsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListCollaboratorsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.list_all_collaborators() != 0) {
    _internal_set_list_all_collaborators(from._internal_list_all_collaborators());
  }
}

void ListCollaboratorsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ListCollaboratorsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListCollaboratorsRequest::CopyFrom(const ListCollaboratorsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListCollaboratorsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCollaboratorsRequest::IsInitialized() const {
  return true;
}

void ListCollaboratorsRequest::InternalSwap(ListCollaboratorsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_app_id_, other->user_app_id_);
  swap(list_all_collaborators_, other->list_all_collaborators_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListCollaboratorsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostCollaboratorsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostCollaboratorsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PostCollaboratorsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostCollaboratorsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostCollaboratorsRequest::_Internal::user_app_id(const PostCollaboratorsRequest* msg) {
  return *msg->user_app_id_;
}
void PostCollaboratorsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostCollaboratorsRequest::clear_collaborators() {
  collaborators_.Clear();
}
PostCollaboratorsRequest::PostCollaboratorsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostCollaboratorsRequest)
}
PostCollaboratorsRequest::PostCollaboratorsRequest(const PostCollaboratorsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      collaborators_(from.collaborators_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostCollaboratorsRequest)
}

void PostCollaboratorsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostCollaboratorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  user_app_id_ = nullptr;
}

PostCollaboratorsRequest::~PostCollaboratorsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostCollaboratorsRequest)
  SharedDtor();
}

void PostCollaboratorsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostCollaboratorsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostCollaboratorsRequest& PostCollaboratorsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostCollaboratorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostCollaboratorsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostCollaboratorsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collaborators_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostCollaboratorsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Collaborator collaborators = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_collaborators(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostCollaboratorsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostCollaboratorsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Collaborator collaborators = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_collaborators_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_collaborators(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostCollaboratorsRequest)
  return target;
}

size_t PostCollaboratorsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostCollaboratorsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Collaborator collaborators = 2;
  total_size += 1UL * this->_internal_collaborators_size();
  for (const auto& msg : this->collaborators_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostCollaboratorsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostCollaboratorsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostCollaboratorsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostCollaboratorsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostCollaboratorsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostCollaboratorsRequest)
    MergeFrom(*source);
  }
}

void PostCollaboratorsRequest::MergeFrom(const PostCollaboratorsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostCollaboratorsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  collaborators_.MergeFrom(from.collaborators_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void PostCollaboratorsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostCollaboratorsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostCollaboratorsRequest::CopyFrom(const PostCollaboratorsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostCollaboratorsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostCollaboratorsRequest::IsInitialized() const {
  return true;
}

void PostCollaboratorsRequest::InternalSwap(PostCollaboratorsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  collaborators_.InternalSwap(&other->collaborators_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostCollaboratorsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PatchCollaboratorsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PatchCollaboratorsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PatchCollaboratorsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchCollaboratorsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchCollaboratorsRequest::_Internal::user_app_id(const PatchCollaboratorsRequest* msg) {
  return *msg->user_app_id_;
}
void PatchCollaboratorsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PatchCollaboratorsRequest::clear_collaborators() {
  collaborators_.Clear();
}
PatchCollaboratorsRequest::PatchCollaboratorsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PatchCollaboratorsRequest)
}
PatchCollaboratorsRequest::PatchCollaboratorsRequest(const PatchCollaboratorsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      collaborators_(from.collaborators_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action().empty()) {
    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchCollaboratorsRequest)
}

void PatchCollaboratorsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PatchCollaboratorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

PatchCollaboratorsRequest::~PatchCollaboratorsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchCollaboratorsRequest)
  SharedDtor();
}

void PatchCollaboratorsRequest::SharedDtor() {
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PatchCollaboratorsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PatchCollaboratorsRequest& PatchCollaboratorsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PatchCollaboratorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PatchCollaboratorsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchCollaboratorsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collaborators_.Clear();
  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PatchCollaboratorsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Collaborator collaborators = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_collaborators(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchCollaboratorsRequest.action"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PatchCollaboratorsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchCollaboratorsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Collaborator collaborators = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_collaborators_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_collaborators(i), target, stream);
  }

  // string action = 3;
  if (this->action().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchCollaboratorsRequest.action");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchCollaboratorsRequest)
  return target;
}

size_t PatchCollaboratorsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchCollaboratorsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Collaborator collaborators = 2;
  total_size += 1UL * this->_internal_collaborators_size();
  for (const auto& msg : this->collaborators_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string action = 3;
  if (this->action().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PatchCollaboratorsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PatchCollaboratorsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PatchCollaboratorsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PatchCollaboratorsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PatchCollaboratorsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PatchCollaboratorsRequest)
    MergeFrom(*source);
  }
}

void PatchCollaboratorsRequest::MergeFrom(const PatchCollaboratorsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchCollaboratorsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  collaborators_.MergeFrom(from.collaborators_);
  if (from.action().size() > 0) {

    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void PatchCollaboratorsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PatchCollaboratorsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatchCollaboratorsRequest::CopyFrom(const PatchCollaboratorsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchCollaboratorsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchCollaboratorsRequest::IsInitialized() const {
  return true;
}

void PatchCollaboratorsRequest::InternalSwap(PatchCollaboratorsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  collaborators_.InternalSwap(&other->collaborators_);
  action_.Swap(&other->action_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchCollaboratorsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteCollaboratorsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_DeleteCollaboratorsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class DeleteCollaboratorsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteCollaboratorsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteCollaboratorsRequest::_Internal::user_app_id(const DeleteCollaboratorsRequest* msg) {
  return *msg->user_app_id_;
}
void DeleteCollaboratorsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
DeleteCollaboratorsRequest::DeleteCollaboratorsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.DeleteCollaboratorsRequest)
}
DeleteCollaboratorsRequest::DeleteCollaboratorsRequest(const DeleteCollaboratorsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      collaborator_ids_(from.collaborator_ids_),
      user_emails_(from.user_emails_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteCollaboratorsRequest)
}

void DeleteCollaboratorsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteCollaboratorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  user_app_id_ = nullptr;
}

DeleteCollaboratorsRequest::~DeleteCollaboratorsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteCollaboratorsRequest)
  SharedDtor();
}

void DeleteCollaboratorsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void DeleteCollaboratorsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteCollaboratorsRequest& DeleteCollaboratorsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteCollaboratorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void DeleteCollaboratorsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteCollaboratorsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collaborator_ids_.Clear();
  user_emails_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* DeleteCollaboratorsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string collaborator_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_collaborator_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteCollaboratorsRequest.collaborator_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string user_emails = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_user_emails();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteCollaboratorsRequest.user_emails"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteCollaboratorsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteCollaboratorsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated string collaborator_ids = 2;
  for (int i = 0, n = this->_internal_collaborator_ids_size(); i < n; i++) {
    const auto& s = this->_internal_collaborator_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteCollaboratorsRequest.collaborator_ids");
    target = stream->WriteString(2, s, target);
  }

  // repeated string user_emails = 3;
  for (int i = 0, n = this->_internal_user_emails_size(); i < n; i++) {
    const auto& s = this->_internal_user_emails(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteCollaboratorsRequest.user_emails");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteCollaboratorsRequest)
  return target;
}

size_t DeleteCollaboratorsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteCollaboratorsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string collaborator_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(collaborator_ids_.size());
  for (int i = 0, n = collaborator_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      collaborator_ids_.Get(i));
  }

  // repeated string user_emails = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(user_emails_.size());
  for (int i = 0, n = user_emails_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      user_emails_.Get(i));
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteCollaboratorsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.DeleteCollaboratorsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteCollaboratorsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteCollaboratorsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.DeleteCollaboratorsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.DeleteCollaboratorsRequest)
    MergeFrom(*source);
  }
}

void DeleteCollaboratorsRequest::MergeFrom(const DeleteCollaboratorsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteCollaboratorsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  collaborator_ids_.MergeFrom(from.collaborator_ids_);
  user_emails_.MergeFrom(from.user_emails_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void DeleteCollaboratorsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.DeleteCollaboratorsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteCollaboratorsRequest::CopyFrom(const DeleteCollaboratorsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteCollaboratorsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteCollaboratorsRequest::IsInitialized() const {
  return true;
}

void DeleteCollaboratorsRequest::InternalSwap(DeleteCollaboratorsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  collaborator_ids_.InternalSwap(&other->collaborator_ids_);
  user_emails_.InternalSwap(&other->user_emails_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteCollaboratorsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiCollaboratorsResponse::InitAsDefaultInstance() {
  ::clarifai::api::_MultiCollaboratorsResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class MultiCollaboratorsResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiCollaboratorsResponse* msg);
};

const ::clarifai::api::status::Status&
MultiCollaboratorsResponse::_Internal::status(const MultiCollaboratorsResponse* msg) {
  return *msg->status_;
}
void MultiCollaboratorsResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiCollaboratorsResponse::clear_collaborators() {
  collaborators_.Clear();
}
MultiCollaboratorsResponse::MultiCollaboratorsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MultiCollaboratorsResponse)
}
MultiCollaboratorsResponse::MultiCollaboratorsResponse(const MultiCollaboratorsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      collaborators_(from.collaborators_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiCollaboratorsResponse)
}

void MultiCollaboratorsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiCollaboratorsResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

MultiCollaboratorsResponse::~MultiCollaboratorsResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiCollaboratorsResponse)
  SharedDtor();
}

void MultiCollaboratorsResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void MultiCollaboratorsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiCollaboratorsResponse& MultiCollaboratorsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiCollaboratorsResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiCollaboratorsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiCollaboratorsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collaborators_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultiCollaboratorsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Collaborator collaborators = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_collaborators(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiCollaboratorsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiCollaboratorsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.Collaborator collaborators = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_collaborators_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_collaborators(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiCollaboratorsResponse)
  return target;
}

size_t MultiCollaboratorsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiCollaboratorsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Collaborator collaborators = 2;
  total_size += 1UL * this->_internal_collaborators_size();
  for (const auto& msg : this->collaborators_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiCollaboratorsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MultiCollaboratorsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiCollaboratorsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiCollaboratorsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MultiCollaboratorsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MultiCollaboratorsResponse)
    MergeFrom(*source);
  }
}

void MultiCollaboratorsResponse::MergeFrom(const MultiCollaboratorsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiCollaboratorsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  collaborators_.MergeFrom(from.collaborators_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void MultiCollaboratorsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MultiCollaboratorsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiCollaboratorsResponse::CopyFrom(const MultiCollaboratorsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiCollaboratorsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiCollaboratorsResponse::IsInitialized() const {
  return true;
}

void MultiCollaboratorsResponse::InternalSwap(MultiCollaboratorsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  collaborators_.InternalSwap(&other->collaborators_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiCollaboratorsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListCollaborationsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_ListCollaborationsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class ListCollaborationsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListCollaborationsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListCollaborationsRequest::_Internal::user_app_id(const ListCollaborationsRequest* msg) {
  return *msg->user_app_id_;
}
void ListCollaborationsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListCollaborationsRequest::ListCollaborationsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ListCollaborationsRequest)
}
ListCollaborationsRequest::ListCollaborationsRequest(const ListCollaborationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListCollaborationsRequest)
}

void ListCollaborationsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListCollaborationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

ListCollaborationsRequest::~ListCollaborationsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListCollaborationsRequest)
  SharedDtor();
}

void ListCollaborationsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListCollaborationsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListCollaborationsRequest& ListCollaborationsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListCollaborationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ListCollaborationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListCollaborationsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear();
}

const char* ListCollaborationsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListCollaborationsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListCollaborationsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // uint32 page = 2;
  if (this->page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListCollaborationsRequest)
  return target;
}

size_t ListCollaborationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListCollaborationsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 2;
  if (this->page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->per_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_per_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListCollaborationsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ListCollaborationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListCollaborationsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListCollaborationsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ListCollaborationsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ListCollaborationsRequest)
    MergeFrom(*source);
  }
}

void ListCollaborationsRequest::MergeFrom(const ListCollaborationsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListCollaborationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from.per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
}

void ListCollaborationsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ListCollaborationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListCollaborationsRequest::CopyFrom(const ListCollaborationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListCollaborationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCollaborationsRequest::IsInitialized() const {
  return true;
}

void ListCollaborationsRequest::InternalSwap(ListCollaborationsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_app_id_, other->user_app_id_);
  swap(page_, other->page_);
  swap(per_page_, other->per_page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListCollaborationsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiCollaborationsResponse::InitAsDefaultInstance() {
  ::clarifai::api::_MultiCollaborationsResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class MultiCollaborationsResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiCollaborationsResponse* msg);
};

const ::clarifai::api::status::Status&
MultiCollaborationsResponse::_Internal::status(const MultiCollaborationsResponse* msg) {
  return *msg->status_;
}
void MultiCollaborationsResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiCollaborationsResponse::clear_collaborations() {
  collaborations_.Clear();
}
MultiCollaborationsResponse::MultiCollaborationsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MultiCollaborationsResponse)
}
MultiCollaborationsResponse::MultiCollaborationsResponse(const MultiCollaborationsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      collaborations_(from.collaborations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiCollaborationsResponse)
}

void MultiCollaborationsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiCollaborationsResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

MultiCollaborationsResponse::~MultiCollaborationsResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiCollaborationsResponse)
  SharedDtor();
}

void MultiCollaborationsResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void MultiCollaborationsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiCollaborationsResponse& MultiCollaborationsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiCollaborationsResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiCollaborationsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiCollaborationsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collaborations_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultiCollaborationsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Collaboration collaborations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_collaborations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiCollaborationsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiCollaborationsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.Collaboration collaborations = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_collaborations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_collaborations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiCollaborationsResponse)
  return target;
}

size_t MultiCollaborationsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiCollaborationsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Collaboration collaborations = 2;
  total_size += 1UL * this->_internal_collaborations_size();
  for (const auto& msg : this->collaborations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiCollaborationsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MultiCollaborationsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiCollaborationsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiCollaborationsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MultiCollaborationsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MultiCollaborationsResponse)
    MergeFrom(*source);
  }
}

void MultiCollaborationsResponse::MergeFrom(const MultiCollaborationsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiCollaborationsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  collaborations_.MergeFrom(from.collaborations_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void MultiCollaborationsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MultiCollaborationsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiCollaborationsResponse::CopyFrom(const MultiCollaborationsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiCollaborationsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiCollaborationsResponse::IsInitialized() const {
  return true;
}

void MultiCollaborationsResponse::InternalSwap(MultiCollaborationsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  collaborations_.InternalSwap(&other->collaborations_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiCollaborationsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostVerifyEmailRequest::InitAsDefaultInstance() {
}
class PostVerifyEmailRequest::_Internal {
 public:
};

PostVerifyEmailRequest::PostVerifyEmailRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostVerifyEmailRequest)
}
PostVerifyEmailRequest::PostVerifyEmailRequest(const PostVerifyEmailRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostVerifyEmailRequest)
}

void PostVerifyEmailRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostVerifyEmailRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PostVerifyEmailRequest::~PostVerifyEmailRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostVerifyEmailRequest)
  SharedDtor();
}

void PostVerifyEmailRequest::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PostVerifyEmailRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostVerifyEmailRequest& PostVerifyEmailRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostVerifyEmailRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostVerifyEmailRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostVerifyEmailRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* PostVerifyEmailRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostVerifyEmailRequest.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostVerifyEmailRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostVerifyEmailRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostVerifyEmailRequest.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostVerifyEmailRequest)
  return target;
}

size_t PostVerifyEmailRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostVerifyEmailRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostVerifyEmailRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostVerifyEmailRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostVerifyEmailRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostVerifyEmailRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostVerifyEmailRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostVerifyEmailRequest)
    MergeFrom(*source);
  }
}

void PostVerifyEmailRequest::MergeFrom(const PostVerifyEmailRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostVerifyEmailRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void PostVerifyEmailRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostVerifyEmailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostVerifyEmailRequest::CopyFrom(const PostVerifyEmailRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostVerifyEmailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostVerifyEmailRequest::IsInitialized() const {
  return true;
}

void PostVerifyEmailRequest::InternalSwap(PostVerifyEmailRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata PostVerifyEmailRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SingleVerifyEmailResponse::InitAsDefaultInstance() {
  ::clarifai::api::_SingleVerifyEmailResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class SingleVerifyEmailResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleVerifyEmailResponse* msg);
};

const ::clarifai::api::status::Status&
SingleVerifyEmailResponse::_Internal::status(const SingleVerifyEmailResponse* msg) {
  return *msg->status_;
}
void SingleVerifyEmailResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
SingleVerifyEmailResponse::SingleVerifyEmailResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.SingleVerifyEmailResponse)
}
SingleVerifyEmailResponse::SingleVerifyEmailResponse(const SingleVerifyEmailResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleVerifyEmailResponse)
}

void SingleVerifyEmailResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SingleVerifyEmailResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

SingleVerifyEmailResponse::~SingleVerifyEmailResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleVerifyEmailResponse)
  SharedDtor();
}

void SingleVerifyEmailResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void SingleVerifyEmailResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleVerifyEmailResponse& SingleVerifyEmailResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleVerifyEmailResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void SingleVerifyEmailResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleVerifyEmailResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SingleVerifyEmailResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleVerifyEmailResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleVerifyEmailResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleVerifyEmailResponse)
  return target;
}

size_t SingleVerifyEmailResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleVerifyEmailResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleVerifyEmailResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.SingleVerifyEmailResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleVerifyEmailResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleVerifyEmailResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.SingleVerifyEmailResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.SingleVerifyEmailResponse)
    MergeFrom(*source);
  }
}

void SingleVerifyEmailResponse::MergeFrom(const SingleVerifyEmailResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleVerifyEmailResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void SingleVerifyEmailResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.SingleVerifyEmailResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleVerifyEmailResponse::CopyFrom(const SingleVerifyEmailResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleVerifyEmailResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleVerifyEmailResponse::IsInitialized() const {
  return true;
}

void SingleVerifyEmailResponse::InternalSwap(SingleVerifyEmailResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleVerifyEmailResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListAuthMethodsRequest::InitAsDefaultInstance() {
}
class ListAuthMethodsRequest::_Internal {
 public:
};

ListAuthMethodsRequest::ListAuthMethodsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ListAuthMethodsRequest)
}
ListAuthMethodsRequest::ListAuthMethodsRequest(const ListAuthMethodsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListAuthMethodsRequest)
}

void ListAuthMethodsRequest::SharedCtor() {
}

ListAuthMethodsRequest::~ListAuthMethodsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListAuthMethodsRequest)
  SharedDtor();
}

void ListAuthMethodsRequest::SharedDtor() {
}

void ListAuthMethodsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListAuthMethodsRequest& ListAuthMethodsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListAuthMethodsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ListAuthMethodsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListAuthMethodsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* ListAuthMethodsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListAuthMethodsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListAuthMethodsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListAuthMethodsRequest)
  return target;
}

size_t ListAuthMethodsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListAuthMethodsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListAuthMethodsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ListAuthMethodsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListAuthMethodsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListAuthMethodsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ListAuthMethodsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ListAuthMethodsRequest)
    MergeFrom(*source);
  }
}

void ListAuthMethodsRequest::MergeFrom(const ListAuthMethodsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListAuthMethodsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ListAuthMethodsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ListAuthMethodsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListAuthMethodsRequest::CopyFrom(const ListAuthMethodsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListAuthMethodsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListAuthMethodsRequest::IsInitialized() const {
  return true;
}

void ListAuthMethodsRequest::InternalSwap(ListAuthMethodsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListAuthMethodsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListAuthMethodsResponse::InitAsDefaultInstance() {
  ::clarifai::api::_ListAuthMethodsResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class ListAuthMethodsResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const ListAuthMethodsResponse* msg);
};

const ::clarifai::api::status::Status&
ListAuthMethodsResponse::_Internal::status(const ListAuthMethodsResponse* msg) {
  return *msg->status_;
}
void ListAuthMethodsResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void ListAuthMethodsResponse::clear_auth_methods() {
  auth_methods_.Clear();
}
ListAuthMethodsResponse::ListAuthMethodsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ListAuthMethodsResponse)
}
ListAuthMethodsResponse::ListAuthMethodsResponse(const ListAuthMethodsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      auth_methods_(from.auth_methods_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListAuthMethodsResponse)
}

void ListAuthMethodsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListAuthMethodsResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

ListAuthMethodsResponse::~ListAuthMethodsResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListAuthMethodsResponse)
  SharedDtor();
}

void ListAuthMethodsResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void ListAuthMethodsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListAuthMethodsResponse& ListAuthMethodsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListAuthMethodsResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ListAuthMethodsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListAuthMethodsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  auth_methods_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ListAuthMethodsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.AuthMethod auth_methods = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_auth_methods(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListAuthMethodsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListAuthMethodsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.AuthMethod auth_methods = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_auth_methods_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_auth_methods(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListAuthMethodsResponse)
  return target;
}

size_t ListAuthMethodsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListAuthMethodsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.AuthMethod auth_methods = 2;
  total_size += 1UL * this->_internal_auth_methods_size();
  for (const auto& msg : this->auth_methods_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListAuthMethodsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ListAuthMethodsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListAuthMethodsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListAuthMethodsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ListAuthMethodsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ListAuthMethodsResponse)
    MergeFrom(*source);
  }
}

void ListAuthMethodsResponse::MergeFrom(const ListAuthMethodsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListAuthMethodsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  auth_methods_.MergeFrom(from.auth_methods_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void ListAuthMethodsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ListAuthMethodsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListAuthMethodsResponse::CopyFrom(const ListAuthMethodsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListAuthMethodsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListAuthMethodsResponse::IsInitialized() const {
  return true;
}

void ListAuthMethodsResponse::InternalSwap(ListAuthMethodsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  auth_methods_.InternalSwap(&other->auth_methods_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListAuthMethodsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RequestResetPasswordRequest::InitAsDefaultInstance() {
}
class RequestResetPasswordRequest::_Internal {
 public:
};

RequestResetPasswordRequest::RequestResetPasswordRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.RequestResetPasswordRequest)
}
RequestResetPasswordRequest::RequestResetPasswordRequest(const RequestResetPasswordRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_email().empty()) {
    email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.RequestResetPasswordRequest)
}

void RequestResetPasswordRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RequestResetPasswordRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RequestResetPasswordRequest::~RequestResetPasswordRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.RequestResetPasswordRequest)
  SharedDtor();
}

void RequestResetPasswordRequest::SharedDtor() {
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RequestResetPasswordRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestResetPasswordRequest& RequestResetPasswordRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestResetPasswordRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void RequestResetPasswordRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.RequestResetPasswordRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* RequestResetPasswordRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string email = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.RequestResetPasswordRequest.email"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestResetPasswordRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.RequestResetPasswordRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string email = 1;
  if (this->email().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.RequestResetPasswordRequest.email");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_email(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.RequestResetPasswordRequest)
  return target;
}

size_t RequestResetPasswordRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.RequestResetPasswordRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string email = 1;
  if (this->email().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestResetPasswordRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.RequestResetPasswordRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestResetPasswordRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestResetPasswordRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.RequestResetPasswordRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.RequestResetPasswordRequest)
    MergeFrom(*source);
  }
}

void RequestResetPasswordRequest::MergeFrom(const RequestResetPasswordRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.RequestResetPasswordRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.email().size() > 0) {

    email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
}

void RequestResetPasswordRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.RequestResetPasswordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestResetPasswordRequest::CopyFrom(const RequestResetPasswordRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.RequestResetPasswordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestResetPasswordRequest::IsInitialized() const {
  return true;
}

void RequestResetPasswordRequest::InternalSwap(RequestResetPasswordRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  email_.Swap(&other->email_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestResetPasswordRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CompleteResetPasswordRequest::InitAsDefaultInstance() {
}
class CompleteResetPasswordRequest::_Internal {
 public:
};

CompleteResetPasswordRequest::CompleteResetPasswordRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.CompleteResetPasswordRequest)
}
CompleteResetPasswordRequest::CompleteResetPasswordRequest(const CompleteResetPasswordRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  new_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_new_password().empty()) {
    new_password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.new_password_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.CompleteResetPasswordRequest)
}

void CompleteResetPasswordRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CompleteResetPasswordRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CompleteResetPasswordRequest::~CompleteResetPasswordRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.CompleteResetPasswordRequest)
  SharedDtor();
}

void CompleteResetPasswordRequest::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CompleteResetPasswordRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CompleteResetPasswordRequest& CompleteResetPasswordRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CompleteResetPasswordRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void CompleteResetPasswordRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.CompleteResetPasswordRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* CompleteResetPasswordRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.CompleteResetPasswordRequest.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string new_password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_new_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.CompleteResetPasswordRequest.new_password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CompleteResetPasswordRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.CompleteResetPasswordRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.CompleteResetPasswordRequest.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // string new_password = 2;
  if (this->new_password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_new_password().data(), static_cast<int>(this->_internal_new_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.CompleteResetPasswordRequest.new_password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_new_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.CompleteResetPasswordRequest)
  return target;
}

size_t CompleteResetPasswordRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.CompleteResetPasswordRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string new_password = 2;
  if (this->new_password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_new_password());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompleteResetPasswordRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.CompleteResetPasswordRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CompleteResetPasswordRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CompleteResetPasswordRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.CompleteResetPasswordRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.CompleteResetPasswordRequest)
    MergeFrom(*source);
  }
}

void CompleteResetPasswordRequest::MergeFrom(const CompleteResetPasswordRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.CompleteResetPasswordRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.new_password().size() > 0) {

    new_password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.new_password_);
  }
}

void CompleteResetPasswordRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.CompleteResetPasswordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompleteResetPasswordRequest::CopyFrom(const CompleteResetPasswordRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.CompleteResetPasswordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompleteResetPasswordRequest::IsInitialized() const {
  return true;
}

void CompleteResetPasswordRequest::InternalSwap(CompleteResetPasswordRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  new_password_.Swap(&other->new_password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CompleteResetPasswordRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostLoginRequest::InitAsDefaultInstance() {
}
class PostLoginRequest::_Internal {
 public:
};

PostLoginRequest::PostLoginRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostLoginRequest)
}
PostLoginRequest::PostLoginRequest(const PostLoginRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_email().empty()) {
    email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password().empty()) {
    password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  long_lived_ = from.long_lived_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostLoginRequest)
}

void PostLoginRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostLoginRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  long_lived_ = false;
}

PostLoginRequest::~PostLoginRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostLoginRequest)
  SharedDtor();
}

void PostLoginRequest::SharedDtor() {
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PostLoginRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostLoginRequest& PostLoginRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostLoginRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostLoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostLoginRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  long_lived_ = false;
  _internal_metadata_.Clear();
}

const char* PostLoginRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string email = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostLoginRequest.email"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostLoginRequest.password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool long_lived = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          long_lived_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostLoginRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostLoginRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string email = 1;
  if (this->email().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostLoginRequest.email");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_email(), target);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostLoginRequest.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  // bool long_lived = 3;
  if (this->long_lived() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_long_lived(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostLoginRequest)
  return target;
}

size_t PostLoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostLoginRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string email = 1;
  if (this->email().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // string password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // bool long_lived = 3;
  if (this->long_lived() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostLoginRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostLoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostLoginRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostLoginRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostLoginRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostLoginRequest)
    MergeFrom(*source);
  }
}

void PostLoginRequest::MergeFrom(const PostLoginRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostLoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.email().size() > 0) {

    email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.long_lived() != 0) {
    _internal_set_long_lived(from._internal_long_lived());
  }
}

void PostLoginRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostLoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostLoginRequest::CopyFrom(const PostLoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostLoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostLoginRequest::IsInitialized() const {
  return true;
}

void PostLoginRequest::InternalSwap(PostLoginRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  email_.Swap(&other->email_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(long_lived_, other->long_lived_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostLoginRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostSignupRequest::InitAsDefaultInstance() {
}
class PostSignupRequest::_Internal {
 public:
};

PostSignupRequest::PostSignupRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostSignupRequest)
}
PostSignupRequest::PostSignupRequest(const PostSignupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_email().empty()) {
    email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password().empty()) {
    password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  first_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_first_name().empty()) {
    first_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.first_name_);
  }
  last_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_name().empty()) {
    last_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_name_);
  }
  company_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_company_name().empty()) {
    company_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.company_name_);
  }
  captcha_response_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_captcha_response_token().empty()) {
    captcha_response_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.captcha_response_token_);
  }
  aws_registration_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_aws_registration_token().empty()) {
    aws_registration_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.aws_registration_token_);
  }
  ::memcpy(&gdpr_consent_, &from.gdpr_consent_,
    static_cast<size_t>(reinterpret_cast<char*>(&marketing_consent_) -
    reinterpret_cast<char*>(&gdpr_consent_)) + sizeof(marketing_consent_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostSignupRequest)
}

void PostSignupRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostSignupRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  company_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  captcha_response_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  aws_registration_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&gdpr_consent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&marketing_consent_) -
      reinterpret_cast<char*>(&gdpr_consent_)) + sizeof(marketing_consent_));
}

PostSignupRequest::~PostSignupRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostSignupRequest)
  SharedDtor();
}

void PostSignupRequest::SharedDtor() {
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  company_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  captcha_response_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  aws_registration_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PostSignupRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostSignupRequest& PostSignupRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostSignupRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostSignupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostSignupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  company_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  captcha_response_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  aws_registration_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&gdpr_consent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&marketing_consent_) -
      reinterpret_cast<char*>(&gdpr_consent_)) + sizeof(marketing_consent_));
  _internal_metadata_.Clear();
}

const char* PostSignupRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string email = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostSignupRequest.email"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostSignupRequest.password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string first_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_first_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostSignupRequest.first_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string last_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_last_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostSignupRequest.last_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string company_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_company_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostSignupRequest.company_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string captcha_response_token = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_captcha_response_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostSignupRequest.captcha_response_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string aws_registration_token = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_aws_registration_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostSignupRequest.aws_registration_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool gdpr_consent = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          gdpr_consent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool tos_consent = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          tos_consent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool marketing_consent = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          marketing_consent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostSignupRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostSignupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string email = 1;
  if (this->email().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostSignupRequest.email");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_email(), target);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostSignupRequest.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  // string first_name = 3;
  if (this->first_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_first_name().data(), static_cast<int>(this->_internal_first_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostSignupRequest.first_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_first_name(), target);
  }

  // string last_name = 4;
  if (this->last_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_name().data(), static_cast<int>(this->_internal_last_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostSignupRequest.last_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_last_name(), target);
  }

  // string company_name = 5;
  if (this->company_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_company_name().data(), static_cast<int>(this->_internal_company_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostSignupRequest.company_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_company_name(), target);
  }

  // string captcha_response_token = 6;
  if (this->captcha_response_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_captcha_response_token().data(), static_cast<int>(this->_internal_captcha_response_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostSignupRequest.captcha_response_token");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_captcha_response_token(), target);
  }

  // string aws_registration_token = 7;
  if (this->aws_registration_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_aws_registration_token().data(), static_cast<int>(this->_internal_aws_registration_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostSignupRequest.aws_registration_token");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_aws_registration_token(), target);
  }

  // bool gdpr_consent = 8;
  if (this->gdpr_consent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_gdpr_consent(), target);
  }

  // bool tos_consent = 9;
  if (this->tos_consent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_tos_consent(), target);
  }

  // bool marketing_consent = 10;
  if (this->marketing_consent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_marketing_consent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostSignupRequest)
  return target;
}

size_t PostSignupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostSignupRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string email = 1;
  if (this->email().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // string password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // string first_name = 3;
  if (this->first_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_first_name());
  }

  // string last_name = 4;
  if (this->last_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_name());
  }

  // string company_name = 5;
  if (this->company_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_company_name());
  }

  // string captcha_response_token = 6;
  if (this->captcha_response_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_captcha_response_token());
  }

  // string aws_registration_token = 7;
  if (this->aws_registration_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_aws_registration_token());
  }

  // bool gdpr_consent = 8;
  if (this->gdpr_consent() != 0) {
    total_size += 1 + 1;
  }

  // bool tos_consent = 9;
  if (this->tos_consent() != 0) {
    total_size += 1 + 1;
  }

  // bool marketing_consent = 10;
  if (this->marketing_consent() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostSignupRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostSignupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostSignupRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostSignupRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostSignupRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostSignupRequest)
    MergeFrom(*source);
  }
}

void PostSignupRequest::MergeFrom(const PostSignupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostSignupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.email().size() > 0) {

    email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.first_name().size() > 0) {

    first_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.first_name_);
  }
  if (from.last_name().size() > 0) {

    last_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_name_);
  }
  if (from.company_name().size() > 0) {

    company_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.company_name_);
  }
  if (from.captcha_response_token().size() > 0) {

    captcha_response_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.captcha_response_token_);
  }
  if (from.aws_registration_token().size() > 0) {

    aws_registration_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.aws_registration_token_);
  }
  if (from.gdpr_consent() != 0) {
    _internal_set_gdpr_consent(from._internal_gdpr_consent());
  }
  if (from.tos_consent() != 0) {
    _internal_set_tos_consent(from._internal_tos_consent());
  }
  if (from.marketing_consent() != 0) {
    _internal_set_marketing_consent(from._internal_marketing_consent());
  }
}

void PostSignupRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostSignupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostSignupRequest::CopyFrom(const PostSignupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostSignupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostSignupRequest::IsInitialized() const {
  return true;
}

void PostSignupRequest::InternalSwap(PostSignupRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  email_.Swap(&other->email_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  first_name_.Swap(&other->first_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  last_name_.Swap(&other->last_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  company_name_.Swap(&other->company_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  captcha_response_token_.Swap(&other->captcha_response_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  aws_registration_token_.Swap(&other->aws_registration_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(gdpr_consent_, other->gdpr_consent_);
  swap(tos_consent_, other->tos_consent_);
  swap(marketing_consent_, other->marketing_consent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostSignupRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SingleLoginResponse::InitAsDefaultInstance() {
  ::clarifai::api::_SingleLoginResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class SingleLoginResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleLoginResponse* msg);
};

const ::clarifai::api::status::Status&
SingleLoginResponse::_Internal::status(const SingleLoginResponse* msg) {
  return *msg->status_;
}
void SingleLoginResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleLoginResponse::clear_email_addresses() {
  email_addresses_.Clear();
}
SingleLoginResponse::SingleLoginResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.SingleLoginResponse)
}
SingleLoginResponse::SingleLoginResponse(const SingleLoginResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      email_addresses_(from.email_addresses_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_email().empty()) {
    email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  first_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_first_name().empty()) {
    first_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.first_name_);
  }
  last_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_name().empty()) {
    last_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_name_);
  }
  company_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_company_name().empty()) {
    company_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.company_name_);
  }
  date_joined_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_date_joined().empty()) {
    date_joined_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.date_joined_);
  }
  session_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_session_token().empty()) {
    session_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_token_);
  }
  token_expires_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token_expires().empty()) {
    token_expires_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_expires_);
  }
  v2_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_v2_user_id().empty()) {
    v2_user_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.v2_user_id_);
  }
  date_gdpr_consent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_date_gdpr_consent().empty()) {
    date_gdpr_consent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.date_gdpr_consent_);
  }
  date_tos_consent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_date_tos_consent().empty()) {
    date_tos_consent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.date_tos_consent_);
  }
  date_marketing_consent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_date_marketing_consent().empty()) {
    date_marketing_consent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.date_marketing_consent_);
  }
  password_expired_at_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password_expired_at().empty()) {
    password_expired_at_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.password_expired_at_);
  }
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  is_new_user_ = from.is_new_user_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleLoginResponse)
}

void SingleLoginResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SingleLoginResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  company_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_joined_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_expires_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  v2_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_gdpr_consent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_tos_consent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_marketing_consent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_expired_at_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_new_user_) -
      reinterpret_cast<char*>(&status_)) + sizeof(is_new_user_));
}

SingleLoginResponse::~SingleLoginResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleLoginResponse)
  SharedDtor();
}

void SingleLoginResponse::SharedDtor() {
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  company_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_joined_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_expires_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  v2_user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_gdpr_consent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_tos_consent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_marketing_consent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_expired_at_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void SingleLoginResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleLoginResponse& SingleLoginResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleLoginResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void SingleLoginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleLoginResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  email_addresses_.Clear();
  email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  company_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_joined_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_expires_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  v2_user_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_gdpr_consent_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_tos_consent_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_marketing_consent_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_expired_at_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  is_new_user_ = false;
  _internal_metadata_.Clear();
}

const char* SingleLoginResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string email = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.SingleLoginResponse.email"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string first_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_first_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.SingleLoginResponse.first_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string last_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_last_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.SingleLoginResponse.last_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string company_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_company_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.SingleLoginResponse.company_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string date_joined = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_date_joined();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.SingleLoginResponse.date_joined"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.EmailAddress email_addresses = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_email_addresses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // string session_token = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_session_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.SingleLoginResponse.session_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string token_expires = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_token_expires();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.SingleLoginResponse.token_expires"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string v2_user_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_v2_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.SingleLoginResponse.v2_user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string date_gdpr_consent = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_date_gdpr_consent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.SingleLoginResponse.date_gdpr_consent"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string date_tos_consent = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_date_tos_consent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.SingleLoginResponse.date_tos_consent"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string date_marketing_consent = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_date_marketing_consent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.SingleLoginResponse.date_marketing_consent"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string password_expired_at = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_password_expired_at();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.SingleLoginResponse.password_expired_at"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_new_user = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          is_new_user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleLoginResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleLoginResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // string email = 2;
  if (this->email().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.SingleLoginResponse.email");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_email(), target);
  }

  // string first_name = 3;
  if (this->first_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_first_name().data(), static_cast<int>(this->_internal_first_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.SingleLoginResponse.first_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_first_name(), target);
  }

  // string last_name = 4;
  if (this->last_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_name().data(), static_cast<int>(this->_internal_last_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.SingleLoginResponse.last_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_last_name(), target);
  }

  // string company_name = 5;
  if (this->company_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_company_name().data(), static_cast<int>(this->_internal_company_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.SingleLoginResponse.company_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_company_name(), target);
  }

  // string date_joined = 6;
  if (this->date_joined().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_date_joined().data(), static_cast<int>(this->_internal_date_joined().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.SingleLoginResponse.date_joined");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_date_joined(), target);
  }

  // repeated .clarifai.api.EmailAddress email_addresses = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_email_addresses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_email_addresses(i), target, stream);
  }

  // string session_token = 9;
  if (this->session_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_token().data(), static_cast<int>(this->_internal_session_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.SingleLoginResponse.session_token");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_session_token(), target);
  }

  // string token_expires = 10;
  if (this->token_expires().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token_expires().data(), static_cast<int>(this->_internal_token_expires().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.SingleLoginResponse.token_expires");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_token_expires(), target);
  }

  // string v2_user_id = 11;
  if (this->v2_user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_v2_user_id().data(), static_cast<int>(this->_internal_v2_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.SingleLoginResponse.v2_user_id");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_v2_user_id(), target);
  }

  // string date_gdpr_consent = 12;
  if (this->date_gdpr_consent().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_date_gdpr_consent().data(), static_cast<int>(this->_internal_date_gdpr_consent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.SingleLoginResponse.date_gdpr_consent");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_date_gdpr_consent(), target);
  }

  // string date_tos_consent = 13;
  if (this->date_tos_consent().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_date_tos_consent().data(), static_cast<int>(this->_internal_date_tos_consent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.SingleLoginResponse.date_tos_consent");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_date_tos_consent(), target);
  }

  // string date_marketing_consent = 14;
  if (this->date_marketing_consent().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_date_marketing_consent().data(), static_cast<int>(this->_internal_date_marketing_consent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.SingleLoginResponse.date_marketing_consent");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_date_marketing_consent(), target);
  }

  // string password_expired_at = 15;
  if (this->password_expired_at().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password_expired_at().data(), static_cast<int>(this->_internal_password_expired_at().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.SingleLoginResponse.password_expired_at");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_password_expired_at(), target);
  }

  // bool is_new_user = 16;
  if (this->is_new_user() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_is_new_user(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleLoginResponse)
  return target;
}

size_t SingleLoginResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleLoginResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.EmailAddress email_addresses = 8;
  total_size += 1UL * this->_internal_email_addresses_size();
  for (const auto& msg : this->email_addresses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string email = 2;
  if (this->email().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // string first_name = 3;
  if (this->first_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_first_name());
  }

  // string last_name = 4;
  if (this->last_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_name());
  }

  // string company_name = 5;
  if (this->company_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_company_name());
  }

  // string date_joined = 6;
  if (this->date_joined().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_date_joined());
  }

  // string session_token = 9;
  if (this->session_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_token());
  }

  // string token_expires = 10;
  if (this->token_expires().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token_expires());
  }

  // string v2_user_id = 11;
  if (this->v2_user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_v2_user_id());
  }

  // string date_gdpr_consent = 12;
  if (this->date_gdpr_consent().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_date_gdpr_consent());
  }

  // string date_tos_consent = 13;
  if (this->date_tos_consent().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_date_tos_consent());
  }

  // string date_marketing_consent = 14;
  if (this->date_marketing_consent().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_date_marketing_consent());
  }

  // string password_expired_at = 15;
  if (this->password_expired_at().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password_expired_at());
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // bool is_new_user = 16;
  if (this->is_new_user() != 0) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleLoginResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.SingleLoginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleLoginResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleLoginResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.SingleLoginResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.SingleLoginResponse)
    MergeFrom(*source);
  }
}

void SingleLoginResponse::MergeFrom(const SingleLoginResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleLoginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  email_addresses_.MergeFrom(from.email_addresses_);
  if (from.email().size() > 0) {

    email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  if (from.first_name().size() > 0) {

    first_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.first_name_);
  }
  if (from.last_name().size() > 0) {

    last_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_name_);
  }
  if (from.company_name().size() > 0) {

    company_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.company_name_);
  }
  if (from.date_joined().size() > 0) {

    date_joined_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.date_joined_);
  }
  if (from.session_token().size() > 0) {

    session_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_token_);
  }
  if (from.token_expires().size() > 0) {

    token_expires_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_expires_);
  }
  if (from.v2_user_id().size() > 0) {

    v2_user_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.v2_user_id_);
  }
  if (from.date_gdpr_consent().size() > 0) {

    date_gdpr_consent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.date_gdpr_consent_);
  }
  if (from.date_tos_consent().size() > 0) {

    date_tos_consent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.date_tos_consent_);
  }
  if (from.date_marketing_consent().size() > 0) {

    date_marketing_consent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.date_marketing_consent_);
  }
  if (from.password_expired_at().size() > 0) {

    password_expired_at_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.password_expired_at_);
  }
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.is_new_user() != 0) {
    _internal_set_is_new_user(from._internal_is_new_user());
  }
}

void SingleLoginResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.SingleLoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleLoginResponse::CopyFrom(const SingleLoginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleLoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleLoginResponse::IsInitialized() const {
  return true;
}

void SingleLoginResponse::InternalSwap(SingleLoginResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  email_addresses_.InternalSwap(&other->email_addresses_);
  email_.Swap(&other->email_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  first_name_.Swap(&other->first_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  last_name_.Swap(&other->last_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  company_name_.Swap(&other->company_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  date_joined_.Swap(&other->date_joined_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  session_token_.Swap(&other->session_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  token_expires_.Swap(&other->token_expires_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  v2_user_id_.Swap(&other->v2_user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  date_gdpr_consent_.Swap(&other->date_gdpr_consent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  date_tos_consent_.Swap(&other->date_tos_consent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  date_marketing_consent_.Swap(&other->date_marketing_consent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_expired_at_.Swap(&other->password_expired_at_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
  swap(is_new_user_, other->is_new_user_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleLoginResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetBillingUsageRequest::InitAsDefaultInstance() {
}
class GetBillingUsageRequest::_Internal {
 public:
};

GetBillingUsageRequest::GetBillingUsageRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.GetBillingUsageRequest)
}
GetBillingUsageRequest::GetBillingUsageRequest(const GetBillingUsageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetBillingUsageRequest)
}

void GetBillingUsageRequest::SharedCtor() {
}

GetBillingUsageRequest::~GetBillingUsageRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetBillingUsageRequest)
  SharedDtor();
}

void GetBillingUsageRequest::SharedDtor() {
}

void GetBillingUsageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetBillingUsageRequest& GetBillingUsageRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetBillingUsageRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void GetBillingUsageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetBillingUsageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* GetBillingUsageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBillingUsageRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetBillingUsageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetBillingUsageRequest)
  return target;
}

size_t GetBillingUsageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetBillingUsageRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetBillingUsageRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.GetBillingUsageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBillingUsageRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetBillingUsageRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.GetBillingUsageRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.GetBillingUsageRequest)
    MergeFrom(*source);
  }
}

void GetBillingUsageRequest::MergeFrom(const GetBillingUsageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetBillingUsageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetBillingUsageRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.GetBillingUsageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBillingUsageRequest::CopyFrom(const GetBillingUsageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetBillingUsageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBillingUsageRequest::IsInitialized() const {
  return true;
}

void GetBillingUsageRequest::InternalSwap(GetBillingUsageRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBillingUsageRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetBillingUsageResponse::InitAsDefaultInstance() {
  ::clarifai::api::_GetBillingUsageResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
  ::clarifai::api::_GetBillingUsageResponse_default_instance_._instance.get_mutable()->billing_cycle_ = const_cast< ::clarifai::api::BillingCycle*>(
      ::clarifai::api::BillingCycle::internal_default_instance());
}
class GetBillingUsageResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const GetBillingUsageResponse* msg);
  static const ::clarifai::api::BillingCycle& billing_cycle(const GetBillingUsageResponse* msg);
};

const ::clarifai::api::status::Status&
GetBillingUsageResponse::_Internal::status(const GetBillingUsageResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::BillingCycle&
GetBillingUsageResponse::_Internal::billing_cycle(const GetBillingUsageResponse* msg) {
  return *msg->billing_cycle_;
}
void GetBillingUsageResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void GetBillingUsageResponse::clear_invoice_items() {
  invoice_items_.Clear();
}
void GetBillingUsageResponse::clear_billing_cycle() {
  if (GetArenaNoVirtual() == nullptr && billing_cycle_ != nullptr) {
    delete billing_cycle_;
  }
  billing_cycle_ = nullptr;
}
GetBillingUsageResponse::GetBillingUsageResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.GetBillingUsageResponse)
}
GetBillingUsageResponse::GetBillingUsageResponse(const GetBillingUsageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      invoice_items_(from.invoice_items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_billing_cycle()) {
    billing_cycle_ = new ::clarifai::api::BillingCycle(*from.billing_cycle_);
  } else {
    billing_cycle_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetBillingUsageResponse)
}

void GetBillingUsageResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetBillingUsageResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&billing_cycle_) -
      reinterpret_cast<char*>(&status_)) + sizeof(billing_cycle_));
}

GetBillingUsageResponse::~GetBillingUsageResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetBillingUsageResponse)
  SharedDtor();
}

void GetBillingUsageResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete billing_cycle_;
}

void GetBillingUsageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetBillingUsageResponse& GetBillingUsageResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetBillingUsageResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void GetBillingUsageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetBillingUsageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  invoice_items_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && billing_cycle_ != nullptr) {
    delete billing_cycle_;
  }
  billing_cycle_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetBillingUsageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.InvoiceItem invoice_items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_invoice_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .clarifai.api.BillingCycle billing_cycle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_billing_cycle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBillingUsageResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetBillingUsageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.InvoiceItem invoice_items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_invoice_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_invoice_items(i), target, stream);
  }

  // .clarifai.api.BillingCycle billing_cycle = 3;
  if (this->has_billing_cycle()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::billing_cycle(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetBillingUsageResponse)
  return target;
}

size_t GetBillingUsageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetBillingUsageResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.InvoiceItem invoice_items = 2;
  total_size += 1UL * this->_internal_invoice_items_size();
  for (const auto& msg : this->invoice_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.BillingCycle billing_cycle = 3;
  if (this->has_billing_cycle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *billing_cycle_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetBillingUsageResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.GetBillingUsageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBillingUsageResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetBillingUsageResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.GetBillingUsageResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.GetBillingUsageResponse)
    MergeFrom(*source);
  }
}

void GetBillingUsageResponse::MergeFrom(const GetBillingUsageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetBillingUsageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  invoice_items_.MergeFrom(from.invoice_items_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.has_billing_cycle()) {
    _internal_mutable_billing_cycle()->::clarifai::api::BillingCycle::MergeFrom(from._internal_billing_cycle());
  }
}

void GetBillingUsageResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.GetBillingUsageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBillingUsageResponse::CopyFrom(const GetBillingUsageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetBillingUsageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBillingUsageResponse::IsInitialized() const {
  return true;
}

void GetBillingUsageResponse::InternalSwap(GetBillingUsageResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  invoice_items_.InternalSwap(&other->invoice_items_);
  swap(status_, other->status_);
  swap(billing_cycle_, other->billing_cycle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBillingUsageResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetStatusCodeRequest::InitAsDefaultInstance() {
}
class GetStatusCodeRequest::_Internal {
 public:
};

GetStatusCodeRequest::GetStatusCodeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.GetStatusCodeRequest)
}
GetStatusCodeRequest::GetStatusCodeRequest(const GetStatusCodeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_code_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status_code_id().empty()) {
    status_code_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_code_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetStatusCodeRequest)
}

void GetStatusCodeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetStatusCodeRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_code_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetStatusCodeRequest::~GetStatusCodeRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetStatusCodeRequest)
  SharedDtor();
}

void GetStatusCodeRequest::SharedDtor() {
  status_code_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetStatusCodeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetStatusCodeRequest& GetStatusCodeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetStatusCodeRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void GetStatusCodeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetStatusCodeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_code_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GetStatusCodeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string status_code_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_status_code_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetStatusCodeRequest.status_code_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetStatusCodeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetStatusCodeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string status_code_id = 1;
  if (this->status_code_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status_code_id().data(), static_cast<int>(this->_internal_status_code_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetStatusCodeRequest.status_code_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_status_code_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetStatusCodeRequest)
  return target;
}

size_t GetStatusCodeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetStatusCodeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status_code_id = 1;
  if (this->status_code_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status_code_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetStatusCodeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.GetStatusCodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStatusCodeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetStatusCodeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.GetStatusCodeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.GetStatusCodeRequest)
    MergeFrom(*source);
  }
}

void GetStatusCodeRequest::MergeFrom(const GetStatusCodeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetStatusCodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status_code_id().size() > 0) {

    status_code_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_code_id_);
  }
}

void GetStatusCodeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.GetStatusCodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStatusCodeRequest::CopyFrom(const GetStatusCodeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetStatusCodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStatusCodeRequest::IsInitialized() const {
  return true;
}

void GetStatusCodeRequest::InternalSwap(GetStatusCodeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  status_code_id_.Swap(&other->status_code_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStatusCodeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListStatusCodesRequest::InitAsDefaultInstance() {
}
class ListStatusCodesRequest::_Internal {
 public:
};

ListStatusCodesRequest::ListStatusCodesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ListStatusCodesRequest)
}
ListStatusCodesRequest::ListStatusCodesRequest(const ListStatusCodesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListStatusCodesRequest)
}

void ListStatusCodesRequest::SharedCtor() {
}

ListStatusCodesRequest::~ListStatusCodesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListStatusCodesRequest)
  SharedDtor();
}

void ListStatusCodesRequest::SharedDtor() {
}

void ListStatusCodesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListStatusCodesRequest& ListStatusCodesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListStatusCodesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ListStatusCodesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListStatusCodesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* ListStatusCodesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListStatusCodesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListStatusCodesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListStatusCodesRequest)
  return target;
}

size_t ListStatusCodesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListStatusCodesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListStatusCodesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ListStatusCodesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListStatusCodesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListStatusCodesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ListStatusCodesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ListStatusCodesRequest)
    MergeFrom(*source);
  }
}

void ListStatusCodesRequest::MergeFrom(const ListStatusCodesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListStatusCodesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ListStatusCodesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ListStatusCodesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListStatusCodesRequest::CopyFrom(const ListStatusCodesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListStatusCodesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListStatusCodesRequest::IsInitialized() const {
  return true;
}

void ListStatusCodesRequest::InternalSwap(ListStatusCodesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListStatusCodesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SingleStatusCodeResponse::InitAsDefaultInstance() {
  ::clarifai::api::_SingleStatusCodeResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class SingleStatusCodeResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleStatusCodeResponse* msg);
};

const ::clarifai::api::status::Status&
SingleStatusCodeResponse::_Internal::status(const SingleStatusCodeResponse* msg) {
  return *msg->status_;
}
void SingleStatusCodeResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
SingleStatusCodeResponse::SingleStatusCodeResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.SingleStatusCodeResponse)
}
SingleStatusCodeResponse::SingleStatusCodeResponse(const SingleStatusCodeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleStatusCodeResponse)
}

void SingleStatusCodeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SingleStatusCodeResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

SingleStatusCodeResponse::~SingleStatusCodeResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleStatusCodeResponse)
  SharedDtor();
}

void SingleStatusCodeResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void SingleStatusCodeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleStatusCodeResponse& SingleStatusCodeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleStatusCodeResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void SingleStatusCodeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleStatusCodeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SingleStatusCodeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleStatusCodeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleStatusCodeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleStatusCodeResponse)
  return target;
}

size_t SingleStatusCodeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleStatusCodeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleStatusCodeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.SingleStatusCodeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleStatusCodeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleStatusCodeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.SingleStatusCodeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.SingleStatusCodeResponse)
    MergeFrom(*source);
  }
}

void SingleStatusCodeResponse::MergeFrom(const SingleStatusCodeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleStatusCodeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void SingleStatusCodeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.SingleStatusCodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleStatusCodeResponse::CopyFrom(const SingleStatusCodeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleStatusCodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleStatusCodeResponse::IsInitialized() const {
  return true;
}

void SingleStatusCodeResponse::InternalSwap(SingleStatusCodeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleStatusCodeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiStatusCodeResponse::InitAsDefaultInstance() {
  ::clarifai::api::_MultiStatusCodeResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class MultiStatusCodeResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiStatusCodeResponse* msg);
};

const ::clarifai::api::status::Status&
MultiStatusCodeResponse::_Internal::status(const MultiStatusCodeResponse* msg) {
  return *msg->status_;
}
void MultiStatusCodeResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiStatusCodeResponse::clear_statuses() {
  statuses_.Clear();
}
MultiStatusCodeResponse::MultiStatusCodeResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MultiStatusCodeResponse)
}
MultiStatusCodeResponse::MultiStatusCodeResponse(const MultiStatusCodeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      statuses_(from.statuses_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiStatusCodeResponse)
}

void MultiStatusCodeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiStatusCodeResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

MultiStatusCodeResponse::~MultiStatusCodeResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiStatusCodeResponse)
  SharedDtor();
}

void MultiStatusCodeResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void MultiStatusCodeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiStatusCodeResponse& MultiStatusCodeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiStatusCodeResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiStatusCodeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiStatusCodeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  statuses_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultiStatusCodeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.status.Status statuses = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_statuses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiStatusCodeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiStatusCodeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.status.Status statuses = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_statuses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_statuses(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiStatusCodeResponse)
  return target;
}

size_t MultiStatusCodeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiStatusCodeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.status.Status statuses = 2;
  total_size += 1UL * this->_internal_statuses_size();
  for (const auto& msg : this->statuses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiStatusCodeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MultiStatusCodeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiStatusCodeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiStatusCodeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MultiStatusCodeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MultiStatusCodeResponse)
    MergeFrom(*source);
  }
}

void MultiStatusCodeResponse::MergeFrom(const MultiStatusCodeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiStatusCodeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  statuses_.MergeFrom(from.statuses_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void MultiStatusCodeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MultiStatusCodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiStatusCodeResponse::CopyFrom(const MultiStatusCodeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiStatusCodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiStatusCodeResponse::IsInitialized() const {
  return true;
}

void MultiStatusCodeResponse::InternalSwap(MultiStatusCodeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  statuses_.InternalSwap(&other->statuses_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiStatusCodeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetConceptRequest::InitAsDefaultInstance() {
  ::clarifai::api::_GetConceptRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class GetConceptRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetConceptRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetConceptRequest::_Internal::user_app_id(const GetConceptRequest* msg) {
  return *msg->user_app_id_;
}
void GetConceptRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetConceptRequest::GetConceptRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.GetConceptRequest)
}
GetConceptRequest::GetConceptRequest(const GetConceptRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  concept_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_concept_id().empty()) {
    concept_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.concept_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetConceptRequest)
}

void GetConceptRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetConceptRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  concept_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

GetConceptRequest::~GetConceptRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetConceptRequest)
  SharedDtor();
}

void GetConceptRequest::SharedDtor() {
  concept_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetConceptRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetConceptRequest& GetConceptRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetConceptRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void GetConceptRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetConceptRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concept_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetConceptRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string concept_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_concept_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetConceptRequest.concept_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetConceptRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetConceptRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string concept_id = 2;
  if (this->concept_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_concept_id().data(), static_cast<int>(this->_internal_concept_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetConceptRequest.concept_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_concept_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetConceptRequest)
  return target;
}

size_t GetConceptRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetConceptRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string concept_id = 2;
  if (this->concept_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_concept_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetConceptRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.GetConceptRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetConceptRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetConceptRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.GetConceptRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.GetConceptRequest)
    MergeFrom(*source);
  }
}

void GetConceptRequest::MergeFrom(const GetConceptRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetConceptRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.concept_id().size() > 0) {

    concept_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.concept_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void GetConceptRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.GetConceptRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetConceptRequest::CopyFrom(const GetConceptRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetConceptRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConceptRequest::IsInitialized() const {
  return true;
}

void GetConceptRequest::InternalSwap(GetConceptRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  concept_id_.Swap(&other->concept_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetConceptRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListConceptsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_ListConceptsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class ListConceptsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListConceptsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListConceptsRequest::_Internal::user_app_id(const ListConceptsRequest* msg) {
  return *msg->user_app_id_;
}
void ListConceptsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListConceptsRequest::ListConceptsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ListConceptsRequest)
}
ListConceptsRequest::ListConceptsRequest(const ListConceptsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListConceptsRequest)
}

void ListConceptsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListConceptsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

ListConceptsRequest::~ListConceptsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListConceptsRequest)
  SharedDtor();
}

void ListConceptsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListConceptsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListConceptsRequest& ListConceptsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListConceptsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ListConceptsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListConceptsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear();
}

const char* ListConceptsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListConceptsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListConceptsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // uint32 page = 2;
  if (this->page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListConceptsRequest)
  return target;
}

size_t ListConceptsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListConceptsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 2;
  if (this->page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->per_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_per_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListConceptsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ListConceptsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListConceptsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListConceptsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ListConceptsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ListConceptsRequest)
    MergeFrom(*source);
  }
}

void ListConceptsRequest::MergeFrom(const ListConceptsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListConceptsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from.per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
}

void ListConceptsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ListConceptsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListConceptsRequest::CopyFrom(const ListConceptsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListConceptsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListConceptsRequest::IsInitialized() const {
  return true;
}

void ListConceptsRequest::InternalSwap(ListConceptsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_app_id_, other->user_app_id_);
  swap(page_, other->page_);
  swap(per_page_, other->per_page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListConceptsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostConceptsSearchesRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostConceptsSearchesRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
  ::clarifai::api::_PostConceptsSearchesRequest_default_instance_._instance.get_mutable()->concept_query_ = const_cast< ::clarifai::api::ConceptQuery*>(
      ::clarifai::api::ConceptQuery::internal_default_instance());
  ::clarifai::api::_PostConceptsSearchesRequest_default_instance_._instance.get_mutable()->pagination_ = const_cast< ::clarifai::api::Pagination*>(
      ::clarifai::api::Pagination::internal_default_instance());
}
class PostConceptsSearchesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostConceptsSearchesRequest* msg);
  static const ::clarifai::api::ConceptQuery& concept_query(const PostConceptsSearchesRequest* msg);
  static const ::clarifai::api::Pagination& pagination(const PostConceptsSearchesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostConceptsSearchesRequest::_Internal::user_app_id(const PostConceptsSearchesRequest* msg) {
  return *msg->user_app_id_;
}
const ::clarifai::api::ConceptQuery&
PostConceptsSearchesRequest::_Internal::concept_query(const PostConceptsSearchesRequest* msg) {
  return *msg->concept_query_;
}
const ::clarifai::api::Pagination&
PostConceptsSearchesRequest::_Internal::pagination(const PostConceptsSearchesRequest* msg) {
  return *msg->pagination_;
}
void PostConceptsSearchesRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostConceptsSearchesRequest::clear_concept_query() {
  if (GetArenaNoVirtual() == nullptr && concept_query_ != nullptr) {
    delete concept_query_;
  }
  concept_query_ = nullptr;
}
PostConceptsSearchesRequest::PostConceptsSearchesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostConceptsSearchesRequest)
}
PostConceptsSearchesRequest::PostConceptsSearchesRequest(const PostConceptsSearchesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  if (from._internal_has_concept_query()) {
    concept_query_ = new ::clarifai::api::ConceptQuery(*from.concept_query_);
  } else {
    concept_query_ = nullptr;
  }
  if (from._internal_has_pagination()) {
    pagination_ = new ::clarifai::api::Pagination(*from.pagination_);
  } else {
    pagination_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostConceptsSearchesRequest)
}

void PostConceptsSearchesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostConceptsSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pagination_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(pagination_));
}

PostConceptsSearchesRequest::~PostConceptsSearchesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostConceptsSearchesRequest)
  SharedDtor();
}

void PostConceptsSearchesRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
  if (this != internal_default_instance()) delete concept_query_;
  if (this != internal_default_instance()) delete pagination_;
}

void PostConceptsSearchesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostConceptsSearchesRequest& PostConceptsSearchesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostConceptsSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostConceptsSearchesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostConceptsSearchesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && concept_query_ != nullptr) {
    delete concept_query_;
  }
  concept_query_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostConceptsSearchesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.ConceptQuery concept_query = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_concept_query(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Pagination pagination = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostConceptsSearchesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostConceptsSearchesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // .clarifai.api.ConceptQuery concept_query = 2;
  if (this->has_concept_query()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::concept_query(this), target, stream);
  }

  // .clarifai.api.Pagination pagination = 3;
  if (this->has_pagination()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pagination(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostConceptsSearchesRequest)
  return target;
}

size_t PostConceptsSearchesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostConceptsSearchesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // .clarifai.api.ConceptQuery concept_query = 2;
  if (this->has_concept_query()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *concept_query_);
  }

  // .clarifai.api.Pagination pagination = 3;
  if (this->has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pagination_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostConceptsSearchesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostConceptsSearchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostConceptsSearchesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostConceptsSearchesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostConceptsSearchesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostConceptsSearchesRequest)
    MergeFrom(*source);
  }
}

void PostConceptsSearchesRequest::MergeFrom(const PostConceptsSearchesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostConceptsSearchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.has_concept_query()) {
    _internal_mutable_concept_query()->::clarifai::api::ConceptQuery::MergeFrom(from._internal_concept_query());
  }
  if (from.has_pagination()) {
    _internal_mutable_pagination()->::clarifai::api::Pagination::MergeFrom(from._internal_pagination());
  }
}

void PostConceptsSearchesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostConceptsSearchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostConceptsSearchesRequest::CopyFrom(const PostConceptsSearchesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostConceptsSearchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostConceptsSearchesRequest::IsInitialized() const {
  return true;
}

void PostConceptsSearchesRequest::InternalSwap(PostConceptsSearchesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_app_id_, other->user_app_id_);
  swap(concept_query_, other->concept_query_);
  swap(pagination_, other->pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostConceptsSearchesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostConceptsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostConceptsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PostConceptsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostConceptsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostConceptsRequest::_Internal::user_app_id(const PostConceptsRequest* msg) {
  return *msg->user_app_id_;
}
void PostConceptsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostConceptsRequest::clear_concepts() {
  concepts_.Clear();
}
PostConceptsRequest::PostConceptsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostConceptsRequest)
}
PostConceptsRequest::PostConceptsRequest(const PostConceptsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      concepts_(from.concepts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostConceptsRequest)
}

void PostConceptsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostConceptsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  user_app_id_ = nullptr;
}

PostConceptsRequest::~PostConceptsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostConceptsRequest)
  SharedDtor();
}

void PostConceptsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostConceptsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostConceptsRequest& PostConceptsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostConceptsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostConceptsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostConceptsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concepts_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostConceptsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Concept concepts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_concepts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostConceptsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostConceptsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Concept concepts = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_concepts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_concepts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostConceptsRequest)
  return target;
}

size_t PostConceptsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostConceptsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Concept concepts = 2;
  total_size += 1UL * this->_internal_concepts_size();
  for (const auto& msg : this->concepts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostConceptsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostConceptsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostConceptsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostConceptsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostConceptsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostConceptsRequest)
    MergeFrom(*source);
  }
}

void PostConceptsRequest::MergeFrom(const PostConceptsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostConceptsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  concepts_.MergeFrom(from.concepts_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void PostConceptsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostConceptsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostConceptsRequest::CopyFrom(const PostConceptsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostConceptsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostConceptsRequest::IsInitialized() const {
  return true;
}

void PostConceptsRequest::InternalSwap(PostConceptsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  concepts_.InternalSwap(&other->concepts_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostConceptsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PatchConceptsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PatchConceptsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PatchConceptsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchConceptsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchConceptsRequest::_Internal::user_app_id(const PatchConceptsRequest* msg) {
  return *msg->user_app_id_;
}
void PatchConceptsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PatchConceptsRequest::clear_concepts() {
  concepts_.Clear();
}
PatchConceptsRequest::PatchConceptsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PatchConceptsRequest)
}
PatchConceptsRequest::PatchConceptsRequest(const PatchConceptsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      concepts_(from.concepts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action().empty()) {
    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchConceptsRequest)
}

void PatchConceptsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PatchConceptsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

PatchConceptsRequest::~PatchConceptsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchConceptsRequest)
  SharedDtor();
}

void PatchConceptsRequest::SharedDtor() {
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PatchConceptsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PatchConceptsRequest& PatchConceptsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PatchConceptsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PatchConceptsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchConceptsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concepts_.Clear();
  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PatchConceptsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Concept concepts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_concepts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchConceptsRequest.action"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PatchConceptsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchConceptsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Concept concepts = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_concepts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_concepts(i), target, stream);
  }

  // string action = 3;
  if (this->action().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchConceptsRequest.action");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchConceptsRequest)
  return target;
}

size_t PatchConceptsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchConceptsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Concept concepts = 2;
  total_size += 1UL * this->_internal_concepts_size();
  for (const auto& msg : this->concepts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string action = 3;
  if (this->action().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PatchConceptsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PatchConceptsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PatchConceptsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PatchConceptsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PatchConceptsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PatchConceptsRequest)
    MergeFrom(*source);
  }
}

void PatchConceptsRequest::MergeFrom(const PatchConceptsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchConceptsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  concepts_.MergeFrom(from.concepts_);
  if (from.action().size() > 0) {

    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void PatchConceptsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PatchConceptsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatchConceptsRequest::CopyFrom(const PatchConceptsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchConceptsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchConceptsRequest::IsInitialized() const {
  return true;
}

void PatchConceptsRequest::InternalSwap(PatchConceptsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  concepts_.InternalSwap(&other->concepts_);
  action_.Swap(&other->action_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchConceptsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetConceptCountsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_GetConceptCountsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class GetConceptCountsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetConceptCountsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetConceptCountsRequest::_Internal::user_app_id(const GetConceptCountsRequest* msg) {
  return *msg->user_app_id_;
}
void GetConceptCountsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetConceptCountsRequest::GetConceptCountsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.GetConceptCountsRequest)
}
GetConceptCountsRequest::GetConceptCountsRequest(const GetConceptCountsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetConceptCountsRequest)
}

void GetConceptCountsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetConceptCountsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

GetConceptCountsRequest::~GetConceptCountsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetConceptCountsRequest)
  SharedDtor();
}

void GetConceptCountsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetConceptCountsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetConceptCountsRequest& GetConceptCountsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetConceptCountsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void GetConceptCountsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetConceptCountsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear();
}

const char* GetConceptCountsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetConceptCountsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetConceptCountsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // uint32 page = 2;
  if (this->page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetConceptCountsRequest)
  return target;
}

size_t GetConceptCountsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetConceptCountsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 2;
  if (this->page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->per_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_per_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetConceptCountsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.GetConceptCountsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetConceptCountsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetConceptCountsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.GetConceptCountsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.GetConceptCountsRequest)
    MergeFrom(*source);
  }
}

void GetConceptCountsRequest::MergeFrom(const GetConceptCountsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetConceptCountsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from.per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
}

void GetConceptCountsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.GetConceptCountsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetConceptCountsRequest::CopyFrom(const GetConceptCountsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetConceptCountsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConceptCountsRequest::IsInitialized() const {
  return true;
}

void GetConceptCountsRequest::InternalSwap(GetConceptCountsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_app_id_, other->user_app_id_);
  swap(page_, other->page_);
  swap(per_page_, other->per_page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetConceptCountsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SingleConceptResponse::InitAsDefaultInstance() {
  ::clarifai::api::_SingleConceptResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
  ::clarifai::api::_SingleConceptResponse_default_instance_._instance.get_mutable()->concept_ = const_cast< ::clarifai::api::Concept*>(
      ::clarifai::api::Concept::internal_default_instance());
}
class SingleConceptResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleConceptResponse* msg);
  static const ::clarifai::api::Concept& concept(const SingleConceptResponse* msg);
};

const ::clarifai::api::status::Status&
SingleConceptResponse::_Internal::status(const SingleConceptResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::Concept&
SingleConceptResponse::_Internal::concept(const SingleConceptResponse* msg) {
  return *msg->concept_;
}
void SingleConceptResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleConceptResponse::clear_concept() {
  if (GetArenaNoVirtual() == nullptr && concept_ != nullptr) {
    delete concept_;
  }
  concept_ = nullptr;
}
SingleConceptResponse::SingleConceptResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.SingleConceptResponse)
}
SingleConceptResponse::SingleConceptResponse(const SingleConceptResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_concept()) {
    concept_ = new ::clarifai::api::Concept(*from.concept_);
  } else {
    concept_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleConceptResponse)
}

void SingleConceptResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SingleConceptResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&concept_) -
      reinterpret_cast<char*>(&status_)) + sizeof(concept_));
}

SingleConceptResponse::~SingleConceptResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleConceptResponse)
  SharedDtor();
}

void SingleConceptResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete concept_;
}

void SingleConceptResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleConceptResponse& SingleConceptResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleConceptResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void SingleConceptResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleConceptResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && concept_ != nullptr) {
    delete concept_;
  }
  concept_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SingleConceptResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Concept concept = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_concept(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleConceptResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleConceptResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.Concept concept = 2;
  if (this->has_concept()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::concept(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleConceptResponse)
  return target;
}

size_t SingleConceptResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleConceptResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.Concept concept = 2;
  if (this->has_concept()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *concept_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleConceptResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.SingleConceptResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleConceptResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleConceptResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.SingleConceptResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.SingleConceptResponse)
    MergeFrom(*source);
  }
}

void SingleConceptResponse::MergeFrom(const SingleConceptResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleConceptResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.has_concept()) {
    _internal_mutable_concept()->::clarifai::api::Concept::MergeFrom(from._internal_concept());
  }
}

void SingleConceptResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.SingleConceptResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleConceptResponse::CopyFrom(const SingleConceptResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleConceptResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleConceptResponse::IsInitialized() const {
  return true;
}

void SingleConceptResponse::InternalSwap(SingleConceptResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(concept_, other->concept_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleConceptResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiConceptResponse::InitAsDefaultInstance() {
  ::clarifai::api::_MultiConceptResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class MultiConceptResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiConceptResponse* msg);
};

const ::clarifai::api::status::Status&
MultiConceptResponse::_Internal::status(const MultiConceptResponse* msg) {
  return *msg->status_;
}
void MultiConceptResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiConceptResponse::clear_concepts() {
  concepts_.Clear();
}
MultiConceptResponse::MultiConceptResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MultiConceptResponse)
}
MultiConceptResponse::MultiConceptResponse(const MultiConceptResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      concepts_(from.concepts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiConceptResponse)
}

void MultiConceptResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiConceptResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

MultiConceptResponse::~MultiConceptResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiConceptResponse)
  SharedDtor();
}

void MultiConceptResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void MultiConceptResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiConceptResponse& MultiConceptResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiConceptResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiConceptResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiConceptResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concepts_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultiConceptResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Concept concepts = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_concepts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiConceptResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiConceptResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.Concept concepts = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_concepts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_concepts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiConceptResponse)
  return target;
}

size_t MultiConceptResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiConceptResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Concept concepts = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_concepts_size();
  for (const auto& msg : this->concepts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiConceptResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MultiConceptResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiConceptResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiConceptResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MultiConceptResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MultiConceptResponse)
    MergeFrom(*source);
  }
}

void MultiConceptResponse::MergeFrom(const MultiConceptResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiConceptResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  concepts_.MergeFrom(from.concepts_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void MultiConceptResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MultiConceptResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiConceptResponse::CopyFrom(const MultiConceptResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiConceptResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiConceptResponse::IsInitialized() const {
  return true;
}

void MultiConceptResponse::InternalSwap(MultiConceptResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  concepts_.InternalSwap(&other->concepts_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiConceptResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiConceptCountResponse::InitAsDefaultInstance() {
  ::clarifai::api::_MultiConceptCountResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class MultiConceptCountResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiConceptCountResponse* msg);
};

const ::clarifai::api::status::Status&
MultiConceptCountResponse::_Internal::status(const MultiConceptCountResponse* msg) {
  return *msg->status_;
}
void MultiConceptCountResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiConceptCountResponse::clear_concept_counts() {
  concept_counts_.Clear();
}
MultiConceptCountResponse::MultiConceptCountResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MultiConceptCountResponse)
}
MultiConceptCountResponse::MultiConceptCountResponse(const MultiConceptCountResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      concept_counts_(from.concept_counts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiConceptCountResponse)
}

void MultiConceptCountResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiConceptCountResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

MultiConceptCountResponse::~MultiConceptCountResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiConceptCountResponse)
  SharedDtor();
}

void MultiConceptCountResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void MultiConceptCountResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiConceptCountResponse& MultiConceptCountResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiConceptCountResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiConceptCountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiConceptCountResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concept_counts_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultiConceptCountResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.ConceptCount concept_counts = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_concept_counts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiConceptCountResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiConceptCountResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.ConceptCount concept_counts = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_concept_counts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_concept_counts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiConceptCountResponse)
  return target;
}

size_t MultiConceptCountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiConceptCountResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ConceptCount concept_counts = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_concept_counts_size();
  for (const auto& msg : this->concept_counts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiConceptCountResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MultiConceptCountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiConceptCountResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiConceptCountResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MultiConceptCountResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MultiConceptCountResponse)
    MergeFrom(*source);
  }
}

void MultiConceptCountResponse::MergeFrom(const MultiConceptCountResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiConceptCountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  concept_counts_.MergeFrom(from.concept_counts_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void MultiConceptCountResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MultiConceptCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiConceptCountResponse::CopyFrom(const MultiConceptCountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiConceptCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiConceptCountResponse::IsInitialized() const {
  return true;
}

void MultiConceptCountResponse::InternalSwap(MultiConceptCountResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  concept_counts_.InternalSwap(&other->concept_counts_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiConceptCountResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListConceptRelationsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_ListConceptRelationsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class ListConceptRelationsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListConceptRelationsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListConceptRelationsRequest::_Internal::user_app_id(const ListConceptRelationsRequest* msg) {
  return *msg->user_app_id_;
}
void ListConceptRelationsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListConceptRelationsRequest::ListConceptRelationsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ListConceptRelationsRequest)
}
ListConceptRelationsRequest::ListConceptRelationsRequest(const ListConceptRelationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  concept_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_concept_id().empty()) {
    concept_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.concept_id_);
  }
  predicate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_predicate().empty()) {
    predicate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.predicate_);
  }
  knowledge_graph_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_knowledge_graph_id().empty()) {
    knowledge_graph_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.knowledge_graph_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListConceptRelationsRequest)
}

void ListConceptRelationsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListConceptRelationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  concept_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  predicate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  knowledge_graph_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

ListConceptRelationsRequest::~ListConceptRelationsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListConceptRelationsRequest)
  SharedDtor();
}

void ListConceptRelationsRequest::SharedDtor() {
  concept_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  predicate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  knowledge_graph_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListConceptRelationsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListConceptRelationsRequest& ListConceptRelationsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListConceptRelationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ListConceptRelationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListConceptRelationsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concept_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  predicate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  knowledge_graph_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear();
}

const char* ListConceptRelationsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string concept_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_concept_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListConceptRelationsRequest.concept_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string predicate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_predicate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListConceptRelationsRequest.predicate"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string knowledge_graph_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_knowledge_graph_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListConceptRelationsRequest.knowledge_graph_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 page = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 per_page = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListConceptRelationsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListConceptRelationsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string concept_id = 2;
  if (this->concept_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_concept_id().data(), static_cast<int>(this->_internal_concept_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListConceptRelationsRequest.concept_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_concept_id(), target);
  }

  // string predicate = 3;
  if (this->predicate().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_predicate().data(), static_cast<int>(this->_internal_predicate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListConceptRelationsRequest.predicate");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_predicate(), target);
  }

  // string knowledge_graph_id = 4;
  if (this->knowledge_graph_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_knowledge_graph_id().data(), static_cast<int>(this->_internal_knowledge_graph_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListConceptRelationsRequest.knowledge_graph_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_knowledge_graph_id(), target);
  }

  // uint32 page = 5;
  if (this->page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_page(), target);
  }

  // uint32 per_page = 6;
  if (this->per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListConceptRelationsRequest)
  return target;
}

size_t ListConceptRelationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListConceptRelationsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string concept_id = 2;
  if (this->concept_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_concept_id());
  }

  // string predicate = 3;
  if (this->predicate().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_predicate());
  }

  // string knowledge_graph_id = 4;
  if (this->knowledge_graph_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_knowledge_graph_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 5;
  if (this->page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page());
  }

  // uint32 per_page = 6;
  if (this->per_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_per_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListConceptRelationsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ListConceptRelationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListConceptRelationsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListConceptRelationsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ListConceptRelationsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ListConceptRelationsRequest)
    MergeFrom(*source);
  }
}

void ListConceptRelationsRequest::MergeFrom(const ListConceptRelationsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListConceptRelationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.concept_id().size() > 0) {

    concept_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.concept_id_);
  }
  if (from.predicate().size() > 0) {

    predicate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.predicate_);
  }
  if (from.knowledge_graph_id().size() > 0) {

    knowledge_graph_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.knowledge_graph_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from.per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
}

void ListConceptRelationsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ListConceptRelationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListConceptRelationsRequest::CopyFrom(const ListConceptRelationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListConceptRelationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListConceptRelationsRequest::IsInitialized() const {
  return true;
}

void ListConceptRelationsRequest::InternalSwap(ListConceptRelationsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  concept_id_.Swap(&other->concept_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  predicate_.Swap(&other->predicate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  knowledge_graph_id_.Swap(&other->knowledge_graph_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
  swap(page_, other->page_);
  swap(per_page_, other->per_page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListConceptRelationsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostConceptRelationsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostConceptRelationsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PostConceptRelationsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostConceptRelationsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostConceptRelationsRequest::_Internal::user_app_id(const PostConceptRelationsRequest* msg) {
  return *msg->user_app_id_;
}
void PostConceptRelationsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostConceptRelationsRequest::clear_concept_relations() {
  concept_relations_.Clear();
}
PostConceptRelationsRequest::PostConceptRelationsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostConceptRelationsRequest)
}
PostConceptRelationsRequest::PostConceptRelationsRequest(const PostConceptRelationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      concept_relations_(from.concept_relations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  concept_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_concept_id().empty()) {
    concept_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.concept_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostConceptRelationsRequest)
}

void PostConceptRelationsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostConceptRelationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  concept_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

PostConceptRelationsRequest::~PostConceptRelationsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostConceptRelationsRequest)
  SharedDtor();
}

void PostConceptRelationsRequest::SharedDtor() {
  concept_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostConceptRelationsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostConceptRelationsRequest& PostConceptRelationsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostConceptRelationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostConceptRelationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostConceptRelationsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concept_relations_.Clear();
  concept_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostConceptRelationsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string concept_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_concept_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostConceptRelationsRequest.concept_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.ConceptRelation concept_relations = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_concept_relations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostConceptRelationsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostConceptRelationsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string concept_id = 2;
  if (this->concept_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_concept_id().data(), static_cast<int>(this->_internal_concept_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostConceptRelationsRequest.concept_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_concept_id(), target);
  }

  // repeated .clarifai.api.ConceptRelation concept_relations = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_concept_relations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_concept_relations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostConceptRelationsRequest)
  return target;
}

size_t PostConceptRelationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostConceptRelationsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ConceptRelation concept_relations = 3;
  total_size += 1UL * this->_internal_concept_relations_size();
  for (const auto& msg : this->concept_relations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string concept_id = 2;
  if (this->concept_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_concept_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostConceptRelationsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostConceptRelationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostConceptRelationsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostConceptRelationsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostConceptRelationsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostConceptRelationsRequest)
    MergeFrom(*source);
  }
}

void PostConceptRelationsRequest::MergeFrom(const PostConceptRelationsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostConceptRelationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  concept_relations_.MergeFrom(from.concept_relations_);
  if (from.concept_id().size() > 0) {

    concept_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.concept_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void PostConceptRelationsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostConceptRelationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostConceptRelationsRequest::CopyFrom(const PostConceptRelationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostConceptRelationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostConceptRelationsRequest::IsInitialized() const {
  return true;
}

void PostConceptRelationsRequest::InternalSwap(PostConceptRelationsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  concept_relations_.InternalSwap(&other->concept_relations_);
  concept_id_.Swap(&other->concept_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostConceptRelationsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteConceptRelationsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_DeleteConceptRelationsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class DeleteConceptRelationsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteConceptRelationsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteConceptRelationsRequest::_Internal::user_app_id(const DeleteConceptRelationsRequest* msg) {
  return *msg->user_app_id_;
}
void DeleteConceptRelationsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
DeleteConceptRelationsRequest::DeleteConceptRelationsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.DeleteConceptRelationsRequest)
}
DeleteConceptRelationsRequest::DeleteConceptRelationsRequest(const DeleteConceptRelationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  concept_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_concept_id().empty()) {
    concept_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.concept_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteConceptRelationsRequest)
}

void DeleteConceptRelationsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteConceptRelationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  concept_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

DeleteConceptRelationsRequest::~DeleteConceptRelationsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteConceptRelationsRequest)
  SharedDtor();
}

void DeleteConceptRelationsRequest::SharedDtor() {
  concept_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void DeleteConceptRelationsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteConceptRelationsRequest& DeleteConceptRelationsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteConceptRelationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void DeleteConceptRelationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteConceptRelationsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  concept_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* DeleteConceptRelationsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string concept_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_concept_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteConceptRelationsRequest.concept_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteConceptRelationsRequest.ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteConceptRelationsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteConceptRelationsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string concept_id = 2;
  if (this->concept_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_concept_id().data(), static_cast<int>(this->_internal_concept_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteConceptRelationsRequest.concept_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_concept_id(), target);
  }

  // repeated string ids = 3;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteConceptRelationsRequest.ids");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteConceptRelationsRequest)
  return target;
}

size_t DeleteConceptRelationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteConceptRelationsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ids_.size());
  for (int i = 0, n = ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ids_.Get(i));
  }

  // string concept_id = 2;
  if (this->concept_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_concept_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteConceptRelationsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.DeleteConceptRelationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteConceptRelationsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteConceptRelationsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.DeleteConceptRelationsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.DeleteConceptRelationsRequest)
    MergeFrom(*source);
  }
}

void DeleteConceptRelationsRequest::MergeFrom(const DeleteConceptRelationsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteConceptRelationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  if (from.concept_id().size() > 0) {

    concept_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.concept_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void DeleteConceptRelationsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.DeleteConceptRelationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteConceptRelationsRequest::CopyFrom(const DeleteConceptRelationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteConceptRelationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteConceptRelationsRequest::IsInitialized() const {
  return true;
}

void DeleteConceptRelationsRequest::InternalSwap(DeleteConceptRelationsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
  concept_id_.Swap(&other->concept_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteConceptRelationsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListKnowledgeGraphsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_ListKnowledgeGraphsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class ListKnowledgeGraphsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListKnowledgeGraphsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListKnowledgeGraphsRequest::_Internal::user_app_id(const ListKnowledgeGraphsRequest* msg) {
  return *msg->user_app_id_;
}
void ListKnowledgeGraphsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListKnowledgeGraphsRequest::ListKnowledgeGraphsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ListKnowledgeGraphsRequest)
}
ListKnowledgeGraphsRequest::ListKnowledgeGraphsRequest(const ListKnowledgeGraphsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListKnowledgeGraphsRequest)
}

void ListKnowledgeGraphsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListKnowledgeGraphsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  user_app_id_ = nullptr;
}

ListKnowledgeGraphsRequest::~ListKnowledgeGraphsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListKnowledgeGraphsRequest)
  SharedDtor();
}

void ListKnowledgeGraphsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListKnowledgeGraphsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListKnowledgeGraphsRequest& ListKnowledgeGraphsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListKnowledgeGraphsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ListKnowledgeGraphsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListKnowledgeGraphsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ListKnowledgeGraphsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListKnowledgeGraphsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListKnowledgeGraphsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListKnowledgeGraphsRequest)
  return target;
}

size_t ListKnowledgeGraphsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListKnowledgeGraphsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListKnowledgeGraphsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ListKnowledgeGraphsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListKnowledgeGraphsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListKnowledgeGraphsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ListKnowledgeGraphsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ListKnowledgeGraphsRequest)
    MergeFrom(*source);
  }
}

void ListKnowledgeGraphsRequest::MergeFrom(const ListKnowledgeGraphsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListKnowledgeGraphsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void ListKnowledgeGraphsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ListKnowledgeGraphsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListKnowledgeGraphsRequest::CopyFrom(const ListKnowledgeGraphsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListKnowledgeGraphsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListKnowledgeGraphsRequest::IsInitialized() const {
  return true;
}

void ListKnowledgeGraphsRequest::InternalSwap(ListKnowledgeGraphsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListKnowledgeGraphsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostKnowledgeGraphsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostKnowledgeGraphsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PostKnowledgeGraphsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostKnowledgeGraphsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostKnowledgeGraphsRequest::_Internal::user_app_id(const PostKnowledgeGraphsRequest* msg) {
  return *msg->user_app_id_;
}
void PostKnowledgeGraphsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostKnowledgeGraphsRequest::clear_knowledge_graphs() {
  knowledge_graphs_.Clear();
}
PostKnowledgeGraphsRequest::PostKnowledgeGraphsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostKnowledgeGraphsRequest)
}
PostKnowledgeGraphsRequest::PostKnowledgeGraphsRequest(const PostKnowledgeGraphsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      knowledge_graphs_(from.knowledge_graphs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostKnowledgeGraphsRequest)
}

void PostKnowledgeGraphsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostKnowledgeGraphsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  user_app_id_ = nullptr;
}

PostKnowledgeGraphsRequest::~PostKnowledgeGraphsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostKnowledgeGraphsRequest)
  SharedDtor();
}

void PostKnowledgeGraphsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostKnowledgeGraphsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostKnowledgeGraphsRequest& PostKnowledgeGraphsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostKnowledgeGraphsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostKnowledgeGraphsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostKnowledgeGraphsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  knowledge_graphs_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostKnowledgeGraphsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.KnowledgeGraph knowledge_graphs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_knowledge_graphs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostKnowledgeGraphsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostKnowledgeGraphsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.KnowledgeGraph knowledge_graphs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_knowledge_graphs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_knowledge_graphs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostKnowledgeGraphsRequest)
  return target;
}

size_t PostKnowledgeGraphsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostKnowledgeGraphsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.KnowledgeGraph knowledge_graphs = 2;
  total_size += 1UL * this->_internal_knowledge_graphs_size();
  for (const auto& msg : this->knowledge_graphs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostKnowledgeGraphsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostKnowledgeGraphsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostKnowledgeGraphsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostKnowledgeGraphsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostKnowledgeGraphsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostKnowledgeGraphsRequest)
    MergeFrom(*source);
  }
}

void PostKnowledgeGraphsRequest::MergeFrom(const PostKnowledgeGraphsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostKnowledgeGraphsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  knowledge_graphs_.MergeFrom(from.knowledge_graphs_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void PostKnowledgeGraphsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostKnowledgeGraphsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostKnowledgeGraphsRequest::CopyFrom(const PostKnowledgeGraphsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostKnowledgeGraphsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostKnowledgeGraphsRequest::IsInitialized() const {
  return true;
}

void PostKnowledgeGraphsRequest::InternalSwap(PostKnowledgeGraphsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  knowledge_graphs_.InternalSwap(&other->knowledge_graphs_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostKnowledgeGraphsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListConceptMappingsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_ListConceptMappingsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class ListConceptMappingsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListConceptMappingsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListConceptMappingsRequest::_Internal::user_app_id(const ListConceptMappingsRequest* msg) {
  return *msg->user_app_id_;
}
void ListConceptMappingsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListConceptMappingsRequest::ListConceptMappingsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ListConceptMappingsRequest)
}
ListConceptMappingsRequest::ListConceptMappingsRequest(const ListConceptMappingsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListConceptMappingsRequest)
}

void ListConceptMappingsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListConceptMappingsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

ListConceptMappingsRequest::~ListConceptMappingsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListConceptMappingsRequest)
  SharedDtor();
}

void ListConceptMappingsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListConceptMappingsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListConceptMappingsRequest& ListConceptMappingsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListConceptMappingsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ListConceptMappingsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListConceptMappingsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear();
}

const char* ListConceptMappingsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListConceptMappingsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListConceptMappingsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // uint32 page = 2;
  if (this->page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListConceptMappingsRequest)
  return target;
}

size_t ListConceptMappingsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListConceptMappingsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 2;
  if (this->page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->per_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_per_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListConceptMappingsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ListConceptMappingsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListConceptMappingsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListConceptMappingsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ListConceptMappingsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ListConceptMappingsRequest)
    MergeFrom(*source);
  }
}

void ListConceptMappingsRequest::MergeFrom(const ListConceptMappingsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListConceptMappingsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from.per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
}

void ListConceptMappingsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ListConceptMappingsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListConceptMappingsRequest::CopyFrom(const ListConceptMappingsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListConceptMappingsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListConceptMappingsRequest::IsInitialized() const {
  return true;
}

void ListConceptMappingsRequest::InternalSwap(ListConceptMappingsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_app_id_, other->user_app_id_);
  swap(page_, other->page_);
  swap(per_page_, other->per_page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListConceptMappingsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostConceptMappingsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostConceptMappingsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
  ::clarifai::api::_PostConceptMappingsRequest_default_instance_._instance.get_mutable()->knowledge_graph_ = const_cast< ::clarifai::api::KnowledgeGraph*>(
      ::clarifai::api::KnowledgeGraph::internal_default_instance());
}
class PostConceptMappingsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostConceptMappingsRequest* msg);
  static const ::clarifai::api::KnowledgeGraph& knowledge_graph(const PostConceptMappingsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostConceptMappingsRequest::_Internal::user_app_id(const PostConceptMappingsRequest* msg) {
  return *msg->user_app_id_;
}
const ::clarifai::api::KnowledgeGraph&
PostConceptMappingsRequest::_Internal::knowledge_graph(const PostConceptMappingsRequest* msg) {
  return *msg->knowledge_graph_;
}
void PostConceptMappingsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostConceptMappingsRequest::clear_concept_mappings() {
  concept_mappings_.Clear();
}
void PostConceptMappingsRequest::clear_knowledge_graph() {
  if (GetArenaNoVirtual() == nullptr && knowledge_graph_ != nullptr) {
    delete knowledge_graph_;
  }
  knowledge_graph_ = nullptr;
}
PostConceptMappingsRequest::PostConceptMappingsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostConceptMappingsRequest)
}
PostConceptMappingsRequest::PostConceptMappingsRequest(const PostConceptMappingsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      concept_mappings_(from.concept_mappings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  if (from._internal_has_knowledge_graph()) {
    knowledge_graph_ = new ::clarifai::api::KnowledgeGraph(*from.knowledge_graph_);
  } else {
    knowledge_graph_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostConceptMappingsRequest)
}

void PostConceptMappingsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostConceptMappingsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&knowledge_graph_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(knowledge_graph_));
}

PostConceptMappingsRequest::~PostConceptMappingsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostConceptMappingsRequest)
  SharedDtor();
}

void PostConceptMappingsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
  if (this != internal_default_instance()) delete knowledge_graph_;
}

void PostConceptMappingsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostConceptMappingsRequest& PostConceptMappingsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostConceptMappingsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostConceptMappingsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostConceptMappingsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concept_mappings_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && knowledge_graph_ != nullptr) {
    delete knowledge_graph_;
  }
  knowledge_graph_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostConceptMappingsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.ConceptMapping concept_mappings = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_concept_mappings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .clarifai.api.KnowledgeGraph knowledge_graph = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_knowledge_graph(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostConceptMappingsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostConceptMappingsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.ConceptMapping concept_mappings = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_concept_mappings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_concept_mappings(i), target, stream);
  }

  // .clarifai.api.KnowledgeGraph knowledge_graph = 3;
  if (this->has_knowledge_graph()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::knowledge_graph(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostConceptMappingsRequest)
  return target;
}

size_t PostConceptMappingsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostConceptMappingsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ConceptMapping concept_mappings = 2;
  total_size += 1UL * this->_internal_concept_mappings_size();
  for (const auto& msg : this->concept_mappings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // .clarifai.api.KnowledgeGraph knowledge_graph = 3;
  if (this->has_knowledge_graph()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *knowledge_graph_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostConceptMappingsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostConceptMappingsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostConceptMappingsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostConceptMappingsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostConceptMappingsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostConceptMappingsRequest)
    MergeFrom(*source);
  }
}

void PostConceptMappingsRequest::MergeFrom(const PostConceptMappingsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostConceptMappingsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  concept_mappings_.MergeFrom(from.concept_mappings_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.has_knowledge_graph()) {
    _internal_mutable_knowledge_graph()->::clarifai::api::KnowledgeGraph::MergeFrom(from._internal_knowledge_graph());
  }
}

void PostConceptMappingsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostConceptMappingsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostConceptMappingsRequest::CopyFrom(const PostConceptMappingsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostConceptMappingsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostConceptMappingsRequest::IsInitialized() const {
  return true;
}

void PostConceptMappingsRequest::InternalSwap(PostConceptMappingsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  concept_mappings_.InternalSwap(&other->concept_mappings_);
  swap(user_app_id_, other->user_app_id_);
  swap(knowledge_graph_, other->knowledge_graph_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostConceptMappingsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostConceptMappingJobsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostConceptMappingJobsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PostConceptMappingJobsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostConceptMappingJobsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostConceptMappingJobsRequest::_Internal::user_app_id(const PostConceptMappingJobsRequest* msg) {
  return *msg->user_app_id_;
}
void PostConceptMappingJobsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostConceptMappingJobsRequest::clear_concept_mapping_jobs() {
  concept_mapping_jobs_.Clear();
}
PostConceptMappingJobsRequest::PostConceptMappingJobsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostConceptMappingJobsRequest)
}
PostConceptMappingJobsRequest::PostConceptMappingJobsRequest(const PostConceptMappingJobsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      concept_mapping_jobs_(from.concept_mapping_jobs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostConceptMappingJobsRequest)
}

void PostConceptMappingJobsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostConceptMappingJobsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  user_app_id_ = nullptr;
}

PostConceptMappingJobsRequest::~PostConceptMappingJobsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostConceptMappingJobsRequest)
  SharedDtor();
}

void PostConceptMappingJobsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostConceptMappingJobsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostConceptMappingJobsRequest& PostConceptMappingJobsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostConceptMappingJobsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostConceptMappingJobsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostConceptMappingJobsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concept_mapping_jobs_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostConceptMappingJobsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.ConceptMappingJob concept_mapping_jobs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_concept_mapping_jobs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostConceptMappingJobsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostConceptMappingJobsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.ConceptMappingJob concept_mapping_jobs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_concept_mapping_jobs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_concept_mapping_jobs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostConceptMappingJobsRequest)
  return target;
}

size_t PostConceptMappingJobsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostConceptMappingJobsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ConceptMappingJob concept_mapping_jobs = 2;
  total_size += 1UL * this->_internal_concept_mapping_jobs_size();
  for (const auto& msg : this->concept_mapping_jobs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostConceptMappingJobsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostConceptMappingJobsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostConceptMappingJobsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostConceptMappingJobsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostConceptMappingJobsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostConceptMappingJobsRequest)
    MergeFrom(*source);
  }
}

void PostConceptMappingJobsRequest::MergeFrom(const PostConceptMappingJobsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostConceptMappingJobsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  concept_mapping_jobs_.MergeFrom(from.concept_mapping_jobs_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void PostConceptMappingJobsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostConceptMappingJobsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostConceptMappingJobsRequest::CopyFrom(const PostConceptMappingJobsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostConceptMappingJobsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostConceptMappingJobsRequest::IsInitialized() const {
  return true;
}

void PostConceptMappingJobsRequest::InternalSwap(PostConceptMappingJobsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  concept_mapping_jobs_.InternalSwap(&other->concept_mapping_jobs_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostConceptMappingJobsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SingleConceptRelationResponse::InitAsDefaultInstance() {
  ::clarifai::api::_SingleConceptRelationResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
  ::clarifai::api::_SingleConceptRelationResponse_default_instance_._instance.get_mutable()->concept_relation_ = const_cast< ::clarifai::api::ConceptRelation*>(
      ::clarifai::api::ConceptRelation::internal_default_instance());
}
class SingleConceptRelationResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleConceptRelationResponse* msg);
  static const ::clarifai::api::ConceptRelation& concept_relation(const SingleConceptRelationResponse* msg);
};

const ::clarifai::api::status::Status&
SingleConceptRelationResponse::_Internal::status(const SingleConceptRelationResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::ConceptRelation&
SingleConceptRelationResponse::_Internal::concept_relation(const SingleConceptRelationResponse* msg) {
  return *msg->concept_relation_;
}
void SingleConceptRelationResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleConceptRelationResponse::clear_concept_relation() {
  if (GetArenaNoVirtual() == nullptr && concept_relation_ != nullptr) {
    delete concept_relation_;
  }
  concept_relation_ = nullptr;
}
SingleConceptRelationResponse::SingleConceptRelationResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.SingleConceptRelationResponse)
}
SingleConceptRelationResponse::SingleConceptRelationResponse(const SingleConceptRelationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_concept_relation()) {
    concept_relation_ = new ::clarifai::api::ConceptRelation(*from.concept_relation_);
  } else {
    concept_relation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleConceptRelationResponse)
}

void SingleConceptRelationResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SingleConceptRelationResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&concept_relation_) -
      reinterpret_cast<char*>(&status_)) + sizeof(concept_relation_));
}

SingleConceptRelationResponse::~SingleConceptRelationResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleConceptRelationResponse)
  SharedDtor();
}

void SingleConceptRelationResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete concept_relation_;
}

void SingleConceptRelationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleConceptRelationResponse& SingleConceptRelationResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleConceptRelationResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void SingleConceptRelationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleConceptRelationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && concept_relation_ != nullptr) {
    delete concept_relation_;
  }
  concept_relation_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SingleConceptRelationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.ConceptRelation concept_relation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_concept_relation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleConceptRelationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleConceptRelationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.ConceptRelation concept_relation = 2;
  if (this->has_concept_relation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::concept_relation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleConceptRelationResponse)
  return target;
}

size_t SingleConceptRelationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleConceptRelationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.ConceptRelation concept_relation = 2;
  if (this->has_concept_relation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *concept_relation_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleConceptRelationResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.SingleConceptRelationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleConceptRelationResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleConceptRelationResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.SingleConceptRelationResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.SingleConceptRelationResponse)
    MergeFrom(*source);
  }
}

void SingleConceptRelationResponse::MergeFrom(const SingleConceptRelationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleConceptRelationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.has_concept_relation()) {
    _internal_mutable_concept_relation()->::clarifai::api::ConceptRelation::MergeFrom(from._internal_concept_relation());
  }
}

void SingleConceptRelationResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.SingleConceptRelationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleConceptRelationResponse::CopyFrom(const SingleConceptRelationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleConceptRelationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleConceptRelationResponse::IsInitialized() const {
  return true;
}

void SingleConceptRelationResponse::InternalSwap(SingleConceptRelationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(concept_relation_, other->concept_relation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleConceptRelationResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiConceptRelationResponse::InitAsDefaultInstance() {
  ::clarifai::api::_MultiConceptRelationResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class MultiConceptRelationResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiConceptRelationResponse* msg);
};

const ::clarifai::api::status::Status&
MultiConceptRelationResponse::_Internal::status(const MultiConceptRelationResponse* msg) {
  return *msg->status_;
}
void MultiConceptRelationResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiConceptRelationResponse::clear_concept_relations() {
  concept_relations_.Clear();
}
MultiConceptRelationResponse::MultiConceptRelationResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MultiConceptRelationResponse)
}
MultiConceptRelationResponse::MultiConceptRelationResponse(const MultiConceptRelationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      concept_relations_(from.concept_relations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiConceptRelationResponse)
}

void MultiConceptRelationResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiConceptRelationResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

MultiConceptRelationResponse::~MultiConceptRelationResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiConceptRelationResponse)
  SharedDtor();
}

void MultiConceptRelationResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void MultiConceptRelationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiConceptRelationResponse& MultiConceptRelationResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiConceptRelationResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiConceptRelationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiConceptRelationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concept_relations_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultiConceptRelationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.ConceptRelation concept_relations = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_concept_relations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiConceptRelationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiConceptRelationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.ConceptRelation concept_relations = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_concept_relations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_concept_relations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiConceptRelationResponse)
  return target;
}

size_t MultiConceptRelationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiConceptRelationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ConceptRelation concept_relations = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_concept_relations_size();
  for (const auto& msg : this->concept_relations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiConceptRelationResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MultiConceptRelationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiConceptRelationResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiConceptRelationResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MultiConceptRelationResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MultiConceptRelationResponse)
    MergeFrom(*source);
  }
}

void MultiConceptRelationResponse::MergeFrom(const MultiConceptRelationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiConceptRelationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  concept_relations_.MergeFrom(from.concept_relations_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void MultiConceptRelationResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MultiConceptRelationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiConceptRelationResponse::CopyFrom(const MultiConceptRelationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiConceptRelationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiConceptRelationResponse::IsInitialized() const {
  return true;
}

void MultiConceptRelationResponse::InternalSwap(MultiConceptRelationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  concept_relations_.InternalSwap(&other->concept_relations_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiConceptRelationResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SingleKnowledgeGraphResponse::InitAsDefaultInstance() {
  ::clarifai::api::_SingleKnowledgeGraphResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
  ::clarifai::api::_SingleKnowledgeGraphResponse_default_instance_._instance.get_mutable()->knowledge_graph_ = const_cast< ::clarifai::api::KnowledgeGraph*>(
      ::clarifai::api::KnowledgeGraph::internal_default_instance());
}
class SingleKnowledgeGraphResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleKnowledgeGraphResponse* msg);
  static const ::clarifai::api::KnowledgeGraph& knowledge_graph(const SingleKnowledgeGraphResponse* msg);
};

const ::clarifai::api::status::Status&
SingleKnowledgeGraphResponse::_Internal::status(const SingleKnowledgeGraphResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::KnowledgeGraph&
SingleKnowledgeGraphResponse::_Internal::knowledge_graph(const SingleKnowledgeGraphResponse* msg) {
  return *msg->knowledge_graph_;
}
void SingleKnowledgeGraphResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleKnowledgeGraphResponse::clear_knowledge_graph() {
  if (GetArenaNoVirtual() == nullptr && knowledge_graph_ != nullptr) {
    delete knowledge_graph_;
  }
  knowledge_graph_ = nullptr;
}
SingleKnowledgeGraphResponse::SingleKnowledgeGraphResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.SingleKnowledgeGraphResponse)
}
SingleKnowledgeGraphResponse::SingleKnowledgeGraphResponse(const SingleKnowledgeGraphResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_knowledge_graph()) {
    knowledge_graph_ = new ::clarifai::api::KnowledgeGraph(*from.knowledge_graph_);
  } else {
    knowledge_graph_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleKnowledgeGraphResponse)
}

void SingleKnowledgeGraphResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SingleKnowledgeGraphResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&knowledge_graph_) -
      reinterpret_cast<char*>(&status_)) + sizeof(knowledge_graph_));
}

SingleKnowledgeGraphResponse::~SingleKnowledgeGraphResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleKnowledgeGraphResponse)
  SharedDtor();
}

void SingleKnowledgeGraphResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete knowledge_graph_;
}

void SingleKnowledgeGraphResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleKnowledgeGraphResponse& SingleKnowledgeGraphResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleKnowledgeGraphResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void SingleKnowledgeGraphResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleKnowledgeGraphResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && knowledge_graph_ != nullptr) {
    delete knowledge_graph_;
  }
  knowledge_graph_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SingleKnowledgeGraphResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.KnowledgeGraph knowledge_graph = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_knowledge_graph(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleKnowledgeGraphResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleKnowledgeGraphResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.KnowledgeGraph knowledge_graph = 2;
  if (this->has_knowledge_graph()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::knowledge_graph(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleKnowledgeGraphResponse)
  return target;
}

size_t SingleKnowledgeGraphResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleKnowledgeGraphResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.KnowledgeGraph knowledge_graph = 2;
  if (this->has_knowledge_graph()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *knowledge_graph_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleKnowledgeGraphResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.SingleKnowledgeGraphResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleKnowledgeGraphResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleKnowledgeGraphResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.SingleKnowledgeGraphResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.SingleKnowledgeGraphResponse)
    MergeFrom(*source);
  }
}

void SingleKnowledgeGraphResponse::MergeFrom(const SingleKnowledgeGraphResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleKnowledgeGraphResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.has_knowledge_graph()) {
    _internal_mutable_knowledge_graph()->::clarifai::api::KnowledgeGraph::MergeFrom(from._internal_knowledge_graph());
  }
}

void SingleKnowledgeGraphResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.SingleKnowledgeGraphResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleKnowledgeGraphResponse::CopyFrom(const SingleKnowledgeGraphResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleKnowledgeGraphResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleKnowledgeGraphResponse::IsInitialized() const {
  return true;
}

void SingleKnowledgeGraphResponse::InternalSwap(SingleKnowledgeGraphResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(knowledge_graph_, other->knowledge_graph_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleKnowledgeGraphResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiKnowledgeGraphResponse::InitAsDefaultInstance() {
  ::clarifai::api::_MultiKnowledgeGraphResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class MultiKnowledgeGraphResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiKnowledgeGraphResponse* msg);
};

const ::clarifai::api::status::Status&
MultiKnowledgeGraphResponse::_Internal::status(const MultiKnowledgeGraphResponse* msg) {
  return *msg->status_;
}
void MultiKnowledgeGraphResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiKnowledgeGraphResponse::clear_knowledge_graphs() {
  knowledge_graphs_.Clear();
}
MultiKnowledgeGraphResponse::MultiKnowledgeGraphResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MultiKnowledgeGraphResponse)
}
MultiKnowledgeGraphResponse::MultiKnowledgeGraphResponse(const MultiKnowledgeGraphResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      knowledge_graphs_(from.knowledge_graphs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiKnowledgeGraphResponse)
}

void MultiKnowledgeGraphResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiKnowledgeGraphResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

MultiKnowledgeGraphResponse::~MultiKnowledgeGraphResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiKnowledgeGraphResponse)
  SharedDtor();
}

void MultiKnowledgeGraphResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void MultiKnowledgeGraphResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiKnowledgeGraphResponse& MultiKnowledgeGraphResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiKnowledgeGraphResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiKnowledgeGraphResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiKnowledgeGraphResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  knowledge_graphs_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultiKnowledgeGraphResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.KnowledgeGraph knowledge_graphs = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_knowledge_graphs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiKnowledgeGraphResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiKnowledgeGraphResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.KnowledgeGraph knowledge_graphs = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_knowledge_graphs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_knowledge_graphs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiKnowledgeGraphResponse)
  return target;
}

size_t MultiKnowledgeGraphResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiKnowledgeGraphResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.KnowledgeGraph knowledge_graphs = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_knowledge_graphs_size();
  for (const auto& msg : this->knowledge_graphs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiKnowledgeGraphResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MultiKnowledgeGraphResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiKnowledgeGraphResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiKnowledgeGraphResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MultiKnowledgeGraphResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MultiKnowledgeGraphResponse)
    MergeFrom(*source);
  }
}

void MultiKnowledgeGraphResponse::MergeFrom(const MultiKnowledgeGraphResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiKnowledgeGraphResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  knowledge_graphs_.MergeFrom(from.knowledge_graphs_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void MultiKnowledgeGraphResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MultiKnowledgeGraphResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiKnowledgeGraphResponse::CopyFrom(const MultiKnowledgeGraphResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiKnowledgeGraphResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiKnowledgeGraphResponse::IsInitialized() const {
  return true;
}

void MultiKnowledgeGraphResponse::InternalSwap(MultiKnowledgeGraphResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  knowledge_graphs_.InternalSwap(&other->knowledge_graphs_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiKnowledgeGraphResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SingleConceptMappingResponse::InitAsDefaultInstance() {
  ::clarifai::api::_SingleConceptMappingResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
  ::clarifai::api::_SingleConceptMappingResponse_default_instance_._instance.get_mutable()->concept_mapping_ = const_cast< ::clarifai::api::ConceptMapping*>(
      ::clarifai::api::ConceptMapping::internal_default_instance());
}
class SingleConceptMappingResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleConceptMappingResponse* msg);
  static const ::clarifai::api::ConceptMapping& concept_mapping(const SingleConceptMappingResponse* msg);
};

const ::clarifai::api::status::Status&
SingleConceptMappingResponse::_Internal::status(const SingleConceptMappingResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::ConceptMapping&
SingleConceptMappingResponse::_Internal::concept_mapping(const SingleConceptMappingResponse* msg) {
  return *msg->concept_mapping_;
}
void SingleConceptMappingResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleConceptMappingResponse::clear_concept_mapping() {
  if (GetArenaNoVirtual() == nullptr && concept_mapping_ != nullptr) {
    delete concept_mapping_;
  }
  concept_mapping_ = nullptr;
}
SingleConceptMappingResponse::SingleConceptMappingResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.SingleConceptMappingResponse)
}
SingleConceptMappingResponse::SingleConceptMappingResponse(const SingleConceptMappingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_concept_mapping()) {
    concept_mapping_ = new ::clarifai::api::ConceptMapping(*from.concept_mapping_);
  } else {
    concept_mapping_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleConceptMappingResponse)
}

void SingleConceptMappingResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SingleConceptMappingResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&concept_mapping_) -
      reinterpret_cast<char*>(&status_)) + sizeof(concept_mapping_));
}

SingleConceptMappingResponse::~SingleConceptMappingResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleConceptMappingResponse)
  SharedDtor();
}

void SingleConceptMappingResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete concept_mapping_;
}

void SingleConceptMappingResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleConceptMappingResponse& SingleConceptMappingResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleConceptMappingResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void SingleConceptMappingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleConceptMappingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && concept_mapping_ != nullptr) {
    delete concept_mapping_;
  }
  concept_mapping_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SingleConceptMappingResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.ConceptMapping concept_mapping = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_concept_mapping(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleConceptMappingResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleConceptMappingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.ConceptMapping concept_mapping = 2;
  if (this->has_concept_mapping()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::concept_mapping(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleConceptMappingResponse)
  return target;
}

size_t SingleConceptMappingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleConceptMappingResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.ConceptMapping concept_mapping = 2;
  if (this->has_concept_mapping()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *concept_mapping_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleConceptMappingResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.SingleConceptMappingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleConceptMappingResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleConceptMappingResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.SingleConceptMappingResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.SingleConceptMappingResponse)
    MergeFrom(*source);
  }
}

void SingleConceptMappingResponse::MergeFrom(const SingleConceptMappingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleConceptMappingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.has_concept_mapping()) {
    _internal_mutable_concept_mapping()->::clarifai::api::ConceptMapping::MergeFrom(from._internal_concept_mapping());
  }
}

void SingleConceptMappingResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.SingleConceptMappingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleConceptMappingResponse::CopyFrom(const SingleConceptMappingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleConceptMappingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleConceptMappingResponse::IsInitialized() const {
  return true;
}

void SingleConceptMappingResponse::InternalSwap(SingleConceptMappingResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(concept_mapping_, other->concept_mapping_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleConceptMappingResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiConceptMappingResponse::InitAsDefaultInstance() {
  ::clarifai::api::_MultiConceptMappingResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class MultiConceptMappingResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiConceptMappingResponse* msg);
};

const ::clarifai::api::status::Status&
MultiConceptMappingResponse::_Internal::status(const MultiConceptMappingResponse* msg) {
  return *msg->status_;
}
void MultiConceptMappingResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiConceptMappingResponse::clear_concept_mappings() {
  concept_mappings_.Clear();
}
MultiConceptMappingResponse::MultiConceptMappingResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MultiConceptMappingResponse)
}
MultiConceptMappingResponse::MultiConceptMappingResponse(const MultiConceptMappingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      concept_mappings_(from.concept_mappings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiConceptMappingResponse)
}

void MultiConceptMappingResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiConceptMappingResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

MultiConceptMappingResponse::~MultiConceptMappingResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiConceptMappingResponse)
  SharedDtor();
}

void MultiConceptMappingResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void MultiConceptMappingResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiConceptMappingResponse& MultiConceptMappingResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiConceptMappingResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiConceptMappingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiConceptMappingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concept_mappings_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultiConceptMappingResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.ConceptMapping concept_mappings = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_concept_mappings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiConceptMappingResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiConceptMappingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.ConceptMapping concept_mappings = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_concept_mappings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_concept_mappings(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiConceptMappingResponse)
  return target;
}

size_t MultiConceptMappingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiConceptMappingResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ConceptMapping concept_mappings = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_concept_mappings_size();
  for (const auto& msg : this->concept_mappings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiConceptMappingResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MultiConceptMappingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiConceptMappingResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiConceptMappingResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MultiConceptMappingResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MultiConceptMappingResponse)
    MergeFrom(*source);
  }
}

void MultiConceptMappingResponse::MergeFrom(const MultiConceptMappingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiConceptMappingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  concept_mappings_.MergeFrom(from.concept_mappings_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void MultiConceptMappingResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MultiConceptMappingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiConceptMappingResponse::CopyFrom(const MultiConceptMappingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiConceptMappingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiConceptMappingResponse::IsInitialized() const {
  return true;
}

void MultiConceptMappingResponse::InternalSwap(MultiConceptMappingResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  concept_mappings_.InternalSwap(&other->concept_mappings_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiConceptMappingResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SingleConceptMappingJobResponse::InitAsDefaultInstance() {
  ::clarifai::api::_SingleConceptMappingJobResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class SingleConceptMappingJobResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleConceptMappingJobResponse* msg);
};

const ::clarifai::api::status::Status&
SingleConceptMappingJobResponse::_Internal::status(const SingleConceptMappingJobResponse* msg) {
  return *msg->status_;
}
void SingleConceptMappingJobResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
SingleConceptMappingJobResponse::SingleConceptMappingJobResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.SingleConceptMappingJobResponse)
}
SingleConceptMappingJobResponse::SingleConceptMappingJobResponse(const SingleConceptMappingJobResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleConceptMappingJobResponse)
}

void SingleConceptMappingJobResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SingleConceptMappingJobResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = nullptr;
}

SingleConceptMappingJobResponse::~SingleConceptMappingJobResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleConceptMappingJobResponse)
  SharedDtor();
}

void SingleConceptMappingJobResponse::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void SingleConceptMappingJobResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleConceptMappingJobResponse& SingleConceptMappingJobResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleConceptMappingJobResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void SingleConceptMappingJobResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleConceptMappingJobResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SingleConceptMappingJobResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.SingleConceptMappingJobResponse.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleConceptMappingJobResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleConceptMappingJobResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.SingleConceptMappingJobResponse.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleConceptMappingJobResponse)
  return target;
}

size_t SingleConceptMappingJobResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleConceptMappingJobResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleConceptMappingJobResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.SingleConceptMappingJobResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleConceptMappingJobResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleConceptMappingJobResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.SingleConceptMappingJobResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.SingleConceptMappingJobResponse)
    MergeFrom(*source);
  }
}

void SingleConceptMappingJobResponse::MergeFrom(const SingleConceptMappingJobResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleConceptMappingJobResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void SingleConceptMappingJobResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.SingleConceptMappingJobResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleConceptMappingJobResponse::CopyFrom(const SingleConceptMappingJobResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleConceptMappingJobResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleConceptMappingJobResponse::IsInitialized() const {
  return true;
}

void SingleConceptMappingJobResponse::InternalSwap(SingleConceptMappingJobResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleConceptMappingJobResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiConceptMappingJobResponse::InitAsDefaultInstance() {
  ::clarifai::api::_MultiConceptMappingJobResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class MultiConceptMappingJobResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiConceptMappingJobResponse* msg);
};

const ::clarifai::api::status::Status&
MultiConceptMappingJobResponse::_Internal::status(const MultiConceptMappingJobResponse* msg) {
  return *msg->status_;
}
void MultiConceptMappingJobResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
MultiConceptMappingJobResponse::MultiConceptMappingJobResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MultiConceptMappingJobResponse)
}
MultiConceptMappingJobResponse::MultiConceptMappingJobResponse(const MultiConceptMappingJobResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiConceptMappingJobResponse)
}

void MultiConceptMappingJobResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiConceptMappingJobResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

MultiConceptMappingJobResponse::~MultiConceptMappingJobResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiConceptMappingJobResponse)
  SharedDtor();
}

void MultiConceptMappingJobResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void MultiConceptMappingJobResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiConceptMappingJobResponse& MultiConceptMappingJobResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiConceptMappingJobResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiConceptMappingJobResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiConceptMappingJobResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultiConceptMappingJobResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.MultiConceptMappingJobResponse.ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiConceptMappingJobResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiConceptMappingJobResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated string ids = 2;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.MultiConceptMappingJobResponse.ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiConceptMappingJobResponse)
  return target;
}

size_t MultiConceptMappingJobResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiConceptMappingJobResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ids_.size());
  for (int i = 0, n = ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ids_.Get(i));
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiConceptMappingJobResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MultiConceptMappingJobResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiConceptMappingJobResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiConceptMappingJobResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MultiConceptMappingJobResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MultiConceptMappingJobResponse)
    MergeFrom(*source);
  }
}

void MultiConceptMappingJobResponse::MergeFrom(const MultiConceptMappingJobResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiConceptMappingJobResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void MultiConceptMappingJobResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MultiConceptMappingJobResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiConceptMappingJobResponse::CopyFrom(const MultiConceptMappingJobResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiConceptMappingJobResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiConceptMappingJobResponse::IsInitialized() const {
  return true;
}

void MultiConceptMappingJobResponse::InternalSwap(MultiConceptMappingJobResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiConceptMappingJobResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetConceptLanguageRequest::InitAsDefaultInstance() {
  ::clarifai::api::_GetConceptLanguageRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class GetConceptLanguageRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetConceptLanguageRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetConceptLanguageRequest::_Internal::user_app_id(const GetConceptLanguageRequest* msg) {
  return *msg->user_app_id_;
}
void GetConceptLanguageRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetConceptLanguageRequest::GetConceptLanguageRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.GetConceptLanguageRequest)
}
GetConceptLanguageRequest::GetConceptLanguageRequest(const GetConceptLanguageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  concept_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_concept_id().empty()) {
    concept_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.concept_id_);
  }
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_language().empty()) {
    language_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetConceptLanguageRequest)
}

void GetConceptLanguageRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetConceptLanguageRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  concept_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

GetConceptLanguageRequest::~GetConceptLanguageRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetConceptLanguageRequest)
  SharedDtor();
}

void GetConceptLanguageRequest::SharedDtor() {
  concept_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetConceptLanguageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetConceptLanguageRequest& GetConceptLanguageRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetConceptLanguageRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void GetConceptLanguageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetConceptLanguageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concept_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetConceptLanguageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string concept_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_concept_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetConceptLanguageRequest.concept_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string language = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetConceptLanguageRequest.language"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetConceptLanguageRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetConceptLanguageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string concept_id = 2;
  if (this->concept_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_concept_id().data(), static_cast<int>(this->_internal_concept_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetConceptLanguageRequest.concept_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_concept_id(), target);
  }

  // string language = 3;
  if (this->language().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetConceptLanguageRequest.language");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_language(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetConceptLanguageRequest)
  return target;
}

size_t GetConceptLanguageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetConceptLanguageRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string concept_id = 2;
  if (this->concept_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_concept_id());
  }

  // string language = 3;
  if (this->language().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetConceptLanguageRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.GetConceptLanguageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetConceptLanguageRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetConceptLanguageRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.GetConceptLanguageRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.GetConceptLanguageRequest)
    MergeFrom(*source);
  }
}

void GetConceptLanguageRequest::MergeFrom(const GetConceptLanguageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetConceptLanguageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.concept_id().size() > 0) {

    concept_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.concept_id_);
  }
  if (from.language().size() > 0) {

    language_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void GetConceptLanguageRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.GetConceptLanguageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetConceptLanguageRequest::CopyFrom(const GetConceptLanguageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetConceptLanguageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConceptLanguageRequest::IsInitialized() const {
  return true;
}

void GetConceptLanguageRequest::InternalSwap(GetConceptLanguageRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  concept_id_.Swap(&other->concept_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  language_.Swap(&other->language_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetConceptLanguageRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListConceptLanguagesRequest::InitAsDefaultInstance() {
  ::clarifai::api::_ListConceptLanguagesRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class ListConceptLanguagesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListConceptLanguagesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListConceptLanguagesRequest::_Internal::user_app_id(const ListConceptLanguagesRequest* msg) {
  return *msg->user_app_id_;
}
void ListConceptLanguagesRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListConceptLanguagesRequest::ListConceptLanguagesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ListConceptLanguagesRequest)
}
ListConceptLanguagesRequest::ListConceptLanguagesRequest(const ListConceptLanguagesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  concept_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_concept_id().empty()) {
    concept_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.concept_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListConceptLanguagesRequest)
}

void ListConceptLanguagesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListConceptLanguagesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  concept_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

ListConceptLanguagesRequest::~ListConceptLanguagesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListConceptLanguagesRequest)
  SharedDtor();
}

void ListConceptLanguagesRequest::SharedDtor() {
  concept_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListConceptLanguagesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListConceptLanguagesRequest& ListConceptLanguagesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListConceptLanguagesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ListConceptLanguagesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListConceptLanguagesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concept_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear();
}

const char* ListConceptLanguagesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string concept_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_concept_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListConceptLanguagesRequest.concept_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 per_page = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListConceptLanguagesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListConceptLanguagesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string concept_id = 2;
  if (this->concept_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_concept_id().data(), static_cast<int>(this->_internal_concept_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListConceptLanguagesRequest.concept_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_concept_id(), target);
  }

  // uint32 page = 3;
  if (this->page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_page(), target);
  }

  // uint32 per_page = 4;
  if (this->per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListConceptLanguagesRequest)
  return target;
}

size_t ListConceptLanguagesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListConceptLanguagesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string concept_id = 2;
  if (this->concept_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_concept_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 3;
  if (this->page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page());
  }

  // uint32 per_page = 4;
  if (this->per_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_per_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListConceptLanguagesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ListConceptLanguagesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListConceptLanguagesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListConceptLanguagesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ListConceptLanguagesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ListConceptLanguagesRequest)
    MergeFrom(*source);
  }
}

void ListConceptLanguagesRequest::MergeFrom(const ListConceptLanguagesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListConceptLanguagesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.concept_id().size() > 0) {

    concept_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.concept_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from.per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
}

void ListConceptLanguagesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ListConceptLanguagesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListConceptLanguagesRequest::CopyFrom(const ListConceptLanguagesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListConceptLanguagesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListConceptLanguagesRequest::IsInitialized() const {
  return true;
}

void ListConceptLanguagesRequest::InternalSwap(ListConceptLanguagesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  concept_id_.Swap(&other->concept_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
  swap(page_, other->page_);
  swap(per_page_, other->per_page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListConceptLanguagesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PatchConceptLanguagesRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PatchConceptLanguagesRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PatchConceptLanguagesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchConceptLanguagesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchConceptLanguagesRequest::_Internal::user_app_id(const PatchConceptLanguagesRequest* msg) {
  return *msg->user_app_id_;
}
void PatchConceptLanguagesRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PatchConceptLanguagesRequest::clear_concept_languages() {
  concept_languages_.Clear();
}
PatchConceptLanguagesRequest::PatchConceptLanguagesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PatchConceptLanguagesRequest)
}
PatchConceptLanguagesRequest::PatchConceptLanguagesRequest(const PatchConceptLanguagesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      concept_languages_(from.concept_languages_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  concept_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_concept_id().empty()) {
    concept_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.concept_id_);
  }
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action().empty()) {
    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchConceptLanguagesRequest)
}

void PatchConceptLanguagesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PatchConceptLanguagesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  concept_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

PatchConceptLanguagesRequest::~PatchConceptLanguagesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchConceptLanguagesRequest)
  SharedDtor();
}

void PatchConceptLanguagesRequest::SharedDtor() {
  concept_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PatchConceptLanguagesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PatchConceptLanguagesRequest& PatchConceptLanguagesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PatchConceptLanguagesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PatchConceptLanguagesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchConceptLanguagesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concept_languages_.Clear();
  concept_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PatchConceptLanguagesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string concept_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_concept_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchConceptLanguagesRequest.concept_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.ConceptLanguage concept_languages = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_concept_languages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // string action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchConceptLanguagesRequest.action"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PatchConceptLanguagesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchConceptLanguagesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string concept_id = 2;
  if (this->concept_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_concept_id().data(), static_cast<int>(this->_internal_concept_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchConceptLanguagesRequest.concept_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_concept_id(), target);
  }

  // repeated .clarifai.api.ConceptLanguage concept_languages = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_concept_languages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_concept_languages(i), target, stream);
  }

  // string action = 4;
  if (this->action().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchConceptLanguagesRequest.action");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchConceptLanguagesRequest)
  return target;
}

size_t PatchConceptLanguagesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchConceptLanguagesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ConceptLanguage concept_languages = 3;
  total_size += 1UL * this->_internal_concept_languages_size();
  for (const auto& msg : this->concept_languages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string concept_id = 2;
  if (this->concept_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_concept_id());
  }

  // string action = 4;
  if (this->action().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PatchConceptLanguagesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PatchConceptLanguagesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PatchConceptLanguagesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PatchConceptLanguagesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PatchConceptLanguagesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PatchConceptLanguagesRequest)
    MergeFrom(*source);
  }
}

void PatchConceptLanguagesRequest::MergeFrom(const PatchConceptLanguagesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchConceptLanguagesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  concept_languages_.MergeFrom(from.concept_languages_);
  if (from.concept_id().size() > 0) {

    concept_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.concept_id_);
  }
  if (from.action().size() > 0) {

    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void PatchConceptLanguagesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PatchConceptLanguagesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatchConceptLanguagesRequest::CopyFrom(const PatchConceptLanguagesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchConceptLanguagesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchConceptLanguagesRequest::IsInitialized() const {
  return true;
}

void PatchConceptLanguagesRequest::InternalSwap(PatchConceptLanguagesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  concept_languages_.InternalSwap(&other->concept_languages_);
  concept_id_.Swap(&other->concept_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  action_.Swap(&other->action_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchConceptLanguagesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostConceptLanguagesRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostConceptLanguagesRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PostConceptLanguagesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostConceptLanguagesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostConceptLanguagesRequest::_Internal::user_app_id(const PostConceptLanguagesRequest* msg) {
  return *msg->user_app_id_;
}
void PostConceptLanguagesRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostConceptLanguagesRequest::clear_concept_languages() {
  concept_languages_.Clear();
}
PostConceptLanguagesRequest::PostConceptLanguagesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostConceptLanguagesRequest)
}
PostConceptLanguagesRequest::PostConceptLanguagesRequest(const PostConceptLanguagesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      concept_languages_(from.concept_languages_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  concept_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_concept_id().empty()) {
    concept_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.concept_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostConceptLanguagesRequest)
}

void PostConceptLanguagesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostConceptLanguagesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  concept_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

PostConceptLanguagesRequest::~PostConceptLanguagesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostConceptLanguagesRequest)
  SharedDtor();
}

void PostConceptLanguagesRequest::SharedDtor() {
  concept_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostConceptLanguagesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostConceptLanguagesRequest& PostConceptLanguagesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostConceptLanguagesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostConceptLanguagesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostConceptLanguagesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concept_languages_.Clear();
  concept_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostConceptLanguagesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string concept_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_concept_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostConceptLanguagesRequest.concept_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.ConceptLanguage concept_languages = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_concept_languages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostConceptLanguagesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostConceptLanguagesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string concept_id = 2;
  if (this->concept_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_concept_id().data(), static_cast<int>(this->_internal_concept_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostConceptLanguagesRequest.concept_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_concept_id(), target);
  }

  // repeated .clarifai.api.ConceptLanguage concept_languages = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_concept_languages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_concept_languages(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostConceptLanguagesRequest)
  return target;
}

size_t PostConceptLanguagesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostConceptLanguagesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ConceptLanguage concept_languages = 3;
  total_size += 1UL * this->_internal_concept_languages_size();
  for (const auto& msg : this->concept_languages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string concept_id = 2;
  if (this->concept_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_concept_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostConceptLanguagesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostConceptLanguagesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostConceptLanguagesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostConceptLanguagesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostConceptLanguagesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostConceptLanguagesRequest)
    MergeFrom(*source);
  }
}

void PostConceptLanguagesRequest::MergeFrom(const PostConceptLanguagesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostConceptLanguagesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  concept_languages_.MergeFrom(from.concept_languages_);
  if (from.concept_id().size() > 0) {

    concept_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.concept_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void PostConceptLanguagesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostConceptLanguagesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostConceptLanguagesRequest::CopyFrom(const PostConceptLanguagesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostConceptLanguagesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostConceptLanguagesRequest::IsInitialized() const {
  return true;
}

void PostConceptLanguagesRequest::InternalSwap(PostConceptLanguagesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  concept_languages_.InternalSwap(&other->concept_languages_);
  concept_id_.Swap(&other->concept_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostConceptLanguagesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SingleConceptLanguageResponse::InitAsDefaultInstance() {
  ::clarifai::api::_SingleConceptLanguageResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
  ::clarifai::api::_SingleConceptLanguageResponse_default_instance_._instance.get_mutable()->concept_language_ = const_cast< ::clarifai::api::ConceptLanguage*>(
      ::clarifai::api::ConceptLanguage::internal_default_instance());
}
class SingleConceptLanguageResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleConceptLanguageResponse* msg);
  static const ::clarifai::api::ConceptLanguage& concept_language(const SingleConceptLanguageResponse* msg);
};

const ::clarifai::api::status::Status&
SingleConceptLanguageResponse::_Internal::status(const SingleConceptLanguageResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::ConceptLanguage&
SingleConceptLanguageResponse::_Internal::concept_language(const SingleConceptLanguageResponse* msg) {
  return *msg->concept_language_;
}
void SingleConceptLanguageResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleConceptLanguageResponse::clear_concept_language() {
  if (GetArenaNoVirtual() == nullptr && concept_language_ != nullptr) {
    delete concept_language_;
  }
  concept_language_ = nullptr;
}
SingleConceptLanguageResponse::SingleConceptLanguageResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.SingleConceptLanguageResponse)
}
SingleConceptLanguageResponse::SingleConceptLanguageResponse(const SingleConceptLanguageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_concept_language()) {
    concept_language_ = new ::clarifai::api::ConceptLanguage(*from.concept_language_);
  } else {
    concept_language_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleConceptLanguageResponse)
}

void SingleConceptLanguageResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SingleConceptLanguageResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&concept_language_) -
      reinterpret_cast<char*>(&status_)) + sizeof(concept_language_));
}

SingleConceptLanguageResponse::~SingleConceptLanguageResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleConceptLanguageResponse)
  SharedDtor();
}

void SingleConceptLanguageResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete concept_language_;
}

void SingleConceptLanguageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleConceptLanguageResponse& SingleConceptLanguageResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleConceptLanguageResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void SingleConceptLanguageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleConceptLanguageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && concept_language_ != nullptr) {
    delete concept_language_;
  }
  concept_language_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SingleConceptLanguageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.ConceptLanguage concept_language = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_concept_language(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleConceptLanguageResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleConceptLanguageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.ConceptLanguage concept_language = 2;
  if (this->has_concept_language()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::concept_language(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleConceptLanguageResponse)
  return target;
}

size_t SingleConceptLanguageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleConceptLanguageResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.ConceptLanguage concept_language = 2;
  if (this->has_concept_language()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *concept_language_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleConceptLanguageResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.SingleConceptLanguageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleConceptLanguageResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleConceptLanguageResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.SingleConceptLanguageResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.SingleConceptLanguageResponse)
    MergeFrom(*source);
  }
}

void SingleConceptLanguageResponse::MergeFrom(const SingleConceptLanguageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleConceptLanguageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.has_concept_language()) {
    _internal_mutable_concept_language()->::clarifai::api::ConceptLanguage::MergeFrom(from._internal_concept_language());
  }
}

void SingleConceptLanguageResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.SingleConceptLanguageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleConceptLanguageResponse::CopyFrom(const SingleConceptLanguageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleConceptLanguageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleConceptLanguageResponse::IsInitialized() const {
  return true;
}

void SingleConceptLanguageResponse::InternalSwap(SingleConceptLanguageResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(concept_language_, other->concept_language_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleConceptLanguageResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiConceptLanguageResponse::InitAsDefaultInstance() {
  ::clarifai::api::_MultiConceptLanguageResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class MultiConceptLanguageResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiConceptLanguageResponse* msg);
};

const ::clarifai::api::status::Status&
MultiConceptLanguageResponse::_Internal::status(const MultiConceptLanguageResponse* msg) {
  return *msg->status_;
}
void MultiConceptLanguageResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiConceptLanguageResponse::clear_concept_languages() {
  concept_languages_.Clear();
}
MultiConceptLanguageResponse::MultiConceptLanguageResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MultiConceptLanguageResponse)
}
MultiConceptLanguageResponse::MultiConceptLanguageResponse(const MultiConceptLanguageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      concept_languages_(from.concept_languages_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiConceptLanguageResponse)
}

void MultiConceptLanguageResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiConceptLanguageResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

MultiConceptLanguageResponse::~MultiConceptLanguageResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiConceptLanguageResponse)
  SharedDtor();
}

void MultiConceptLanguageResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void MultiConceptLanguageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiConceptLanguageResponse& MultiConceptLanguageResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiConceptLanguageResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiConceptLanguageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiConceptLanguageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concept_languages_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultiConceptLanguageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.ConceptLanguage concept_languages = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_concept_languages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiConceptLanguageResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiConceptLanguageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.ConceptLanguage concept_languages = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_concept_languages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_concept_languages(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiConceptLanguageResponse)
  return target;
}

size_t MultiConceptLanguageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiConceptLanguageResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ConceptLanguage concept_languages = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_concept_languages_size();
  for (const auto& msg : this->concept_languages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiConceptLanguageResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MultiConceptLanguageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiConceptLanguageResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiConceptLanguageResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MultiConceptLanguageResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MultiConceptLanguageResponse)
    MergeFrom(*source);
  }
}

void MultiConceptLanguageResponse::MergeFrom(const MultiConceptLanguageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiConceptLanguageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  concept_languages_.MergeFrom(from.concept_languages_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void MultiConceptLanguageResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MultiConceptLanguageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiConceptLanguageResponse::CopyFrom(const MultiConceptLanguageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiConceptLanguageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiConceptLanguageResponse::IsInitialized() const {
  return true;
}

void MultiConceptLanguageResponse::InternalSwap(MultiConceptLanguageResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  concept_languages_.InternalSwap(&other->concept_languages_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiConceptLanguageResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListConceptReferencesRequest::InitAsDefaultInstance() {
  ::clarifai::api::_ListConceptReferencesRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class ListConceptReferencesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListConceptReferencesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListConceptReferencesRequest::_Internal::user_app_id(const ListConceptReferencesRequest* msg) {
  return *msg->user_app_id_;
}
void ListConceptReferencesRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListConceptReferencesRequest::ListConceptReferencesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ListConceptReferencesRequest)
}
ListConceptReferencesRequest::ListConceptReferencesRequest(const ListConceptReferencesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  concept_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_concept_id().empty()) {
    concept_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.concept_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListConceptReferencesRequest)
}

void ListConceptReferencesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListConceptReferencesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  concept_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

ListConceptReferencesRequest::~ListConceptReferencesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListConceptReferencesRequest)
  SharedDtor();
}

void ListConceptReferencesRequest::SharedDtor() {
  concept_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListConceptReferencesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListConceptReferencesRequest& ListConceptReferencesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListConceptReferencesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ListConceptReferencesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListConceptReferencesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concept_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear();
}

const char* ListConceptReferencesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string concept_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_concept_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListConceptReferencesRequest.concept_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 per_page = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListConceptReferencesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListConceptReferencesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string concept_id = 2;
  if (this->concept_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_concept_id().data(), static_cast<int>(this->_internal_concept_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListConceptReferencesRequest.concept_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_concept_id(), target);
  }

  // uint32 page = 3;
  if (this->page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_page(), target);
  }

  // uint32 per_page = 4;
  if (this->per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListConceptReferencesRequest)
  return target;
}

size_t ListConceptReferencesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListConceptReferencesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string concept_id = 2;
  if (this->concept_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_concept_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 3;
  if (this->page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page());
  }

  // uint32 per_page = 4;
  if (this->per_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_per_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListConceptReferencesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ListConceptReferencesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListConceptReferencesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListConceptReferencesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ListConceptReferencesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ListConceptReferencesRequest)
    MergeFrom(*source);
  }
}

void ListConceptReferencesRequest::MergeFrom(const ListConceptReferencesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListConceptReferencesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.concept_id().size() > 0) {

    concept_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.concept_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from.per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
}

void ListConceptReferencesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ListConceptReferencesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListConceptReferencesRequest::CopyFrom(const ListConceptReferencesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListConceptReferencesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListConceptReferencesRequest::IsInitialized() const {
  return true;
}

void ListConceptReferencesRequest::InternalSwap(ListConceptReferencesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  concept_id_.Swap(&other->concept_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
  swap(page_, other->page_);
  swap(per_page_, other->per_page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListConceptReferencesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SingleConceptReferenceResponse::InitAsDefaultInstance() {
  ::clarifai::api::_SingleConceptReferenceResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
  ::clarifai::api::_SingleConceptReferenceResponse_default_instance_._instance.get_mutable()->concept_reference_ = const_cast< ::clarifai::api::ConceptReference*>(
      ::clarifai::api::ConceptReference::internal_default_instance());
}
class SingleConceptReferenceResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleConceptReferenceResponse* msg);
  static const ::clarifai::api::ConceptReference& concept_reference(const SingleConceptReferenceResponse* msg);
};

const ::clarifai::api::status::Status&
SingleConceptReferenceResponse::_Internal::status(const SingleConceptReferenceResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::ConceptReference&
SingleConceptReferenceResponse::_Internal::concept_reference(const SingleConceptReferenceResponse* msg) {
  return *msg->concept_reference_;
}
void SingleConceptReferenceResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleConceptReferenceResponse::clear_concept_reference() {
  if (GetArenaNoVirtual() == nullptr && concept_reference_ != nullptr) {
    delete concept_reference_;
  }
  concept_reference_ = nullptr;
}
SingleConceptReferenceResponse::SingleConceptReferenceResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.SingleConceptReferenceResponse)
}
SingleConceptReferenceResponse::SingleConceptReferenceResponse(const SingleConceptReferenceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_concept_reference()) {
    concept_reference_ = new ::clarifai::api::ConceptReference(*from.concept_reference_);
  } else {
    concept_reference_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleConceptReferenceResponse)
}

void SingleConceptReferenceResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SingleConceptReferenceResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&concept_reference_) -
      reinterpret_cast<char*>(&status_)) + sizeof(concept_reference_));
}

SingleConceptReferenceResponse::~SingleConceptReferenceResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleConceptReferenceResponse)
  SharedDtor();
}

void SingleConceptReferenceResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete concept_reference_;
}

void SingleConceptReferenceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleConceptReferenceResponse& SingleConceptReferenceResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleConceptReferenceResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void SingleConceptReferenceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleConceptReferenceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && concept_reference_ != nullptr) {
    delete concept_reference_;
  }
  concept_reference_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SingleConceptReferenceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.ConceptReference concept_reference = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_concept_reference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleConceptReferenceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleConceptReferenceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.ConceptReference concept_reference = 2;
  if (this->has_concept_reference()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::concept_reference(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleConceptReferenceResponse)
  return target;
}

size_t SingleConceptReferenceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleConceptReferenceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.ConceptReference concept_reference = 2;
  if (this->has_concept_reference()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *concept_reference_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleConceptReferenceResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.SingleConceptReferenceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleConceptReferenceResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleConceptReferenceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.SingleConceptReferenceResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.SingleConceptReferenceResponse)
    MergeFrom(*source);
  }
}

void SingleConceptReferenceResponse::MergeFrom(const SingleConceptReferenceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleConceptReferenceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.has_concept_reference()) {
    _internal_mutable_concept_reference()->::clarifai::api::ConceptReference::MergeFrom(from._internal_concept_reference());
  }
}

void SingleConceptReferenceResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.SingleConceptReferenceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleConceptReferenceResponse::CopyFrom(const SingleConceptReferenceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleConceptReferenceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleConceptReferenceResponse::IsInitialized() const {
  return true;
}

void SingleConceptReferenceResponse::InternalSwap(SingleConceptReferenceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(concept_reference_, other->concept_reference_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleConceptReferenceResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiConceptReferenceResponse::InitAsDefaultInstance() {
  ::clarifai::api::_MultiConceptReferenceResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class MultiConceptReferenceResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiConceptReferenceResponse* msg);
};

const ::clarifai::api::status::Status&
MultiConceptReferenceResponse::_Internal::status(const MultiConceptReferenceResponse* msg) {
  return *msg->status_;
}
void MultiConceptReferenceResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiConceptReferenceResponse::clear_concept_references() {
  concept_references_.Clear();
}
MultiConceptReferenceResponse::MultiConceptReferenceResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MultiConceptReferenceResponse)
}
MultiConceptReferenceResponse::MultiConceptReferenceResponse(const MultiConceptReferenceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      concept_references_(from.concept_references_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiConceptReferenceResponse)
}

void MultiConceptReferenceResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiConceptReferenceResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

MultiConceptReferenceResponse::~MultiConceptReferenceResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiConceptReferenceResponse)
  SharedDtor();
}

void MultiConceptReferenceResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void MultiConceptReferenceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiConceptReferenceResponse& MultiConceptReferenceResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiConceptReferenceResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiConceptReferenceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiConceptReferenceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concept_references_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultiConceptReferenceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.ConceptReference concept_references = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_concept_references(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiConceptReferenceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiConceptReferenceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.ConceptReference concept_references = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_concept_references_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_concept_references(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiConceptReferenceResponse)
  return target;
}

size_t MultiConceptReferenceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiConceptReferenceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ConceptReference concept_references = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_concept_references_size();
  for (const auto& msg : this->concept_references_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiConceptReferenceResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MultiConceptReferenceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiConceptReferenceResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiConceptReferenceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MultiConceptReferenceResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MultiConceptReferenceResponse)
    MergeFrom(*source);
  }
}

void MultiConceptReferenceResponse::MergeFrom(const MultiConceptReferenceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiConceptReferenceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  concept_references_.MergeFrom(from.concept_references_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void MultiConceptReferenceResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MultiConceptReferenceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiConceptReferenceResponse::CopyFrom(const MultiConceptReferenceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiConceptReferenceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiConceptReferenceResponse::IsInitialized() const {
  return true;
}

void MultiConceptReferenceResponse::InternalSwap(MultiConceptReferenceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  concept_references_.InternalSwap(&other->concept_references_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiConceptReferenceResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetHealthzRequest::InitAsDefaultInstance() {
}
class GetHealthzRequest::_Internal {
 public:
};

GetHealthzRequest::GetHealthzRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.GetHealthzRequest)
}
GetHealthzRequest::GetHealthzRequest(const GetHealthzRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetHealthzRequest)
}

void GetHealthzRequest::SharedCtor() {
}

GetHealthzRequest::~GetHealthzRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetHealthzRequest)
  SharedDtor();
}

void GetHealthzRequest::SharedDtor() {
}

void GetHealthzRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetHealthzRequest& GetHealthzRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetHealthzRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void GetHealthzRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetHealthzRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* GetHealthzRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetHealthzRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetHealthzRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetHealthzRequest)
  return target;
}

size_t GetHealthzRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetHealthzRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetHealthzRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.GetHealthzRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetHealthzRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetHealthzRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.GetHealthzRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.GetHealthzRequest)
    MergeFrom(*source);
  }
}

void GetHealthzRequest::MergeFrom(const GetHealthzRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetHealthzRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetHealthzRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.GetHealthzRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetHealthzRequest::CopyFrom(const GetHealthzRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetHealthzRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetHealthzRequest::IsInitialized() const {
  return true;
}

void GetHealthzRequest::InternalSwap(GetHealthzRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetHealthzRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetHealthzResponse::InitAsDefaultInstance() {
  ::clarifai::api::_GetHealthzResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class GetHealthzResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const GetHealthzResponse* msg);
};

const ::clarifai::api::status::Status&
GetHealthzResponse::_Internal::status(const GetHealthzResponse* msg) {
  return *msg->status_;
}
void GetHealthzResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
GetHealthzResponse::GetHealthzResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.GetHealthzResponse)
}
GetHealthzResponse::GetHealthzResponse(const GetHealthzResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_time().empty()) {
    time_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.time_);
  }
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetHealthzResponse)
}

void GetHealthzResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetHealthzResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = nullptr;
}

GetHealthzResponse::~GetHealthzResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetHealthzResponse)
  SharedDtor();
}

void GetHealthzResponse::SharedDtor() {
  time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void GetHealthzResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetHealthzResponse& GetHealthzResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetHealthzResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void GetHealthzResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetHealthzResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  time_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetHealthzResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetHealthzResponse.time"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetHealthzResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetHealthzResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // string time = 2;
  if (this->time().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_time().data(), static_cast<int>(this->_internal_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetHealthzResponse.time");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetHealthzResponse)
  return target;
}

size_t GetHealthzResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetHealthzResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string time = 2;
  if (this->time().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_time());
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetHealthzResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.GetHealthzResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetHealthzResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetHealthzResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.GetHealthzResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.GetHealthzResponse)
    MergeFrom(*source);
  }
}

void GetHealthzResponse::MergeFrom(const GetHealthzResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetHealthzResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time().size() > 0) {

    time_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.time_);
  }
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void GetHealthzResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.GetHealthzResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetHealthzResponse::CopyFrom(const GetHealthzResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetHealthzResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetHealthzResponse::IsInitialized() const {
  return true;
}

void GetHealthzResponse::InternalSwap(GetHealthzResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  time_.Swap(&other->time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetHealthzResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetInputRequest::InitAsDefaultInstance() {
  ::clarifai::api::_GetInputRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class GetInputRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetInputRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetInputRequest::_Internal::user_app_id(const GetInputRequest* msg) {
  return *msg->user_app_id_;
}
void GetInputRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetInputRequest::GetInputRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.GetInputRequest)
}
GetInputRequest::GetInputRequest(const GetInputRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  input_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_input_id().empty()) {
    input_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.input_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetInputRequest)
}

void GetInputRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetInputRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  input_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

GetInputRequest::~GetInputRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetInputRequest)
  SharedDtor();
}

void GetInputRequest::SharedDtor() {
  input_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetInputRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetInputRequest& GetInputRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetInputRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void GetInputRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetInputRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetInputRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string input_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_input_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetInputRequest.input_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetInputRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetInputRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string input_id = 2;
  if (this->input_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_input_id().data(), static_cast<int>(this->_internal_input_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetInputRequest.input_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_input_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetInputRequest)
  return target;
}

size_t GetInputRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetInputRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string input_id = 2;
  if (this->input_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_input_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetInputRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.GetInputRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetInputRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetInputRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.GetInputRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.GetInputRequest)
    MergeFrom(*source);
  }
}

void GetInputRequest::MergeFrom(const GetInputRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetInputRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.input_id().size() > 0) {

    input_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.input_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void GetInputRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.GetInputRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInputRequest::CopyFrom(const GetInputRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetInputRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInputRequest::IsInitialized() const {
  return true;
}

void GetInputRequest::InternalSwap(GetInputRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  input_id_.Swap(&other->input_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetInputRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListInputsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_ListInputsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
  ::clarifai::api::_ListInputsRequest_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class ListInputsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListInputsRequest* msg);
  static const ::clarifai::api::status::Status& status(const ListInputsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListInputsRequest::_Internal::user_app_id(const ListInputsRequest* msg) {
  return *msg->user_app_id_;
}
const ::clarifai::api::status::Status&
ListInputsRequest::_Internal::status(const ListInputsRequest* msg) {
  return *msg->status_;
}
void ListInputsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void ListInputsRequest::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
ListInputsRequest::ListInputsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ListInputsRequest)
}
ListInputsRequest::ListInputsRequest(const ListInputsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListInputsRequest)
}

void ListInputsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

ListInputsRequest::~ListInputsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListInputsRequest)
  SharedDtor();
}

void ListInputsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
  if (this != internal_default_instance()) delete status_;
}

void ListInputsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListInputsRequest& ListInputsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ListInputsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListInputsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear();
}

const char* ListInputsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string ids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListInputsRequest.ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .clarifai.api.status.Status status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListInputsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListInputsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // uint32 page = 2;
  if (this->page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  // repeated string ids = 4;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListInputsRequest.ids");
    target = stream->WriteString(4, s, target);
  }

  // .clarifai.api.status.Status status = 5;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListInputsRequest)
  return target;
}

size_t ListInputsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListInputsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ids_.size());
  for (int i = 0, n = ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ids_.Get(i));
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // .clarifai.api.status.Status status = 5;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // uint32 page = 2;
  if (this->page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->per_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_per_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListInputsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ListInputsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListInputsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListInputsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ListInputsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ListInputsRequest)
    MergeFrom(*source);
  }
}

void ListInputsRequest::MergeFrom(const ListInputsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListInputsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from.per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
}

void ListInputsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ListInputsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListInputsRequest::CopyFrom(const ListInputsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListInputsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListInputsRequest::IsInitialized() const {
  return true;
}

void ListInputsRequest::InternalSwap(ListInputsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
  swap(user_app_id_, other->user_app_id_);
  swap(status_, other->status_);
  swap(page_, other->page_);
  swap(per_page_, other->per_page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListInputsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StreamInputsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_StreamInputsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class StreamInputsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const StreamInputsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
StreamInputsRequest::_Internal::user_app_id(const StreamInputsRequest* msg) {
  return *msg->user_app_id_;
}
void StreamInputsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
StreamInputsRequest::StreamInputsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.StreamInputsRequest)
}
StreamInputsRequest::StreamInputsRequest(const StreamInputsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  last_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_id().empty()) {
    last_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&per_page_, &from.per_page_,
    static_cast<size_t>(reinterpret_cast<char*>(&descending_) -
    reinterpret_cast<char*>(&per_page_)) + sizeof(descending_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.StreamInputsRequest)
}

void StreamInputsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StreamInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  last_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&descending_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(descending_));
}

StreamInputsRequest::~StreamInputsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.StreamInputsRequest)
  SharedDtor();
}

void StreamInputsRequest::SharedDtor() {
  last_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void StreamInputsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamInputsRequest& StreamInputsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void StreamInputsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.StreamInputsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  last_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&per_page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&descending_) -
      reinterpret_cast<char*>(&per_page_)) + sizeof(descending_));
  _internal_metadata_.Clear();
}

const char* StreamInputsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 per_page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string last_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_last_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.StreamInputsRequest.last_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool descending = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          descending_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamInputsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.StreamInputsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // uint32 per_page = 2;
  if (this->per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_per_page(), target);
  }

  // string last_id = 3;
  if (this->last_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_id().data(), static_cast<int>(this->_internal_last_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.StreamInputsRequest.last_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_last_id(), target);
  }

  // bool descending = 4;
  if (this->descending() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_descending(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.StreamInputsRequest)
  return target;
}

size_t StreamInputsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.StreamInputsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string last_id = 3;
  if (this->last_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 per_page = 2;
  if (this->per_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_per_page());
  }

  // bool descending = 4;
  if (this->descending() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamInputsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.StreamInputsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamInputsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamInputsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.StreamInputsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.StreamInputsRequest)
    MergeFrom(*source);
  }
}

void StreamInputsRequest::MergeFrom(const StreamInputsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.StreamInputsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.last_id().size() > 0) {

    last_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
  if (from.descending() != 0) {
    _internal_set_descending(from._internal_descending());
  }
}

void StreamInputsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.StreamInputsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamInputsRequest::CopyFrom(const StreamInputsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.StreamInputsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamInputsRequest::IsInitialized() const {
  return true;
}

void StreamInputsRequest::InternalSwap(StreamInputsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  last_id_.Swap(&other->last_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
  swap(per_page_, other->per_page_);
  swap(descending_, other->descending_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamInputsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostInputsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostInputsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PostInputsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostInputsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostInputsRequest::_Internal::user_app_id(const PostInputsRequest* msg) {
  return *msg->user_app_id_;
}
void PostInputsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostInputsRequest::clear_inputs() {
  inputs_.Clear();
}
PostInputsRequest::PostInputsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostInputsRequest)
}
PostInputsRequest::PostInputsRequest(const PostInputsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      inputs_(from.inputs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostInputsRequest)
}

void PostInputsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  user_app_id_ = nullptr;
}

PostInputsRequest::~PostInputsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostInputsRequest)
  SharedDtor();
}

void PostInputsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostInputsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostInputsRequest& PostInputsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostInputsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostInputsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inputs_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostInputsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Input inputs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostInputsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostInputsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Input inputs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_inputs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostInputsRequest)
  return target;
}

size_t PostInputsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostInputsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Input inputs = 2;
  total_size += 1UL * this->_internal_inputs_size();
  for (const auto& msg : this->inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostInputsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostInputsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostInputsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostInputsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostInputsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostInputsRequest)
    MergeFrom(*source);
  }
}

void PostInputsRequest::MergeFrom(const PostInputsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostInputsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inputs_.MergeFrom(from.inputs_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void PostInputsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostInputsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostInputsRequest::CopyFrom(const PostInputsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostInputsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostInputsRequest::IsInitialized() const {
  return true;
}

void PostInputsRequest::InternalSwap(PostInputsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  inputs_.InternalSwap(&other->inputs_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostInputsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostInputsFileRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostInputsFileRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PostInputsFileRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostInputsFileRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostInputsFileRequest::_Internal::user_app_id(const PostInputsFileRequest* msg) {
  return *msg->user_app_id_;
}
void PostInputsFileRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
PostInputsFileRequest::PostInputsFileRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostInputsFileRequest)
}
PostInputsFileRequest::PostInputsFileRequest(const PostInputsFileRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_url().empty()) {
    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  filetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filetype().empty()) {
    filetype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filetype_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostInputsFileRequest)
}

void PostInputsFileRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostInputsFileRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

PostInputsFileRequest::~PostInputsFileRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostInputsFileRequest)
  SharedDtor();
}

void PostInputsFileRequest::SharedDtor() {
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filetype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostInputsFileRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostInputsFileRequest& PostInputsFileRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostInputsFileRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostInputsFileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostInputsFileRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filetype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostInputsFileRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostInputsFileRequest.url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string filetype = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_filetype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostInputsFileRequest.filetype"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostInputsFileRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostInputsFileRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string url = 2;
  if (this->url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostInputsFileRequest.url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  // string filetype = 3;
  if (this->filetype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filetype().data(), static_cast<int>(this->_internal_filetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostInputsFileRequest.filetype");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_filetype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostInputsFileRequest)
  return target;
}

size_t PostInputsFileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostInputsFileRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 2;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // string filetype = 3;
  if (this->filetype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filetype());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostInputsFileRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostInputsFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostInputsFileRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostInputsFileRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostInputsFileRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostInputsFileRequest)
    MergeFrom(*source);
  }
}

void PostInputsFileRequest::MergeFrom(const PostInputsFileRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostInputsFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.url().size() > 0) {

    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.filetype().size() > 0) {

    filetype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filetype_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void PostInputsFileRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostInputsFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostInputsFileRequest::CopyFrom(const PostInputsFileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostInputsFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostInputsFileRequest::IsInitialized() const {
  return true;
}

void PostInputsFileRequest::InternalSwap(PostInputsFileRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  filetype_.Swap(&other->filetype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostInputsFileRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostInputsNiFiRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostInputsNiFiRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
  ::clarifai::api::_PostInputsNiFiRequest_default_instance_._instance.get_mutable()->urls_ = const_cast< PROTOBUF_NAMESPACE_ID::ListValue*>(
      PROTOBUF_NAMESPACE_ID::ListValue::internal_default_instance());
  ::clarifai::api::_PostInputsNiFiRequest_default_instance_._instance.get_mutable()->metadata_ = const_cast< PROTOBUF_NAMESPACE_ID::Struct*>(
      PROTOBUF_NAMESPACE_ID::Struct::internal_default_instance());
  ::clarifai::api::_PostInputsNiFiRequest_default_instance_._instance.get_mutable()->params_ = const_cast< PROTOBUF_NAMESPACE_ID::Struct*>(
      PROTOBUF_NAMESPACE_ID::Struct::internal_default_instance());
}
class PostInputsNiFiRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostInputsNiFiRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::ListValue& urls(const PostInputsNiFiRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::Struct& metadata(const PostInputsNiFiRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::Struct& params(const PostInputsNiFiRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostInputsNiFiRequest::_Internal::user_app_id(const PostInputsNiFiRequest* msg) {
  return *msg->user_app_id_;
}
const PROTOBUF_NAMESPACE_ID::ListValue&
PostInputsNiFiRequest::_Internal::urls(const PostInputsNiFiRequest* msg) {
  return *msg->urls_;
}
const PROTOBUF_NAMESPACE_ID::Struct&
PostInputsNiFiRequest::_Internal::metadata(const PostInputsNiFiRequest* msg) {
  return *msg->metadata_;
}
const PROTOBUF_NAMESPACE_ID::Struct&
PostInputsNiFiRequest::_Internal::params(const PostInputsNiFiRequest* msg) {
  return *msg->params_;
}
void PostInputsNiFiRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostInputsNiFiRequest::clear_urls() {
  if (GetArenaNoVirtual() == nullptr && urls_ != nullptr) {
    delete urls_;
  }
  urls_ = nullptr;
}
void PostInputsNiFiRequest::clear_metadata() {
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
void PostInputsNiFiRequest::clear_params() {
  if (GetArenaNoVirtual() == nullptr && params_ != nullptr) {
    delete params_;
  }
  params_ = nullptr;
}
PostInputsNiFiRequest::PostInputsNiFiRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostInputsNiFiRequest)
}
PostInputsNiFiRequest::PostInputsNiFiRequest(const PostInputsNiFiRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  if (from._internal_has_urls()) {
    urls_ = new PROTOBUF_NAMESPACE_ID::ListValue(*from.urls_);
  } else {
    urls_ = nullptr;
  }
  if (from._internal_has_metadata()) {
    metadata_ = new PROTOBUF_NAMESPACE_ID::Struct(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_params()) {
    params_ = new PROTOBUF_NAMESPACE_ID::Struct(*from.params_);
  } else {
    params_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostInputsNiFiRequest)
}

void PostInputsNiFiRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostInputsNiFiRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&params_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(params_));
}

PostInputsNiFiRequest::~PostInputsNiFiRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostInputsNiFiRequest)
  SharedDtor();
}

void PostInputsNiFiRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
  if (this != internal_default_instance()) delete urls_;
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete params_;
}

void PostInputsNiFiRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostInputsNiFiRequest& PostInputsNiFiRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostInputsNiFiRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostInputsNiFiRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostInputsNiFiRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && urls_ != nullptr) {
    delete urls_;
  }
  urls_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && params_ != nullptr) {
    delete params_;
  }
  params_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostInputsNiFiRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.ListValue urls = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_urls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Struct metadata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Struct params = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostInputsNiFiRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostInputsNiFiRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // .google.protobuf.ListValue urls = 2;
  if (this->has_urls()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::urls(this), target, stream);
  }

  // .google.protobuf.Struct metadata = 3;
  if (this->has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::metadata(this), target, stream);
  }

  // .google.protobuf.Struct params = 4;
  if (this->has_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::params(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostInputsNiFiRequest)
  return target;
}

size_t PostInputsNiFiRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostInputsNiFiRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // .google.protobuf.ListValue urls = 2;
  if (this->has_urls()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *urls_);
  }

  // .google.protobuf.Struct metadata = 3;
  if (this->has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // .google.protobuf.Struct params = 4;
  if (this->has_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *params_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostInputsNiFiRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostInputsNiFiRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostInputsNiFiRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostInputsNiFiRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostInputsNiFiRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostInputsNiFiRequest)
    MergeFrom(*source);
  }
}

void PostInputsNiFiRequest::MergeFrom(const PostInputsNiFiRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostInputsNiFiRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.has_urls()) {
    _internal_mutable_urls()->PROTOBUF_NAMESPACE_ID::ListValue::MergeFrom(from._internal_urls());
  }
  if (from.has_metadata()) {
    _internal_mutable_metadata()->PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_metadata());
  }
  if (from.has_params()) {
    _internal_mutable_params()->PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_params());
  }
}

void PostInputsNiFiRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostInputsNiFiRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostInputsNiFiRequest::CopyFrom(const PostInputsNiFiRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostInputsNiFiRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostInputsNiFiRequest::IsInitialized() const {
  return true;
}

void PostInputsNiFiRequest::InternalSwap(PostInputsNiFiRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_app_id_, other->user_app_id_);
  swap(urls_, other->urls_);
  swap(metadata_, other->metadata_);
  swap(params_, other->params_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostInputsNiFiRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PatchInputsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PatchInputsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PatchInputsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchInputsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchInputsRequest::_Internal::user_app_id(const PatchInputsRequest* msg) {
  return *msg->user_app_id_;
}
void PatchInputsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PatchInputsRequest::clear_inputs() {
  inputs_.Clear();
}
PatchInputsRequest::PatchInputsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PatchInputsRequest)
}
PatchInputsRequest::PatchInputsRequest(const PatchInputsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      inputs_(from.inputs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action().empty()) {
    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchInputsRequest)
}

void PatchInputsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PatchInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

PatchInputsRequest::~PatchInputsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchInputsRequest)
  SharedDtor();
}

void PatchInputsRequest::SharedDtor() {
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PatchInputsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PatchInputsRequest& PatchInputsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PatchInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PatchInputsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchInputsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inputs_.Clear();
  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PatchInputsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Input inputs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchInputsRequest.action"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PatchInputsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchInputsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Input inputs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_inputs(i), target, stream);
  }

  // string action = 3;
  if (this->action().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchInputsRequest.action");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchInputsRequest)
  return target;
}

size_t PatchInputsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchInputsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Input inputs = 2;
  total_size += 1UL * this->_internal_inputs_size();
  for (const auto& msg : this->inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string action = 3;
  if (this->action().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PatchInputsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PatchInputsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PatchInputsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PatchInputsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PatchInputsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PatchInputsRequest)
    MergeFrom(*source);
  }
}

void PatchInputsRequest::MergeFrom(const PatchInputsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchInputsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inputs_.MergeFrom(from.inputs_);
  if (from.action().size() > 0) {

    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void PatchInputsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PatchInputsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatchInputsRequest::CopyFrom(const PatchInputsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchInputsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchInputsRequest::IsInitialized() const {
  return true;
}

void PatchInputsRequest::InternalSwap(PatchInputsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  inputs_.InternalSwap(&other->inputs_);
  action_.Swap(&other->action_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchInputsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteInputRequest::InitAsDefaultInstance() {
  ::clarifai::api::_DeleteInputRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class DeleteInputRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteInputRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteInputRequest::_Internal::user_app_id(const DeleteInputRequest* msg) {
  return *msg->user_app_id_;
}
void DeleteInputRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
DeleteInputRequest::DeleteInputRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.DeleteInputRequest)
}
DeleteInputRequest::DeleteInputRequest(const DeleteInputRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  input_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_input_id().empty()) {
    input_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.input_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteInputRequest)
}

void DeleteInputRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteInputRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  input_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

DeleteInputRequest::~DeleteInputRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteInputRequest)
  SharedDtor();
}

void DeleteInputRequest::SharedDtor() {
  input_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void DeleteInputRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteInputRequest& DeleteInputRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteInputRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void DeleteInputRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteInputRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* DeleteInputRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string input_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_input_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteInputRequest.input_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteInputRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteInputRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string input_id = 2;
  if (this->input_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_input_id().data(), static_cast<int>(this->_internal_input_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteInputRequest.input_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_input_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteInputRequest)
  return target;
}

size_t DeleteInputRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteInputRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string input_id = 2;
  if (this->input_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_input_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteInputRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.DeleteInputRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteInputRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteInputRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.DeleteInputRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.DeleteInputRequest)
    MergeFrom(*source);
  }
}

void DeleteInputRequest::MergeFrom(const DeleteInputRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteInputRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.input_id().size() > 0) {

    input_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.input_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void DeleteInputRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.DeleteInputRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteInputRequest::CopyFrom(const DeleteInputRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteInputRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteInputRequest::IsInitialized() const {
  return true;
}

void DeleteInputRequest::InternalSwap(DeleteInputRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  input_id_.Swap(&other->input_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteInputRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteInputsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_DeleteInputsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class DeleteInputsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteInputsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteInputsRequest::_Internal::user_app_id(const DeleteInputsRequest* msg) {
  return *msg->user_app_id_;
}
void DeleteInputsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
DeleteInputsRequest::DeleteInputsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.DeleteInputsRequest)
}
DeleteInputsRequest::DeleteInputsRequest(const DeleteInputsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  delete_all_ = from.delete_all_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteInputsRequest)
}

void DeleteInputsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delete_all_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(delete_all_));
}

DeleteInputsRequest::~DeleteInputsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteInputsRequest)
  SharedDtor();
}

void DeleteInputsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void DeleteInputsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteInputsRequest& DeleteInputsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void DeleteInputsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteInputsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  delete_all_ = false;
  _internal_metadata_.Clear();
}

const char* DeleteInputsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteInputsRequest.ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bool delete_all = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          delete_all_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteInputsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteInputsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated string ids = 2;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteInputsRequest.ids");
    target = stream->WriteString(2, s, target);
  }

  // bool delete_all = 3;
  if (this->delete_all() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_delete_all(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteInputsRequest)
  return target;
}

size_t DeleteInputsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteInputsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ids_.size());
  for (int i = 0, n = ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ids_.Get(i));
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // bool delete_all = 3;
  if (this->delete_all() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteInputsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.DeleteInputsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteInputsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteInputsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.DeleteInputsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.DeleteInputsRequest)
    MergeFrom(*source);
  }
}

void DeleteInputsRequest::MergeFrom(const DeleteInputsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteInputsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.delete_all() != 0) {
    _internal_set_delete_all(from._internal_delete_all());
  }
}

void DeleteInputsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.DeleteInputsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteInputsRequest::CopyFrom(const DeleteInputsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteInputsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteInputsRequest::IsInitialized() const {
  return true;
}

void DeleteInputsRequest::InternalSwap(DeleteInputsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
  swap(user_app_id_, other->user_app_id_);
  swap(delete_all_, other->delete_all_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteInputsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SingleInputResponse::InitAsDefaultInstance() {
  ::clarifai::api::_SingleInputResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
  ::clarifai::api::_SingleInputResponse_default_instance_._instance.get_mutable()->input_ = const_cast< ::clarifai::api::Input*>(
      ::clarifai::api::Input::internal_default_instance());
}
class SingleInputResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleInputResponse* msg);
  static const ::clarifai::api::Input& input(const SingleInputResponse* msg);
};

const ::clarifai::api::status::Status&
SingleInputResponse::_Internal::status(const SingleInputResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::Input&
SingleInputResponse::_Internal::input(const SingleInputResponse* msg) {
  return *msg->input_;
}
void SingleInputResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleInputResponse::clear_input() {
  if (GetArenaNoVirtual() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
}
SingleInputResponse::SingleInputResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.SingleInputResponse)
}
SingleInputResponse::SingleInputResponse(const SingleInputResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_input()) {
    input_ = new ::clarifai::api::Input(*from.input_);
  } else {
    input_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleInputResponse)
}

void SingleInputResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SingleInputResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&input_) -
      reinterpret_cast<char*>(&status_)) + sizeof(input_));
}

SingleInputResponse::~SingleInputResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleInputResponse)
  SharedDtor();
}

void SingleInputResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete input_;
}

void SingleInputResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleInputResponse& SingleInputResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleInputResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void SingleInputResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleInputResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SingleInputResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Input input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleInputResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleInputResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.Input input = 2;
  if (this->has_input()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::input(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleInputResponse)
  return target;
}

size_t SingleInputResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleInputResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.Input input = 2;
  if (this->has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleInputResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.SingleInputResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleInputResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleInputResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.SingleInputResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.SingleInputResponse)
    MergeFrom(*source);
  }
}

void SingleInputResponse::MergeFrom(const SingleInputResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleInputResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.has_input()) {
    _internal_mutable_input()->::clarifai::api::Input::MergeFrom(from._internal_input());
  }
}

void SingleInputResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.SingleInputResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleInputResponse::CopyFrom(const SingleInputResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleInputResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleInputResponse::IsInitialized() const {
  return true;
}

void SingleInputResponse::InternalSwap(SingleInputResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(input_, other->input_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleInputResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiInputResponse::InitAsDefaultInstance() {
  ::clarifai::api::_MultiInputResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class MultiInputResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiInputResponse* msg);
};

const ::clarifai::api::status::Status&
MultiInputResponse::_Internal::status(const MultiInputResponse* msg) {
  return *msg->status_;
}
void MultiInputResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiInputResponse::clear_inputs() {
  inputs_.Clear();
}
MultiInputResponse::MultiInputResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MultiInputResponse)
}
MultiInputResponse::MultiInputResponse(const MultiInputResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      inputs_(from.inputs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiInputResponse)
}

void MultiInputResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiInputResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

MultiInputResponse::~MultiInputResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiInputResponse)
  SharedDtor();
}

void MultiInputResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void MultiInputResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiInputResponse& MultiInputResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiInputResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiInputResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiInputResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inputs_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultiInputResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Input inputs = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiInputResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiInputResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.Input inputs = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_inputs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiInputResponse)
  return target;
}

size_t MultiInputResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiInputResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Input inputs = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_inputs_size();
  for (const auto& msg : this->inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiInputResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MultiInputResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiInputResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiInputResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MultiInputResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MultiInputResponse)
    MergeFrom(*source);
  }
}

void MultiInputResponse::MergeFrom(const MultiInputResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiInputResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inputs_.MergeFrom(from.inputs_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void MultiInputResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MultiInputResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiInputResponse::CopyFrom(const MultiInputResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiInputResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiInputResponse::IsInitialized() const {
  return true;
}

void MultiInputResponse::InternalSwap(MultiInputResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  inputs_.InternalSwap(&other->inputs_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiInputResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SingleInputCountResponse::InitAsDefaultInstance() {
  ::clarifai::api::_SingleInputCountResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
  ::clarifai::api::_SingleInputCountResponse_default_instance_._instance.get_mutable()->counts_ = const_cast< ::clarifai::api::InputCount*>(
      ::clarifai::api::InputCount::internal_default_instance());
}
class SingleInputCountResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleInputCountResponse* msg);
  static const ::clarifai::api::InputCount& counts(const SingleInputCountResponse* msg);
};

const ::clarifai::api::status::Status&
SingleInputCountResponse::_Internal::status(const SingleInputCountResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::InputCount&
SingleInputCountResponse::_Internal::counts(const SingleInputCountResponse* msg) {
  return *msg->counts_;
}
void SingleInputCountResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleInputCountResponse::clear_counts() {
  if (GetArenaNoVirtual() == nullptr && counts_ != nullptr) {
    delete counts_;
  }
  counts_ = nullptr;
}
SingleInputCountResponse::SingleInputCountResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.SingleInputCountResponse)
}
SingleInputCountResponse::SingleInputCountResponse(const SingleInputCountResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_counts()) {
    counts_ = new ::clarifai::api::InputCount(*from.counts_);
  } else {
    counts_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleInputCountResponse)
}

void SingleInputCountResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SingleInputCountResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&counts_) -
      reinterpret_cast<char*>(&status_)) + sizeof(counts_));
}

SingleInputCountResponse::~SingleInputCountResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleInputCountResponse)
  SharedDtor();
}

void SingleInputCountResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete counts_;
}

void SingleInputCountResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleInputCountResponse& SingleInputCountResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleInputCountResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void SingleInputCountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleInputCountResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && counts_ != nullptr) {
    delete counts_;
  }
  counts_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SingleInputCountResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.InputCount counts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_counts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleInputCountResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleInputCountResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.InputCount counts = 2;
  if (this->has_counts()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::counts(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleInputCountResponse)
  return target;
}

size_t SingleInputCountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleInputCountResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.InputCount counts = 2;
  if (this->has_counts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *counts_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleInputCountResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.SingleInputCountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleInputCountResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleInputCountResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.SingleInputCountResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.SingleInputCountResponse)
    MergeFrom(*source);
  }
}

void SingleInputCountResponse::MergeFrom(const SingleInputCountResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleInputCountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.has_counts()) {
    _internal_mutable_counts()->::clarifai::api::InputCount::MergeFrom(from._internal_counts());
  }
}

void SingleInputCountResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.SingleInputCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleInputCountResponse::CopyFrom(const SingleInputCountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleInputCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleInputCountResponse::IsInitialized() const {
  return true;
}

void SingleInputCountResponse::InternalSwap(SingleInputCountResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(counts_, other->counts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleInputCountResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetInputCountRequest::InitAsDefaultInstance() {
  ::clarifai::api::_GetInputCountRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class GetInputCountRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetInputCountRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetInputCountRequest::_Internal::user_app_id(const GetInputCountRequest* msg) {
  return *msg->user_app_id_;
}
void GetInputCountRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetInputCountRequest::GetInputCountRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.GetInputCountRequest)
}
GetInputCountRequest::GetInputCountRequest(const GetInputCountRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetInputCountRequest)
}

void GetInputCountRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetInputCountRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  user_app_id_ = nullptr;
}

GetInputCountRequest::~GetInputCountRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetInputCountRequest)
  SharedDtor();
}

void GetInputCountRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetInputCountRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetInputCountRequest& GetInputCountRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetInputCountRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void GetInputCountRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetInputCountRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetInputCountRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetInputCountRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetInputCountRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetInputCountRequest)
  return target;
}

size_t GetInputCountRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetInputCountRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetInputCountRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.GetInputCountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetInputCountRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetInputCountRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.GetInputCountRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.GetInputCountRequest)
    MergeFrom(*source);
  }
}

void GetInputCountRequest::MergeFrom(const GetInputCountRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetInputCountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void GetInputCountRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.GetInputCountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInputCountRequest::CopyFrom(const GetInputCountRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetInputCountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInputCountRequest::IsInitialized() const {
  return true;
}

void GetInputCountRequest::InternalSwap(GetInputCountRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetInputCountRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostModelOutputsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostModelOutputsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
  ::clarifai::api::_PostModelOutputsRequest_default_instance_._instance.get_mutable()->model_ = const_cast< ::clarifai::api::Model*>(
      ::clarifai::api::Model::internal_default_instance());
}
class PostModelOutputsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostModelOutputsRequest* msg);
  static const ::clarifai::api::Model& model(const PostModelOutputsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostModelOutputsRequest::_Internal::user_app_id(const PostModelOutputsRequest* msg) {
  return *msg->user_app_id_;
}
const ::clarifai::api::Model&
PostModelOutputsRequest::_Internal::model(const PostModelOutputsRequest* msg) {
  return *msg->model_;
}
void PostModelOutputsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostModelOutputsRequest::clear_inputs() {
  inputs_.Clear();
}
void PostModelOutputsRequest::clear_model() {
  if (GetArenaNoVirtual() == nullptr && model_ != nullptr) {
    delete model_;
  }
  model_ = nullptr;
}
PostModelOutputsRequest::PostModelOutputsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostModelOutputsRequest)
}
PostModelOutputsRequest::PostModelOutputsRequest(const PostModelOutputsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      inputs_(from.inputs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_id().empty()) {
    model_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_id_);
  }
  version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version_id().empty()) {
    version_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  if (from._internal_has_model()) {
    model_ = new ::clarifai::api::Model(*from.model_);
  } else {
    model_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostModelOutputsRequest)
}

void PostModelOutputsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostModelOutputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&model_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(model_));
}

PostModelOutputsRequest::~PostModelOutputsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostModelOutputsRequest)
  SharedDtor();
}

void PostModelOutputsRequest::SharedDtor() {
  model_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
  if (this != internal_default_instance()) delete model_;
}

void PostModelOutputsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostModelOutputsRequest& PostModelOutputsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostModelOutputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostModelOutputsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostModelOutputsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inputs_.Clear();
  model_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && model_ != nullptr) {
    delete model_;
  }
  model_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostModelOutputsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostModelOutputsRequest.model_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_version_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostModelOutputsRequest.version_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Input inputs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Model model = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_model(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostModelOutputsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostModelOutputsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string model_id = 2;
  if (this->model_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostModelOutputsRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  // string version_id = 3;
  if (this->version_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version_id().data(), static_cast<int>(this->_internal_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostModelOutputsRequest.version_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_version_id(), target);
  }

  // repeated .clarifai.api.Input inputs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_inputs(i), target, stream);
  }

  // .clarifai.api.Model model = 5;
  if (this->has_model()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::model(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostModelOutputsRequest)
  return target;
}

size_t PostModelOutputsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostModelOutputsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Input inputs = 4;
  total_size += 1UL * this->_internal_inputs_size();
  for (const auto& msg : this->inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string model_id = 2;
  if (this->model_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string version_id = 3;
  if (this->version_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // .clarifai.api.Model model = 5;
  if (this->has_model()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *model_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostModelOutputsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostModelOutputsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostModelOutputsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostModelOutputsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostModelOutputsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostModelOutputsRequest)
    MergeFrom(*source);
  }
}

void PostModelOutputsRequest::MergeFrom(const PostModelOutputsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostModelOutputsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inputs_.MergeFrom(from.inputs_);
  if (from.model_id().size() > 0) {

    model_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_id_);
  }
  if (from.version_id().size() > 0) {

    version_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.has_model()) {
    _internal_mutable_model()->::clarifai::api::Model::MergeFrom(from._internal_model());
  }
}

void PostModelOutputsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostModelOutputsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostModelOutputsRequest::CopyFrom(const PostModelOutputsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostModelOutputsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostModelOutputsRequest::IsInitialized() const {
  return true;
}

void PostModelOutputsRequest::InternalSwap(PostModelOutputsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  inputs_.InternalSwap(&other->inputs_);
  model_id_.Swap(&other->model_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_id_.Swap(&other->version_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
  swap(model_, other->model_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostModelOutputsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListModelInputsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_ListModelInputsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class ListModelInputsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListModelInputsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListModelInputsRequest::_Internal::user_app_id(const ListModelInputsRequest* msg) {
  return *msg->user_app_id_;
}
void ListModelInputsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListModelInputsRequest::ListModelInputsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ListModelInputsRequest)
}
ListModelInputsRequest::ListModelInputsRequest(const ListModelInputsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_id().empty()) {
    model_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_id_);
  }
  version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version_id().empty()) {
    version_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListModelInputsRequest)
}

void ListModelInputsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListModelInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

ListModelInputsRequest::~ListModelInputsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListModelInputsRequest)
  SharedDtor();
}

void ListModelInputsRequest::SharedDtor() {
  model_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListModelInputsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListModelInputsRequest& ListModelInputsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListModelInputsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ListModelInputsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListModelInputsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear();
}

const char* ListModelInputsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListModelInputsRequest.model_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_version_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListModelInputsRequest.version_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 page = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 per_page = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListModelInputsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListModelInputsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string model_id = 2;
  if (this->model_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListModelInputsRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  // string version_id = 3;
  if (this->version_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version_id().data(), static_cast<int>(this->_internal_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListModelInputsRequest.version_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_version_id(), target);
  }

  // uint32 page = 4;
  if (this->page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_page(), target);
  }

  // uint32 per_page = 5;
  if (this->per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListModelInputsRequest)
  return target;
}

size_t ListModelInputsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListModelInputsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model_id = 2;
  if (this->model_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string version_id = 3;
  if (this->version_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 4;
  if (this->page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page());
  }

  // uint32 per_page = 5;
  if (this->per_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_per_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListModelInputsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ListModelInputsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListModelInputsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListModelInputsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ListModelInputsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ListModelInputsRequest)
    MergeFrom(*source);
  }
}

void ListModelInputsRequest::MergeFrom(const ListModelInputsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListModelInputsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.model_id().size() > 0) {

    model_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_id_);
  }
  if (from.version_id().size() > 0) {

    version_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from.per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
}

void ListModelInputsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ListModelInputsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListModelInputsRequest::CopyFrom(const ListModelInputsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListModelInputsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListModelInputsRequest::IsInitialized() const {
  return true;
}

void ListModelInputsRequest::InternalSwap(ListModelInputsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  model_id_.Swap(&other->model_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_id_.Swap(&other->version_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
  swap(page_, other->page_);
  swap(per_page_, other->per_page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListModelInputsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetKeyRequest::InitAsDefaultInstance() {
  ::clarifai::api::_GetKeyRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class GetKeyRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetKeyRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetKeyRequest::_Internal::user_app_id(const GetKeyRequest* msg) {
  return *msg->user_app_id_;
}
void GetKeyRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetKeyRequest::GetKeyRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.GetKeyRequest)
}
GetKeyRequest::GetKeyRequest(const GetKeyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key_id().empty()) {
    key_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetKeyRequest)
}

void GetKeyRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetKeyRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  key_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

GetKeyRequest::~GetKeyRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetKeyRequest)
  SharedDtor();
}

void GetKeyRequest::SharedDtor() {
  key_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetKeyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetKeyRequest& GetKeyRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetKeyRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void GetKeyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetKeyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetKeyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string key_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetKeyRequest.key_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetKeyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetKeyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string key_id = 2;
  if (this->key_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key_id().data(), static_cast<int>(this->_internal_key_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetKeyRequest.key_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetKeyRequest)
  return target;
}

size_t GetKeyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetKeyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key_id = 2;
  if (this->key_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetKeyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.GetKeyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetKeyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetKeyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.GetKeyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.GetKeyRequest)
    MergeFrom(*source);
  }
}

void GetKeyRequest::MergeFrom(const GetKeyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetKeyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key_id().size() > 0) {

    key_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void GetKeyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.GetKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetKeyRequest::CopyFrom(const GetKeyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetKeyRequest::IsInitialized() const {
  return true;
}

void GetKeyRequest::InternalSwap(GetKeyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_id_.Swap(&other->key_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetKeyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListKeysRequest::InitAsDefaultInstance() {
  ::clarifai::api::_ListKeysRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class ListKeysRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListKeysRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListKeysRequest::_Internal::user_app_id(const ListKeysRequest* msg) {
  return *msg->user_app_id_;
}
void ListKeysRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListKeysRequest::ListKeysRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ListKeysRequest)
}
ListKeysRequest::ListKeysRequest(const ListKeysRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListKeysRequest)
}

void ListKeysRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListKeysRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

ListKeysRequest::~ListKeysRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListKeysRequest)
  SharedDtor();
}

void ListKeysRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListKeysRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListKeysRequest& ListKeysRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListKeysRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ListKeysRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListKeysRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear();
}

const char* ListKeysRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListKeysRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListKeysRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // uint32 page = 2;
  if (this->page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListKeysRequest)
  return target;
}

size_t ListKeysRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListKeysRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 2;
  if (this->page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->per_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_per_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListKeysRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ListKeysRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListKeysRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListKeysRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ListKeysRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ListKeysRequest)
    MergeFrom(*source);
  }
}

void ListKeysRequest::MergeFrom(const ListKeysRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListKeysRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from.per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
}

void ListKeysRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ListKeysRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListKeysRequest::CopyFrom(const ListKeysRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListKeysRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListKeysRequest::IsInitialized() const {
  return true;
}

void ListKeysRequest::InternalSwap(ListKeysRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_app_id_, other->user_app_id_);
  swap(page_, other->page_);
  swap(per_page_, other->per_page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListKeysRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListAppKeysRequest::InitAsDefaultInstance() {
  ::clarifai::api::_ListAppKeysRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class ListAppKeysRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListAppKeysRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListAppKeysRequest::_Internal::user_app_id(const ListAppKeysRequest* msg) {
  return *msg->user_app_id_;
}
void ListAppKeysRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListAppKeysRequest::ListAppKeysRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ListAppKeysRequest)
}
ListAppKeysRequest::ListAppKeysRequest(const ListAppKeysRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListAppKeysRequest)
}

void ListAppKeysRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListAppKeysRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

ListAppKeysRequest::~ListAppKeysRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListAppKeysRequest)
  SharedDtor();
}

void ListAppKeysRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListAppKeysRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListAppKeysRequest& ListAppKeysRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListAppKeysRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ListAppKeysRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListAppKeysRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear();
}

const char* ListAppKeysRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListAppKeysRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListAppKeysRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // uint32 page = 2;
  if (this->page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListAppKeysRequest)
  return target;
}

size_t ListAppKeysRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListAppKeysRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 2;
  if (this->page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->per_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_per_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListAppKeysRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ListAppKeysRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListAppKeysRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListAppKeysRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ListAppKeysRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ListAppKeysRequest)
    MergeFrom(*source);
  }
}

void ListAppKeysRequest::MergeFrom(const ListAppKeysRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListAppKeysRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from.per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
}

void ListAppKeysRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ListAppKeysRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListAppKeysRequest::CopyFrom(const ListAppKeysRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListAppKeysRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListAppKeysRequest::IsInitialized() const {
  return true;
}

void ListAppKeysRequest::InternalSwap(ListAppKeysRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_app_id_, other->user_app_id_);
  swap(page_, other->page_);
  swap(per_page_, other->per_page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListAppKeysRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostKeysRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostKeysRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PostKeysRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostKeysRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostKeysRequest::_Internal::user_app_id(const PostKeysRequest* msg) {
  return *msg->user_app_id_;
}
void PostKeysRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostKeysRequest::clear_keys() {
  keys_.Clear();
}
PostKeysRequest::PostKeysRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostKeysRequest)
}
PostKeysRequest::PostKeysRequest(const PostKeysRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostKeysRequest)
}

void PostKeysRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostKeysRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  user_app_id_ = nullptr;
}

PostKeysRequest::~PostKeysRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostKeysRequest)
  SharedDtor();
}

void PostKeysRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostKeysRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostKeysRequest& PostKeysRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostKeysRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostKeysRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostKeysRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostKeysRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Key keys = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostKeysRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostKeysRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Key keys = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_keys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_keys(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostKeysRequest)
  return target;
}

size_t PostKeysRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostKeysRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Key keys = 2;
  total_size += 1UL * this->_internal_keys_size();
  for (const auto& msg : this->keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostKeysRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostKeysRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostKeysRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostKeysRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostKeysRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostKeysRequest)
    MergeFrom(*source);
  }
}

void PostKeysRequest::MergeFrom(const PostKeysRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostKeysRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void PostKeysRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostKeysRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostKeysRequest::CopyFrom(const PostKeysRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostKeysRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostKeysRequest::IsInitialized() const {
  return true;
}

void PostKeysRequest::InternalSwap(PostKeysRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  keys_.InternalSwap(&other->keys_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostKeysRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteKeyRequest::InitAsDefaultInstance() {
  ::clarifai::api::_DeleteKeyRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class DeleteKeyRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteKeyRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteKeyRequest::_Internal::user_app_id(const DeleteKeyRequest* msg) {
  return *msg->user_app_id_;
}
void DeleteKeyRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
DeleteKeyRequest::DeleteKeyRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.DeleteKeyRequest)
}
DeleteKeyRequest::DeleteKeyRequest(const DeleteKeyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key_id().empty()) {
    key_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteKeyRequest)
}

void DeleteKeyRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteKeyRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  key_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

DeleteKeyRequest::~DeleteKeyRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteKeyRequest)
  SharedDtor();
}

void DeleteKeyRequest::SharedDtor() {
  key_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void DeleteKeyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteKeyRequest& DeleteKeyRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteKeyRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void DeleteKeyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteKeyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* DeleteKeyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string key_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteKeyRequest.key_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteKeyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteKeyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string key_id = 2;
  if (this->key_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key_id().data(), static_cast<int>(this->_internal_key_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteKeyRequest.key_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteKeyRequest)
  return target;
}

size_t DeleteKeyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteKeyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key_id = 2;
  if (this->key_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteKeyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.DeleteKeyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteKeyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteKeyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.DeleteKeyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.DeleteKeyRequest)
    MergeFrom(*source);
  }
}

void DeleteKeyRequest::MergeFrom(const DeleteKeyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteKeyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key_id().size() > 0) {

    key_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void DeleteKeyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.DeleteKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteKeyRequest::CopyFrom(const DeleteKeyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteKeyRequest::IsInitialized() const {
  return true;
}

void DeleteKeyRequest::InternalSwap(DeleteKeyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_id_.Swap(&other->key_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteKeyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PatchKeysRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PatchKeysRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PatchKeysRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchKeysRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchKeysRequest::_Internal::user_app_id(const PatchKeysRequest* msg) {
  return *msg->user_app_id_;
}
void PatchKeysRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PatchKeysRequest::clear_keys() {
  keys_.Clear();
}
PatchKeysRequest::PatchKeysRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PatchKeysRequest)
}
PatchKeysRequest::PatchKeysRequest(const PatchKeysRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action().empty()) {
    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchKeysRequest)
}

void PatchKeysRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PatchKeysRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

PatchKeysRequest::~PatchKeysRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchKeysRequest)
  SharedDtor();
}

void PatchKeysRequest::SharedDtor() {
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PatchKeysRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PatchKeysRequest& PatchKeysRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PatchKeysRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PatchKeysRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchKeysRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PatchKeysRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Key keys = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchKeysRequest.action"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PatchKeysRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchKeysRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Key keys = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_keys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_keys(i), target, stream);
  }

  // string action = 3;
  if (this->action().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchKeysRequest.action");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchKeysRequest)
  return target;
}

size_t PatchKeysRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchKeysRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Key keys = 2;
  total_size += 1UL * this->_internal_keys_size();
  for (const auto& msg : this->keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string action = 3;
  if (this->action().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PatchKeysRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PatchKeysRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PatchKeysRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PatchKeysRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PatchKeysRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PatchKeysRequest)
    MergeFrom(*source);
  }
}

void PatchKeysRequest::MergeFrom(const PatchKeysRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchKeysRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  if (from.action().size() > 0) {

    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void PatchKeysRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PatchKeysRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatchKeysRequest::CopyFrom(const PatchKeysRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchKeysRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchKeysRequest::IsInitialized() const {
  return true;
}

void PatchKeysRequest::InternalSwap(PatchKeysRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  keys_.InternalSwap(&other->keys_);
  action_.Swap(&other->action_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchKeysRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SingleKeyResponse::InitAsDefaultInstance() {
  ::clarifai::api::_SingleKeyResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
  ::clarifai::api::_SingleKeyResponse_default_instance_._instance.get_mutable()->key_ = const_cast< ::clarifai::api::Key*>(
      ::clarifai::api::Key::internal_default_instance());
}
class SingleKeyResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleKeyResponse* msg);
  static const ::clarifai::api::Key& key(const SingleKeyResponse* msg);
};

const ::clarifai::api::status::Status&
SingleKeyResponse::_Internal::status(const SingleKeyResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::Key&
SingleKeyResponse::_Internal::key(const SingleKeyResponse* msg) {
  return *msg->key_;
}
void SingleKeyResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleKeyResponse::clear_key() {
  if (GetArenaNoVirtual() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
}
SingleKeyResponse::SingleKeyResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.SingleKeyResponse)
}
SingleKeyResponse::SingleKeyResponse(const SingleKeyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_key()) {
    key_ = new ::clarifai::api::Key(*from.key_);
  } else {
    key_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleKeyResponse)
}

void SingleKeyResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SingleKeyResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&key_) -
      reinterpret_cast<char*>(&status_)) + sizeof(key_));
}

SingleKeyResponse::~SingleKeyResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleKeyResponse)
  SharedDtor();
}

void SingleKeyResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete key_;
}

void SingleKeyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleKeyResponse& SingleKeyResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleKeyResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void SingleKeyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleKeyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SingleKeyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Key key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleKeyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleKeyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.Key key = 2;
  if (this->has_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::key(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleKeyResponse)
  return target;
}

size_t SingleKeyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleKeyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.Key key = 2;
  if (this->has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleKeyResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.SingleKeyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleKeyResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleKeyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.SingleKeyResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.SingleKeyResponse)
    MergeFrom(*source);
  }
}

void SingleKeyResponse::MergeFrom(const SingleKeyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleKeyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.has_key()) {
    _internal_mutable_key()->::clarifai::api::Key::MergeFrom(from._internal_key());
  }
}

void SingleKeyResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.SingleKeyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleKeyResponse::CopyFrom(const SingleKeyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleKeyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleKeyResponse::IsInitialized() const {
  return true;
}

void SingleKeyResponse::InternalSwap(SingleKeyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(key_, other->key_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleKeyResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiKeyResponse::InitAsDefaultInstance() {
  ::clarifai::api::_MultiKeyResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class MultiKeyResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiKeyResponse* msg);
};

const ::clarifai::api::status::Status&
MultiKeyResponse::_Internal::status(const MultiKeyResponse* msg) {
  return *msg->status_;
}
void MultiKeyResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiKeyResponse::clear_keys() {
  keys_.Clear();
}
MultiKeyResponse::MultiKeyResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MultiKeyResponse)
}
MultiKeyResponse::MultiKeyResponse(const MultiKeyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiKeyResponse)
}

void MultiKeyResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiKeyResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

MultiKeyResponse::~MultiKeyResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiKeyResponse)
  SharedDtor();
}

void MultiKeyResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void MultiKeyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiKeyResponse& MultiKeyResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiKeyResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiKeyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiKeyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultiKeyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Key keys = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiKeyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiKeyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.Key keys = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_keys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_keys(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiKeyResponse)
  return target;
}

size_t MultiKeyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiKeyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Key keys = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_keys_size();
  for (const auto& msg : this->keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiKeyResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MultiKeyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiKeyResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiKeyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MultiKeyResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MultiKeyResponse)
    MergeFrom(*source);
  }
}

void MultiKeyResponse::MergeFrom(const MultiKeyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiKeyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void MultiKeyResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MultiKeyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiKeyResponse::CopyFrom(const MultiKeyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiKeyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiKeyResponse::IsInitialized() const {
  return true;
}

void MultiKeyResponse::InternalSwap(MultiKeyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  keys_.InternalSwap(&other->keys_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiKeyResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FetchLicenseRequest::InitAsDefaultInstance() {
}
class FetchLicenseRequest::_Internal {
 public:
};

FetchLicenseRequest::FetchLicenseRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.FetchLicenseRequest)
}
FetchLicenseRequest::FetchLicenseRequest(const FetchLicenseRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  license_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_license_id().empty()) {
    license_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.license_id_);
  }
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_public_key().empty()) {
    public_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signature().empty()) {
    signature_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.FetchLicenseRequest)
}

void FetchLicenseRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FetchLicenseRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  license_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FetchLicenseRequest::~FetchLicenseRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.FetchLicenseRequest)
  SharedDtor();
}

void FetchLicenseRequest::SharedDtor() {
  license_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FetchLicenseRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FetchLicenseRequest& FetchLicenseRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FetchLicenseRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void FetchLicenseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.FetchLicenseRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  license_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* FetchLicenseRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string license_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_license_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.FetchLicenseRequest.license_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string public_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.FetchLicenseRequest.public_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes signature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FetchLicenseRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.FetchLicenseRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string license_id = 1;
  if (this->license_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_license_id().data(), static_cast<int>(this->_internal_license_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.FetchLicenseRequest.license_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_license_id(), target);
  }

  // string public_key = 2;
  if (this->public_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_public_key().data(), static_cast<int>(this->_internal_public_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.FetchLicenseRequest.public_key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_public_key(), target);
  }

  // bytes signature = 3;
  if (this->signature().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.FetchLicenseRequest)
  return target;
}

size_t FetchLicenseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.FetchLicenseRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string license_id = 1;
  if (this->license_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_license_id());
  }

  // string public_key = 2;
  if (this->public_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_public_key());
  }

  // bytes signature = 3;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FetchLicenseRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.FetchLicenseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FetchLicenseRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FetchLicenseRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.FetchLicenseRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.FetchLicenseRequest)
    MergeFrom(*source);
  }
}

void FetchLicenseRequest::MergeFrom(const FetchLicenseRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.FetchLicenseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.license_id().size() > 0) {

    license_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.license_id_);
  }
  if (from.public_key().size() > 0) {

    public_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  if (from.signature().size() > 0) {

    signature_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
}

void FetchLicenseRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.FetchLicenseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchLicenseRequest::CopyFrom(const FetchLicenseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.FetchLicenseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchLicenseRequest::IsInitialized() const {
  return true;
}

void FetchLicenseRequest::InternalSwap(FetchLicenseRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  license_id_.Swap(&other->license_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  public_key_.Swap(&other->public_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  signature_.Swap(&other->signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchLicenseRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FetchLicenseResponse::InitAsDefaultInstance() {
  ::clarifai::api::_FetchLicenseResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
  ::clarifai::api::_FetchLicenseResponse_default_instance_._instance.get_mutable()->activated_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class FetchLicenseResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const FetchLicenseResponse* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& activated_at(const FetchLicenseResponse* msg);
};

const ::clarifai::api::status::Status&
FetchLicenseResponse::_Internal::status(const FetchLicenseResponse* msg) {
  return *msg->status_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
FetchLicenseResponse::_Internal::activated_at(const FetchLicenseResponse* msg) {
  return *msg->activated_at_;
}
void FetchLicenseResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void FetchLicenseResponse::clear_activated_at() {
  if (GetArenaNoVirtual() == nullptr && activated_at_ != nullptr) {
    delete activated_at_;
  }
  activated_at_ = nullptr;
}
FetchLicenseResponse::FetchLicenseResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.FetchLicenseResponse)
}
FetchLicenseResponse::FetchLicenseResponse(const FetchLicenseResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  encrypted_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_encrypted_bytes().empty()) {
    encrypted_bytes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encrypted_bytes_);
  }
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_public_key().empty()) {
    public_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signature().empty()) {
    signature_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_activated_at()) {
    activated_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.activated_at_);
  } else {
    activated_at_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.FetchLicenseResponse)
}

void FetchLicenseResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FetchLicenseResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  encrypted_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&activated_at_) -
      reinterpret_cast<char*>(&status_)) + sizeof(activated_at_));
}

FetchLicenseResponse::~FetchLicenseResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.FetchLicenseResponse)
  SharedDtor();
}

void FetchLicenseResponse::SharedDtor() {
  encrypted_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete activated_at_;
}

void FetchLicenseResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FetchLicenseResponse& FetchLicenseResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FetchLicenseResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void FetchLicenseResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.FetchLicenseResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  encrypted_bytes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && activated_at_ != nullptr) {
    delete activated_at_;
  }
  activated_at_ = nullptr;
  _internal_metadata_.Clear();
}

const char* FetchLicenseResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes encrypted_bytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_encrypted_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp activated_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_activated_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string public_key = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.FetchLicenseResponse.public_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes signature = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FetchLicenseResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.FetchLicenseResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // bytes encrypted_bytes = 2;
  if (this->encrypted_bytes().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_encrypted_bytes(), target);
  }

  // .google.protobuf.Timestamp activated_at = 3;
  if (this->has_activated_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::activated_at(this), target, stream);
  }

  // string public_key = 4;
  if (this->public_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_public_key().data(), static_cast<int>(this->_internal_public_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.FetchLicenseResponse.public_key");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_public_key(), target);
  }

  // bytes signature = 5;
  if (this->signature().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.FetchLicenseResponse)
  return target;
}

size_t FetchLicenseResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.FetchLicenseResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes encrypted_bytes = 2;
  if (this->encrypted_bytes().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_encrypted_bytes());
  }

  // string public_key = 4;
  if (this->public_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_public_key());
  }

  // bytes signature = 5;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature());
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .google.protobuf.Timestamp activated_at = 3;
  if (this->has_activated_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *activated_at_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FetchLicenseResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.FetchLicenseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FetchLicenseResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FetchLicenseResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.FetchLicenseResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.FetchLicenseResponse)
    MergeFrom(*source);
  }
}

void FetchLicenseResponse::MergeFrom(const FetchLicenseResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.FetchLicenseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.encrypted_bytes().size() > 0) {

    encrypted_bytes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encrypted_bytes_);
  }
  if (from.public_key().size() > 0) {

    public_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  if (from.signature().size() > 0) {

    signature_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.has_activated_at()) {
    _internal_mutable_activated_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_activated_at());
  }
}

void FetchLicenseResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.FetchLicenseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchLicenseResponse::CopyFrom(const FetchLicenseResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.FetchLicenseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchLicenseResponse::IsInitialized() const {
  return true;
}

void FetchLicenseResponse::InternalSwap(FetchLicenseResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  encrypted_bytes_.Swap(&other->encrypted_bytes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  public_key_.Swap(&other->public_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  signature_.Swap(&other->signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
  swap(activated_at_, other->activated_at_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchLicenseResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ValidateLicenseRequest::InitAsDefaultInstance() {
  ::clarifai::api::_ValidateLicenseRequest_default_instance_._instance.get_mutable()->activated_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class ValidateLicenseRequest::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& activated_at(const ValidateLicenseRequest* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
ValidateLicenseRequest::_Internal::activated_at(const ValidateLicenseRequest* msg) {
  return *msg->activated_at_;
}
void ValidateLicenseRequest::clear_activated_at() {
  if (GetArenaNoVirtual() == nullptr && activated_at_ != nullptr) {
    delete activated_at_;
  }
  activated_at_ = nullptr;
}
ValidateLicenseRequest::ValidateLicenseRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ValidateLicenseRequest)
}
ValidateLicenseRequest::ValidateLicenseRequest(const ValidateLicenseRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  license_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_license_id().empty()) {
    license_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.license_id_);
  }
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_id().empty()) {
    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_public_key().empty()) {
    public_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signature().empty()) {
    signature_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  if (from._internal_has_activated_at()) {
    activated_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.activated_at_);
  } else {
    activated_at_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ValidateLicenseRequest)
}

void ValidateLicenseRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ValidateLicenseRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  license_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  activated_at_ = nullptr;
}

ValidateLicenseRequest::~ValidateLicenseRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ValidateLicenseRequest)
  SharedDtor();
}

void ValidateLicenseRequest::SharedDtor() {
  license_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete activated_at_;
}

void ValidateLicenseRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ValidateLicenseRequest& ValidateLicenseRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ValidateLicenseRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ValidateLicenseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ValidateLicenseRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  license_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && activated_at_ != nullptr) {
    delete activated_at_;
  }
  activated_at_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ValidateLicenseRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string license_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_license_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ValidateLicenseRequest.license_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string request_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ValidateLicenseRequest.request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp activated_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_activated_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string public_key = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ValidateLicenseRequest.public_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes signature = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValidateLicenseRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ValidateLicenseRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string license_id = 1;
  if (this->license_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_license_id().data(), static_cast<int>(this->_internal_license_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ValidateLicenseRequest.license_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_license_id(), target);
  }

  // string request_id = 2;
  if (this->request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ValidateLicenseRequest.request_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_request_id(), target);
  }

  // .google.protobuf.Timestamp activated_at = 3;
  if (this->has_activated_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::activated_at(this), target, stream);
  }

  // string public_key = 4;
  if (this->public_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_public_key().data(), static_cast<int>(this->_internal_public_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ValidateLicenseRequest.public_key");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_public_key(), target);
  }

  // bytes signature = 5;
  if (this->signature().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ValidateLicenseRequest)
  return target;
}

size_t ValidateLicenseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ValidateLicenseRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string license_id = 1;
  if (this->license_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_license_id());
  }

  // string request_id = 2;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string public_key = 4;
  if (this->public_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_public_key());
  }

  // bytes signature = 5;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature());
  }

  // .google.protobuf.Timestamp activated_at = 3;
  if (this->has_activated_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *activated_at_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValidateLicenseRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ValidateLicenseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ValidateLicenseRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ValidateLicenseRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ValidateLicenseRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ValidateLicenseRequest)
    MergeFrom(*source);
  }
}

void ValidateLicenseRequest::MergeFrom(const ValidateLicenseRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ValidateLicenseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.license_id().size() > 0) {

    license_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.license_id_);
  }
  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.public_key().size() > 0) {

    public_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  if (from.signature().size() > 0) {

    signature_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  if (from.has_activated_at()) {
    _internal_mutable_activated_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_activated_at());
  }
}

void ValidateLicenseRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ValidateLicenseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidateLicenseRequest::CopyFrom(const ValidateLicenseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ValidateLicenseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidateLicenseRequest::IsInitialized() const {
  return true;
}

void ValidateLicenseRequest::InternalSwap(ValidateLicenseRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  license_id_.Swap(&other->license_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  public_key_.Swap(&other->public_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  signature_.Swap(&other->signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(activated_at_, other->activated_at_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidateLicenseRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ValidateLicenseResponse::InitAsDefaultInstance() {
  ::clarifai::api::_ValidateLicenseResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class ValidateLicenseResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const ValidateLicenseResponse* msg);
};

const ::clarifai::api::status::Status&
ValidateLicenseResponse::_Internal::status(const ValidateLicenseResponse* msg) {
  return *msg->status_;
}
void ValidateLicenseResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void ValidateLicenseResponse::clear_limits() {
  limits_.Clear();
}
ValidateLicenseResponse::ValidateLicenseResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ValidateLicenseResponse)
}
ValidateLicenseResponse::ValidateLicenseResponse(const ValidateLicenseResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      limits_(from.limits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_id().empty()) {
    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signature().empty()) {
    signature_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ValidateLicenseResponse)
}

void ValidateLicenseResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ValidateLicenseResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = nullptr;
}

ValidateLicenseResponse::~ValidateLicenseResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.ValidateLicenseResponse)
  SharedDtor();
}

void ValidateLicenseResponse::SharedDtor() {
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void ValidateLicenseResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ValidateLicenseResponse& ValidateLicenseResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ValidateLicenseResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ValidateLicenseResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ValidateLicenseResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  limits_.Clear();
  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ValidateLicenseResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string request_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ValidateLicenseResponse.request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.LicenseLimit limits = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_limits(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes signature = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValidateLicenseResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ValidateLicenseResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // string request_id = 2;
  if (this->request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ValidateLicenseResponse.request_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_request_id(), target);
  }

  // repeated .clarifai.api.LicenseLimit limits = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_limits_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_limits(i), target, stream);
  }

  // bytes signature = 4;
  if (this->signature().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ValidateLicenseResponse)
  return target;
}

size_t ValidateLicenseResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ValidateLicenseResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.LicenseLimit limits = 3;
  total_size += 1UL * this->_internal_limits_size();
  for (const auto& msg : this->limits_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string request_id = 2;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // bytes signature = 4;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature());
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValidateLicenseResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ValidateLicenseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ValidateLicenseResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ValidateLicenseResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ValidateLicenseResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ValidateLicenseResponse)
    MergeFrom(*source);
  }
}

void ValidateLicenseResponse::MergeFrom(const ValidateLicenseResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ValidateLicenseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  limits_.MergeFrom(from.limits_);
  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.signature().size() > 0) {

    signature_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void ValidateLicenseResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ValidateLicenseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidateLicenseResponse::CopyFrom(const ValidateLicenseResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ValidateLicenseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidateLicenseResponse::IsInitialized() const {
  return true;
}

void ValidateLicenseResponse::InternalSwap(ValidateLicenseResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  limits_.InternalSwap(&other->limits_);
  request_id_.Swap(&other->request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  signature_.Swap(&other->signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidateLicenseResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListLicensesRequest::InitAsDefaultInstance() {
  ::clarifai::api::_ListLicensesRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class ListLicensesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListLicensesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListLicensesRequest::_Internal::user_app_id(const ListLicensesRequest* msg) {
  return *msg->user_app_id_;
}
void ListLicensesRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListLicensesRequest::ListLicensesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ListLicensesRequest)
}
ListLicensesRequest::ListLicensesRequest(const ListLicensesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListLicensesRequest)
}

void ListLicensesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListLicensesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  user_app_id_ = nullptr;
}

ListLicensesRequest::~ListLicensesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListLicensesRequest)
  SharedDtor();
}

void ListLicensesRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListLicensesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListLicensesRequest& ListLicensesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListLicensesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ListLicensesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListLicensesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ListLicensesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListLicensesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListLicensesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListLicensesRequest)
  return target;
}

size_t ListLicensesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListLicensesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListLicensesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ListLicensesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListLicensesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListLicensesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ListLicensesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ListLicensesRequest)
    MergeFrom(*source);
  }
}

void ListLicensesRequest::MergeFrom(const ListLicensesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListLicensesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void ListLicensesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ListLicensesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListLicensesRequest::CopyFrom(const ListLicensesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListLicensesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListLicensesRequest::IsInitialized() const {
  return true;
}

void ListLicensesRequest::InternalSwap(ListLicensesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListLicensesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetLicenseRequest::InitAsDefaultInstance() {
  ::clarifai::api::_GetLicenseRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class GetLicenseRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetLicenseRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetLicenseRequest::_Internal::user_app_id(const GetLicenseRequest* msg) {
  return *msg->user_app_id_;
}
void GetLicenseRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetLicenseRequest::GetLicenseRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.GetLicenseRequest)
}
GetLicenseRequest::GetLicenseRequest(const GetLicenseRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  license_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_license_id().empty()) {
    license_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.license_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetLicenseRequest)
}

void GetLicenseRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetLicenseRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  license_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

GetLicenseRequest::~GetLicenseRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetLicenseRequest)
  SharedDtor();
}

void GetLicenseRequest::SharedDtor() {
  license_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetLicenseRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLicenseRequest& GetLicenseRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetLicenseRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void GetLicenseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetLicenseRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  license_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetLicenseRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string license_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_license_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetLicenseRequest.license_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLicenseRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetLicenseRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string license_id = 2;
  if (this->license_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_license_id().data(), static_cast<int>(this->_internal_license_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetLicenseRequest.license_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_license_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetLicenseRequest)
  return target;
}

size_t GetLicenseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetLicenseRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string license_id = 2;
  if (this->license_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_license_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLicenseRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.GetLicenseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLicenseRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetLicenseRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.GetLicenseRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.GetLicenseRequest)
    MergeFrom(*source);
  }
}

void GetLicenseRequest::MergeFrom(const GetLicenseRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetLicenseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.license_id().size() > 0) {

    license_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.license_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void GetLicenseRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.GetLicenseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLicenseRequest::CopyFrom(const GetLicenseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetLicenseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLicenseRequest::IsInitialized() const {
  return true;
}

void GetLicenseRequest::InternalSwap(GetLicenseRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  license_id_.Swap(&other->license_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLicenseRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SingleLicenseResponse::InitAsDefaultInstance() {
  ::clarifai::api::_SingleLicenseResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
  ::clarifai::api::_SingleLicenseResponse_default_instance_._instance.get_mutable()->license_ = const_cast< ::clarifai::api::License*>(
      ::clarifai::api::License::internal_default_instance());
}
class SingleLicenseResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleLicenseResponse* msg);
  static const ::clarifai::api::License& license(const SingleLicenseResponse* msg);
};

const ::clarifai::api::status::Status&
SingleLicenseResponse::_Internal::status(const SingleLicenseResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::License&
SingleLicenseResponse::_Internal::license(const SingleLicenseResponse* msg) {
  return *msg->license_;
}
void SingleLicenseResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleLicenseResponse::clear_license() {
  if (GetArenaNoVirtual() == nullptr && license_ != nullptr) {
    delete license_;
  }
  license_ = nullptr;
}
SingleLicenseResponse::SingleLicenseResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.SingleLicenseResponse)
}
SingleLicenseResponse::SingleLicenseResponse(const SingleLicenseResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_license()) {
    license_ = new ::clarifai::api::License(*from.license_);
  } else {
    license_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleLicenseResponse)
}

void SingleLicenseResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SingleLicenseResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&license_) -
      reinterpret_cast<char*>(&status_)) + sizeof(license_));
}

SingleLicenseResponse::~SingleLicenseResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleLicenseResponse)
  SharedDtor();
}

void SingleLicenseResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete license_;
}

void SingleLicenseResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleLicenseResponse& SingleLicenseResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleLicenseResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void SingleLicenseResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleLicenseResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && license_ != nullptr) {
    delete license_;
  }
  license_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SingleLicenseResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.License license = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_license(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleLicenseResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleLicenseResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.License license = 2;
  if (this->has_license()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::license(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleLicenseResponse)
  return target;
}

size_t SingleLicenseResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleLicenseResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.License license = 2;
  if (this->has_license()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *license_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleLicenseResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.SingleLicenseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleLicenseResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleLicenseResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.SingleLicenseResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.SingleLicenseResponse)
    MergeFrom(*source);
  }
}

void SingleLicenseResponse::MergeFrom(const SingleLicenseResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleLicenseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.has_license()) {
    _internal_mutable_license()->::clarifai::api::License::MergeFrom(from._internal_license());
  }
}

void SingleLicenseResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.SingleLicenseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleLicenseResponse::CopyFrom(const SingleLicenseResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleLicenseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleLicenseResponse::IsInitialized() const {
  return true;
}

void SingleLicenseResponse::InternalSwap(SingleLicenseResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(license_, other->license_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleLicenseResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultipleLicensesResponse::InitAsDefaultInstance() {
  ::clarifai::api::_MultipleLicensesResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class MultipleLicensesResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultipleLicensesResponse* msg);
};

const ::clarifai::api::status::Status&
MultipleLicensesResponse::_Internal::status(const MultipleLicensesResponse* msg) {
  return *msg->status_;
}
void MultipleLicensesResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultipleLicensesResponse::clear_licenses() {
  licenses_.Clear();
}
MultipleLicensesResponse::MultipleLicensesResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MultipleLicensesResponse)
}
MultipleLicensesResponse::MultipleLicensesResponse(const MultipleLicensesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      licenses_(from.licenses_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultipleLicensesResponse)
}

void MultipleLicensesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultipleLicensesResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

MultipleLicensesResponse::~MultipleLicensesResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultipleLicensesResponse)
  SharedDtor();
}

void MultipleLicensesResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void MultipleLicensesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultipleLicensesResponse& MultipleLicensesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultipleLicensesResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultipleLicensesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultipleLicensesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  licenses_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultipleLicensesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.License licenses = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_licenses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultipleLicensesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultipleLicensesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.License licenses = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_licenses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_licenses(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultipleLicensesResponse)
  return target;
}

size_t MultipleLicensesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultipleLicensesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.License licenses = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_licenses_size();
  for (const auto& msg : this->licenses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultipleLicensesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MultipleLicensesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultipleLicensesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultipleLicensesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MultipleLicensesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MultipleLicensesResponse)
    MergeFrom(*source);
  }
}

void MultipleLicensesResponse::MergeFrom(const MultipleLicensesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultipleLicensesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  licenses_.MergeFrom(from.licenses_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void MultipleLicensesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MultipleLicensesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultipleLicensesResponse::CopyFrom(const MultipleLicensesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultipleLicensesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultipleLicensesResponse::IsInitialized() const {
  return true;
}

void MultipleLicensesResponse::InternalSwap(MultipleLicensesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  licenses_.InternalSwap(&other->licenses_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultipleLicensesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetModelRequest::InitAsDefaultInstance() {
  ::clarifai::api::_GetModelRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class GetModelRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetModelRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetModelRequest::_Internal::user_app_id(const GetModelRequest* msg) {
  return *msg->user_app_id_;
}
void GetModelRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetModelRequest::GetModelRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.GetModelRequest)
}
GetModelRequest::GetModelRequest(const GetModelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_id().empty()) {
    model_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_id_);
  }
  version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version_id().empty()) {
    version_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_id_);
  }
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_language().empty()) {
    language_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  trained_before_ = from.trained_before_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetModelRequest)
}

void GetModelRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetModelRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trained_before_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(trained_before_));
}

GetModelRequest::~GetModelRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetModelRequest)
  SharedDtor();
}

void GetModelRequest::SharedDtor() {
  model_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetModelRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetModelRequest& GetModelRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetModelRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void GetModelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetModelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  trained_before_ = false;
  _internal_metadata_.Clear();
}

const char* GetModelRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetModelRequest.model_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_version_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetModelRequest.version_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string language = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetModelRequest.language"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool trained_before = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          trained_before_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetModelRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetModelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string model_id = 2;
  if (this->model_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetModelRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  // string version_id = 3;
  if (this->version_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version_id().data(), static_cast<int>(this->_internal_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetModelRequest.version_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_version_id(), target);
  }

  // string language = 4;
  if (this->language().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetModelRequest.language");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_language(), target);
  }

  // bool trained_before = 5;
  if (this->trained_before() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_trained_before(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetModelRequest)
  return target;
}

size_t GetModelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetModelRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model_id = 2;
  if (this->model_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string version_id = 3;
  if (this->version_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version_id());
  }

  // string language = 4;
  if (this->language().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // bool trained_before = 5;
  if (this->trained_before() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetModelRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.GetModelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetModelRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetModelRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.GetModelRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.GetModelRequest)
    MergeFrom(*source);
  }
}

void GetModelRequest::MergeFrom(const GetModelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetModelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.model_id().size() > 0) {

    model_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_id_);
  }
  if (from.version_id().size() > 0) {

    version_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_id_);
  }
  if (from.language().size() > 0) {

    language_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.trained_before() != 0) {
    _internal_set_trained_before(from._internal_trained_before());
  }
}

void GetModelRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.GetModelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetModelRequest::CopyFrom(const GetModelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetModelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetModelRequest::IsInitialized() const {
  return true;
}

void GetModelRequest::InternalSwap(GetModelRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  model_id_.Swap(&other->model_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_id_.Swap(&other->version_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  language_.Swap(&other->language_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
  swap(trained_before_, other->trained_before_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetModelRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetModelOutputInfoRequest::InitAsDefaultInstance() {
  ::clarifai::api::_GetModelOutputInfoRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class GetModelOutputInfoRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetModelOutputInfoRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetModelOutputInfoRequest::_Internal::user_app_id(const GetModelOutputInfoRequest* msg) {
  return *msg->user_app_id_;
}
void GetModelOutputInfoRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetModelOutputInfoRequest::GetModelOutputInfoRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.GetModelOutputInfoRequest)
}
GetModelOutputInfoRequest::GetModelOutputInfoRequest(const GetModelOutputInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_id().empty()) {
    model_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_id_);
  }
  version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version_id().empty()) {
    version_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetModelOutputInfoRequest)
}

void GetModelOutputInfoRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetModelOutputInfoRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

GetModelOutputInfoRequest::~GetModelOutputInfoRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetModelOutputInfoRequest)
  SharedDtor();
}

void GetModelOutputInfoRequest::SharedDtor() {
  model_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetModelOutputInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetModelOutputInfoRequest& GetModelOutputInfoRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetModelOutputInfoRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void GetModelOutputInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetModelOutputInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetModelOutputInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetModelOutputInfoRequest.model_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_version_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetModelOutputInfoRequest.version_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetModelOutputInfoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetModelOutputInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string model_id = 2;
  if (this->model_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetModelOutputInfoRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  // string version_id = 3;
  if (this->version_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version_id().data(), static_cast<int>(this->_internal_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetModelOutputInfoRequest.version_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_version_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetModelOutputInfoRequest)
  return target;
}

size_t GetModelOutputInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetModelOutputInfoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model_id = 2;
  if (this->model_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string version_id = 3;
  if (this->version_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetModelOutputInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.GetModelOutputInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetModelOutputInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetModelOutputInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.GetModelOutputInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.GetModelOutputInfoRequest)
    MergeFrom(*source);
  }
}

void GetModelOutputInfoRequest::MergeFrom(const GetModelOutputInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetModelOutputInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.model_id().size() > 0) {

    model_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_id_);
  }
  if (from.version_id().size() > 0) {

    version_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void GetModelOutputInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.GetModelOutputInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetModelOutputInfoRequest::CopyFrom(const GetModelOutputInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetModelOutputInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetModelOutputInfoRequest::IsInitialized() const {
  return true;
}

void GetModelOutputInfoRequest::InternalSwap(GetModelOutputInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  model_id_.Swap(&other->model_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_id_.Swap(&other->version_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetModelOutputInfoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListModelsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_ListModelsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class ListModelsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListModelsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListModelsRequest::_Internal::user_app_id(const ListModelsRequest* msg) {
  return *msg->user_app_id_;
}
void ListModelsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListModelsRequest::ListModelsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ListModelsRequest)
}
ListModelsRequest::ListModelsRequest(const ListModelsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListModelsRequest)
}

void ListModelsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListModelsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

ListModelsRequest::~ListModelsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListModelsRequest)
  SharedDtor();
}

void ListModelsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListModelsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListModelsRequest& ListModelsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListModelsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ListModelsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListModelsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear();
}

const char* ListModelsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string ids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListModelsRequest.ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListModelsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListModelsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // uint32 page = 2;
  if (this->page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  // repeated string ids = 4;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListModelsRequest.ids");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListModelsRequest)
  return target;
}

size_t ListModelsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListModelsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ids_.size());
  for (int i = 0, n = ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ids_.Get(i));
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 2;
  if (this->page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->per_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_per_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListModelsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ListModelsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListModelsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListModelsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ListModelsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ListModelsRequest)
    MergeFrom(*source);
  }
}

void ListModelsRequest::MergeFrom(const ListModelsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListModelsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from.per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
}

void ListModelsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ListModelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListModelsRequest::CopyFrom(const ListModelsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListModelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListModelsRequest::IsInitialized() const {
  return true;
}

void ListModelsRequest::InternalSwap(ListModelsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
  swap(user_app_id_, other->user_app_id_);
  swap(page_, other->page_);
  swap(per_page_, other->per_page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListModelsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostModelsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostModelsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
  ::clarifai::api::_PostModelsRequest_default_instance_._instance.get_mutable()->model_ = const_cast< ::clarifai::api::Model*>(
      ::clarifai::api::Model::internal_default_instance());
}
class PostModelsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostModelsRequest* msg);
  static const ::clarifai::api::Model& model(const PostModelsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostModelsRequest::_Internal::user_app_id(const PostModelsRequest* msg) {
  return *msg->user_app_id_;
}
const ::clarifai::api::Model&
PostModelsRequest::_Internal::model(const PostModelsRequest* msg) {
  return *msg->model_;
}
void PostModelsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostModelsRequest::clear_model() {
  if (GetArenaNoVirtual() == nullptr && model_ != nullptr) {
    delete model_;
  }
  model_ = nullptr;
}
void PostModelsRequest::clear_models() {
  models_.Clear();
}
PostModelsRequest::PostModelsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostModelsRequest)
}
PostModelsRequest::PostModelsRequest(const PostModelsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      models_(from.models_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  if (from._internal_has_model()) {
    model_ = new ::clarifai::api::Model(*from.model_);
  } else {
    model_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostModelsRequest)
}

void PostModelsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostModelsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&model_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(model_));
}

PostModelsRequest::~PostModelsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostModelsRequest)
  SharedDtor();
}

void PostModelsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
  if (this != internal_default_instance()) delete model_;
}

void PostModelsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostModelsRequest& PostModelsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostModelsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostModelsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostModelsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  models_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && model_ != nullptr) {
    delete model_;
  }
  model_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostModelsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Model model = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_model(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Model models = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_models(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostModelsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostModelsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // .clarifai.api.Model model = 2 [deprecated = true];
  if (this->has_model()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::model(this), target, stream);
  }

  // repeated .clarifai.api.Model models = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_models_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_models(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostModelsRequest)
  return target;
}

size_t PostModelsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostModelsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Model models = 3;
  total_size += 1UL * this->_internal_models_size();
  for (const auto& msg : this->models_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // .clarifai.api.Model model = 2 [deprecated = true];
  if (this->has_model()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *model_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostModelsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostModelsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostModelsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostModelsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostModelsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostModelsRequest)
    MergeFrom(*source);
  }
}

void PostModelsRequest::MergeFrom(const PostModelsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostModelsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  models_.MergeFrom(from.models_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.has_model()) {
    _internal_mutable_model()->::clarifai::api::Model::MergeFrom(from._internal_model());
  }
}

void PostModelsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostModelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostModelsRequest::CopyFrom(const PostModelsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostModelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostModelsRequest::IsInitialized() const {
  return true;
}

void PostModelsRequest::InternalSwap(PostModelsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  models_.InternalSwap(&other->models_);
  swap(user_app_id_, other->user_app_id_);
  swap(model_, other->model_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostModelsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PatchModelsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PatchModelsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PatchModelsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchModelsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchModelsRequest::_Internal::user_app_id(const PatchModelsRequest* msg) {
  return *msg->user_app_id_;
}
void PatchModelsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PatchModelsRequest::clear_models() {
  models_.Clear();
}
PatchModelsRequest::PatchModelsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PatchModelsRequest)
}
PatchModelsRequest::PatchModelsRequest(const PatchModelsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      models_(from.models_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action().empty()) {
    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchModelsRequest)
}

void PatchModelsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PatchModelsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

PatchModelsRequest::~PatchModelsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchModelsRequest)
  SharedDtor();
}

void PatchModelsRequest::SharedDtor() {
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PatchModelsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PatchModelsRequest& PatchModelsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PatchModelsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PatchModelsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchModelsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  models_.Clear();
  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PatchModelsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Model models = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_models(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchModelsRequest.action"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PatchModelsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchModelsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Model models = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_models_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_models(i), target, stream);
  }

  // string action = 3;
  if (this->action().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchModelsRequest.action");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchModelsRequest)
  return target;
}

size_t PatchModelsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchModelsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Model models = 2;
  total_size += 1UL * this->_internal_models_size();
  for (const auto& msg : this->models_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string action = 3;
  if (this->action().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PatchModelsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PatchModelsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PatchModelsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PatchModelsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PatchModelsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PatchModelsRequest)
    MergeFrom(*source);
  }
}

void PatchModelsRequest::MergeFrom(const PatchModelsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchModelsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  models_.MergeFrom(from.models_);
  if (from.action().size() > 0) {

    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void PatchModelsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PatchModelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatchModelsRequest::CopyFrom(const PatchModelsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchModelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchModelsRequest::IsInitialized() const {
  return true;
}

void PatchModelsRequest::InternalSwap(PatchModelsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  models_.InternalSwap(&other->models_);
  action_.Swap(&other->action_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchModelsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteModelRequest::InitAsDefaultInstance() {
  ::clarifai::api::_DeleteModelRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class DeleteModelRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteModelRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteModelRequest::_Internal::user_app_id(const DeleteModelRequest* msg) {
  return *msg->user_app_id_;
}
void DeleteModelRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
DeleteModelRequest::DeleteModelRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.DeleteModelRequest)
}
DeleteModelRequest::DeleteModelRequest(const DeleteModelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_id().empty()) {
    model_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteModelRequest)
}

void DeleteModelRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteModelRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

DeleteModelRequest::~DeleteModelRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteModelRequest)
  SharedDtor();
}

void DeleteModelRequest::SharedDtor() {
  model_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void DeleteModelRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteModelRequest& DeleteModelRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteModelRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void DeleteModelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteModelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* DeleteModelRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteModelRequest.model_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteModelRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteModelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string model_id = 2;
  if (this->model_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteModelRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteModelRequest)
  return target;
}

size_t DeleteModelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteModelRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model_id = 2;
  if (this->model_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteModelRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.DeleteModelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteModelRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteModelRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.DeleteModelRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.DeleteModelRequest)
    MergeFrom(*source);
  }
}

void DeleteModelRequest::MergeFrom(const DeleteModelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteModelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.model_id().size() > 0) {

    model_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void DeleteModelRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.DeleteModelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteModelRequest::CopyFrom(const DeleteModelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteModelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteModelRequest::IsInitialized() const {
  return true;
}

void DeleteModelRequest::InternalSwap(DeleteModelRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  model_id_.Swap(&other->model_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteModelRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteModelsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_DeleteModelsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class DeleteModelsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteModelsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteModelsRequest::_Internal::user_app_id(const DeleteModelsRequest* msg) {
  return *msg->user_app_id_;
}
void DeleteModelsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
DeleteModelsRequest::DeleteModelsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.DeleteModelsRequest)
}
DeleteModelsRequest::DeleteModelsRequest(const DeleteModelsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  delete_all_ = from.delete_all_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteModelsRequest)
}

void DeleteModelsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteModelsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delete_all_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(delete_all_));
}

DeleteModelsRequest::~DeleteModelsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteModelsRequest)
  SharedDtor();
}

void DeleteModelsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void DeleteModelsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteModelsRequest& DeleteModelsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteModelsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void DeleteModelsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteModelsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  delete_all_ = false;
  _internal_metadata_.Clear();
}

const char* DeleteModelsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteModelsRequest.ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bool delete_all = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          delete_all_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteModelsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteModelsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated string ids = 2;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteModelsRequest.ids");
    target = stream->WriteString(2, s, target);
  }

  // bool delete_all = 3;
  if (this->delete_all() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_delete_all(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteModelsRequest)
  return target;
}

size_t DeleteModelsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteModelsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ids_.size());
  for (int i = 0, n = ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ids_.Get(i));
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // bool delete_all = 3;
  if (this->delete_all() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteModelsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.DeleteModelsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteModelsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteModelsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.DeleteModelsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.DeleteModelsRequest)
    MergeFrom(*source);
  }
}

void DeleteModelsRequest::MergeFrom(const DeleteModelsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteModelsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.delete_all() != 0) {
    _internal_set_delete_all(from._internal_delete_all());
  }
}

void DeleteModelsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.DeleteModelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteModelsRequest::CopyFrom(const DeleteModelsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteModelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteModelsRequest::IsInitialized() const {
  return true;
}

void DeleteModelsRequest::InternalSwap(DeleteModelsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
  swap(user_app_id_, other->user_app_id_);
  swap(delete_all_, other->delete_all_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteModelsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostModelsSearchesRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostModelsSearchesRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
  ::clarifai::api::_PostModelsSearchesRequest_default_instance_._instance.get_mutable()->model_query_ = const_cast< ::clarifai::api::ModelQuery*>(
      ::clarifai::api::ModelQuery::internal_default_instance());
  ::clarifai::api::_PostModelsSearchesRequest_default_instance_._instance.get_mutable()->pagination_ = const_cast< ::clarifai::api::Pagination*>(
      ::clarifai::api::Pagination::internal_default_instance());
}
class PostModelsSearchesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostModelsSearchesRequest* msg);
  static const ::clarifai::api::ModelQuery& model_query(const PostModelsSearchesRequest* msg);
  static const ::clarifai::api::Pagination& pagination(const PostModelsSearchesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostModelsSearchesRequest::_Internal::user_app_id(const PostModelsSearchesRequest* msg) {
  return *msg->user_app_id_;
}
const ::clarifai::api::ModelQuery&
PostModelsSearchesRequest::_Internal::model_query(const PostModelsSearchesRequest* msg) {
  return *msg->model_query_;
}
const ::clarifai::api::Pagination&
PostModelsSearchesRequest::_Internal::pagination(const PostModelsSearchesRequest* msg) {
  return *msg->pagination_;
}
void PostModelsSearchesRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostModelsSearchesRequest::clear_model_query() {
  if (GetArenaNoVirtual() == nullptr && model_query_ != nullptr) {
    delete model_query_;
  }
  model_query_ = nullptr;
}
PostModelsSearchesRequest::PostModelsSearchesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostModelsSearchesRequest)
}
PostModelsSearchesRequest::PostModelsSearchesRequest(const PostModelsSearchesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  if (from._internal_has_model_query()) {
    model_query_ = new ::clarifai::api::ModelQuery(*from.model_query_);
  } else {
    model_query_ = nullptr;
  }
  if (from._internal_has_pagination()) {
    pagination_ = new ::clarifai::api::Pagination(*from.pagination_);
  } else {
    pagination_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostModelsSearchesRequest)
}

void PostModelsSearchesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostModelsSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pagination_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(pagination_));
}

PostModelsSearchesRequest::~PostModelsSearchesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostModelsSearchesRequest)
  SharedDtor();
}

void PostModelsSearchesRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
  if (this != internal_default_instance()) delete model_query_;
  if (this != internal_default_instance()) delete pagination_;
}

void PostModelsSearchesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostModelsSearchesRequest& PostModelsSearchesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostModelsSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostModelsSearchesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostModelsSearchesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && model_query_ != nullptr) {
    delete model_query_;
  }
  model_query_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostModelsSearchesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.ModelQuery model_query = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_query(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Pagination pagination = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostModelsSearchesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostModelsSearchesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // .clarifai.api.ModelQuery model_query = 2;
  if (this->has_model_query()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::model_query(this), target, stream);
  }

  // .clarifai.api.Pagination pagination = 3;
  if (this->has_pagination()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pagination(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostModelsSearchesRequest)
  return target;
}

size_t PostModelsSearchesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostModelsSearchesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // .clarifai.api.ModelQuery model_query = 2;
  if (this->has_model_query()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *model_query_);
  }

  // .clarifai.api.Pagination pagination = 3;
  if (this->has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pagination_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostModelsSearchesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostModelsSearchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostModelsSearchesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostModelsSearchesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostModelsSearchesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostModelsSearchesRequest)
    MergeFrom(*source);
  }
}

void PostModelsSearchesRequest::MergeFrom(const PostModelsSearchesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostModelsSearchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.has_model_query()) {
    _internal_mutable_model_query()->::clarifai::api::ModelQuery::MergeFrom(from._internal_model_query());
  }
  if (from.has_pagination()) {
    _internal_mutable_pagination()->::clarifai::api::Pagination::MergeFrom(from._internal_pagination());
  }
}

void PostModelsSearchesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostModelsSearchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostModelsSearchesRequest::CopyFrom(const PostModelsSearchesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostModelsSearchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostModelsSearchesRequest::IsInitialized() const {
  return true;
}

void PostModelsSearchesRequest::InternalSwap(PostModelsSearchesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_app_id_, other->user_app_id_);
  swap(model_query_, other->model_query_);
  swap(pagination_, other->pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostModelsSearchesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SingleModelResponse::InitAsDefaultInstance() {
  ::clarifai::api::_SingleModelResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
  ::clarifai::api::_SingleModelResponse_default_instance_._instance.get_mutable()->model_ = const_cast< ::clarifai::api::Model*>(
      ::clarifai::api::Model::internal_default_instance());
}
class SingleModelResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleModelResponse* msg);
  static const ::clarifai::api::Model& model(const SingleModelResponse* msg);
};

const ::clarifai::api::status::Status&
SingleModelResponse::_Internal::status(const SingleModelResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::Model&
SingleModelResponse::_Internal::model(const SingleModelResponse* msg) {
  return *msg->model_;
}
void SingleModelResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleModelResponse::clear_model() {
  if (GetArenaNoVirtual() == nullptr && model_ != nullptr) {
    delete model_;
  }
  model_ = nullptr;
}
SingleModelResponse::SingleModelResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.SingleModelResponse)
}
SingleModelResponse::SingleModelResponse(const SingleModelResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_model()) {
    model_ = new ::clarifai::api::Model(*from.model_);
  } else {
    model_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleModelResponse)
}

void SingleModelResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SingleModelResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&model_) -
      reinterpret_cast<char*>(&status_)) + sizeof(model_));
}

SingleModelResponse::~SingleModelResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleModelResponse)
  SharedDtor();
}

void SingleModelResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete model_;
}

void SingleModelResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleModelResponse& SingleModelResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleModelResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void SingleModelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleModelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && model_ != nullptr) {
    delete model_;
  }
  model_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SingleModelResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Model model = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_model(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleModelResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleModelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.Model model = 2;
  if (this->has_model()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::model(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleModelResponse)
  return target;
}

size_t SingleModelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleModelResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.Model model = 2;
  if (this->has_model()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *model_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleModelResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.SingleModelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleModelResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleModelResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.SingleModelResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.SingleModelResponse)
    MergeFrom(*source);
  }
}

void SingleModelResponse::MergeFrom(const SingleModelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleModelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.has_model()) {
    _internal_mutable_model()->::clarifai::api::Model::MergeFrom(from._internal_model());
  }
}

void SingleModelResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.SingleModelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleModelResponse::CopyFrom(const SingleModelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleModelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleModelResponse::IsInitialized() const {
  return true;
}

void SingleModelResponse::InternalSwap(SingleModelResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(model_, other->model_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleModelResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiModelResponse::InitAsDefaultInstance() {
  ::clarifai::api::_MultiModelResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class MultiModelResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiModelResponse* msg);
};

const ::clarifai::api::status::Status&
MultiModelResponse::_Internal::status(const MultiModelResponse* msg) {
  return *msg->status_;
}
void MultiModelResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiModelResponse::clear_models() {
  models_.Clear();
}
MultiModelResponse::MultiModelResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MultiModelResponse)
}
MultiModelResponse::MultiModelResponse(const MultiModelResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      models_(from.models_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiModelResponse)
}

void MultiModelResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiModelResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

MultiModelResponse::~MultiModelResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiModelResponse)
  SharedDtor();
}

void MultiModelResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void MultiModelResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiModelResponse& MultiModelResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiModelResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiModelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiModelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  models_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultiModelResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Model models = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_models(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiModelResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiModelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.Model models = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_models_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_models(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiModelResponse)
  return target;
}

size_t MultiModelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiModelResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Model models = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_models_size();
  for (const auto& msg : this->models_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiModelResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MultiModelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiModelResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiModelResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MultiModelResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MultiModelResponse)
    MergeFrom(*source);
  }
}

void MultiModelResponse::MergeFrom(const MultiModelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiModelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  models_.MergeFrom(from.models_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void MultiModelResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MultiModelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiModelResponse::CopyFrom(const MultiModelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiModelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiModelResponse::IsInitialized() const {
  return true;
}

void MultiModelResponse::InternalSwap(MultiModelResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  models_.InternalSwap(&other->models_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiModelResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetModelVersionRequest::InitAsDefaultInstance() {
  ::clarifai::api::_GetModelVersionRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class GetModelVersionRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetModelVersionRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetModelVersionRequest::_Internal::user_app_id(const GetModelVersionRequest* msg) {
  return *msg->user_app_id_;
}
void GetModelVersionRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetModelVersionRequest::GetModelVersionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.GetModelVersionRequest)
}
GetModelVersionRequest::GetModelVersionRequest(const GetModelVersionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_id().empty()) {
    model_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_id_);
  }
  version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version_id().empty()) {
    version_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetModelVersionRequest)
}

void GetModelVersionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetModelVersionRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

GetModelVersionRequest::~GetModelVersionRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetModelVersionRequest)
  SharedDtor();
}

void GetModelVersionRequest::SharedDtor() {
  model_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetModelVersionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetModelVersionRequest& GetModelVersionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetModelVersionRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void GetModelVersionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetModelVersionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetModelVersionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetModelVersionRequest.model_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_version_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetModelVersionRequest.version_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetModelVersionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetModelVersionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string model_id = 2;
  if (this->model_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetModelVersionRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  // string version_id = 3;
  if (this->version_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version_id().data(), static_cast<int>(this->_internal_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetModelVersionRequest.version_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_version_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetModelVersionRequest)
  return target;
}

size_t GetModelVersionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetModelVersionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model_id = 2;
  if (this->model_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string version_id = 3;
  if (this->version_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetModelVersionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.GetModelVersionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetModelVersionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetModelVersionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.GetModelVersionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.GetModelVersionRequest)
    MergeFrom(*source);
  }
}

void GetModelVersionRequest::MergeFrom(const GetModelVersionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetModelVersionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.model_id().size() > 0) {

    model_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_id_);
  }
  if (from.version_id().size() > 0) {

    version_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void GetModelVersionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.GetModelVersionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetModelVersionRequest::CopyFrom(const GetModelVersionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetModelVersionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetModelVersionRequest::IsInitialized() const {
  return true;
}

void GetModelVersionRequest::InternalSwap(GetModelVersionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  model_id_.Swap(&other->model_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_id_.Swap(&other->version_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetModelVersionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListModelVersionsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_ListModelVersionsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class ListModelVersionsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListModelVersionsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListModelVersionsRequest::_Internal::user_app_id(const ListModelVersionsRequest* msg) {
  return *msg->user_app_id_;
}
void ListModelVersionsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListModelVersionsRequest::ListModelVersionsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ListModelVersionsRequest)
}
ListModelVersionsRequest::ListModelVersionsRequest(const ListModelVersionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      concept_ids_(from.concept_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_id().empty()) {
    model_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListModelVersionsRequest)
}

void ListModelVersionsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListModelVersionsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

ListModelVersionsRequest::~ListModelVersionsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListModelVersionsRequest)
  SharedDtor();
}

void ListModelVersionsRequest::SharedDtor() {
  model_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListModelVersionsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListModelVersionsRequest& ListModelVersionsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListModelVersionsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ListModelVersionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListModelVersionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concept_ids_.Clear();
  model_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear();
}

const char* ListModelVersionsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListModelVersionsRequest.model_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 per_page = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string concept_ids = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_concept_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListModelVersionsRequest.concept_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListModelVersionsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListModelVersionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string model_id = 2;
  if (this->model_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListModelVersionsRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  // uint32 page = 3;
  if (this->page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_page(), target);
  }

  // uint32 per_page = 4;
  if (this->per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_per_page(), target);
  }

  // repeated string concept_ids = 5;
  for (int i = 0, n = this->_internal_concept_ids_size(); i < n; i++) {
    const auto& s = this->_internal_concept_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListModelVersionsRequest.concept_ids");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListModelVersionsRequest)
  return target;
}

size_t ListModelVersionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListModelVersionsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string concept_ids = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(concept_ids_.size());
  for (int i = 0, n = concept_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      concept_ids_.Get(i));
  }

  // string model_id = 2;
  if (this->model_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 3;
  if (this->page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page());
  }

  // uint32 per_page = 4;
  if (this->per_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_per_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListModelVersionsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ListModelVersionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListModelVersionsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListModelVersionsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ListModelVersionsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ListModelVersionsRequest)
    MergeFrom(*source);
  }
}

void ListModelVersionsRequest::MergeFrom(const ListModelVersionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListModelVersionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  concept_ids_.MergeFrom(from.concept_ids_);
  if (from.model_id().size() > 0) {

    model_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from.per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
}

void ListModelVersionsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ListModelVersionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListModelVersionsRequest::CopyFrom(const ListModelVersionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListModelVersionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListModelVersionsRequest::IsInitialized() const {
  return true;
}

void ListModelVersionsRequest::InternalSwap(ListModelVersionsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  concept_ids_.InternalSwap(&other->concept_ids_);
  model_id_.Swap(&other->model_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
  swap(page_, other->page_);
  swap(per_page_, other->per_page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListModelVersionsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteModelVersionRequest::InitAsDefaultInstance() {
  ::clarifai::api::_DeleteModelVersionRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class DeleteModelVersionRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteModelVersionRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteModelVersionRequest::_Internal::user_app_id(const DeleteModelVersionRequest* msg) {
  return *msg->user_app_id_;
}
void DeleteModelVersionRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
DeleteModelVersionRequest::DeleteModelVersionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.DeleteModelVersionRequest)
}
DeleteModelVersionRequest::DeleteModelVersionRequest(const DeleteModelVersionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_id().empty()) {
    model_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_id_);
  }
  version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version_id().empty()) {
    version_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteModelVersionRequest)
}

void DeleteModelVersionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteModelVersionRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

DeleteModelVersionRequest::~DeleteModelVersionRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteModelVersionRequest)
  SharedDtor();
}

void DeleteModelVersionRequest::SharedDtor() {
  model_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void DeleteModelVersionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteModelVersionRequest& DeleteModelVersionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteModelVersionRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void DeleteModelVersionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteModelVersionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* DeleteModelVersionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_model_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteModelVersionRequest.model_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_version_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteModelVersionRequest.version_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteModelVersionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteModelVersionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string model_id = 3;
  if (this->model_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteModelVersionRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_model_id(), target);
  }

  // string version_id = 4;
  if (this->version_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version_id().data(), static_cast<int>(this->_internal_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteModelVersionRequest.version_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_version_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteModelVersionRequest)
  return target;
}

size_t DeleteModelVersionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteModelVersionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model_id = 3;
  if (this->model_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string version_id = 4;
  if (this->version_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteModelVersionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.DeleteModelVersionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteModelVersionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteModelVersionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.DeleteModelVersionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.DeleteModelVersionRequest)
    MergeFrom(*source);
  }
}

void DeleteModelVersionRequest::MergeFrom(const DeleteModelVersionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteModelVersionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.model_id().size() > 0) {

    model_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_id_);
  }
  if (from.version_id().size() > 0) {

    version_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void DeleteModelVersionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.DeleteModelVersionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteModelVersionRequest::CopyFrom(const DeleteModelVersionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteModelVersionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteModelVersionRequest::IsInitialized() const {
  return true;
}

void DeleteModelVersionRequest::InternalSwap(DeleteModelVersionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  model_id_.Swap(&other->model_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_id_.Swap(&other->version_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteModelVersionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SingleModelVersionResponse::InitAsDefaultInstance() {
  ::clarifai::api::_SingleModelVersionResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
  ::clarifai::api::_SingleModelVersionResponse_default_instance_._instance.get_mutable()->model_version_ = const_cast< ::clarifai::api::ModelVersion*>(
      ::clarifai::api::ModelVersion::internal_default_instance());
}
class SingleModelVersionResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleModelVersionResponse* msg);
  static const ::clarifai::api::ModelVersion& model_version(const SingleModelVersionResponse* msg);
};

const ::clarifai::api::status::Status&
SingleModelVersionResponse::_Internal::status(const SingleModelVersionResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::ModelVersion&
SingleModelVersionResponse::_Internal::model_version(const SingleModelVersionResponse* msg) {
  return *msg->model_version_;
}
void SingleModelVersionResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleModelVersionResponse::clear_model_version() {
  if (GetArenaNoVirtual() == nullptr && model_version_ != nullptr) {
    delete model_version_;
  }
  model_version_ = nullptr;
}
SingleModelVersionResponse::SingleModelVersionResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.SingleModelVersionResponse)
}
SingleModelVersionResponse::SingleModelVersionResponse(const SingleModelVersionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_model_version()) {
    model_version_ = new ::clarifai::api::ModelVersion(*from.model_version_);
  } else {
    model_version_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleModelVersionResponse)
}

void SingleModelVersionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SingleModelVersionResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&model_version_) -
      reinterpret_cast<char*>(&status_)) + sizeof(model_version_));
}

SingleModelVersionResponse::~SingleModelVersionResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleModelVersionResponse)
  SharedDtor();
}

void SingleModelVersionResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete model_version_;
}

void SingleModelVersionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleModelVersionResponse& SingleModelVersionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleModelVersionResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void SingleModelVersionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleModelVersionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && model_version_ != nullptr) {
    delete model_version_;
  }
  model_version_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SingleModelVersionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.ModelVersion model_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_version(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleModelVersionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleModelVersionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.ModelVersion model_version = 2;
  if (this->has_model_version()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::model_version(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleModelVersionResponse)
  return target;
}

size_t SingleModelVersionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleModelVersionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.ModelVersion model_version = 2;
  if (this->has_model_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *model_version_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleModelVersionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.SingleModelVersionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleModelVersionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleModelVersionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.SingleModelVersionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.SingleModelVersionResponse)
    MergeFrom(*source);
  }
}

void SingleModelVersionResponse::MergeFrom(const SingleModelVersionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleModelVersionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.has_model_version()) {
    _internal_mutable_model_version()->::clarifai::api::ModelVersion::MergeFrom(from._internal_model_version());
  }
}

void SingleModelVersionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.SingleModelVersionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleModelVersionResponse::CopyFrom(const SingleModelVersionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleModelVersionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleModelVersionResponse::IsInitialized() const {
  return true;
}

void SingleModelVersionResponse::InternalSwap(SingleModelVersionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(model_version_, other->model_version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleModelVersionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiModelVersionResponse::InitAsDefaultInstance() {
  ::clarifai::api::_MultiModelVersionResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class MultiModelVersionResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiModelVersionResponse* msg);
};

const ::clarifai::api::status::Status&
MultiModelVersionResponse::_Internal::status(const MultiModelVersionResponse* msg) {
  return *msg->status_;
}
void MultiModelVersionResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiModelVersionResponse::clear_model_versions() {
  model_versions_.Clear();
}
MultiModelVersionResponse::MultiModelVersionResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MultiModelVersionResponse)
}
MultiModelVersionResponse::MultiModelVersionResponse(const MultiModelVersionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      model_versions_(from.model_versions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiModelVersionResponse)
}

void MultiModelVersionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiModelVersionResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

MultiModelVersionResponse::~MultiModelVersionResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiModelVersionResponse)
  SharedDtor();
}

void MultiModelVersionResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void MultiModelVersionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiModelVersionResponse& MultiModelVersionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiModelVersionResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiModelVersionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiModelVersionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_versions_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultiModelVersionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.ModelVersion model_versions = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_model_versions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiModelVersionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiModelVersionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.ModelVersion model_versions = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_model_versions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_model_versions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiModelVersionResponse)
  return target;
}

size_t MultiModelVersionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiModelVersionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ModelVersion model_versions = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_model_versions_size();
  for (const auto& msg : this->model_versions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiModelVersionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MultiModelVersionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiModelVersionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiModelVersionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MultiModelVersionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MultiModelVersionResponse)
    MergeFrom(*source);
  }
}

void MultiModelVersionResponse::MergeFrom(const MultiModelVersionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiModelVersionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  model_versions_.MergeFrom(from.model_versions_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void MultiModelVersionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MultiModelVersionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiModelVersionResponse::CopyFrom(const MultiModelVersionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiModelVersionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiModelVersionResponse::IsInitialized() const {
  return true;
}

void MultiModelVersionResponse::InternalSwap(MultiModelVersionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  model_versions_.InternalSwap(&other->model_versions_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiModelVersionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostModelVersionsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostModelVersionsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
  ::clarifai::api::_PostModelVersionsRequest_default_instance_._instance.get_mutable()->search_ = const_cast< ::clarifai::api::Search*>(
      ::clarifai::api::Search::internal_default_instance());
  ::clarifai::api::_PostModelVersionsRequest_default_instance_._instance.get_mutable()->train_search_ = const_cast< ::clarifai::api::Search*>(
      ::clarifai::api::Search::internal_default_instance());
  ::clarifai::api::_PostModelVersionsRequest_default_instance_._instance.get_mutable()->test_search_ = const_cast< ::clarifai::api::Search*>(
      ::clarifai::api::Search::internal_default_instance());
}
class PostModelVersionsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostModelVersionsRequest* msg);
  static const ::clarifai::api::Search& search(const PostModelVersionsRequest* msg);
  static const ::clarifai::api::Search& train_search(const PostModelVersionsRequest* msg);
  static const ::clarifai::api::Search& test_search(const PostModelVersionsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostModelVersionsRequest::_Internal::user_app_id(const PostModelVersionsRequest* msg) {
  return *msg->user_app_id_;
}
const ::clarifai::api::Search&
PostModelVersionsRequest::_Internal::search(const PostModelVersionsRequest* msg) {
  return *msg->search_;
}
const ::clarifai::api::Search&
PostModelVersionsRequest::_Internal::train_search(const PostModelVersionsRequest* msg) {
  return *msg->train_search_;
}
const ::clarifai::api::Search&
PostModelVersionsRequest::_Internal::test_search(const PostModelVersionsRequest* msg) {
  return *msg->test_search_;
}
void PostModelVersionsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostModelVersionsRequest::clear_model_versions() {
  model_versions_.Clear();
}
void PostModelVersionsRequest::clear_search() {
  if (GetArenaNoVirtual() == nullptr && search_ != nullptr) {
    delete search_;
  }
  search_ = nullptr;
}
void PostModelVersionsRequest::clear_train_search() {
  if (GetArenaNoVirtual() == nullptr && train_search_ != nullptr) {
    delete train_search_;
  }
  train_search_ = nullptr;
}
void PostModelVersionsRequest::clear_test_search() {
  if (GetArenaNoVirtual() == nullptr && test_search_ != nullptr) {
    delete test_search_;
  }
  test_search_ = nullptr;
}
PostModelVersionsRequest::PostModelVersionsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostModelVersionsRequest)
}
PostModelVersionsRequest::PostModelVersionsRequest(const PostModelVersionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      model_versions_(from.model_versions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_id().empty()) {
    model_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  if (from._internal_has_search()) {
    search_ = new ::clarifai::api::Search(*from.search_);
  } else {
    search_ = nullptr;
  }
  if (from._internal_has_train_search()) {
    train_search_ = new ::clarifai::api::Search(*from.train_search_);
  } else {
    train_search_ = nullptr;
  }
  if (from._internal_has_test_search()) {
    test_search_ = new ::clarifai::api::Search(*from.test_search_);
  } else {
    test_search_ = nullptr;
  }
  evaluate_after_training_ = from.evaluate_after_training_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostModelVersionsRequest)
}

void PostModelVersionsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostModelVersionsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&evaluate_after_training_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(evaluate_after_training_));
}

PostModelVersionsRequest::~PostModelVersionsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostModelVersionsRequest)
  SharedDtor();
}

void PostModelVersionsRequest::SharedDtor() {
  model_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
  if (this != internal_default_instance()) delete search_;
  if (this != internal_default_instance()) delete train_search_;
  if (this != internal_default_instance()) delete test_search_;
}

void PostModelVersionsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostModelVersionsRequest& PostModelVersionsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostModelVersionsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostModelVersionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostModelVersionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_versions_.Clear();
  model_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && search_ != nullptr) {
    delete search_;
  }
  search_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && train_search_ != nullptr) {
    delete train_search_;
  }
  train_search_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && test_search_ != nullptr) {
    delete test_search_;
  }
  test_search_ = nullptr;
  evaluate_after_training_ = false;
  _internal_metadata_.Clear();
}

const char* PostModelVersionsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostModelVersionsRequest.model_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.ModelVersion model_versions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_model_versions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Search search = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_search(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Search train_search = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_train_search(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Search test_search = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_test_search(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool evaluate_after_training = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          evaluate_after_training_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostModelVersionsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostModelVersionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string model_id = 2;
  if (this->model_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostModelVersionsRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  // repeated .clarifai.api.ModelVersion model_versions = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_model_versions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_model_versions(i), target, stream);
  }

  // .clarifai.api.Search search = 4 [deprecated = true];
  if (this->has_search()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::search(this), target, stream);
  }

  // .clarifai.api.Search train_search = 5;
  if (this->has_train_search()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::train_search(this), target, stream);
  }

  // .clarifai.api.Search test_search = 6;
  if (this->has_test_search()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::test_search(this), target, stream);
  }

  // bool evaluate_after_training = 7;
  if (this->evaluate_after_training() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_evaluate_after_training(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostModelVersionsRequest)
  return target;
}

size_t PostModelVersionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostModelVersionsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ModelVersion model_versions = 3;
  total_size += 1UL * this->_internal_model_versions_size();
  for (const auto& msg : this->model_versions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string model_id = 2;
  if (this->model_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // .clarifai.api.Search search = 4 [deprecated = true];
  if (this->has_search()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *search_);
  }

  // .clarifai.api.Search train_search = 5;
  if (this->has_train_search()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *train_search_);
  }

  // .clarifai.api.Search test_search = 6;
  if (this->has_test_search()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *test_search_);
  }

  // bool evaluate_after_training = 7;
  if (this->evaluate_after_training() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostModelVersionsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostModelVersionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostModelVersionsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostModelVersionsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostModelVersionsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostModelVersionsRequest)
    MergeFrom(*source);
  }
}

void PostModelVersionsRequest::MergeFrom(const PostModelVersionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostModelVersionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  model_versions_.MergeFrom(from.model_versions_);
  if (from.model_id().size() > 0) {

    model_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.has_search()) {
    _internal_mutable_search()->::clarifai::api::Search::MergeFrom(from._internal_search());
  }
  if (from.has_train_search()) {
    _internal_mutable_train_search()->::clarifai::api::Search::MergeFrom(from._internal_train_search());
  }
  if (from.has_test_search()) {
    _internal_mutable_test_search()->::clarifai::api::Search::MergeFrom(from._internal_test_search());
  }
  if (from.evaluate_after_training() != 0) {
    _internal_set_evaluate_after_training(from._internal_evaluate_after_training());
  }
}

void PostModelVersionsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostModelVersionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostModelVersionsRequest::CopyFrom(const PostModelVersionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostModelVersionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostModelVersionsRequest::IsInitialized() const {
  return true;
}

void PostModelVersionsRequest::InternalSwap(PostModelVersionsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  model_versions_.InternalSwap(&other->model_versions_);
  model_id_.Swap(&other->model_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
  swap(search_, other->search_);
  swap(train_search_, other->train_search_);
  swap(test_search_, other->test_search_);
  swap(evaluate_after_training_, other->evaluate_after_training_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostModelVersionsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostModelVersionMetricsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostModelVersionMetricsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
  ::clarifai::api::_PostModelVersionMetricsRequest_default_instance_._instance.get_mutable()->test_search_ = const_cast< ::clarifai::api::Search*>(
      ::clarifai::api::Search::internal_default_instance());
}
class PostModelVersionMetricsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostModelVersionMetricsRequest* msg);
  static const ::clarifai::api::Search& test_search(const PostModelVersionMetricsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostModelVersionMetricsRequest::_Internal::user_app_id(const PostModelVersionMetricsRequest* msg) {
  return *msg->user_app_id_;
}
const ::clarifai::api::Search&
PostModelVersionMetricsRequest::_Internal::test_search(const PostModelVersionMetricsRequest* msg) {
  return *msg->test_search_;
}
void PostModelVersionMetricsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostModelVersionMetricsRequest::clear_test_search() {
  if (GetArenaNoVirtual() == nullptr && test_search_ != nullptr) {
    delete test_search_;
  }
  test_search_ = nullptr;
}
PostModelVersionMetricsRequest::PostModelVersionMetricsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostModelVersionMetricsRequest)
}
PostModelVersionMetricsRequest::PostModelVersionMetricsRequest(const PostModelVersionMetricsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_id().empty()) {
    model_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_id_);
  }
  version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version_id().empty()) {
    version_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  if (from._internal_has_test_search()) {
    test_search_ = new ::clarifai::api::Search(*from.test_search_);
  } else {
    test_search_ = nullptr;
  }
  max_examples_ = from.max_examples_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostModelVersionMetricsRequest)
}

void PostModelVersionMetricsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostModelVersionMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_examples_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(max_examples_));
}

PostModelVersionMetricsRequest::~PostModelVersionMetricsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostModelVersionMetricsRequest)
  SharedDtor();
}

void PostModelVersionMetricsRequest::SharedDtor() {
  model_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
  if (this != internal_default_instance()) delete test_search_;
}

void PostModelVersionMetricsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostModelVersionMetricsRequest& PostModelVersionMetricsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostModelVersionMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostModelVersionMetricsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostModelVersionMetricsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && test_search_ != nullptr) {
    delete test_search_;
  }
  test_search_ = nullptr;
  max_examples_ = 0u;
  _internal_metadata_.Clear();
}

const char* PostModelVersionMetricsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostModelVersionMetricsRequest.model_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_version_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostModelVersionMetricsRequest.version_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 max_examples = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          max_examples_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Search test_search = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_test_search(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostModelVersionMetricsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostModelVersionMetricsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string model_id = 2;
  if (this->model_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostModelVersionMetricsRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  // string version_id = 3;
  if (this->version_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version_id().data(), static_cast<int>(this->_internal_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostModelVersionMetricsRequest.version_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_version_id(), target);
  }

  // uint32 max_examples = 4;
  if (this->max_examples() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_max_examples(), target);
  }

  // .clarifai.api.Search test_search = 5;
  if (this->has_test_search()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::test_search(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostModelVersionMetricsRequest)
  return target;
}

size_t PostModelVersionMetricsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostModelVersionMetricsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model_id = 2;
  if (this->model_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string version_id = 3;
  if (this->version_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // .clarifai.api.Search test_search = 5;
  if (this->has_test_search()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *test_search_);
  }

  // uint32 max_examples = 4;
  if (this->max_examples() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_examples());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostModelVersionMetricsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostModelVersionMetricsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostModelVersionMetricsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostModelVersionMetricsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostModelVersionMetricsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostModelVersionMetricsRequest)
    MergeFrom(*source);
  }
}

void PostModelVersionMetricsRequest::MergeFrom(const PostModelVersionMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostModelVersionMetricsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.model_id().size() > 0) {

    model_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_id_);
  }
  if (from.version_id().size() > 0) {

    version_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.has_test_search()) {
    _internal_mutable_test_search()->::clarifai::api::Search::MergeFrom(from._internal_test_search());
  }
  if (from.max_examples() != 0) {
    _internal_set_max_examples(from._internal_max_examples());
  }
}

void PostModelVersionMetricsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostModelVersionMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostModelVersionMetricsRequest::CopyFrom(const PostModelVersionMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostModelVersionMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostModelVersionMetricsRequest::IsInitialized() const {
  return true;
}

void PostModelVersionMetricsRequest::InternalSwap(PostModelVersionMetricsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  model_id_.Swap(&other->model_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_id_.Swap(&other->version_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
  swap(test_search_, other->test_search_);
  swap(max_examples_, other->max_examples_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostModelVersionMetricsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostModelVersionsDeploymentRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostModelVersionsDeploymentRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PostModelVersionsDeploymentRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostModelVersionsDeploymentRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostModelVersionsDeploymentRequest::_Internal::user_app_id(const PostModelVersionsDeploymentRequest* msg) {
  return *msg->user_app_id_;
}
void PostModelVersionsDeploymentRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
PostModelVersionsDeploymentRequest::PostModelVersionsDeploymentRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostModelVersionsDeploymentRequest)
}
PostModelVersionsDeploymentRequest::PostModelVersionsDeploymentRequest(const PostModelVersionsDeploymentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      version_ids_(from.version_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_id().empty()) {
    model_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostModelVersionsDeploymentRequest)
}

void PostModelVersionsDeploymentRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostModelVersionsDeploymentRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

PostModelVersionsDeploymentRequest::~PostModelVersionsDeploymentRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostModelVersionsDeploymentRequest)
  SharedDtor();
}

void PostModelVersionsDeploymentRequest::SharedDtor() {
  model_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostModelVersionsDeploymentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostModelVersionsDeploymentRequest& PostModelVersionsDeploymentRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostModelVersionsDeploymentRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostModelVersionsDeploymentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostModelVersionsDeploymentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_ids_.Clear();
  model_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostModelVersionsDeploymentRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostModelVersionsDeploymentRequest.model_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string version_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_version_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostModelVersionsDeploymentRequest.version_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostModelVersionsDeploymentRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostModelVersionsDeploymentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string model_id = 2;
  if (this->model_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostModelVersionsDeploymentRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  // repeated string version_ids = 3;
  for (int i = 0, n = this->_internal_version_ids_size(); i < n; i++) {
    const auto& s = this->_internal_version_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostModelVersionsDeploymentRequest.version_ids");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostModelVersionsDeploymentRequest)
  return target;
}

size_t PostModelVersionsDeploymentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostModelVersionsDeploymentRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string version_ids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(version_ids_.size());
  for (int i = 0, n = version_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      version_ids_.Get(i));
  }

  // string model_id = 2;
  if (this->model_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostModelVersionsDeploymentRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostModelVersionsDeploymentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostModelVersionsDeploymentRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostModelVersionsDeploymentRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostModelVersionsDeploymentRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostModelVersionsDeploymentRequest)
    MergeFrom(*source);
  }
}

void PostModelVersionsDeploymentRequest::MergeFrom(const PostModelVersionsDeploymentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostModelVersionsDeploymentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  version_ids_.MergeFrom(from.version_ids_);
  if (from.model_id().size() > 0) {

    model_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void PostModelVersionsDeploymentRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostModelVersionsDeploymentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostModelVersionsDeploymentRequest::CopyFrom(const PostModelVersionsDeploymentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostModelVersionsDeploymentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostModelVersionsDeploymentRequest::IsInitialized() const {
  return true;
}

void PostModelVersionsDeploymentRequest::InternalSwap(PostModelVersionsDeploymentRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  version_ids_.InternalSwap(&other->version_ids_);
  model_id_.Swap(&other->model_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostModelVersionsDeploymentRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteModelVersionsDeploymentRequest::InitAsDefaultInstance() {
  ::clarifai::api::_DeleteModelVersionsDeploymentRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class DeleteModelVersionsDeploymentRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteModelVersionsDeploymentRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteModelVersionsDeploymentRequest::_Internal::user_app_id(const DeleteModelVersionsDeploymentRequest* msg) {
  return *msg->user_app_id_;
}
void DeleteModelVersionsDeploymentRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
DeleteModelVersionsDeploymentRequest::DeleteModelVersionsDeploymentRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.DeleteModelVersionsDeploymentRequest)
}
DeleteModelVersionsDeploymentRequest::DeleteModelVersionsDeploymentRequest(const DeleteModelVersionsDeploymentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      version_ids_(from.version_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_id().empty()) {
    model_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteModelVersionsDeploymentRequest)
}

void DeleteModelVersionsDeploymentRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteModelVersionsDeploymentRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

DeleteModelVersionsDeploymentRequest::~DeleteModelVersionsDeploymentRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteModelVersionsDeploymentRequest)
  SharedDtor();
}

void DeleteModelVersionsDeploymentRequest::SharedDtor() {
  model_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void DeleteModelVersionsDeploymentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteModelVersionsDeploymentRequest& DeleteModelVersionsDeploymentRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteModelVersionsDeploymentRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void DeleteModelVersionsDeploymentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteModelVersionsDeploymentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_ids_.Clear();
  model_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* DeleteModelVersionsDeploymentRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteModelVersionsDeploymentRequest.model_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string version_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_version_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteModelVersionsDeploymentRequest.version_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteModelVersionsDeploymentRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteModelVersionsDeploymentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string model_id = 2;
  if (this->model_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteModelVersionsDeploymentRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  // repeated string version_ids = 3;
  for (int i = 0, n = this->_internal_version_ids_size(); i < n; i++) {
    const auto& s = this->_internal_version_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteModelVersionsDeploymentRequest.version_ids");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteModelVersionsDeploymentRequest)
  return target;
}

size_t DeleteModelVersionsDeploymentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteModelVersionsDeploymentRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string version_ids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(version_ids_.size());
  for (int i = 0, n = version_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      version_ids_.Get(i));
  }

  // string model_id = 2;
  if (this->model_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteModelVersionsDeploymentRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.DeleteModelVersionsDeploymentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteModelVersionsDeploymentRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteModelVersionsDeploymentRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.DeleteModelVersionsDeploymentRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.DeleteModelVersionsDeploymentRequest)
    MergeFrom(*source);
  }
}

void DeleteModelVersionsDeploymentRequest::MergeFrom(const DeleteModelVersionsDeploymentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteModelVersionsDeploymentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  version_ids_.MergeFrom(from.version_ids_);
  if (from.model_id().size() > 0) {

    model_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void DeleteModelVersionsDeploymentRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.DeleteModelVersionsDeploymentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteModelVersionsDeploymentRequest::CopyFrom(const DeleteModelVersionsDeploymentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteModelVersionsDeploymentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteModelVersionsDeploymentRequest::IsInitialized() const {
  return true;
}

void DeleteModelVersionsDeploymentRequest::InternalSwap(DeleteModelVersionsDeploymentRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  version_ids_.InternalSwap(&other->version_ids_);
  model_id_.Swap(&other->model_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteModelVersionsDeploymentRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetModelVersionMetricsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_GetModelVersionMetricsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
  ::clarifai::api::_GetModelVersionMetricsRequest_default_instance_._instance.get_mutable()->fields_ = const_cast< ::clarifai::api::FieldsValue*>(
      ::clarifai::api::FieldsValue::internal_default_instance());
}
class GetModelVersionMetricsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetModelVersionMetricsRequest* msg);
  static const ::clarifai::api::FieldsValue& fields(const GetModelVersionMetricsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetModelVersionMetricsRequest::_Internal::user_app_id(const GetModelVersionMetricsRequest* msg) {
  return *msg->user_app_id_;
}
const ::clarifai::api::FieldsValue&
GetModelVersionMetricsRequest::_Internal::fields(const GetModelVersionMetricsRequest* msg) {
  return *msg->fields_;
}
void GetModelVersionMetricsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void GetModelVersionMetricsRequest::clear_fields() {
  if (GetArenaNoVirtual() == nullptr && fields_ != nullptr) {
    delete fields_;
  }
  fields_ = nullptr;
}
GetModelVersionMetricsRequest::GetModelVersionMetricsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.GetModelVersionMetricsRequest)
}
GetModelVersionMetricsRequest::GetModelVersionMetricsRequest(const GetModelVersionMetricsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_id().empty()) {
    model_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_id_);
  }
  version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version_id().empty()) {
    version_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  if (from._internal_has_fields()) {
    fields_ = new ::clarifai::api::FieldsValue(*from.fields_);
  } else {
    fields_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetModelVersionMetricsRequest)
}

void GetModelVersionMetricsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetModelVersionMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fields_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(fields_));
}

GetModelVersionMetricsRequest::~GetModelVersionMetricsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetModelVersionMetricsRequest)
  SharedDtor();
}

void GetModelVersionMetricsRequest::SharedDtor() {
  model_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
  if (this != internal_default_instance()) delete fields_;
}

void GetModelVersionMetricsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetModelVersionMetricsRequest& GetModelVersionMetricsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetModelVersionMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void GetModelVersionMetricsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetModelVersionMetricsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && fields_ != nullptr) {
    delete fields_;
  }
  fields_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetModelVersionMetricsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetModelVersionMetricsRequest.model_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_version_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetModelVersionMetricsRequest.version_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.FieldsValue fields = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_fields(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetModelVersionMetricsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetModelVersionMetricsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string model_id = 2;
  if (this->model_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetModelVersionMetricsRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  // string version_id = 3;
  if (this->version_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version_id().data(), static_cast<int>(this->_internal_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetModelVersionMetricsRequest.version_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_version_id(), target);
  }

  // .clarifai.api.FieldsValue fields = 4;
  if (this->has_fields()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::fields(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetModelVersionMetricsRequest)
  return target;
}

size_t GetModelVersionMetricsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetModelVersionMetricsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model_id = 2;
  if (this->model_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string version_id = 3;
  if (this->version_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // .clarifai.api.FieldsValue fields = 4;
  if (this->has_fields()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fields_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetModelVersionMetricsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.GetModelVersionMetricsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetModelVersionMetricsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetModelVersionMetricsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.GetModelVersionMetricsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.GetModelVersionMetricsRequest)
    MergeFrom(*source);
  }
}

void GetModelVersionMetricsRequest::MergeFrom(const GetModelVersionMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetModelVersionMetricsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.model_id().size() > 0) {

    model_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_id_);
  }
  if (from.version_id().size() > 0) {

    version_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.has_fields()) {
    _internal_mutable_fields()->::clarifai::api::FieldsValue::MergeFrom(from._internal_fields());
  }
}

void GetModelVersionMetricsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.GetModelVersionMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetModelVersionMetricsRequest::CopyFrom(const GetModelVersionMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetModelVersionMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetModelVersionMetricsRequest::IsInitialized() const {
  return true;
}

void GetModelVersionMetricsRequest::InternalSwap(GetModelVersionMetricsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  model_id_.Swap(&other->model_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_id_.Swap(&other->version_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
  swap(fields_, other->fields_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetModelVersionMetricsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiOutputResponse::InitAsDefaultInstance() {
  ::clarifai::api::_MultiOutputResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class MultiOutputResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiOutputResponse* msg);
};

const ::clarifai::api::status::Status&
MultiOutputResponse::_Internal::status(const MultiOutputResponse* msg) {
  return *msg->status_;
}
void MultiOutputResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiOutputResponse::clear_outputs() {
  outputs_.Clear();
}
MultiOutputResponse::MultiOutputResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MultiOutputResponse)
}
MultiOutputResponse::MultiOutputResponse(const MultiOutputResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      outputs_(from.outputs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiOutputResponse)
}

void MultiOutputResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiOutputResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

MultiOutputResponse::~MultiOutputResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiOutputResponse)
  SharedDtor();
}

void MultiOutputResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void MultiOutputResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiOutputResponse& MultiOutputResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiOutputResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiOutputResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiOutputResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  outputs_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultiOutputResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Output outputs = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiOutputResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiOutputResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.Output outputs = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_outputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_outputs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiOutputResponse)
  return target;
}

size_t MultiOutputResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiOutputResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Output outputs = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_outputs_size();
  for (const auto& msg : this->outputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiOutputResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MultiOutputResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiOutputResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiOutputResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MultiOutputResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MultiOutputResponse)
    MergeFrom(*source);
  }
}

void MultiOutputResponse::MergeFrom(const MultiOutputResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiOutputResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  outputs_.MergeFrom(from.outputs_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void MultiOutputResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MultiOutputResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiOutputResponse::CopyFrom(const MultiOutputResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiOutputResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiOutputResponse::IsInitialized() const {
  return true;
}

void MultiOutputResponse::InternalSwap(MultiOutputResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  outputs_.InternalSwap(&other->outputs_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiOutputResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListScopesRequest::InitAsDefaultInstance() {
}
class ListScopesRequest::_Internal {
 public:
};

ListScopesRequest::ListScopesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ListScopesRequest)
}
ListScopesRequest::ListScopesRequest(const ListScopesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key_type().empty()) {
    key_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_type_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListScopesRequest)
}

void ListScopesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListScopesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  key_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ListScopesRequest::~ListScopesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListScopesRequest)
  SharedDtor();
}

void ListScopesRequest::SharedDtor() {
  key_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListScopesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListScopesRequest& ListScopesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListScopesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ListScopesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListScopesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ListScopesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListScopesRequest.key_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListScopesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListScopesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key_type = 1;
  if (this->key_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key_type().data(), static_cast<int>(this->_internal_key_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListScopesRequest.key_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListScopesRequest)
  return target;
}

size_t ListScopesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListScopesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key_type = 1;
  if (this->key_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListScopesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ListScopesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListScopesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListScopesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ListScopesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ListScopesRequest)
    MergeFrom(*source);
  }
}

void ListScopesRequest::MergeFrom(const ListScopesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListScopesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key_type().size() > 0) {

    key_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_type_);
  }
}

void ListScopesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ListScopesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListScopesRequest::CopyFrom(const ListScopesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListScopesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListScopesRequest::IsInitialized() const {
  return true;
}

void ListScopesRequest::InternalSwap(ListScopesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_type_.Swap(&other->key_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ListScopesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MyScopesRequest::InitAsDefaultInstance() {
  ::clarifai::api::_MyScopesRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class MyScopesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const MyScopesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
MyScopesRequest::_Internal::user_app_id(const MyScopesRequest* msg) {
  return *msg->user_app_id_;
}
void MyScopesRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
MyScopesRequest::MyScopesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MyScopesRequest)
}
MyScopesRequest::MyScopesRequest(const MyScopesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MyScopesRequest)
}

void MyScopesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MyScopesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  user_app_id_ = nullptr;
}

MyScopesRequest::~MyScopesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.MyScopesRequest)
  SharedDtor();
}

void MyScopesRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void MyScopesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MyScopesRequest& MyScopesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MyScopesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MyScopesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MyScopesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MyScopesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MyScopesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MyScopesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MyScopesRequest)
  return target;
}

size_t MyScopesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MyScopesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MyScopesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MyScopesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MyScopesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MyScopesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MyScopesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MyScopesRequest)
    MergeFrom(*source);
  }
}

void MyScopesRequest::MergeFrom(const MyScopesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MyScopesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void MyScopesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MyScopesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MyScopesRequest::CopyFrom(const MyScopesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MyScopesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyScopesRequest::IsInitialized() const {
  return true;
}

void MyScopesRequest::InternalSwap(MyScopesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MyScopesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiScopeDepsResponse::InitAsDefaultInstance() {
  ::clarifai::api::_MultiScopeDepsResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class MultiScopeDepsResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiScopeDepsResponse* msg);
};

const ::clarifai::api::status::Status&
MultiScopeDepsResponse::_Internal::status(const MultiScopeDepsResponse* msg) {
  return *msg->status_;
}
void MultiScopeDepsResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiScopeDepsResponse::clear_scope_deps() {
  scope_deps_.Clear();
}
void MultiScopeDepsResponse::clear_endpoint_deps() {
  endpoint_deps_.Clear();
}
MultiScopeDepsResponse::MultiScopeDepsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MultiScopeDepsResponse)
}
MultiScopeDepsResponse::MultiScopeDepsResponse(const MultiScopeDepsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      scope_deps_(from.scope_deps_),
      endpoint_deps_(from.endpoint_deps_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiScopeDepsResponse)
}

void MultiScopeDepsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiScopeDepsResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

MultiScopeDepsResponse::~MultiScopeDepsResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiScopeDepsResponse)
  SharedDtor();
}

void MultiScopeDepsResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void MultiScopeDepsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiScopeDepsResponse& MultiScopeDepsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiScopeDepsResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiScopeDepsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiScopeDepsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scope_deps_.Clear();
  endpoint_deps_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultiScopeDepsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.ScopeDeps scope_deps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_scope_deps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.EndpointDeps endpoint_deps = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_endpoint_deps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiScopeDepsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiScopeDepsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.ScopeDeps scope_deps = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_scope_deps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_scope_deps(i), target, stream);
  }

  // repeated .clarifai.api.EndpointDeps endpoint_deps = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_endpoint_deps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_endpoint_deps(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiScopeDepsResponse)
  return target;
}

size_t MultiScopeDepsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiScopeDepsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ScopeDeps scope_deps = 2;
  total_size += 1UL * this->_internal_scope_deps_size();
  for (const auto& msg : this->scope_deps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.EndpointDeps endpoint_deps = 3;
  total_size += 1UL * this->_internal_endpoint_deps_size();
  for (const auto& msg : this->endpoint_deps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiScopeDepsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MultiScopeDepsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiScopeDepsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiScopeDepsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MultiScopeDepsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MultiScopeDepsResponse)
    MergeFrom(*source);
  }
}

void MultiScopeDepsResponse::MergeFrom(const MultiScopeDepsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiScopeDepsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  scope_deps_.MergeFrom(from.scope_deps_);
  endpoint_deps_.MergeFrom(from.endpoint_deps_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void MultiScopeDepsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MultiScopeDepsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiScopeDepsResponse::CopyFrom(const MultiScopeDepsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiScopeDepsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiScopeDepsResponse::IsInitialized() const {
  return true;
}

void MultiScopeDepsResponse::InternalSwap(MultiScopeDepsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  scope_deps_.InternalSwap(&other->scope_deps_);
  endpoint_deps_.InternalSwap(&other->endpoint_deps_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiScopeDepsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiScopeResponse::InitAsDefaultInstance() {
  ::clarifai::api::_MultiScopeResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
  ::clarifai::api::_MultiScopeResponse_default_instance_._instance.get_mutable()->app_ = const_cast< ::clarifai::api::App*>(
      ::clarifai::api::App::internal_default_instance());
}
class MultiScopeResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiScopeResponse* msg);
  static const ::clarifai::api::App& app(const MultiScopeResponse* msg);
};

const ::clarifai::api::status::Status&
MultiScopeResponse::_Internal::status(const MultiScopeResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::App&
MultiScopeResponse::_Internal::app(const MultiScopeResponse* msg) {
  return *msg->app_;
}
void MultiScopeResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiScopeResponse::clear_app() {
  if (GetArenaNoVirtual() == nullptr && app_ != nullptr) {
    delete app_;
  }
  app_ = nullptr;
}
MultiScopeResponse::MultiScopeResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MultiScopeResponse)
}
MultiScopeResponse::MultiScopeResponse(const MultiScopeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      scopes_(from.scopes_),
      endpoints_(from.endpoints_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_app()) {
    app_ = new ::clarifai::api::App(*from.app_);
  } else {
    app_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiScopeResponse)
}

void MultiScopeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiScopeResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&app_) -
      reinterpret_cast<char*>(&status_)) + sizeof(app_));
}

MultiScopeResponse::~MultiScopeResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiScopeResponse)
  SharedDtor();
}

void MultiScopeResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete app_;
}

void MultiScopeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiScopeResponse& MultiScopeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiScopeResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiScopeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiScopeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scopes_.Clear();
  endpoints_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && app_ != nullptr) {
    delete app_;
  }
  app_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultiScopeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string scopes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_scopes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.MultiScopeResponse.scopes"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .clarifai.api.App app = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_app(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string endpoints = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_endpoints();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.MultiScopeResponse.endpoints"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiScopeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiScopeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated string scopes = 2;
  for (int i = 0, n = this->_internal_scopes_size(); i < n; i++) {
    const auto& s = this->_internal_scopes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.MultiScopeResponse.scopes");
    target = stream->WriteString(2, s, target);
  }

  // .clarifai.api.App app = 3;
  if (this->has_app()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::app(this), target, stream);
  }

  // repeated string endpoints = 4;
  for (int i = 0, n = this->_internal_endpoints_size(); i < n; i++) {
    const auto& s = this->_internal_endpoints(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.MultiScopeResponse.endpoints");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiScopeResponse)
  return target;
}

size_t MultiScopeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiScopeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string scopes = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(scopes_.size());
  for (int i = 0, n = scopes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      scopes_.Get(i));
  }

  // repeated string endpoints = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(endpoints_.size());
  for (int i = 0, n = endpoints_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      endpoints_.Get(i));
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.App app = 3;
  if (this->has_app()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *app_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiScopeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MultiScopeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiScopeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiScopeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MultiScopeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MultiScopeResponse)
    MergeFrom(*source);
  }
}

void MultiScopeResponse::MergeFrom(const MultiScopeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiScopeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  scopes_.MergeFrom(from.scopes_);
  endpoints_.MergeFrom(from.endpoints_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.has_app()) {
    _internal_mutable_app()->::clarifai::api::App::MergeFrom(from._internal_app());
  }
}

void MultiScopeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MultiScopeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiScopeResponse::CopyFrom(const MultiScopeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiScopeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiScopeResponse::IsInitialized() const {
  return true;
}

void MultiScopeResponse::InternalSwap(MultiScopeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  scopes_.InternalSwap(&other->scopes_);
  endpoints_.InternalSwap(&other->endpoints_);
  swap(status_, other->status_);
  swap(app_, other->app_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiScopeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetSearchRequest::InitAsDefaultInstance() {
  ::clarifai::api::_GetSearchRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class GetSearchRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetSearchRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetSearchRequest::_Internal::user_app_id(const GetSearchRequest* msg) {
  return *msg->user_app_id_;
}
void GetSearchRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetSearchRequest::GetSearchRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.GetSearchRequest)
}
GetSearchRequest::GetSearchRequest(const GetSearchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetSearchRequest)
}

void GetSearchRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetSearchRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

GetSearchRequest::~GetSearchRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetSearchRequest)
  SharedDtor();
}

void GetSearchRequest::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetSearchRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetSearchRequest& GetSearchRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetSearchRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void GetSearchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetSearchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetSearchRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetSearchRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSearchRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetSearchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetSearchRequest.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetSearchRequest)
  return target;
}

size_t GetSearchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetSearchRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSearchRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.GetSearchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSearchRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetSearchRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.GetSearchRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.GetSearchRequest)
    MergeFrom(*source);
  }
}

void GetSearchRequest::MergeFrom(const GetSearchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetSearchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void GetSearchRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.GetSearchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSearchRequest::CopyFrom(const GetSearchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetSearchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSearchRequest::IsInitialized() const {
  return true;
}

void GetSearchRequest::InternalSwap(GetSearchRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSearchRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListSearchesRequest::InitAsDefaultInstance() {
  ::clarifai::api::_ListSearchesRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class ListSearchesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListSearchesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListSearchesRequest::_Internal::user_app_id(const ListSearchesRequest* msg) {
  return *msg->user_app_id_;
}
void ListSearchesRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListSearchesRequest::ListSearchesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ListSearchesRequest)
}
ListSearchesRequest::ListSearchesRequest(const ListSearchesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListSearchesRequest)
}

void ListSearchesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

ListSearchesRequest::~ListSearchesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListSearchesRequest)
  SharedDtor();
}

void ListSearchesRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListSearchesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListSearchesRequest& ListSearchesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ListSearchesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListSearchesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear();
}

const char* ListSearchesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListSearchesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListSearchesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // uint32 page = 2;
  if (this->page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListSearchesRequest)
  return target;
}

size_t ListSearchesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListSearchesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 2;
  if (this->page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->per_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_per_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListSearchesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ListSearchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListSearchesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListSearchesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ListSearchesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ListSearchesRequest)
    MergeFrom(*source);
  }
}

void ListSearchesRequest::MergeFrom(const ListSearchesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListSearchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from.per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
}

void ListSearchesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ListSearchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListSearchesRequest::CopyFrom(const ListSearchesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListSearchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListSearchesRequest::IsInitialized() const {
  return true;
}

void ListSearchesRequest::InternalSwap(ListSearchesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_app_id_, other->user_app_id_);
  swap(page_, other->page_);
  swap(per_page_, other->per_page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListSearchesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostSearchesRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostSearchesRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
  ::clarifai::api::_PostSearchesRequest_default_instance_._instance.get_mutable()->query_ = const_cast< ::clarifai::api::Query*>(
      ::clarifai::api::Query::internal_default_instance());
  ::clarifai::api::_PostSearchesRequest_default_instance_._instance.get_mutable()->pagination_ = const_cast< ::clarifai::api::Pagination*>(
      ::clarifai::api::Pagination::internal_default_instance());
}
class PostSearchesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostSearchesRequest* msg);
  static const ::clarifai::api::Query& query(const PostSearchesRequest* msg);
  static const ::clarifai::api::Pagination& pagination(const PostSearchesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostSearchesRequest::_Internal::user_app_id(const PostSearchesRequest* msg) {
  return *msg->user_app_id_;
}
const ::clarifai::api::Query&
PostSearchesRequest::_Internal::query(const PostSearchesRequest* msg) {
  return *msg->query_;
}
const ::clarifai::api::Pagination&
PostSearchesRequest::_Internal::pagination(const PostSearchesRequest* msg) {
  return *msg->pagination_;
}
void PostSearchesRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostSearchesRequest::clear_query() {
  if (GetArenaNoVirtual() == nullptr && query_ != nullptr) {
    delete query_;
  }
  query_ = nullptr;
}
void PostSearchesRequest::clear_searches() {
  searches_.Clear();
}
PostSearchesRequest::PostSearchesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostSearchesRequest)
}
PostSearchesRequest::PostSearchesRequest(const PostSearchesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      searches_(from.searches_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  if (from._internal_has_query()) {
    query_ = new ::clarifai::api::Query(*from.query_);
  } else {
    query_ = nullptr;
  }
  if (from._internal_has_pagination()) {
    pagination_ = new ::clarifai::api::Pagination(*from.pagination_);
  } else {
    pagination_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostSearchesRequest)
}

void PostSearchesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pagination_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(pagination_));
}

PostSearchesRequest::~PostSearchesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostSearchesRequest)
  SharedDtor();
}

void PostSearchesRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
  if (this != internal_default_instance()) delete query_;
  if (this != internal_default_instance()) delete pagination_;
}

void PostSearchesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostSearchesRequest& PostSearchesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostSearchesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostSearchesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  searches_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && query_ != nullptr) {
    delete query_;
  }
  query_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostSearchesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Query query = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_query(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Search searches = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_searches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Pagination pagination = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostSearchesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostSearchesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // .clarifai.api.Query query = 2 [deprecated = true];
  if (this->has_query()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::query(this), target, stream);
  }

  // repeated .clarifai.api.Search searches = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_searches_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_searches(i), target, stream);
  }

  // .clarifai.api.Pagination pagination = 4;
  if (this->has_pagination()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::pagination(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostSearchesRequest)
  return target;
}

size_t PostSearchesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostSearchesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Search searches = 3;
  total_size += 1UL * this->_internal_searches_size();
  for (const auto& msg : this->searches_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // .clarifai.api.Query query = 2 [deprecated = true];
  if (this->has_query()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *query_);
  }

  // .clarifai.api.Pagination pagination = 4;
  if (this->has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pagination_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostSearchesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostSearchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostSearchesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostSearchesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostSearchesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostSearchesRequest)
    MergeFrom(*source);
  }
}

void PostSearchesRequest::MergeFrom(const PostSearchesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostSearchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  searches_.MergeFrom(from.searches_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.has_query()) {
    _internal_mutable_query()->::clarifai::api::Query::MergeFrom(from._internal_query());
  }
  if (from.has_pagination()) {
    _internal_mutable_pagination()->::clarifai::api::Pagination::MergeFrom(from._internal_pagination());
  }
}

void PostSearchesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostSearchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostSearchesRequest::CopyFrom(const PostSearchesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostSearchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostSearchesRequest::IsInitialized() const {
  return true;
}

void PostSearchesRequest::InternalSwap(PostSearchesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  searches_.InternalSwap(&other->searches_);
  swap(user_app_id_, other->user_app_id_);
  swap(query_, other->query_);
  swap(pagination_, other->pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostSearchesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostSearchesByIDRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostSearchesByIDRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
  ::clarifai::api::_PostSearchesByIDRequest_default_instance_._instance.get_mutable()->pagination_ = const_cast< ::clarifai::api::Pagination*>(
      ::clarifai::api::Pagination::internal_default_instance());
}
class PostSearchesByIDRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostSearchesByIDRequest* msg);
  static const ::clarifai::api::Pagination& pagination(const PostSearchesByIDRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostSearchesByIDRequest::_Internal::user_app_id(const PostSearchesByIDRequest* msg) {
  return *msg->user_app_id_;
}
const ::clarifai::api::Pagination&
PostSearchesByIDRequest::_Internal::pagination(const PostSearchesByIDRequest* msg) {
  return *msg->pagination_;
}
void PostSearchesByIDRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
PostSearchesByIDRequest::PostSearchesByIDRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostSearchesByIDRequest)
}
PostSearchesByIDRequest::PostSearchesByIDRequest(const PostSearchesByIDRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  if (from._internal_has_pagination()) {
    pagination_ = new ::clarifai::api::Pagination(*from.pagination_);
  } else {
    pagination_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostSearchesByIDRequest)
}

void PostSearchesByIDRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostSearchesByIDRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pagination_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(pagination_));
}

PostSearchesByIDRequest::~PostSearchesByIDRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostSearchesByIDRequest)
  SharedDtor();
}

void PostSearchesByIDRequest::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
  if (this != internal_default_instance()) delete pagination_;
}

void PostSearchesByIDRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostSearchesByIDRequest& PostSearchesByIDRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostSearchesByIDRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostSearchesByIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostSearchesByIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostSearchesByIDRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostSearchesByIDRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Pagination pagination = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostSearchesByIDRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostSearchesByIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostSearchesByIDRequest.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // .clarifai.api.Pagination pagination = 3;
  if (this->has_pagination()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pagination(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostSearchesByIDRequest)
  return target;
}

size_t PostSearchesByIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostSearchesByIDRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // .clarifai.api.Pagination pagination = 3;
  if (this->has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pagination_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostSearchesByIDRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostSearchesByIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostSearchesByIDRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostSearchesByIDRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostSearchesByIDRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostSearchesByIDRequest)
    MergeFrom(*source);
  }
}

void PostSearchesByIDRequest::MergeFrom(const PostSearchesByIDRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostSearchesByIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.has_pagination()) {
    _internal_mutable_pagination()->::clarifai::api::Pagination::MergeFrom(from._internal_pagination());
  }
}

void PostSearchesByIDRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostSearchesByIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostSearchesByIDRequest::CopyFrom(const PostSearchesByIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostSearchesByIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostSearchesByIDRequest::IsInitialized() const {
  return true;
}

void PostSearchesByIDRequest::InternalSwap(PostSearchesByIDRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
  swap(pagination_, other->pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostSearchesByIDRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteSearchRequest::InitAsDefaultInstance() {
  ::clarifai::api::_DeleteSearchRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class DeleteSearchRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteSearchRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteSearchRequest::_Internal::user_app_id(const DeleteSearchRequest* msg) {
  return *msg->user_app_id_;
}
void DeleteSearchRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
DeleteSearchRequest::DeleteSearchRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.DeleteSearchRequest)
}
DeleteSearchRequest::DeleteSearchRequest(const DeleteSearchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteSearchRequest)
}

void DeleteSearchRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteSearchRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

DeleteSearchRequest::~DeleteSearchRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteSearchRequest)
  SharedDtor();
}

void DeleteSearchRequest::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void DeleteSearchRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteSearchRequest& DeleteSearchRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteSearchRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void DeleteSearchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteSearchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* DeleteSearchRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteSearchRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteSearchRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteSearchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteSearchRequest.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteSearchRequest)
  return target;
}

size_t DeleteSearchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteSearchRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteSearchRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.DeleteSearchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteSearchRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteSearchRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.DeleteSearchRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.DeleteSearchRequest)
    MergeFrom(*source);
  }
}

void DeleteSearchRequest::MergeFrom(const DeleteSearchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteSearchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void DeleteSearchRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.DeleteSearchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteSearchRequest::CopyFrom(const DeleteSearchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteSearchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteSearchRequest::IsInitialized() const {
  return true;
}

void DeleteSearchRequest::InternalSwap(DeleteSearchRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteSearchRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostAttributeSearchRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostAttributeSearchRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
  ::clarifai::api::_PostAttributeSearchRequest_default_instance_._instance.get_mutable()->pagination_ = const_cast< ::clarifai::api::Pagination*>(
      ::clarifai::api::Pagination::internal_default_instance());
  ::clarifai::api::_PostAttributeSearchRequest_default_instance_._instance.get_mutable()->attribute_query_ = const_cast< ::clarifai::api::AttributeQuery*>(
      ::clarifai::api::AttributeQuery::internal_default_instance());
}
class PostAttributeSearchRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostAttributeSearchRequest* msg);
  static const ::clarifai::api::Pagination& pagination(const PostAttributeSearchRequest* msg);
  static const ::clarifai::api::AttributeQuery& attribute_query(const PostAttributeSearchRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostAttributeSearchRequest::_Internal::user_app_id(const PostAttributeSearchRequest* msg) {
  return *msg->user_app_id_;
}
const ::clarifai::api::Pagination&
PostAttributeSearchRequest::_Internal::pagination(const PostAttributeSearchRequest* msg) {
  return *msg->pagination_;
}
const ::clarifai::api::AttributeQuery&
PostAttributeSearchRequest::_Internal::attribute_query(const PostAttributeSearchRequest* msg) {
  return *msg->attribute_query_;
}
void PostAttributeSearchRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostAttributeSearchRequest::clear_attribute_query() {
  if (GetArenaNoVirtual() == nullptr && attribute_query_ != nullptr) {
    delete attribute_query_;
  }
  attribute_query_ = nullptr;
}
PostAttributeSearchRequest::PostAttributeSearchRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostAttributeSearchRequest)
}
PostAttributeSearchRequest::PostAttributeSearchRequest(const PostAttributeSearchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  if (from._internal_has_pagination()) {
    pagination_ = new ::clarifai::api::Pagination(*from.pagination_);
  } else {
    pagination_ = nullptr;
  }
  if (from._internal_has_attribute_query()) {
    attribute_query_ = new ::clarifai::api::AttributeQuery(*from.attribute_query_);
  } else {
    attribute_query_ = nullptr;
  }
  ::memcpy(&brute_force_, &from.brute_force_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_value_) -
    reinterpret_cast<char*>(&brute_force_)) + sizeof(min_value_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostAttributeSearchRequest)
}

void PostAttributeSearchRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostAttributeSearchRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_value_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(min_value_));
}

PostAttributeSearchRequest::~PostAttributeSearchRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostAttributeSearchRequest)
  SharedDtor();
}

void PostAttributeSearchRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
  if (this != internal_default_instance()) delete pagination_;
  if (this != internal_default_instance()) delete attribute_query_;
}

void PostAttributeSearchRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostAttributeSearchRequest& PostAttributeSearchRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostAttributeSearchRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostAttributeSearchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostAttributeSearchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && attribute_query_ != nullptr) {
    delete attribute_query_;
  }
  attribute_query_ = nullptr;
  ::memset(&brute_force_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_value_) -
      reinterpret_cast<char*>(&brute_force_)) + sizeof(min_value_));
  _internal_metadata_.Clear();
}

const char* PostAttributeSearchRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Pagination pagination = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool brute_force = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          brute_force_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.AttributeQuery attribute_query = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_attribute_query(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float min_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          min_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostAttributeSearchRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostAttributeSearchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // .clarifai.api.Pagination pagination = 3;
  if (this->has_pagination()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pagination(this), target, stream);
  }

  // bool brute_force = 4;
  if (this->brute_force() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_brute_force(), target);
  }

  // .clarifai.api.AttributeQuery attribute_query = 5;
  if (this->has_attribute_query()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::attribute_query(this), target, stream);
  }

  // float min_value = 6;
  if (!(this->min_value() <= 0 && this->min_value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_min_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostAttributeSearchRequest)
  return target;
}

size_t PostAttributeSearchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostAttributeSearchRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // .clarifai.api.Pagination pagination = 3;
  if (this->has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pagination_);
  }

  // .clarifai.api.AttributeQuery attribute_query = 5;
  if (this->has_attribute_query()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attribute_query_);
  }

  // bool brute_force = 4;
  if (this->brute_force() != 0) {
    total_size += 1 + 1;
  }

  // float min_value = 6;
  if (!(this->min_value() <= 0 && this->min_value() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostAttributeSearchRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostAttributeSearchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostAttributeSearchRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostAttributeSearchRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostAttributeSearchRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostAttributeSearchRequest)
    MergeFrom(*source);
  }
}

void PostAttributeSearchRequest::MergeFrom(const PostAttributeSearchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostAttributeSearchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.has_pagination()) {
    _internal_mutable_pagination()->::clarifai::api::Pagination::MergeFrom(from._internal_pagination());
  }
  if (from.has_attribute_query()) {
    _internal_mutable_attribute_query()->::clarifai::api::AttributeQuery::MergeFrom(from._internal_attribute_query());
  }
  if (from.brute_force() != 0) {
    _internal_set_brute_force(from._internal_brute_force());
  }
  if (!(from.min_value() <= 0 && from.min_value() >= 0)) {
    _internal_set_min_value(from._internal_min_value());
  }
}

void PostAttributeSearchRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostAttributeSearchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostAttributeSearchRequest::CopyFrom(const PostAttributeSearchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostAttributeSearchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostAttributeSearchRequest::IsInitialized() const {
  return true;
}

void PostAttributeSearchRequest::InternalSwap(PostAttributeSearchRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_app_id_, other->user_app_id_);
  swap(pagination_, other->pagination_);
  swap(attribute_query_, other->attribute_query_);
  swap(brute_force_, other->brute_force_);
  swap(min_value_, other->min_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostAttributeSearchRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostAnnotationsSearchesRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostAnnotationsSearchesRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
  ::clarifai::api::_PostAnnotationsSearchesRequest_default_instance_._instance.get_mutable()->pagination_ = const_cast< ::clarifai::api::Pagination*>(
      ::clarifai::api::Pagination::internal_default_instance());
}
class PostAnnotationsSearchesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostAnnotationsSearchesRequest* msg);
  static const ::clarifai::api::Pagination& pagination(const PostAnnotationsSearchesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostAnnotationsSearchesRequest::_Internal::user_app_id(const PostAnnotationsSearchesRequest* msg) {
  return *msg->user_app_id_;
}
const ::clarifai::api::Pagination&
PostAnnotationsSearchesRequest::_Internal::pagination(const PostAnnotationsSearchesRequest* msg) {
  return *msg->pagination_;
}
void PostAnnotationsSearchesRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostAnnotationsSearchesRequest::clear_searches() {
  searches_.Clear();
}
PostAnnotationsSearchesRequest::PostAnnotationsSearchesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostAnnotationsSearchesRequest)
}
PostAnnotationsSearchesRequest::PostAnnotationsSearchesRequest(const PostAnnotationsSearchesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      searches_(from.searches_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  if (from._internal_has_pagination()) {
    pagination_ = new ::clarifai::api::Pagination(*from.pagination_);
  } else {
    pagination_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostAnnotationsSearchesRequest)
}

void PostAnnotationsSearchesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostAnnotationsSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pagination_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(pagination_));
}

PostAnnotationsSearchesRequest::~PostAnnotationsSearchesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostAnnotationsSearchesRequest)
  SharedDtor();
}

void PostAnnotationsSearchesRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
  if (this != internal_default_instance()) delete pagination_;
}

void PostAnnotationsSearchesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostAnnotationsSearchesRequest& PostAnnotationsSearchesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostAnnotationsSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostAnnotationsSearchesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostAnnotationsSearchesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  searches_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostAnnotationsSearchesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Search searches = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_searches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Pagination pagination = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostAnnotationsSearchesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostAnnotationsSearchesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Search searches = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_searches_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_searches(i), target, stream);
  }

  // .clarifai.api.Pagination pagination = 3;
  if (this->has_pagination()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pagination(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostAnnotationsSearchesRequest)
  return target;
}

size_t PostAnnotationsSearchesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostAnnotationsSearchesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Search searches = 2;
  total_size += 1UL * this->_internal_searches_size();
  for (const auto& msg : this->searches_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // .clarifai.api.Pagination pagination = 3;
  if (this->has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pagination_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostAnnotationsSearchesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostAnnotationsSearchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostAnnotationsSearchesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostAnnotationsSearchesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostAnnotationsSearchesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostAnnotationsSearchesRequest)
    MergeFrom(*source);
  }
}

void PostAnnotationsSearchesRequest::MergeFrom(const PostAnnotationsSearchesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostAnnotationsSearchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  searches_.MergeFrom(from.searches_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.has_pagination()) {
    _internal_mutable_pagination()->::clarifai::api::Pagination::MergeFrom(from._internal_pagination());
  }
}

void PostAnnotationsSearchesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostAnnotationsSearchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostAnnotationsSearchesRequest::CopyFrom(const PostAnnotationsSearchesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostAnnotationsSearchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostAnnotationsSearchesRequest::IsInitialized() const {
  return true;
}

void PostAnnotationsSearchesRequest::InternalSwap(PostAnnotationsSearchesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  searches_.InternalSwap(&other->searches_);
  swap(user_app_id_, other->user_app_id_);
  swap(pagination_, other->pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostAnnotationsSearchesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostInputsSearchesRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostInputsSearchesRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
  ::clarifai::api::_PostInputsSearchesRequest_default_instance_._instance.get_mutable()->pagination_ = const_cast< ::clarifai::api::Pagination*>(
      ::clarifai::api::Pagination::internal_default_instance());
}
class PostInputsSearchesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostInputsSearchesRequest* msg);
  static const ::clarifai::api::Pagination& pagination(const PostInputsSearchesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostInputsSearchesRequest::_Internal::user_app_id(const PostInputsSearchesRequest* msg) {
  return *msg->user_app_id_;
}
const ::clarifai::api::Pagination&
PostInputsSearchesRequest::_Internal::pagination(const PostInputsSearchesRequest* msg) {
  return *msg->pagination_;
}
void PostInputsSearchesRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostInputsSearchesRequest::clear_searches() {
  searches_.Clear();
}
PostInputsSearchesRequest::PostInputsSearchesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostInputsSearchesRequest)
}
PostInputsSearchesRequest::PostInputsSearchesRequest(const PostInputsSearchesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      searches_(from.searches_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  if (from._internal_has_pagination()) {
    pagination_ = new ::clarifai::api::Pagination(*from.pagination_);
  } else {
    pagination_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostInputsSearchesRequest)
}

void PostInputsSearchesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostInputsSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pagination_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(pagination_));
}

PostInputsSearchesRequest::~PostInputsSearchesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostInputsSearchesRequest)
  SharedDtor();
}

void PostInputsSearchesRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
  if (this != internal_default_instance()) delete pagination_;
}

void PostInputsSearchesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostInputsSearchesRequest& PostInputsSearchesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostInputsSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostInputsSearchesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostInputsSearchesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  searches_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostInputsSearchesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Search searches = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_searches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Pagination pagination = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostInputsSearchesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostInputsSearchesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Search searches = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_searches_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_searches(i), target, stream);
  }

  // .clarifai.api.Pagination pagination = 3;
  if (this->has_pagination()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pagination(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostInputsSearchesRequest)
  return target;
}

size_t PostInputsSearchesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostInputsSearchesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Search searches = 2;
  total_size += 1UL * this->_internal_searches_size();
  for (const auto& msg : this->searches_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // .clarifai.api.Pagination pagination = 3;
  if (this->has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pagination_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostInputsSearchesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostInputsSearchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostInputsSearchesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostInputsSearchesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostInputsSearchesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostInputsSearchesRequest)
    MergeFrom(*source);
  }
}

void PostInputsSearchesRequest::MergeFrom(const PostInputsSearchesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostInputsSearchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  searches_.MergeFrom(from.searches_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.has_pagination()) {
    _internal_mutable_pagination()->::clarifai::api::Pagination::MergeFrom(from._internal_pagination());
  }
}

void PostInputsSearchesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostInputsSearchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostInputsSearchesRequest::CopyFrom(const PostInputsSearchesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostInputsSearchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostInputsSearchesRequest::IsInitialized() const {
  return true;
}

void PostInputsSearchesRequest::InternalSwap(PostInputsSearchesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  searches_.InternalSwap(&other->searches_);
  swap(user_app_id_, other->user_app_id_);
  swap(pagination_, other->pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostInputsSearchesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SingleSearchResponse::InitAsDefaultInstance() {
  ::clarifai::api::_SingleSearchResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
  ::clarifai::api::_SingleSearchResponse_default_instance_._instance.get_mutable()->search_ = const_cast< ::clarifai::api::Search*>(
      ::clarifai::api::Search::internal_default_instance());
}
class SingleSearchResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleSearchResponse* msg);
  static const ::clarifai::api::Search& search(const SingleSearchResponse* msg);
};

const ::clarifai::api::status::Status&
SingleSearchResponse::_Internal::status(const SingleSearchResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::Search&
SingleSearchResponse::_Internal::search(const SingleSearchResponse* msg) {
  return *msg->search_;
}
void SingleSearchResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleSearchResponse::clear_search() {
  if (GetArenaNoVirtual() == nullptr && search_ != nullptr) {
    delete search_;
  }
  search_ = nullptr;
}
SingleSearchResponse::SingleSearchResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.SingleSearchResponse)
}
SingleSearchResponse::SingleSearchResponse(const SingleSearchResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_search()) {
    search_ = new ::clarifai::api::Search(*from.search_);
  } else {
    search_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleSearchResponse)
}

void SingleSearchResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SingleSearchResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&search_) -
      reinterpret_cast<char*>(&status_)) + sizeof(search_));
}

SingleSearchResponse::~SingleSearchResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleSearchResponse)
  SharedDtor();
}

void SingleSearchResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete search_;
}

void SingleSearchResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleSearchResponse& SingleSearchResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleSearchResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void SingleSearchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleSearchResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && search_ != nullptr) {
    delete search_;
  }
  search_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SingleSearchResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Search search = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_search(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleSearchResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleSearchResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.Search search = 5;
  if (this->has_search()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::search(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleSearchResponse)
  return target;
}

size_t SingleSearchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleSearchResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.Search search = 5;
  if (this->has_search()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *search_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleSearchResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.SingleSearchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleSearchResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleSearchResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.SingleSearchResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.SingleSearchResponse)
    MergeFrom(*source);
  }
}

void SingleSearchResponse::MergeFrom(const SingleSearchResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleSearchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.has_search()) {
    _internal_mutable_search()->::clarifai::api::Search::MergeFrom(from._internal_search());
  }
}

void SingleSearchResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.SingleSearchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleSearchResponse::CopyFrom(const SingleSearchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleSearchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleSearchResponse::IsInitialized() const {
  return true;
}

void SingleSearchResponse::InternalSwap(SingleSearchResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(search_, other->search_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleSearchResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiSearchResponse::InitAsDefaultInstance() {
  ::clarifai::api::_MultiSearchResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
  ::clarifai::api::_MultiSearchResponse_default_instance_._instance.get_mutable()->query_ = const_cast< ::clarifai::api::Query*>(
      ::clarifai::api::Query::internal_default_instance());
}
class MultiSearchResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiSearchResponse* msg);
  static const ::clarifai::api::Query& query(const MultiSearchResponse* msg);
};

const ::clarifai::api::status::Status&
MultiSearchResponse::_Internal::status(const MultiSearchResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::Query&
MultiSearchResponse::_Internal::query(const MultiSearchResponse* msg) {
  return *msg->query_;
}
void MultiSearchResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiSearchResponse::clear_hits() {
  hits_.Clear();
}
void MultiSearchResponse::clear_query() {
  if (GetArenaNoVirtual() == nullptr && query_ != nullptr) {
    delete query_;
  }
  query_ = nullptr;
}
void MultiSearchResponse::clear_searches() {
  searches_.Clear();
}
MultiSearchResponse::MultiSearchResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MultiSearchResponse)
}
MultiSearchResponse::MultiSearchResponse(const MultiSearchResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      hits_(from.hits_),
      searches_(from.searches_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_query()) {
    query_ = new ::clarifai::api::Query(*from.query_);
  } else {
    query_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiSearchResponse)
}

void MultiSearchResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiSearchResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&query_) -
      reinterpret_cast<char*>(&status_)) + sizeof(query_));
}

MultiSearchResponse::~MultiSearchResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiSearchResponse)
  SharedDtor();
}

void MultiSearchResponse::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete query_;
}

void MultiSearchResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiSearchResponse& MultiSearchResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiSearchResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiSearchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiSearchResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hits_.Clear();
  searches_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && query_ != nullptr) {
    delete query_;
  }
  query_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultiSearchResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.MultiSearchResponse.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Hit hits = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hits(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Query query = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_query(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Search searches = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_searches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiSearchResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiSearchResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.MultiSearchResponse.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // repeated .clarifai.api.Hit hits = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hits_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_hits(i), target, stream);
  }

  // .clarifai.api.Query query = 4;
  if (this->has_query()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::query(this), target, stream);
  }

  // repeated .clarifai.api.Search searches = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_searches_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_searches(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiSearchResponse)
  return target;
}

size_t MultiSearchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiSearchResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Hit hits = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_hits_size();
  for (const auto& msg : this->hits_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.Search searches = 5;
  total_size += 1UL * this->_internal_searches_size();
  for (const auto& msg : this->searches_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.Query query = 4;
  if (this->has_query()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *query_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiSearchResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MultiSearchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiSearchResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiSearchResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MultiSearchResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MultiSearchResponse)
    MergeFrom(*source);
  }
}

void MultiSearchResponse::MergeFrom(const MultiSearchResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiSearchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hits_.MergeFrom(from.hits_);
  searches_.MergeFrom(from.searches_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.has_query()) {
    _internal_mutable_query()->::clarifai::api::Query::MergeFrom(from._internal_query());
  }
}

void MultiSearchResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MultiSearchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiSearchResponse::CopyFrom(const MultiSearchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiSearchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiSearchResponse::IsInitialized() const {
  return true;
}

void MultiSearchResponse::InternalSwap(MultiSearchResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  hits_.InternalSwap(&other->hits_);
  searches_.InternalSwap(&other->searches_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
  swap(query_, other->query_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiSearchResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostAnnotationSearchMetricsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostAnnotationSearchMetricsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
  ::clarifai::api::_PostAnnotationSearchMetricsRequest_default_instance_._instance.get_mutable()->ground_truth_ = const_cast< ::clarifai::api::Search*>(
      ::clarifai::api::Search::internal_default_instance());
  ::clarifai::api::_PostAnnotationSearchMetricsRequest_default_instance_._instance.get_mutable()->search_to_eval_ = const_cast< ::clarifai::api::Search*>(
      ::clarifai::api::Search::internal_default_instance());
  ::clarifai::api::_PostAnnotationSearchMetricsRequest_default_instance_._instance.get_mutable()->data_ = const_cast< ::clarifai::api::Data*>(
      ::clarifai::api::Data::internal_default_instance());
}
class PostAnnotationSearchMetricsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostAnnotationSearchMetricsRequest* msg);
  static const ::clarifai::api::Search& ground_truth(const PostAnnotationSearchMetricsRequest* msg);
  static const ::clarifai::api::Search& search_to_eval(const PostAnnotationSearchMetricsRequest* msg);
  static const ::clarifai::api::Data& data(const PostAnnotationSearchMetricsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostAnnotationSearchMetricsRequest::_Internal::user_app_id(const PostAnnotationSearchMetricsRequest* msg) {
  return *msg->user_app_id_;
}
const ::clarifai::api::Search&
PostAnnotationSearchMetricsRequest::_Internal::ground_truth(const PostAnnotationSearchMetricsRequest* msg) {
  return *msg->ground_truth_;
}
const ::clarifai::api::Search&
PostAnnotationSearchMetricsRequest::_Internal::search_to_eval(const PostAnnotationSearchMetricsRequest* msg) {
  return *msg->search_to_eval_;
}
const ::clarifai::api::Data&
PostAnnotationSearchMetricsRequest::_Internal::data(const PostAnnotationSearchMetricsRequest* msg) {
  return *msg->data_;
}
void PostAnnotationSearchMetricsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostAnnotationSearchMetricsRequest::clear_ground_truth() {
  if (GetArenaNoVirtual() == nullptr && ground_truth_ != nullptr) {
    delete ground_truth_;
  }
  ground_truth_ = nullptr;
}
void PostAnnotationSearchMetricsRequest::clear_search_to_eval() {
  if (GetArenaNoVirtual() == nullptr && search_to_eval_ != nullptr) {
    delete search_to_eval_;
  }
  search_to_eval_ = nullptr;
}
void PostAnnotationSearchMetricsRequest::clear_data() {
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
PostAnnotationSearchMetricsRequest::PostAnnotationSearchMetricsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostAnnotationSearchMetricsRequest)
}
PostAnnotationSearchMetricsRequest::PostAnnotationSearchMetricsRequest(const PostAnnotationSearchMetricsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  if (from._internal_has_ground_truth()) {
    ground_truth_ = new ::clarifai::api::Search(*from.ground_truth_);
  } else {
    ground_truth_ = nullptr;
  }
  if (from._internal_has_search_to_eval()) {
    search_to_eval_ = new ::clarifai::api::Search(*from.search_to_eval_);
  } else {
    search_to_eval_ = nullptr;
  }
  if (from._internal_has_data()) {
    data_ = new ::clarifai::api::Data(*from.data_);
  } else {
    data_ = nullptr;
  }
  evaluation_type_ = from.evaluation_type_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostAnnotationSearchMetricsRequest)
}

void PostAnnotationSearchMetricsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostAnnotationSearchMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&evaluation_type_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(evaluation_type_));
}

PostAnnotationSearchMetricsRequest::~PostAnnotationSearchMetricsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostAnnotationSearchMetricsRequest)
  SharedDtor();
}

void PostAnnotationSearchMetricsRequest::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
  if (this != internal_default_instance()) delete ground_truth_;
  if (this != internal_default_instance()) delete search_to_eval_;
  if (this != internal_default_instance()) delete data_;
}

void PostAnnotationSearchMetricsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostAnnotationSearchMetricsRequest& PostAnnotationSearchMetricsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostAnnotationSearchMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostAnnotationSearchMetricsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostAnnotationSearchMetricsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ground_truth_ != nullptr) {
    delete ground_truth_;
  }
  ground_truth_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && search_to_eval_ != nullptr) {
    delete search_to_eval_;
  }
  search_to_eval_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  evaluation_type_ = 0;
  _internal_metadata_.Clear();
}

const char* PostAnnotationSearchMetricsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostAnnotationSearchMetricsRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Search ground_truth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ground_truth(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Search search_to_eval = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_search_to_eval(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Data data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.EvaluationType evaluation_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_evaluation_type(static_cast<::clarifai::api::EvaluationType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostAnnotationSearchMetricsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostAnnotationSearchMetricsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostAnnotationSearchMetricsRequest.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // .clarifai.api.Search ground_truth = 3;
  if (this->has_ground_truth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ground_truth(this), target, stream);
  }

  // .clarifai.api.Search search_to_eval = 4;
  if (this->has_search_to_eval()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::search_to_eval(this), target, stream);
  }

  // .clarifai.api.Data data = 5;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::data(this), target, stream);
  }

  // .clarifai.api.EvaluationType evaluation_type = 6;
  if (this->evaluation_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_evaluation_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostAnnotationSearchMetricsRequest)
  return target;
}

size_t PostAnnotationSearchMetricsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostAnnotationSearchMetricsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // .clarifai.api.Search ground_truth = 3;
  if (this->has_ground_truth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ground_truth_);
  }

  // .clarifai.api.Search search_to_eval = 4;
  if (this->has_search_to_eval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *search_to_eval_);
  }

  // .clarifai.api.Data data = 5;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // .clarifai.api.EvaluationType evaluation_type = 6;
  if (this->evaluation_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_evaluation_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostAnnotationSearchMetricsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostAnnotationSearchMetricsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostAnnotationSearchMetricsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostAnnotationSearchMetricsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostAnnotationSearchMetricsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostAnnotationSearchMetricsRequest)
    MergeFrom(*source);
  }
}

void PostAnnotationSearchMetricsRequest::MergeFrom(const PostAnnotationSearchMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostAnnotationSearchMetricsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.has_ground_truth()) {
    _internal_mutable_ground_truth()->::clarifai::api::Search::MergeFrom(from._internal_ground_truth());
  }
  if (from.has_search_to_eval()) {
    _internal_mutable_search_to_eval()->::clarifai::api::Search::MergeFrom(from._internal_search_to_eval());
  }
  if (from.has_data()) {
    _internal_mutable_data()->::clarifai::api::Data::MergeFrom(from._internal_data());
  }
  if (from.evaluation_type() != 0) {
    _internal_set_evaluation_type(from._internal_evaluation_type());
  }
}

void PostAnnotationSearchMetricsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostAnnotationSearchMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostAnnotationSearchMetricsRequest::CopyFrom(const PostAnnotationSearchMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostAnnotationSearchMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostAnnotationSearchMetricsRequest::IsInitialized() const {
  return true;
}

void PostAnnotationSearchMetricsRequest::InternalSwap(PostAnnotationSearchMetricsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
  swap(ground_truth_, other->ground_truth_);
  swap(search_to_eval_, other->search_to_eval_);
  swap(data_, other->data_);
  swap(evaluation_type_, other->evaluation_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostAnnotationSearchMetricsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAnnotationSearchMetricsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_GetAnnotationSearchMetricsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class GetAnnotationSearchMetricsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetAnnotationSearchMetricsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetAnnotationSearchMetricsRequest::_Internal::user_app_id(const GetAnnotationSearchMetricsRequest* msg) {
  return *msg->user_app_id_;
}
void GetAnnotationSearchMetricsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetAnnotationSearchMetricsRequest::GetAnnotationSearchMetricsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.GetAnnotationSearchMetricsRequest)
}
GetAnnotationSearchMetricsRequest::GetAnnotationSearchMetricsRequest(const GetAnnotationSearchMetricsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetAnnotationSearchMetricsRequest)
}

void GetAnnotationSearchMetricsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAnnotationSearchMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

GetAnnotationSearchMetricsRequest::~GetAnnotationSearchMetricsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetAnnotationSearchMetricsRequest)
  SharedDtor();
}

void GetAnnotationSearchMetricsRequest::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetAnnotationSearchMetricsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAnnotationSearchMetricsRequest& GetAnnotationSearchMetricsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAnnotationSearchMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void GetAnnotationSearchMetricsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetAnnotationSearchMetricsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetAnnotationSearchMetricsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetAnnotationSearchMetricsRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAnnotationSearchMetricsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetAnnotationSearchMetricsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetAnnotationSearchMetricsRequest.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetAnnotationSearchMetricsRequest)
  return target;
}

size_t GetAnnotationSearchMetricsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetAnnotationSearchMetricsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAnnotationSearchMetricsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.GetAnnotationSearchMetricsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAnnotationSearchMetricsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAnnotationSearchMetricsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.GetAnnotationSearchMetricsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.GetAnnotationSearchMetricsRequest)
    MergeFrom(*source);
  }
}

void GetAnnotationSearchMetricsRequest::MergeFrom(const GetAnnotationSearchMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetAnnotationSearchMetricsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void GetAnnotationSearchMetricsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.GetAnnotationSearchMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAnnotationSearchMetricsRequest::CopyFrom(const GetAnnotationSearchMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetAnnotationSearchMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAnnotationSearchMetricsRequest::IsInitialized() const {
  return true;
}

void GetAnnotationSearchMetricsRequest::InternalSwap(GetAnnotationSearchMetricsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAnnotationSearchMetricsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListAnnotationSearchMetricsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_ListAnnotationSearchMetricsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class ListAnnotationSearchMetricsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListAnnotationSearchMetricsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListAnnotationSearchMetricsRequest::_Internal::user_app_id(const ListAnnotationSearchMetricsRequest* msg) {
  return *msg->user_app_id_;
}
void ListAnnotationSearchMetricsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListAnnotationSearchMetricsRequest::ListAnnotationSearchMetricsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ListAnnotationSearchMetricsRequest)
}
ListAnnotationSearchMetricsRequest::ListAnnotationSearchMetricsRequest(const ListAnnotationSearchMetricsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListAnnotationSearchMetricsRequest)
}

void ListAnnotationSearchMetricsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListAnnotationSearchMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  user_app_id_ = nullptr;
}

ListAnnotationSearchMetricsRequest::~ListAnnotationSearchMetricsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListAnnotationSearchMetricsRequest)
  SharedDtor();
}

void ListAnnotationSearchMetricsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListAnnotationSearchMetricsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListAnnotationSearchMetricsRequest& ListAnnotationSearchMetricsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListAnnotationSearchMetricsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ListAnnotationSearchMetricsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListAnnotationSearchMetricsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ListAnnotationSearchMetricsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListAnnotationSearchMetricsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListAnnotationSearchMetricsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListAnnotationSearchMetricsRequest)
  return target;
}

size_t ListAnnotationSearchMetricsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListAnnotationSearchMetricsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListAnnotationSearchMetricsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ListAnnotationSearchMetricsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListAnnotationSearchMetricsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListAnnotationSearchMetricsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ListAnnotationSearchMetricsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ListAnnotationSearchMetricsRequest)
    MergeFrom(*source);
  }
}

void ListAnnotationSearchMetricsRequest::MergeFrom(const ListAnnotationSearchMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListAnnotationSearchMetricsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void ListAnnotationSearchMetricsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ListAnnotationSearchMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListAnnotationSearchMetricsRequest::CopyFrom(const ListAnnotationSearchMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListAnnotationSearchMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListAnnotationSearchMetricsRequest::IsInitialized() const {
  return true;
}

void ListAnnotationSearchMetricsRequest::InternalSwap(ListAnnotationSearchMetricsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListAnnotationSearchMetricsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiAnnotationSearchMetricsResponse::InitAsDefaultInstance() {
  ::clarifai::api::_MultiAnnotationSearchMetricsResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class MultiAnnotationSearchMetricsResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiAnnotationSearchMetricsResponse* msg);
};

const ::clarifai::api::status::Status&
MultiAnnotationSearchMetricsResponse::_Internal::status(const MultiAnnotationSearchMetricsResponse* msg) {
  return *msg->status_;
}
void MultiAnnotationSearchMetricsResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiAnnotationSearchMetricsResponse::clear_annotation_search_metrics() {
  annotation_search_metrics_.Clear();
}
MultiAnnotationSearchMetricsResponse::MultiAnnotationSearchMetricsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MultiAnnotationSearchMetricsResponse)
}
MultiAnnotationSearchMetricsResponse::MultiAnnotationSearchMetricsResponse(const MultiAnnotationSearchMetricsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      annotation_search_metrics_(from.annotation_search_metrics_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiAnnotationSearchMetricsResponse)
}

void MultiAnnotationSearchMetricsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiAnnotationSearchMetricsResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

MultiAnnotationSearchMetricsResponse::~MultiAnnotationSearchMetricsResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiAnnotationSearchMetricsResponse)
  SharedDtor();
}

void MultiAnnotationSearchMetricsResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void MultiAnnotationSearchMetricsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiAnnotationSearchMetricsResponse& MultiAnnotationSearchMetricsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiAnnotationSearchMetricsResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiAnnotationSearchMetricsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiAnnotationSearchMetricsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  annotation_search_metrics_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultiAnnotationSearchMetricsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.AnnotationSearchMetrics annotation_search_metrics = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_annotation_search_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiAnnotationSearchMetricsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiAnnotationSearchMetricsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.AnnotationSearchMetrics annotation_search_metrics = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_annotation_search_metrics_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_annotation_search_metrics(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiAnnotationSearchMetricsResponse)
  return target;
}

size_t MultiAnnotationSearchMetricsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiAnnotationSearchMetricsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.AnnotationSearchMetrics annotation_search_metrics = 2;
  total_size += 1UL * this->_internal_annotation_search_metrics_size();
  for (const auto& msg : this->annotation_search_metrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiAnnotationSearchMetricsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MultiAnnotationSearchMetricsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiAnnotationSearchMetricsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiAnnotationSearchMetricsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MultiAnnotationSearchMetricsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MultiAnnotationSearchMetricsResponse)
    MergeFrom(*source);
  }
}

void MultiAnnotationSearchMetricsResponse::MergeFrom(const MultiAnnotationSearchMetricsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiAnnotationSearchMetricsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  annotation_search_metrics_.MergeFrom(from.annotation_search_metrics_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void MultiAnnotationSearchMetricsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MultiAnnotationSearchMetricsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiAnnotationSearchMetricsResponse::CopyFrom(const MultiAnnotationSearchMetricsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiAnnotationSearchMetricsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiAnnotationSearchMetricsResponse::IsInitialized() const {
  return true;
}

void MultiAnnotationSearchMetricsResponse::InternalSwap(MultiAnnotationSearchMetricsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  annotation_search_metrics_.InternalSwap(&other->annotation_search_metrics_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiAnnotationSearchMetricsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListClustersRequest::InitAsDefaultInstance() {
  ::clarifai::api::_ListClustersRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class ListClustersRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListClustersRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListClustersRequest::_Internal::user_app_id(const ListClustersRequest* msg) {
  return *msg->user_app_id_;
}
void ListClustersRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListClustersRequest::ListClustersRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ListClustersRequest)
}
ListClustersRequest::ListClustersRequest(const ListClustersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&annotations_per_cluster_) -
    reinterpret_cast<char*>(&page_)) + sizeof(annotations_per_cluster_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListClustersRequest)
}

void ListClustersRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListClustersRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&annotations_per_cluster_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(annotations_per_cluster_));
}

ListClustersRequest::~ListClustersRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListClustersRequest)
  SharedDtor();
}

void ListClustersRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListClustersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListClustersRequest& ListClustersRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListClustersRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ListClustersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListClustersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&annotations_per_cluster_) -
      reinterpret_cast<char*>(&page_)) + sizeof(annotations_per_cluster_));
  _internal_metadata_.Clear();
}

const char* ListClustersRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListClustersRequest.ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 per_page = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 annotations_per_cluster = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          annotations_per_cluster_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListClustersRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListClustersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated string ids = 2;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListClustersRequest.ids");
    target = stream->WriteString(2, s, target);
  }

  // uint32 page = 3;
  if (this->page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_page(), target);
  }

  // uint32 per_page = 4;
  if (this->per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_per_page(), target);
  }

  // uint32 annotations_per_cluster = 5;
  if (this->annotations_per_cluster() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_annotations_per_cluster(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListClustersRequest)
  return target;
}

size_t ListClustersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListClustersRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ids_.size());
  for (int i = 0, n = ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ids_.Get(i));
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 3;
  if (this->page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page());
  }

  // uint32 per_page = 4;
  if (this->per_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_per_page());
  }

  // uint32 annotations_per_cluster = 5;
  if (this->annotations_per_cluster() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_annotations_per_cluster());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListClustersRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ListClustersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListClustersRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListClustersRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ListClustersRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ListClustersRequest)
    MergeFrom(*source);
  }
}

void ListClustersRequest::MergeFrom(const ListClustersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListClustersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from.per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
  if (from.annotations_per_cluster() != 0) {
    _internal_set_annotations_per_cluster(from._internal_annotations_per_cluster());
  }
}

void ListClustersRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ListClustersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListClustersRequest::CopyFrom(const ListClustersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListClustersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListClustersRequest::IsInitialized() const {
  return true;
}

void ListClustersRequest::InternalSwap(ListClustersRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
  swap(user_app_id_, other->user_app_id_);
  swap(page_, other->page_);
  swap(per_page_, other->per_page_);
  swap(annotations_per_cluster_, other->annotations_per_cluster_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListClustersRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListAnnotationsForClusterRequest::InitAsDefaultInstance() {
  ::clarifai::api::_ListAnnotationsForClusterRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class ListAnnotationsForClusterRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListAnnotationsForClusterRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListAnnotationsForClusterRequest::_Internal::user_app_id(const ListAnnotationsForClusterRequest* msg) {
  return *msg->user_app_id_;
}
void ListAnnotationsForClusterRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListAnnotationsForClusterRequest::ListAnnotationsForClusterRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ListAnnotationsForClusterRequest)
}
ListAnnotationsForClusterRequest::ListAnnotationsForClusterRequest(const ListAnnotationsForClusterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cluster_id().empty()) {
    cluster_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListAnnotationsForClusterRequest)
}

void ListAnnotationsForClusterRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListAnnotationsForClusterRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  cluster_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

ListAnnotationsForClusterRequest::~ListAnnotationsForClusterRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListAnnotationsForClusterRequest)
  SharedDtor();
}

void ListAnnotationsForClusterRequest::SharedDtor() {
  cluster_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListAnnotationsForClusterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListAnnotationsForClusterRequest& ListAnnotationsForClusterRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListAnnotationsForClusterRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ListAnnotationsForClusterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListAnnotationsForClusterRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cluster_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear();
}

const char* ListAnnotationsForClusterRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cluster_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_cluster_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListAnnotationsForClusterRequest.cluster_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 per_page = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListAnnotationsForClusterRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListAnnotationsForClusterRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cluster_id().data(), static_cast<int>(this->_internal_cluster_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListAnnotationsForClusterRequest.cluster_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cluster_id(), target);
  }

  // uint32 page = 3;
  if (this->page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_page(), target);
  }

  // uint32 per_page = 4;
  if (this->per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListAnnotationsForClusterRequest)
  return target;
}

size_t ListAnnotationsForClusterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListAnnotationsForClusterRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cluster_id = 2;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cluster_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 3;
  if (this->page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page());
  }

  // uint32 per_page = 4;
  if (this->per_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_per_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListAnnotationsForClusterRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ListAnnotationsForClusterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListAnnotationsForClusterRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListAnnotationsForClusterRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ListAnnotationsForClusterRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ListAnnotationsForClusterRequest)
    MergeFrom(*source);
  }
}

void ListAnnotationsForClusterRequest::MergeFrom(const ListAnnotationsForClusterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListAnnotationsForClusterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from.per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
}

void ListAnnotationsForClusterRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ListAnnotationsForClusterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListAnnotationsForClusterRequest::CopyFrom(const ListAnnotationsForClusterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListAnnotationsForClusterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListAnnotationsForClusterRequest::IsInitialized() const {
  return true;
}

void ListAnnotationsForClusterRequest::InternalSwap(ListAnnotationsForClusterRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cluster_id_.Swap(&other->cluster_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
  swap(page_, other->page_);
  swap(per_page_, other->per_page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListAnnotationsForClusterRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostClustersSearchesRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostClustersSearchesRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
  ::clarifai::api::_PostClustersSearchesRequest_default_instance_._instance.get_mutable()->pagination_ = const_cast< ::clarifai::api::Pagination*>(
      ::clarifai::api::Pagination::internal_default_instance());
}
class PostClustersSearchesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostClustersSearchesRequest* msg);
  static const ::clarifai::api::Pagination& pagination(const PostClustersSearchesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostClustersSearchesRequest::_Internal::user_app_id(const PostClustersSearchesRequest* msg) {
  return *msg->user_app_id_;
}
const ::clarifai::api::Pagination&
PostClustersSearchesRequest::_Internal::pagination(const PostClustersSearchesRequest* msg) {
  return *msg->pagination_;
}
void PostClustersSearchesRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostClustersSearchesRequest::clear_searches() {
  searches_.Clear();
}
PostClustersSearchesRequest::PostClustersSearchesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostClustersSearchesRequest)
}
PostClustersSearchesRequest::PostClustersSearchesRequest(const PostClustersSearchesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      searches_(from.searches_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  if (from._internal_has_pagination()) {
    pagination_ = new ::clarifai::api::Pagination(*from.pagination_);
  } else {
    pagination_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostClustersSearchesRequest)
}

void PostClustersSearchesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostClustersSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pagination_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(pagination_));
}

PostClustersSearchesRequest::~PostClustersSearchesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostClustersSearchesRequest)
  SharedDtor();
}

void PostClustersSearchesRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
  if (this != internal_default_instance()) delete pagination_;
}

void PostClustersSearchesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostClustersSearchesRequest& PostClustersSearchesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostClustersSearchesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostClustersSearchesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostClustersSearchesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  searches_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostClustersSearchesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Search searches = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_searches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Pagination pagination = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostClustersSearchesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostClustersSearchesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Search searches = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_searches_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_searches(i), target, stream);
  }

  // .clarifai.api.Pagination pagination = 3;
  if (this->has_pagination()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pagination(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostClustersSearchesRequest)
  return target;
}

size_t PostClustersSearchesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostClustersSearchesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Search searches = 2;
  total_size += 1UL * this->_internal_searches_size();
  for (const auto& msg : this->searches_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // .clarifai.api.Pagination pagination = 3;
  if (this->has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pagination_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostClustersSearchesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostClustersSearchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostClustersSearchesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostClustersSearchesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostClustersSearchesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostClustersSearchesRequest)
    MergeFrom(*source);
  }
}

void PostClustersSearchesRequest::MergeFrom(const PostClustersSearchesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostClustersSearchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  searches_.MergeFrom(from.searches_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.has_pagination()) {
    _internal_mutable_pagination()->::clarifai::api::Pagination::MergeFrom(from._internal_pagination());
  }
}

void PostClustersSearchesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostClustersSearchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostClustersSearchesRequest::CopyFrom(const PostClustersSearchesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostClustersSearchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostClustersSearchesRequest::IsInitialized() const {
  return true;
}

void PostClustersSearchesRequest::InternalSwap(PostClustersSearchesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  searches_.InternalSwap(&other->searches_);
  swap(user_app_id_, other->user_app_id_);
  swap(pagination_, other->pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostClustersSearchesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiClusterResponse::InitAsDefaultInstance() {
  ::clarifai::api::_MultiClusterResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class MultiClusterResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiClusterResponse* msg);
};

const ::clarifai::api::status::Status&
MultiClusterResponse::_Internal::status(const MultiClusterResponse* msg) {
  return *msg->status_;
}
void MultiClusterResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiClusterResponse::clear_clusters() {
  clusters_.Clear();
}
void MultiClusterResponse::clear_searches() {
  searches_.Clear();
}
MultiClusterResponse::MultiClusterResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MultiClusterResponse)
}
MultiClusterResponse::MultiClusterResponse(const MultiClusterResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      clusters_(from.clusters_),
      searches_(from.searches_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiClusterResponse)
}

void MultiClusterResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiClusterResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

MultiClusterResponse::~MultiClusterResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiClusterResponse)
  SharedDtor();
}

void MultiClusterResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void MultiClusterResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiClusterResponse& MultiClusterResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiClusterResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiClusterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiClusterResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clusters_.Clear();
  searches_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultiClusterResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Cluster clusters = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_clusters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Search searches = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_searches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiClusterResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiClusterResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.Cluster clusters = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_clusters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_clusters(i), target, stream);
  }

  // repeated .clarifai.api.Search searches = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_searches_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_searches(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiClusterResponse)
  return target;
}

size_t MultiClusterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiClusterResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Cluster clusters = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_clusters_size();
  for (const auto& msg : this->clusters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.Search searches = 3;
  total_size += 1UL * this->_internal_searches_size();
  for (const auto& msg : this->searches_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiClusterResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MultiClusterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiClusterResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiClusterResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MultiClusterResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MultiClusterResponse)
    MergeFrom(*source);
  }
}

void MultiClusterResponse::MergeFrom(const MultiClusterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiClusterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  clusters_.MergeFrom(from.clusters_);
  searches_.MergeFrom(from.searches_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void MultiClusterResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MultiClusterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiClusterResponse::CopyFrom(const MultiClusterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiClusterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiClusterResponse::IsInitialized() const {
  return true;
}

void MultiClusterResponse::InternalSwap(MultiClusterResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  clusters_.InternalSwap(&other->clusters_);
  searches_.InternalSwap(&other->searches_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiClusterResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetSubscriptionRequest::InitAsDefaultInstance() {
}
class GetSubscriptionRequest::_Internal {
 public:
};

GetSubscriptionRequest::GetSubscriptionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.GetSubscriptionRequest)
}
GetSubscriptionRequest::GetSubscriptionRequest(const GetSubscriptionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetSubscriptionRequest)
}

void GetSubscriptionRequest::SharedCtor() {
}

GetSubscriptionRequest::~GetSubscriptionRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetSubscriptionRequest)
  SharedDtor();
}

void GetSubscriptionRequest::SharedDtor() {
}

void GetSubscriptionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetSubscriptionRequest& GetSubscriptionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetSubscriptionRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void GetSubscriptionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetSubscriptionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* GetSubscriptionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSubscriptionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetSubscriptionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetSubscriptionRequest)
  return target;
}

size_t GetSubscriptionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetSubscriptionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSubscriptionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.GetSubscriptionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSubscriptionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetSubscriptionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.GetSubscriptionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.GetSubscriptionRequest)
    MergeFrom(*source);
  }
}

void GetSubscriptionRequest::MergeFrom(const GetSubscriptionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetSubscriptionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetSubscriptionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.GetSubscriptionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSubscriptionRequest::CopyFrom(const GetSubscriptionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetSubscriptionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSubscriptionRequest::IsInitialized() const {
  return true;
}

void GetSubscriptionRequest::InternalSwap(GetSubscriptionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSubscriptionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostSubscriptionRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostSubscriptionRequest_default_instance_._instance.get_mutable()->plan_ = const_cast< ::clarifai::api::Plan*>(
      ::clarifai::api::Plan::internal_default_instance());
}
class PostSubscriptionRequest::_Internal {
 public:
  static const ::clarifai::api::Plan& plan(const PostSubscriptionRequest* msg);
};

const ::clarifai::api::Plan&
PostSubscriptionRequest::_Internal::plan(const PostSubscriptionRequest* msg) {
  return *msg->plan_;
}
void PostSubscriptionRequest::clear_plan() {
  if (GetArenaNoVirtual() == nullptr && plan_ != nullptr) {
    delete plan_;
  }
  plan_ = nullptr;
}
PostSubscriptionRequest::PostSubscriptionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostSubscriptionRequest)
}
PostSubscriptionRequest::PostSubscriptionRequest(const PostSubscriptionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  signup_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signup_code().empty()) {
    signup_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signup_code_);
  }
  if (from._internal_has_plan()) {
    plan_ = new ::clarifai::api::Plan(*from.plan_);
  } else {
    plan_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostSubscriptionRequest)
}

void PostSubscriptionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostSubscriptionRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  signup_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  plan_ = nullptr;
}

PostSubscriptionRequest::~PostSubscriptionRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostSubscriptionRequest)
  SharedDtor();
}

void PostSubscriptionRequest::SharedDtor() {
  signup_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete plan_;
}

void PostSubscriptionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostSubscriptionRequest& PostSubscriptionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostSubscriptionRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostSubscriptionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostSubscriptionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signup_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && plan_ != nullptr) {
    delete plan_;
  }
  plan_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostSubscriptionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string signup_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_signup_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostSubscriptionRequest.signup_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Plan plan = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_plan(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostSubscriptionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostSubscriptionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string signup_code = 1;
  if (this->signup_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_signup_code().data(), static_cast<int>(this->_internal_signup_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostSubscriptionRequest.signup_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_signup_code(), target);
  }

  // .clarifai.api.Plan plan = 2;
  if (this->has_plan()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::plan(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostSubscriptionRequest)
  return target;
}

size_t PostSubscriptionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostSubscriptionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string signup_code = 1;
  if (this->signup_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_signup_code());
  }

  // .clarifai.api.Plan plan = 2;
  if (this->has_plan()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *plan_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostSubscriptionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostSubscriptionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostSubscriptionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostSubscriptionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostSubscriptionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostSubscriptionRequest)
    MergeFrom(*source);
  }
}

void PostSubscriptionRequest::MergeFrom(const PostSubscriptionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostSubscriptionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.signup_code().size() > 0) {

    signup_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signup_code_);
  }
  if (from.has_plan()) {
    _internal_mutable_plan()->::clarifai::api::Plan::MergeFrom(from._internal_plan());
  }
}

void PostSubscriptionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostSubscriptionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostSubscriptionRequest::CopyFrom(const PostSubscriptionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostSubscriptionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostSubscriptionRequest::IsInitialized() const {
  return true;
}

void PostSubscriptionRequest::InternalSwap(PostSubscriptionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  signup_code_.Swap(&other->signup_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(plan_, other->plan_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostSubscriptionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SingleSubscriptionResponse::InitAsDefaultInstance() {
  ::clarifai::api::_SingleSubscriptionResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
  ::clarifai::api::_SingleSubscriptionResponse_default_instance_._instance.get_mutable()->plan_ = const_cast< ::clarifai::api::Plan*>(
      ::clarifai::api::Plan::internal_default_instance());
}
class SingleSubscriptionResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleSubscriptionResponse* msg);
  static const ::clarifai::api::Plan& plan(const SingleSubscriptionResponse* msg);
};

const ::clarifai::api::status::Status&
SingleSubscriptionResponse::_Internal::status(const SingleSubscriptionResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::Plan&
SingleSubscriptionResponse::_Internal::plan(const SingleSubscriptionResponse* msg) {
  return *msg->plan_;
}
void SingleSubscriptionResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleSubscriptionResponse::clear_plan() {
  if (GetArenaNoVirtual() == nullptr && plan_ != nullptr) {
    delete plan_;
  }
  plan_ = nullptr;
}
SingleSubscriptionResponse::SingleSubscriptionResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.SingleSubscriptionResponse)
}
SingleSubscriptionResponse::SingleSubscriptionResponse(const SingleSubscriptionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  signup_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signup_code().empty()) {
    signup_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signup_code_);
  }
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_plan()) {
    plan_ = new ::clarifai::api::Plan(*from.plan_);
  } else {
    plan_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleSubscriptionResponse)
}

void SingleSubscriptionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SingleSubscriptionResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  signup_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&plan_) -
      reinterpret_cast<char*>(&status_)) + sizeof(plan_));
}

SingleSubscriptionResponse::~SingleSubscriptionResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleSubscriptionResponse)
  SharedDtor();
}

void SingleSubscriptionResponse::SharedDtor() {
  signup_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete plan_;
}

void SingleSubscriptionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleSubscriptionResponse& SingleSubscriptionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleSubscriptionResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void SingleSubscriptionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleSubscriptionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signup_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && plan_ != nullptr) {
    delete plan_;
  }
  plan_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SingleSubscriptionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Plan plan = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_plan(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string signup_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_signup_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.SingleSubscriptionResponse.signup_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleSubscriptionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleSubscriptionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.Plan plan = 2;
  if (this->has_plan()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::plan(this), target, stream);
  }

  // string signup_code = 3;
  if (this->signup_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_signup_code().data(), static_cast<int>(this->_internal_signup_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.SingleSubscriptionResponse.signup_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_signup_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleSubscriptionResponse)
  return target;
}

size_t SingleSubscriptionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleSubscriptionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string signup_code = 3;
  if (this->signup_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_signup_code());
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.Plan plan = 2;
  if (this->has_plan()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *plan_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleSubscriptionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.SingleSubscriptionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleSubscriptionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleSubscriptionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.SingleSubscriptionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.SingleSubscriptionResponse)
    MergeFrom(*source);
  }
}

void SingleSubscriptionResponse::MergeFrom(const SingleSubscriptionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleSubscriptionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.signup_code().size() > 0) {

    signup_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signup_code_);
  }
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.has_plan()) {
    _internal_mutable_plan()->::clarifai::api::Plan::MergeFrom(from._internal_plan());
  }
}

void SingleSubscriptionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.SingleSubscriptionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleSubscriptionResponse::CopyFrom(const SingleSubscriptionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleSubscriptionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleSubscriptionResponse::IsInitialized() const {
  return true;
}

void SingleSubscriptionResponse::InternalSwap(SingleSubscriptionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  signup_code_.Swap(&other->signup_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
  swap(plan_, other->plan_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleSubscriptionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListCreditCardsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_ListCreditCardsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class ListCreditCardsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListCreditCardsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListCreditCardsRequest::_Internal::user_app_id(const ListCreditCardsRequest* msg) {
  return *msg->user_app_id_;
}
void ListCreditCardsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListCreditCardsRequest::ListCreditCardsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ListCreditCardsRequest)
}
ListCreditCardsRequest::ListCreditCardsRequest(const ListCreditCardsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListCreditCardsRequest)
}

void ListCreditCardsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListCreditCardsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  user_app_id_ = nullptr;
}

ListCreditCardsRequest::~ListCreditCardsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListCreditCardsRequest)
  SharedDtor();
}

void ListCreditCardsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListCreditCardsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListCreditCardsRequest& ListCreditCardsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListCreditCardsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ListCreditCardsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListCreditCardsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ListCreditCardsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListCreditCardsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListCreditCardsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListCreditCardsRequest)
  return target;
}

size_t ListCreditCardsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListCreditCardsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListCreditCardsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ListCreditCardsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListCreditCardsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListCreditCardsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ListCreditCardsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ListCreditCardsRequest)
    MergeFrom(*source);
  }
}

void ListCreditCardsRequest::MergeFrom(const ListCreditCardsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListCreditCardsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void ListCreditCardsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ListCreditCardsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListCreditCardsRequest::CopyFrom(const ListCreditCardsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListCreditCardsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCreditCardsRequest::IsInitialized() const {
  return true;
}

void ListCreditCardsRequest::InternalSwap(ListCreditCardsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListCreditCardsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultipleCreditCardResponse::InitAsDefaultInstance() {
  ::clarifai::api::_MultipleCreditCardResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class MultipleCreditCardResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultipleCreditCardResponse* msg);
};

const ::clarifai::api::status::Status&
MultipleCreditCardResponse::_Internal::status(const MultipleCreditCardResponse* msg) {
  return *msg->status_;
}
void MultipleCreditCardResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultipleCreditCardResponse::clear_cards() {
  cards_.Clear();
}
MultipleCreditCardResponse::MultipleCreditCardResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MultipleCreditCardResponse)
}
MultipleCreditCardResponse::MultipleCreditCardResponse(const MultipleCreditCardResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      cards_(from.cards_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultipleCreditCardResponse)
}

void MultipleCreditCardResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultipleCreditCardResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

MultipleCreditCardResponse::~MultipleCreditCardResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultipleCreditCardResponse)
  SharedDtor();
}

void MultipleCreditCardResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void MultipleCreditCardResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultipleCreditCardResponse& MultipleCreditCardResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultipleCreditCardResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultipleCreditCardResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultipleCreditCardResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cards_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultipleCreditCardResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.CreditCard cards = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultipleCreditCardResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultipleCreditCardResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.CreditCard cards = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cards_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_cards(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultipleCreditCardResponse)
  return target;
}

size_t MultipleCreditCardResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultipleCreditCardResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.CreditCard cards = 2;
  total_size += 1UL * this->_internal_cards_size();
  for (const auto& msg : this->cards_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultipleCreditCardResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MultipleCreditCardResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultipleCreditCardResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultipleCreditCardResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MultipleCreditCardResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MultipleCreditCardResponse)
    MergeFrom(*source);
  }
}

void MultipleCreditCardResponse::MergeFrom(const MultipleCreditCardResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultipleCreditCardResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cards_.MergeFrom(from.cards_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void MultipleCreditCardResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MultipleCreditCardResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultipleCreditCardResponse::CopyFrom(const MultipleCreditCardResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultipleCreditCardResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultipleCreditCardResponse::IsInitialized() const {
  return true;
}

void MultipleCreditCardResponse::InternalSwap(MultipleCreditCardResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cards_.InternalSwap(&other->cards_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultipleCreditCardResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostCreditCardRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostCreditCardRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
  ::clarifai::api::_PostCreditCardRequest_default_instance_._instance.get_mutable()->card_ = const_cast< ::clarifai::api::CreditCard*>(
      ::clarifai::api::CreditCard::internal_default_instance());
}
class PostCreditCardRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostCreditCardRequest* msg);
  static const ::clarifai::api::CreditCard& card(const PostCreditCardRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostCreditCardRequest::_Internal::user_app_id(const PostCreditCardRequest* msg) {
  return *msg->user_app_id_;
}
const ::clarifai::api::CreditCard&
PostCreditCardRequest::_Internal::card(const PostCreditCardRequest* msg) {
  return *msg->card_;
}
void PostCreditCardRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostCreditCardRequest::clear_card() {
  if (GetArenaNoVirtual() == nullptr && card_ != nullptr) {
    delete card_;
  }
  card_ = nullptr;
}
PostCreditCardRequest::PostCreditCardRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostCreditCardRequest)
}
PostCreditCardRequest::PostCreditCardRequest(const PostCreditCardRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_source().empty()) {
    source_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  if (from._internal_has_card()) {
    card_ = new ::clarifai::api::CreditCard(*from.card_);
  } else {
    card_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostCreditCardRequest)
}

void PostCreditCardRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostCreditCardRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&card_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(card_));
}

PostCreditCardRequest::~PostCreditCardRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostCreditCardRequest)
  SharedDtor();
}

void PostCreditCardRequest::SharedDtor() {
  source_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
  if (this != internal_default_instance()) delete card_;
}

void PostCreditCardRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostCreditCardRequest& PostCreditCardRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostCreditCardRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostCreditCardRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostCreditCardRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && card_ != nullptr) {
    delete card_;
  }
  card_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostCreditCardRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string source = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_source();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostCreditCardRequest.source"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.CreditCard card = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_card(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostCreditCardRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostCreditCardRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string source = 2;
  if (this->source().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source().data(), static_cast<int>(this->_internal_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostCreditCardRequest.source");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_source(), target);
  }

  // .clarifai.api.CreditCard card = 3;
  if (this->has_card()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::card(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostCreditCardRequest)
  return target;
}

size_t PostCreditCardRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostCreditCardRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string source = 2;
  if (this->source().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // .clarifai.api.CreditCard card = 3;
  if (this->has_card()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *card_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostCreditCardRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostCreditCardRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostCreditCardRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostCreditCardRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostCreditCardRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostCreditCardRequest)
    MergeFrom(*source);
  }
}

void PostCreditCardRequest::MergeFrom(const PostCreditCardRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostCreditCardRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.source().size() > 0) {

    source_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.has_card()) {
    _internal_mutable_card()->::clarifai::api::CreditCard::MergeFrom(from._internal_card());
  }
}

void PostCreditCardRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostCreditCardRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostCreditCardRequest::CopyFrom(const PostCreditCardRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostCreditCardRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostCreditCardRequest::IsInitialized() const {
  return true;
}

void PostCreditCardRequest::InternalSwap(PostCreditCardRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  source_.Swap(&other->source_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
  swap(card_, other->card_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostCreditCardRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SingleCreditCardResponse::InitAsDefaultInstance() {
  ::clarifai::api::_SingleCreditCardResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
  ::clarifai::api::_SingleCreditCardResponse_default_instance_._instance.get_mutable()->card_ = const_cast< ::clarifai::api::CreditCard*>(
      ::clarifai::api::CreditCard::internal_default_instance());
}
class SingleCreditCardResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleCreditCardResponse* msg);
  static const ::clarifai::api::CreditCard& card(const SingleCreditCardResponse* msg);
};

const ::clarifai::api::status::Status&
SingleCreditCardResponse::_Internal::status(const SingleCreditCardResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::CreditCard&
SingleCreditCardResponse::_Internal::card(const SingleCreditCardResponse* msg) {
  return *msg->card_;
}
void SingleCreditCardResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleCreditCardResponse::clear_card() {
  if (GetArenaNoVirtual() == nullptr && card_ != nullptr) {
    delete card_;
  }
  card_ = nullptr;
}
SingleCreditCardResponse::SingleCreditCardResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.SingleCreditCardResponse)
}
SingleCreditCardResponse::SingleCreditCardResponse(const SingleCreditCardResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_card()) {
    card_ = new ::clarifai::api::CreditCard(*from.card_);
  } else {
    card_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleCreditCardResponse)
}

void SingleCreditCardResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SingleCreditCardResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&card_) -
      reinterpret_cast<char*>(&status_)) + sizeof(card_));
}

SingleCreditCardResponse::~SingleCreditCardResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleCreditCardResponse)
  SharedDtor();
}

void SingleCreditCardResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete card_;
}

void SingleCreditCardResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleCreditCardResponse& SingleCreditCardResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleCreditCardResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void SingleCreditCardResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleCreditCardResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && card_ != nullptr) {
    delete card_;
  }
  card_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SingleCreditCardResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.CreditCard card = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_card(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleCreditCardResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleCreditCardResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.CreditCard card = 2;
  if (this->has_card()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::card(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleCreditCardResponse)
  return target;
}

size_t SingleCreditCardResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleCreditCardResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.CreditCard card = 2;
  if (this->has_card()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *card_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleCreditCardResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.SingleCreditCardResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleCreditCardResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleCreditCardResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.SingleCreditCardResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.SingleCreditCardResponse)
    MergeFrom(*source);
  }
}

void SingleCreditCardResponse::MergeFrom(const SingleCreditCardResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleCreditCardResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.has_card()) {
    _internal_mutable_card()->::clarifai::api::CreditCard::MergeFrom(from._internal_card());
  }
}

void SingleCreditCardResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.SingleCreditCardResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleCreditCardResponse::CopyFrom(const SingleCreditCardResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleCreditCardResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleCreditCardResponse::IsInitialized() const {
  return true;
}

void SingleCreditCardResponse::InternalSwap(SingleCreditCardResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(card_, other->card_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleCreditCardResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteCreditCardRequest::InitAsDefaultInstance() {
  ::clarifai::api::_DeleteCreditCardRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
  ::clarifai::api::_DeleteCreditCardRequest_default_instance_._instance.get_mutable()->card_ = const_cast< ::clarifai::api::CreditCard*>(
      ::clarifai::api::CreditCard::internal_default_instance());
}
class DeleteCreditCardRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteCreditCardRequest* msg);
  static const ::clarifai::api::CreditCard& card(const DeleteCreditCardRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteCreditCardRequest::_Internal::user_app_id(const DeleteCreditCardRequest* msg) {
  return *msg->user_app_id_;
}
const ::clarifai::api::CreditCard&
DeleteCreditCardRequest::_Internal::card(const DeleteCreditCardRequest* msg) {
  return *msg->card_;
}
void DeleteCreditCardRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void DeleteCreditCardRequest::clear_card() {
  if (GetArenaNoVirtual() == nullptr && card_ != nullptr) {
    delete card_;
  }
  card_ = nullptr;
}
DeleteCreditCardRequest::DeleteCreditCardRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.DeleteCreditCardRequest)
}
DeleteCreditCardRequest::DeleteCreditCardRequest(const DeleteCreditCardRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  if (from._internal_has_card()) {
    card_ = new ::clarifai::api::CreditCard(*from.card_);
  } else {
    card_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteCreditCardRequest)
}

void DeleteCreditCardRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteCreditCardRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&card_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(card_));
}

DeleteCreditCardRequest::~DeleteCreditCardRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteCreditCardRequest)
  SharedDtor();
}

void DeleteCreditCardRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
  if (this != internal_default_instance()) delete card_;
}

void DeleteCreditCardRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteCreditCardRequest& DeleteCreditCardRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteCreditCardRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void DeleteCreditCardRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteCreditCardRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && card_ != nullptr) {
    delete card_;
  }
  card_ = nullptr;
  _internal_metadata_.Clear();
}

const char* DeleteCreditCardRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.CreditCard card = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_card(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteCreditCardRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteCreditCardRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // .clarifai.api.CreditCard card = 2;
  if (this->has_card()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::card(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteCreditCardRequest)
  return target;
}

size_t DeleteCreditCardRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteCreditCardRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // .clarifai.api.CreditCard card = 2;
  if (this->has_card()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *card_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteCreditCardRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.DeleteCreditCardRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteCreditCardRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteCreditCardRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.DeleteCreditCardRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.DeleteCreditCardRequest)
    MergeFrom(*source);
  }
}

void DeleteCreditCardRequest::MergeFrom(const DeleteCreditCardRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteCreditCardRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.has_card()) {
    _internal_mutable_card()->::clarifai::api::CreditCard::MergeFrom(from._internal_card());
  }
}

void DeleteCreditCardRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.DeleteCreditCardRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteCreditCardRequest::CopyFrom(const DeleteCreditCardRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteCreditCardRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteCreditCardRequest::IsInitialized() const {
  return true;
}

void DeleteCreditCardRequest::InternalSwap(DeleteCreditCardRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_app_id_, other->user_app_id_);
  swap(card_, other->card_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteCreditCardRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PatchCreditCardsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PatchCreditCardsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
  ::clarifai::api::_PatchCreditCardsRequest_default_instance_._instance.get_mutable()->action_ = const_cast< ::clarifai::api::PatchAction*>(
      ::clarifai::api::PatchAction::internal_default_instance());
}
class PatchCreditCardsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchCreditCardsRequest* msg);
  static const ::clarifai::api::PatchAction& action(const PatchCreditCardsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchCreditCardsRequest::_Internal::user_app_id(const PatchCreditCardsRequest* msg) {
  return *msg->user_app_id_;
}
const ::clarifai::api::PatchAction&
PatchCreditCardsRequest::_Internal::action(const PatchCreditCardsRequest* msg) {
  return *msg->action_;
}
void PatchCreditCardsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PatchCreditCardsRequest::clear_cards() {
  cards_.Clear();
}
void PatchCreditCardsRequest::clear_action() {
  if (GetArenaNoVirtual() == nullptr && action_ != nullptr) {
    delete action_;
  }
  action_ = nullptr;
}
PatchCreditCardsRequest::PatchCreditCardsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PatchCreditCardsRequest)
}
PatchCreditCardsRequest::PatchCreditCardsRequest(const PatchCreditCardsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      cards_(from.cards_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  if (from._internal_has_action()) {
    action_ = new ::clarifai::api::PatchAction(*from.action_);
  } else {
    action_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchCreditCardsRequest)
}

void PatchCreditCardsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PatchCreditCardsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(action_));
}

PatchCreditCardsRequest::~PatchCreditCardsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchCreditCardsRequest)
  SharedDtor();
}

void PatchCreditCardsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
  if (this != internal_default_instance()) delete action_;
}

void PatchCreditCardsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PatchCreditCardsRequest& PatchCreditCardsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PatchCreditCardsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PatchCreditCardsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchCreditCardsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cards_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && action_ != nullptr) {
    delete action_;
  }
  action_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PatchCreditCardsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.CreditCard cards = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .clarifai.api.PatchAction action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_action(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PatchCreditCardsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchCreditCardsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.CreditCard cards = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cards_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_cards(i), target, stream);
  }

  // .clarifai.api.PatchAction action = 3;
  if (this->has_action()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::action(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchCreditCardsRequest)
  return target;
}

size_t PatchCreditCardsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchCreditCardsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.CreditCard cards = 2;
  total_size += 1UL * this->_internal_cards_size();
  for (const auto& msg : this->cards_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // .clarifai.api.PatchAction action = 3;
  if (this->has_action()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *action_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PatchCreditCardsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PatchCreditCardsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PatchCreditCardsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PatchCreditCardsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PatchCreditCardsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PatchCreditCardsRequest)
    MergeFrom(*source);
  }
}

void PatchCreditCardsRequest::MergeFrom(const PatchCreditCardsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchCreditCardsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cards_.MergeFrom(from.cards_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.has_action()) {
    _internal_mutable_action()->::clarifai::api::PatchAction::MergeFrom(from._internal_action());
  }
}

void PatchCreditCardsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PatchCreditCardsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatchCreditCardsRequest::CopyFrom(const PatchCreditCardsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchCreditCardsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchCreditCardsRequest::IsInitialized() const {
  return true;
}

void PatchCreditCardsRequest::InternalSwap(PatchCreditCardsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cards_.InternalSwap(&other->cards_);
  swap(user_app_id_, other->user_app_id_);
  swap(action_, other->action_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchCreditCardsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostHistoricalUsageRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostHistoricalUsageRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PostHistoricalUsageRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostHistoricalUsageRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostHistoricalUsageRequest::_Internal::user_app_id(const PostHistoricalUsageRequest* msg) {
  return *msg->user_app_id_;
}
void PostHistoricalUsageRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
PostHistoricalUsageRequest::PostHistoricalUsageRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostHistoricalUsageRequest)
}
PostHistoricalUsageRequest::PostHistoricalUsageRequest(const PostHistoricalUsageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostHistoricalUsageRequest)
}

void PostHistoricalUsageRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostHistoricalUsageRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  user_app_id_ = nullptr;
}

PostHistoricalUsageRequest::~PostHistoricalUsageRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostHistoricalUsageRequest)
  SharedDtor();
}

void PostHistoricalUsageRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostHistoricalUsageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostHistoricalUsageRequest& PostHistoricalUsageRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostHistoricalUsageRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostHistoricalUsageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostHistoricalUsageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostHistoricalUsageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostHistoricalUsageRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostHistoricalUsageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostHistoricalUsageRequest)
  return target;
}

size_t PostHistoricalUsageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostHistoricalUsageRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostHistoricalUsageRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostHistoricalUsageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostHistoricalUsageRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostHistoricalUsageRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostHistoricalUsageRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostHistoricalUsageRequest)
    MergeFrom(*source);
  }
}

void PostHistoricalUsageRequest::MergeFrom(const PostHistoricalUsageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostHistoricalUsageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void PostHistoricalUsageRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostHistoricalUsageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostHistoricalUsageRequest::CopyFrom(const PostHistoricalUsageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostHistoricalUsageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostHistoricalUsageRequest::IsInitialized() const {
  return true;
}

void PostHistoricalUsageRequest::InternalSwap(PostHistoricalUsageRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostHistoricalUsageRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostHistoricalUsageResponse::InitAsDefaultInstance() {
  ::clarifai::api::_PostHistoricalUsageResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
  ::clarifai::api::_PostHistoricalUsageResponse_default_instance_._instance.get_mutable()->interval_ = const_cast< PROTOBUF_NAMESPACE_ID::Duration*>(
      PROTOBUF_NAMESPACE_ID::Duration::internal_default_instance());
}
class PostHistoricalUsageResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const PostHistoricalUsageResponse* msg);
  static const PROTOBUF_NAMESPACE_ID::Duration& interval(const PostHistoricalUsageResponse* msg);
};

const ::clarifai::api::status::Status&
PostHistoricalUsageResponse::_Internal::status(const PostHistoricalUsageResponse* msg) {
  return *msg->status_;
}
const PROTOBUF_NAMESPACE_ID::Duration&
PostHistoricalUsageResponse::_Internal::interval(const PostHistoricalUsageResponse* msg) {
  return *msg->interval_;
}
void PostHistoricalUsageResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void PostHistoricalUsageResponse::clear_interval() {
  if (GetArenaNoVirtual() == nullptr && interval_ != nullptr) {
    delete interval_;
  }
  interval_ = nullptr;
}
void PostHistoricalUsageResponse::clear_usage() {
  usage_.Clear();
}
PostHistoricalUsageResponse::PostHistoricalUsageResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostHistoricalUsageResponse)
}
PostHistoricalUsageResponse::PostHistoricalUsageResponse(const PostHistoricalUsageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      usage_(from.usage_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_interval()) {
    interval_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.interval_);
  } else {
    interval_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostHistoricalUsageResponse)
}

void PostHistoricalUsageResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostHistoricalUsageResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&interval_) -
      reinterpret_cast<char*>(&status_)) + sizeof(interval_));
}

PostHistoricalUsageResponse::~PostHistoricalUsageResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostHistoricalUsageResponse)
  SharedDtor();
}

void PostHistoricalUsageResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete interval_;
}

void PostHistoricalUsageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostHistoricalUsageResponse& PostHistoricalUsageResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostHistoricalUsageResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostHistoricalUsageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostHistoricalUsageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  usage_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && interval_ != nullptr) {
    delete interval_;
  }
  interval_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostHistoricalUsageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Duration interval = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_interval(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.DimensionList usage = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_usage(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostHistoricalUsageResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostHistoricalUsageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .google.protobuf.Duration interval = 2;
  if (this->has_interval()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::interval(this), target, stream);
  }

  // repeated .clarifai.api.DimensionList usage = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_usage_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_usage(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostHistoricalUsageResponse)
  return target;
}

size_t PostHistoricalUsageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostHistoricalUsageResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.DimensionList usage = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_usage_size();
  for (const auto& msg : this->usage_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .google.protobuf.Duration interval = 2;
  if (this->has_interval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *interval_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostHistoricalUsageResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostHistoricalUsageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PostHistoricalUsageResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostHistoricalUsageResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostHistoricalUsageResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostHistoricalUsageResponse)
    MergeFrom(*source);
  }
}

void PostHistoricalUsageResponse::MergeFrom(const PostHistoricalUsageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostHistoricalUsageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  usage_.MergeFrom(from.usage_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.has_interval()) {
    _internal_mutable_interval()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_interval());
  }
}

void PostHistoricalUsageResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostHistoricalUsageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostHistoricalUsageResponse::CopyFrom(const PostHistoricalUsageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostHistoricalUsageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostHistoricalUsageResponse::IsInitialized() const {
  return true;
}

void PostHistoricalUsageResponse::InternalSwap(PostHistoricalUsageResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  usage_.InternalSwap(&other->usage_);
  swap(status_, other->status_);
  swap(interval_, other->interval_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostHistoricalUsageResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetRealtimeUsageRequest::InitAsDefaultInstance() {
  ::clarifai::api::_GetRealtimeUsageRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class GetRealtimeUsageRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetRealtimeUsageRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetRealtimeUsageRequest::_Internal::user_app_id(const GetRealtimeUsageRequest* msg) {
  return *msg->user_app_id_;
}
void GetRealtimeUsageRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetRealtimeUsageRequest::GetRealtimeUsageRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.GetRealtimeUsageRequest)
}
GetRealtimeUsageRequest::GetRealtimeUsageRequest(const GetRealtimeUsageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetRealtimeUsageRequest)
}

void GetRealtimeUsageRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetRealtimeUsageRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  user_app_id_ = nullptr;
}

GetRealtimeUsageRequest::~GetRealtimeUsageRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetRealtimeUsageRequest)
  SharedDtor();
}

void GetRealtimeUsageRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetRealtimeUsageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetRealtimeUsageRequest& GetRealtimeUsageRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetRealtimeUsageRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void GetRealtimeUsageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetRealtimeUsageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetRealtimeUsageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetRealtimeUsageRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetRealtimeUsageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetRealtimeUsageRequest)
  return target;
}

size_t GetRealtimeUsageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetRealtimeUsageRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRealtimeUsageRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.GetRealtimeUsageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRealtimeUsageRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetRealtimeUsageRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.GetRealtimeUsageRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.GetRealtimeUsageRequest)
    MergeFrom(*source);
  }
}

void GetRealtimeUsageRequest::MergeFrom(const GetRealtimeUsageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetRealtimeUsageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void GetRealtimeUsageRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.GetRealtimeUsageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRealtimeUsageRequest::CopyFrom(const GetRealtimeUsageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetRealtimeUsageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRealtimeUsageRequest::IsInitialized() const {
  return true;
}

void GetRealtimeUsageRequest::InternalSwap(GetRealtimeUsageRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRealtimeUsageRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetRealtimeUsageResponse::InitAsDefaultInstance() {
  ::clarifai::api::_GetRealtimeUsageResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class GetRealtimeUsageResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const GetRealtimeUsageResponse* msg);
};

const ::clarifai::api::status::Status&
GetRealtimeUsageResponse::_Internal::status(const GetRealtimeUsageResponse* msg) {
  return *msg->status_;
}
void GetRealtimeUsageResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void GetRealtimeUsageResponse::clear_realtime_usage() {
  realtime_usage_.Clear();
}
GetRealtimeUsageResponse::GetRealtimeUsageResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.GetRealtimeUsageResponse)
}
GetRealtimeUsageResponse::GetRealtimeUsageResponse(const GetRealtimeUsageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      realtime_usage_(from.realtime_usage_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetRealtimeUsageResponse)
}

void GetRealtimeUsageResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetRealtimeUsageResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

GetRealtimeUsageResponse::~GetRealtimeUsageResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetRealtimeUsageResponse)
  SharedDtor();
}

void GetRealtimeUsageResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void GetRealtimeUsageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetRealtimeUsageResponse& GetRealtimeUsageResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetRealtimeUsageResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void GetRealtimeUsageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetRealtimeUsageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  realtime_usage_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetRealtimeUsageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.RealtimeCount realtime_usage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_realtime_usage(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetRealtimeUsageResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetRealtimeUsageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.RealtimeCount realtime_usage = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_realtime_usage_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_realtime_usage(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetRealtimeUsageResponse)
  return target;
}

size_t GetRealtimeUsageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetRealtimeUsageResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.RealtimeCount realtime_usage = 4;
  total_size += 1UL * this->_internal_realtime_usage_size();
  for (const auto& msg : this->realtime_usage_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRealtimeUsageResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.GetRealtimeUsageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRealtimeUsageResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetRealtimeUsageResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.GetRealtimeUsageResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.GetRealtimeUsageResponse)
    MergeFrom(*source);
  }
}

void GetRealtimeUsageResponse::MergeFrom(const GetRealtimeUsageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetRealtimeUsageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  realtime_usage_.MergeFrom(from.realtime_usage_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void GetRealtimeUsageResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.GetRealtimeUsageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRealtimeUsageResponse::CopyFrom(const GetRealtimeUsageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetRealtimeUsageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRealtimeUsageResponse::IsInitialized() const {
  return true;
}

void GetRealtimeUsageResponse::InternalSwap(GetRealtimeUsageResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  realtime_usage_.InternalSwap(&other->realtime_usage_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRealtimeUsageResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListUsageIntervalsRequest::InitAsDefaultInstance() {
}
class ListUsageIntervalsRequest::_Internal {
 public:
};

ListUsageIntervalsRequest::ListUsageIntervalsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ListUsageIntervalsRequest)
}
ListUsageIntervalsRequest::ListUsageIntervalsRequest(const ListUsageIntervalsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListUsageIntervalsRequest)
}

void ListUsageIntervalsRequest::SharedCtor() {
}

ListUsageIntervalsRequest::~ListUsageIntervalsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListUsageIntervalsRequest)
  SharedDtor();
}

void ListUsageIntervalsRequest::SharedDtor() {
}

void ListUsageIntervalsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListUsageIntervalsRequest& ListUsageIntervalsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListUsageIntervalsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ListUsageIntervalsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListUsageIntervalsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* ListUsageIntervalsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListUsageIntervalsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListUsageIntervalsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListUsageIntervalsRequest)
  return target;
}

size_t ListUsageIntervalsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListUsageIntervalsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListUsageIntervalsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ListUsageIntervalsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListUsageIntervalsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListUsageIntervalsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ListUsageIntervalsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ListUsageIntervalsRequest)
    MergeFrom(*source);
  }
}

void ListUsageIntervalsRequest::MergeFrom(const ListUsageIntervalsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListUsageIntervalsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ListUsageIntervalsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ListUsageIntervalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListUsageIntervalsRequest::CopyFrom(const ListUsageIntervalsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListUsageIntervalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListUsageIntervalsRequest::IsInitialized() const {
  return true;
}

void ListUsageIntervalsRequest::InternalSwap(ListUsageIntervalsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListUsageIntervalsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListUsageIntervalsResponse::InitAsDefaultInstance() {
  ::clarifai::api::_ListUsageIntervalsResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class ListUsageIntervalsResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const ListUsageIntervalsResponse* msg);
};

const ::clarifai::api::status::Status&
ListUsageIntervalsResponse::_Internal::status(const ListUsageIntervalsResponse* msg) {
  return *msg->status_;
}
void ListUsageIntervalsResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void ListUsageIntervalsResponse::clear_usage_intervals() {
  usage_intervals_.Clear();
}
ListUsageIntervalsResponse::ListUsageIntervalsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ListUsageIntervalsResponse)
}
ListUsageIntervalsResponse::ListUsageIntervalsResponse(const ListUsageIntervalsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      usage_intervals_(from.usage_intervals_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListUsageIntervalsResponse)
}

void ListUsageIntervalsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListUsageIntervalsResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

ListUsageIntervalsResponse::~ListUsageIntervalsResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListUsageIntervalsResponse)
  SharedDtor();
}

void ListUsageIntervalsResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void ListUsageIntervalsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListUsageIntervalsResponse& ListUsageIntervalsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListUsageIntervalsResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ListUsageIntervalsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListUsageIntervalsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  usage_intervals_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ListUsageIntervalsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.UsageInterval usage_intervals = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_usage_intervals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListUsageIntervalsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListUsageIntervalsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.UsageInterval usage_intervals = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_usage_intervals_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_usage_intervals(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListUsageIntervalsResponse)
  return target;
}

size_t ListUsageIntervalsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListUsageIntervalsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.UsageInterval usage_intervals = 2;
  total_size += 1UL * this->_internal_usage_intervals_size();
  for (const auto& msg : this->usage_intervals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListUsageIntervalsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ListUsageIntervalsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListUsageIntervalsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListUsageIntervalsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ListUsageIntervalsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ListUsageIntervalsResponse)
    MergeFrom(*source);
  }
}

void ListUsageIntervalsResponse::MergeFrom(const ListUsageIntervalsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListUsageIntervalsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  usage_intervals_.MergeFrom(from.usage_intervals_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void ListUsageIntervalsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ListUsageIntervalsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListUsageIntervalsResponse::CopyFrom(const ListUsageIntervalsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListUsageIntervalsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListUsageIntervalsResponse::IsInitialized() const {
  return true;
}

void ListUsageIntervalsResponse::InternalSwap(ListUsageIntervalsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  usage_intervals_.InternalSwap(&other->usage_intervals_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListUsageIntervalsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListUserBillingCyclesRequest::InitAsDefaultInstance() {
  ::clarifai::api::_ListUserBillingCyclesRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class ListUserBillingCyclesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListUserBillingCyclesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListUserBillingCyclesRequest::_Internal::user_app_id(const ListUserBillingCyclesRequest* msg) {
  return *msg->user_app_id_;
}
void ListUserBillingCyclesRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListUserBillingCyclesRequest::ListUserBillingCyclesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ListUserBillingCyclesRequest)
}
ListUserBillingCyclesRequest::ListUserBillingCyclesRequest(const ListUserBillingCyclesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListUserBillingCyclesRequest)
}

void ListUserBillingCyclesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListUserBillingCyclesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

ListUserBillingCyclesRequest::~ListUserBillingCyclesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListUserBillingCyclesRequest)
  SharedDtor();
}

void ListUserBillingCyclesRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListUserBillingCyclesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListUserBillingCyclesRequest& ListUserBillingCyclesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListUserBillingCyclesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ListUserBillingCyclesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListUserBillingCyclesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear();
}

const char* ListUserBillingCyclesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListUserBillingCyclesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListUserBillingCyclesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // uint32 page = 2;
  if (this->page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListUserBillingCyclesRequest)
  return target;
}

size_t ListUserBillingCyclesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListUserBillingCyclesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 2;
  if (this->page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->per_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_per_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListUserBillingCyclesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ListUserBillingCyclesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListUserBillingCyclesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListUserBillingCyclesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ListUserBillingCyclesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ListUserBillingCyclesRequest)
    MergeFrom(*source);
  }
}

void ListUserBillingCyclesRequest::MergeFrom(const ListUserBillingCyclesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListUserBillingCyclesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from.per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
}

void ListUserBillingCyclesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ListUserBillingCyclesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListUserBillingCyclesRequest::CopyFrom(const ListUserBillingCyclesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListUserBillingCyclesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListUserBillingCyclesRequest::IsInitialized() const {
  return true;
}

void ListUserBillingCyclesRequest::InternalSwap(ListUserBillingCyclesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_app_id_, other->user_app_id_);
  swap(page_, other->page_);
  swap(per_page_, other->per_page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListUserBillingCyclesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListUserBillingCyclesResponse::InitAsDefaultInstance() {
  ::clarifai::api::_ListUserBillingCyclesResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class ListUserBillingCyclesResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const ListUserBillingCyclesResponse* msg);
};

const ::clarifai::api::status::Status&
ListUserBillingCyclesResponse::_Internal::status(const ListUserBillingCyclesResponse* msg) {
  return *msg->status_;
}
void ListUserBillingCyclesResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void ListUserBillingCyclesResponse::clear_billing_cycles() {
  billing_cycles_.Clear();
}
ListUserBillingCyclesResponse::ListUserBillingCyclesResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ListUserBillingCyclesResponse)
}
ListUserBillingCyclesResponse::ListUserBillingCyclesResponse(const ListUserBillingCyclesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      billing_cycles_(from.billing_cycles_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListUserBillingCyclesResponse)
}

void ListUserBillingCyclesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListUserBillingCyclesResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

ListUserBillingCyclesResponse::~ListUserBillingCyclesResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListUserBillingCyclesResponse)
  SharedDtor();
}

void ListUserBillingCyclesResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void ListUserBillingCyclesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListUserBillingCyclesResponse& ListUserBillingCyclesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListUserBillingCyclesResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ListUserBillingCyclesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListUserBillingCyclesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  billing_cycles_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ListUserBillingCyclesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.BillingCycle billing_cycles = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_billing_cycles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListUserBillingCyclesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListUserBillingCyclesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.BillingCycle billing_cycles = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_billing_cycles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_billing_cycles(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListUserBillingCyclesResponse)
  return target;
}

size_t ListUserBillingCyclesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListUserBillingCyclesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.BillingCycle billing_cycles = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_billing_cycles_size();
  for (const auto& msg : this->billing_cycles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListUserBillingCyclesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ListUserBillingCyclesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListUserBillingCyclesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListUserBillingCyclesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ListUserBillingCyclesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ListUserBillingCyclesResponse)
    MergeFrom(*source);
  }
}

void ListUserBillingCyclesResponse::MergeFrom(const ListUserBillingCyclesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListUserBillingCyclesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  billing_cycles_.MergeFrom(from.billing_cycles_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void ListUserBillingCyclesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ListUserBillingCyclesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListUserBillingCyclesResponse::CopyFrom(const ListUserBillingCyclesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListUserBillingCyclesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListUserBillingCyclesResponse::IsInitialized() const {
  return true;
}

void ListUserBillingCyclesResponse::InternalSwap(ListUserBillingCyclesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  billing_cycles_.InternalSwap(&other->billing_cycles_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListUserBillingCyclesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostUsageRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostUsageRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PostUsageRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostUsageRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostUsageRequest::_Internal::user_app_id(const PostUsageRequest* msg) {
  return *msg->user_app_id_;
}
void PostUsageRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostUsageRequest::clear_events_collections() {
  events_collections_.Clear();
}
PostUsageRequest::PostUsageRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostUsageRequest)
}
PostUsageRequest::PostUsageRequest(const PostUsageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      events_collections_(from.events_collections_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_public_key().empty()) {
    public_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signature().empty()) {
    signature_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostUsageRequest)
}

void PostUsageRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostUsageRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

PostUsageRequest::~PostUsageRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostUsageRequest)
  SharedDtor();
}

void PostUsageRequest::SharedDtor() {
  public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostUsageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostUsageRequest& PostUsageRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostUsageRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostUsageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostUsageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_collections_.Clear();
  public_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostUsageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.EventsCollection events_collections = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events_collections(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string public_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostUsageRequest.public_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes signature = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostUsageRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostUsageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.EventsCollection events_collections = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_events_collections_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_events_collections(i), target, stream);
  }

  // string public_key = 3;
  if (this->public_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_public_key().data(), static_cast<int>(this->_internal_public_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostUsageRequest.public_key");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_public_key(), target);
  }

  // bytes signature = 4;
  if (this->signature().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostUsageRequest)
  return target;
}

size_t PostUsageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostUsageRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.EventsCollection events_collections = 2;
  total_size += 1UL * this->_internal_events_collections_size();
  for (const auto& msg : this->events_collections_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string public_key = 3;
  if (this->public_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_public_key());
  }

  // bytes signature = 4;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostUsageRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostUsageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostUsageRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostUsageRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostUsageRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostUsageRequest)
    MergeFrom(*source);
  }
}

void PostUsageRequest::MergeFrom(const PostUsageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostUsageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_collections_.MergeFrom(from.events_collections_);
  if (from.public_key().size() > 0) {

    public_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  if (from.signature().size() > 0) {

    signature_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void PostUsageRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostUsageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostUsageRequest::CopyFrom(const PostUsageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostUsageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostUsageRequest::IsInitialized() const {
  return true;
}

void PostUsageRequest::InternalSwap(PostUsageRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  events_collections_.InternalSwap(&other->events_collections_);
  public_key_.Swap(&other->public_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  signature_.Swap(&other->signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostUsageRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostUsageResponse::InitAsDefaultInstance() {
  ::clarifai::api::_PostUsageResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class PostUsageResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const PostUsageResponse* msg);
};

const ::clarifai::api::status::Status&
PostUsageResponse::_Internal::status(const PostUsageResponse* msg) {
  return *msg->status_;
}
void PostUsageResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
PostUsageResponse::PostUsageResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostUsageResponse)
}
PostUsageResponse::PostUsageResponse(const PostUsageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostUsageResponse)
}

void PostUsageResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostUsageResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

PostUsageResponse::~PostUsageResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostUsageResponse)
  SharedDtor();
}

void PostUsageResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void PostUsageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostUsageResponse& PostUsageResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostUsageResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostUsageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostUsageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostUsageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostUsageResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostUsageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostUsageResponse)
  return target;
}

size_t PostUsageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostUsageResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostUsageResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostUsageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PostUsageResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostUsageResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostUsageResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostUsageResponse)
    MergeFrom(*source);
  }
}

void PostUsageResponse::MergeFrom(const PostUsageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostUsageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void PostUsageResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostUsageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostUsageResponse::CopyFrom(const PostUsageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostUsageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostUsageResponse::IsInitialized() const {
  return true;
}

void PostUsageResponse::InternalSwap(PostUsageResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostUsageResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetUserRequest::InitAsDefaultInstance() {
  ::clarifai::api::_GetUserRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class GetUserRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetUserRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetUserRequest::_Internal::user_app_id(const GetUserRequest* msg) {
  return *msg->user_app_id_;
}
void GetUserRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetUserRequest::GetUserRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.GetUserRequest)
}
GetUserRequest::GetUserRequest(const GetUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetUserRequest)
}

void GetUserRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetUserRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  user_app_id_ = nullptr;
}

GetUserRequest::~GetUserRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetUserRequest)
  SharedDtor();
}

void GetUserRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetUserRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetUserRequest& GetUserRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetUserRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void GetUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetUserRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetUserRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetUserRequest)
  return target;
}

size_t GetUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetUserRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetUserRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.GetUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetUserRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetUserRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.GetUserRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.GetUserRequest)
    MergeFrom(*source);
  }
}

void GetUserRequest::MergeFrom(const GetUserRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void GetUserRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.GetUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUserRequest::CopyFrom(const GetUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserRequest::IsInitialized() const {
  return true;
}

void GetUserRequest::InternalSwap(GetUserRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetUserRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostUserConsentRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostUserConsentRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PostUserConsentRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostUserConsentRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostUserConsentRequest::_Internal::user_app_id(const PostUserConsentRequest* msg) {
  return *msg->user_app_id_;
}
void PostUserConsentRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
PostUserConsentRequest::PostUserConsentRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostUserConsentRequest)
}
PostUserConsentRequest::PostUserConsentRequest(const PostUserConsentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      fields_(from.fields_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  consent_ = from.consent_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostUserConsentRequest)
}

void PostUserConsentRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostUserConsentRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&consent_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(consent_));
}

PostUserConsentRequest::~PostUserConsentRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostUserConsentRequest)
  SharedDtor();
}

void PostUserConsentRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostUserConsentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostUserConsentRequest& PostUserConsentRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostUserConsentRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostUserConsentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostUserConsentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  consent_ = false;
  _internal_metadata_.Clear();
}

const char* PostUserConsentRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool consent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          consent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string fields = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_fields();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostUserConsentRequest.fields"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostUserConsentRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostUserConsentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // bool consent = 2;
  if (this->consent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_consent(), target);
  }

  // repeated string fields = 3;
  for (int i = 0, n = this->_internal_fields_size(); i < n; i++) {
    const auto& s = this->_internal_fields(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostUserConsentRequest.fields");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostUserConsentRequest)
  return target;
}

size_t PostUserConsentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostUserConsentRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string fields = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(fields_.size());
  for (int i = 0, n = fields_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      fields_.Get(i));
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // bool consent = 2;
  if (this->consent() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostUserConsentRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostUserConsentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostUserConsentRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostUserConsentRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostUserConsentRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostUserConsentRequest)
    MergeFrom(*source);
  }
}

void PostUserConsentRequest::MergeFrom(const PostUserConsentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostUserConsentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.consent() != 0) {
    _internal_set_consent(from._internal_consent());
  }
}

void PostUserConsentRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostUserConsentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostUserConsentRequest::CopyFrom(const PostUserConsentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostUserConsentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostUserConsentRequest::IsInitialized() const {
  return true;
}

void PostUserConsentRequest::InternalSwap(PostUserConsentRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  fields_.InternalSwap(&other->fields_);
  swap(user_app_id_, other->user_app_id_);
  swap(consent_, other->consent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostUserConsentRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SingleUserResponse::InitAsDefaultInstance() {
  ::clarifai::api::_SingleUserResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
  ::clarifai::api::_SingleUserResponse_default_instance_._instance.get_mutable()->user_ = const_cast< ::clarifai::api::User*>(
      ::clarifai::api::User::internal_default_instance());
}
class SingleUserResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleUserResponse* msg);
  static const ::clarifai::api::User& user(const SingleUserResponse* msg);
};

const ::clarifai::api::status::Status&
SingleUserResponse::_Internal::status(const SingleUserResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::User&
SingleUserResponse::_Internal::user(const SingleUserResponse* msg) {
  return *msg->user_;
}
void SingleUserResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleUserResponse::clear_user() {
  if (GetArenaNoVirtual() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
}
SingleUserResponse::SingleUserResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.SingleUserResponse)
}
SingleUserResponse::SingleUserResponse(const SingleUserResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_user()) {
    user_ = new ::clarifai::api::User(*from.user_);
  } else {
    user_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleUserResponse)
}

void SingleUserResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SingleUserResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_) -
      reinterpret_cast<char*>(&status_)) + sizeof(user_));
}

SingleUserResponse::~SingleUserResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleUserResponse)
  SharedDtor();
}

void SingleUserResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete user_;
}

void SingleUserResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleUserResponse& SingleUserResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleUserResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void SingleUserResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SingleUserResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.User user = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleUserResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.User user = 2;
  if (this->has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::user(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleUserResponse)
  return target;
}

size_t SingleUserResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleUserResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.User user = 2;
  if (this->has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleUserResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.SingleUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleUserResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleUserResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.SingleUserResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.SingleUserResponse)
    MergeFrom(*source);
  }
}

void SingleUserResponse::MergeFrom(const SingleUserResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.has_user()) {
    _internal_mutable_user()->::clarifai::api::User::MergeFrom(from._internal_user());
  }
}

void SingleUserResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.SingleUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleUserResponse::CopyFrom(const SingleUserResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleUserResponse::IsInitialized() const {
  return true;
}

void SingleUserResponse::InternalSwap(SingleUserResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(user_, other->user_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleUserResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiUserResponse::InitAsDefaultInstance() {
  ::clarifai::api::_MultiUserResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class MultiUserResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiUserResponse* msg);
};

const ::clarifai::api::status::Status&
MultiUserResponse::_Internal::status(const MultiUserResponse* msg) {
  return *msg->status_;
}
void MultiUserResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiUserResponse::clear_users() {
  users_.Clear();
}
MultiUserResponse::MultiUserResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MultiUserResponse)
}
MultiUserResponse::MultiUserResponse(const MultiUserResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      users_(from.users_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiUserResponse)
}

void MultiUserResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiUserResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

MultiUserResponse::~MultiUserResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiUserResponse)
  SharedDtor();
}

void MultiUserResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void MultiUserResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiUserResponse& MultiUserResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiUserResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiUserResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  users_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultiUserResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.User users = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_users(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiUserResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.User users = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_users_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_users(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiUserResponse)
  return target;
}

size_t MultiUserResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiUserResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.User users = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_users_size();
  for (const auto& msg : this->users_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiUserResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MultiUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiUserResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiUserResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MultiUserResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MultiUserResponse)
    MergeFrom(*source);
  }
}

void MultiUserResponse::MergeFrom(const MultiUserResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  users_.MergeFrom(from.users_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void MultiUserResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MultiUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiUserResponse::CopyFrom(const MultiUserResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiUserResponse::IsInitialized() const {
  return true;
}

void MultiUserResponse::InternalSwap(MultiUserResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  users_.InternalSwap(&other->users_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiUserResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PatchUserRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PatchUserRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
  ::clarifai::api::_PatchUserRequest_default_instance_._instance.get_mutable()->info_ = const_cast< ::clarifai::api::UserInfo*>(
      ::clarifai::api::UserInfo::internal_default_instance());
  ::clarifai::api::_PatchUserRequest_default_instance_._instance.get_mutable()->pass_ = const_cast< ::clarifai::api::UserPassword*>(
      ::clarifai::api::UserPassword::internal_default_instance());
  ::clarifai::api::_PatchUserRequest_default_instance_._instance.get_mutable()->metadata_ = const_cast< PROTOBUF_NAMESPACE_ID::Struct*>(
      PROTOBUF_NAMESPACE_ID::Struct::internal_default_instance());
  ::clarifai::api::_PatchUserRequest_default_instance_._instance.get_mutable()->action_ = const_cast< ::clarifai::api::PatchAction*>(
      ::clarifai::api::PatchAction::internal_default_instance());
}
class PatchUserRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchUserRequest* msg);
  static const ::clarifai::api::UserInfo& info(const PatchUserRequest* msg);
  static const ::clarifai::api::UserPassword& pass(const PatchUserRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::Struct& metadata(const PatchUserRequest* msg);
  static const ::clarifai::api::PatchAction& action(const PatchUserRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchUserRequest::_Internal::user_app_id(const PatchUserRequest* msg) {
  return *msg->user_app_id_;
}
const ::clarifai::api::UserInfo&
PatchUserRequest::_Internal::info(const PatchUserRequest* msg) {
  return *msg->info_;
}
const ::clarifai::api::UserPassword&
PatchUserRequest::_Internal::pass(const PatchUserRequest* msg) {
  return *msg->pass_;
}
const PROTOBUF_NAMESPACE_ID::Struct&
PatchUserRequest::_Internal::metadata(const PatchUserRequest* msg) {
  return *msg->metadata_;
}
const ::clarifai::api::PatchAction&
PatchUserRequest::_Internal::action(const PatchUserRequest* msg) {
  return *msg->action_;
}
void PatchUserRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PatchUserRequest::clear_info() {
  if (GetArenaNoVirtual() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
void PatchUserRequest::clear_pass() {
  if (GetArenaNoVirtual() == nullptr && pass_ != nullptr) {
    delete pass_;
  }
  pass_ = nullptr;
}
void PatchUserRequest::clear_metadata() {
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
void PatchUserRequest::clear_action() {
  if (GetArenaNoVirtual() == nullptr && action_ != nullptr) {
    delete action_;
  }
  action_ = nullptr;
}
PatchUserRequest::PatchUserRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PatchUserRequest)
}
PatchUserRequest::PatchUserRequest(const PatchUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  if (from._internal_has_info()) {
    info_ = new ::clarifai::api::UserInfo(*from.info_);
  } else {
    info_ = nullptr;
  }
  if (from._internal_has_pass()) {
    pass_ = new ::clarifai::api::UserPassword(*from.pass_);
  } else {
    pass_ = nullptr;
  }
  if (from._internal_has_metadata()) {
    metadata_ = new PROTOBUF_NAMESPACE_ID::Struct(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_action()) {
    action_ = new ::clarifai::api::PatchAction(*from.action_);
  } else {
    action_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchUserRequest)
}

void PatchUserRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PatchUserRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(action_));
}

PatchUserRequest::~PatchUserRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchUserRequest)
  SharedDtor();
}

void PatchUserRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
  if (this != internal_default_instance()) delete info_;
  if (this != internal_default_instance()) delete pass_;
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete action_;
}

void PatchUserRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PatchUserRequest& PatchUserRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PatchUserRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PatchUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pass_ != nullptr) {
    delete pass_;
  }
  pass_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && action_ != nullptr) {
    delete action_;
  }
  action_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PatchUserRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.UserInfo info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.UserPassword pass = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pass(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Struct metadata = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.PatchAction action = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_action(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PatchUserRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // .clarifai.api.UserInfo info = 2;
  if (this->has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::info(this), target, stream);
  }

  // .clarifai.api.UserPassword pass = 3;
  if (this->has_pass()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pass(this), target, stream);
  }

  // .google.protobuf.Struct metadata = 4;
  if (this->has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::metadata(this), target, stream);
  }

  // .clarifai.api.PatchAction action = 5;
  if (this->has_action()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::action(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchUserRequest)
  return target;
}

size_t PatchUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchUserRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // .clarifai.api.UserInfo info = 2;
  if (this->has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  // .clarifai.api.UserPassword pass = 3;
  if (this->has_pass()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pass_);
  }

  // .google.protobuf.Struct metadata = 4;
  if (this->has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // .clarifai.api.PatchAction action = 5;
  if (this->has_action()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *action_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PatchUserRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PatchUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PatchUserRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PatchUserRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PatchUserRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PatchUserRequest)
    MergeFrom(*source);
  }
}

void PatchUserRequest::MergeFrom(const PatchUserRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.has_info()) {
    _internal_mutable_info()->::clarifai::api::UserInfo::MergeFrom(from._internal_info());
  }
  if (from.has_pass()) {
    _internal_mutable_pass()->::clarifai::api::UserPassword::MergeFrom(from._internal_pass());
  }
  if (from.has_metadata()) {
    _internal_mutable_metadata()->PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_metadata());
  }
  if (from.has_action()) {
    _internal_mutable_action()->::clarifai::api::PatchAction::MergeFrom(from._internal_action());
  }
}

void PatchUserRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PatchUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatchUserRequest::CopyFrom(const PatchUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchUserRequest::IsInitialized() const {
  return true;
}

void PatchUserRequest::InternalSwap(PatchUserRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_app_id_, other->user_app_id_);
  swap(info_, other->info_);
  swap(pass_, other->pass_);
  swap(metadata_, other->metadata_);
  swap(action_, other->action_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchUserRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostEmailsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostEmailsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PostEmailsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostEmailsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostEmailsRequest::_Internal::user_app_id(const PostEmailsRequest* msg) {
  return *msg->user_app_id_;
}
void PostEmailsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
PostEmailsRequest::PostEmailsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostEmailsRequest)
}
PostEmailsRequest::PostEmailsRequest(const PostEmailsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      emails_(from.emails_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostEmailsRequest)
}

void PostEmailsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostEmailsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  user_app_id_ = nullptr;
}

PostEmailsRequest::~PostEmailsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostEmailsRequest)
  SharedDtor();
}

void PostEmailsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostEmailsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostEmailsRequest& PostEmailsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostEmailsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostEmailsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostEmailsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  emails_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostEmailsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string emails = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_emails();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostEmailsRequest.emails"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostEmailsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostEmailsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated string emails = 2;
  for (int i = 0, n = this->_internal_emails_size(); i < n; i++) {
    const auto& s = this->_internal_emails(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostEmailsRequest.emails");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostEmailsRequest)
  return target;
}

size_t PostEmailsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostEmailsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string emails = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(emails_.size());
  for (int i = 0, n = emails_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      emails_.Get(i));
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostEmailsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostEmailsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostEmailsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostEmailsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostEmailsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostEmailsRequest)
    MergeFrom(*source);
  }
}

void PostEmailsRequest::MergeFrom(const PostEmailsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostEmailsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  emails_.MergeFrom(from.emails_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void PostEmailsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostEmailsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostEmailsRequest::CopyFrom(const PostEmailsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostEmailsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostEmailsRequest::IsInitialized() const {
  return true;
}

void PostEmailsRequest::InternalSwap(PostEmailsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  emails_.InternalSwap(&other->emails_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostEmailsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SingleEmailResponse::InitAsDefaultInstance() {
  ::clarifai::api::_SingleEmailResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
  ::clarifai::api::_SingleEmailResponse_default_instance_._instance.get_mutable()->email_ = const_cast< ::clarifai::api::EmailAddress*>(
      ::clarifai::api::EmailAddress::internal_default_instance());
}
class SingleEmailResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleEmailResponse* msg);
  static const ::clarifai::api::EmailAddress& email(const SingleEmailResponse* msg);
};

const ::clarifai::api::status::Status&
SingleEmailResponse::_Internal::status(const SingleEmailResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::EmailAddress&
SingleEmailResponse::_Internal::email(const SingleEmailResponse* msg) {
  return *msg->email_;
}
void SingleEmailResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleEmailResponse::clear_email() {
  if (GetArenaNoVirtual() == nullptr && email_ != nullptr) {
    delete email_;
  }
  email_ = nullptr;
}
SingleEmailResponse::SingleEmailResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.SingleEmailResponse)
}
SingleEmailResponse::SingleEmailResponse(const SingleEmailResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_email()) {
    email_ = new ::clarifai::api::EmailAddress(*from.email_);
  } else {
    email_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleEmailResponse)
}

void SingleEmailResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SingleEmailResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&email_) -
      reinterpret_cast<char*>(&status_)) + sizeof(email_));
}

SingleEmailResponse::~SingleEmailResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleEmailResponse)
  SharedDtor();
}

void SingleEmailResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete email_;
}

void SingleEmailResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleEmailResponse& SingleEmailResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleEmailResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void SingleEmailResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleEmailResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && email_ != nullptr) {
    delete email_;
  }
  email_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SingleEmailResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.EmailAddress email = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_email(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleEmailResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleEmailResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.EmailAddress email = 2;
  if (this->has_email()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::email(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleEmailResponse)
  return target;
}

size_t SingleEmailResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleEmailResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.EmailAddress email = 2;
  if (this->has_email()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *email_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleEmailResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.SingleEmailResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleEmailResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleEmailResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.SingleEmailResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.SingleEmailResponse)
    MergeFrom(*source);
  }
}

void SingleEmailResponse::MergeFrom(const SingleEmailResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleEmailResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.has_email()) {
    _internal_mutable_email()->::clarifai::api::EmailAddress::MergeFrom(from._internal_email());
  }
}

void SingleEmailResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.SingleEmailResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleEmailResponse::CopyFrom(const SingleEmailResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleEmailResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleEmailResponse::IsInitialized() const {
  return true;
}

void SingleEmailResponse::InternalSwap(SingleEmailResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(email_, other->email_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleEmailResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultipleEmailResponse::InitAsDefaultInstance() {
  ::clarifai::api::_MultipleEmailResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class MultipleEmailResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultipleEmailResponse* msg);
};

const ::clarifai::api::status::Status&
MultipleEmailResponse::_Internal::status(const MultipleEmailResponse* msg) {
  return *msg->status_;
}
void MultipleEmailResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultipleEmailResponse::clear_emails() {
  emails_.Clear();
}
MultipleEmailResponse::MultipleEmailResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MultipleEmailResponse)
}
MultipleEmailResponse::MultipleEmailResponse(const MultipleEmailResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      emails_(from.emails_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultipleEmailResponse)
}

void MultipleEmailResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultipleEmailResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

MultipleEmailResponse::~MultipleEmailResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultipleEmailResponse)
  SharedDtor();
}

void MultipleEmailResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void MultipleEmailResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultipleEmailResponse& MultipleEmailResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultipleEmailResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultipleEmailResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultipleEmailResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  emails_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultipleEmailResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.EmailAddress emails = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_emails(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultipleEmailResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultipleEmailResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.EmailAddress emails = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_emails_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_emails(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultipleEmailResponse)
  return target;
}

size_t MultipleEmailResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultipleEmailResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.EmailAddress emails = 2;
  total_size += 1UL * this->_internal_emails_size();
  for (const auto& msg : this->emails_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultipleEmailResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MultipleEmailResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultipleEmailResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultipleEmailResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MultipleEmailResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MultipleEmailResponse)
    MergeFrom(*source);
  }
}

void MultipleEmailResponse::MergeFrom(const MultipleEmailResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultipleEmailResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  emails_.MergeFrom(from.emails_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void MultipleEmailResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MultipleEmailResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultipleEmailResponse::CopyFrom(const MultipleEmailResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultipleEmailResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultipleEmailResponse::IsInitialized() const {
  return true;
}

void MultipleEmailResponse::InternalSwap(MultipleEmailResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  emails_.InternalSwap(&other->emails_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultipleEmailResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListEmailsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_ListEmailsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class ListEmailsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListEmailsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListEmailsRequest::_Internal::user_app_id(const ListEmailsRequest* msg) {
  return *msg->user_app_id_;
}
void ListEmailsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListEmailsRequest::ListEmailsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ListEmailsRequest)
}
ListEmailsRequest::ListEmailsRequest(const ListEmailsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListEmailsRequest)
}

void ListEmailsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListEmailsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  user_app_id_ = nullptr;
}

ListEmailsRequest::~ListEmailsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListEmailsRequest)
  SharedDtor();
}

void ListEmailsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListEmailsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListEmailsRequest& ListEmailsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListEmailsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ListEmailsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListEmailsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ListEmailsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListEmailsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListEmailsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListEmailsRequest)
  return target;
}

size_t ListEmailsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListEmailsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListEmailsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ListEmailsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListEmailsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListEmailsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ListEmailsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ListEmailsRequest)
    MergeFrom(*source);
  }
}

void ListEmailsRequest::MergeFrom(const ListEmailsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListEmailsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void ListEmailsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ListEmailsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListEmailsRequest::CopyFrom(const ListEmailsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListEmailsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListEmailsRequest::IsInitialized() const {
  return true;
}

void ListEmailsRequest::InternalSwap(ListEmailsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListEmailsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostResendVerifyRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostResendVerifyRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PostResendVerifyRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostResendVerifyRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostResendVerifyRequest::_Internal::user_app_id(const PostResendVerifyRequest* msg) {
  return *msg->user_app_id_;
}
void PostResendVerifyRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
PostResendVerifyRequest::PostResendVerifyRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostResendVerifyRequest)
}
PostResendVerifyRequest::PostResendVerifyRequest(const PostResendVerifyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_email().empty()) {
    email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostResendVerifyRequest)
}

void PostResendVerifyRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostResendVerifyRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

PostResendVerifyRequest::~PostResendVerifyRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostResendVerifyRequest)
  SharedDtor();
}

void PostResendVerifyRequest::SharedDtor() {
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostResendVerifyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostResendVerifyRequest& PostResendVerifyRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostResendVerifyRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostResendVerifyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostResendVerifyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostResendVerifyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string email = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostResendVerifyRequest.email"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostResendVerifyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostResendVerifyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string email = 2;
  if (this->email().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostResendVerifyRequest.email");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_email(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostResendVerifyRequest)
  return target;
}

size_t PostResendVerifyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostResendVerifyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string email = 2;
  if (this->email().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostResendVerifyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostResendVerifyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostResendVerifyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostResendVerifyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostResendVerifyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostResendVerifyRequest)
    MergeFrom(*source);
  }
}

void PostResendVerifyRequest::MergeFrom(const PostResendVerifyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostResendVerifyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.email().size() > 0) {

    email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void PostResendVerifyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostResendVerifyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostResendVerifyRequest::CopyFrom(const PostResendVerifyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostResendVerifyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostResendVerifyRequest::IsInitialized() const {
  return true;
}

void PostResendVerifyRequest::InternalSwap(PostResendVerifyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  email_.Swap(&other->email_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostResendVerifyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SingleResendVerifyResponse::InitAsDefaultInstance() {
  ::clarifai::api::_SingleResendVerifyResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class SingleResendVerifyResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleResendVerifyResponse* msg);
};

const ::clarifai::api::status::Status&
SingleResendVerifyResponse::_Internal::status(const SingleResendVerifyResponse* msg) {
  return *msg->status_;
}
void SingleResendVerifyResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
SingleResendVerifyResponse::SingleResendVerifyResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.SingleResendVerifyResponse)
}
SingleResendVerifyResponse::SingleResendVerifyResponse(const SingleResendVerifyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleResendVerifyResponse)
}

void SingleResendVerifyResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SingleResendVerifyResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

SingleResendVerifyResponse::~SingleResendVerifyResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleResendVerifyResponse)
  SharedDtor();
}

void SingleResendVerifyResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void SingleResendVerifyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleResendVerifyResponse& SingleResendVerifyResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleResendVerifyResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void SingleResendVerifyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleResendVerifyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SingleResendVerifyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleResendVerifyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleResendVerifyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleResendVerifyResponse)
  return target;
}

size_t SingleResendVerifyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleResendVerifyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleResendVerifyResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.SingleResendVerifyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleResendVerifyResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleResendVerifyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.SingleResendVerifyResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.SingleResendVerifyResponse)
    MergeFrom(*source);
  }
}

void SingleResendVerifyResponse::MergeFrom(const SingleResendVerifyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleResendVerifyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void SingleResendVerifyResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.SingleResendVerifyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleResendVerifyResponse::CopyFrom(const SingleResendVerifyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleResendVerifyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleResendVerifyResponse::IsInitialized() const {
  return true;
}

void SingleResendVerifyResponse::InternalSwap(SingleResendVerifyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleResendVerifyResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteEmailRequest::InitAsDefaultInstance() {
  ::clarifai::api::_DeleteEmailRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class DeleteEmailRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteEmailRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteEmailRequest::_Internal::user_app_id(const DeleteEmailRequest* msg) {
  return *msg->user_app_id_;
}
void DeleteEmailRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
DeleteEmailRequest::DeleteEmailRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.DeleteEmailRequest)
}
DeleteEmailRequest::DeleteEmailRequest(const DeleteEmailRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_email().empty()) {
    email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteEmailRequest)
}

void DeleteEmailRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteEmailRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

DeleteEmailRequest::~DeleteEmailRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteEmailRequest)
  SharedDtor();
}

void DeleteEmailRequest::SharedDtor() {
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void DeleteEmailRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteEmailRequest& DeleteEmailRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteEmailRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void DeleteEmailRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteEmailRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* DeleteEmailRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string email = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteEmailRequest.email"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteEmailRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteEmailRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string email = 2;
  if (this->email().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteEmailRequest.email");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_email(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteEmailRequest)
  return target;
}

size_t DeleteEmailRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteEmailRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string email = 2;
  if (this->email().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteEmailRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.DeleteEmailRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteEmailRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteEmailRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.DeleteEmailRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.DeleteEmailRequest)
    MergeFrom(*source);
  }
}

void DeleteEmailRequest::MergeFrom(const DeleteEmailRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteEmailRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.email().size() > 0) {

    email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void DeleteEmailRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.DeleteEmailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteEmailRequest::CopyFrom(const DeleteEmailRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteEmailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteEmailRequest::IsInitialized() const {
  return true;
}

void DeleteEmailRequest::InternalSwap(DeleteEmailRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  email_.Swap(&other->email_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteEmailRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostPrimaryEmailRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostPrimaryEmailRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PostPrimaryEmailRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostPrimaryEmailRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostPrimaryEmailRequest::_Internal::user_app_id(const PostPrimaryEmailRequest* msg) {
  return *msg->user_app_id_;
}
void PostPrimaryEmailRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
PostPrimaryEmailRequest::PostPrimaryEmailRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostPrimaryEmailRequest)
}
PostPrimaryEmailRequest::PostPrimaryEmailRequest(const PostPrimaryEmailRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_email().empty()) {
    email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostPrimaryEmailRequest)
}

void PostPrimaryEmailRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostPrimaryEmailRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

PostPrimaryEmailRequest::~PostPrimaryEmailRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostPrimaryEmailRequest)
  SharedDtor();
}

void PostPrimaryEmailRequest::SharedDtor() {
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostPrimaryEmailRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostPrimaryEmailRequest& PostPrimaryEmailRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostPrimaryEmailRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostPrimaryEmailRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostPrimaryEmailRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostPrimaryEmailRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string email = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostPrimaryEmailRequest.email"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostPrimaryEmailRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostPrimaryEmailRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string email = 2;
  if (this->email().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostPrimaryEmailRequest.email");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_email(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostPrimaryEmailRequest)
  return target;
}

size_t PostPrimaryEmailRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostPrimaryEmailRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string email = 2;
  if (this->email().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostPrimaryEmailRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostPrimaryEmailRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostPrimaryEmailRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostPrimaryEmailRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostPrimaryEmailRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostPrimaryEmailRequest)
    MergeFrom(*source);
  }
}

void PostPrimaryEmailRequest::MergeFrom(const PostPrimaryEmailRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostPrimaryEmailRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.email().size() > 0) {

    email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void PostPrimaryEmailRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostPrimaryEmailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostPrimaryEmailRequest::CopyFrom(const PostPrimaryEmailRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostPrimaryEmailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostPrimaryEmailRequest::IsInitialized() const {
  return true;
}

void PostPrimaryEmailRequest::InternalSwap(PostPrimaryEmailRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  email_.Swap(&other->email_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostPrimaryEmailRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostValidatePasswordRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostValidatePasswordRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
  ::clarifai::api::_PostValidatePasswordRequest_default_instance_._instance.get_mutable()->password_ = const_cast< ::clarifai::api::Password*>(
      ::clarifai::api::Password::internal_default_instance());
}
class PostValidatePasswordRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostValidatePasswordRequest* msg);
  static const ::clarifai::api::Password& password(const PostValidatePasswordRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostValidatePasswordRequest::_Internal::user_app_id(const PostValidatePasswordRequest* msg) {
  return *msg->user_app_id_;
}
const ::clarifai::api::Password&
PostValidatePasswordRequest::_Internal::password(const PostValidatePasswordRequest* msg) {
  return *msg->password_;
}
void PostValidatePasswordRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostValidatePasswordRequest::clear_password() {
  if (GetArenaNoVirtual() == nullptr && password_ != nullptr) {
    delete password_;
  }
  password_ = nullptr;
}
PostValidatePasswordRequest::PostValidatePasswordRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostValidatePasswordRequest)
}
PostValidatePasswordRequest::PostValidatePasswordRequest(const PostValidatePasswordRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  if (from._internal_has_password()) {
    password_ = new ::clarifai::api::Password(*from.password_);
  } else {
    password_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostValidatePasswordRequest)
}

void PostValidatePasswordRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostValidatePasswordRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&password_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(password_));
}

PostValidatePasswordRequest::~PostValidatePasswordRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostValidatePasswordRequest)
  SharedDtor();
}

void PostValidatePasswordRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
  if (this != internal_default_instance()) delete password_;
}

void PostValidatePasswordRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostValidatePasswordRequest& PostValidatePasswordRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostValidatePasswordRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostValidatePasswordRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostValidatePasswordRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && password_ != nullptr) {
    delete password_;
  }
  password_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostValidatePasswordRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Password password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_password(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostValidatePasswordRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostValidatePasswordRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // .clarifai.api.Password password = 2;
  if (this->has_password()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::password(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostValidatePasswordRequest)
  return target;
}

size_t PostValidatePasswordRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostValidatePasswordRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // .clarifai.api.Password password = 2;
  if (this->has_password()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *password_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostValidatePasswordRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostValidatePasswordRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostValidatePasswordRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostValidatePasswordRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostValidatePasswordRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostValidatePasswordRequest)
    MergeFrom(*source);
  }
}

void PostValidatePasswordRequest::MergeFrom(const PostValidatePasswordRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostValidatePasswordRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.has_password()) {
    _internal_mutable_password()->::clarifai::api::Password::MergeFrom(from._internal_password());
  }
}

void PostValidatePasswordRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostValidatePasswordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostValidatePasswordRequest::CopyFrom(const PostValidatePasswordRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostValidatePasswordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostValidatePasswordRequest::IsInitialized() const {
  return true;
}

void PostValidatePasswordRequest::InternalSwap(PostValidatePasswordRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_app_id_, other->user_app_id_);
  swap(password_, other->password_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostValidatePasswordRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SinglePasswordValidationResponse::InitAsDefaultInstance() {
  ::clarifai::api::_SinglePasswordValidationResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
  ::clarifai::api::_SinglePasswordValidationResponse_default_instance_._instance.get_mutable()->password_violations_ = const_cast< ::clarifai::api::PasswordViolations*>(
      ::clarifai::api::PasswordViolations::internal_default_instance());
}
class SinglePasswordValidationResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SinglePasswordValidationResponse* msg);
  static const ::clarifai::api::PasswordViolations& password_violations(const SinglePasswordValidationResponse* msg);
};

const ::clarifai::api::status::Status&
SinglePasswordValidationResponse::_Internal::status(const SinglePasswordValidationResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::PasswordViolations&
SinglePasswordValidationResponse::_Internal::password_violations(const SinglePasswordValidationResponse* msg) {
  return *msg->password_violations_;
}
void SinglePasswordValidationResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SinglePasswordValidationResponse::clear_password_violations() {
  if (GetArenaNoVirtual() == nullptr && password_violations_ != nullptr) {
    delete password_violations_;
  }
  password_violations_ = nullptr;
}
SinglePasswordValidationResponse::SinglePasswordValidationResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.SinglePasswordValidationResponse)
}
SinglePasswordValidationResponse::SinglePasswordValidationResponse(const SinglePasswordValidationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_password_violations()) {
    password_violations_ = new ::clarifai::api::PasswordViolations(*from.password_violations_);
  } else {
    password_violations_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SinglePasswordValidationResponse)
}

void SinglePasswordValidationResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SinglePasswordValidationResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&password_violations_) -
      reinterpret_cast<char*>(&status_)) + sizeof(password_violations_));
}

SinglePasswordValidationResponse::~SinglePasswordValidationResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SinglePasswordValidationResponse)
  SharedDtor();
}

void SinglePasswordValidationResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete password_violations_;
}

void SinglePasswordValidationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SinglePasswordValidationResponse& SinglePasswordValidationResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SinglePasswordValidationResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void SinglePasswordValidationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SinglePasswordValidationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && password_violations_ != nullptr) {
    delete password_violations_;
  }
  password_violations_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SinglePasswordValidationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.PasswordViolations password_violations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_password_violations(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SinglePasswordValidationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SinglePasswordValidationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.PasswordViolations password_violations = 2;
  if (this->has_password_violations()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::password_violations(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SinglePasswordValidationResponse)
  return target;
}

size_t SinglePasswordValidationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SinglePasswordValidationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.PasswordViolations password_violations = 2;
  if (this->has_password_violations()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *password_violations_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SinglePasswordValidationResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.SinglePasswordValidationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SinglePasswordValidationResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SinglePasswordValidationResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.SinglePasswordValidationResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.SinglePasswordValidationResponse)
    MergeFrom(*source);
  }
}

void SinglePasswordValidationResponse::MergeFrom(const SinglePasswordValidationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SinglePasswordValidationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.has_password_violations()) {
    _internal_mutable_password_violations()->::clarifai::api::PasswordViolations::MergeFrom(from._internal_password_violations());
  }
}

void SinglePasswordValidationResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.SinglePasswordValidationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SinglePasswordValidationResponse::CopyFrom(const SinglePasswordValidationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SinglePasswordValidationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SinglePasswordValidationResponse::IsInitialized() const {
  return true;
}

void SinglePasswordValidationResponse::InternalSwap(SinglePasswordValidationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(password_violations_, other->password_violations_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SinglePasswordValidationResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListPasswordPoliciesRequest::InitAsDefaultInstance() {
  ::clarifai::api::_ListPasswordPoliciesRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class ListPasswordPoliciesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListPasswordPoliciesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListPasswordPoliciesRequest::_Internal::user_app_id(const ListPasswordPoliciesRequest* msg) {
  return *msg->user_app_id_;
}
void ListPasswordPoliciesRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListPasswordPoliciesRequest::ListPasswordPoliciesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ListPasswordPoliciesRequest)
}
ListPasswordPoliciesRequest::ListPasswordPoliciesRequest(const ListPasswordPoliciesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      user_ids_(from.user_ids_),
      organization_ids_(from.organization_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListPasswordPoliciesRequest)
}

void ListPasswordPoliciesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListPasswordPoliciesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

ListPasswordPoliciesRequest::~ListPasswordPoliciesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListPasswordPoliciesRequest)
  SharedDtor();
}

void ListPasswordPoliciesRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListPasswordPoliciesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListPasswordPoliciesRequest& ListPasswordPoliciesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListPasswordPoliciesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ListPasswordPoliciesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListPasswordPoliciesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_ids_.Clear();
  organization_ids_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear();
}

const char* ListPasswordPoliciesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string user_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_user_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListPasswordPoliciesRequest.user_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string organization_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_organization_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListPasswordPoliciesRequest.organization_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 page = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 per_page = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListPasswordPoliciesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListPasswordPoliciesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated string user_ids = 2;
  for (int i = 0, n = this->_internal_user_ids_size(); i < n; i++) {
    const auto& s = this->_internal_user_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListPasswordPoliciesRequest.user_ids");
    target = stream->WriteString(2, s, target);
  }

  // repeated string organization_ids = 3;
  for (int i = 0, n = this->_internal_organization_ids_size(); i < n; i++) {
    const auto& s = this->_internal_organization_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListPasswordPoliciesRequest.organization_ids");
    target = stream->WriteString(3, s, target);
  }

  // uint32 page = 4;
  if (this->page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_page(), target);
  }

  // uint32 per_page = 5;
  if (this->per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListPasswordPoliciesRequest)
  return target;
}

size_t ListPasswordPoliciesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListPasswordPoliciesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string user_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(user_ids_.size());
  for (int i = 0, n = user_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      user_ids_.Get(i));
  }

  // repeated string organization_ids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(organization_ids_.size());
  for (int i = 0, n = organization_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      organization_ids_.Get(i));
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 4;
  if (this->page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page());
  }

  // uint32 per_page = 5;
  if (this->per_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_per_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListPasswordPoliciesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ListPasswordPoliciesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListPasswordPoliciesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListPasswordPoliciesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ListPasswordPoliciesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ListPasswordPoliciesRequest)
    MergeFrom(*source);
  }
}

void ListPasswordPoliciesRequest::MergeFrom(const ListPasswordPoliciesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListPasswordPoliciesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_ids_.MergeFrom(from.user_ids_);
  organization_ids_.MergeFrom(from.organization_ids_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from.per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
}

void ListPasswordPoliciesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ListPasswordPoliciesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListPasswordPoliciesRequest::CopyFrom(const ListPasswordPoliciesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListPasswordPoliciesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPasswordPoliciesRequest::IsInitialized() const {
  return true;
}

void ListPasswordPoliciesRequest::InternalSwap(ListPasswordPoliciesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  user_ids_.InternalSwap(&other->user_ids_);
  organization_ids_.InternalSwap(&other->organization_ids_);
  swap(user_app_id_, other->user_app_id_);
  swap(page_, other->page_);
  swap(per_page_, other->per_page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPasswordPoliciesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostPasswordPoliciesRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostPasswordPoliciesRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PostPasswordPoliciesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostPasswordPoliciesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostPasswordPoliciesRequest::_Internal::user_app_id(const PostPasswordPoliciesRequest* msg) {
  return *msg->user_app_id_;
}
void PostPasswordPoliciesRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostPasswordPoliciesRequest::clear_password_policies() {
  password_policies_.Clear();
}
PostPasswordPoliciesRequest::PostPasswordPoliciesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostPasswordPoliciesRequest)
}
PostPasswordPoliciesRequest::PostPasswordPoliciesRequest(const PostPasswordPoliciesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      password_policies_(from.password_policies_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostPasswordPoliciesRequest)
}

void PostPasswordPoliciesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostPasswordPoliciesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  user_app_id_ = nullptr;
}

PostPasswordPoliciesRequest::~PostPasswordPoliciesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostPasswordPoliciesRequest)
  SharedDtor();
}

void PostPasswordPoliciesRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostPasswordPoliciesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostPasswordPoliciesRequest& PostPasswordPoliciesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostPasswordPoliciesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostPasswordPoliciesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostPasswordPoliciesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  password_policies_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostPasswordPoliciesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.PasswordPolicy password_policies = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_password_policies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostPasswordPoliciesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostPasswordPoliciesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.PasswordPolicy password_policies = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_password_policies_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_password_policies(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostPasswordPoliciesRequest)
  return target;
}

size_t PostPasswordPoliciesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostPasswordPoliciesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.PasswordPolicy password_policies = 2;
  total_size += 1UL * this->_internal_password_policies_size();
  for (const auto& msg : this->password_policies_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostPasswordPoliciesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostPasswordPoliciesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostPasswordPoliciesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostPasswordPoliciesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostPasswordPoliciesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostPasswordPoliciesRequest)
    MergeFrom(*source);
  }
}

void PostPasswordPoliciesRequest::MergeFrom(const PostPasswordPoliciesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostPasswordPoliciesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  password_policies_.MergeFrom(from.password_policies_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void PostPasswordPoliciesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostPasswordPoliciesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostPasswordPoliciesRequest::CopyFrom(const PostPasswordPoliciesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostPasswordPoliciesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostPasswordPoliciesRequest::IsInitialized() const {
  return true;
}

void PostPasswordPoliciesRequest::InternalSwap(PostPasswordPoliciesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  password_policies_.InternalSwap(&other->password_policies_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostPasswordPoliciesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PatchPasswordPoliciesRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PatchPasswordPoliciesRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PatchPasswordPoliciesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchPasswordPoliciesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchPasswordPoliciesRequest::_Internal::user_app_id(const PatchPasswordPoliciesRequest* msg) {
  return *msg->user_app_id_;
}
void PatchPasswordPoliciesRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PatchPasswordPoliciesRequest::clear_password_policies() {
  password_policies_.Clear();
}
PatchPasswordPoliciesRequest::PatchPasswordPoliciesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PatchPasswordPoliciesRequest)
}
PatchPasswordPoliciesRequest::PatchPasswordPoliciesRequest(const PatchPasswordPoliciesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      password_policies_(from.password_policies_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action().empty()) {
    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchPasswordPoliciesRequest)
}

void PatchPasswordPoliciesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PatchPasswordPoliciesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

PatchPasswordPoliciesRequest::~PatchPasswordPoliciesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchPasswordPoliciesRequest)
  SharedDtor();
}

void PatchPasswordPoliciesRequest::SharedDtor() {
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PatchPasswordPoliciesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PatchPasswordPoliciesRequest& PatchPasswordPoliciesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PatchPasswordPoliciesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PatchPasswordPoliciesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchPasswordPoliciesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  password_policies_.Clear();
  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PatchPasswordPoliciesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.PasswordPolicy password_policies = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_password_policies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchPasswordPoliciesRequest.action"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PatchPasswordPoliciesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchPasswordPoliciesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.PasswordPolicy password_policies = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_password_policies_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_password_policies(i), target, stream);
  }

  // string action = 3;
  if (this->action().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchPasswordPoliciesRequest.action");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchPasswordPoliciesRequest)
  return target;
}

size_t PatchPasswordPoliciesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchPasswordPoliciesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.PasswordPolicy password_policies = 2;
  total_size += 1UL * this->_internal_password_policies_size();
  for (const auto& msg : this->password_policies_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string action = 3;
  if (this->action().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PatchPasswordPoliciesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PatchPasswordPoliciesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PatchPasswordPoliciesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PatchPasswordPoliciesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PatchPasswordPoliciesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PatchPasswordPoliciesRequest)
    MergeFrom(*source);
  }
}

void PatchPasswordPoliciesRequest::MergeFrom(const PatchPasswordPoliciesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchPasswordPoliciesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  password_policies_.MergeFrom(from.password_policies_);
  if (from.action().size() > 0) {

    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void PatchPasswordPoliciesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PatchPasswordPoliciesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatchPasswordPoliciesRequest::CopyFrom(const PatchPasswordPoliciesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchPasswordPoliciesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchPasswordPoliciesRequest::IsInitialized() const {
  return true;
}

void PatchPasswordPoliciesRequest::InternalSwap(PatchPasswordPoliciesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  password_policies_.InternalSwap(&other->password_policies_);
  action_.Swap(&other->action_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchPasswordPoliciesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeletePasswordPoliciesRequest::InitAsDefaultInstance() {
  ::clarifai::api::_DeletePasswordPoliciesRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class DeletePasswordPoliciesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeletePasswordPoliciesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeletePasswordPoliciesRequest::_Internal::user_app_id(const DeletePasswordPoliciesRequest* msg) {
  return *msg->user_app_id_;
}
void DeletePasswordPoliciesRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
DeletePasswordPoliciesRequest::DeletePasswordPoliciesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.DeletePasswordPoliciesRequest)
}
DeletePasswordPoliciesRequest::DeletePasswordPoliciesRequest(const DeletePasswordPoliciesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeletePasswordPoliciesRequest)
}

void DeletePasswordPoliciesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeletePasswordPoliciesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  user_app_id_ = nullptr;
}

DeletePasswordPoliciesRequest::~DeletePasswordPoliciesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeletePasswordPoliciesRequest)
  SharedDtor();
}

void DeletePasswordPoliciesRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void DeletePasswordPoliciesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeletePasswordPoliciesRequest& DeletePasswordPoliciesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeletePasswordPoliciesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void DeletePasswordPoliciesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeletePasswordPoliciesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* DeletePasswordPoliciesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeletePasswordPoliciesRequest.ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeletePasswordPoliciesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeletePasswordPoliciesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated string ids = 2;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeletePasswordPoliciesRequest.ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeletePasswordPoliciesRequest)
  return target;
}

size_t DeletePasswordPoliciesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeletePasswordPoliciesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ids_.size());
  for (int i = 0, n = ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ids_.Get(i));
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeletePasswordPoliciesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.DeletePasswordPoliciesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeletePasswordPoliciesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeletePasswordPoliciesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.DeletePasswordPoliciesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.DeletePasswordPoliciesRequest)
    MergeFrom(*source);
  }
}

void DeletePasswordPoliciesRequest::MergeFrom(const DeletePasswordPoliciesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeletePasswordPoliciesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void DeletePasswordPoliciesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.DeletePasswordPoliciesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeletePasswordPoliciesRequest::CopyFrom(const DeletePasswordPoliciesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeletePasswordPoliciesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeletePasswordPoliciesRequest::IsInitialized() const {
  return true;
}

void DeletePasswordPoliciesRequest::InternalSwap(DeletePasswordPoliciesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeletePasswordPoliciesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiplePasswordPoliciesResponse::InitAsDefaultInstance() {
  ::clarifai::api::_MultiplePasswordPoliciesResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class MultiplePasswordPoliciesResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiplePasswordPoliciesResponse* msg);
};

const ::clarifai::api::status::Status&
MultiplePasswordPoliciesResponse::_Internal::status(const MultiplePasswordPoliciesResponse* msg) {
  return *msg->status_;
}
void MultiplePasswordPoliciesResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiplePasswordPoliciesResponse::clear_password_policies() {
  password_policies_.Clear();
}
MultiplePasswordPoliciesResponse::MultiplePasswordPoliciesResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MultiplePasswordPoliciesResponse)
}
MultiplePasswordPoliciesResponse::MultiplePasswordPoliciesResponse(const MultiplePasswordPoliciesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      password_policies_(from.password_policies_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiplePasswordPoliciesResponse)
}

void MultiplePasswordPoliciesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiplePasswordPoliciesResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

MultiplePasswordPoliciesResponse::~MultiplePasswordPoliciesResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiplePasswordPoliciesResponse)
  SharedDtor();
}

void MultiplePasswordPoliciesResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void MultiplePasswordPoliciesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiplePasswordPoliciesResponse& MultiplePasswordPoliciesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiplePasswordPoliciesResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiplePasswordPoliciesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiplePasswordPoliciesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  password_policies_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultiplePasswordPoliciesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.PasswordPolicy password_policies = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_password_policies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiplePasswordPoliciesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiplePasswordPoliciesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.PasswordPolicy password_policies = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_password_policies_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_password_policies(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiplePasswordPoliciesResponse)
  return target;
}

size_t MultiplePasswordPoliciesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiplePasswordPoliciesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.PasswordPolicy password_policies = 2;
  total_size += 1UL * this->_internal_password_policies_size();
  for (const auto& msg : this->password_policies_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiplePasswordPoliciesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MultiplePasswordPoliciesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiplePasswordPoliciesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiplePasswordPoliciesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MultiplePasswordPoliciesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MultiplePasswordPoliciesResponse)
    MergeFrom(*source);
  }
}

void MultiplePasswordPoliciesResponse::MergeFrom(const MultiplePasswordPoliciesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiplePasswordPoliciesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  password_policies_.MergeFrom(from.password_policies_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void MultiplePasswordPoliciesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MultiplePasswordPoliciesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiplePasswordPoliciesResponse::CopyFrom(const MultiplePasswordPoliciesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiplePasswordPoliciesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiplePasswordPoliciesResponse::IsInitialized() const {
  return true;
}

void MultiplePasswordPoliciesResponse::InternalSwap(MultiplePasswordPoliciesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  password_policies_.InternalSwap(&other->password_policies_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiplePasswordPoliciesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetVocabRequest::InitAsDefaultInstance() {
  ::clarifai::api::_GetVocabRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class GetVocabRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetVocabRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetVocabRequest::_Internal::user_app_id(const GetVocabRequest* msg) {
  return *msg->user_app_id_;
}
void GetVocabRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetVocabRequest::GetVocabRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.GetVocabRequest)
}
GetVocabRequest::GetVocabRequest(const GetVocabRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vocab_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vocab_id().empty()) {
    vocab_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vocab_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetVocabRequest)
}

void GetVocabRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetVocabRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  vocab_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

GetVocabRequest::~GetVocabRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetVocabRequest)
  SharedDtor();
}

void GetVocabRequest::SharedDtor() {
  vocab_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetVocabRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetVocabRequest& GetVocabRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetVocabRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void GetVocabRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetVocabRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vocab_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetVocabRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string vocab_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_vocab_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetVocabRequest.vocab_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetVocabRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetVocabRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string vocab_id = 2;
  if (this->vocab_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vocab_id().data(), static_cast<int>(this->_internal_vocab_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetVocabRequest.vocab_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_vocab_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetVocabRequest)
  return target;
}

size_t GetVocabRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetVocabRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vocab_id = 2;
  if (this->vocab_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vocab_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetVocabRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.GetVocabRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetVocabRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetVocabRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.GetVocabRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.GetVocabRequest)
    MergeFrom(*source);
  }
}

void GetVocabRequest::MergeFrom(const GetVocabRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetVocabRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vocab_id().size() > 0) {

    vocab_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vocab_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void GetVocabRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.GetVocabRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetVocabRequest::CopyFrom(const GetVocabRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetVocabRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetVocabRequest::IsInitialized() const {
  return true;
}

void GetVocabRequest::InternalSwap(GetVocabRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vocab_id_.Swap(&other->vocab_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetVocabRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListVocabsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_ListVocabsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class ListVocabsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListVocabsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListVocabsRequest::_Internal::user_app_id(const ListVocabsRequest* msg) {
  return *msg->user_app_id_;
}
void ListVocabsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListVocabsRequest::ListVocabsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ListVocabsRequest)
}
ListVocabsRequest::ListVocabsRequest(const ListVocabsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListVocabsRequest)
}

void ListVocabsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListVocabsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

ListVocabsRequest::~ListVocabsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListVocabsRequest)
  SharedDtor();
}

void ListVocabsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListVocabsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListVocabsRequest& ListVocabsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListVocabsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ListVocabsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListVocabsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear();
}

const char* ListVocabsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListVocabsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListVocabsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // uint32 page = 2;
  if (this->page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListVocabsRequest)
  return target;
}

size_t ListVocabsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListVocabsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 2;
  if (this->page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->per_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_per_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListVocabsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ListVocabsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListVocabsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListVocabsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ListVocabsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ListVocabsRequest)
    MergeFrom(*source);
  }
}

void ListVocabsRequest::MergeFrom(const ListVocabsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListVocabsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from.per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
}

void ListVocabsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ListVocabsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListVocabsRequest::CopyFrom(const ListVocabsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListVocabsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListVocabsRequest::IsInitialized() const {
  return true;
}

void ListVocabsRequest::InternalSwap(ListVocabsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_app_id_, other->user_app_id_);
  swap(page_, other->page_);
  swap(per_page_, other->per_page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListVocabsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostVocabsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostVocabsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PostVocabsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostVocabsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostVocabsRequest::_Internal::user_app_id(const PostVocabsRequest* msg) {
  return *msg->user_app_id_;
}
void PostVocabsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostVocabsRequest::clear_vocabs() {
  vocabs_.Clear();
}
PostVocabsRequest::PostVocabsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostVocabsRequest)
}
PostVocabsRequest::PostVocabsRequest(const PostVocabsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      vocabs_(from.vocabs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostVocabsRequest)
}

void PostVocabsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostVocabsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  user_app_id_ = nullptr;
}

PostVocabsRequest::~PostVocabsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostVocabsRequest)
  SharedDtor();
}

void PostVocabsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostVocabsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostVocabsRequest& PostVocabsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostVocabsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostVocabsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostVocabsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vocabs_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostVocabsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Vocab vocabs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vocabs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostVocabsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostVocabsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Vocab vocabs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vocabs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_vocabs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostVocabsRequest)
  return target;
}

size_t PostVocabsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostVocabsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Vocab vocabs = 2;
  total_size += 1UL * this->_internal_vocabs_size();
  for (const auto& msg : this->vocabs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostVocabsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostVocabsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostVocabsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostVocabsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostVocabsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostVocabsRequest)
    MergeFrom(*source);
  }
}

void PostVocabsRequest::MergeFrom(const PostVocabsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostVocabsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vocabs_.MergeFrom(from.vocabs_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void PostVocabsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostVocabsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostVocabsRequest::CopyFrom(const PostVocabsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostVocabsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostVocabsRequest::IsInitialized() const {
  return true;
}

void PostVocabsRequest::InternalSwap(PostVocabsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vocabs_.InternalSwap(&other->vocabs_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostVocabsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PatchVocabsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PatchVocabsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PatchVocabsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchVocabsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchVocabsRequest::_Internal::user_app_id(const PatchVocabsRequest* msg) {
  return *msg->user_app_id_;
}
void PatchVocabsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PatchVocabsRequest::clear_vocabs() {
  vocabs_.Clear();
}
PatchVocabsRequest::PatchVocabsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PatchVocabsRequest)
}
PatchVocabsRequest::PatchVocabsRequest(const PatchVocabsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      vocabs_(from.vocabs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action().empty()) {
    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchVocabsRequest)
}

void PatchVocabsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PatchVocabsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

PatchVocabsRequest::~PatchVocabsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchVocabsRequest)
  SharedDtor();
}

void PatchVocabsRequest::SharedDtor() {
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PatchVocabsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PatchVocabsRequest& PatchVocabsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PatchVocabsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PatchVocabsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchVocabsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vocabs_.Clear();
  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PatchVocabsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Vocab vocabs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vocabs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchVocabsRequest.action"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PatchVocabsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchVocabsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Vocab vocabs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vocabs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_vocabs(i), target, stream);
  }

  // string action = 3;
  if (this->action().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchVocabsRequest.action");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchVocabsRequest)
  return target;
}

size_t PatchVocabsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchVocabsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Vocab vocabs = 2;
  total_size += 1UL * this->_internal_vocabs_size();
  for (const auto& msg : this->vocabs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string action = 3;
  if (this->action().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PatchVocabsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PatchVocabsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PatchVocabsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PatchVocabsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PatchVocabsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PatchVocabsRequest)
    MergeFrom(*source);
  }
}

void PatchVocabsRequest::MergeFrom(const PatchVocabsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchVocabsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vocabs_.MergeFrom(from.vocabs_);
  if (from.action().size() > 0) {

    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void PatchVocabsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PatchVocabsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatchVocabsRequest::CopyFrom(const PatchVocabsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchVocabsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchVocabsRequest::IsInitialized() const {
  return true;
}

void PatchVocabsRequest::InternalSwap(PatchVocabsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vocabs_.InternalSwap(&other->vocabs_);
  action_.Swap(&other->action_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchVocabsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteVocabRequest::InitAsDefaultInstance() {
  ::clarifai::api::_DeleteVocabRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class DeleteVocabRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteVocabRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteVocabRequest::_Internal::user_app_id(const DeleteVocabRequest* msg) {
  return *msg->user_app_id_;
}
void DeleteVocabRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
DeleteVocabRequest::DeleteVocabRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.DeleteVocabRequest)
}
DeleteVocabRequest::DeleteVocabRequest(const DeleteVocabRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vocab_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vocab_id().empty()) {
    vocab_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vocab_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteVocabRequest)
}

void DeleteVocabRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteVocabRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  vocab_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

DeleteVocabRequest::~DeleteVocabRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteVocabRequest)
  SharedDtor();
}

void DeleteVocabRequest::SharedDtor() {
  vocab_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void DeleteVocabRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteVocabRequest& DeleteVocabRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteVocabRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void DeleteVocabRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteVocabRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vocab_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* DeleteVocabRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string vocab_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_vocab_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteVocabRequest.vocab_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteVocabRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteVocabRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string vocab_id = 2;
  if (this->vocab_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vocab_id().data(), static_cast<int>(this->_internal_vocab_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteVocabRequest.vocab_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_vocab_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteVocabRequest)
  return target;
}

size_t DeleteVocabRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteVocabRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vocab_id = 2;
  if (this->vocab_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vocab_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteVocabRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.DeleteVocabRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteVocabRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteVocabRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.DeleteVocabRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.DeleteVocabRequest)
    MergeFrom(*source);
  }
}

void DeleteVocabRequest::MergeFrom(const DeleteVocabRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteVocabRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vocab_id().size() > 0) {

    vocab_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vocab_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void DeleteVocabRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.DeleteVocabRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteVocabRequest::CopyFrom(const DeleteVocabRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteVocabRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteVocabRequest::IsInitialized() const {
  return true;
}

void DeleteVocabRequest::InternalSwap(DeleteVocabRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vocab_id_.Swap(&other->vocab_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteVocabRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteVocabsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_DeleteVocabsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class DeleteVocabsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteVocabsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteVocabsRequest::_Internal::user_app_id(const DeleteVocabsRequest* msg) {
  return *msg->user_app_id_;
}
void DeleteVocabsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
DeleteVocabsRequest::DeleteVocabsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.DeleteVocabsRequest)
}
DeleteVocabsRequest::DeleteVocabsRequest(const DeleteVocabsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  delete_all_ = from.delete_all_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteVocabsRequest)
}

void DeleteVocabsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteVocabsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delete_all_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(delete_all_));
}

DeleteVocabsRequest::~DeleteVocabsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteVocabsRequest)
  SharedDtor();
}

void DeleteVocabsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void DeleteVocabsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteVocabsRequest& DeleteVocabsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteVocabsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void DeleteVocabsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteVocabsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  delete_all_ = false;
  _internal_metadata_.Clear();
}

const char* DeleteVocabsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteVocabsRequest.ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bool delete_all = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          delete_all_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteVocabsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteVocabsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated string ids = 2;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteVocabsRequest.ids");
    target = stream->WriteString(2, s, target);
  }

  // bool delete_all = 3;
  if (this->delete_all() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_delete_all(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteVocabsRequest)
  return target;
}

size_t DeleteVocabsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteVocabsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ids_.size());
  for (int i = 0, n = ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ids_.Get(i));
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // bool delete_all = 3;
  if (this->delete_all() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteVocabsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.DeleteVocabsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteVocabsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteVocabsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.DeleteVocabsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.DeleteVocabsRequest)
    MergeFrom(*source);
  }
}

void DeleteVocabsRequest::MergeFrom(const DeleteVocabsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteVocabsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.delete_all() != 0) {
    _internal_set_delete_all(from._internal_delete_all());
  }
}

void DeleteVocabsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.DeleteVocabsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteVocabsRequest::CopyFrom(const DeleteVocabsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteVocabsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteVocabsRequest::IsInitialized() const {
  return true;
}

void DeleteVocabsRequest::InternalSwap(DeleteVocabsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
  swap(user_app_id_, other->user_app_id_);
  swap(delete_all_, other->delete_all_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteVocabsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListVocabConceptsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_ListVocabConceptsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class ListVocabConceptsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListVocabConceptsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListVocabConceptsRequest::_Internal::user_app_id(const ListVocabConceptsRequest* msg) {
  return *msg->user_app_id_;
}
void ListVocabConceptsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListVocabConceptsRequest::ListVocabConceptsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ListVocabConceptsRequest)
}
ListVocabConceptsRequest::ListVocabConceptsRequest(const ListVocabConceptsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vocab_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vocab_id().empty()) {
    vocab_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vocab_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListVocabConceptsRequest)
}

void ListVocabConceptsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListVocabConceptsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  vocab_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

ListVocabConceptsRequest::~ListVocabConceptsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListVocabConceptsRequest)
  SharedDtor();
}

void ListVocabConceptsRequest::SharedDtor() {
  vocab_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListVocabConceptsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListVocabConceptsRequest& ListVocabConceptsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListVocabConceptsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ListVocabConceptsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListVocabConceptsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vocab_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear();
}

const char* ListVocabConceptsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string vocab_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_vocab_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListVocabConceptsRequest.vocab_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 per_page = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListVocabConceptsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListVocabConceptsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string vocab_id = 2;
  if (this->vocab_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vocab_id().data(), static_cast<int>(this->_internal_vocab_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListVocabConceptsRequest.vocab_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_vocab_id(), target);
  }

  // uint32 page = 3;
  if (this->page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_page(), target);
  }

  // uint32 per_page = 4;
  if (this->per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListVocabConceptsRequest)
  return target;
}

size_t ListVocabConceptsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListVocabConceptsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vocab_id = 2;
  if (this->vocab_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vocab_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 3;
  if (this->page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page());
  }

  // uint32 per_page = 4;
  if (this->per_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_per_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListVocabConceptsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ListVocabConceptsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListVocabConceptsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListVocabConceptsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ListVocabConceptsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ListVocabConceptsRequest)
    MergeFrom(*source);
  }
}

void ListVocabConceptsRequest::MergeFrom(const ListVocabConceptsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListVocabConceptsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vocab_id().size() > 0) {

    vocab_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vocab_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from.per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
}

void ListVocabConceptsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ListVocabConceptsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListVocabConceptsRequest::CopyFrom(const ListVocabConceptsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListVocabConceptsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListVocabConceptsRequest::IsInitialized() const {
  return true;
}

void ListVocabConceptsRequest::InternalSwap(ListVocabConceptsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vocab_id_.Swap(&other->vocab_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
  swap(page_, other->page_);
  swap(per_page_, other->per_page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListVocabConceptsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostVocabConceptsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostVocabConceptsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PostVocabConceptsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostVocabConceptsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostVocabConceptsRequest::_Internal::user_app_id(const PostVocabConceptsRequest* msg) {
  return *msg->user_app_id_;
}
void PostVocabConceptsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostVocabConceptsRequest::clear_concepts() {
  concepts_.Clear();
}
PostVocabConceptsRequest::PostVocabConceptsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostVocabConceptsRequest)
}
PostVocabConceptsRequest::PostVocabConceptsRequest(const PostVocabConceptsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      concepts_(from.concepts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vocab_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vocab_id().empty()) {
    vocab_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vocab_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostVocabConceptsRequest)
}

void PostVocabConceptsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostVocabConceptsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  vocab_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

PostVocabConceptsRequest::~PostVocabConceptsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostVocabConceptsRequest)
  SharedDtor();
}

void PostVocabConceptsRequest::SharedDtor() {
  vocab_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostVocabConceptsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostVocabConceptsRequest& PostVocabConceptsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostVocabConceptsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostVocabConceptsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostVocabConceptsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concepts_.Clear();
  vocab_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostVocabConceptsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string vocab_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_vocab_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostVocabConceptsRequest.vocab_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Concept concepts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_concepts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostVocabConceptsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostVocabConceptsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string vocab_id = 2;
  if (this->vocab_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vocab_id().data(), static_cast<int>(this->_internal_vocab_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostVocabConceptsRequest.vocab_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_vocab_id(), target);
  }

  // repeated .clarifai.api.Concept concepts = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_concepts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_concepts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostVocabConceptsRequest)
  return target;
}

size_t PostVocabConceptsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostVocabConceptsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Concept concepts = 3;
  total_size += 1UL * this->_internal_concepts_size();
  for (const auto& msg : this->concepts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string vocab_id = 2;
  if (this->vocab_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vocab_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostVocabConceptsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostVocabConceptsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostVocabConceptsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostVocabConceptsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostVocabConceptsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostVocabConceptsRequest)
    MergeFrom(*source);
  }
}

void PostVocabConceptsRequest::MergeFrom(const PostVocabConceptsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostVocabConceptsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  concepts_.MergeFrom(from.concepts_);
  if (from.vocab_id().size() > 0) {

    vocab_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vocab_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void PostVocabConceptsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostVocabConceptsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostVocabConceptsRequest::CopyFrom(const PostVocabConceptsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostVocabConceptsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostVocabConceptsRequest::IsInitialized() const {
  return true;
}

void PostVocabConceptsRequest::InternalSwap(PostVocabConceptsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  concepts_.InternalSwap(&other->concepts_);
  vocab_id_.Swap(&other->vocab_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostVocabConceptsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteVocabConceptRequest::InitAsDefaultInstance() {
  ::clarifai::api::_DeleteVocabConceptRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class DeleteVocabConceptRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteVocabConceptRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteVocabConceptRequest::_Internal::user_app_id(const DeleteVocabConceptRequest* msg) {
  return *msg->user_app_id_;
}
void DeleteVocabConceptRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
DeleteVocabConceptRequest::DeleteVocabConceptRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.DeleteVocabConceptRequest)
}
DeleteVocabConceptRequest::DeleteVocabConceptRequest(const DeleteVocabConceptRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vocab_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vocab_id().empty()) {
    vocab_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vocab_id_);
  }
  concept_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_concept_id().empty()) {
    concept_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.concept_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteVocabConceptRequest)
}

void DeleteVocabConceptRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteVocabConceptRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  vocab_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  concept_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

DeleteVocabConceptRequest::~DeleteVocabConceptRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteVocabConceptRequest)
  SharedDtor();
}

void DeleteVocabConceptRequest::SharedDtor() {
  vocab_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  concept_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void DeleteVocabConceptRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteVocabConceptRequest& DeleteVocabConceptRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteVocabConceptRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void DeleteVocabConceptRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteVocabConceptRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vocab_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  concept_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* DeleteVocabConceptRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string vocab_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_vocab_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteVocabConceptRequest.vocab_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string concept_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_concept_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteVocabConceptRequest.concept_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteVocabConceptRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteVocabConceptRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string vocab_id = 2;
  if (this->vocab_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vocab_id().data(), static_cast<int>(this->_internal_vocab_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteVocabConceptRequest.vocab_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_vocab_id(), target);
  }

  // string concept_id = 3;
  if (this->concept_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_concept_id().data(), static_cast<int>(this->_internal_concept_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteVocabConceptRequest.concept_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_concept_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteVocabConceptRequest)
  return target;
}

size_t DeleteVocabConceptRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteVocabConceptRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vocab_id = 2;
  if (this->vocab_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vocab_id());
  }

  // string concept_id = 3;
  if (this->concept_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_concept_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteVocabConceptRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.DeleteVocabConceptRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteVocabConceptRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteVocabConceptRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.DeleteVocabConceptRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.DeleteVocabConceptRequest)
    MergeFrom(*source);
  }
}

void DeleteVocabConceptRequest::MergeFrom(const DeleteVocabConceptRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteVocabConceptRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vocab_id().size() > 0) {

    vocab_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vocab_id_);
  }
  if (from.concept_id().size() > 0) {

    concept_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.concept_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void DeleteVocabConceptRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.DeleteVocabConceptRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteVocabConceptRequest::CopyFrom(const DeleteVocabConceptRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteVocabConceptRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteVocabConceptRequest::IsInitialized() const {
  return true;
}

void DeleteVocabConceptRequest::InternalSwap(DeleteVocabConceptRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vocab_id_.Swap(&other->vocab_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  concept_id_.Swap(&other->concept_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteVocabConceptRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteVocabConceptsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_DeleteVocabConceptsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class DeleteVocabConceptsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteVocabConceptsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteVocabConceptsRequest::_Internal::user_app_id(const DeleteVocabConceptsRequest* msg) {
  return *msg->user_app_id_;
}
void DeleteVocabConceptsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
DeleteVocabConceptsRequest::DeleteVocabConceptsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.DeleteVocabConceptsRequest)
}
DeleteVocabConceptsRequest::DeleteVocabConceptsRequest(const DeleteVocabConceptsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vocab_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vocab_id().empty()) {
    vocab_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vocab_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  delete_all_ = from.delete_all_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteVocabConceptsRequest)
}

void DeleteVocabConceptsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteVocabConceptsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  vocab_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delete_all_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(delete_all_));
}

DeleteVocabConceptsRequest::~DeleteVocabConceptsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteVocabConceptsRequest)
  SharedDtor();
}

void DeleteVocabConceptsRequest::SharedDtor() {
  vocab_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void DeleteVocabConceptsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteVocabConceptsRequest& DeleteVocabConceptsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteVocabConceptsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void DeleteVocabConceptsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteVocabConceptsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  vocab_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  delete_all_ = false;
  _internal_metadata_.Clear();
}

const char* DeleteVocabConceptsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string vocab_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_vocab_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteVocabConceptsRequest.vocab_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteVocabConceptsRequest.ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // bool delete_all = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          delete_all_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteVocabConceptsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteVocabConceptsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string vocab_id = 2;
  if (this->vocab_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vocab_id().data(), static_cast<int>(this->_internal_vocab_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteVocabConceptsRequest.vocab_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_vocab_id(), target);
  }

  // repeated string ids = 3;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteVocabConceptsRequest.ids");
    target = stream->WriteString(3, s, target);
  }

  // bool delete_all = 4;
  if (this->delete_all() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_delete_all(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteVocabConceptsRequest)
  return target;
}

size_t DeleteVocabConceptsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteVocabConceptsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ids_.size());
  for (int i = 0, n = ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ids_.Get(i));
  }

  // string vocab_id = 2;
  if (this->vocab_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vocab_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // bool delete_all = 4;
  if (this->delete_all() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteVocabConceptsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.DeleteVocabConceptsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteVocabConceptsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteVocabConceptsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.DeleteVocabConceptsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.DeleteVocabConceptsRequest)
    MergeFrom(*source);
  }
}

void DeleteVocabConceptsRequest::MergeFrom(const DeleteVocabConceptsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteVocabConceptsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  if (from.vocab_id().size() > 0) {

    vocab_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vocab_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.delete_all() != 0) {
    _internal_set_delete_all(from._internal_delete_all());
  }
}

void DeleteVocabConceptsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.DeleteVocabConceptsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteVocabConceptsRequest::CopyFrom(const DeleteVocabConceptsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteVocabConceptsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteVocabConceptsRequest::IsInitialized() const {
  return true;
}

void DeleteVocabConceptsRequest::InternalSwap(DeleteVocabConceptsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
  vocab_id_.Swap(&other->vocab_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
  swap(delete_all_, other->delete_all_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteVocabConceptsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SingleVocabResponse::InitAsDefaultInstance() {
  ::clarifai::api::_SingleVocabResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
  ::clarifai::api::_SingleVocabResponse_default_instance_._instance.get_mutable()->vocab_ = const_cast< ::clarifai::api::Vocab*>(
      ::clarifai::api::Vocab::internal_default_instance());
}
class SingleVocabResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleVocabResponse* msg);
  static const ::clarifai::api::Vocab& vocab(const SingleVocabResponse* msg);
};

const ::clarifai::api::status::Status&
SingleVocabResponse::_Internal::status(const SingleVocabResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::Vocab&
SingleVocabResponse::_Internal::vocab(const SingleVocabResponse* msg) {
  return *msg->vocab_;
}
void SingleVocabResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleVocabResponse::clear_vocab() {
  if (GetArenaNoVirtual() == nullptr && vocab_ != nullptr) {
    delete vocab_;
  }
  vocab_ = nullptr;
}
SingleVocabResponse::SingleVocabResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.SingleVocabResponse)
}
SingleVocabResponse::SingleVocabResponse(const SingleVocabResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_vocab()) {
    vocab_ = new ::clarifai::api::Vocab(*from.vocab_);
  } else {
    vocab_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleVocabResponse)
}

void SingleVocabResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SingleVocabResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vocab_) -
      reinterpret_cast<char*>(&status_)) + sizeof(vocab_));
}

SingleVocabResponse::~SingleVocabResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleVocabResponse)
  SharedDtor();
}

void SingleVocabResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete vocab_;
}

void SingleVocabResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleVocabResponse& SingleVocabResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleVocabResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void SingleVocabResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleVocabResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && vocab_ != nullptr) {
    delete vocab_;
  }
  vocab_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SingleVocabResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Vocab vocab = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vocab(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleVocabResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleVocabResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.Vocab vocab = 2;
  if (this->has_vocab()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::vocab(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleVocabResponse)
  return target;
}

size_t SingleVocabResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleVocabResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.Vocab vocab = 2;
  if (this->has_vocab()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vocab_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleVocabResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.SingleVocabResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleVocabResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleVocabResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.SingleVocabResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.SingleVocabResponse)
    MergeFrom(*source);
  }
}

void SingleVocabResponse::MergeFrom(const SingleVocabResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleVocabResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.has_vocab()) {
    _internal_mutable_vocab()->::clarifai::api::Vocab::MergeFrom(from._internal_vocab());
  }
}

void SingleVocabResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.SingleVocabResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleVocabResponse::CopyFrom(const SingleVocabResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleVocabResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleVocabResponse::IsInitialized() const {
  return true;
}

void SingleVocabResponse::InternalSwap(SingleVocabResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(vocab_, other->vocab_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleVocabResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiVocabResponse::InitAsDefaultInstance() {
  ::clarifai::api::_MultiVocabResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class MultiVocabResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiVocabResponse* msg);
};

const ::clarifai::api::status::Status&
MultiVocabResponse::_Internal::status(const MultiVocabResponse* msg) {
  return *msg->status_;
}
void MultiVocabResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiVocabResponse::clear_vocabs() {
  vocabs_.Clear();
}
MultiVocabResponse::MultiVocabResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MultiVocabResponse)
}
MultiVocabResponse::MultiVocabResponse(const MultiVocabResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      vocabs_(from.vocabs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiVocabResponse)
}

void MultiVocabResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiVocabResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

MultiVocabResponse::~MultiVocabResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiVocabResponse)
  SharedDtor();
}

void MultiVocabResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void MultiVocabResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiVocabResponse& MultiVocabResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiVocabResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiVocabResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiVocabResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vocabs_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultiVocabResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Vocab vocabs = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vocabs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiVocabResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiVocabResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.Vocab vocabs = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vocabs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_vocabs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiVocabResponse)
  return target;
}

size_t MultiVocabResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiVocabResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Vocab vocabs = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_vocabs_size();
  for (const auto& msg : this->vocabs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiVocabResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MultiVocabResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiVocabResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiVocabResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MultiVocabResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MultiVocabResponse)
    MergeFrom(*source);
  }
}

void MultiVocabResponse::MergeFrom(const MultiVocabResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiVocabResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vocabs_.MergeFrom(from.vocabs_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void MultiVocabResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MultiVocabResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiVocabResponse::CopyFrom(const MultiVocabResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiVocabResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiVocabResponse::IsInitialized() const {
  return true;
}

void MultiVocabResponse::InternalSwap(MultiVocabResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vocabs_.InternalSwap(&other->vocabs_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiVocabResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetWorkflowRequest::InitAsDefaultInstance() {
  ::clarifai::api::_GetWorkflowRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class GetWorkflowRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetWorkflowRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetWorkflowRequest::_Internal::user_app_id(const GetWorkflowRequest* msg) {
  return *msg->user_app_id_;
}
void GetWorkflowRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetWorkflowRequest::GetWorkflowRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.GetWorkflowRequest)
}
GetWorkflowRequest::GetWorkflowRequest(const GetWorkflowRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  workflow_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_workflow_id().empty()) {
    workflow_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.workflow_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  favor_clarifai_workflows_ = from.favor_clarifai_workflows_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetWorkflowRequest)
}

void GetWorkflowRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetWorkflowRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  workflow_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&favor_clarifai_workflows_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(favor_clarifai_workflows_));
}

GetWorkflowRequest::~GetWorkflowRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetWorkflowRequest)
  SharedDtor();
}

void GetWorkflowRequest::SharedDtor() {
  workflow_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetWorkflowRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetWorkflowRequest& GetWorkflowRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetWorkflowRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void GetWorkflowRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetWorkflowRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  workflow_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  favor_clarifai_workflows_ = false;
  _internal_metadata_.Clear();
}

const char* GetWorkflowRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string workflow_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_workflow_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetWorkflowRequest.workflow_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool favor_clarifai_workflows = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          favor_clarifai_workflows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetWorkflowRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetWorkflowRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string workflow_id = 2;
  if (this->workflow_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_workflow_id().data(), static_cast<int>(this->_internal_workflow_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetWorkflowRequest.workflow_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_workflow_id(), target);
  }

  // bool favor_clarifai_workflows = 3;
  if (this->favor_clarifai_workflows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_favor_clarifai_workflows(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetWorkflowRequest)
  return target;
}

size_t GetWorkflowRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetWorkflowRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string workflow_id = 2;
  if (this->workflow_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_workflow_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // bool favor_clarifai_workflows = 3;
  if (this->favor_clarifai_workflows() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetWorkflowRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.GetWorkflowRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetWorkflowRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetWorkflowRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.GetWorkflowRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.GetWorkflowRequest)
    MergeFrom(*source);
  }
}

void GetWorkflowRequest::MergeFrom(const GetWorkflowRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetWorkflowRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.workflow_id().size() > 0) {

    workflow_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.workflow_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.favor_clarifai_workflows() != 0) {
    _internal_set_favor_clarifai_workflows(from._internal_favor_clarifai_workflows());
  }
}

void GetWorkflowRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.GetWorkflowRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetWorkflowRequest::CopyFrom(const GetWorkflowRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetWorkflowRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWorkflowRequest::IsInitialized() const {
  return true;
}

void GetWorkflowRequest::InternalSwap(GetWorkflowRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  workflow_id_.Swap(&other->workflow_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
  swap(favor_clarifai_workflows_, other->favor_clarifai_workflows_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetWorkflowRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListWorkflowsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_ListWorkflowsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class ListWorkflowsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListWorkflowsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListWorkflowsRequest::_Internal::user_app_id(const ListWorkflowsRequest* msg) {
  return *msg->user_app_id_;
}
void ListWorkflowsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListWorkflowsRequest::ListWorkflowsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ListWorkflowsRequest)
}
ListWorkflowsRequest::ListWorkflowsRequest(const ListWorkflowsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListWorkflowsRequest)
}

void ListWorkflowsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListWorkflowsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

ListWorkflowsRequest::~ListWorkflowsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListWorkflowsRequest)
  SharedDtor();
}

void ListWorkflowsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListWorkflowsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListWorkflowsRequest& ListWorkflowsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListWorkflowsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ListWorkflowsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListWorkflowsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear();
}

const char* ListWorkflowsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListWorkflowsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListWorkflowsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // uint32 page = 2;
  if (this->page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListWorkflowsRequest)
  return target;
}

size_t ListWorkflowsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListWorkflowsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 2;
  if (this->page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->per_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_per_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListWorkflowsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ListWorkflowsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListWorkflowsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListWorkflowsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ListWorkflowsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ListWorkflowsRequest)
    MergeFrom(*source);
  }
}

void ListWorkflowsRequest::MergeFrom(const ListWorkflowsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListWorkflowsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from.per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
}

void ListWorkflowsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ListWorkflowsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListWorkflowsRequest::CopyFrom(const ListWorkflowsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListWorkflowsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListWorkflowsRequest::IsInitialized() const {
  return true;
}

void ListWorkflowsRequest::InternalSwap(ListWorkflowsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_app_id_, other->user_app_id_);
  swap(page_, other->page_);
  swap(per_page_, other->per_page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListWorkflowsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListPublicWorkflowsRequest::InitAsDefaultInstance() {
}
class ListPublicWorkflowsRequest::_Internal {
 public:
};

ListPublicWorkflowsRequest::ListPublicWorkflowsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ListPublicWorkflowsRequest)
}
ListPublicWorkflowsRequest::ListPublicWorkflowsRequest(const ListPublicWorkflowsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListPublicWorkflowsRequest)
}

void ListPublicWorkflowsRequest::SharedCtor() {
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
}

ListPublicWorkflowsRequest::~ListPublicWorkflowsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListPublicWorkflowsRequest)
  SharedDtor();
}

void ListPublicWorkflowsRequest::SharedDtor() {
}

void ListPublicWorkflowsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListPublicWorkflowsRequest& ListPublicWorkflowsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListPublicWorkflowsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ListPublicWorkflowsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListPublicWorkflowsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear();
}

const char* ListPublicWorkflowsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 page = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 per_page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListPublicWorkflowsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListPublicWorkflowsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 page = 1;
  if (this->page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_page(), target);
  }

  // uint32 per_page = 2;
  if (this->per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListPublicWorkflowsRequest)
  return target;
}

size_t ListPublicWorkflowsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListPublicWorkflowsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 page = 1;
  if (this->page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page());
  }

  // uint32 per_page = 2;
  if (this->per_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_per_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListPublicWorkflowsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ListPublicWorkflowsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListPublicWorkflowsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListPublicWorkflowsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ListPublicWorkflowsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ListPublicWorkflowsRequest)
    MergeFrom(*source);
  }
}

void ListPublicWorkflowsRequest::MergeFrom(const ListPublicWorkflowsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListPublicWorkflowsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from.per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
}

void ListPublicWorkflowsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ListPublicWorkflowsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListPublicWorkflowsRequest::CopyFrom(const ListPublicWorkflowsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListPublicWorkflowsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPublicWorkflowsRequest::IsInitialized() const {
  return true;
}

void ListPublicWorkflowsRequest::InternalSwap(ListPublicWorkflowsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(page_, other->page_);
  swap(per_page_, other->per_page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPublicWorkflowsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostWorkflowsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostWorkflowsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PostWorkflowsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostWorkflowsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostWorkflowsRequest::_Internal::user_app_id(const PostWorkflowsRequest* msg) {
  return *msg->user_app_id_;
}
void PostWorkflowsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostWorkflowsRequest::clear_workflows() {
  workflows_.Clear();
}
PostWorkflowsRequest::PostWorkflowsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostWorkflowsRequest)
}
PostWorkflowsRequest::PostWorkflowsRequest(const PostWorkflowsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      workflows_(from.workflows_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostWorkflowsRequest)
}

void PostWorkflowsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostWorkflowsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  user_app_id_ = nullptr;
}

PostWorkflowsRequest::~PostWorkflowsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostWorkflowsRequest)
  SharedDtor();
}

void PostWorkflowsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostWorkflowsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostWorkflowsRequest& PostWorkflowsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostWorkflowsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostWorkflowsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostWorkflowsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  workflows_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostWorkflowsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Workflow workflows = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_workflows(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostWorkflowsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostWorkflowsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Workflow workflows = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_workflows_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_workflows(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostWorkflowsRequest)
  return target;
}

size_t PostWorkflowsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostWorkflowsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Workflow workflows = 2;
  total_size += 1UL * this->_internal_workflows_size();
  for (const auto& msg : this->workflows_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostWorkflowsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostWorkflowsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostWorkflowsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostWorkflowsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostWorkflowsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostWorkflowsRequest)
    MergeFrom(*source);
  }
}

void PostWorkflowsRequest::MergeFrom(const PostWorkflowsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostWorkflowsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  workflows_.MergeFrom(from.workflows_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void PostWorkflowsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostWorkflowsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostWorkflowsRequest::CopyFrom(const PostWorkflowsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostWorkflowsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostWorkflowsRequest::IsInitialized() const {
  return true;
}

void PostWorkflowsRequest::InternalSwap(PostWorkflowsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  workflows_.InternalSwap(&other->workflows_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostWorkflowsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PatchWorkflowsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PatchWorkflowsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PatchWorkflowsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchWorkflowsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchWorkflowsRequest::_Internal::user_app_id(const PatchWorkflowsRequest* msg) {
  return *msg->user_app_id_;
}
void PatchWorkflowsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PatchWorkflowsRequest::clear_workflows() {
  workflows_.Clear();
}
PatchWorkflowsRequest::PatchWorkflowsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PatchWorkflowsRequest)
}
PatchWorkflowsRequest::PatchWorkflowsRequest(const PatchWorkflowsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      workflows_(from.workflows_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action().empty()) {
    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchWorkflowsRequest)
}

void PatchWorkflowsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PatchWorkflowsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

PatchWorkflowsRequest::~PatchWorkflowsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchWorkflowsRequest)
  SharedDtor();
}

void PatchWorkflowsRequest::SharedDtor() {
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PatchWorkflowsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PatchWorkflowsRequest& PatchWorkflowsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PatchWorkflowsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PatchWorkflowsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchWorkflowsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  workflows_.Clear();
  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PatchWorkflowsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Workflow workflows = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_workflows(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchWorkflowsRequest.action"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PatchWorkflowsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchWorkflowsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Workflow workflows = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_workflows_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_workflows(i), target, stream);
  }

  // string action = 3;
  if (this->action().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchWorkflowsRequest.action");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchWorkflowsRequest)
  return target;
}

size_t PatchWorkflowsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchWorkflowsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Workflow workflows = 2;
  total_size += 1UL * this->_internal_workflows_size();
  for (const auto& msg : this->workflows_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string action = 3;
  if (this->action().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PatchWorkflowsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PatchWorkflowsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PatchWorkflowsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PatchWorkflowsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PatchWorkflowsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PatchWorkflowsRequest)
    MergeFrom(*source);
  }
}

void PatchWorkflowsRequest::MergeFrom(const PatchWorkflowsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchWorkflowsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  workflows_.MergeFrom(from.workflows_);
  if (from.action().size() > 0) {

    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void PatchWorkflowsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PatchWorkflowsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatchWorkflowsRequest::CopyFrom(const PatchWorkflowsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchWorkflowsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchWorkflowsRequest::IsInitialized() const {
  return true;
}

void PatchWorkflowsRequest::InternalSwap(PatchWorkflowsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  workflows_.InternalSwap(&other->workflows_);
  action_.Swap(&other->action_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchWorkflowsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteWorkflowRequest::InitAsDefaultInstance() {
  ::clarifai::api::_DeleteWorkflowRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class DeleteWorkflowRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteWorkflowRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteWorkflowRequest::_Internal::user_app_id(const DeleteWorkflowRequest* msg) {
  return *msg->user_app_id_;
}
void DeleteWorkflowRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
DeleteWorkflowRequest::DeleteWorkflowRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.DeleteWorkflowRequest)
}
DeleteWorkflowRequest::DeleteWorkflowRequest(const DeleteWorkflowRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  workflow_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_workflow_id().empty()) {
    workflow_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.workflow_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteWorkflowRequest)
}

void DeleteWorkflowRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteWorkflowRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  workflow_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

DeleteWorkflowRequest::~DeleteWorkflowRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteWorkflowRequest)
  SharedDtor();
}

void DeleteWorkflowRequest::SharedDtor() {
  workflow_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void DeleteWorkflowRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteWorkflowRequest& DeleteWorkflowRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteWorkflowRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void DeleteWorkflowRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteWorkflowRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  workflow_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* DeleteWorkflowRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string workflow_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_workflow_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteWorkflowRequest.workflow_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteWorkflowRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteWorkflowRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string workflow_id = 2;
  if (this->workflow_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_workflow_id().data(), static_cast<int>(this->_internal_workflow_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteWorkflowRequest.workflow_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_workflow_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteWorkflowRequest)
  return target;
}

size_t DeleteWorkflowRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteWorkflowRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string workflow_id = 2;
  if (this->workflow_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_workflow_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteWorkflowRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.DeleteWorkflowRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteWorkflowRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteWorkflowRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.DeleteWorkflowRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.DeleteWorkflowRequest)
    MergeFrom(*source);
  }
}

void DeleteWorkflowRequest::MergeFrom(const DeleteWorkflowRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteWorkflowRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.workflow_id().size() > 0) {

    workflow_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.workflow_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void DeleteWorkflowRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.DeleteWorkflowRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteWorkflowRequest::CopyFrom(const DeleteWorkflowRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteWorkflowRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteWorkflowRequest::IsInitialized() const {
  return true;
}

void DeleteWorkflowRequest::InternalSwap(DeleteWorkflowRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  workflow_id_.Swap(&other->workflow_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteWorkflowRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteWorkflowsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_DeleteWorkflowsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class DeleteWorkflowsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteWorkflowsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteWorkflowsRequest::_Internal::user_app_id(const DeleteWorkflowsRequest* msg) {
  return *msg->user_app_id_;
}
void DeleteWorkflowsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
DeleteWorkflowsRequest::DeleteWorkflowsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.DeleteWorkflowsRequest)
}
DeleteWorkflowsRequest::DeleteWorkflowsRequest(const DeleteWorkflowsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  delete_all_ = from.delete_all_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteWorkflowsRequest)
}

void DeleteWorkflowsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteWorkflowsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delete_all_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(delete_all_));
}

DeleteWorkflowsRequest::~DeleteWorkflowsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteWorkflowsRequest)
  SharedDtor();
}

void DeleteWorkflowsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void DeleteWorkflowsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteWorkflowsRequest& DeleteWorkflowsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteWorkflowsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void DeleteWorkflowsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteWorkflowsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  delete_all_ = false;
  _internal_metadata_.Clear();
}

const char* DeleteWorkflowsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteWorkflowsRequest.ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bool delete_all = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          delete_all_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteWorkflowsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteWorkflowsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated string ids = 2;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteWorkflowsRequest.ids");
    target = stream->WriteString(2, s, target);
  }

  // bool delete_all = 3;
  if (this->delete_all() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_delete_all(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteWorkflowsRequest)
  return target;
}

size_t DeleteWorkflowsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteWorkflowsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ids_.size());
  for (int i = 0, n = ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ids_.Get(i));
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // bool delete_all = 3;
  if (this->delete_all() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteWorkflowsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.DeleteWorkflowsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteWorkflowsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteWorkflowsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.DeleteWorkflowsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.DeleteWorkflowsRequest)
    MergeFrom(*source);
  }
}

void DeleteWorkflowsRequest::MergeFrom(const DeleteWorkflowsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteWorkflowsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.delete_all() != 0) {
    _internal_set_delete_all(from._internal_delete_all());
  }
}

void DeleteWorkflowsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.DeleteWorkflowsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteWorkflowsRequest::CopyFrom(const DeleteWorkflowsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteWorkflowsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteWorkflowsRequest::IsInitialized() const {
  return true;
}

void DeleteWorkflowsRequest::InternalSwap(DeleteWorkflowsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
  swap(user_app_id_, other->user_app_id_);
  swap(delete_all_, other->delete_all_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteWorkflowsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SingleWorkflowResponse::InitAsDefaultInstance() {
  ::clarifai::api::_SingleWorkflowResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
  ::clarifai::api::_SingleWorkflowResponse_default_instance_._instance.get_mutable()->workflow_ = const_cast< ::clarifai::api::Workflow*>(
      ::clarifai::api::Workflow::internal_default_instance());
}
class SingleWorkflowResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleWorkflowResponse* msg);
  static const ::clarifai::api::Workflow& workflow(const SingleWorkflowResponse* msg);
};

const ::clarifai::api::status::Status&
SingleWorkflowResponse::_Internal::status(const SingleWorkflowResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::Workflow&
SingleWorkflowResponse::_Internal::workflow(const SingleWorkflowResponse* msg) {
  return *msg->workflow_;
}
void SingleWorkflowResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleWorkflowResponse::clear_workflow() {
  if (GetArenaNoVirtual() == nullptr && workflow_ != nullptr) {
    delete workflow_;
  }
  workflow_ = nullptr;
}
SingleWorkflowResponse::SingleWorkflowResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.SingleWorkflowResponse)
}
SingleWorkflowResponse::SingleWorkflowResponse(const SingleWorkflowResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_workflow()) {
    workflow_ = new ::clarifai::api::Workflow(*from.workflow_);
  } else {
    workflow_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleWorkflowResponse)
}

void SingleWorkflowResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SingleWorkflowResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&workflow_) -
      reinterpret_cast<char*>(&status_)) + sizeof(workflow_));
}

SingleWorkflowResponse::~SingleWorkflowResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleWorkflowResponse)
  SharedDtor();
}

void SingleWorkflowResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete workflow_;
}

void SingleWorkflowResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleWorkflowResponse& SingleWorkflowResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleWorkflowResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void SingleWorkflowResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleWorkflowResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && workflow_ != nullptr) {
    delete workflow_;
  }
  workflow_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SingleWorkflowResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Workflow workflow = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_workflow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleWorkflowResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleWorkflowResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.Workflow workflow = 2;
  if (this->has_workflow()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::workflow(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleWorkflowResponse)
  return target;
}

size_t SingleWorkflowResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleWorkflowResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.Workflow workflow = 2;
  if (this->has_workflow()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *workflow_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleWorkflowResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.SingleWorkflowResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleWorkflowResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleWorkflowResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.SingleWorkflowResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.SingleWorkflowResponse)
    MergeFrom(*source);
  }
}

void SingleWorkflowResponse::MergeFrom(const SingleWorkflowResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleWorkflowResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.has_workflow()) {
    _internal_mutable_workflow()->::clarifai::api::Workflow::MergeFrom(from._internal_workflow());
  }
}

void SingleWorkflowResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.SingleWorkflowResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleWorkflowResponse::CopyFrom(const SingleWorkflowResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleWorkflowResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleWorkflowResponse::IsInitialized() const {
  return true;
}

void SingleWorkflowResponse::InternalSwap(SingleWorkflowResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(workflow_, other->workflow_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleWorkflowResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiWorkflowResponse::InitAsDefaultInstance() {
  ::clarifai::api::_MultiWorkflowResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class MultiWorkflowResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiWorkflowResponse* msg);
};

const ::clarifai::api::status::Status&
MultiWorkflowResponse::_Internal::status(const MultiWorkflowResponse* msg) {
  return *msg->status_;
}
void MultiWorkflowResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiWorkflowResponse::clear_workflows() {
  workflows_.Clear();
}
MultiWorkflowResponse::MultiWorkflowResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MultiWorkflowResponse)
}
MultiWorkflowResponse::MultiWorkflowResponse(const MultiWorkflowResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      workflows_(from.workflows_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiWorkflowResponse)
}

void MultiWorkflowResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiWorkflowResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

MultiWorkflowResponse::~MultiWorkflowResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiWorkflowResponse)
  SharedDtor();
}

void MultiWorkflowResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void MultiWorkflowResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiWorkflowResponse& MultiWorkflowResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiWorkflowResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiWorkflowResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiWorkflowResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  workflows_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultiWorkflowResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Workflow workflows = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_workflows(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiWorkflowResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiWorkflowResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.Workflow workflows = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_workflows_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_workflows(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiWorkflowResponse)
  return target;
}

size_t MultiWorkflowResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiWorkflowResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Workflow workflows = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_workflows_size();
  for (const auto& msg : this->workflows_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiWorkflowResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MultiWorkflowResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiWorkflowResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiWorkflowResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MultiWorkflowResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MultiWorkflowResponse)
    MergeFrom(*source);
  }
}

void MultiWorkflowResponse::MergeFrom(const MultiWorkflowResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiWorkflowResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  workflows_.MergeFrom(from.workflows_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void MultiWorkflowResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MultiWorkflowResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiWorkflowResponse::CopyFrom(const MultiWorkflowResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiWorkflowResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiWorkflowResponse::IsInitialized() const {
  return true;
}

void MultiWorkflowResponse::InternalSwap(MultiWorkflowResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  workflows_.InternalSwap(&other->workflows_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiWorkflowResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostWorkflowResultsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostWorkflowResultsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
  ::clarifai::api::_PostWorkflowResultsRequest_default_instance_._instance.get_mutable()->output_config_ = const_cast< ::clarifai::api::OutputConfig*>(
      ::clarifai::api::OutputConfig::internal_default_instance());
}
class PostWorkflowResultsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostWorkflowResultsRequest* msg);
  static const ::clarifai::api::OutputConfig& output_config(const PostWorkflowResultsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostWorkflowResultsRequest::_Internal::user_app_id(const PostWorkflowResultsRequest* msg) {
  return *msg->user_app_id_;
}
const ::clarifai::api::OutputConfig&
PostWorkflowResultsRequest::_Internal::output_config(const PostWorkflowResultsRequest* msg) {
  return *msg->output_config_;
}
void PostWorkflowResultsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostWorkflowResultsRequest::clear_inputs() {
  inputs_.Clear();
}
void PostWorkflowResultsRequest::clear_output_config() {
  if (GetArenaNoVirtual() == nullptr && output_config_ != nullptr) {
    delete output_config_;
  }
  output_config_ = nullptr;
}
PostWorkflowResultsRequest::PostWorkflowResultsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostWorkflowResultsRequest)
}
PostWorkflowResultsRequest::PostWorkflowResultsRequest(const PostWorkflowResultsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      inputs_(from.inputs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  workflow_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_workflow_id().empty()) {
    workflow_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.workflow_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  if (from._internal_has_output_config()) {
    output_config_ = new ::clarifai::api::OutputConfig(*from.output_config_);
  } else {
    output_config_ = nullptr;
  }
  favor_clarifai_workflows_ = from.favor_clarifai_workflows_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostWorkflowResultsRequest)
}

void PostWorkflowResultsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostWorkflowResultsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  workflow_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&favor_clarifai_workflows_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(favor_clarifai_workflows_));
}

PostWorkflowResultsRequest::~PostWorkflowResultsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostWorkflowResultsRequest)
  SharedDtor();
}

void PostWorkflowResultsRequest::SharedDtor() {
  workflow_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
  if (this != internal_default_instance()) delete output_config_;
}

void PostWorkflowResultsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostWorkflowResultsRequest& PostWorkflowResultsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostWorkflowResultsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostWorkflowResultsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostWorkflowResultsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inputs_.Clear();
  workflow_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && output_config_ != nullptr) {
    delete output_config_;
  }
  output_config_ = nullptr;
  favor_clarifai_workflows_ = false;
  _internal_metadata_.Clear();
}

const char* PostWorkflowResultsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string workflow_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_workflow_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostWorkflowResultsRequest.workflow_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Input inputs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .clarifai.api.OutputConfig output_config = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_output_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool favor_clarifai_workflows = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          favor_clarifai_workflows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostWorkflowResultsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostWorkflowResultsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string workflow_id = 2;
  if (this->workflow_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_workflow_id().data(), static_cast<int>(this->_internal_workflow_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostWorkflowResultsRequest.workflow_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_workflow_id(), target);
  }

  // repeated .clarifai.api.Input inputs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_inputs(i), target, stream);
  }

  // .clarifai.api.OutputConfig output_config = 4;
  if (this->has_output_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::output_config(this), target, stream);
  }

  // bool favor_clarifai_workflows = 5;
  if (this->favor_clarifai_workflows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_favor_clarifai_workflows(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostWorkflowResultsRequest)
  return target;
}

size_t PostWorkflowResultsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostWorkflowResultsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Input inputs = 3;
  total_size += 1UL * this->_internal_inputs_size();
  for (const auto& msg : this->inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string workflow_id = 2;
  if (this->workflow_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_workflow_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // .clarifai.api.OutputConfig output_config = 4;
  if (this->has_output_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *output_config_);
  }

  // bool favor_clarifai_workflows = 5;
  if (this->favor_clarifai_workflows() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostWorkflowResultsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostWorkflowResultsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostWorkflowResultsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostWorkflowResultsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostWorkflowResultsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostWorkflowResultsRequest)
    MergeFrom(*source);
  }
}

void PostWorkflowResultsRequest::MergeFrom(const PostWorkflowResultsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostWorkflowResultsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inputs_.MergeFrom(from.inputs_);
  if (from.workflow_id().size() > 0) {

    workflow_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.workflow_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.has_output_config()) {
    _internal_mutable_output_config()->::clarifai::api::OutputConfig::MergeFrom(from._internal_output_config());
  }
  if (from.favor_clarifai_workflows() != 0) {
    _internal_set_favor_clarifai_workflows(from._internal_favor_clarifai_workflows());
  }
}

void PostWorkflowResultsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostWorkflowResultsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostWorkflowResultsRequest::CopyFrom(const PostWorkflowResultsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostWorkflowResultsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostWorkflowResultsRequest::IsInitialized() const {
  return true;
}

void PostWorkflowResultsRequest::InternalSwap(PostWorkflowResultsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  inputs_.InternalSwap(&other->inputs_);
  workflow_id_.Swap(&other->workflow_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
  swap(output_config_, other->output_config_);
  swap(favor_clarifai_workflows_, other->favor_clarifai_workflows_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostWorkflowResultsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostWorkflowResultsResponse::InitAsDefaultInstance() {
  ::clarifai::api::_PostWorkflowResultsResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
  ::clarifai::api::_PostWorkflowResultsResponse_default_instance_._instance.get_mutable()->workflow_ = const_cast< ::clarifai::api::Workflow*>(
      ::clarifai::api::Workflow::internal_default_instance());
}
class PostWorkflowResultsResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const PostWorkflowResultsResponse* msg);
  static const ::clarifai::api::Workflow& workflow(const PostWorkflowResultsResponse* msg);
};

const ::clarifai::api::status::Status&
PostWorkflowResultsResponse::_Internal::status(const PostWorkflowResultsResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::Workflow&
PostWorkflowResultsResponse::_Internal::workflow(const PostWorkflowResultsResponse* msg) {
  return *msg->workflow_;
}
void PostWorkflowResultsResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void PostWorkflowResultsResponse::clear_workflow() {
  if (GetArenaNoVirtual() == nullptr && workflow_ != nullptr) {
    delete workflow_;
  }
  workflow_ = nullptr;
}
void PostWorkflowResultsResponse::clear_results() {
  results_.Clear();
}
PostWorkflowResultsResponse::PostWorkflowResultsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostWorkflowResultsResponse)
}
PostWorkflowResultsResponse::PostWorkflowResultsResponse(const PostWorkflowResultsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      results_(from.results_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_workflow()) {
    workflow_ = new ::clarifai::api::Workflow(*from.workflow_);
  } else {
    workflow_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostWorkflowResultsResponse)
}

void PostWorkflowResultsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostWorkflowResultsResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&workflow_) -
      reinterpret_cast<char*>(&status_)) + sizeof(workflow_));
}

PostWorkflowResultsResponse::~PostWorkflowResultsResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostWorkflowResultsResponse)
  SharedDtor();
}

void PostWorkflowResultsResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete workflow_;
}

void PostWorkflowResultsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostWorkflowResultsResponse& PostWorkflowResultsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostWorkflowResultsResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostWorkflowResultsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostWorkflowResultsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && workflow_ != nullptr) {
    delete workflow_;
  }
  workflow_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostWorkflowResultsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Workflow workflow = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_workflow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.WorkflowResult results = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostWorkflowResultsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostWorkflowResultsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.Workflow workflow = 2;
  if (this->has_workflow()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::workflow(this), target, stream);
  }

  // repeated .clarifai.api.WorkflowResult results = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostWorkflowResultsResponse)
  return target;
}

size_t PostWorkflowResultsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostWorkflowResultsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.WorkflowResult results = 3;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.Workflow workflow = 2;
  if (this->has_workflow()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *workflow_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostWorkflowResultsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostWorkflowResultsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PostWorkflowResultsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostWorkflowResultsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostWorkflowResultsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostWorkflowResultsResponse)
    MergeFrom(*source);
  }
}

void PostWorkflowResultsResponse::MergeFrom(const PostWorkflowResultsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostWorkflowResultsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.has_workflow()) {
    _internal_mutable_workflow()->::clarifai::api::Workflow::MergeFrom(from._internal_workflow());
  }
}

void PostWorkflowResultsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostWorkflowResultsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostWorkflowResultsResponse::CopyFrom(const PostWorkflowResultsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostWorkflowResultsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostWorkflowResultsResponse::IsInitialized() const {
  return true;
}

void PostWorkflowResultsResponse::InternalSwap(PostWorkflowResultsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  results_.InternalSwap(&other->results_);
  swap(status_, other->status_);
  swap(workflow_, other->workflow_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostWorkflowResultsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostWorkflowResultsSimilarityRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostWorkflowResultsSimilarityRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PostWorkflowResultsSimilarityRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostWorkflowResultsSimilarityRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostWorkflowResultsSimilarityRequest::_Internal::user_app_id(const PostWorkflowResultsSimilarityRequest* msg) {
  return *msg->user_app_id_;
}
void PostWorkflowResultsSimilarityRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostWorkflowResultsSimilarityRequest::clear_probe_inputs() {
  probe_inputs_.Clear();
}
void PostWorkflowResultsSimilarityRequest::clear_pool_inputs() {
  pool_inputs_.Clear();
}
PostWorkflowResultsSimilarityRequest::PostWorkflowResultsSimilarityRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostWorkflowResultsSimilarityRequest)
}
PostWorkflowResultsSimilarityRequest::PostWorkflowResultsSimilarityRequest(const PostWorkflowResultsSimilarityRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      probe_inputs_(from.probe_inputs_),
      pool_inputs_(from.pool_inputs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  workflow_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_workflow_id().empty()) {
    workflow_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.workflow_id_);
  }
  model_version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_version_id().empty()) {
    model_version_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_version_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  favor_clarifai_workflows_ = from.favor_clarifai_workflows_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostWorkflowResultsSimilarityRequest)
}

void PostWorkflowResultsSimilarityRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostWorkflowResultsSimilarityRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  workflow_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&favor_clarifai_workflows_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(favor_clarifai_workflows_));
}

PostWorkflowResultsSimilarityRequest::~PostWorkflowResultsSimilarityRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostWorkflowResultsSimilarityRequest)
  SharedDtor();
}

void PostWorkflowResultsSimilarityRequest::SharedDtor() {
  workflow_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_version_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostWorkflowResultsSimilarityRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostWorkflowResultsSimilarityRequest& PostWorkflowResultsSimilarityRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostWorkflowResultsSimilarityRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostWorkflowResultsSimilarityRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostWorkflowResultsSimilarityRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  probe_inputs_.Clear();
  pool_inputs_.Clear();
  workflow_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_version_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  favor_clarifai_workflows_ = false;
  _internal_metadata_.Clear();
}

const char* PostWorkflowResultsSimilarityRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string workflow_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_workflow_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostWorkflowResultsSimilarityRequest.workflow_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_version_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_model_version_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostWorkflowResultsSimilarityRequest.model_version_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Input probe_inputs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_probe_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Input pool_inputs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pool_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // bool favor_clarifai_workflows = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          favor_clarifai_workflows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostWorkflowResultsSimilarityRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostWorkflowResultsSimilarityRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string workflow_id = 2;
  if (this->workflow_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_workflow_id().data(), static_cast<int>(this->_internal_workflow_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostWorkflowResultsSimilarityRequest.workflow_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_workflow_id(), target);
  }

  // string model_version_id = 3;
  if (this->model_version_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_version_id().data(), static_cast<int>(this->_internal_model_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostWorkflowResultsSimilarityRequest.model_version_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_model_version_id(), target);
  }

  // repeated .clarifai.api.Input probe_inputs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_probe_inputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_probe_inputs(i), target, stream);
  }

  // repeated .clarifai.api.Input pool_inputs = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pool_inputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_pool_inputs(i), target, stream);
  }

  // bool favor_clarifai_workflows = 6;
  if (this->favor_clarifai_workflows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_favor_clarifai_workflows(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostWorkflowResultsSimilarityRequest)
  return target;
}

size_t PostWorkflowResultsSimilarityRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostWorkflowResultsSimilarityRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Input probe_inputs = 4;
  total_size += 1UL * this->_internal_probe_inputs_size();
  for (const auto& msg : this->probe_inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.Input pool_inputs = 5;
  total_size += 1UL * this->_internal_pool_inputs_size();
  for (const auto& msg : this->pool_inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string workflow_id = 2;
  if (this->workflow_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_workflow_id());
  }

  // string model_version_id = 3;
  if (this->model_version_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_version_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // bool favor_clarifai_workflows = 6;
  if (this->favor_clarifai_workflows() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostWorkflowResultsSimilarityRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostWorkflowResultsSimilarityRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostWorkflowResultsSimilarityRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostWorkflowResultsSimilarityRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostWorkflowResultsSimilarityRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostWorkflowResultsSimilarityRequest)
    MergeFrom(*source);
  }
}

void PostWorkflowResultsSimilarityRequest::MergeFrom(const PostWorkflowResultsSimilarityRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostWorkflowResultsSimilarityRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  probe_inputs_.MergeFrom(from.probe_inputs_);
  pool_inputs_.MergeFrom(from.pool_inputs_);
  if (from.workflow_id().size() > 0) {

    workflow_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.workflow_id_);
  }
  if (from.model_version_id().size() > 0) {

    model_version_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_version_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.favor_clarifai_workflows() != 0) {
    _internal_set_favor_clarifai_workflows(from._internal_favor_clarifai_workflows());
  }
}

void PostWorkflowResultsSimilarityRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostWorkflowResultsSimilarityRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostWorkflowResultsSimilarityRequest::CopyFrom(const PostWorkflowResultsSimilarityRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostWorkflowResultsSimilarityRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostWorkflowResultsSimilarityRequest::IsInitialized() const {
  return true;
}

void PostWorkflowResultsSimilarityRequest::InternalSwap(PostWorkflowResultsSimilarityRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  probe_inputs_.InternalSwap(&other->probe_inputs_);
  pool_inputs_.InternalSwap(&other->pool_inputs_);
  workflow_id_.Swap(&other->workflow_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  model_version_id_.Swap(&other->model_version_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
  swap(favor_clarifai_workflows_, other->favor_clarifai_workflows_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostWorkflowResultsSimilarityRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostWorkflowResultsSimilarityResponse::InitAsDefaultInstance() {
  ::clarifai::api::_PostWorkflowResultsSimilarityResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class PostWorkflowResultsSimilarityResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const PostWorkflowResultsSimilarityResponse* msg);
};

const ::clarifai::api::status::Status&
PostWorkflowResultsSimilarityResponse::_Internal::status(const PostWorkflowResultsSimilarityResponse* msg) {
  return *msg->status_;
}
void PostWorkflowResultsSimilarityResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void PostWorkflowResultsSimilarityResponse::clear_results() {
  results_.Clear();
}
PostWorkflowResultsSimilarityResponse::PostWorkflowResultsSimilarityResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostWorkflowResultsSimilarityResponse)
}
PostWorkflowResultsSimilarityResponse::PostWorkflowResultsSimilarityResponse(const PostWorkflowResultsSimilarityResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      results_(from.results_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostWorkflowResultsSimilarityResponse)
}

void PostWorkflowResultsSimilarityResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostWorkflowResultsSimilarityResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

PostWorkflowResultsSimilarityResponse::~PostWorkflowResultsSimilarityResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostWorkflowResultsSimilarityResponse)
  SharedDtor();
}

void PostWorkflowResultsSimilarityResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void PostWorkflowResultsSimilarityResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostWorkflowResultsSimilarityResponse& PostWorkflowResultsSimilarityResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostWorkflowResultsSimilarityResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostWorkflowResultsSimilarityResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostWorkflowResultsSimilarityResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostWorkflowResultsSimilarityResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.WorkflowResultsSimilarity results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostWorkflowResultsSimilarityResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostWorkflowResultsSimilarityResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.WorkflowResultsSimilarity results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostWorkflowResultsSimilarityResponse)
  return target;
}

size_t PostWorkflowResultsSimilarityResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostWorkflowResultsSimilarityResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.WorkflowResultsSimilarity results = 2;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostWorkflowResultsSimilarityResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostWorkflowResultsSimilarityResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PostWorkflowResultsSimilarityResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostWorkflowResultsSimilarityResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostWorkflowResultsSimilarityResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostWorkflowResultsSimilarityResponse)
    MergeFrom(*source);
  }
}

void PostWorkflowResultsSimilarityResponse::MergeFrom(const PostWorkflowResultsSimilarityResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostWorkflowResultsSimilarityResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void PostWorkflowResultsSimilarityResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostWorkflowResultsSimilarityResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostWorkflowResultsSimilarityResponse::CopyFrom(const PostWorkflowResultsSimilarityResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostWorkflowResultsSimilarityResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostWorkflowResultsSimilarityResponse::IsInitialized() const {
  return true;
}

void PostWorkflowResultsSimilarityResponse::InternalSwap(PostWorkflowResultsSimilarityResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  results_.InternalSwap(&other->results_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostWorkflowResultsSimilarityResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrainingTemplate::InitAsDefaultInstance() {
  ::clarifai::api::_TrainingTemplate_default_instance_._instance.get_mutable()->default_args_ = const_cast< PROTOBUF_NAMESPACE_ID::Struct*>(
      PROTOBUF_NAMESPACE_ID::Struct::internal_default_instance());
}
class TrainingTemplate::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Struct& default_args(const TrainingTemplate* msg);
};

const PROTOBUF_NAMESPACE_ID::Struct&
TrainingTemplate::_Internal::default_args(const TrainingTemplate* msg) {
  return *msg->default_args_;
}
void TrainingTemplate::clear_default_args() {
  if (GetArenaNoVirtual() == nullptr && default_args_ != nullptr) {
    delete default_args_;
  }
  default_args_ = nullptr;
}
TrainingTemplate::TrainingTemplate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.TrainingTemplate)
}
TrainingTemplate::TrainingTemplate(const TrainingTemplate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  doc_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_doc_string().empty()) {
    doc_string_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.doc_string_);
  }
  model_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_type().empty()) {
    model_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_type_);
  }
  if (from._internal_has_default_args()) {
    default_args_ = new PROTOBUF_NAMESPACE_ID::Struct(*from.default_args_);
  } else {
    default_args_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.TrainingTemplate)
}

void TrainingTemplate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrainingTemplate_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  doc_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  default_args_ = nullptr;
}

TrainingTemplate::~TrainingTemplate() {
  // @@protoc_insertion_point(destructor:clarifai.api.TrainingTemplate)
  SharedDtor();
}

void TrainingTemplate::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  doc_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete default_args_;
}

void TrainingTemplate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrainingTemplate& TrainingTemplate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrainingTemplate_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void TrainingTemplate::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.TrainingTemplate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  doc_string_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && default_args_ != nullptr) {
    delete default_args_;
  }
  default_args_ = nullptr;
  _internal_metadata_.Clear();
}

const char* TrainingTemplate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.TrainingTemplate.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Struct default_args = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_default_args(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string doc_string = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_doc_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.TrainingTemplate.doc_string"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_model_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.TrainingTemplate.model_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrainingTemplate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.TrainingTemplate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.TrainingTemplate.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .google.protobuf.Struct default_args = 2;
  if (this->has_default_args()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::default_args(this), target, stream);
  }

  // string doc_string = 3;
  if (this->doc_string().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_doc_string().data(), static_cast<int>(this->_internal_doc_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.TrainingTemplate.doc_string");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_doc_string(), target);
  }

  // string model_type = 4;
  if (this->model_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_type().data(), static_cast<int>(this->_internal_model_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.TrainingTemplate.model_type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_model_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.TrainingTemplate)
  return target;
}

size_t TrainingTemplate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.TrainingTemplate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string doc_string = 3;
  if (this->doc_string().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_doc_string());
  }

  // string model_type = 4;
  if (this->model_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_type());
  }

  // .google.protobuf.Struct default_args = 2;
  if (this->has_default_args()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *default_args_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrainingTemplate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.TrainingTemplate)
  GOOGLE_DCHECK_NE(&from, this);
  const TrainingTemplate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrainingTemplate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.TrainingTemplate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.TrainingTemplate)
    MergeFrom(*source);
  }
}

void TrainingTemplate::MergeFrom(const TrainingTemplate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.TrainingTemplate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.doc_string().size() > 0) {

    doc_string_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.doc_string_);
  }
  if (from.model_type().size() > 0) {

    model_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_type_);
  }
  if (from.has_default_args()) {
    _internal_mutable_default_args()->PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_default_args());
  }
}

void TrainingTemplate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.TrainingTemplate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainingTemplate::CopyFrom(const TrainingTemplate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.TrainingTemplate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainingTemplate::IsInitialized() const {
  return true;
}

void TrainingTemplate::InternalSwap(TrainingTemplate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  doc_string_.Swap(&other->doc_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  model_type_.Swap(&other->model_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(default_args_, other->default_args_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrainingTemplate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListTrainingTemplatesRequest::InitAsDefaultInstance() {
  ::clarifai::api::_ListTrainingTemplatesRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class ListTrainingTemplatesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListTrainingTemplatesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListTrainingTemplatesRequest::_Internal::user_app_id(const ListTrainingTemplatesRequest* msg) {
  return *msg->user_app_id_;
}
void ListTrainingTemplatesRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListTrainingTemplatesRequest::ListTrainingTemplatesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ListTrainingTemplatesRequest)
}
ListTrainingTemplatesRequest::ListTrainingTemplatesRequest(const ListTrainingTemplatesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListTrainingTemplatesRequest)
}

void ListTrainingTemplatesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListTrainingTemplatesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  user_app_id_ = nullptr;
}

ListTrainingTemplatesRequest::~ListTrainingTemplatesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListTrainingTemplatesRequest)
  SharedDtor();
}

void ListTrainingTemplatesRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListTrainingTemplatesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListTrainingTemplatesRequest& ListTrainingTemplatesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListTrainingTemplatesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ListTrainingTemplatesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListTrainingTemplatesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ListTrainingTemplatesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListTrainingTemplatesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListTrainingTemplatesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListTrainingTemplatesRequest)
  return target;
}

size_t ListTrainingTemplatesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListTrainingTemplatesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListTrainingTemplatesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ListTrainingTemplatesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListTrainingTemplatesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListTrainingTemplatesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ListTrainingTemplatesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ListTrainingTemplatesRequest)
    MergeFrom(*source);
  }
}

void ListTrainingTemplatesRequest::MergeFrom(const ListTrainingTemplatesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListTrainingTemplatesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void ListTrainingTemplatesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ListTrainingTemplatesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListTrainingTemplatesRequest::CopyFrom(const ListTrainingTemplatesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListTrainingTemplatesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListTrainingTemplatesRequest::IsInitialized() const {
  return true;
}

void ListTrainingTemplatesRequest::InternalSwap(ListTrainingTemplatesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListTrainingTemplatesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiTrainingTemplatesResponse::InitAsDefaultInstance() {
  ::clarifai::api::_MultiTrainingTemplatesResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class MultiTrainingTemplatesResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiTrainingTemplatesResponse* msg);
};

const ::clarifai::api::status::Status&
MultiTrainingTemplatesResponse::_Internal::status(const MultiTrainingTemplatesResponse* msg) {
  return *msg->status_;
}
void MultiTrainingTemplatesResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
MultiTrainingTemplatesResponse::MultiTrainingTemplatesResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MultiTrainingTemplatesResponse)
}
MultiTrainingTemplatesResponse::MultiTrainingTemplatesResponse(const MultiTrainingTemplatesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      training_template_(from.training_template_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiTrainingTemplatesResponse)
}

void MultiTrainingTemplatesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiTrainingTemplatesResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

MultiTrainingTemplatesResponse::~MultiTrainingTemplatesResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiTrainingTemplatesResponse)
  SharedDtor();
}

void MultiTrainingTemplatesResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void MultiTrainingTemplatesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiTrainingTemplatesResponse& MultiTrainingTemplatesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiTrainingTemplatesResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiTrainingTemplatesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiTrainingTemplatesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  training_template_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultiTrainingTemplatesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.TrainingTemplate training_template = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_training_template(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiTrainingTemplatesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiTrainingTemplatesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.TrainingTemplate training_template = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_training_template_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_training_template(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiTrainingTemplatesResponse)
  return target;
}

size_t MultiTrainingTemplatesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiTrainingTemplatesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.TrainingTemplate training_template = 2;
  total_size += 1UL * this->_internal_training_template_size();
  for (const auto& msg : this->training_template_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiTrainingTemplatesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MultiTrainingTemplatesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiTrainingTemplatesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiTrainingTemplatesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MultiTrainingTemplatesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MultiTrainingTemplatesResponse)
    MergeFrom(*source);
  }
}

void MultiTrainingTemplatesResponse::MergeFrom(const MultiTrainingTemplatesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiTrainingTemplatesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  training_template_.MergeFrom(from.training_template_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void MultiTrainingTemplatesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MultiTrainingTemplatesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiTrainingTemplatesResponse::CopyFrom(const MultiTrainingTemplatesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiTrainingTemplatesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiTrainingTemplatesResponse::IsInitialized() const {
  return true;
}

void MultiTrainingTemplatesResponse::InternalSwap(MultiTrainingTemplatesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  training_template_.InternalSwap(&other->training_template_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiTrainingTemplatesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostAppDuplicationsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostAppDuplicationsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PostAppDuplicationsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostAppDuplicationsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostAppDuplicationsRequest::_Internal::user_app_id(const PostAppDuplicationsRequest* msg) {
  return *msg->user_app_id_;
}
void PostAppDuplicationsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostAppDuplicationsRequest::clear_app_duplications() {
  app_duplications_.Clear();
}
PostAppDuplicationsRequest::PostAppDuplicationsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostAppDuplicationsRequest)
}
PostAppDuplicationsRequest::PostAppDuplicationsRequest(const PostAppDuplicationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      app_duplications_(from.app_duplications_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostAppDuplicationsRequest)
}

void PostAppDuplicationsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostAppDuplicationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  user_app_id_ = nullptr;
}

PostAppDuplicationsRequest::~PostAppDuplicationsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostAppDuplicationsRequest)
  SharedDtor();
}

void PostAppDuplicationsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostAppDuplicationsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostAppDuplicationsRequest& PostAppDuplicationsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostAppDuplicationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostAppDuplicationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostAppDuplicationsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  app_duplications_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostAppDuplicationsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.AppDuplication app_duplications = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_app_duplications(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostAppDuplicationsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostAppDuplicationsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.AppDuplication app_duplications = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_app_duplications_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_app_duplications(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostAppDuplicationsRequest)
  return target;
}

size_t PostAppDuplicationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostAppDuplicationsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.AppDuplication app_duplications = 2;
  total_size += 1UL * this->_internal_app_duplications_size();
  for (const auto& msg : this->app_duplications_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostAppDuplicationsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostAppDuplicationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostAppDuplicationsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostAppDuplicationsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostAppDuplicationsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostAppDuplicationsRequest)
    MergeFrom(*source);
  }
}

void PostAppDuplicationsRequest::MergeFrom(const PostAppDuplicationsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostAppDuplicationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  app_duplications_.MergeFrom(from.app_duplications_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void PostAppDuplicationsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostAppDuplicationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostAppDuplicationsRequest::CopyFrom(const PostAppDuplicationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostAppDuplicationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostAppDuplicationsRequest::IsInitialized() const {
  return true;
}

void PostAppDuplicationsRequest::InternalSwap(PostAppDuplicationsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  app_duplications_.InternalSwap(&other->app_duplications_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostAppDuplicationsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAppDuplicationRequest::InitAsDefaultInstance() {
  ::clarifai::api::_GetAppDuplicationRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class GetAppDuplicationRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetAppDuplicationRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetAppDuplicationRequest::_Internal::user_app_id(const GetAppDuplicationRequest* msg) {
  return *msg->user_app_id_;
}
void GetAppDuplicationRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetAppDuplicationRequest::GetAppDuplicationRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.GetAppDuplicationRequest)
}
GetAppDuplicationRequest::GetAppDuplicationRequest(const GetAppDuplicationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  app_duplication_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_app_duplication_id().empty()) {
    app_duplication_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_duplication_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetAppDuplicationRequest)
}

void GetAppDuplicationRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAppDuplicationRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  app_duplication_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

GetAppDuplicationRequest::~GetAppDuplicationRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetAppDuplicationRequest)
  SharedDtor();
}

void GetAppDuplicationRequest::SharedDtor() {
  app_duplication_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetAppDuplicationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAppDuplicationRequest& GetAppDuplicationRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAppDuplicationRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void GetAppDuplicationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetAppDuplicationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  app_duplication_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetAppDuplicationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string app_duplication_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_app_duplication_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetAppDuplicationRequest.app_duplication_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAppDuplicationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetAppDuplicationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string app_duplication_id = 2;
  if (this->app_duplication_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_duplication_id().data(), static_cast<int>(this->_internal_app_duplication_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetAppDuplicationRequest.app_duplication_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_app_duplication_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetAppDuplicationRequest)
  return target;
}

size_t GetAppDuplicationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetAppDuplicationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string app_duplication_id = 2;
  if (this->app_duplication_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_duplication_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAppDuplicationRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.GetAppDuplicationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAppDuplicationRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAppDuplicationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.GetAppDuplicationRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.GetAppDuplicationRequest)
    MergeFrom(*source);
  }
}

void GetAppDuplicationRequest::MergeFrom(const GetAppDuplicationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetAppDuplicationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.app_duplication_id().size() > 0) {

    app_duplication_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_duplication_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void GetAppDuplicationRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.GetAppDuplicationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAppDuplicationRequest::CopyFrom(const GetAppDuplicationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetAppDuplicationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAppDuplicationRequest::IsInitialized() const {
  return true;
}

void GetAppDuplicationRequest::InternalSwap(GetAppDuplicationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  app_duplication_id_.Swap(&other->app_duplication_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAppDuplicationRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListAppDuplicationsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_ListAppDuplicationsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class ListAppDuplicationsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListAppDuplicationsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListAppDuplicationsRequest::_Internal::user_app_id(const ListAppDuplicationsRequest* msg) {
  return *msg->user_app_id_;
}
void ListAppDuplicationsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListAppDuplicationsRequest::ListAppDuplicationsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ListAppDuplicationsRequest)
}
ListAppDuplicationsRequest::ListAppDuplicationsRequest(const ListAppDuplicationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListAppDuplicationsRequest)
}

void ListAppDuplicationsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListAppDuplicationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  user_app_id_ = nullptr;
}

ListAppDuplicationsRequest::~ListAppDuplicationsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListAppDuplicationsRequest)
  SharedDtor();
}

void ListAppDuplicationsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListAppDuplicationsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListAppDuplicationsRequest& ListAppDuplicationsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListAppDuplicationsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ListAppDuplicationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListAppDuplicationsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ListAppDuplicationsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListAppDuplicationsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListAppDuplicationsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListAppDuplicationsRequest)
  return target;
}

size_t ListAppDuplicationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListAppDuplicationsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListAppDuplicationsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ListAppDuplicationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListAppDuplicationsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListAppDuplicationsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ListAppDuplicationsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ListAppDuplicationsRequest)
    MergeFrom(*source);
  }
}

void ListAppDuplicationsRequest::MergeFrom(const ListAppDuplicationsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListAppDuplicationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void ListAppDuplicationsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ListAppDuplicationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListAppDuplicationsRequest::CopyFrom(const ListAppDuplicationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListAppDuplicationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListAppDuplicationsRequest::IsInitialized() const {
  return true;
}

void ListAppDuplicationsRequest::InternalSwap(ListAppDuplicationsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListAppDuplicationsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiAppDuplicationsResponse::InitAsDefaultInstance() {
  ::clarifai::api::_MultiAppDuplicationsResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class MultiAppDuplicationsResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiAppDuplicationsResponse* msg);
};

const ::clarifai::api::status::Status&
MultiAppDuplicationsResponse::_Internal::status(const MultiAppDuplicationsResponse* msg) {
  return *msg->status_;
}
void MultiAppDuplicationsResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiAppDuplicationsResponse::clear_app_duplications() {
  app_duplications_.Clear();
}
MultiAppDuplicationsResponse::MultiAppDuplicationsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MultiAppDuplicationsResponse)
}
MultiAppDuplicationsResponse::MultiAppDuplicationsResponse(const MultiAppDuplicationsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      app_duplications_(from.app_duplications_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiAppDuplicationsResponse)
}

void MultiAppDuplicationsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiAppDuplicationsResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

MultiAppDuplicationsResponse::~MultiAppDuplicationsResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiAppDuplicationsResponse)
  SharedDtor();
}

void MultiAppDuplicationsResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void MultiAppDuplicationsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiAppDuplicationsResponse& MultiAppDuplicationsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiAppDuplicationsResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiAppDuplicationsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiAppDuplicationsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  app_duplications_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultiAppDuplicationsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.AppDuplication app_duplications = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_app_duplications(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiAppDuplicationsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiAppDuplicationsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.AppDuplication app_duplications = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_app_duplications_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_app_duplications(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiAppDuplicationsResponse)
  return target;
}

size_t MultiAppDuplicationsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiAppDuplicationsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.AppDuplication app_duplications = 2;
  total_size += 1UL * this->_internal_app_duplications_size();
  for (const auto& msg : this->app_duplications_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiAppDuplicationsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MultiAppDuplicationsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiAppDuplicationsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiAppDuplicationsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MultiAppDuplicationsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MultiAppDuplicationsResponse)
    MergeFrom(*source);
  }
}

void MultiAppDuplicationsResponse::MergeFrom(const MultiAppDuplicationsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiAppDuplicationsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  app_duplications_.MergeFrom(from.app_duplications_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void MultiAppDuplicationsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MultiAppDuplicationsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiAppDuplicationsResponse::CopyFrom(const MultiAppDuplicationsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiAppDuplicationsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiAppDuplicationsResponse::IsInitialized() const {
  return true;
}

void MultiAppDuplicationsResponse::InternalSwap(MultiAppDuplicationsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  app_duplications_.InternalSwap(&other->app_duplications_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiAppDuplicationsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SingleAppDuplicationResponse::InitAsDefaultInstance() {
  ::clarifai::api::_SingleAppDuplicationResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
  ::clarifai::api::_SingleAppDuplicationResponse_default_instance_._instance.get_mutable()->app_duplication_ = const_cast< ::clarifai::api::AppDuplication*>(
      ::clarifai::api::AppDuplication::internal_default_instance());
}
class SingleAppDuplicationResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleAppDuplicationResponse* msg);
  static const ::clarifai::api::AppDuplication& app_duplication(const SingleAppDuplicationResponse* msg);
};

const ::clarifai::api::status::Status&
SingleAppDuplicationResponse::_Internal::status(const SingleAppDuplicationResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::AppDuplication&
SingleAppDuplicationResponse::_Internal::app_duplication(const SingleAppDuplicationResponse* msg) {
  return *msg->app_duplication_;
}
void SingleAppDuplicationResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleAppDuplicationResponse::clear_app_duplication() {
  if (GetArenaNoVirtual() == nullptr && app_duplication_ != nullptr) {
    delete app_duplication_;
  }
  app_duplication_ = nullptr;
}
SingleAppDuplicationResponse::SingleAppDuplicationResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.SingleAppDuplicationResponse)
}
SingleAppDuplicationResponse::SingleAppDuplicationResponse(const SingleAppDuplicationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_app_duplication()) {
    app_duplication_ = new ::clarifai::api::AppDuplication(*from.app_duplication_);
  } else {
    app_duplication_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleAppDuplicationResponse)
}

void SingleAppDuplicationResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SingleAppDuplicationResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&app_duplication_) -
      reinterpret_cast<char*>(&status_)) + sizeof(app_duplication_));
}

SingleAppDuplicationResponse::~SingleAppDuplicationResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleAppDuplicationResponse)
  SharedDtor();
}

void SingleAppDuplicationResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete app_duplication_;
}

void SingleAppDuplicationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleAppDuplicationResponse& SingleAppDuplicationResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleAppDuplicationResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void SingleAppDuplicationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleAppDuplicationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && app_duplication_ != nullptr) {
    delete app_duplication_;
  }
  app_duplication_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SingleAppDuplicationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.AppDuplication app_duplication = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_app_duplication(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleAppDuplicationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleAppDuplicationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.AppDuplication app_duplication = 2;
  if (this->has_app_duplication()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::app_duplication(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleAppDuplicationResponse)
  return target;
}

size_t SingleAppDuplicationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleAppDuplicationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.AppDuplication app_duplication = 2;
  if (this->has_app_duplication()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *app_duplication_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleAppDuplicationResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.SingleAppDuplicationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleAppDuplicationResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleAppDuplicationResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.SingleAppDuplicationResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.SingleAppDuplicationResponse)
    MergeFrom(*source);
  }
}

void SingleAppDuplicationResponse::MergeFrom(const SingleAppDuplicationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleAppDuplicationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.has_app_duplication()) {
    _internal_mutable_app_duplication()->::clarifai::api::AppDuplication::MergeFrom(from._internal_app_duplication());
  }
}

void SingleAppDuplicationResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.SingleAppDuplicationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleAppDuplicationResponse::CopyFrom(const SingleAppDuplicationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleAppDuplicationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleAppDuplicationResponse::IsInitialized() const {
  return true;
}

void SingleAppDuplicationResponse::InternalSwap(SingleAppDuplicationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(app_duplication_, other->app_duplication_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleAppDuplicationResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostTasksRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostTasksRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PostTasksRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostTasksRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostTasksRequest::_Internal::user_app_id(const PostTasksRequest* msg) {
  return *msg->user_app_id_;
}
void PostTasksRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostTasksRequest::clear_tasks() {
  tasks_.Clear();
}
PostTasksRequest::PostTasksRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostTasksRequest)
}
PostTasksRequest::PostTasksRequest(const PostTasksRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tasks_(from.tasks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostTasksRequest)
}

void PostTasksRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostTasksRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  user_app_id_ = nullptr;
}

PostTasksRequest::~PostTasksRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostTasksRequest)
  SharedDtor();
}

void PostTasksRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostTasksRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostTasksRequest& PostTasksRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostTasksRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostTasksRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostTasksRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tasks_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostTasksRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Task tasks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tasks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostTasksRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostTasksRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Task tasks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tasks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_tasks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostTasksRequest)
  return target;
}

size_t PostTasksRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostTasksRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Task tasks = 2;
  total_size += 1UL * this->_internal_tasks_size();
  for (const auto& msg : this->tasks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostTasksRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostTasksRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostTasksRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostTasksRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostTasksRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostTasksRequest)
    MergeFrom(*source);
  }
}

void PostTasksRequest::MergeFrom(const PostTasksRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostTasksRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tasks_.MergeFrom(from.tasks_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void PostTasksRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostTasksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostTasksRequest::CopyFrom(const PostTasksRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostTasksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostTasksRequest::IsInitialized() const {
  return true;
}

void PostTasksRequest::InternalSwap(PostTasksRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tasks_.InternalSwap(&other->tasks_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostTasksRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetTaskRequest::InitAsDefaultInstance() {
  ::clarifai::api::_GetTaskRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class GetTaskRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetTaskRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetTaskRequest::_Internal::user_app_id(const GetTaskRequest* msg) {
  return *msg->user_app_id_;
}
void GetTaskRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetTaskRequest::GetTaskRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.GetTaskRequest)
}
GetTaskRequest::GetTaskRequest(const GetTaskRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_task_id().empty()) {
    task_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.task_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetTaskRequest)
}

void GetTaskRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetTaskRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

GetTaskRequest::~GetTaskRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetTaskRequest)
  SharedDtor();
}

void GetTaskRequest::SharedDtor() {
  task_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetTaskRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTaskRequest& GetTaskRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetTaskRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void GetTaskRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetTaskRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetTaskRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string task_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_task_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetTaskRequest.task_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTaskRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetTaskRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string task_id = 2;
  if (this->task_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_task_id().data(), static_cast<int>(this->_internal_task_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetTaskRequest.task_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_task_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetTaskRequest)
  return target;
}

size_t GetTaskRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetTaskRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string task_id = 2;
  if (this->task_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTaskRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.GetTaskRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTaskRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetTaskRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.GetTaskRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.GetTaskRequest)
    MergeFrom(*source);
  }
}

void GetTaskRequest::MergeFrom(const GetTaskRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetTaskRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.task_id().size() > 0) {

    task_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.task_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void GetTaskRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.GetTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTaskRequest::CopyFrom(const GetTaskRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTaskRequest::IsInitialized() const {
  return true;
}

void GetTaskRequest::InternalSwap(GetTaskRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  task_id_.Swap(&other->task_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTaskRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListTasksRequest::InitAsDefaultInstance() {
  ::clarifai::api::_ListTasksRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class ListTasksRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListTasksRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListTasksRequest::_Internal::user_app_id(const ListTasksRequest* msg) {
  return *msg->user_app_id_;
}
void ListTasksRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListTasksRequest::ListTasksRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ListTasksRequest)
}
ListTasksRequest::ListTasksRequest(const ListTasksRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListTasksRequest)
}

void ListTasksRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListTasksRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

ListTasksRequest::~ListTasksRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListTasksRequest)
  SharedDtor();
}

void ListTasksRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListTasksRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListTasksRequest& ListTasksRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListTasksRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ListTasksRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListTasksRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear();
}

const char* ListTasksRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListTasksRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListTasksRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // uint32 page = 2;
  if (this->page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListTasksRequest)
  return target;
}

size_t ListTasksRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListTasksRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 2;
  if (this->page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->per_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_per_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListTasksRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ListTasksRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListTasksRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListTasksRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ListTasksRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ListTasksRequest)
    MergeFrom(*source);
  }
}

void ListTasksRequest::MergeFrom(const ListTasksRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListTasksRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from.per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
}

void ListTasksRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ListTasksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListTasksRequest::CopyFrom(const ListTasksRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListTasksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListTasksRequest::IsInitialized() const {
  return true;
}

void ListTasksRequest::InternalSwap(ListTasksRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_app_id_, other->user_app_id_);
  swap(page_, other->page_);
  swap(per_page_, other->per_page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListTasksRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PatchTasksRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PatchTasksRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PatchTasksRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchTasksRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchTasksRequest::_Internal::user_app_id(const PatchTasksRequest* msg) {
  return *msg->user_app_id_;
}
void PatchTasksRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PatchTasksRequest::clear_tasks() {
  tasks_.Clear();
}
PatchTasksRequest::PatchTasksRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PatchTasksRequest)
}
PatchTasksRequest::PatchTasksRequest(const PatchTasksRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tasks_(from.tasks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action().empty()) {
    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchTasksRequest)
}

void PatchTasksRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PatchTasksRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

PatchTasksRequest::~PatchTasksRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchTasksRequest)
  SharedDtor();
}

void PatchTasksRequest::SharedDtor() {
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PatchTasksRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PatchTasksRequest& PatchTasksRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PatchTasksRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PatchTasksRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchTasksRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tasks_.Clear();
  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PatchTasksRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Task tasks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tasks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchTasksRequest.action"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PatchTasksRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchTasksRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Task tasks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tasks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_tasks(i), target, stream);
  }

  // string action = 3;
  if (this->action().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchTasksRequest.action");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchTasksRequest)
  return target;
}

size_t PatchTasksRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchTasksRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Task tasks = 2;
  total_size += 1UL * this->_internal_tasks_size();
  for (const auto& msg : this->tasks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string action = 3;
  if (this->action().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PatchTasksRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PatchTasksRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PatchTasksRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PatchTasksRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PatchTasksRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PatchTasksRequest)
    MergeFrom(*source);
  }
}

void PatchTasksRequest::MergeFrom(const PatchTasksRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchTasksRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tasks_.MergeFrom(from.tasks_);
  if (from.action().size() > 0) {

    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void PatchTasksRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PatchTasksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatchTasksRequest::CopyFrom(const PatchTasksRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchTasksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchTasksRequest::IsInitialized() const {
  return true;
}

void PatchTasksRequest::InternalSwap(PatchTasksRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tasks_.InternalSwap(&other->tasks_);
  action_.Swap(&other->action_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchTasksRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteTasksRequest::InitAsDefaultInstance() {
  ::clarifai::api::_DeleteTasksRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class DeleteTasksRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteTasksRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteTasksRequest::_Internal::user_app_id(const DeleteTasksRequest* msg) {
  return *msg->user_app_id_;
}
void DeleteTasksRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
DeleteTasksRequest::DeleteTasksRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.DeleteTasksRequest)
}
DeleteTasksRequest::DeleteTasksRequest(const DeleteTasksRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteTasksRequest)
}

void DeleteTasksRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteTasksRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  user_app_id_ = nullptr;
}

DeleteTasksRequest::~DeleteTasksRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteTasksRequest)
  SharedDtor();
}

void DeleteTasksRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void DeleteTasksRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteTasksRequest& DeleteTasksRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteTasksRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void DeleteTasksRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteTasksRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* DeleteTasksRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteTasksRequest.ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteTasksRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteTasksRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated string ids = 2;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteTasksRequest.ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteTasksRequest)
  return target;
}

size_t DeleteTasksRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteTasksRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ids_.size());
  for (int i = 0, n = ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ids_.Get(i));
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteTasksRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.DeleteTasksRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteTasksRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteTasksRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.DeleteTasksRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.DeleteTasksRequest)
    MergeFrom(*source);
  }
}

void DeleteTasksRequest::MergeFrom(const DeleteTasksRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteTasksRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void DeleteTasksRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.DeleteTasksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteTasksRequest::CopyFrom(const DeleteTasksRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteTasksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteTasksRequest::IsInitialized() const {
  return true;
}

void DeleteTasksRequest::InternalSwap(DeleteTasksRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteTasksRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiTaskResponse::InitAsDefaultInstance() {
  ::clarifai::api::_MultiTaskResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class MultiTaskResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiTaskResponse* msg);
};

const ::clarifai::api::status::Status&
MultiTaskResponse::_Internal::status(const MultiTaskResponse* msg) {
  return *msg->status_;
}
void MultiTaskResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiTaskResponse::clear_tasks() {
  tasks_.Clear();
}
MultiTaskResponse::MultiTaskResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MultiTaskResponse)
}
MultiTaskResponse::MultiTaskResponse(const MultiTaskResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tasks_(from.tasks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiTaskResponse)
}

void MultiTaskResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiTaskResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

MultiTaskResponse::~MultiTaskResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiTaskResponse)
  SharedDtor();
}

void MultiTaskResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void MultiTaskResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiTaskResponse& MultiTaskResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiTaskResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiTaskResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiTaskResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tasks_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultiTaskResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Task tasks = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tasks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiTaskResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiTaskResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.Task tasks = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tasks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_tasks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiTaskResponse)
  return target;
}

size_t MultiTaskResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiTaskResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Task tasks = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_tasks_size();
  for (const auto& msg : this->tasks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiTaskResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MultiTaskResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiTaskResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiTaskResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MultiTaskResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MultiTaskResponse)
    MergeFrom(*source);
  }
}

void MultiTaskResponse::MergeFrom(const MultiTaskResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiTaskResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tasks_.MergeFrom(from.tasks_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void MultiTaskResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MultiTaskResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiTaskResponse::CopyFrom(const MultiTaskResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiTaskResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiTaskResponse::IsInitialized() const {
  return true;
}

void MultiTaskResponse::InternalSwap(MultiTaskResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tasks_.InternalSwap(&other->tasks_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiTaskResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SingleTaskResponse::InitAsDefaultInstance() {
  ::clarifai::api::_SingleTaskResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
  ::clarifai::api::_SingleTaskResponse_default_instance_._instance.get_mutable()->task_ = const_cast< ::clarifai::api::Task*>(
      ::clarifai::api::Task::internal_default_instance());
}
class SingleTaskResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleTaskResponse* msg);
  static const ::clarifai::api::Task& task(const SingleTaskResponse* msg);
};

const ::clarifai::api::status::Status&
SingleTaskResponse::_Internal::status(const SingleTaskResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::Task&
SingleTaskResponse::_Internal::task(const SingleTaskResponse* msg) {
  return *msg->task_;
}
void SingleTaskResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleTaskResponse::clear_task() {
  if (GetArenaNoVirtual() == nullptr && task_ != nullptr) {
    delete task_;
  }
  task_ = nullptr;
}
SingleTaskResponse::SingleTaskResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.SingleTaskResponse)
}
SingleTaskResponse::SingleTaskResponse(const SingleTaskResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_task()) {
    task_ = new ::clarifai::api::Task(*from.task_);
  } else {
    task_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleTaskResponse)
}

void SingleTaskResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SingleTaskResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&task_) -
      reinterpret_cast<char*>(&status_)) + sizeof(task_));
}

SingleTaskResponse::~SingleTaskResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleTaskResponse)
  SharedDtor();
}

void SingleTaskResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete task_;
}

void SingleTaskResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleTaskResponse& SingleTaskResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleTaskResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void SingleTaskResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleTaskResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && task_ != nullptr) {
    delete task_;
  }
  task_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SingleTaskResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Task task = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_task(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleTaskResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleTaskResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.Task task = 2;
  if (this->has_task()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::task(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleTaskResponse)
  return target;
}

size_t SingleTaskResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleTaskResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.Task task = 2;
  if (this->has_task()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *task_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleTaskResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.SingleTaskResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleTaskResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleTaskResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.SingleTaskResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.SingleTaskResponse)
    MergeFrom(*source);
  }
}

void SingleTaskResponse::MergeFrom(const SingleTaskResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleTaskResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.has_task()) {
    _internal_mutable_task()->::clarifai::api::Task::MergeFrom(from._internal_task());
  }
}

void SingleTaskResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.SingleTaskResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleTaskResponse::CopyFrom(const SingleTaskResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleTaskResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleTaskResponse::IsInitialized() const {
  return true;
}

void SingleTaskResponse::InternalSwap(SingleTaskResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(task_, other->task_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleTaskResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostCollectorsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostCollectorsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PostCollectorsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostCollectorsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostCollectorsRequest::_Internal::user_app_id(const PostCollectorsRequest* msg) {
  return *msg->user_app_id_;
}
void PostCollectorsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostCollectorsRequest::clear_collectors() {
  collectors_.Clear();
}
PostCollectorsRequest::PostCollectorsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostCollectorsRequest)
}
PostCollectorsRequest::PostCollectorsRequest(const PostCollectorsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      collectors_(from.collectors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostCollectorsRequest)
}

void PostCollectorsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostCollectorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  user_app_id_ = nullptr;
}

PostCollectorsRequest::~PostCollectorsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostCollectorsRequest)
  SharedDtor();
}

void PostCollectorsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostCollectorsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostCollectorsRequest& PostCollectorsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostCollectorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostCollectorsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostCollectorsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collectors_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostCollectorsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Collector collectors = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_collectors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostCollectorsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostCollectorsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Collector collectors = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_collectors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_collectors(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostCollectorsRequest)
  return target;
}

size_t PostCollectorsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostCollectorsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Collector collectors = 2;
  total_size += 1UL * this->_internal_collectors_size();
  for (const auto& msg : this->collectors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostCollectorsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostCollectorsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostCollectorsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostCollectorsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostCollectorsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostCollectorsRequest)
    MergeFrom(*source);
  }
}

void PostCollectorsRequest::MergeFrom(const PostCollectorsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostCollectorsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  collectors_.MergeFrom(from.collectors_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void PostCollectorsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostCollectorsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostCollectorsRequest::CopyFrom(const PostCollectorsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostCollectorsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostCollectorsRequest::IsInitialized() const {
  return true;
}

void PostCollectorsRequest::InternalSwap(PostCollectorsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  collectors_.InternalSwap(&other->collectors_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostCollectorsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PatchCollectorsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PatchCollectorsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PatchCollectorsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchCollectorsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchCollectorsRequest::_Internal::user_app_id(const PatchCollectorsRequest* msg) {
  return *msg->user_app_id_;
}
void PatchCollectorsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PatchCollectorsRequest::clear_collectors() {
  collectors_.Clear();
}
PatchCollectorsRequest::PatchCollectorsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PatchCollectorsRequest)
}
PatchCollectorsRequest::PatchCollectorsRequest(const PatchCollectorsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      collectors_(from.collectors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action().empty()) {
    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchCollectorsRequest)
}

void PatchCollectorsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PatchCollectorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

PatchCollectorsRequest::~PatchCollectorsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchCollectorsRequest)
  SharedDtor();
}

void PatchCollectorsRequest::SharedDtor() {
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PatchCollectorsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PatchCollectorsRequest& PatchCollectorsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PatchCollectorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PatchCollectorsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchCollectorsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collectors_.Clear();
  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PatchCollectorsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Collector collectors = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_collectors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchCollectorsRequest.action"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PatchCollectorsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchCollectorsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Collector collectors = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_collectors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_collectors(i), target, stream);
  }

  // string action = 3;
  if (this->action().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchCollectorsRequest.action");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchCollectorsRequest)
  return target;
}

size_t PatchCollectorsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchCollectorsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Collector collectors = 2;
  total_size += 1UL * this->_internal_collectors_size();
  for (const auto& msg : this->collectors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string action = 3;
  if (this->action().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PatchCollectorsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PatchCollectorsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PatchCollectorsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PatchCollectorsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PatchCollectorsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PatchCollectorsRequest)
    MergeFrom(*source);
  }
}

void PatchCollectorsRequest::MergeFrom(const PatchCollectorsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchCollectorsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  collectors_.MergeFrom(from.collectors_);
  if (from.action().size() > 0) {

    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void PatchCollectorsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PatchCollectorsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatchCollectorsRequest::CopyFrom(const PatchCollectorsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchCollectorsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchCollectorsRequest::IsInitialized() const {
  return true;
}

void PatchCollectorsRequest::InternalSwap(PatchCollectorsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  collectors_.InternalSwap(&other->collectors_);
  action_.Swap(&other->action_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchCollectorsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteCollectorsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_DeleteCollectorsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class DeleteCollectorsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteCollectorsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteCollectorsRequest::_Internal::user_app_id(const DeleteCollectorsRequest* msg) {
  return *msg->user_app_id_;
}
void DeleteCollectorsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
DeleteCollectorsRequest::DeleteCollectorsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.DeleteCollectorsRequest)
}
DeleteCollectorsRequest::DeleteCollectorsRequest(const DeleteCollectorsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  delete_all_ = from.delete_all_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteCollectorsRequest)
}

void DeleteCollectorsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteCollectorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delete_all_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(delete_all_));
}

DeleteCollectorsRequest::~DeleteCollectorsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteCollectorsRequest)
  SharedDtor();
}

void DeleteCollectorsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void DeleteCollectorsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteCollectorsRequest& DeleteCollectorsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteCollectorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void DeleteCollectorsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteCollectorsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  delete_all_ = false;
  _internal_metadata_.Clear();
}

const char* DeleteCollectorsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteCollectorsRequest.ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bool delete_all = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          delete_all_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteCollectorsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteCollectorsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated string ids = 2;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteCollectorsRequest.ids");
    target = stream->WriteString(2, s, target);
  }

  // bool delete_all = 3;
  if (this->delete_all() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_delete_all(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteCollectorsRequest)
  return target;
}

size_t DeleteCollectorsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteCollectorsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ids_.size());
  for (int i = 0, n = ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ids_.Get(i));
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // bool delete_all = 3;
  if (this->delete_all() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteCollectorsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.DeleteCollectorsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteCollectorsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteCollectorsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.DeleteCollectorsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.DeleteCollectorsRequest)
    MergeFrom(*source);
  }
}

void DeleteCollectorsRequest::MergeFrom(const DeleteCollectorsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteCollectorsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.delete_all() != 0) {
    _internal_set_delete_all(from._internal_delete_all());
  }
}

void DeleteCollectorsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.DeleteCollectorsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteCollectorsRequest::CopyFrom(const DeleteCollectorsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteCollectorsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteCollectorsRequest::IsInitialized() const {
  return true;
}

void DeleteCollectorsRequest::InternalSwap(DeleteCollectorsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
  swap(user_app_id_, other->user_app_id_);
  swap(delete_all_, other->delete_all_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteCollectorsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetCollectorRequest::InitAsDefaultInstance() {
  ::clarifai::api::_GetCollectorRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class GetCollectorRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetCollectorRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetCollectorRequest::_Internal::user_app_id(const GetCollectorRequest* msg) {
  return *msg->user_app_id_;
}
void GetCollectorRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetCollectorRequest::GetCollectorRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.GetCollectorRequest)
}
GetCollectorRequest::GetCollectorRequest(const GetCollectorRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  collector_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collector_id().empty()) {
    collector_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.collector_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetCollectorRequest)
}

void GetCollectorRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetCollectorRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  collector_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

GetCollectorRequest::~GetCollectorRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetCollectorRequest)
  SharedDtor();
}

void GetCollectorRequest::SharedDtor() {
  collector_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetCollectorRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetCollectorRequest& GetCollectorRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetCollectorRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void GetCollectorRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetCollectorRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collector_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetCollectorRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collector_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_collector_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetCollectorRequest.collector_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetCollectorRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetCollectorRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string collector_id = 2;
  if (this->collector_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collector_id().data(), static_cast<int>(this->_internal_collector_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetCollectorRequest.collector_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_collector_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetCollectorRequest)
  return target;
}

size_t GetCollectorRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetCollectorRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string collector_id = 2;
  if (this->collector_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collector_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetCollectorRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.GetCollectorRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCollectorRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetCollectorRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.GetCollectorRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.GetCollectorRequest)
    MergeFrom(*source);
  }
}

void GetCollectorRequest::MergeFrom(const GetCollectorRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetCollectorRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.collector_id().size() > 0) {

    collector_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.collector_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void GetCollectorRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.GetCollectorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCollectorRequest::CopyFrom(const GetCollectorRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetCollectorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCollectorRequest::IsInitialized() const {
  return true;
}

void GetCollectorRequest::InternalSwap(GetCollectorRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  collector_id_.Swap(&other->collector_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCollectorRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListCollectorsRequest::InitAsDefaultInstance() {
  ::clarifai::api::_ListCollectorsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class ListCollectorsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListCollectorsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListCollectorsRequest::_Internal::user_app_id(const ListCollectorsRequest* msg) {
  return *msg->user_app_id_;
}
void ListCollectorsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListCollectorsRequest::ListCollectorsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.ListCollectorsRequest)
}
ListCollectorsRequest::ListCollectorsRequest(const ListCollectorsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListCollectorsRequest)
}

void ListCollectorsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListCollectorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

ListCollectorsRequest::~ListCollectorsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListCollectorsRequest)
  SharedDtor();
}

void ListCollectorsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListCollectorsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListCollectorsRequest& ListCollectorsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListCollectorsRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void ListCollectorsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListCollectorsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear();
}

const char* ListCollectorsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListCollectorsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListCollectorsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // uint32 page = 2;
  if (this->page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListCollectorsRequest)
  return target;
}

size_t ListCollectorsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListCollectorsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 2;
  if (this->page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->per_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_per_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListCollectorsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.ListCollectorsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListCollectorsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListCollectorsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.ListCollectorsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.ListCollectorsRequest)
    MergeFrom(*source);
  }
}

void ListCollectorsRequest::MergeFrom(const ListCollectorsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListCollectorsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from.page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from.per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
}

void ListCollectorsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.ListCollectorsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListCollectorsRequest::CopyFrom(const ListCollectorsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListCollectorsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCollectorsRequest::IsInitialized() const {
  return true;
}

void ListCollectorsRequest::InternalSwap(ListCollectorsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_app_id_, other->user_app_id_);
  swap(page_, other->page_);
  swap(per_page_, other->per_page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListCollectorsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiCollectorResponse::InitAsDefaultInstance() {
  ::clarifai::api::_MultiCollectorResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class MultiCollectorResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiCollectorResponse* msg);
};

const ::clarifai::api::status::Status&
MultiCollectorResponse::_Internal::status(const MultiCollectorResponse* msg) {
  return *msg->status_;
}
void MultiCollectorResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiCollectorResponse::clear_collectors() {
  collectors_.Clear();
}
MultiCollectorResponse::MultiCollectorResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MultiCollectorResponse)
}
MultiCollectorResponse::MultiCollectorResponse(const MultiCollectorResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      collectors_(from.collectors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiCollectorResponse)
}

void MultiCollectorResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiCollectorResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

MultiCollectorResponse::~MultiCollectorResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiCollectorResponse)
  SharedDtor();
}

void MultiCollectorResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void MultiCollectorResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiCollectorResponse& MultiCollectorResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiCollectorResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiCollectorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiCollectorResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collectors_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultiCollectorResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.Collector collectors = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_collectors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiCollectorResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiCollectorResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.Collector collectors = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_collectors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_collectors(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiCollectorResponse)
  return target;
}

size_t MultiCollectorResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiCollectorResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Collector collectors = 2;
  total_size += 1UL * this->_internal_collectors_size();
  for (const auto& msg : this->collectors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiCollectorResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MultiCollectorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiCollectorResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiCollectorResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MultiCollectorResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MultiCollectorResponse)
    MergeFrom(*source);
  }
}

void MultiCollectorResponse::MergeFrom(const MultiCollectorResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiCollectorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  collectors_.MergeFrom(from.collectors_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void MultiCollectorResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MultiCollectorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiCollectorResponse::CopyFrom(const MultiCollectorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiCollectorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiCollectorResponse::IsInitialized() const {
  return true;
}

void MultiCollectorResponse::InternalSwap(MultiCollectorResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  collectors_.InternalSwap(&other->collectors_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiCollectorResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SingleCollectorResponse::InitAsDefaultInstance() {
  ::clarifai::api::_SingleCollectorResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
  ::clarifai::api::_SingleCollectorResponse_default_instance_._instance.get_mutable()->collector_ = const_cast< ::clarifai::api::Collector*>(
      ::clarifai::api::Collector::internal_default_instance());
}
class SingleCollectorResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleCollectorResponse* msg);
  static const ::clarifai::api::Collector& collector(const SingleCollectorResponse* msg);
};

const ::clarifai::api::status::Status&
SingleCollectorResponse::_Internal::status(const SingleCollectorResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::Collector&
SingleCollectorResponse::_Internal::collector(const SingleCollectorResponse* msg) {
  return *msg->collector_;
}
void SingleCollectorResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleCollectorResponse::clear_collector() {
  if (GetArenaNoVirtual() == nullptr && collector_ != nullptr) {
    delete collector_;
  }
  collector_ = nullptr;
}
SingleCollectorResponse::SingleCollectorResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.SingleCollectorResponse)
}
SingleCollectorResponse::SingleCollectorResponse(const SingleCollectorResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_collector()) {
    collector_ = new ::clarifai::api::Collector(*from.collector_);
  } else {
    collector_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleCollectorResponse)
}

void SingleCollectorResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SingleCollectorResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&collector_) -
      reinterpret_cast<char*>(&status_)) + sizeof(collector_));
}

SingleCollectorResponse::~SingleCollectorResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleCollectorResponse)
  SharedDtor();
}

void SingleCollectorResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete collector_;
}

void SingleCollectorResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleCollectorResponse& SingleCollectorResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleCollectorResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void SingleCollectorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleCollectorResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && collector_ != nullptr) {
    delete collector_;
  }
  collector_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SingleCollectorResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Collector collector = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_collector(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleCollectorResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleCollectorResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.Collector collector = 2;
  if (this->has_collector()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::collector(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleCollectorResponse)
  return target;
}

size_t SingleCollectorResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleCollectorResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.Collector collector = 2;
  if (this->has_collector()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *collector_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleCollectorResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.SingleCollectorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleCollectorResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleCollectorResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.SingleCollectorResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.SingleCollectorResponse)
    MergeFrom(*source);
  }
}

void SingleCollectorResponse::MergeFrom(const SingleCollectorResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleCollectorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.has_collector()) {
    _internal_mutable_collector()->::clarifai::api::Collector::MergeFrom(from._internal_collector());
  }
}

void SingleCollectorResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.SingleCollectorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleCollectorResponse::CopyFrom(const SingleCollectorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleCollectorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleCollectorResponse::IsInitialized() const {
  return true;
}

void SingleCollectorResponse::InternalSwap(SingleCollectorResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(collector_, other->collector_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleCollectorResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostStatValuesRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostStatValuesRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PostStatValuesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostStatValuesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostStatValuesRequest::_Internal::user_app_id(const PostStatValuesRequest* msg) {
  return *msg->user_app_id_;
}
void PostStatValuesRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostStatValuesRequest::clear_stat_values() {
  stat_values_.Clear();
}
PostStatValuesRequest::PostStatValuesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostStatValuesRequest)
}
PostStatValuesRequest::PostStatValuesRequest(const PostStatValuesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      stat_values_(from.stat_values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostStatValuesRequest)
}

void PostStatValuesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostStatValuesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  user_app_id_ = nullptr;
}

PostStatValuesRequest::~PostStatValuesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostStatValuesRequest)
  SharedDtor();
}

void PostStatValuesRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostStatValuesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostStatValuesRequest& PostStatValuesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostStatValuesRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostStatValuesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostStatValuesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stat_values_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostStatValuesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.StatValue stat_values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stat_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostStatValuesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostStatValuesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.StatValue stat_values = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stat_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_stat_values(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostStatValuesRequest)
  return target;
}

size_t PostStatValuesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostStatValuesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.StatValue stat_values = 2;
  total_size += 1UL * this->_internal_stat_values_size();
  for (const auto& msg : this->stat_values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostStatValuesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostStatValuesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostStatValuesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostStatValuesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostStatValuesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostStatValuesRequest)
    MergeFrom(*source);
  }
}

void PostStatValuesRequest::MergeFrom(const PostStatValuesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostStatValuesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stat_values_.MergeFrom(from.stat_values_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void PostStatValuesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostStatValuesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostStatValuesRequest::CopyFrom(const PostStatValuesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostStatValuesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostStatValuesRequest::IsInitialized() const {
  return true;
}

void PostStatValuesRequest::InternalSwap(PostStatValuesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  stat_values_.InternalSwap(&other->stat_values_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostStatValuesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiStatValueResponse::InitAsDefaultInstance() {
  ::clarifai::api::_MultiStatValueResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class MultiStatValueResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiStatValueResponse* msg);
};

const ::clarifai::api::status::Status&
MultiStatValueResponse::_Internal::status(const MultiStatValueResponse* msg) {
  return *msg->status_;
}
void MultiStatValueResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiStatValueResponse::clear_stat_values() {
  stat_values_.Clear();
}
MultiStatValueResponse::MultiStatValueResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MultiStatValueResponse)
}
MultiStatValueResponse::MultiStatValueResponse(const MultiStatValueResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      stat_values_(from.stat_values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiStatValueResponse)
}

void MultiStatValueResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiStatValueResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

MultiStatValueResponse::~MultiStatValueResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiStatValueResponse)
  SharedDtor();
}

void MultiStatValueResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void MultiStatValueResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiStatValueResponse& MultiStatValueResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiStatValueResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiStatValueResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiStatValueResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stat_values_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultiStatValueResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.StatValue stat_values = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stat_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiStatValueResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiStatValueResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.StatValue stat_values = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stat_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_stat_values(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiStatValueResponse)
  return target;
}

size_t MultiStatValueResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiStatValueResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.StatValue stat_values = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_stat_values_size();
  for (const auto& msg : this->stat_values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiStatValueResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MultiStatValueResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiStatValueResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiStatValueResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MultiStatValueResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MultiStatValueResponse)
    MergeFrom(*source);
  }
}

void MultiStatValueResponse::MergeFrom(const MultiStatValueResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiStatValueResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stat_values_.MergeFrom(from.stat_values_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void MultiStatValueResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MultiStatValueResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiStatValueResponse::CopyFrom(const MultiStatValueResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiStatValueResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiStatValueResponse::IsInitialized() const {
  return true;
}

void MultiStatValueResponse::InternalSwap(MultiStatValueResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  stat_values_.InternalSwap(&other->stat_values_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiStatValueResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostStatValuesAggregateRequest::InitAsDefaultInstance() {
  ::clarifai::api::_PostStatValuesAggregateRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class PostStatValuesAggregateRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostStatValuesAggregateRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostStatValuesAggregateRequest::_Internal::user_app_id(const PostStatValuesAggregateRequest* msg) {
  return *msg->user_app_id_;
}
void PostStatValuesAggregateRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostStatValuesAggregateRequest::clear_stat_value_aggregate_queries() {
  stat_value_aggregate_queries_.Clear();
}
PostStatValuesAggregateRequest::PostStatValuesAggregateRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.PostStatValuesAggregateRequest)
}
PostStatValuesAggregateRequest::PostStatValuesAggregateRequest(const PostStatValuesAggregateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      stat_value_aggregate_queries_(from.stat_value_aggregate_queries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostStatValuesAggregateRequest)
}

void PostStatValuesAggregateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostStatValuesAggregateRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  user_app_id_ = nullptr;
}

PostStatValuesAggregateRequest::~PostStatValuesAggregateRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostStatValuesAggregateRequest)
  SharedDtor();
}

void PostStatValuesAggregateRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostStatValuesAggregateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostStatValuesAggregateRequest& PostStatValuesAggregateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostStatValuesAggregateRequest_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void PostStatValuesAggregateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostStatValuesAggregateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stat_value_aggregate_queries_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostStatValuesAggregateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.StatValueAggregateQuery stat_value_aggregate_queries = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stat_value_aggregate_queries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostStatValuesAggregateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostStatValuesAggregateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.StatValueAggregateQuery stat_value_aggregate_queries = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stat_value_aggregate_queries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_stat_value_aggregate_queries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostStatValuesAggregateRequest)
  return target;
}

size_t PostStatValuesAggregateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostStatValuesAggregateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.StatValueAggregateQuery stat_value_aggregate_queries = 2;
  total_size += 1UL * this->_internal_stat_value_aggregate_queries_size();
  for (const auto& msg : this->stat_value_aggregate_queries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostStatValuesAggregateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.PostStatValuesAggregateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostStatValuesAggregateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostStatValuesAggregateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.PostStatValuesAggregateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.PostStatValuesAggregateRequest)
    MergeFrom(*source);
  }
}

void PostStatValuesAggregateRequest::MergeFrom(const PostStatValuesAggregateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostStatValuesAggregateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stat_value_aggregate_queries_.MergeFrom(from.stat_value_aggregate_queries_);
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void PostStatValuesAggregateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.PostStatValuesAggregateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostStatValuesAggregateRequest::CopyFrom(const PostStatValuesAggregateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostStatValuesAggregateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostStatValuesAggregateRequest::IsInitialized() const {
  return true;
}

void PostStatValuesAggregateRequest::InternalSwap(PostStatValuesAggregateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  stat_value_aggregate_queries_.InternalSwap(&other->stat_value_aggregate_queries_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostStatValuesAggregateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiStatValueAggregateResponse::InitAsDefaultInstance() {
  ::clarifai::api::_MultiStatValueAggregateResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class MultiStatValueAggregateResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiStatValueAggregateResponse* msg);
};

const ::clarifai::api::status::Status&
MultiStatValueAggregateResponse::_Internal::status(const MultiStatValueAggregateResponse* msg) {
  return *msg->status_;
}
void MultiStatValueAggregateResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiStatValueAggregateResponse::clear_stat_value_aggregate_results() {
  stat_value_aggregate_results_.Clear();
}
MultiStatValueAggregateResponse::MultiStatValueAggregateResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.api.MultiStatValueAggregateResponse)
}
MultiStatValueAggregateResponse::MultiStatValueAggregateResponse(const MultiStatValueAggregateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      stat_value_aggregate_results_(from.stat_value_aggregate_results_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiStatValueAggregateResponse)
}

void MultiStatValueAggregateResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiStatValueAggregateResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  status_ = nullptr;
}

MultiStatValueAggregateResponse::~MultiStatValueAggregateResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiStatValueAggregateResponse)
  SharedDtor();
}

void MultiStatValueAggregateResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void MultiStatValueAggregateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiStatValueAggregateResponse& MultiStatValueAggregateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiStatValueAggregateResponse_proto_2fclarifai_2fapi_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiStatValueAggregateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiStatValueAggregateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stat_value_aggregate_results_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultiStatValueAggregateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.api.StatValueAggregateResult stat_value_aggregate_results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stat_value_aggregate_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiStatValueAggregateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiStatValueAggregateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.StatValueAggregateResult stat_value_aggregate_results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stat_value_aggregate_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_stat_value_aggregate_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiStatValueAggregateResponse)
  return target;
}

size_t MultiStatValueAggregateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiStatValueAggregateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.StatValueAggregateResult stat_value_aggregate_results = 2;
  total_size += 1UL * this->_internal_stat_value_aggregate_results_size();
  for (const auto& msg : this->stat_value_aggregate_results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiStatValueAggregateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.api.MultiStatValueAggregateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiStatValueAggregateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiStatValueAggregateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.api.MultiStatValueAggregateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.api.MultiStatValueAggregateResponse)
    MergeFrom(*source);
  }
}

void MultiStatValueAggregateResponse::MergeFrom(const MultiStatValueAggregateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiStatValueAggregateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stat_value_aggregate_results_.MergeFrom(from.stat_value_aggregate_results_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void MultiStatValueAggregateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.api.MultiStatValueAggregateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiStatValueAggregateResponse::CopyFrom(const MultiStatValueAggregateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiStatValueAggregateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiStatValueAggregateResponse::IsInitialized() const {
  return true;
}

void MultiStatValueAggregateResponse::InternalSwap(MultiStatValueAggregateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  stat_value_aggregate_results_.InternalSwap(&other->stat_value_aggregate_results_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiStatValueAggregateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace api
}  // namespace clarifai
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::clarifai::api::TestMessage* Arena::CreateMaybeMessage< ::clarifai::api::TestMessage >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::TestMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::Pagination* Arena::CreateMaybeMessage< ::clarifai::api::Pagination >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::Pagination >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetAnnotationRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetAnnotationRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::GetAnnotationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListAnnotationsRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListAnnotationsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ListAnnotationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostAnnotationsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostAnnotationsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostAnnotationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchAnnotationsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PatchAnnotationsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PatchAnnotationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteAnnotationRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeleteAnnotationRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::DeleteAnnotationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteAnnotationsRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeleteAnnotationsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::DeleteAnnotationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleAnnotationResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleAnnotationResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::SingleAnnotationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiAnnotationResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiAnnotationResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MultiAnnotationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetAppRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetAppRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::GetAppRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListAppsRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListAppsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ListAppsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostAppsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostAppsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostAppsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteAppRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeleteAppRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::DeleteAppRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchAppsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PatchAppsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PatchAppsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleAppResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleAppResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::SingleAppResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiAppResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiAppResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MultiAppResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListCollaboratorsRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListCollaboratorsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ListCollaboratorsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostCollaboratorsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostCollaboratorsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostCollaboratorsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchCollaboratorsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PatchCollaboratorsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PatchCollaboratorsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteCollaboratorsRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeleteCollaboratorsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::DeleteCollaboratorsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiCollaboratorsResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiCollaboratorsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MultiCollaboratorsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListCollaborationsRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListCollaborationsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ListCollaborationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiCollaborationsResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiCollaborationsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MultiCollaborationsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostVerifyEmailRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostVerifyEmailRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostVerifyEmailRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleVerifyEmailResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleVerifyEmailResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::SingleVerifyEmailResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListAuthMethodsRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListAuthMethodsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ListAuthMethodsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListAuthMethodsResponse* Arena::CreateMaybeMessage< ::clarifai::api::ListAuthMethodsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ListAuthMethodsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::RequestResetPasswordRequest* Arena::CreateMaybeMessage< ::clarifai::api::RequestResetPasswordRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::RequestResetPasswordRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::CompleteResetPasswordRequest* Arena::CreateMaybeMessage< ::clarifai::api::CompleteResetPasswordRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::CompleteResetPasswordRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostLoginRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostLoginRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostLoginRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostSignupRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostSignupRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostSignupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleLoginResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleLoginResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::SingleLoginResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetBillingUsageRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetBillingUsageRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::GetBillingUsageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetBillingUsageResponse* Arena::CreateMaybeMessage< ::clarifai::api::GetBillingUsageResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::GetBillingUsageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetStatusCodeRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetStatusCodeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::GetStatusCodeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListStatusCodesRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListStatusCodesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ListStatusCodesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleStatusCodeResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleStatusCodeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::SingleStatusCodeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiStatusCodeResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiStatusCodeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MultiStatusCodeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetConceptRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetConceptRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::GetConceptRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListConceptsRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListConceptsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ListConceptsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostConceptsSearchesRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostConceptsSearchesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostConceptsSearchesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostConceptsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostConceptsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostConceptsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchConceptsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PatchConceptsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PatchConceptsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetConceptCountsRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetConceptCountsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::GetConceptCountsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleConceptResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleConceptResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::SingleConceptResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiConceptResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiConceptResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MultiConceptResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiConceptCountResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiConceptCountResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MultiConceptCountResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListConceptRelationsRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListConceptRelationsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ListConceptRelationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostConceptRelationsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostConceptRelationsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostConceptRelationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteConceptRelationsRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeleteConceptRelationsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::DeleteConceptRelationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListKnowledgeGraphsRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListKnowledgeGraphsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ListKnowledgeGraphsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostKnowledgeGraphsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostKnowledgeGraphsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostKnowledgeGraphsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListConceptMappingsRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListConceptMappingsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ListConceptMappingsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostConceptMappingsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostConceptMappingsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostConceptMappingsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostConceptMappingJobsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostConceptMappingJobsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostConceptMappingJobsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleConceptRelationResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleConceptRelationResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::SingleConceptRelationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiConceptRelationResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiConceptRelationResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MultiConceptRelationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleKnowledgeGraphResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleKnowledgeGraphResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::SingleKnowledgeGraphResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiKnowledgeGraphResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiKnowledgeGraphResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MultiKnowledgeGraphResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleConceptMappingResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleConceptMappingResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::SingleConceptMappingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiConceptMappingResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiConceptMappingResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MultiConceptMappingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleConceptMappingJobResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleConceptMappingJobResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::SingleConceptMappingJobResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiConceptMappingJobResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiConceptMappingJobResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MultiConceptMappingJobResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetConceptLanguageRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetConceptLanguageRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::GetConceptLanguageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListConceptLanguagesRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListConceptLanguagesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ListConceptLanguagesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchConceptLanguagesRequest* Arena::CreateMaybeMessage< ::clarifai::api::PatchConceptLanguagesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PatchConceptLanguagesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostConceptLanguagesRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostConceptLanguagesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostConceptLanguagesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleConceptLanguageResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleConceptLanguageResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::SingleConceptLanguageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiConceptLanguageResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiConceptLanguageResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MultiConceptLanguageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListConceptReferencesRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListConceptReferencesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ListConceptReferencesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleConceptReferenceResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleConceptReferenceResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::SingleConceptReferenceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiConceptReferenceResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiConceptReferenceResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MultiConceptReferenceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetHealthzRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetHealthzRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::GetHealthzRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetHealthzResponse* Arena::CreateMaybeMessage< ::clarifai::api::GetHealthzResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::GetHealthzResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetInputRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetInputRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::GetInputRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListInputsRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListInputsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ListInputsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::StreamInputsRequest* Arena::CreateMaybeMessage< ::clarifai::api::StreamInputsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::StreamInputsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostInputsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostInputsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostInputsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostInputsFileRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostInputsFileRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostInputsFileRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostInputsNiFiRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostInputsNiFiRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostInputsNiFiRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchInputsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PatchInputsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PatchInputsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteInputRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeleteInputRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::DeleteInputRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteInputsRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeleteInputsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::DeleteInputsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleInputResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleInputResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::SingleInputResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiInputResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiInputResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MultiInputResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleInputCountResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleInputCountResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::SingleInputCountResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetInputCountRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetInputCountRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::GetInputCountRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostModelOutputsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostModelOutputsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostModelOutputsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListModelInputsRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListModelInputsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ListModelInputsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetKeyRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetKeyRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::GetKeyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListKeysRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListKeysRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ListKeysRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListAppKeysRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListAppKeysRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ListAppKeysRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostKeysRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostKeysRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostKeysRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteKeyRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeleteKeyRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::DeleteKeyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchKeysRequest* Arena::CreateMaybeMessage< ::clarifai::api::PatchKeysRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PatchKeysRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleKeyResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleKeyResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::SingleKeyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiKeyResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiKeyResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MultiKeyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::FetchLicenseRequest* Arena::CreateMaybeMessage< ::clarifai::api::FetchLicenseRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::FetchLicenseRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::FetchLicenseResponse* Arena::CreateMaybeMessage< ::clarifai::api::FetchLicenseResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::FetchLicenseResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ValidateLicenseRequest* Arena::CreateMaybeMessage< ::clarifai::api::ValidateLicenseRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ValidateLicenseRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ValidateLicenseResponse* Arena::CreateMaybeMessage< ::clarifai::api::ValidateLicenseResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ValidateLicenseResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListLicensesRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListLicensesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ListLicensesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetLicenseRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetLicenseRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::GetLicenseRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleLicenseResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleLicenseResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::SingleLicenseResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultipleLicensesResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultipleLicensesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MultipleLicensesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetModelRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetModelRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::GetModelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetModelOutputInfoRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetModelOutputInfoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::GetModelOutputInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListModelsRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListModelsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ListModelsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostModelsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostModelsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostModelsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchModelsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PatchModelsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PatchModelsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteModelRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeleteModelRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::DeleteModelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteModelsRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeleteModelsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::DeleteModelsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostModelsSearchesRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostModelsSearchesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostModelsSearchesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleModelResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleModelResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::SingleModelResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiModelResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiModelResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MultiModelResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetModelVersionRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetModelVersionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::GetModelVersionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListModelVersionsRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListModelVersionsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ListModelVersionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteModelVersionRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeleteModelVersionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::DeleteModelVersionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleModelVersionResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleModelVersionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::SingleModelVersionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiModelVersionResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiModelVersionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MultiModelVersionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostModelVersionsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostModelVersionsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostModelVersionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostModelVersionMetricsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostModelVersionMetricsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostModelVersionMetricsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostModelVersionsDeploymentRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostModelVersionsDeploymentRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostModelVersionsDeploymentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteModelVersionsDeploymentRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeleteModelVersionsDeploymentRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::DeleteModelVersionsDeploymentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetModelVersionMetricsRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetModelVersionMetricsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::GetModelVersionMetricsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiOutputResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiOutputResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MultiOutputResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListScopesRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListScopesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ListScopesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MyScopesRequest* Arena::CreateMaybeMessage< ::clarifai::api::MyScopesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MyScopesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiScopeDepsResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiScopeDepsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MultiScopeDepsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiScopeResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiScopeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MultiScopeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetSearchRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetSearchRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::GetSearchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListSearchesRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListSearchesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ListSearchesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostSearchesRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostSearchesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostSearchesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostSearchesByIDRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostSearchesByIDRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostSearchesByIDRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteSearchRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeleteSearchRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::DeleteSearchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostAttributeSearchRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostAttributeSearchRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostAttributeSearchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostAnnotationsSearchesRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostAnnotationsSearchesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostAnnotationsSearchesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostInputsSearchesRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostInputsSearchesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostInputsSearchesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleSearchResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleSearchResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::SingleSearchResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiSearchResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiSearchResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MultiSearchResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostAnnotationSearchMetricsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostAnnotationSearchMetricsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostAnnotationSearchMetricsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetAnnotationSearchMetricsRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetAnnotationSearchMetricsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::GetAnnotationSearchMetricsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListAnnotationSearchMetricsRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListAnnotationSearchMetricsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ListAnnotationSearchMetricsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiAnnotationSearchMetricsResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiAnnotationSearchMetricsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MultiAnnotationSearchMetricsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListClustersRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListClustersRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ListClustersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListAnnotationsForClusterRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListAnnotationsForClusterRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ListAnnotationsForClusterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostClustersSearchesRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostClustersSearchesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostClustersSearchesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiClusterResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiClusterResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MultiClusterResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetSubscriptionRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetSubscriptionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::GetSubscriptionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostSubscriptionRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostSubscriptionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostSubscriptionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleSubscriptionResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleSubscriptionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::SingleSubscriptionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListCreditCardsRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListCreditCardsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ListCreditCardsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultipleCreditCardResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultipleCreditCardResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MultipleCreditCardResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostCreditCardRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostCreditCardRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostCreditCardRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleCreditCardResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleCreditCardResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::SingleCreditCardResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteCreditCardRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeleteCreditCardRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::DeleteCreditCardRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchCreditCardsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PatchCreditCardsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PatchCreditCardsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostHistoricalUsageRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostHistoricalUsageRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostHistoricalUsageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostHistoricalUsageResponse* Arena::CreateMaybeMessage< ::clarifai::api::PostHistoricalUsageResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostHistoricalUsageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetRealtimeUsageRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetRealtimeUsageRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::GetRealtimeUsageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetRealtimeUsageResponse* Arena::CreateMaybeMessage< ::clarifai::api::GetRealtimeUsageResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::GetRealtimeUsageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListUsageIntervalsRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListUsageIntervalsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ListUsageIntervalsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListUsageIntervalsResponse* Arena::CreateMaybeMessage< ::clarifai::api::ListUsageIntervalsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ListUsageIntervalsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListUserBillingCyclesRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListUserBillingCyclesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ListUserBillingCyclesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListUserBillingCyclesResponse* Arena::CreateMaybeMessage< ::clarifai::api::ListUserBillingCyclesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ListUserBillingCyclesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostUsageRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostUsageRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostUsageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostUsageResponse* Arena::CreateMaybeMessage< ::clarifai::api::PostUsageResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostUsageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetUserRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetUserRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::GetUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostUserConsentRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostUserConsentRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostUserConsentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleUserResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleUserResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::SingleUserResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiUserResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiUserResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MultiUserResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchUserRequest* Arena::CreateMaybeMessage< ::clarifai::api::PatchUserRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PatchUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostEmailsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostEmailsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostEmailsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleEmailResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleEmailResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::SingleEmailResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultipleEmailResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultipleEmailResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MultipleEmailResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListEmailsRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListEmailsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ListEmailsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostResendVerifyRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostResendVerifyRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostResendVerifyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleResendVerifyResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleResendVerifyResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::SingleResendVerifyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteEmailRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeleteEmailRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::DeleteEmailRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostPrimaryEmailRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostPrimaryEmailRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostPrimaryEmailRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostValidatePasswordRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostValidatePasswordRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostValidatePasswordRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SinglePasswordValidationResponse* Arena::CreateMaybeMessage< ::clarifai::api::SinglePasswordValidationResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::SinglePasswordValidationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListPasswordPoliciesRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListPasswordPoliciesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ListPasswordPoliciesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostPasswordPoliciesRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostPasswordPoliciesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostPasswordPoliciesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchPasswordPoliciesRequest* Arena::CreateMaybeMessage< ::clarifai::api::PatchPasswordPoliciesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PatchPasswordPoliciesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeletePasswordPoliciesRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeletePasswordPoliciesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::DeletePasswordPoliciesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiplePasswordPoliciesResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiplePasswordPoliciesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MultiplePasswordPoliciesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetVocabRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetVocabRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::GetVocabRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListVocabsRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListVocabsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ListVocabsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostVocabsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostVocabsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostVocabsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchVocabsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PatchVocabsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PatchVocabsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteVocabRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeleteVocabRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::DeleteVocabRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteVocabsRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeleteVocabsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::DeleteVocabsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListVocabConceptsRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListVocabConceptsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ListVocabConceptsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostVocabConceptsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostVocabConceptsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostVocabConceptsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteVocabConceptRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeleteVocabConceptRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::DeleteVocabConceptRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteVocabConceptsRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeleteVocabConceptsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::DeleteVocabConceptsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleVocabResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleVocabResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::SingleVocabResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiVocabResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiVocabResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MultiVocabResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetWorkflowRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetWorkflowRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::GetWorkflowRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListWorkflowsRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListWorkflowsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ListWorkflowsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListPublicWorkflowsRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListPublicWorkflowsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ListPublicWorkflowsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostWorkflowsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostWorkflowsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostWorkflowsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchWorkflowsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PatchWorkflowsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PatchWorkflowsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteWorkflowRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeleteWorkflowRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::DeleteWorkflowRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteWorkflowsRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeleteWorkflowsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::DeleteWorkflowsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleWorkflowResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleWorkflowResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::SingleWorkflowResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiWorkflowResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiWorkflowResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MultiWorkflowResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostWorkflowResultsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostWorkflowResultsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostWorkflowResultsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostWorkflowResultsResponse* Arena::CreateMaybeMessage< ::clarifai::api::PostWorkflowResultsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostWorkflowResultsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostWorkflowResultsSimilarityRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostWorkflowResultsSimilarityRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostWorkflowResultsSimilarityRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostWorkflowResultsSimilarityResponse* Arena::CreateMaybeMessage< ::clarifai::api::PostWorkflowResultsSimilarityResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostWorkflowResultsSimilarityResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::TrainingTemplate* Arena::CreateMaybeMessage< ::clarifai::api::TrainingTemplate >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::TrainingTemplate >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListTrainingTemplatesRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListTrainingTemplatesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ListTrainingTemplatesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiTrainingTemplatesResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiTrainingTemplatesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MultiTrainingTemplatesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostAppDuplicationsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostAppDuplicationsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostAppDuplicationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetAppDuplicationRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetAppDuplicationRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::GetAppDuplicationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListAppDuplicationsRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListAppDuplicationsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ListAppDuplicationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiAppDuplicationsResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiAppDuplicationsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MultiAppDuplicationsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleAppDuplicationResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleAppDuplicationResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::SingleAppDuplicationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostTasksRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostTasksRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostTasksRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetTaskRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetTaskRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::GetTaskRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListTasksRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListTasksRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ListTasksRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchTasksRequest* Arena::CreateMaybeMessage< ::clarifai::api::PatchTasksRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PatchTasksRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteTasksRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeleteTasksRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::DeleteTasksRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiTaskResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiTaskResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MultiTaskResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleTaskResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleTaskResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::SingleTaskResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostCollectorsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostCollectorsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostCollectorsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchCollectorsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PatchCollectorsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PatchCollectorsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteCollectorsRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeleteCollectorsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::DeleteCollectorsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetCollectorRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetCollectorRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::GetCollectorRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListCollectorsRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListCollectorsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::ListCollectorsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiCollectorResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiCollectorResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MultiCollectorResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleCollectorResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleCollectorResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::SingleCollectorResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostStatValuesRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostStatValuesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostStatValuesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiStatValueResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiStatValueResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MultiStatValueResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostStatValuesAggregateRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostStatValuesAggregateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::PostStatValuesAggregateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiStatValueAggregateResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiStatValueAggregateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::api::MultiStatValueAggregateResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
