// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/clarifai/sdk_billing/service.proto

#include "proto/clarifai/sdk_billing/service.pb.h"
#include "proto/clarifai/sdk_billing/service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace clarifai {
namespace sdk_billing {

static const char* SDKBillingService_method_names[] = {
  "/clarifai.sdk_billing.SDKBillingService/GetHealthz",
  "/clarifai.sdk_billing.SDKBillingService/PostSDKBilling",
};

std::unique_ptr< SDKBillingService::Stub> SDKBillingService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SDKBillingService::Stub> stub(new SDKBillingService::Stub(channel));
  return stub;
}

SDKBillingService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetHealthz_(SDKBillingService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PostSDKBilling_(SDKBillingService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SDKBillingService::Stub::GetHealthz(::grpc::ClientContext* context, const ::clarifai::sdk_billing::GetHealthzRequest& request, ::clarifai::sdk_billing::GetHealthzResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetHealthz_, context, request, response);
}

void SDKBillingService::Stub::experimental_async::GetHealthz(::grpc::ClientContext* context, const ::clarifai::sdk_billing::GetHealthzRequest* request, ::clarifai::sdk_billing::GetHealthzResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetHealthz_, context, request, response, std::move(f));
}

void SDKBillingService::Stub::experimental_async::GetHealthz(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::sdk_billing::GetHealthzResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetHealthz_, context, request, response, std::move(f));
}

void SDKBillingService::Stub::experimental_async::GetHealthz(::grpc::ClientContext* context, const ::clarifai::sdk_billing::GetHealthzRequest* request, ::clarifai::sdk_billing::GetHealthzResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetHealthz_, context, request, response, reactor);
}

void SDKBillingService::Stub::experimental_async::GetHealthz(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::sdk_billing::GetHealthzResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetHealthz_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::sdk_billing::GetHealthzResponse>* SDKBillingService::Stub::AsyncGetHealthzRaw(::grpc::ClientContext* context, const ::clarifai::sdk_billing::GetHealthzRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::sdk_billing::GetHealthzResponse>::Create(channel_.get(), cq, rpcmethod_GetHealthz_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::sdk_billing::GetHealthzResponse>* SDKBillingService::Stub::PrepareAsyncGetHealthzRaw(::grpc::ClientContext* context, const ::clarifai::sdk_billing::GetHealthzRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::sdk_billing::GetHealthzResponse>::Create(channel_.get(), cq, rpcmethod_GetHealthz_, context, request, false);
}

::grpc::Status SDKBillingService::Stub::PostSDKBilling(::grpc::ClientContext* context, const ::clarifai::sdk_billing::SDKBilling& request, ::clarifai::sdk_billing::SDKBillingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PostSDKBilling_, context, request, response);
}

void SDKBillingService::Stub::experimental_async::PostSDKBilling(::grpc::ClientContext* context, const ::clarifai::sdk_billing::SDKBilling* request, ::clarifai::sdk_billing::SDKBillingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostSDKBilling_, context, request, response, std::move(f));
}

void SDKBillingService::Stub::experimental_async::PostSDKBilling(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::sdk_billing::SDKBillingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostSDKBilling_, context, request, response, std::move(f));
}

void SDKBillingService::Stub::experimental_async::PostSDKBilling(::grpc::ClientContext* context, const ::clarifai::sdk_billing::SDKBilling* request, ::clarifai::sdk_billing::SDKBillingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostSDKBilling_, context, request, response, reactor);
}

void SDKBillingService::Stub::experimental_async::PostSDKBilling(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::sdk_billing::SDKBillingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostSDKBilling_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::sdk_billing::SDKBillingResponse>* SDKBillingService::Stub::AsyncPostSDKBillingRaw(::grpc::ClientContext* context, const ::clarifai::sdk_billing::SDKBilling& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::sdk_billing::SDKBillingResponse>::Create(channel_.get(), cq, rpcmethod_PostSDKBilling_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::sdk_billing::SDKBillingResponse>* SDKBillingService::Stub::PrepareAsyncPostSDKBillingRaw(::grpc::ClientContext* context, const ::clarifai::sdk_billing::SDKBilling& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::sdk_billing::SDKBillingResponse>::Create(channel_.get(), cq, rpcmethod_PostSDKBilling_, context, request, false);
}

SDKBillingService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SDKBillingService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SDKBillingService::Service, ::clarifai::sdk_billing::GetHealthzRequest, ::clarifai::sdk_billing::GetHealthzResponse>(
          std::mem_fn(&SDKBillingService::Service::GetHealthz), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SDKBillingService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SDKBillingService::Service, ::clarifai::sdk_billing::SDKBilling, ::clarifai::sdk_billing::SDKBillingResponse>(
          std::mem_fn(&SDKBillingService::Service::PostSDKBilling), this)));
}

SDKBillingService::Service::~Service() {
}

::grpc::Status SDKBillingService::Service::GetHealthz(::grpc::ServerContext* context, const ::clarifai::sdk_billing::GetHealthzRequest* request, ::clarifai::sdk_billing::GetHealthzResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SDKBillingService::Service::PostSDKBilling(::grpc::ServerContext* context, const ::clarifai::sdk_billing::SDKBilling* request, ::clarifai::sdk_billing::SDKBillingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace clarifai
}  // namespace sdk_billing

