// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/clarifai/bulk_data_service/service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "proto/clarifai/bulk_data_service/resources.pb.h"
#include "proto/clarifai/api/resources.pb.h"
#include "proto/clarifai/api/status/status.pb.h"
#include "proto/clarifai/auth/scope/scope.pb.h"
#include "proto/clarifai/auth/util/extension.pb.h"
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto;
namespace clarifai {
namespace bulk_data_service {
class GetDataDumpRequest;
class GetDataDumpRequestDefaultTypeInternal;
extern GetDataDumpRequestDefaultTypeInternal _GetDataDumpRequest_default_instance_;
class GetHealthzRequest;
class GetHealthzRequestDefaultTypeInternal;
extern GetHealthzRequestDefaultTypeInternal _GetHealthzRequest_default_instance_;
class GetHealthzResponse;
class GetHealthzResponseDefaultTypeInternal;
extern GetHealthzResponseDefaultTypeInternal _GetHealthzResponse_default_instance_;
class MultiDataDumpResponse;
class MultiDataDumpResponseDefaultTypeInternal;
extern MultiDataDumpResponseDefaultTypeInternal _MultiDataDumpResponse_default_instance_;
class SingleDataDumpResponse;
class SingleDataDumpResponseDefaultTypeInternal;
extern SingleDataDumpResponseDefaultTypeInternal _SingleDataDumpResponse_default_instance_;
}  // namespace bulk_data_service
}  // namespace clarifai
PROTOBUF_NAMESPACE_OPEN
template<> ::clarifai::bulk_data_service::GetDataDumpRequest* Arena::CreateMaybeMessage<::clarifai::bulk_data_service::GetDataDumpRequest>(Arena*);
template<> ::clarifai::bulk_data_service::GetHealthzRequest* Arena::CreateMaybeMessage<::clarifai::bulk_data_service::GetHealthzRequest>(Arena*);
template<> ::clarifai::bulk_data_service::GetHealthzResponse* Arena::CreateMaybeMessage<::clarifai::bulk_data_service::GetHealthzResponse>(Arena*);
template<> ::clarifai::bulk_data_service::MultiDataDumpResponse* Arena::CreateMaybeMessage<::clarifai::bulk_data_service::MultiDataDumpResponse>(Arena*);
template<> ::clarifai::bulk_data_service::SingleDataDumpResponse* Arena::CreateMaybeMessage<::clarifai::bulk_data_service::SingleDataDumpResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace clarifai {
namespace bulk_data_service {

// ===================================================================

class GetDataDumpRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.bulk_data_service.GetDataDumpRequest) */ {
 public:
  GetDataDumpRequest();
  virtual ~GetDataDumpRequest();

  GetDataDumpRequest(const GetDataDumpRequest& from);
  GetDataDumpRequest(GetDataDumpRequest&& from) noexcept
    : GetDataDumpRequest() {
    *this = ::std::move(from);
  }

  inline GetDataDumpRequest& operator=(const GetDataDumpRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDataDumpRequest& operator=(GetDataDumpRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDataDumpRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDataDumpRequest* internal_default_instance() {
    return reinterpret_cast<const GetDataDumpRequest*>(
               &_GetDataDumpRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetDataDumpRequest& a, GetDataDumpRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDataDumpRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDataDumpRequest* New() const final {
    return CreateMaybeMessage<GetDataDumpRequest>(nullptr);
  }

  GetDataDumpRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDataDumpRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDataDumpRequest& from);
  void MergeFrom(const GetDataDumpRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDataDumpRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.bulk_data_service.GetDataDumpRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataDumpIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // string data_dump_id = 2;
  void clear_data_dump_id();
  const std::string& data_dump_id() const;
  void set_data_dump_id(const std::string& value);
  void set_data_dump_id(std::string&& value);
  void set_data_dump_id(const char* value);
  void set_data_dump_id(const char* value, size_t size);
  std::string* mutable_data_dump_id();
  std::string* release_data_dump_id();
  void set_allocated_data_dump_id(std::string* data_dump_id);

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);

  // @@protoc_insertion_point(class_scope:clarifai.bulk_data_service.GetDataDumpRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_dump_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto;
};
// -------------------------------------------------------------------

class SingleDataDumpResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.bulk_data_service.SingleDataDumpResponse) */ {
 public:
  SingleDataDumpResponse();
  virtual ~SingleDataDumpResponse();

  SingleDataDumpResponse(const SingleDataDumpResponse& from);
  SingleDataDumpResponse(SingleDataDumpResponse&& from) noexcept
    : SingleDataDumpResponse() {
    *this = ::std::move(from);
  }

  inline SingleDataDumpResponse& operator=(const SingleDataDumpResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleDataDumpResponse& operator=(SingleDataDumpResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SingleDataDumpResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SingleDataDumpResponse* internal_default_instance() {
    return reinterpret_cast<const SingleDataDumpResponse*>(
               &_SingleDataDumpResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SingleDataDumpResponse& a, SingleDataDumpResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleDataDumpResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SingleDataDumpResponse* New() const final {
    return CreateMaybeMessage<SingleDataDumpResponse>(nullptr);
  }

  SingleDataDumpResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SingleDataDumpResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SingleDataDumpResponse& from);
  void MergeFrom(const SingleDataDumpResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleDataDumpResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.bulk_data_service.SingleDataDumpResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kDataDumpFieldNumber = 2,
  };
  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);

  // .clarifai.bulk_data_service.DataDump data_dump = 2;
  bool has_data_dump() const;
  void clear_data_dump();
  const ::clarifai::bulk_data_service::DataDump& data_dump() const;
  ::clarifai::bulk_data_service::DataDump* release_data_dump();
  ::clarifai::bulk_data_service::DataDump* mutable_data_dump();
  void set_allocated_data_dump(::clarifai::bulk_data_service::DataDump* data_dump);

  // @@protoc_insertion_point(class_scope:clarifai.bulk_data_service.SingleDataDumpResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::status::Status* status_;
  ::clarifai::bulk_data_service::DataDump* data_dump_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiDataDumpResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.bulk_data_service.MultiDataDumpResponse) */ {
 public:
  MultiDataDumpResponse();
  virtual ~MultiDataDumpResponse();

  MultiDataDumpResponse(const MultiDataDumpResponse& from);
  MultiDataDumpResponse(MultiDataDumpResponse&& from) noexcept
    : MultiDataDumpResponse() {
    *this = ::std::move(from);
  }

  inline MultiDataDumpResponse& operator=(const MultiDataDumpResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiDataDumpResponse& operator=(MultiDataDumpResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiDataDumpResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiDataDumpResponse* internal_default_instance() {
    return reinterpret_cast<const MultiDataDumpResponse*>(
               &_MultiDataDumpResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MultiDataDumpResponse& a, MultiDataDumpResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiDataDumpResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiDataDumpResponse* New() const final {
    return CreateMaybeMessage<MultiDataDumpResponse>(nullptr);
  }

  MultiDataDumpResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiDataDumpResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiDataDumpResponse& from);
  void MergeFrom(const MultiDataDumpResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiDataDumpResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.bulk_data_service.MultiDataDumpResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataDumpsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.bulk_data_service.DataDump data_dumps = 2;
  int data_dumps_size() const;
  void clear_data_dumps();
  ::clarifai::bulk_data_service::DataDump* mutable_data_dumps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::bulk_data_service::DataDump >*
      mutable_data_dumps();
  const ::clarifai::bulk_data_service::DataDump& data_dumps(int index) const;
  ::clarifai::bulk_data_service::DataDump* add_data_dumps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::bulk_data_service::DataDump >&
      data_dumps() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);

  // @@protoc_insertion_point(class_scope:clarifai.bulk_data_service.MultiDataDumpResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::bulk_data_service::DataDump > data_dumps_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto;
};
// -------------------------------------------------------------------

class GetHealthzRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.bulk_data_service.GetHealthzRequest) */ {
 public:
  GetHealthzRequest();
  virtual ~GetHealthzRequest();

  GetHealthzRequest(const GetHealthzRequest& from);
  GetHealthzRequest(GetHealthzRequest&& from) noexcept
    : GetHealthzRequest() {
    *this = ::std::move(from);
  }

  inline GetHealthzRequest& operator=(const GetHealthzRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetHealthzRequest& operator=(GetHealthzRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetHealthzRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetHealthzRequest* internal_default_instance() {
    return reinterpret_cast<const GetHealthzRequest*>(
               &_GetHealthzRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetHealthzRequest& a, GetHealthzRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetHealthzRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetHealthzRequest* New() const final {
    return CreateMaybeMessage<GetHealthzRequest>(nullptr);
  }

  GetHealthzRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetHealthzRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetHealthzRequest& from);
  void MergeFrom(const GetHealthzRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetHealthzRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.bulk_data_service.GetHealthzRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:clarifai.bulk_data_service.GetHealthzRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto;
};
// -------------------------------------------------------------------

class GetHealthzResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.bulk_data_service.GetHealthzResponse) */ {
 public:
  GetHealthzResponse();
  virtual ~GetHealthzResponse();

  GetHealthzResponse(const GetHealthzResponse& from);
  GetHealthzResponse(GetHealthzResponse&& from) noexcept
    : GetHealthzResponse() {
    *this = ::std::move(from);
  }

  inline GetHealthzResponse& operator=(const GetHealthzResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetHealthzResponse& operator=(GetHealthzResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetHealthzResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetHealthzResponse* internal_default_instance() {
    return reinterpret_cast<const GetHealthzResponse*>(
               &_GetHealthzResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetHealthzResponse& a, GetHealthzResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetHealthzResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetHealthzResponse* New() const final {
    return CreateMaybeMessage<GetHealthzResponse>(nullptr);
  }

  GetHealthzResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetHealthzResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetHealthzResponse& from);
  void MergeFrom(const GetHealthzResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetHealthzResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.bulk_data_service.GetHealthzResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string time = 2;
  void clear_time();
  const std::string& time() const;
  void set_time(const std::string& value);
  void set_time(std::string&& value);
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  std::string* mutable_time();
  std::string* release_time();
  void set_allocated_time(std::string* time);

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);

  // @@protoc_insertion_point(class_scope:clarifai.bulk_data_service.GetHealthzResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetDataDumpRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool GetDataDumpRequest::has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline const ::clarifai::api::UserAppIDSet& GetDataDumpRequest::user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  // @@protoc_insertion_point(field_get:clarifai.bulk_data_service.GetDataDumpRequest.user_app_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserAppIDSet*>(
      &::clarifai::api::_UserAppIDSet_default_instance_);
}
inline ::clarifai::api::UserAppIDSet* GetDataDumpRequest::release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.bulk_data_service.GetDataDumpRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetDataDumpRequest::mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaNoVirtual());
    user_app_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:clarifai.bulk_data_service.GetDataDumpRequest.user_app_id)
  return user_app_id_;
}
inline void GetDataDumpRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.bulk_data_service.GetDataDumpRequest.user_app_id)
}

// string data_dump_id = 2;
inline void GetDataDumpRequest::clear_data_dump_id() {
  data_dump_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetDataDumpRequest::data_dump_id() const {
  // @@protoc_insertion_point(field_get:clarifai.bulk_data_service.GetDataDumpRequest.data_dump_id)
  return data_dump_id_.GetNoArena();
}
inline void GetDataDumpRequest::set_data_dump_id(const std::string& value) {
  
  data_dump_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:clarifai.bulk_data_service.GetDataDumpRequest.data_dump_id)
}
inline void GetDataDumpRequest::set_data_dump_id(std::string&& value) {
  
  data_dump_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.bulk_data_service.GetDataDumpRequest.data_dump_id)
}
inline void GetDataDumpRequest::set_data_dump_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_dump_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.bulk_data_service.GetDataDumpRequest.data_dump_id)
}
inline void GetDataDumpRequest::set_data_dump_id(const char* value, size_t size) {
  
  data_dump_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.bulk_data_service.GetDataDumpRequest.data_dump_id)
}
inline std::string* GetDataDumpRequest::mutable_data_dump_id() {
  
  // @@protoc_insertion_point(field_mutable:clarifai.bulk_data_service.GetDataDumpRequest.data_dump_id)
  return data_dump_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetDataDumpRequest::release_data_dump_id() {
  // @@protoc_insertion_point(field_release:clarifai.bulk_data_service.GetDataDumpRequest.data_dump_id)
  
  return data_dump_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetDataDumpRequest::set_allocated_data_dump_id(std::string* data_dump_id) {
  if (data_dump_id != nullptr) {
    
  } else {
    
  }
  data_dump_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data_dump_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.bulk_data_service.GetDataDumpRequest.data_dump_id)
}

// -------------------------------------------------------------------

// SingleDataDumpResponse

// .clarifai.api.status.Status status = 1;
inline bool SingleDataDumpResponse::has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline const ::clarifai::api::status::Status& SingleDataDumpResponse::status() const {
  const ::clarifai::api::status::Status* p = status_;
  // @@protoc_insertion_point(field_get:clarifai.bulk_data_service.SingleDataDumpResponse.status)
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline ::clarifai::api::status::Status* SingleDataDumpResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.bulk_data_service.SingleDataDumpResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* SingleDataDumpResponse::mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:clarifai.bulk_data_service.SingleDataDumpResponse.status)
  return status_;
}
inline void SingleDataDumpResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.bulk_data_service.SingleDataDumpResponse.status)
}

// .clarifai.bulk_data_service.DataDump data_dump = 2;
inline bool SingleDataDumpResponse::has_data_dump() const {
  return this != internal_default_instance() && data_dump_ != nullptr;
}
inline const ::clarifai::bulk_data_service::DataDump& SingleDataDumpResponse::data_dump() const {
  const ::clarifai::bulk_data_service::DataDump* p = data_dump_;
  // @@protoc_insertion_point(field_get:clarifai.bulk_data_service.SingleDataDumpResponse.data_dump)
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::bulk_data_service::DataDump*>(
      &::clarifai::bulk_data_service::_DataDump_default_instance_);
}
inline ::clarifai::bulk_data_service::DataDump* SingleDataDumpResponse::release_data_dump() {
  // @@protoc_insertion_point(field_release:clarifai.bulk_data_service.SingleDataDumpResponse.data_dump)
  
  ::clarifai::bulk_data_service::DataDump* temp = data_dump_;
  data_dump_ = nullptr;
  return temp;
}
inline ::clarifai::bulk_data_service::DataDump* SingleDataDumpResponse::mutable_data_dump() {
  
  if (data_dump_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::bulk_data_service::DataDump>(GetArenaNoVirtual());
    data_dump_ = p;
  }
  // @@protoc_insertion_point(field_mutable:clarifai.bulk_data_service.SingleDataDumpResponse.data_dump)
  return data_dump_;
}
inline void SingleDataDumpResponse::set_allocated_data_dump(::clarifai::bulk_data_service::DataDump* data_dump) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_dump_);
  }
  if (data_dump) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data_dump = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_dump, submessage_arena);
    }
    
  } else {
    
  }
  data_dump_ = data_dump;
  // @@protoc_insertion_point(field_set_allocated:clarifai.bulk_data_service.SingleDataDumpResponse.data_dump)
}

// -------------------------------------------------------------------

// MultiDataDumpResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiDataDumpResponse::has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline const ::clarifai::api::status::Status& MultiDataDumpResponse::status() const {
  const ::clarifai::api::status::Status* p = status_;
  // @@protoc_insertion_point(field_get:clarifai.bulk_data_service.MultiDataDumpResponse.status)
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline ::clarifai::api::status::Status* MultiDataDumpResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.bulk_data_service.MultiDataDumpResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiDataDumpResponse::mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:clarifai.bulk_data_service.MultiDataDumpResponse.status)
  return status_;
}
inline void MultiDataDumpResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.bulk_data_service.MultiDataDumpResponse.status)
}

// repeated .clarifai.bulk_data_service.DataDump data_dumps = 2;
inline int MultiDataDumpResponse::data_dumps_size() const {
  return data_dumps_.size();
}
inline ::clarifai::bulk_data_service::DataDump* MultiDataDumpResponse::mutable_data_dumps(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.bulk_data_service.MultiDataDumpResponse.data_dumps)
  return data_dumps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::bulk_data_service::DataDump >*
MultiDataDumpResponse::mutable_data_dumps() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.bulk_data_service.MultiDataDumpResponse.data_dumps)
  return &data_dumps_;
}
inline const ::clarifai::bulk_data_service::DataDump& MultiDataDumpResponse::data_dumps(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.bulk_data_service.MultiDataDumpResponse.data_dumps)
  return data_dumps_.Get(index);
}
inline ::clarifai::bulk_data_service::DataDump* MultiDataDumpResponse::add_data_dumps() {
  // @@protoc_insertion_point(field_add:clarifai.bulk_data_service.MultiDataDumpResponse.data_dumps)
  return data_dumps_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::bulk_data_service::DataDump >&
MultiDataDumpResponse::data_dumps() const {
  // @@protoc_insertion_point(field_list:clarifai.bulk_data_service.MultiDataDumpResponse.data_dumps)
  return data_dumps_;
}

// -------------------------------------------------------------------

// GetHealthzRequest

// -------------------------------------------------------------------

// GetHealthzResponse

// .clarifai.api.status.Status status = 1;
inline bool GetHealthzResponse::has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline const ::clarifai::api::status::Status& GetHealthzResponse::status() const {
  const ::clarifai::api::status::Status* p = status_;
  // @@protoc_insertion_point(field_get:clarifai.bulk_data_service.GetHealthzResponse.status)
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline ::clarifai::api::status::Status* GetHealthzResponse::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.bulk_data_service.GetHealthzResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* GetHealthzResponse::mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:clarifai.bulk_data_service.GetHealthzResponse.status)
  return status_;
}
inline void GetHealthzResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.bulk_data_service.GetHealthzResponse.status)
}

// string time = 2;
inline void GetHealthzResponse::clear_time() {
  time_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetHealthzResponse::time() const {
  // @@protoc_insertion_point(field_get:clarifai.bulk_data_service.GetHealthzResponse.time)
  return time_.GetNoArena();
}
inline void GetHealthzResponse::set_time(const std::string& value) {
  
  time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:clarifai.bulk_data_service.GetHealthzResponse.time)
}
inline void GetHealthzResponse::set_time(std::string&& value) {
  
  time_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.bulk_data_service.GetHealthzResponse.time)
}
inline void GetHealthzResponse::set_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.bulk_data_service.GetHealthzResponse.time)
}
inline void GetHealthzResponse::set_time(const char* value, size_t size) {
  
  time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.bulk_data_service.GetHealthzResponse.time)
}
inline std::string* GetHealthzResponse::mutable_time() {
  
  // @@protoc_insertion_point(field_mutable:clarifai.bulk_data_service.GetHealthzResponse.time)
  return time_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetHealthzResponse::release_time() {
  // @@protoc_insertion_point(field_release:clarifai.bulk_data_service.GetHealthzResponse.time)
  
  return time_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetHealthzResponse::set_allocated_time(std::string* time) {
  if (time != nullptr) {
    
  } else {
    
  }
  time_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:clarifai.bulk_data_service.GetHealthzResponse.time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bulk_data_service
}  // namespace clarifai

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto
