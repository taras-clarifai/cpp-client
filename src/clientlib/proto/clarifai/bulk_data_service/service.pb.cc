// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/clarifai/bulk_data_service/service.proto

#include "proto/clarifai/bulk_data_service/service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fbulk_5fdata_5fservice_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DataDump_proto_2fclarifai_2fbulk_5fdata_5fservice_2fresources_2eproto;
namespace clarifai {
namespace bulk_data_service {
class GetDataDumpRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetDataDumpRequest> _instance;
} _GetDataDumpRequest_default_instance_;
class SingleDataDumpResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleDataDumpResponse> _instance;
} _SingleDataDumpResponse_default_instance_;
class MultiDataDumpResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiDataDumpResponse> _instance;
} _MultiDataDumpResponse_default_instance_;
class GetHealthzRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetHealthzRequest> _instance;
} _GetHealthzRequest_default_instance_;
class GetHealthzResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetHealthzResponse> _instance;
} _GetHealthzResponse_default_instance_;
}  // namespace bulk_data_service
}  // namespace clarifai
static void InitDefaultsscc_info_GetDataDumpRequest_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::bulk_data_service::_GetDataDumpRequest_default_instance_;
    new (ptr) ::clarifai::bulk_data_service::GetDataDumpRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::bulk_data_service::GetDataDumpRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetDataDumpRequest_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetDataDumpRequest_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_GetHealthzRequest_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::bulk_data_service::_GetHealthzRequest_default_instance_;
    new (ptr) ::clarifai::bulk_data_service::GetHealthzRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::bulk_data_service::GetHealthzRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetHealthzRequest_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetHealthzRequest_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto}, {}};

static void InitDefaultsscc_info_GetHealthzResponse_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::bulk_data_service::_GetHealthzResponse_default_instance_;
    new (ptr) ::clarifai::bulk_data_service::GetHealthzResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::bulk_data_service::GetHealthzResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetHealthzResponse_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetHealthzResponse_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,}};

static void InitDefaultsscc_info_MultiDataDumpResponse_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::bulk_data_service::_MultiDataDumpResponse_default_instance_;
    new (ptr) ::clarifai::bulk_data_service::MultiDataDumpResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::bulk_data_service::MultiDataDumpResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiDataDumpResponse_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MultiDataDumpResponse_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_DataDump_proto_2fclarifai_2fbulk_5fdata_5fservice_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_SingleDataDumpResponse_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::bulk_data_service::_SingleDataDumpResponse_default_instance_;
    new (ptr) ::clarifai::bulk_data_service::SingleDataDumpResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::bulk_data_service::SingleDataDumpResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SingleDataDumpResponse_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SingleDataDumpResponse_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto}, {
      &scc_info_Status_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto.base,
      &scc_info_DataDump_proto_2fclarifai_2fbulk_5fdata_5fservice_2fresources_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::bulk_data_service::GetDataDumpRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::bulk_data_service::GetDataDumpRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::bulk_data_service::GetDataDumpRequest, data_dump_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::bulk_data_service::SingleDataDumpResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::bulk_data_service::SingleDataDumpResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::bulk_data_service::SingleDataDumpResponse, data_dump_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::bulk_data_service::MultiDataDumpResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::bulk_data_service::MultiDataDumpResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::bulk_data_service::MultiDataDumpResponse, data_dumps_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::bulk_data_service::GetHealthzRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::bulk_data_service::GetHealthzResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::bulk_data_service::GetHealthzResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::bulk_data_service::GetHealthzResponse, time_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::clarifai::bulk_data_service::GetDataDumpRequest)},
  { 7, -1, sizeof(::clarifai::bulk_data_service::SingleDataDumpResponse)},
  { 14, -1, sizeof(::clarifai::bulk_data_service::MultiDataDumpResponse)},
  { 21, -1, sizeof(::clarifai::bulk_data_service::GetHealthzRequest)},
  { 26, -1, sizeof(::clarifai::bulk_data_service::GetHealthzResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::bulk_data_service::_GetDataDumpRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::bulk_data_service::_SingleDataDumpResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::bulk_data_service::_MultiDataDumpResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::bulk_data_service::_GetHealthzRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::bulk_data_service::_GetHealthzResponse_default_instance_),
};

const char descriptor_table_protodef_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n.proto/clarifai/bulk_data_service/servi"
  "ce.proto\022\032clarifai.bulk_data_service\0320pr"
  "oto/clarifai/bulk_data_service/resources"
  ".proto\032\"proto/clarifai/api/resources.pro"
  "to\032&proto/clarifai/api/status/status.pro"
  "to\032%proto/clarifai/auth/scope/scope.prot"
  "o\032(proto/clarifai/auth/util/extension.pr"
  "oto\032\034google/api/annotations.proto\"[\n\022Get"
  "DataDumpRequest\022/\n\013user_app_id\030\001 \001(\0132\032.c"
  "larifai.api.UserAppIDSet\022\024\n\014data_dump_id"
  "\030\002 \001(\t\"~\n\026SingleDataDumpResponse\022+\n\006stat"
  "us\030\001 \001(\0132\033.clarifai.api.status.Status\0227\n"
  "\tdata_dump\030\002 \001(\0132$.clarifai.bulk_data_se"
  "rvice.DataDump\"~\n\025MultiDataDumpResponse\022"
  "+\n\006status\030\001 \001(\0132\033.clarifai.api.status.St"
  "atus\0228\n\ndata_dumps\030\002 \003(\0132$.clarifai.bulk"
  "_data_service.DataDump\"\023\n\021GetHealthzRequ"
  "est\"O\n\022GetHealthzResponse\022+\n\006status\030\001 \001("
  "\0132\033.clarifai.api.status.Status\022\014\n\004time\030\002"
  " \001(\t2\260\005\n\022BulkDataServiceAPI\022\213\001\n\nGetHealt"
  "hz\022-.clarifai.bulk_data_service.GetHealt"
  "hzRequest\032..clarifai.bulk_data_service.G"
  "etHealthzResponse\"\036\202\323\344\223\002\024\022\022/bulk-data/he"
  "althz\230\234\'\001\022\371\001\n\rPostDataDumps\0220.clarifai.b"
  "ulk_data_service.PostDataDumpsRequest\0321."
  "clarifai.bulk_data_service.MultiDataDump"
  "Response\"\202\001\202\323\344\223\002l\"K/bulk-data/users/{use"
  "r_app_id.user_id}/apps/{user_app_id.app_"
  "id}/data_dumps:\001*Z\032\"\025/bulk-data/data_dum"
  "ps:\001*\230\234\'\002\220\234\'&\220\234\'\013\220\234\'\005\022\217\002\n\013GetDataDump\022.."
  "clarifai.bulk_data_service.GetDataDumpRe"
  "quest\0322.clarifai.bulk_data_service.Singl"
  "eDataDumpResponse\"\233\001\202\323\344\223\002\204\001\022Z/bulk-data/"
  "users/{user_app_id.user_id}/apps/{user_a"
  "pp_id.app_id}/data_dumps/{data_dump_id}Z"
  "&\022$/bulk-data/data_dumps/{data_dump_id}\230"
  "\234\'\002\220\234\'&\220\234\'\013\220\234\'\005BA\n#com.clarifai.grpc.bul"
  "k_data_serviceP\001Z\021bulk_data_service\242\002\004CA"
  "IPb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto_deps[6] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto,
  &::descriptor_table_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto,
  &::descriptor_table_proto_2fclarifai_2fauth_2fscope_2fscope_2eproto,
  &::descriptor_table_proto_2fclarifai_2fauth_2futil_2fextension_2eproto,
  &::descriptor_table_proto_2fclarifai_2fbulk_5fdata_5fservice_2fresources_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto_sccs[5] = {
  &scc_info_GetDataDumpRequest_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto.base,
  &scc_info_GetHealthzRequest_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto.base,
  &scc_info_GetHealthzResponse_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto.base,
  &scc_info_MultiDataDumpResponse_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto.base,
  &scc_info_SingleDataDumpResponse_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto_once;
static bool descriptor_table_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto = {
  &descriptor_table_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto_initialized, descriptor_table_protodef_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto, "proto/clarifai/bulk_data_service/service.proto", 1530,
  &descriptor_table_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto_once, descriptor_table_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto_sccs, descriptor_table_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto_deps, 5, 6,
  schemas, file_default_instances, TableStruct_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto::offsets,
  file_level_metadata_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto, 5, file_level_enum_descriptors_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto, file_level_service_descriptors_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto), true);
namespace clarifai {
namespace bulk_data_service {

// ===================================================================

void GetDataDumpRequest::InitAsDefaultInstance() {
  ::clarifai::bulk_data_service::_GetDataDumpRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
}
class GetDataDumpRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetDataDumpRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetDataDumpRequest::_Internal::user_app_id(const GetDataDumpRequest* msg) {
  return *msg->user_app_id_;
}
void GetDataDumpRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetDataDumpRequest::GetDataDumpRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.bulk_data_service.GetDataDumpRequest)
}
GetDataDumpRequest::GetDataDumpRequest(const GetDataDumpRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_dump_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data_dump_id().empty()) {
    data_dump_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_dump_id_);
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.bulk_data_service.GetDataDumpRequest)
}

void GetDataDumpRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetDataDumpRequest_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto.base);
  data_dump_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_app_id_ = nullptr;
}

GetDataDumpRequest::~GetDataDumpRequest() {
  // @@protoc_insertion_point(destructor:clarifai.bulk_data_service.GetDataDumpRequest)
  SharedDtor();
}

void GetDataDumpRequest::SharedDtor() {
  data_dump_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetDataDumpRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetDataDumpRequest& GetDataDumpRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetDataDumpRequest_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto.base);
  return *internal_default_instance();
}


void GetDataDumpRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.bulk_data_service.GetDataDumpRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_dump_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetDataDumpRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string data_dump_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data_dump_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.bulk_data_service.GetDataDumpRequest.data_dump_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetDataDumpRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.bulk_data_service.GetDataDumpRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string data_dump_id = 2;
  if (this->data_dump_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data_dump_id().data(), static_cast<int>(this->_internal_data_dump_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.bulk_data_service.GetDataDumpRequest.data_dump_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_data_dump_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.bulk_data_service.GetDataDumpRequest)
  return target;
}

size_t GetDataDumpRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.bulk_data_service.GetDataDumpRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string data_dump_id = 2;
  if (this->data_dump_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data_dump_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetDataDumpRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.bulk_data_service.GetDataDumpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDataDumpRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetDataDumpRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.bulk_data_service.GetDataDumpRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.bulk_data_service.GetDataDumpRequest)
    MergeFrom(*source);
  }
}

void GetDataDumpRequest::MergeFrom(const GetDataDumpRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.bulk_data_service.GetDataDumpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data_dump_id().size() > 0) {

    data_dump_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_dump_id_);
  }
  if (from.has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
}

void GetDataDumpRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.bulk_data_service.GetDataDumpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDataDumpRequest::CopyFrom(const GetDataDumpRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.bulk_data_service.GetDataDumpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDataDumpRequest::IsInitialized() const {
  return true;
}

void GetDataDumpRequest::InternalSwap(GetDataDumpRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_dump_id_.Swap(&other->data_dump_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDataDumpRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SingleDataDumpResponse::InitAsDefaultInstance() {
  ::clarifai::bulk_data_service::_SingleDataDumpResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
  ::clarifai::bulk_data_service::_SingleDataDumpResponse_default_instance_._instance.get_mutable()->data_dump_ = const_cast< ::clarifai::bulk_data_service::DataDump*>(
      ::clarifai::bulk_data_service::DataDump::internal_default_instance());
}
class SingleDataDumpResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleDataDumpResponse* msg);
  static const ::clarifai::bulk_data_service::DataDump& data_dump(const SingleDataDumpResponse* msg);
};

const ::clarifai::api::status::Status&
SingleDataDumpResponse::_Internal::status(const SingleDataDumpResponse* msg) {
  return *msg->status_;
}
const ::clarifai::bulk_data_service::DataDump&
SingleDataDumpResponse::_Internal::data_dump(const SingleDataDumpResponse* msg) {
  return *msg->data_dump_;
}
void SingleDataDumpResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleDataDumpResponse::clear_data_dump() {
  if (GetArenaNoVirtual() == nullptr && data_dump_ != nullptr) {
    delete data_dump_;
  }
  data_dump_ = nullptr;
}
SingleDataDumpResponse::SingleDataDumpResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.bulk_data_service.SingleDataDumpResponse)
}
SingleDataDumpResponse::SingleDataDumpResponse(const SingleDataDumpResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_data_dump()) {
    data_dump_ = new ::clarifai::bulk_data_service::DataDump(*from.data_dump_);
  } else {
    data_dump_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.bulk_data_service.SingleDataDumpResponse)
}

void SingleDataDumpResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SingleDataDumpResponse_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_dump_) -
      reinterpret_cast<char*>(&status_)) + sizeof(data_dump_));
}

SingleDataDumpResponse::~SingleDataDumpResponse() {
  // @@protoc_insertion_point(destructor:clarifai.bulk_data_service.SingleDataDumpResponse)
  SharedDtor();
}

void SingleDataDumpResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete data_dump_;
}

void SingleDataDumpResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleDataDumpResponse& SingleDataDumpResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleDataDumpResponse_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto.base);
  return *internal_default_instance();
}


void SingleDataDumpResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.bulk_data_service.SingleDataDumpResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && data_dump_ != nullptr) {
    delete data_dump_;
  }
  data_dump_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SingleDataDumpResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.bulk_data_service.DataDump data_dump = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_dump(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleDataDumpResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.bulk_data_service.SingleDataDumpResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.bulk_data_service.DataDump data_dump = 2;
  if (this->has_data_dump()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data_dump(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.bulk_data_service.SingleDataDumpResponse)
  return target;
}

size_t SingleDataDumpResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.bulk_data_service.SingleDataDumpResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.bulk_data_service.DataDump data_dump = 2;
  if (this->has_data_dump()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_dump_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleDataDumpResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.bulk_data_service.SingleDataDumpResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleDataDumpResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleDataDumpResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.bulk_data_service.SingleDataDumpResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.bulk_data_service.SingleDataDumpResponse)
    MergeFrom(*source);
  }
}

void SingleDataDumpResponse::MergeFrom(const SingleDataDumpResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.bulk_data_service.SingleDataDumpResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from.has_data_dump()) {
    _internal_mutable_data_dump()->::clarifai::bulk_data_service::DataDump::MergeFrom(from._internal_data_dump());
  }
}

void SingleDataDumpResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.bulk_data_service.SingleDataDumpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleDataDumpResponse::CopyFrom(const SingleDataDumpResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.bulk_data_service.SingleDataDumpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleDataDumpResponse::IsInitialized() const {
  return true;
}

void SingleDataDumpResponse::InternalSwap(SingleDataDumpResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(data_dump_, other->data_dump_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleDataDumpResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiDataDumpResponse::InitAsDefaultInstance() {
  ::clarifai::bulk_data_service::_MultiDataDumpResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class MultiDataDumpResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiDataDumpResponse* msg);
};

const ::clarifai::api::status::Status&
MultiDataDumpResponse::_Internal::status(const MultiDataDumpResponse* msg) {
  return *msg->status_;
}
void MultiDataDumpResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiDataDumpResponse::clear_data_dumps() {
  data_dumps_.Clear();
}
MultiDataDumpResponse::MultiDataDumpResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.bulk_data_service.MultiDataDumpResponse)
}
MultiDataDumpResponse::MultiDataDumpResponse(const MultiDataDumpResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      data_dumps_(from.data_dumps_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.bulk_data_service.MultiDataDumpResponse)
}

void MultiDataDumpResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiDataDumpResponse_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto.base);
  status_ = nullptr;
}

MultiDataDumpResponse::~MultiDataDumpResponse() {
  // @@protoc_insertion_point(destructor:clarifai.bulk_data_service.MultiDataDumpResponse)
  SharedDtor();
}

void MultiDataDumpResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void MultiDataDumpResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiDataDumpResponse& MultiDataDumpResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiDataDumpResponse_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto.base);
  return *internal_default_instance();
}


void MultiDataDumpResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.bulk_data_service.MultiDataDumpResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_dumps_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultiDataDumpResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clarifai.bulk_data_service.DataDump data_dumps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_dumps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiDataDumpResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.bulk_data_service.MultiDataDumpResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.bulk_data_service.DataDump data_dumps = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_dumps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_data_dumps(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.bulk_data_service.MultiDataDumpResponse)
  return target;
}

size_t MultiDataDumpResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.bulk_data_service.MultiDataDumpResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.bulk_data_service.DataDump data_dumps = 2;
  total_size += 1UL * this->_internal_data_dumps_size();
  for (const auto& msg : this->data_dumps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiDataDumpResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.bulk_data_service.MultiDataDumpResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiDataDumpResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiDataDumpResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.bulk_data_service.MultiDataDumpResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.bulk_data_service.MultiDataDumpResponse)
    MergeFrom(*source);
  }
}

void MultiDataDumpResponse::MergeFrom(const MultiDataDumpResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.bulk_data_service.MultiDataDumpResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_dumps_.MergeFrom(from.data_dumps_);
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void MultiDataDumpResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.bulk_data_service.MultiDataDumpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiDataDumpResponse::CopyFrom(const MultiDataDumpResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.bulk_data_service.MultiDataDumpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiDataDumpResponse::IsInitialized() const {
  return true;
}

void MultiDataDumpResponse::InternalSwap(MultiDataDumpResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_dumps_.InternalSwap(&other->data_dumps_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiDataDumpResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetHealthzRequest::InitAsDefaultInstance() {
}
class GetHealthzRequest::_Internal {
 public:
};

GetHealthzRequest::GetHealthzRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.bulk_data_service.GetHealthzRequest)
}
GetHealthzRequest::GetHealthzRequest(const GetHealthzRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:clarifai.bulk_data_service.GetHealthzRequest)
}

void GetHealthzRequest::SharedCtor() {
}

GetHealthzRequest::~GetHealthzRequest() {
  // @@protoc_insertion_point(destructor:clarifai.bulk_data_service.GetHealthzRequest)
  SharedDtor();
}

void GetHealthzRequest::SharedDtor() {
}

void GetHealthzRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetHealthzRequest& GetHealthzRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetHealthzRequest_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto.base);
  return *internal_default_instance();
}


void GetHealthzRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.bulk_data_service.GetHealthzRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* GetHealthzRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetHealthzRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.bulk_data_service.GetHealthzRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.bulk_data_service.GetHealthzRequest)
  return target;
}

size_t GetHealthzRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.bulk_data_service.GetHealthzRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetHealthzRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.bulk_data_service.GetHealthzRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetHealthzRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetHealthzRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.bulk_data_service.GetHealthzRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.bulk_data_service.GetHealthzRequest)
    MergeFrom(*source);
  }
}

void GetHealthzRequest::MergeFrom(const GetHealthzRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.bulk_data_service.GetHealthzRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetHealthzRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.bulk_data_service.GetHealthzRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetHealthzRequest::CopyFrom(const GetHealthzRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.bulk_data_service.GetHealthzRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetHealthzRequest::IsInitialized() const {
  return true;
}

void GetHealthzRequest::InternalSwap(GetHealthzRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetHealthzRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetHealthzResponse::InitAsDefaultInstance() {
  ::clarifai::bulk_data_service::_GetHealthzResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::clarifai::api::status::Status*>(
      ::clarifai::api::status::Status::internal_default_instance());
}
class GetHealthzResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const GetHealthzResponse* msg);
};

const ::clarifai::api::status::Status&
GetHealthzResponse::_Internal::status(const GetHealthzResponse* msg) {
  return *msg->status_;
}
void GetHealthzResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
GetHealthzResponse::GetHealthzResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.bulk_data_service.GetHealthzResponse)
}
GetHealthzResponse::GetHealthzResponse(const GetHealthzResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_time().empty()) {
    time_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.time_);
  }
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.bulk_data_service.GetHealthzResponse)
}

void GetHealthzResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetHealthzResponse_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto.base);
  time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = nullptr;
}

GetHealthzResponse::~GetHealthzResponse() {
  // @@protoc_insertion_point(destructor:clarifai.bulk_data_service.GetHealthzResponse)
  SharedDtor();
}

void GetHealthzResponse::SharedDtor() {
  time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void GetHealthzResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetHealthzResponse& GetHealthzResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetHealthzResponse_proto_2fclarifai_2fbulk_5fdata_5fservice_2fservice_2eproto.base);
  return *internal_default_instance();
}


void GetHealthzResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.bulk_data_service.GetHealthzResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  time_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetHealthzResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.bulk_data_service.GetHealthzResponse.time"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetHealthzResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.bulk_data_service.GetHealthzResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // string time = 2;
  if (this->time().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_time().data(), static_cast<int>(this->_internal_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.bulk_data_service.GetHealthzResponse.time");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.bulk_data_service.GetHealthzResponse)
  return target;
}

size_t GetHealthzResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.bulk_data_service.GetHealthzResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string time = 2;
  if (this->time().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_time());
  }

  // .clarifai.api.status.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetHealthzResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.bulk_data_service.GetHealthzResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetHealthzResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetHealthzResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.bulk_data_service.GetHealthzResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.bulk_data_service.GetHealthzResponse)
    MergeFrom(*source);
  }
}

void GetHealthzResponse::MergeFrom(const GetHealthzResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.bulk_data_service.GetHealthzResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time().size() > 0) {

    time_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.time_);
  }
  if (from.has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
}

void GetHealthzResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.bulk_data_service.GetHealthzResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetHealthzResponse::CopyFrom(const GetHealthzResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.bulk_data_service.GetHealthzResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetHealthzResponse::IsInitialized() const {
  return true;
}

void GetHealthzResponse::InternalSwap(GetHealthzResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  time_.Swap(&other->time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetHealthzResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace bulk_data_service
}  // namespace clarifai
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::clarifai::bulk_data_service::GetDataDumpRequest* Arena::CreateMaybeMessage< ::clarifai::bulk_data_service::GetDataDumpRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::bulk_data_service::GetDataDumpRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::bulk_data_service::SingleDataDumpResponse* Arena::CreateMaybeMessage< ::clarifai::bulk_data_service::SingleDataDumpResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::bulk_data_service::SingleDataDumpResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::bulk_data_service::MultiDataDumpResponse* Arena::CreateMaybeMessage< ::clarifai::bulk_data_service::MultiDataDumpResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::bulk_data_service::MultiDataDumpResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::bulk_data_service::GetHealthzRequest* Arena::CreateMaybeMessage< ::clarifai::bulk_data_service::GetHealthzRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::bulk_data_service::GetHealthzRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::bulk_data_service::GetHealthzResponse* Arena::CreateMaybeMessage< ::clarifai::bulk_data_service::GetHealthzResponse >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::bulk_data_service::GetHealthzResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
