// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/clarifai/bulk_data_service/service.proto

#include "proto/clarifai/bulk_data_service/service.pb.h"
#include "proto/clarifai/bulk_data_service/service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace clarifai {
namespace bulk_data_service {

static const char* BulkDataServiceAPI_method_names[] = {
  "/clarifai.bulk_data_service.BulkDataServiceAPI/GetHealthz",
  "/clarifai.bulk_data_service.BulkDataServiceAPI/PostDataDumps",
  "/clarifai.bulk_data_service.BulkDataServiceAPI/GetDataDump",
};

std::unique_ptr< BulkDataServiceAPI::Stub> BulkDataServiceAPI::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< BulkDataServiceAPI::Stub> stub(new BulkDataServiceAPI::Stub(channel));
  return stub;
}

BulkDataServiceAPI::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetHealthz_(BulkDataServiceAPI_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PostDataDumps_(BulkDataServiceAPI_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDataDump_(BulkDataServiceAPI_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status BulkDataServiceAPI::Stub::GetHealthz(::grpc::ClientContext* context, const ::clarifai::bulk_data_service::GetHealthzRequest& request, ::clarifai::bulk_data_service::GetHealthzResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetHealthz_, context, request, response);
}

void BulkDataServiceAPI::Stub::experimental_async::GetHealthz(::grpc::ClientContext* context, const ::clarifai::bulk_data_service::GetHealthzRequest* request, ::clarifai::bulk_data_service::GetHealthzResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetHealthz_, context, request, response, std::move(f));
}

void BulkDataServiceAPI::Stub::experimental_async::GetHealthz(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::bulk_data_service::GetHealthzResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetHealthz_, context, request, response, std::move(f));
}

void BulkDataServiceAPI::Stub::experimental_async::GetHealthz(::grpc::ClientContext* context, const ::clarifai::bulk_data_service::GetHealthzRequest* request, ::clarifai::bulk_data_service::GetHealthzResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetHealthz_, context, request, response, reactor);
}

void BulkDataServiceAPI::Stub::experimental_async::GetHealthz(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::bulk_data_service::GetHealthzResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetHealthz_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::bulk_data_service::GetHealthzResponse>* BulkDataServiceAPI::Stub::AsyncGetHealthzRaw(::grpc::ClientContext* context, const ::clarifai::bulk_data_service::GetHealthzRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::bulk_data_service::GetHealthzResponse>::Create(channel_.get(), cq, rpcmethod_GetHealthz_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::bulk_data_service::GetHealthzResponse>* BulkDataServiceAPI::Stub::PrepareAsyncGetHealthzRaw(::grpc::ClientContext* context, const ::clarifai::bulk_data_service::GetHealthzRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::bulk_data_service::GetHealthzResponse>::Create(channel_.get(), cq, rpcmethod_GetHealthz_, context, request, false);
}

::grpc::Status BulkDataServiceAPI::Stub::PostDataDumps(::grpc::ClientContext* context, const ::clarifai::bulk_data_service::PostDataDumpsRequest& request, ::clarifai::bulk_data_service::MultiDataDumpResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PostDataDumps_, context, request, response);
}

void BulkDataServiceAPI::Stub::experimental_async::PostDataDumps(::grpc::ClientContext* context, const ::clarifai::bulk_data_service::PostDataDumpsRequest* request, ::clarifai::bulk_data_service::MultiDataDumpResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostDataDumps_, context, request, response, std::move(f));
}

void BulkDataServiceAPI::Stub::experimental_async::PostDataDumps(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::bulk_data_service::MultiDataDumpResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostDataDumps_, context, request, response, std::move(f));
}

void BulkDataServiceAPI::Stub::experimental_async::PostDataDumps(::grpc::ClientContext* context, const ::clarifai::bulk_data_service::PostDataDumpsRequest* request, ::clarifai::bulk_data_service::MultiDataDumpResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostDataDumps_, context, request, response, reactor);
}

void BulkDataServiceAPI::Stub::experimental_async::PostDataDumps(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::bulk_data_service::MultiDataDumpResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostDataDumps_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::bulk_data_service::MultiDataDumpResponse>* BulkDataServiceAPI::Stub::AsyncPostDataDumpsRaw(::grpc::ClientContext* context, const ::clarifai::bulk_data_service::PostDataDumpsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::bulk_data_service::MultiDataDumpResponse>::Create(channel_.get(), cq, rpcmethod_PostDataDumps_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::bulk_data_service::MultiDataDumpResponse>* BulkDataServiceAPI::Stub::PrepareAsyncPostDataDumpsRaw(::grpc::ClientContext* context, const ::clarifai::bulk_data_service::PostDataDumpsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::bulk_data_service::MultiDataDumpResponse>::Create(channel_.get(), cq, rpcmethod_PostDataDumps_, context, request, false);
}

::grpc::Status BulkDataServiceAPI::Stub::GetDataDump(::grpc::ClientContext* context, const ::clarifai::bulk_data_service::GetDataDumpRequest& request, ::clarifai::bulk_data_service::SingleDataDumpResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetDataDump_, context, request, response);
}

void BulkDataServiceAPI::Stub::experimental_async::GetDataDump(::grpc::ClientContext* context, const ::clarifai::bulk_data_service::GetDataDumpRequest* request, ::clarifai::bulk_data_service::SingleDataDumpResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetDataDump_, context, request, response, std::move(f));
}

void BulkDataServiceAPI::Stub::experimental_async::GetDataDump(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::bulk_data_service::SingleDataDumpResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetDataDump_, context, request, response, std::move(f));
}

void BulkDataServiceAPI::Stub::experimental_async::GetDataDump(::grpc::ClientContext* context, const ::clarifai::bulk_data_service::GetDataDumpRequest* request, ::clarifai::bulk_data_service::SingleDataDumpResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetDataDump_, context, request, response, reactor);
}

void BulkDataServiceAPI::Stub::experimental_async::GetDataDump(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::bulk_data_service::SingleDataDumpResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetDataDump_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::bulk_data_service::SingleDataDumpResponse>* BulkDataServiceAPI::Stub::AsyncGetDataDumpRaw(::grpc::ClientContext* context, const ::clarifai::bulk_data_service::GetDataDumpRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::bulk_data_service::SingleDataDumpResponse>::Create(channel_.get(), cq, rpcmethod_GetDataDump_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::bulk_data_service::SingleDataDumpResponse>* BulkDataServiceAPI::Stub::PrepareAsyncGetDataDumpRaw(::grpc::ClientContext* context, const ::clarifai::bulk_data_service::GetDataDumpRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::bulk_data_service::SingleDataDumpResponse>::Create(channel_.get(), cq, rpcmethod_GetDataDump_, context, request, false);
}

BulkDataServiceAPI::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BulkDataServiceAPI_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BulkDataServiceAPI::Service, ::clarifai::bulk_data_service::GetHealthzRequest, ::clarifai::bulk_data_service::GetHealthzResponse>(
          std::mem_fn(&BulkDataServiceAPI::Service::GetHealthz), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BulkDataServiceAPI_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BulkDataServiceAPI::Service, ::clarifai::bulk_data_service::PostDataDumpsRequest, ::clarifai::bulk_data_service::MultiDataDumpResponse>(
          std::mem_fn(&BulkDataServiceAPI::Service::PostDataDumps), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BulkDataServiceAPI_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BulkDataServiceAPI::Service, ::clarifai::bulk_data_service::GetDataDumpRequest, ::clarifai::bulk_data_service::SingleDataDumpResponse>(
          std::mem_fn(&BulkDataServiceAPI::Service::GetDataDump), this)));
}

BulkDataServiceAPI::Service::~Service() {
}

::grpc::Status BulkDataServiceAPI::Service::GetHealthz(::grpc::ServerContext* context, const ::clarifai::bulk_data_service::GetHealthzRequest* request, ::clarifai::bulk_data_service::GetHealthzResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BulkDataServiceAPI::Service::PostDataDumps(::grpc::ServerContext* context, const ::clarifai::bulk_data_service::PostDataDumpsRequest* request, ::clarifai::bulk_data_service::MultiDataDumpResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BulkDataServiceAPI::Service::GetDataDump(::grpc::ServerContext* context, const ::clarifai::bulk_data_service::GetDataDumpRequest* request, ::clarifai::bulk_data_service::SingleDataDumpResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace clarifai
}  // namespace bulk_data_service

