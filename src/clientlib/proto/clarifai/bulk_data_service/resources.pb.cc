// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/clarifai/bulk_data_service/resources.proto

#include "proto/clarifai/bulk_data_service/resources.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Search_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fbulk_5fdata_5fservice_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PostDataDumpsRequest_proto_2fclarifai_2fbulk_5fdata_5fservice_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace clarifai {
namespace bulk_data_service {
class PostDataDumpsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostDataDumpsRequest> _instance;
} _PostDataDumpsRequest_default_instance_;
class DataDumpDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataDump> _instance;
} _DataDump_default_instance_;
}  // namespace bulk_data_service
}  // namespace clarifai
static void InitDefaultsscc_info_DataDump_proto_2fclarifai_2fbulk_5fdata_5fservice_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::bulk_data_service::_DataDump_default_instance_;
    new (ptr) ::clarifai::bulk_data_service::DataDump();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::bulk_data_service::DataDump::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DataDump_proto_2fclarifai_2fbulk_5fdata_5fservice_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_DataDump_proto_2fclarifai_2fbulk_5fdata_5fservice_2fresources_2eproto}, {
      &scc_info_PostDataDumpsRequest_proto_2fclarifai_2fbulk_5fdata_5fservice_2fresources_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_PostDataDumpsRequest_proto_2fclarifai_2fbulk_5fdata_5fservice_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clarifai::bulk_data_service::_PostDataDumpsRequest_default_instance_;
    new (ptr) ::clarifai::bulk_data_service::PostDataDumpsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clarifai::bulk_data_service::PostDataDumpsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PostDataDumpsRequest_proto_2fclarifai_2fbulk_5fdata_5fservice_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_PostDataDumpsRequest_proto_2fclarifai_2fbulk_5fdata_5fservice_2fresources_2eproto}, {
      &scc_info_UserAppIDSet_proto_2fclarifai_2fapi_2fresources_2eproto.base,
      &scc_info_Search_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fclarifai_2fbulk_5fdata_5fservice_2fresources_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_proto_2fclarifai_2fbulk_5fdata_5fservice_2fresources_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fclarifai_2fbulk_5fdata_5fservice_2fresources_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2fclarifai_2fbulk_5fdata_5fservice_2fresources_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::bulk_data_service::PostDataDumpsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::bulk_data_service::PostDataDumpsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::bulk_data_service::PostDataDumpsRequest, search_),
  PROTOBUF_FIELD_OFFSET(::clarifai::bulk_data_service::PostDataDumpsRequest, include_embeddings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::bulk_data_service::DataDump, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clarifai::bulk_data_service::DataDump, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::bulk_data_service::DataDump, app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::bulk_data_service::DataDump, request_),
  PROTOBUF_FIELD_OFFSET(::clarifai::bulk_data_service::DataDump, location_),
  PROTOBUF_FIELD_OFFSET(::clarifai::bulk_data_service::DataDump, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::bulk_data_service::DataDump, created_by_),
  PROTOBUF_FIELD_OFFSET(::clarifai::bulk_data_service::DataDump, created_at_),
  PROTOBUF_FIELD_OFFSET(::clarifai::bulk_data_service::DataDump, modified_at_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::clarifai::bulk_data_service::PostDataDumpsRequest)},
  { 8, -1, sizeof(::clarifai::bulk_data_service::DataDump)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::bulk_data_service::_PostDataDumpsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::bulk_data_service::_DataDump_default_instance_),
};

const char descriptor_table_protodef_proto_2fclarifai_2fbulk_5fdata_5fservice_2fresources_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n0proto/clarifai/bulk_data_service/resou"
  "rces.proto\022\032clarifai.bulk_data_service\032\""
  "proto/clarifai/api/resources.proto\032+prot"
  "o/clarifai/api/status/status_code.proto\032"
  "\037google/protobuf/timestamp.proto\"\211\001\n\024Pos"
  "tDataDumpsRequest\022/\n\013user_app_id\030\001 \001(\0132\032"
  ".clarifai.api.UserAppIDSet\022$\n\006search\030\002 \001"
  "(\0132\024.clarifai.api.Search\022\032\n\022include_embe"
  "ddings\030\003 \001(\010\"\241\002\n\010DataDump\022\n\n\002id\030\001 \001(\t\022\016\n"
  "\006app_id\030\002 \001(\t\022A\n\007request\030\003 \001(\01320.clarifa"
  "i.bulk_data_service.PostDataDumpsRequest"
  "\022\020\n\010location\030\004 \001(\t\022/\n\006status\030\005 \001(\0162\037.cla"
  "rifai.api.status.StatusCode\022\022\n\ncreated_b"
  "y\030\006 \001(\t\022.\n\ncreated_at\030\007 \001(\0132\032.google.pro"
  "tobuf.Timestamp\022/\n\013modified_at\030\010 \001(\0132\032.g"
  "oogle.protobuf.TimestampBA\n#com.clarifai"
  ".grpc.bulk_data_serviceP\001Z\021bulk_data_ser"
  "vice\242\002\004CAIPb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2fclarifai_2fbulk_5fdata_5fservice_2fresources_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto,
  &::descriptor_table_proto_2fclarifai_2fapi_2fstatus_2fstatus_5fcode_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_2fclarifai_2fbulk_5fdata_5fservice_2fresources_2eproto_sccs[2] = {
  &scc_info_DataDump_proto_2fclarifai_2fbulk_5fdata_5fservice_2fresources_2eproto.base,
  &scc_info_PostDataDumpsRequest_proto_2fclarifai_2fbulk_5fdata_5fservice_2fresources_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2fclarifai_2fbulk_5fdata_5fservice_2fresources_2eproto_once;
static bool descriptor_table_proto_2fclarifai_2fbulk_5fdata_5fservice_2fresources_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fclarifai_2fbulk_5fdata_5fservice_2fresources_2eproto = {
  &descriptor_table_proto_2fclarifai_2fbulk_5fdata_5fservice_2fresources_2eproto_initialized, descriptor_table_protodef_proto_2fclarifai_2fbulk_5fdata_5fservice_2fresources_2eproto, "proto/clarifai/bulk_data_service/resources.proto", 699,
  &descriptor_table_proto_2fclarifai_2fbulk_5fdata_5fservice_2fresources_2eproto_once, descriptor_table_proto_2fclarifai_2fbulk_5fdata_5fservice_2fresources_2eproto_sccs, descriptor_table_proto_2fclarifai_2fbulk_5fdata_5fservice_2fresources_2eproto_deps, 2, 3,
  schemas, file_default_instances, TableStruct_proto_2fclarifai_2fbulk_5fdata_5fservice_2fresources_2eproto::offsets,
  file_level_metadata_proto_2fclarifai_2fbulk_5fdata_5fservice_2fresources_2eproto, 2, file_level_enum_descriptors_proto_2fclarifai_2fbulk_5fdata_5fservice_2fresources_2eproto, file_level_service_descriptors_proto_2fclarifai_2fbulk_5fdata_5fservice_2fresources_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2fclarifai_2fbulk_5fdata_5fservice_2fresources_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_2fclarifai_2fbulk_5fdata_5fservice_2fresources_2eproto), true);
namespace clarifai {
namespace bulk_data_service {

// ===================================================================

void PostDataDumpsRequest::InitAsDefaultInstance() {
  ::clarifai::bulk_data_service::_PostDataDumpsRequest_default_instance_._instance.get_mutable()->user_app_id_ = const_cast< ::clarifai::api::UserAppIDSet*>(
      ::clarifai::api::UserAppIDSet::internal_default_instance());
  ::clarifai::bulk_data_service::_PostDataDumpsRequest_default_instance_._instance.get_mutable()->search_ = const_cast< ::clarifai::api::Search*>(
      ::clarifai::api::Search::internal_default_instance());
}
class PostDataDumpsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostDataDumpsRequest* msg);
  static const ::clarifai::api::Search& search(const PostDataDumpsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostDataDumpsRequest::_Internal::user_app_id(const PostDataDumpsRequest* msg) {
  return *msg->user_app_id_;
}
const ::clarifai::api::Search&
PostDataDumpsRequest::_Internal::search(const PostDataDumpsRequest* msg) {
  return *msg->search_;
}
void PostDataDumpsRequest::clear_user_app_id() {
  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostDataDumpsRequest::clear_search() {
  if (GetArenaNoVirtual() == nullptr && search_ != nullptr) {
    delete search_;
  }
  search_ = nullptr;
}
PostDataDumpsRequest::PostDataDumpsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.bulk_data_service.PostDataDumpsRequest)
}
PostDataDumpsRequest::PostDataDumpsRequest(const PostDataDumpsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  if (from.has_search()) {
    search_ = new ::clarifai::api::Search(*from.search_);
  } else {
    search_ = nullptr;
  }
  include_embeddings_ = from.include_embeddings_;
  // @@protoc_insertion_point(copy_constructor:clarifai.bulk_data_service.PostDataDumpsRequest)
}

void PostDataDumpsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostDataDumpsRequest_proto_2fclarifai_2fbulk_5fdata_5fservice_2fresources_2eproto.base);
  ::memset(&user_app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&include_embeddings_) -
      reinterpret_cast<char*>(&user_app_id_)) + sizeof(include_embeddings_));
}

PostDataDumpsRequest::~PostDataDumpsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.bulk_data_service.PostDataDumpsRequest)
  SharedDtor();
}

void PostDataDumpsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete user_app_id_;
  if (this != internal_default_instance()) delete search_;
}

void PostDataDumpsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostDataDumpsRequest& PostDataDumpsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostDataDumpsRequest_proto_2fclarifai_2fbulk_5fdata_5fservice_2fresources_2eproto.base);
  return *internal_default_instance();
}


void PostDataDumpsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.bulk_data_service.PostDataDumpsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && search_ != nullptr) {
    delete search_;
  }
  search_ = nullptr;
  include_embeddings_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PostDataDumpsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Search search = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_search(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool include_embeddings = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          include_embeddings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PostDataDumpsRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:clarifai.bulk_data_service.PostDataDumpsRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_user_app_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .clarifai.api.Search search = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_search()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool include_embeddings = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_embeddings_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clarifai.bulk_data_service.PostDataDumpsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clarifai.bulk_data_service.PostDataDumpsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PostDataDumpsRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clarifai.bulk_data_service.PostDataDumpsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::user_app_id(this), output);
  }

  // .clarifai.api.Search search = 2;
  if (this->has_search()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::search(this), output);
  }

  // bool include_embeddings = 3;
  if (this->include_embeddings() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->include_embeddings(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:clarifai.bulk_data_service.PostDataDumpsRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* PostDataDumpsRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.bulk_data_service.PostDataDumpsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::user_app_id(this), target);
  }

  // .clarifai.api.Search search = 2;
  if (this->has_search()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::search(this), target);
  }

  // bool include_embeddings = 3;
  if (this->include_embeddings() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->include_embeddings(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.bulk_data_service.PostDataDumpsRequest)
  return target;
}

size_t PostDataDumpsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.bulk_data_service.PostDataDumpsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // .clarifai.api.Search search = 2;
  if (this->has_search()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *search_);
  }

  // bool include_embeddings = 3;
  if (this->include_embeddings() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostDataDumpsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.bulk_data_service.PostDataDumpsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostDataDumpsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostDataDumpsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.bulk_data_service.PostDataDumpsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.bulk_data_service.PostDataDumpsRequest)
    MergeFrom(*source);
  }
}

void PostDataDumpsRequest::MergeFrom(const PostDataDumpsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.bulk_data_service.PostDataDumpsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_app_id()) {
    mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from.user_app_id());
  }
  if (from.has_search()) {
    mutable_search()->::clarifai::api::Search::MergeFrom(from.search());
  }
  if (from.include_embeddings() != 0) {
    set_include_embeddings(from.include_embeddings());
  }
}

void PostDataDumpsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.bulk_data_service.PostDataDumpsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostDataDumpsRequest::CopyFrom(const PostDataDumpsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.bulk_data_service.PostDataDumpsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostDataDumpsRequest::IsInitialized() const {
  return true;
}

void PostDataDumpsRequest::InternalSwap(PostDataDumpsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_app_id_, other->user_app_id_);
  swap(search_, other->search_);
  swap(include_embeddings_, other->include_embeddings_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostDataDumpsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DataDump::InitAsDefaultInstance() {
  ::clarifai::bulk_data_service::_DataDump_default_instance_._instance.get_mutable()->request_ = const_cast< ::clarifai::bulk_data_service::PostDataDumpsRequest*>(
      ::clarifai::bulk_data_service::PostDataDumpsRequest::internal_default_instance());
  ::clarifai::bulk_data_service::_DataDump_default_instance_._instance.get_mutable()->created_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::clarifai::bulk_data_service::_DataDump_default_instance_._instance.get_mutable()->modified_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class DataDump::_Internal {
 public:
  static const ::clarifai::bulk_data_service::PostDataDumpsRequest& request(const DataDump* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const DataDump* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& modified_at(const DataDump* msg);
};

const ::clarifai::bulk_data_service::PostDataDumpsRequest&
DataDump::_Internal::request(const DataDump* msg) {
  return *msg->request_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
DataDump::_Internal::created_at(const DataDump* msg) {
  return *msg->created_at_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
DataDump::_Internal::modified_at(const DataDump* msg) {
  return *msg->modified_at_;
}
void DataDump::clear_created_at() {
  if (GetArenaNoVirtual() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
void DataDump::clear_modified_at() {
  if (GetArenaNoVirtual() == nullptr && modified_at_ != nullptr) {
    delete modified_at_;
  }
  modified_at_ = nullptr;
}
DataDump::DataDump()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clarifai.bulk_data_service.DataDump)
}
DataDump::DataDump(const DataDump& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.app_id().empty()) {
    app_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_id_);
  }
  location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.location().empty()) {
    location_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.location_);
  }
  created_by_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.created_by().empty()) {
    created_by_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.created_by_);
  }
  if (from.has_request()) {
    request_ = new ::clarifai::bulk_data_service::PostDataDumpsRequest(*from.request_);
  } else {
    request_ = nullptr;
  }
  if (from.has_created_at()) {
    created_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from.has_modified_at()) {
    modified_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.modified_at_);
  } else {
    modified_at_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:clarifai.bulk_data_service.DataDump)
}

void DataDump::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DataDump_proto_2fclarifai_2fbulk_5fdata_5fservice_2fresources_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  created_by_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&request_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&request_)) + sizeof(status_));
}

DataDump::~DataDump() {
  // @@protoc_insertion_point(destructor:clarifai.bulk_data_service.DataDump)
  SharedDtor();
}

void DataDump::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  location_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  created_by_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete request_;
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete modified_at_;
}

void DataDump::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataDump& DataDump::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataDump_proto_2fclarifai_2fbulk_5fdata_5fservice_2fresources_2eproto.base);
  return *internal_default_instance();
}


void DataDump::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.bulk_data_service.DataDump)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  location_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  created_by_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && request_ != nullptr) {
    delete request_;
  }
  request_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && modified_at_ != nullptr) {
    delete modified_at_;
  }
  modified_at_ = nullptr;
  status_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DataDump::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_id(), ptr, ctx, "clarifai.bulk_data_service.DataDump.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string app_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_app_id(), ptr, ctx, "clarifai.bulk_data_service.DataDump.app_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.bulk_data_service.PostDataDumpsRequest request = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string location = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_location(), ptr, ctx, "clarifai.bulk_data_service.DataDump.location");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.status.StatusCode status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_status(static_cast<::clarifai::api::status::StatusCode>(val));
        } else goto handle_unusual;
        continue;
      // string created_by = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_created_by(), ptr, ctx, "clarifai.bulk_data_service.DataDump.created_by");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_created_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp modified_at = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_modified_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DataDump::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:clarifai.bulk_data_service.DataDump)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "clarifai.bulk_data_service.DataDump.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string app_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_app_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->app_id().data(), static_cast<int>(this->app_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "clarifai.bulk_data_service.DataDump.app_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .clarifai.bulk_data_service.PostDataDumpsRequest request = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string location = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->location().data(), static_cast<int>(this->location().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "clarifai.bulk_data_service.DataDump.location"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .clarifai.api.status.StatusCode status = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::clarifai::api::status::StatusCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string created_by = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_created_by()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->created_by().data(), static_cast<int>(this->created_by().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "clarifai.bulk_data_service.DataDump.created_by"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp created_at = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_created_at()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp modified_at = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_modified_at()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clarifai.bulk_data_service.DataDump)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clarifai.bulk_data_service.DataDump)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DataDump::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clarifai.bulk_data_service.DataDump)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.bulk_data_service.DataDump.id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string app_id = 2;
  if (this->app_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->app_id().data(), static_cast<int>(this->app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.bulk_data_service.DataDump.app_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->app_id(), output);
  }

  // .clarifai.bulk_data_service.PostDataDumpsRequest request = 3;
  if (this->has_request()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::request(this), output);
  }

  // string location = 4;
  if (this->location().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->location().data(), static_cast<int>(this->location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.bulk_data_service.DataDump.location");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->location(), output);
  }

  // .clarifai.api.status.StatusCode status = 5;
  if (this->status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->status(), output);
  }

  // string created_by = 6;
  if (this->created_by().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->created_by().data(), static_cast<int>(this->created_by().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.bulk_data_service.DataDump.created_by");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->created_by(), output);
  }

  // .google.protobuf.Timestamp created_at = 7;
  if (this->has_created_at()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, _Internal::created_at(this), output);
  }

  // .google.protobuf.Timestamp modified_at = 8;
  if (this->has_modified_at()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, _Internal::modified_at(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:clarifai.bulk_data_service.DataDump)
}

::PROTOBUF_NAMESPACE_ID::uint8* DataDump::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.bulk_data_service.DataDump)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.bulk_data_service.DataDump.id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string app_id = 2;
  if (this->app_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->app_id().data(), static_cast<int>(this->app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.bulk_data_service.DataDump.app_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->app_id(), target);
  }

  // .clarifai.bulk_data_service.PostDataDumpsRequest request = 3;
  if (this->has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::request(this), target);
  }

  // string location = 4;
  if (this->location().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->location().data(), static_cast<int>(this->location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.bulk_data_service.DataDump.location");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->location(), target);
  }

  // .clarifai.api.status.StatusCode status = 5;
  if (this->status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->status(), target);
  }

  // string created_by = 6;
  if (this->created_by().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->created_by().data(), static_cast<int>(this->created_by().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.bulk_data_service.DataDump.created_by");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->created_by(), target);
  }

  // .google.protobuf.Timestamp created_at = 7;
  if (this->has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::created_at(this), target);
  }

  // .google.protobuf.Timestamp modified_at = 8;
  if (this->has_modified_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::modified_at(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.bulk_data_service.DataDump)
  return target;
}

size_t DataDump::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.bulk_data_service.DataDump)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string app_id = 2;
  if (this->app_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->app_id());
  }

  // string location = 4;
  if (this->location().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->location());
  }

  // string created_by = 6;
  if (this->created_by().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->created_by());
  }

  // .clarifai.bulk_data_service.PostDataDumpsRequest request = 3;
  if (this->has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *request_);
  }

  // .google.protobuf.Timestamp created_at = 7;
  if (this->has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  // .google.protobuf.Timestamp modified_at = 8;
  if (this->has_modified_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *modified_at_);
  }

  // .clarifai.api.status.StatusCode status = 5;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataDump::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clarifai.bulk_data_service.DataDump)
  GOOGLE_DCHECK_NE(&from, this);
  const DataDump* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataDump>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clarifai.bulk_data_service.DataDump)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clarifai.bulk_data_service.DataDump)
    MergeFrom(*source);
  }
}

void DataDump::MergeFrom(const DataDump& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.bulk_data_service.DataDump)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.app_id().size() > 0) {

    app_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_id_);
  }
  if (from.location().size() > 0) {

    location_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.location_);
  }
  if (from.created_by().size() > 0) {

    created_by_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.created_by_);
  }
  if (from.has_request()) {
    mutable_request()->::clarifai::bulk_data_service::PostDataDumpsRequest::MergeFrom(from.request());
  }
  if (from.has_created_at()) {
    mutable_created_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from.created_at());
  }
  if (from.has_modified_at()) {
    mutable_modified_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from.modified_at());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void DataDump::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clarifai.bulk_data_service.DataDump)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataDump::CopyFrom(const DataDump& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.bulk_data_service.DataDump)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataDump::IsInitialized() const {
  return true;
}

void DataDump::InternalSwap(DataDump* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  app_id_.Swap(&other->app_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  location_.Swap(&other->location_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  created_by_.Swap(&other->created_by_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(request_, other->request_);
  swap(created_at_, other->created_at_);
  swap(modified_at_, other->modified_at_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataDump::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace bulk_data_service
}  // namespace clarifai
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::clarifai::bulk_data_service::PostDataDumpsRequest* Arena::CreateMaybeMessage< ::clarifai::bulk_data_service::PostDataDumpsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::bulk_data_service::PostDataDumpsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::bulk_data_service::DataDump* Arena::CreateMaybeMessage< ::clarifai::bulk_data_service::DataDump >(Arena* arena) {
  return Arena::CreateInternal< ::clarifai::bulk_data_service::DataDump >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
