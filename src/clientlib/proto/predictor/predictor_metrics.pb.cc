// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/predictor/predictor_metrics.proto

#include "proto/predictor/predictor_metrics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_proto_2fpredictor_2fpredictor_5fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BinaryMetrics_proto_2fpredictor_2fpredictor_5fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fpredictor_2fpredictor_5fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConfusionMatrix_proto_2fpredictor_2fpredictor_5fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fpredictor_2fpredictor_5fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConfusionMatrixEntry_proto_2fpredictor_2fpredictor_5fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fpredictor_2fpredictor_5fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CooccurrenceMatrix_proto_2fpredictor_2fpredictor_5fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fpredictor_2fpredictor_5fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CooccurrenceMatrixEntry_proto_2fpredictor_2fpredictor_5fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fdatabatch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DataBatch_proto_2futils_2fdatabatch_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fpredictor_2fpredictor_5fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LabelFreq_proto_2fpredictor_2fpredictor_5fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fpredictor_2fpredictor_5fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_MulticlassMetrics_proto_2fpredictor_2fpredictor_5fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fpredictor_2fpredictor_5fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PositiveLabelDistribution_proto_2fpredictor_2fpredictor_5fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fpredictor_2fpredictor_5fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrecisionRecallCurve_proto_2fpredictor_2fpredictor_5fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fpredictor_2fpredictor_5fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProgressStatus_ConceptCountsEntry_DoNotUse_proto_2fpredictor_2fpredictor_5fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fpredictor_2fpredictor_5fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ROC_proto_2fpredictor_2fpredictor_5fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2frequest_5fmeta_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResponseStatus_proto_2futils_2frequest_5fmeta_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fpredictor_2fpredictor_5fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainStats_proto_2fpredictor_2fpredictor_5fmetrics_2eproto;
class LabelFreqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LabelFreq> _instance;
} _LabelFreq_default_instance_;
class PositiveLabelDistributionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PositiveLabelDistribution> _instance;
} _PositiveLabelDistribution_default_instance_;
class CooccurrenceMatrixEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CooccurrenceMatrixEntry> _instance;
} _CooccurrenceMatrixEntry_default_instance_;
class CooccurrenceMatrixDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CooccurrenceMatrix> _instance;
} _CooccurrenceMatrix_default_instance_;
class ConfusionMatrixEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConfusionMatrixEntry> _instance;
} _ConfusionMatrixEntry_default_instance_;
class ConfusionMatrixDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConfusionMatrix> _instance;
} _ConfusionMatrix_default_instance_;
class ROCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ROC> _instance;
} _ROC_default_instance_;
class PrecisionRecallCurveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrecisionRecallCurve> _instance;
} _PrecisionRecallCurve_default_instance_;
class BinaryMetricsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BinaryMetrics> _instance;
} _BinaryMetrics_default_instance_;
class MulticlassMetricsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MulticlassMetrics> _instance;
} _MulticlassMetrics_default_instance_;
class MulticlassMetricsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MulticlassMetricsResponse> _instance;
} _MulticlassMetricsResponse_default_instance_;
class ProgressStatus_ConceptCountsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProgressStatus_ConceptCountsEntry_DoNotUse> _instance;
} _ProgressStatus_ConceptCountsEntry_DoNotUse_default_instance_;
class ProgressStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProgressStatus> _instance;
} _ProgressStatus_default_instance_;
class TrainStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrainStats> _instance;
} _TrainStats_default_instance_;
static void InitDefaultsscc_info_BinaryMetrics_proto_2fpredictor_2fpredictor_5fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BinaryMetrics_default_instance_;
    new (ptr) ::BinaryMetrics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BinaryMetrics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BinaryMetrics_proto_2fpredictor_2fpredictor_5fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_BinaryMetrics_proto_2fpredictor_2fpredictor_5fmetrics_2eproto}, {
      &scc_info_ROC_proto_2fpredictor_2fpredictor_5fmetrics_2eproto.base,
      &scc_info_PrecisionRecallCurve_proto_2fpredictor_2fpredictor_5fmetrics_2eproto.base,}};

static void InitDefaultsscc_info_ConfusionMatrix_proto_2fpredictor_2fpredictor_5fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConfusionMatrix_default_instance_;
    new (ptr) ::ConfusionMatrix();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConfusionMatrix::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConfusionMatrix_proto_2fpredictor_2fpredictor_5fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ConfusionMatrix_proto_2fpredictor_2fpredictor_5fmetrics_2eproto}, {
      &scc_info_ConfusionMatrixEntry_proto_2fpredictor_2fpredictor_5fmetrics_2eproto.base,}};

static void InitDefaultsscc_info_ConfusionMatrixEntry_proto_2fpredictor_2fpredictor_5fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConfusionMatrixEntry_default_instance_;
    new (ptr) ::ConfusionMatrixEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConfusionMatrixEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConfusionMatrixEntry_proto_2fpredictor_2fpredictor_5fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ConfusionMatrixEntry_proto_2fpredictor_2fpredictor_5fmetrics_2eproto}, {}};

static void InitDefaultsscc_info_CooccurrenceMatrix_proto_2fpredictor_2fpredictor_5fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CooccurrenceMatrix_default_instance_;
    new (ptr) ::CooccurrenceMatrix();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CooccurrenceMatrix::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CooccurrenceMatrix_proto_2fpredictor_2fpredictor_5fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_CooccurrenceMatrix_proto_2fpredictor_2fpredictor_5fmetrics_2eproto}, {
      &scc_info_CooccurrenceMatrixEntry_proto_2fpredictor_2fpredictor_5fmetrics_2eproto.base,}};

static void InitDefaultsscc_info_CooccurrenceMatrixEntry_proto_2fpredictor_2fpredictor_5fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CooccurrenceMatrixEntry_default_instance_;
    new (ptr) ::CooccurrenceMatrixEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CooccurrenceMatrixEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CooccurrenceMatrixEntry_proto_2fpredictor_2fpredictor_5fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CooccurrenceMatrixEntry_proto_2fpredictor_2fpredictor_5fmetrics_2eproto}, {}};

static void InitDefaultsscc_info_LabelFreq_proto_2fpredictor_2fpredictor_5fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LabelFreq_default_instance_;
    new (ptr) ::LabelFreq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LabelFreq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LabelFreq_proto_2fpredictor_2fpredictor_5fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_LabelFreq_proto_2fpredictor_2fpredictor_5fmetrics_2eproto}, {}};

static void InitDefaultsscc_info_MulticlassMetrics_proto_2fpredictor_2fpredictor_5fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MulticlassMetrics_default_instance_;
    new (ptr) ::MulticlassMetrics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MulticlassMetrics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_MulticlassMetrics_proto_2fpredictor_2fpredictor_5fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsscc_info_MulticlassMetrics_proto_2fpredictor_2fpredictor_5fmetrics_2eproto}, {
      &scc_info_ConfusionMatrix_proto_2fpredictor_2fpredictor_5fmetrics_2eproto.base,
      &scc_info_BinaryMetrics_proto_2fpredictor_2fpredictor_5fmetrics_2eproto.base,
      &scc_info_DataBatch_proto_2futils_2fdatabatch_2eproto.base,
      &scc_info_CooccurrenceMatrix_proto_2fpredictor_2fpredictor_5fmetrics_2eproto.base,
      &scc_info_PositiveLabelDistribution_proto_2fpredictor_2fpredictor_5fmetrics_2eproto.base,}};

static void InitDefaultsscc_info_MulticlassMetricsResponse_proto_2fpredictor_2fpredictor_5fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MulticlassMetricsResponse_default_instance_;
    new (ptr) ::MulticlassMetricsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MulticlassMetricsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MulticlassMetricsResponse_proto_2fpredictor_2fpredictor_5fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_MulticlassMetricsResponse_proto_2fpredictor_2fpredictor_5fmetrics_2eproto}, {
      &scc_info_ResponseStatus_proto_2futils_2frequest_5fmeta_2eproto.base,
      &scc_info_MulticlassMetrics_proto_2fpredictor_2fpredictor_5fmetrics_2eproto.base,}};

static void InitDefaultsscc_info_PositiveLabelDistribution_proto_2fpredictor_2fpredictor_5fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PositiveLabelDistribution_default_instance_;
    new (ptr) ::PositiveLabelDistribution();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PositiveLabelDistribution::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PositiveLabelDistribution_proto_2fpredictor_2fpredictor_5fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PositiveLabelDistribution_proto_2fpredictor_2fpredictor_5fmetrics_2eproto}, {
      &scc_info_LabelFreq_proto_2fpredictor_2fpredictor_5fmetrics_2eproto.base,}};

static void InitDefaultsscc_info_PrecisionRecallCurve_proto_2fpredictor_2fpredictor_5fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PrecisionRecallCurve_default_instance_;
    new (ptr) ::PrecisionRecallCurve();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PrecisionRecallCurve::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrecisionRecallCurve_proto_2fpredictor_2fpredictor_5fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PrecisionRecallCurve_proto_2fpredictor_2fpredictor_5fmetrics_2eproto}, {}};

static void InitDefaultsscc_info_ProgressStatus_proto_2fpredictor_2fpredictor_5fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProgressStatus_default_instance_;
    new (ptr) ::ProgressStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProgressStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ProgressStatus_proto_2fpredictor_2fpredictor_5fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_ProgressStatus_proto_2fpredictor_2fpredictor_5fmetrics_2eproto}, {
      &scc_info_ProgressStatus_ConceptCountsEntry_DoNotUse_proto_2fpredictor_2fpredictor_5fmetrics_2eproto.base,
      &scc_info_TrainStats_proto_2fpredictor_2fpredictor_5fmetrics_2eproto.base,}};

static void InitDefaultsscc_info_ProgressStatus_ConceptCountsEntry_DoNotUse_proto_2fpredictor_2fpredictor_5fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProgressStatus_ConceptCountsEntry_DoNotUse_default_instance_;
    new (ptr) ::ProgressStatus_ConceptCountsEntry_DoNotUse();
  }
  ::ProgressStatus_ConceptCountsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProgressStatus_ConceptCountsEntry_DoNotUse_proto_2fpredictor_2fpredictor_5fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ProgressStatus_ConceptCountsEntry_DoNotUse_proto_2fpredictor_2fpredictor_5fmetrics_2eproto}, {}};

static void InitDefaultsscc_info_ROC_proto_2fpredictor_2fpredictor_5fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ROC_default_instance_;
    new (ptr) ::ROC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ROC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ROC_proto_2fpredictor_2fpredictor_5fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ROC_proto_2fpredictor_2fpredictor_5fmetrics_2eproto}, {}};

static void InitDefaultsscc_info_TrainStats_proto_2fpredictor_2fpredictor_5fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TrainStats_default_instance_;
    new (ptr) ::TrainStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TrainStats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainStats_proto_2fpredictor_2fpredictor_5fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TrainStats_proto_2fpredictor_2fpredictor_5fmetrics_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fpredictor_2fpredictor_5fmetrics_2eproto[14];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_proto_2fpredictor_2fpredictor_5fmetrics_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fpredictor_2fpredictor_5fmetrics_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2fpredictor_2fpredictor_5fmetrics_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabelFreq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LabelFreq, aiid_),
  PROTOBUF_FIELD_OFFSET(::LabelFreq, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PositiveLabelDistribution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PositiveLabelDistribution, label_freqs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CooccurrenceMatrixEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CooccurrenceMatrixEntry, row_),
  PROTOBUF_FIELD_OFFSET(::CooccurrenceMatrixEntry, col_),
  PROTOBUF_FIELD_OFFSET(::CooccurrenceMatrixEntry, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CooccurrenceMatrix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CooccurrenceMatrix, matrix_),
  PROTOBUF_FIELD_OFFSET(::CooccurrenceMatrix, aiid_order_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConfusionMatrixEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ConfusionMatrixEntry, pred_aiid_),
  PROTOBUF_FIELD_OFFSET(::ConfusionMatrixEntry, true_aiid_),
  PROTOBUF_FIELD_OFFSET(::ConfusionMatrixEntry, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConfusionMatrix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ConfusionMatrix, matrix_),
  PROTOBUF_FIELD_OFFSET(::ConfusionMatrix, aiid_order_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ROC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ROC, fpr_),
  PROTOBUF_FIELD_OFFSET(::ROC, tpr_),
  PROTOBUF_FIELD_OFFSET(::ROC, thresholds_),
  PROTOBUF_FIELD_OFFSET(::ROC, fpr_per_image_),
  PROTOBUF_FIELD_OFFSET(::ROC, fpr_per_object_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PrecisionRecallCurve, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PrecisionRecallCurve, recall_),
  PROTOBUF_FIELD_OFFSET(::PrecisionRecallCurve, precision_),
  PROTOBUF_FIELD_OFFSET(::PrecisionRecallCurve, thresholds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BinaryMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BinaryMetrics, num_pos_),
  PROTOBUF_FIELD_OFFSET(::BinaryMetrics, num_neg_),
  PROTOBUF_FIELD_OFFSET(::BinaryMetrics, num_examples_),
  PROTOBUF_FIELD_OFFSET(::BinaryMetrics, roc_auc_),
  PROTOBUF_FIELD_OFFSET(::BinaryMetrics, f1_),
  PROTOBUF_FIELD_OFFSET(::BinaryMetrics, matthews_corrcoef_),
  PROTOBUF_FIELD_OFFSET(::BinaryMetrics, brier_score_),
  PROTOBUF_FIELD_OFFSET(::BinaryMetrics, roc_curve_),
  PROTOBUF_FIELD_OFFSET(::BinaryMetrics, aiid_),
  PROTOBUF_FIELD_OFFSET(::BinaryMetrics, precision_),
  PROTOBUF_FIELD_OFFSET(::BinaryMetrics, recall_),
  PROTOBUF_FIELD_OFFSET(::BinaryMetrics, precision_recall_curve_),
  PROTOBUF_FIELD_OFFSET(::BinaryMetrics, avg_precision_),
  PROTOBUF_FIELD_OFFSET(::BinaryMetrics, area_range_name_),
  PROTOBUF_FIELD_OFFSET(::BinaryMetrics, area_min_),
  PROTOBUF_FIELD_OFFSET(::BinaryMetrics, area_max_),
  PROTOBUF_FIELD_OFFSET(::BinaryMetrics, iou_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MulticlassMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MulticlassMetrics, top1_),
  PROTOBUF_FIELD_OFFSET(::MulticlassMetrics, top5_),
  PROTOBUF_FIELD_OFFSET(::MulticlassMetrics, macro_avg_roc_auc_),
  PROTOBUF_FIELD_OFFSET(::MulticlassMetrics, macro_std_roc_auc_),
  PROTOBUF_FIELD_OFFSET(::MulticlassMetrics, macro_avg_f1_),
  PROTOBUF_FIELD_OFFSET(::MulticlassMetrics, macro_std_f1_),
  PROTOBUF_FIELD_OFFSET(::MulticlassMetrics, num_classes_),
  PROTOBUF_FIELD_OFFSET(::MulticlassMetrics, confusion_matrix_),
  PROTOBUF_FIELD_OFFSET(::MulticlassMetrics, tested_on_outside_negatives_),
  PROTOBUF_FIELD_OFFSET(::MulticlassMetrics, binary_metrics_),
  PROTOBUF_FIELD_OFFSET(::MulticlassMetrics, test_ground_truth_),
  PROTOBUF_FIELD_OFFSET(::MulticlassMetrics, test_predictions_),
  PROTOBUF_FIELD_OFFSET(::MulticlassMetrics, cooccurrence_matrix_),
  PROTOBUF_FIELD_OFFSET(::MulticlassMetrics, positive_label_distribution_),
  PROTOBUF_FIELD_OFFSET(::MulticlassMetrics, training_time_),
  PROTOBUF_FIELD_OFFSET(::MulticlassMetrics, macro_avg_precision_),
  PROTOBUF_FIELD_OFFSET(::MulticlassMetrics, macro_avg_recall_),
  PROTOBUF_FIELD_OFFSET(::MulticlassMetrics, k_fold_train_and_apply_time_),
  PROTOBUF_FIELD_OFFSET(::MulticlassMetrics, num_examples_),
  PROTOBUF_FIELD_OFFSET(::MulticlassMetrics, metrics_assembly_time_),
  PROTOBUF_FIELD_OFFSET(::MulticlassMetrics, mean_average_precision_iou_50_),
  PROTOBUF_FIELD_OFFSET(::MulticlassMetrics, mean_average_precision_iou_range_),
  PROTOBUF_FIELD_OFFSET(::MulticlassMetrics, metrics_by_class_),
  PROTOBUF_FIELD_OFFSET(::MulticlassMetrics, metrics_by_area_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MulticlassMetricsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MulticlassMetricsResponse, status_),
  PROTOBUF_FIELD_OFFSET(::MulticlassMetricsResponse, result_),
  PROTOBUF_FIELD_OFFSET(::ProgressStatus_ConceptCountsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProgressStatus_ConceptCountsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProgressStatus_ConceptCountsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ProgressStatus_ConceptCountsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProgressStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProgressStatus, percent_completed_),
  PROTOBUF_FIELD_OFFSET(::ProgressStatus, time_remaining_),
  PROTOBUF_FIELD_OFFSET(::ProgressStatus, total_input_count_),
  PROTOBUF_FIELD_OFFSET(::ProgressStatus, concept_counts_),
  PROTOBUF_FIELD_OFFSET(::ProgressStatus, train_stats_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TrainStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TrainStats, epoch_),
  PROTOBUF_FIELD_OFFSET(::TrainStats, global_step_),
  PROTOBUF_FIELD_OFFSET(::TrainStats, cost_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::LabelFreq)},
  { 7, -1, sizeof(::PositiveLabelDistribution)},
  { 13, -1, sizeof(::CooccurrenceMatrixEntry)},
  { 21, -1, sizeof(::CooccurrenceMatrix)},
  { 28, -1, sizeof(::ConfusionMatrixEntry)},
  { 36, -1, sizeof(::ConfusionMatrix)},
  { 43, -1, sizeof(::ROC)},
  { 53, -1, sizeof(::PrecisionRecallCurve)},
  { 61, -1, sizeof(::BinaryMetrics)},
  { 83, -1, sizeof(::MulticlassMetrics)},
  { 112, -1, sizeof(::MulticlassMetricsResponse)},
  { 119, 126, sizeof(::ProgressStatus_ConceptCountsEntry_DoNotUse)},
  { 128, -1, sizeof(::ProgressStatus)},
  { 138, -1, sizeof(::TrainStats)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LabelFreq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PositiveLabelDistribution_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CooccurrenceMatrixEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CooccurrenceMatrix_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConfusionMatrixEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConfusionMatrix_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ROC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PrecisionRecallCurve_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BinaryMetrics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MulticlassMetrics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MulticlassMetricsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProgressStatus_ConceptCountsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProgressStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TrainStats_default_instance_),
};

const char descriptor_table_protodef_proto_2fpredictor_2fpredictor_5fmetrics_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'proto/predictor/predictor_metrics.prot"
  "o\032\033proto/utils/databatch.proto\032\036proto/ut"
  "ils/request_meta.proto\"(\n\tLabelFreq\022\014\n\004a"
  "iid\030\001 \001(\t\022\r\n\005count\030\002 \001(\005\"<\n\031PositiveLabe"
  "lDistribution\022\037\n\013label_freqs\030\001 \003(\0132\n.Lab"
  "elFreq\"B\n\027CooccurrenceMatrixEntry\022\013\n\003row"
  "\030\001 \001(\t\022\013\n\003col\030\002 \001(\t\022\r\n\005count\030\003 \001(\005\"R\n\022Co"
  "occurrenceMatrix\022(\n\006matrix\030\001 \003(\0132\030.Coocc"
  "urrenceMatrixEntry\022\022\n\naiid_order\030\002 \003(\t\"K"
  "\n\024ConfusionMatrixEntry\022\021\n\tpred_aiid\030\001 \001("
  "\t\022\021\n\ttrue_aiid\030\002 \001(\t\022\r\n\005value\030\003 \001(\002\"L\n\017C"
  "onfusionMatrix\022%\n\006matrix\030\001 \003(\0132\025.Confusi"
  "onMatrixEntry\022\022\n\naiid_order\030\002 \003(\t\"v\n\003ROC"
  "\022\017\n\003fpr\030\001 \003(\002B\002\020\001\022\017\n\003tpr\030\002 \003(\002B\002\020\001\022\026\n\nth"
  "resholds\030\003 \003(\002B\002\020\001\022\031\n\rfpr_per_image\030\004 \003("
  "\002B\002\020\001\022\032\n\016fpr_per_object\030\005 \003(\002B\002\020\001\"Y\n\024Pre"
  "cisionRecallCurve\022\022\n\006recall\030\001 \003(\002B\002\020\001\022\025\n"
  "\tprecision\030\002 \003(\002B\002\020\001\022\026\n\nthresholds\030\003 \003(\002"
  "B\002\020\001\"\366\002\n\rBinaryMetrics\022\017\n\007num_pos\030\001 \001(\005\022"
  "\017\n\007num_neg\030\002 \001(\005\022\024\n\014num_examples\030\003 \001(\005\022\017"
  "\n\007roc_auc\030\004 \001(\002\022\n\n\002f1\030\005 \001(\002\022\031\n\021matthews_"
  "corrcoef\030\006 \001(\002\022\023\n\013brier_score\030\007 \001(\002\022\027\n\tr"
  "oc_curve\030\010 \001(\0132\004.ROC\022\014\n\004aiid\030\t \001(\t\022\021\n\tpr"
  "ecision\030\n \001(\002\022\016\n\006recall\030\013 \001(\002\0225\n\026precisi"
  "on_recall_curve\030\014 \001(\0132\025.PrecisionRecallC"
  "urve\022\025\n\ravg_precision\030\r \001(\002\022\027\n\017area_rang"
  "e_name\030\016 \001(\t\022\020\n\010area_min\030\017 \001(\001\022\020\n\010area_m"
  "ax\030\020 \001(\001\022\013\n\003iou\030\021 \001(\002\"\263\006\n\021MulticlassMetr"
  "ics\022\020\n\004top1\030\001 \001(\002B\002\030\001\022\020\n\004top5\030\002 \001(\002B\002\030\001\022"
  "\031\n\021macro_avg_roc_auc\030\003 \001(\002\022\031\n\021macro_std_"
  "roc_auc\030\004 \001(\002\022\024\n\014macro_avg_f1\030\005 \001(\002\022\024\n\014m"
  "acro_std_f1\030\006 \001(\002\022\023\n\013num_classes\030\007 \001(\005\022*"
  "\n\020confusion_matrix\030\010 \001(\0132\020.ConfusionMatr"
  "ix\022#\n\033tested_on_outside_negatives\030\t \001(\010\022"
  "&\n\016binary_metrics\030\n \003(\0132\016.BinaryMetrics\022"
  "%\n\021test_ground_truth\030\013 \001(\0132\n.DataBatch\022$"
  "\n\020test_predictions\030\014 \001(\0132\n.DataBatch\0220\n\023"
  "cooccurrence_matrix\030\r \001(\0132\023.Cooccurrence"
  "Matrix\022\?\n\033positive_label_distribution\030\016 "
  "\001(\0132\032.PositiveLabelDistribution\022\025\n\rtrain"
  "ing_time\030\017 \001(\002\022\033\n\023macro_avg_precision\030\020 "
  "\001(\002\022\030\n\020macro_avg_recall\030\021 \001(\002\022#\n\033k_fold_"
  "train_and_apply_time\030\022 \001(\002\022\024\n\014num_exampl"
  "es\030\023 \001(\002\022\035\n\025metrics_assembly_time\030\024 \001(\002\022"
  "%\n\035mean_average_precision_iou_50\030\025 \001(\002\022("
  "\n mean_average_precision_iou_range\030\026 \001(\002"
  "\022(\n\020metrics_by_class\030\027 \003(\0132\016.BinaryMetri"
  "cs\022\'\n\017metrics_by_area\030\030 \003(\0132\016.BinaryMetr"
  "ics\"`\n\031MulticlassMetricsResponse\022\037\n\006stat"
  "us\030\001 \001(\0132\017.ResponseStatus\022\"\n\006result\030\002 \001("
  "\0132\022.MulticlassMetrics\"\362\001\n\016ProgressStatus"
  "\022\031\n\021percent_completed\030\001 \001(\r\022\026\n\016time_rema"
  "ining\030\002 \001(\r\022\031\n\021total_input_count\030\003 \001(\r\022:"
  "\n\016concept_counts\030\004 \003(\0132\".ProgressStatus."
  "ConceptCountsEntry\022 \n\013train_stats\030\005 \003(\0132"
  "\013.TrainStats\0324\n\022ConceptCountsEntry\022\013\n\003ke"
  "y\030\001 \001(\t\022\r\n\005value\030\002 \001(\r:\0028\001\">\n\nTrainStats"
  "\022\r\n\005epoch\030\001 \001(\r\022\023\n\013global_step\030\002 \001(\r\022\014\n\004"
  "cost\030\003 \001(\002B\013Z\tpredictorb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2fpredictor_2fpredictor_5fmetrics_2eproto_deps[2] = {
  &::descriptor_table_proto_2futils_2fdatabatch_2eproto,
  &::descriptor_table_proto_2futils_2frequest_5fmeta_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_2fpredictor_2fpredictor_5fmetrics_2eproto_sccs[14] = {
  &scc_info_BinaryMetrics_proto_2fpredictor_2fpredictor_5fmetrics_2eproto.base,
  &scc_info_ConfusionMatrix_proto_2fpredictor_2fpredictor_5fmetrics_2eproto.base,
  &scc_info_ConfusionMatrixEntry_proto_2fpredictor_2fpredictor_5fmetrics_2eproto.base,
  &scc_info_CooccurrenceMatrix_proto_2fpredictor_2fpredictor_5fmetrics_2eproto.base,
  &scc_info_CooccurrenceMatrixEntry_proto_2fpredictor_2fpredictor_5fmetrics_2eproto.base,
  &scc_info_LabelFreq_proto_2fpredictor_2fpredictor_5fmetrics_2eproto.base,
  &scc_info_MulticlassMetrics_proto_2fpredictor_2fpredictor_5fmetrics_2eproto.base,
  &scc_info_MulticlassMetricsResponse_proto_2fpredictor_2fpredictor_5fmetrics_2eproto.base,
  &scc_info_PositiveLabelDistribution_proto_2fpredictor_2fpredictor_5fmetrics_2eproto.base,
  &scc_info_PrecisionRecallCurve_proto_2fpredictor_2fpredictor_5fmetrics_2eproto.base,
  &scc_info_ProgressStatus_proto_2fpredictor_2fpredictor_5fmetrics_2eproto.base,
  &scc_info_ProgressStatus_ConceptCountsEntry_DoNotUse_proto_2fpredictor_2fpredictor_5fmetrics_2eproto.base,
  &scc_info_ROC_proto_2fpredictor_2fpredictor_5fmetrics_2eproto.base,
  &scc_info_TrainStats_proto_2fpredictor_2fpredictor_5fmetrics_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2fpredictor_2fpredictor_5fmetrics_2eproto_once;
static bool descriptor_table_proto_2fpredictor_2fpredictor_5fmetrics_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fpredictor_2fpredictor_5fmetrics_2eproto = {
  &descriptor_table_proto_2fpredictor_2fpredictor_5fmetrics_2eproto_initialized, descriptor_table_protodef_proto_2fpredictor_2fpredictor_5fmetrics_2eproto, "proto/predictor/predictor_metrics.proto", 2351,
  &descriptor_table_proto_2fpredictor_2fpredictor_5fmetrics_2eproto_once, descriptor_table_proto_2fpredictor_2fpredictor_5fmetrics_2eproto_sccs, descriptor_table_proto_2fpredictor_2fpredictor_5fmetrics_2eproto_deps, 14, 2,
  schemas, file_default_instances, TableStruct_proto_2fpredictor_2fpredictor_5fmetrics_2eproto::offsets,
  file_level_metadata_proto_2fpredictor_2fpredictor_5fmetrics_2eproto, 14, file_level_enum_descriptors_proto_2fpredictor_2fpredictor_5fmetrics_2eproto, file_level_service_descriptors_proto_2fpredictor_2fpredictor_5fmetrics_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2fpredictor_2fpredictor_5fmetrics_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_2fpredictor_2fpredictor_5fmetrics_2eproto), true);

// ===================================================================

void LabelFreq::InitAsDefaultInstance() {
}
class LabelFreq::_Internal {
 public:
};

LabelFreq::LabelFreq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LabelFreq)
}
LabelFreq::LabelFreq(const LabelFreq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  aiid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.aiid().empty()) {
    aiid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.aiid_);
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:LabelFreq)
}

void LabelFreq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LabelFreq_proto_2fpredictor_2fpredictor_5fmetrics_2eproto.base);
  aiid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  count_ = 0;
}

LabelFreq::~LabelFreq() {
  // @@protoc_insertion_point(destructor:LabelFreq)
  SharedDtor();
}

void LabelFreq::SharedDtor() {
  aiid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LabelFreq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LabelFreq& LabelFreq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LabelFreq_proto_2fpredictor_2fpredictor_5fmetrics_2eproto.base);
  return *internal_default_instance();
}


void LabelFreq::Clear() {
// @@protoc_insertion_point(message_clear_start:LabelFreq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  aiid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  count_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LabelFreq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string aiid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_aiid(), ptr, ctx, "LabelFreq.aiid");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LabelFreq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:LabelFreq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string aiid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_aiid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->aiid().data(), static_cast<int>(this->aiid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "LabelFreq.aiid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 count = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LabelFreq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LabelFreq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LabelFreq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LabelFreq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string aiid = 1;
  if (this->aiid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->aiid().data(), static_cast<int>(this->aiid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LabelFreq.aiid");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->aiid(), output);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LabelFreq)
}

::PROTOBUF_NAMESPACE_ID::uint8* LabelFreq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabelFreq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string aiid = 1;
  if (this->aiid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->aiid().data(), static_cast<int>(this->aiid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LabelFreq.aiid");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->aiid(), target);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabelFreq)
  return target;
}

size_t LabelFreq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabelFreq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string aiid = 1;
  if (this->aiid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->aiid());
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->count());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LabelFreq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LabelFreq)
  GOOGLE_DCHECK_NE(&from, this);
  const LabelFreq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LabelFreq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LabelFreq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LabelFreq)
    MergeFrom(*source);
  }
}

void LabelFreq::MergeFrom(const LabelFreq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabelFreq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.aiid().size() > 0) {

    aiid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.aiid_);
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void LabelFreq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LabelFreq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelFreq::CopyFrom(const LabelFreq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabelFreq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelFreq::IsInitialized() const {
  return true;
}

void LabelFreq::InternalSwap(LabelFreq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  aiid_.Swap(&other->aiid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LabelFreq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PositiveLabelDistribution::InitAsDefaultInstance() {
}
class PositiveLabelDistribution::_Internal {
 public:
};

PositiveLabelDistribution::PositiveLabelDistribution()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PositiveLabelDistribution)
}
PositiveLabelDistribution::PositiveLabelDistribution(const PositiveLabelDistribution& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      label_freqs_(from.label_freqs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PositiveLabelDistribution)
}

void PositiveLabelDistribution::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PositiveLabelDistribution_proto_2fpredictor_2fpredictor_5fmetrics_2eproto.base);
}

PositiveLabelDistribution::~PositiveLabelDistribution() {
  // @@protoc_insertion_point(destructor:PositiveLabelDistribution)
  SharedDtor();
}

void PositiveLabelDistribution::SharedDtor() {
}

void PositiveLabelDistribution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PositiveLabelDistribution& PositiveLabelDistribution::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PositiveLabelDistribution_proto_2fpredictor_2fpredictor_5fmetrics_2eproto.base);
  return *internal_default_instance();
}


void PositiveLabelDistribution::Clear() {
// @@protoc_insertion_point(message_clear_start:PositiveLabelDistribution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  label_freqs_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PositiveLabelDistribution::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .LabelFreq label_freqs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_label_freqs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PositiveLabelDistribution::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:PositiveLabelDistribution)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .LabelFreq label_freqs = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_label_freqs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PositiveLabelDistribution)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PositiveLabelDistribution)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PositiveLabelDistribution::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PositiveLabelDistribution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .LabelFreq label_freqs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->label_freqs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->label_freqs(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PositiveLabelDistribution)
}

::PROTOBUF_NAMESPACE_ID::uint8* PositiveLabelDistribution::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PositiveLabelDistribution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .LabelFreq label_freqs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->label_freqs_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->label_freqs(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PositiveLabelDistribution)
  return target;
}

size_t PositiveLabelDistribution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PositiveLabelDistribution)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .LabelFreq label_freqs = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->label_freqs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->label_freqs(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositiveLabelDistribution::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PositiveLabelDistribution)
  GOOGLE_DCHECK_NE(&from, this);
  const PositiveLabelDistribution* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PositiveLabelDistribution>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PositiveLabelDistribution)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PositiveLabelDistribution)
    MergeFrom(*source);
  }
}

void PositiveLabelDistribution::MergeFrom(const PositiveLabelDistribution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PositiveLabelDistribution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  label_freqs_.MergeFrom(from.label_freqs_);
}

void PositiveLabelDistribution::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PositiveLabelDistribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositiveLabelDistribution::CopyFrom(const PositiveLabelDistribution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PositiveLabelDistribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositiveLabelDistribution::IsInitialized() const {
  return true;
}

void PositiveLabelDistribution::InternalSwap(PositiveLabelDistribution* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&label_freqs_)->InternalSwap(CastToBase(&other->label_freqs_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PositiveLabelDistribution::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CooccurrenceMatrixEntry::InitAsDefaultInstance() {
}
class CooccurrenceMatrixEntry::_Internal {
 public:
};

CooccurrenceMatrixEntry::CooccurrenceMatrixEntry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CooccurrenceMatrixEntry)
}
CooccurrenceMatrixEntry::CooccurrenceMatrixEntry(const CooccurrenceMatrixEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  row_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.row().empty()) {
    row_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.row_);
  }
  col_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.col().empty()) {
    col_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.col_);
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:CooccurrenceMatrixEntry)
}

void CooccurrenceMatrixEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CooccurrenceMatrixEntry_proto_2fpredictor_2fpredictor_5fmetrics_2eproto.base);
  row_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  col_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  count_ = 0;
}

CooccurrenceMatrixEntry::~CooccurrenceMatrixEntry() {
  // @@protoc_insertion_point(destructor:CooccurrenceMatrixEntry)
  SharedDtor();
}

void CooccurrenceMatrixEntry::SharedDtor() {
  row_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  col_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CooccurrenceMatrixEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CooccurrenceMatrixEntry& CooccurrenceMatrixEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CooccurrenceMatrixEntry_proto_2fpredictor_2fpredictor_5fmetrics_2eproto.base);
  return *internal_default_instance();
}


void CooccurrenceMatrixEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:CooccurrenceMatrixEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  row_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  col_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  count_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CooccurrenceMatrixEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string row = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_row(), ptr, ctx, "CooccurrenceMatrixEntry.row");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string col = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_col(), ptr, ctx, "CooccurrenceMatrixEntry.col");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CooccurrenceMatrixEntry::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:CooccurrenceMatrixEntry)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string row = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_row()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->row().data(), static_cast<int>(this->row().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "CooccurrenceMatrixEntry.row"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string col = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_col()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->col().data(), static_cast<int>(this->col().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "CooccurrenceMatrixEntry.col"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 count = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CooccurrenceMatrixEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CooccurrenceMatrixEntry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CooccurrenceMatrixEntry::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CooccurrenceMatrixEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string row = 1;
  if (this->row().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->row().data(), static_cast<int>(this->row().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CooccurrenceMatrixEntry.row");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->row(), output);
  }

  // string col = 2;
  if (this->col().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->col().data(), static_cast<int>(this->col().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CooccurrenceMatrixEntry.col");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->col(), output);
  }

  // int32 count = 3;
  if (this->count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CooccurrenceMatrixEntry)
}

::PROTOBUF_NAMESPACE_ID::uint8* CooccurrenceMatrixEntry::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CooccurrenceMatrixEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string row = 1;
  if (this->row().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->row().data(), static_cast<int>(this->row().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CooccurrenceMatrixEntry.row");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->row(), target);
  }

  // string col = 2;
  if (this->col().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->col().data(), static_cast<int>(this->col().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CooccurrenceMatrixEntry.col");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->col(), target);
  }

  // int32 count = 3;
  if (this->count() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CooccurrenceMatrixEntry)
  return target;
}

size_t CooccurrenceMatrixEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CooccurrenceMatrixEntry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string row = 1;
  if (this->row().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->row());
  }

  // string col = 2;
  if (this->col().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->col());
  }

  // int32 count = 3;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->count());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CooccurrenceMatrixEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CooccurrenceMatrixEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CooccurrenceMatrixEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CooccurrenceMatrixEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CooccurrenceMatrixEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CooccurrenceMatrixEntry)
    MergeFrom(*source);
  }
}

void CooccurrenceMatrixEntry::MergeFrom(const CooccurrenceMatrixEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CooccurrenceMatrixEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.row().size() > 0) {

    row_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.row_);
  }
  if (from.col().size() > 0) {

    col_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.col_);
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void CooccurrenceMatrixEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CooccurrenceMatrixEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CooccurrenceMatrixEntry::CopyFrom(const CooccurrenceMatrixEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CooccurrenceMatrixEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CooccurrenceMatrixEntry::IsInitialized() const {
  return true;
}

void CooccurrenceMatrixEntry::InternalSwap(CooccurrenceMatrixEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  row_.Swap(&other->row_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  col_.Swap(&other->col_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CooccurrenceMatrixEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CooccurrenceMatrix::InitAsDefaultInstance() {
}
class CooccurrenceMatrix::_Internal {
 public:
};

CooccurrenceMatrix::CooccurrenceMatrix()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CooccurrenceMatrix)
}
CooccurrenceMatrix::CooccurrenceMatrix(const CooccurrenceMatrix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      matrix_(from.matrix_),
      aiid_order_(from.aiid_order_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CooccurrenceMatrix)
}

void CooccurrenceMatrix::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CooccurrenceMatrix_proto_2fpredictor_2fpredictor_5fmetrics_2eproto.base);
}

CooccurrenceMatrix::~CooccurrenceMatrix() {
  // @@protoc_insertion_point(destructor:CooccurrenceMatrix)
  SharedDtor();
}

void CooccurrenceMatrix::SharedDtor() {
}

void CooccurrenceMatrix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CooccurrenceMatrix& CooccurrenceMatrix::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CooccurrenceMatrix_proto_2fpredictor_2fpredictor_5fmetrics_2eproto.base);
  return *internal_default_instance();
}


void CooccurrenceMatrix::Clear() {
// @@protoc_insertion_point(message_clear_start:CooccurrenceMatrix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matrix_.Clear();
  aiid_order_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CooccurrenceMatrix::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CooccurrenceMatrixEntry matrix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_matrix(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated string aiid_order = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_aiid_order(), ptr, ctx, "CooccurrenceMatrix.aiid_order");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CooccurrenceMatrix::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:CooccurrenceMatrix)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CooccurrenceMatrixEntry matrix = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_matrix()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string aiid_order = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_aiid_order()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->aiid_order(this->aiid_order_size() - 1).data(),
            static_cast<int>(this->aiid_order(this->aiid_order_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "CooccurrenceMatrix.aiid_order"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CooccurrenceMatrix)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CooccurrenceMatrix)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CooccurrenceMatrix::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CooccurrenceMatrix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CooccurrenceMatrixEntry matrix = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->matrix_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->matrix(static_cast<int>(i)),
      output);
  }

  // repeated string aiid_order = 2;
  for (int i = 0, n = this->aiid_order_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->aiid_order(i).data(), static_cast<int>(this->aiid_order(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CooccurrenceMatrix.aiid_order");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      2, this->aiid_order(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CooccurrenceMatrix)
}

::PROTOBUF_NAMESPACE_ID::uint8* CooccurrenceMatrix::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CooccurrenceMatrix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CooccurrenceMatrixEntry matrix = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->matrix_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->matrix(static_cast<int>(i)), target);
  }

  // repeated string aiid_order = 2;
  for (int i = 0, n = this->aiid_order_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->aiid_order(i).data(), static_cast<int>(this->aiid_order(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CooccurrenceMatrix.aiid_order");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(2, this->aiid_order(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CooccurrenceMatrix)
  return target;
}

size_t CooccurrenceMatrix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CooccurrenceMatrix)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CooccurrenceMatrixEntry matrix = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->matrix_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->matrix(static_cast<int>(i)));
    }
  }

  // repeated string aiid_order = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->aiid_order_size());
  for (int i = 0, n = this->aiid_order_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->aiid_order(i));
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CooccurrenceMatrix::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CooccurrenceMatrix)
  GOOGLE_DCHECK_NE(&from, this);
  const CooccurrenceMatrix* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CooccurrenceMatrix>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CooccurrenceMatrix)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CooccurrenceMatrix)
    MergeFrom(*source);
  }
}

void CooccurrenceMatrix::MergeFrom(const CooccurrenceMatrix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CooccurrenceMatrix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matrix_.MergeFrom(from.matrix_);
  aiid_order_.MergeFrom(from.aiid_order_);
}

void CooccurrenceMatrix::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CooccurrenceMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CooccurrenceMatrix::CopyFrom(const CooccurrenceMatrix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CooccurrenceMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CooccurrenceMatrix::IsInitialized() const {
  return true;
}

void CooccurrenceMatrix::InternalSwap(CooccurrenceMatrix* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&matrix_)->InternalSwap(CastToBase(&other->matrix_));
  aiid_order_.InternalSwap(CastToBase(&other->aiid_order_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CooccurrenceMatrix::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConfusionMatrixEntry::InitAsDefaultInstance() {
}
class ConfusionMatrixEntry::_Internal {
 public:
};

ConfusionMatrixEntry::ConfusionMatrixEntry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfusionMatrixEntry)
}
ConfusionMatrixEntry::ConfusionMatrixEntry(const ConfusionMatrixEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pred_aiid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.pred_aiid().empty()) {
    pred_aiid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pred_aiid_);
  }
  true_aiid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.true_aiid().empty()) {
    true_aiid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.true_aiid_);
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:ConfusionMatrixEntry)
}

void ConfusionMatrixEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConfusionMatrixEntry_proto_2fpredictor_2fpredictor_5fmetrics_2eproto.base);
  pred_aiid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  true_aiid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_ = 0;
}

ConfusionMatrixEntry::~ConfusionMatrixEntry() {
  // @@protoc_insertion_point(destructor:ConfusionMatrixEntry)
  SharedDtor();
}

void ConfusionMatrixEntry::SharedDtor() {
  pred_aiid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  true_aiid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConfusionMatrixEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConfusionMatrixEntry& ConfusionMatrixEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConfusionMatrixEntry_proto_2fpredictor_2fpredictor_5fmetrics_2eproto.base);
  return *internal_default_instance();
}


void ConfusionMatrixEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:ConfusionMatrixEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pred_aiid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  true_aiid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConfusionMatrixEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string pred_aiid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_pred_aiid(), ptr, ctx, "ConfusionMatrixEntry.pred_aiid");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string true_aiid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_true_aiid(), ptr, ctx, "ConfusionMatrixEntry.true_aiid");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConfusionMatrixEntry::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfusionMatrixEntry)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string pred_aiid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_pred_aiid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->pred_aiid().data(), static_cast<int>(this->pred_aiid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ConfusionMatrixEntry.pred_aiid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string true_aiid = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_true_aiid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->true_aiid().data(), static_cast<int>(this->true_aiid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ConfusionMatrixEntry.true_aiid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float value = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfusionMatrixEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfusionMatrixEntry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConfusionMatrixEntry::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfusionMatrixEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pred_aiid = 1;
  if (this->pred_aiid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->pred_aiid().data(), static_cast<int>(this->pred_aiid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConfusionMatrixEntry.pred_aiid");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->pred_aiid(), output);
  }

  // string true_aiid = 2;
  if (this->true_aiid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->true_aiid().data(), static_cast<int>(this->true_aiid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConfusionMatrixEntry.true_aiid");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->true_aiid(), output);
  }

  // float value = 3;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfusionMatrixEntry)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConfusionMatrixEntry::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfusionMatrixEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pred_aiid = 1;
  if (this->pred_aiid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->pred_aiid().data(), static_cast<int>(this->pred_aiid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConfusionMatrixEntry.pred_aiid");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->pred_aiid(), target);
  }

  // string true_aiid = 2;
  if (this->true_aiid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->true_aiid().data(), static_cast<int>(this->true_aiid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConfusionMatrixEntry.true_aiid");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->true_aiid(), target);
  }

  // float value = 3;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfusionMatrixEntry)
  return target;
}

size_t ConfusionMatrixEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConfusionMatrixEntry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pred_aiid = 1;
  if (this->pred_aiid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->pred_aiid());
  }

  // string true_aiid = 2;
  if (this->true_aiid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->true_aiid());
  }

  // float value = 3;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfusionMatrixEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConfusionMatrixEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfusionMatrixEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConfusionMatrixEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConfusionMatrixEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConfusionMatrixEntry)
    MergeFrom(*source);
  }
}

void ConfusionMatrixEntry::MergeFrom(const ConfusionMatrixEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConfusionMatrixEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pred_aiid().size() > 0) {

    pred_aiid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pred_aiid_);
  }
  if (from.true_aiid().size() > 0) {

    true_aiid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.true_aiid_);
  }
  if (!(from.value() <= 0 && from.value() >= 0)) {
    set_value(from.value());
  }
}

void ConfusionMatrixEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConfusionMatrixEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfusionMatrixEntry::CopyFrom(const ConfusionMatrixEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConfusionMatrixEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfusionMatrixEntry::IsInitialized() const {
  return true;
}

void ConfusionMatrixEntry::InternalSwap(ConfusionMatrixEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pred_aiid_.Swap(&other->pred_aiid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  true_aiid_.Swap(&other->true_aiid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfusionMatrixEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConfusionMatrix::InitAsDefaultInstance() {
}
class ConfusionMatrix::_Internal {
 public:
};

ConfusionMatrix::ConfusionMatrix()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfusionMatrix)
}
ConfusionMatrix::ConfusionMatrix(const ConfusionMatrix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      matrix_(from.matrix_),
      aiid_order_(from.aiid_order_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ConfusionMatrix)
}

void ConfusionMatrix::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConfusionMatrix_proto_2fpredictor_2fpredictor_5fmetrics_2eproto.base);
}

ConfusionMatrix::~ConfusionMatrix() {
  // @@protoc_insertion_point(destructor:ConfusionMatrix)
  SharedDtor();
}

void ConfusionMatrix::SharedDtor() {
}

void ConfusionMatrix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConfusionMatrix& ConfusionMatrix::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConfusionMatrix_proto_2fpredictor_2fpredictor_5fmetrics_2eproto.base);
  return *internal_default_instance();
}


void ConfusionMatrix::Clear() {
// @@protoc_insertion_point(message_clear_start:ConfusionMatrix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matrix_.Clear();
  aiid_order_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConfusionMatrix::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ConfusionMatrixEntry matrix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_matrix(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated string aiid_order = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_aiid_order(), ptr, ctx, "ConfusionMatrix.aiid_order");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConfusionMatrix::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfusionMatrix)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ConfusionMatrixEntry matrix = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_matrix()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string aiid_order = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_aiid_order()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->aiid_order(this->aiid_order_size() - 1).data(),
            static_cast<int>(this->aiid_order(this->aiid_order_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ConfusionMatrix.aiid_order"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfusionMatrix)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfusionMatrix)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConfusionMatrix::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfusionMatrix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ConfusionMatrixEntry matrix = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->matrix_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->matrix(static_cast<int>(i)),
      output);
  }

  // repeated string aiid_order = 2;
  for (int i = 0, n = this->aiid_order_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->aiid_order(i).data(), static_cast<int>(this->aiid_order(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConfusionMatrix.aiid_order");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      2, this->aiid_order(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfusionMatrix)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConfusionMatrix::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfusionMatrix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ConfusionMatrixEntry matrix = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->matrix_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->matrix(static_cast<int>(i)), target);
  }

  // repeated string aiid_order = 2;
  for (int i = 0, n = this->aiid_order_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->aiid_order(i).data(), static_cast<int>(this->aiid_order(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConfusionMatrix.aiid_order");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(2, this->aiid_order(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfusionMatrix)
  return target;
}

size_t ConfusionMatrix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConfusionMatrix)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ConfusionMatrixEntry matrix = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->matrix_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->matrix(static_cast<int>(i)));
    }
  }

  // repeated string aiid_order = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->aiid_order_size());
  for (int i = 0, n = this->aiid_order_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->aiid_order(i));
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfusionMatrix::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConfusionMatrix)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfusionMatrix* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConfusionMatrix>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConfusionMatrix)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConfusionMatrix)
    MergeFrom(*source);
  }
}

void ConfusionMatrix::MergeFrom(const ConfusionMatrix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConfusionMatrix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matrix_.MergeFrom(from.matrix_);
  aiid_order_.MergeFrom(from.aiid_order_);
}

void ConfusionMatrix::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConfusionMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfusionMatrix::CopyFrom(const ConfusionMatrix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConfusionMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfusionMatrix::IsInitialized() const {
  return true;
}

void ConfusionMatrix::InternalSwap(ConfusionMatrix* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&matrix_)->InternalSwap(CastToBase(&other->matrix_));
  aiid_order_.InternalSwap(CastToBase(&other->aiid_order_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfusionMatrix::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ROC::InitAsDefaultInstance() {
}
class ROC::_Internal {
 public:
};

ROC::ROC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ROC)
}
ROC::ROC(const ROC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      fpr_(from.fpr_),
      tpr_(from.tpr_),
      thresholds_(from.thresholds_),
      fpr_per_image_(from.fpr_per_image_),
      fpr_per_object_(from.fpr_per_object_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ROC)
}

void ROC::SharedCtor() {
}

ROC::~ROC() {
  // @@protoc_insertion_point(destructor:ROC)
  SharedDtor();
}

void ROC::SharedDtor() {
}

void ROC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ROC& ROC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ROC_proto_2fpredictor_2fpredictor_5fmetrics_2eproto.base);
  return *internal_default_instance();
}


void ROC::Clear() {
// @@protoc_insertion_point(message_clear_start:ROC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fpr_.Clear();
  tpr_.Clear();
  thresholds_.Clear();
  fpr_per_image_.Clear();
  fpr_per_object_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ROC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float fpr = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_fpr(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_fpr(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float tpr = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_tpr(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          add_tpr(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float thresholds = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_thresholds(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          add_thresholds(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float fpr_per_image = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_fpr_per_image(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          add_fpr_per_image(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float fpr_per_object = 5 [packed = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_fpr_per_object(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45) {
          add_fpr_per_object(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ROC::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ROC)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float fpr = 1 [packed = true];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_fpr())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_fpr())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float tpr = 2 [packed = true];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_tpr())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_tpr())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float thresholds = 3 [packed = true];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_thresholds())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_thresholds())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float fpr_per_image = 4 [packed = true];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_fpr_per_image())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34u, input, this->mutable_fpr_per_image())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float fpr_per_object = 5 [packed = true];
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_fpr_per_object())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 42u, input, this->mutable_fpr_per_object())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ROC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ROC)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ROC::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ROC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float fpr = 1 [packed = true];
  if (this->fpr_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_fpr_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->fpr().data(), this->fpr_size(), output);
  }

  // repeated float tpr = 2 [packed = true];
  if (this->tpr_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_tpr_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->tpr().data(), this->tpr_size(), output);
  }

  // repeated float thresholds = 3 [packed = true];
  if (this->thresholds_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_thresholds_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->thresholds().data(), this->thresholds_size(), output);
  }

  // repeated float fpr_per_image = 4 [packed = true];
  if (this->fpr_per_image_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(4, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_fpr_per_image_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->fpr_per_image().data(), this->fpr_per_image_size(), output);
  }

  // repeated float fpr_per_object = 5 [packed = true];
  if (this->fpr_per_object_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(5, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_fpr_per_object_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->fpr_per_object().data(), this->fpr_per_object_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ROC)
}

::PROTOBUF_NAMESPACE_ID::uint8* ROC::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ROC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float fpr = 1 [packed = true];
  if (this->fpr_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _fpr_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->fpr_, target);
  }

  // repeated float tpr = 2 [packed = true];
  if (this->tpr_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _tpr_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->tpr_, target);
  }

  // repeated float thresholds = 3 [packed = true];
  if (this->thresholds_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _thresholds_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->thresholds_, target);
  }

  // repeated float fpr_per_image = 4 [packed = true];
  if (this->fpr_per_image_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      4,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _fpr_per_image_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->fpr_per_image_, target);
  }

  // repeated float fpr_per_object = 5 [packed = true];
  if (this->fpr_per_object_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      5,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _fpr_per_object_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->fpr_per_object_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ROC)
  return target;
}

size_t ROC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ROC)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float fpr = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->fpr_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _fpr_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float tpr = 2 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->tpr_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _tpr_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float thresholds = 3 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->thresholds_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _thresholds_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float fpr_per_image = 4 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->fpr_per_image_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _fpr_per_image_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float fpr_per_object = 5 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->fpr_per_object_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _fpr_per_object_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ROC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ROC)
  GOOGLE_DCHECK_NE(&from, this);
  const ROC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ROC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ROC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ROC)
    MergeFrom(*source);
  }
}

void ROC::MergeFrom(const ROC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ROC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fpr_.MergeFrom(from.fpr_);
  tpr_.MergeFrom(from.tpr_);
  thresholds_.MergeFrom(from.thresholds_);
  fpr_per_image_.MergeFrom(from.fpr_per_image_);
  fpr_per_object_.MergeFrom(from.fpr_per_object_);
}

void ROC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ROC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ROC::CopyFrom(const ROC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ROC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ROC::IsInitialized() const {
  return true;
}

void ROC::InternalSwap(ROC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  fpr_.InternalSwap(&other->fpr_);
  tpr_.InternalSwap(&other->tpr_);
  thresholds_.InternalSwap(&other->thresholds_);
  fpr_per_image_.InternalSwap(&other->fpr_per_image_);
  fpr_per_object_.InternalSwap(&other->fpr_per_object_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ROC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PrecisionRecallCurve::InitAsDefaultInstance() {
}
class PrecisionRecallCurve::_Internal {
 public:
};

PrecisionRecallCurve::PrecisionRecallCurve()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PrecisionRecallCurve)
}
PrecisionRecallCurve::PrecisionRecallCurve(const PrecisionRecallCurve& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      recall_(from.recall_),
      precision_(from.precision_),
      thresholds_(from.thresholds_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PrecisionRecallCurve)
}

void PrecisionRecallCurve::SharedCtor() {
}

PrecisionRecallCurve::~PrecisionRecallCurve() {
  // @@protoc_insertion_point(destructor:PrecisionRecallCurve)
  SharedDtor();
}

void PrecisionRecallCurve::SharedDtor() {
}

void PrecisionRecallCurve::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrecisionRecallCurve& PrecisionRecallCurve::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrecisionRecallCurve_proto_2fpredictor_2fpredictor_5fmetrics_2eproto.base);
  return *internal_default_instance();
}


void PrecisionRecallCurve::Clear() {
// @@protoc_insertion_point(message_clear_start:PrecisionRecallCurve)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recall_.Clear();
  precision_.Clear();
  thresholds_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PrecisionRecallCurve::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float recall = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_recall(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_recall(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float precision = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_precision(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          add_precision(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float thresholds = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_thresholds(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          add_thresholds(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PrecisionRecallCurve::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:PrecisionRecallCurve)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float recall = 1 [packed = true];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_recall())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_recall())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float precision = 2 [packed = true];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_precision())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_precision())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float thresholds = 3 [packed = true];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_thresholds())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_thresholds())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PrecisionRecallCurve)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PrecisionRecallCurve)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PrecisionRecallCurve::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PrecisionRecallCurve)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float recall = 1 [packed = true];
  if (this->recall_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_recall_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->recall().data(), this->recall_size(), output);
  }

  // repeated float precision = 2 [packed = true];
  if (this->precision_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_precision_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->precision().data(), this->precision_size(), output);
  }

  // repeated float thresholds = 3 [packed = true];
  if (this->thresholds_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_thresholds_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->thresholds().data(), this->thresholds_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PrecisionRecallCurve)
}

::PROTOBUF_NAMESPACE_ID::uint8* PrecisionRecallCurve::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PrecisionRecallCurve)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float recall = 1 [packed = true];
  if (this->recall_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _recall_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->recall_, target);
  }

  // repeated float precision = 2 [packed = true];
  if (this->precision_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _precision_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->precision_, target);
  }

  // repeated float thresholds = 3 [packed = true];
  if (this->thresholds_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _thresholds_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->thresholds_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PrecisionRecallCurve)
  return target;
}

size_t PrecisionRecallCurve::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PrecisionRecallCurve)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float recall = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->recall_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _recall_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float precision = 2 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->precision_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _precision_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float thresholds = 3 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->thresholds_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _thresholds_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrecisionRecallCurve::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PrecisionRecallCurve)
  GOOGLE_DCHECK_NE(&from, this);
  const PrecisionRecallCurve* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrecisionRecallCurve>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PrecisionRecallCurve)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PrecisionRecallCurve)
    MergeFrom(*source);
  }
}

void PrecisionRecallCurve::MergeFrom(const PrecisionRecallCurve& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PrecisionRecallCurve)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  recall_.MergeFrom(from.recall_);
  precision_.MergeFrom(from.precision_);
  thresholds_.MergeFrom(from.thresholds_);
}

void PrecisionRecallCurve::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PrecisionRecallCurve)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrecisionRecallCurve::CopyFrom(const PrecisionRecallCurve& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PrecisionRecallCurve)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrecisionRecallCurve::IsInitialized() const {
  return true;
}

void PrecisionRecallCurve::InternalSwap(PrecisionRecallCurve* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  recall_.InternalSwap(&other->recall_);
  precision_.InternalSwap(&other->precision_);
  thresholds_.InternalSwap(&other->thresholds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrecisionRecallCurve::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BinaryMetrics::InitAsDefaultInstance() {
  ::_BinaryMetrics_default_instance_._instance.get_mutable()->roc_curve_ = const_cast< ::ROC*>(
      ::ROC::internal_default_instance());
  ::_BinaryMetrics_default_instance_._instance.get_mutable()->precision_recall_curve_ = const_cast< ::PrecisionRecallCurve*>(
      ::PrecisionRecallCurve::internal_default_instance());
}
class BinaryMetrics::_Internal {
 public:
  static const ::ROC& roc_curve(const BinaryMetrics* msg);
  static const ::PrecisionRecallCurve& precision_recall_curve(const BinaryMetrics* msg);
};

const ::ROC&
BinaryMetrics::_Internal::roc_curve(const BinaryMetrics* msg) {
  return *msg->roc_curve_;
}
const ::PrecisionRecallCurve&
BinaryMetrics::_Internal::precision_recall_curve(const BinaryMetrics* msg) {
  return *msg->precision_recall_curve_;
}
BinaryMetrics::BinaryMetrics()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BinaryMetrics)
}
BinaryMetrics::BinaryMetrics(const BinaryMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  aiid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.aiid().empty()) {
    aiid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.aiid_);
  }
  area_range_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.area_range_name().empty()) {
    area_range_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.area_range_name_);
  }
  if (from.has_roc_curve()) {
    roc_curve_ = new ::ROC(*from.roc_curve_);
  } else {
    roc_curve_ = nullptr;
  }
  if (from.has_precision_recall_curve()) {
    precision_recall_curve_ = new ::PrecisionRecallCurve(*from.precision_recall_curve_);
  } else {
    precision_recall_curve_ = nullptr;
  }
  ::memcpy(&num_pos_, &from.num_pos_,
    static_cast<size_t>(reinterpret_cast<char*>(&iou_) -
    reinterpret_cast<char*>(&num_pos_)) + sizeof(iou_));
  // @@protoc_insertion_point(copy_constructor:BinaryMetrics)
}

void BinaryMetrics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BinaryMetrics_proto_2fpredictor_2fpredictor_5fmetrics_2eproto.base);
  aiid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  area_range_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&roc_curve_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iou_) -
      reinterpret_cast<char*>(&roc_curve_)) + sizeof(iou_));
}

BinaryMetrics::~BinaryMetrics() {
  // @@protoc_insertion_point(destructor:BinaryMetrics)
  SharedDtor();
}

void BinaryMetrics::SharedDtor() {
  aiid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  area_range_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete roc_curve_;
  if (this != internal_default_instance()) delete precision_recall_curve_;
}

void BinaryMetrics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BinaryMetrics& BinaryMetrics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BinaryMetrics_proto_2fpredictor_2fpredictor_5fmetrics_2eproto.base);
  return *internal_default_instance();
}


void BinaryMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:BinaryMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  aiid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  area_range_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && roc_curve_ != nullptr) {
    delete roc_curve_;
  }
  roc_curve_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && precision_recall_curve_ != nullptr) {
    delete precision_recall_curve_;
  }
  precision_recall_curve_ = nullptr;
  ::memset(&num_pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iou_) -
      reinterpret_cast<char*>(&num_pos_)) + sizeof(iou_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BinaryMetrics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 num_pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          num_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_neg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_neg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_examples = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_examples_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float roc_auc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          roc_auc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float f1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float matthews_corrcoef = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          matthews_corrcoef_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float brier_score = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          brier_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .ROC roc_curve = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_roc_curve(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string aiid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_aiid(), ptr, ctx, "BinaryMetrics.aiid");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float precision = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          precision_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float recall = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          recall_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .PrecisionRecallCurve precision_recall_curve = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_precision_recall_curve(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float avg_precision = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          avg_precision_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string area_range_name = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_area_range_name(), ptr, ctx, "BinaryMetrics.area_range_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double area_min = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          area_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double area_max = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          area_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // float iou = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          iou_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BinaryMetrics::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:BinaryMetrics)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 num_pos = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_pos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_neg = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_neg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_examples = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_examples_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float roc_auc = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roc_auc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float f1 = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &f1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float matthews_corrcoef = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &matthews_corrcoef_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float brier_score = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (61 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &brier_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ROC roc_curve = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_roc_curve()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string aiid = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_aiid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->aiid().data(), static_cast<int>(this->aiid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "BinaryMetrics.aiid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float precision = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (85 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &precision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float recall = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (93 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &recall_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PrecisionRecallCurve precision_recall_curve = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_precision_recall_curve()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float avg_precision = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (109 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &avg_precision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string area_range_name = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_area_range_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->area_range_name().data(), static_cast<int>(this->area_range_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "BinaryMetrics.area_range_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double area_min = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (121 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &area_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double area_max = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (129 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &area_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float iou = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (141 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &iou_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BinaryMetrics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BinaryMetrics)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BinaryMetrics::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BinaryMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num_pos = 1;
  if (this->num_pos() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->num_pos(), output);
  }

  // int32 num_neg = 2;
  if (this->num_neg() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->num_neg(), output);
  }

  // int32 num_examples = 3;
  if (this->num_examples() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->num_examples(), output);
  }

  // float roc_auc = 4;
  if (!(this->roc_auc() <= 0 && this->roc_auc() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->roc_auc(), output);
  }

  // float f1 = 5;
  if (!(this->f1() <= 0 && this->f1() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->f1(), output);
  }

  // float matthews_corrcoef = 6;
  if (!(this->matthews_corrcoef() <= 0 && this->matthews_corrcoef() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->matthews_corrcoef(), output);
  }

  // float brier_score = 7;
  if (!(this->brier_score() <= 0 && this->brier_score() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(7, this->brier_score(), output);
  }

  // .ROC roc_curve = 8;
  if (this->has_roc_curve()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, _Internal::roc_curve(this), output);
  }

  // string aiid = 9;
  if (this->aiid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->aiid().data(), static_cast<int>(this->aiid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BinaryMetrics.aiid");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->aiid(), output);
  }

  // float precision = 10;
  if (!(this->precision() <= 0 && this->precision() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(10, this->precision(), output);
  }

  // float recall = 11;
  if (!(this->recall() <= 0 && this->recall() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(11, this->recall(), output);
  }

  // .PrecisionRecallCurve precision_recall_curve = 12;
  if (this->has_precision_recall_curve()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, _Internal::precision_recall_curve(this), output);
  }

  // float avg_precision = 13;
  if (!(this->avg_precision() <= 0 && this->avg_precision() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(13, this->avg_precision(), output);
  }

  // string area_range_name = 14;
  if (this->area_range_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->area_range_name().data(), static_cast<int>(this->area_range_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BinaryMetrics.area_range_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->area_range_name(), output);
  }

  // double area_min = 15;
  if (!(this->area_min() <= 0 && this->area_min() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(15, this->area_min(), output);
  }

  // double area_max = 16;
  if (!(this->area_max() <= 0 && this->area_max() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(16, this->area_max(), output);
  }

  // float iou = 17;
  if (!(this->iou() <= 0 && this->iou() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(17, this->iou(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BinaryMetrics)
}

::PROTOBUF_NAMESPACE_ID::uint8* BinaryMetrics::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BinaryMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num_pos = 1;
  if (this->num_pos() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->num_pos(), target);
  }

  // int32 num_neg = 2;
  if (this->num_neg() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->num_neg(), target);
  }

  // int32 num_examples = 3;
  if (this->num_examples() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->num_examples(), target);
  }

  // float roc_auc = 4;
  if (!(this->roc_auc() <= 0 && this->roc_auc() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->roc_auc(), target);
  }

  // float f1 = 5;
  if (!(this->f1() <= 0 && this->f1() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->f1(), target);
  }

  // float matthews_corrcoef = 6;
  if (!(this->matthews_corrcoef() <= 0 && this->matthews_corrcoef() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->matthews_corrcoef(), target);
  }

  // float brier_score = 7;
  if (!(this->brier_score() <= 0 && this->brier_score() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->brier_score(), target);
  }

  // .ROC roc_curve = 8;
  if (this->has_roc_curve()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::roc_curve(this), target);
  }

  // string aiid = 9;
  if (this->aiid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->aiid().data(), static_cast<int>(this->aiid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BinaryMetrics.aiid");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        9, this->aiid(), target);
  }

  // float precision = 10;
  if (!(this->precision() <= 0 && this->precision() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->precision(), target);
  }

  // float recall = 11;
  if (!(this->recall() <= 0 && this->recall() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->recall(), target);
  }

  // .PrecisionRecallCurve precision_recall_curve = 12;
  if (this->has_precision_recall_curve()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, _Internal::precision_recall_curve(this), target);
  }

  // float avg_precision = 13;
  if (!(this->avg_precision() <= 0 && this->avg_precision() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->avg_precision(), target);
  }

  // string area_range_name = 14;
  if (this->area_range_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->area_range_name().data(), static_cast<int>(this->area_range_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BinaryMetrics.area_range_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        14, this->area_range_name(), target);
  }

  // double area_min = 15;
  if (!(this->area_min() <= 0 && this->area_min() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->area_min(), target);
  }

  // double area_max = 16;
  if (!(this->area_max() <= 0 && this->area_max() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->area_max(), target);
  }

  // float iou = 17;
  if (!(this->iou() <= 0 && this->iou() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(17, this->iou(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BinaryMetrics)
  return target;
}

size_t BinaryMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BinaryMetrics)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string aiid = 9;
  if (this->aiid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->aiid());
  }

  // string area_range_name = 14;
  if (this->area_range_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->area_range_name());
  }

  // .ROC roc_curve = 8;
  if (this->has_roc_curve()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *roc_curve_);
  }

  // .PrecisionRecallCurve precision_recall_curve = 12;
  if (this->has_precision_recall_curve()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *precision_recall_curve_);
  }

  // int32 num_pos = 1;
  if (this->num_pos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->num_pos());
  }

  // int32 num_neg = 2;
  if (this->num_neg() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->num_neg());
  }

  // int32 num_examples = 3;
  if (this->num_examples() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->num_examples());
  }

  // float roc_auc = 4;
  if (!(this->roc_auc() <= 0 && this->roc_auc() >= 0)) {
    total_size += 1 + 4;
  }

  // float f1 = 5;
  if (!(this->f1() <= 0 && this->f1() >= 0)) {
    total_size += 1 + 4;
  }

  // float matthews_corrcoef = 6;
  if (!(this->matthews_corrcoef() <= 0 && this->matthews_corrcoef() >= 0)) {
    total_size += 1 + 4;
  }

  // float brier_score = 7;
  if (!(this->brier_score() <= 0 && this->brier_score() >= 0)) {
    total_size += 1 + 4;
  }

  // float precision = 10;
  if (!(this->precision() <= 0 && this->precision() >= 0)) {
    total_size += 1 + 4;
  }

  // float recall = 11;
  if (!(this->recall() <= 0 && this->recall() >= 0)) {
    total_size += 1 + 4;
  }

  // float avg_precision = 13;
  if (!(this->avg_precision() <= 0 && this->avg_precision() >= 0)) {
    total_size += 1 + 4;
  }

  // double area_min = 15;
  if (!(this->area_min() <= 0 && this->area_min() >= 0)) {
    total_size += 1 + 8;
  }

  // double area_max = 16;
  if (!(this->area_max() <= 0 && this->area_max() >= 0)) {
    total_size += 2 + 8;
  }

  // float iou = 17;
  if (!(this->iou() <= 0 && this->iou() >= 0)) {
    total_size += 2 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinaryMetrics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BinaryMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  const BinaryMetrics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BinaryMetrics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BinaryMetrics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BinaryMetrics)
    MergeFrom(*source);
  }
}

void BinaryMetrics::MergeFrom(const BinaryMetrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BinaryMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.aiid().size() > 0) {

    aiid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.aiid_);
  }
  if (from.area_range_name().size() > 0) {

    area_range_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.area_range_name_);
  }
  if (from.has_roc_curve()) {
    mutable_roc_curve()->::ROC::MergeFrom(from.roc_curve());
  }
  if (from.has_precision_recall_curve()) {
    mutable_precision_recall_curve()->::PrecisionRecallCurve::MergeFrom(from.precision_recall_curve());
  }
  if (from.num_pos() != 0) {
    set_num_pos(from.num_pos());
  }
  if (from.num_neg() != 0) {
    set_num_neg(from.num_neg());
  }
  if (from.num_examples() != 0) {
    set_num_examples(from.num_examples());
  }
  if (!(from.roc_auc() <= 0 && from.roc_auc() >= 0)) {
    set_roc_auc(from.roc_auc());
  }
  if (!(from.f1() <= 0 && from.f1() >= 0)) {
    set_f1(from.f1());
  }
  if (!(from.matthews_corrcoef() <= 0 && from.matthews_corrcoef() >= 0)) {
    set_matthews_corrcoef(from.matthews_corrcoef());
  }
  if (!(from.brier_score() <= 0 && from.brier_score() >= 0)) {
    set_brier_score(from.brier_score());
  }
  if (!(from.precision() <= 0 && from.precision() >= 0)) {
    set_precision(from.precision());
  }
  if (!(from.recall() <= 0 && from.recall() >= 0)) {
    set_recall(from.recall());
  }
  if (!(from.avg_precision() <= 0 && from.avg_precision() >= 0)) {
    set_avg_precision(from.avg_precision());
  }
  if (!(from.area_min() <= 0 && from.area_min() >= 0)) {
    set_area_min(from.area_min());
  }
  if (!(from.area_max() <= 0 && from.area_max() >= 0)) {
    set_area_max(from.area_max());
  }
  if (!(from.iou() <= 0 && from.iou() >= 0)) {
    set_iou(from.iou());
  }
}

void BinaryMetrics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BinaryMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinaryMetrics::CopyFrom(const BinaryMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BinaryMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryMetrics::IsInitialized() const {
  return true;
}

void BinaryMetrics::InternalSwap(BinaryMetrics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  aiid_.Swap(&other->aiid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  area_range_name_.Swap(&other->area_range_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(roc_curve_, other->roc_curve_);
  swap(precision_recall_curve_, other->precision_recall_curve_);
  swap(num_pos_, other->num_pos_);
  swap(num_neg_, other->num_neg_);
  swap(num_examples_, other->num_examples_);
  swap(roc_auc_, other->roc_auc_);
  swap(f1_, other->f1_);
  swap(matthews_corrcoef_, other->matthews_corrcoef_);
  swap(brier_score_, other->brier_score_);
  swap(precision_, other->precision_);
  swap(recall_, other->recall_);
  swap(avg_precision_, other->avg_precision_);
  swap(area_min_, other->area_min_);
  swap(area_max_, other->area_max_);
  swap(iou_, other->iou_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BinaryMetrics::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MulticlassMetrics::InitAsDefaultInstance() {
  ::_MulticlassMetrics_default_instance_._instance.get_mutable()->confusion_matrix_ = const_cast< ::ConfusionMatrix*>(
      ::ConfusionMatrix::internal_default_instance());
  ::_MulticlassMetrics_default_instance_._instance.get_mutable()->test_ground_truth_ = const_cast< ::DataBatch*>(
      ::DataBatch::internal_default_instance());
  ::_MulticlassMetrics_default_instance_._instance.get_mutable()->test_predictions_ = const_cast< ::DataBatch*>(
      ::DataBatch::internal_default_instance());
  ::_MulticlassMetrics_default_instance_._instance.get_mutable()->cooccurrence_matrix_ = const_cast< ::CooccurrenceMatrix*>(
      ::CooccurrenceMatrix::internal_default_instance());
  ::_MulticlassMetrics_default_instance_._instance.get_mutable()->positive_label_distribution_ = const_cast< ::PositiveLabelDistribution*>(
      ::PositiveLabelDistribution::internal_default_instance());
}
class MulticlassMetrics::_Internal {
 public:
  static const ::ConfusionMatrix& confusion_matrix(const MulticlassMetrics* msg);
  static const ::DataBatch& test_ground_truth(const MulticlassMetrics* msg);
  static const ::DataBatch& test_predictions(const MulticlassMetrics* msg);
  static const ::CooccurrenceMatrix& cooccurrence_matrix(const MulticlassMetrics* msg);
  static const ::PositiveLabelDistribution& positive_label_distribution(const MulticlassMetrics* msg);
};

const ::ConfusionMatrix&
MulticlassMetrics::_Internal::confusion_matrix(const MulticlassMetrics* msg) {
  return *msg->confusion_matrix_;
}
const ::DataBatch&
MulticlassMetrics::_Internal::test_ground_truth(const MulticlassMetrics* msg) {
  return *msg->test_ground_truth_;
}
const ::DataBatch&
MulticlassMetrics::_Internal::test_predictions(const MulticlassMetrics* msg) {
  return *msg->test_predictions_;
}
const ::CooccurrenceMatrix&
MulticlassMetrics::_Internal::cooccurrence_matrix(const MulticlassMetrics* msg) {
  return *msg->cooccurrence_matrix_;
}
const ::PositiveLabelDistribution&
MulticlassMetrics::_Internal::positive_label_distribution(const MulticlassMetrics* msg) {
  return *msg->positive_label_distribution_;
}
void MulticlassMetrics::clear_test_ground_truth() {
  if (GetArenaNoVirtual() == nullptr && test_ground_truth_ != nullptr) {
    delete test_ground_truth_;
  }
  test_ground_truth_ = nullptr;
}
void MulticlassMetrics::clear_test_predictions() {
  if (GetArenaNoVirtual() == nullptr && test_predictions_ != nullptr) {
    delete test_predictions_;
  }
  test_predictions_ = nullptr;
}
MulticlassMetrics::MulticlassMetrics()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MulticlassMetrics)
}
MulticlassMetrics::MulticlassMetrics(const MulticlassMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      binary_metrics_(from.binary_metrics_),
      metrics_by_class_(from.metrics_by_class_),
      metrics_by_area_(from.metrics_by_area_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_confusion_matrix()) {
    confusion_matrix_ = new ::ConfusionMatrix(*from.confusion_matrix_);
  } else {
    confusion_matrix_ = nullptr;
  }
  if (from.has_test_ground_truth()) {
    test_ground_truth_ = new ::DataBatch(*from.test_ground_truth_);
  } else {
    test_ground_truth_ = nullptr;
  }
  if (from.has_test_predictions()) {
    test_predictions_ = new ::DataBatch(*from.test_predictions_);
  } else {
    test_predictions_ = nullptr;
  }
  if (from.has_cooccurrence_matrix()) {
    cooccurrence_matrix_ = new ::CooccurrenceMatrix(*from.cooccurrence_matrix_);
  } else {
    cooccurrence_matrix_ = nullptr;
  }
  if (from.has_positive_label_distribution()) {
    positive_label_distribution_ = new ::PositiveLabelDistribution(*from.positive_label_distribution_);
  } else {
    positive_label_distribution_ = nullptr;
  }
  ::memcpy(&top1_, &from.top1_,
    static_cast<size_t>(reinterpret_cast<char*>(&mean_average_precision_iou_range_) -
    reinterpret_cast<char*>(&top1_)) + sizeof(mean_average_precision_iou_range_));
  // @@protoc_insertion_point(copy_constructor:MulticlassMetrics)
}

void MulticlassMetrics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MulticlassMetrics_proto_2fpredictor_2fpredictor_5fmetrics_2eproto.base);
  ::memset(&confusion_matrix_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mean_average_precision_iou_range_) -
      reinterpret_cast<char*>(&confusion_matrix_)) + sizeof(mean_average_precision_iou_range_));
}

MulticlassMetrics::~MulticlassMetrics() {
  // @@protoc_insertion_point(destructor:MulticlassMetrics)
  SharedDtor();
}

void MulticlassMetrics::SharedDtor() {
  if (this != internal_default_instance()) delete confusion_matrix_;
  if (this != internal_default_instance()) delete test_ground_truth_;
  if (this != internal_default_instance()) delete test_predictions_;
  if (this != internal_default_instance()) delete cooccurrence_matrix_;
  if (this != internal_default_instance()) delete positive_label_distribution_;
}

void MulticlassMetrics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MulticlassMetrics& MulticlassMetrics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MulticlassMetrics_proto_2fpredictor_2fpredictor_5fmetrics_2eproto.base);
  return *internal_default_instance();
}


void MulticlassMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:MulticlassMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  binary_metrics_.Clear();
  metrics_by_class_.Clear();
  metrics_by_area_.Clear();
  if (GetArenaNoVirtual() == nullptr && confusion_matrix_ != nullptr) {
    delete confusion_matrix_;
  }
  confusion_matrix_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && test_ground_truth_ != nullptr) {
    delete test_ground_truth_;
  }
  test_ground_truth_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && test_predictions_ != nullptr) {
    delete test_predictions_;
  }
  test_predictions_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && cooccurrence_matrix_ != nullptr) {
    delete cooccurrence_matrix_;
  }
  cooccurrence_matrix_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && positive_label_distribution_ != nullptr) {
    delete positive_label_distribution_;
  }
  positive_label_distribution_ = nullptr;
  ::memset(&top1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mean_average_precision_iou_range_) -
      reinterpret_cast<char*>(&top1_)) + sizeof(mean_average_precision_iou_range_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MulticlassMetrics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float top1 = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          top1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float top5 = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          top5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float macro_avg_roc_auc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          macro_avg_roc_auc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float macro_std_roc_auc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          macro_std_roc_auc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float macro_avg_f1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          macro_avg_f1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float macro_std_f1 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          macro_std_f1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 num_classes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          num_classes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ConfusionMatrix confusion_matrix = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_confusion_matrix(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool tested_on_outside_negatives = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          tested_on_outside_negatives_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .BinaryMetrics binary_metrics = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_binary_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 82);
        } else goto handle_unusual;
        continue;
      // .DataBatch test_ground_truth = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_test_ground_truth(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DataBatch test_predictions = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_test_predictions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CooccurrenceMatrix cooccurrence_matrix = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_cooccurrence_matrix(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PositiveLabelDistribution positive_label_distribution = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_positive_label_distribution(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float training_time = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          training_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float macro_avg_precision = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          macro_avg_precision_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float macro_avg_recall = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          macro_avg_recall_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float k_fold_train_and_apply_time = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          k_fold_train_and_apply_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float num_examples = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          num_examples_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float metrics_assembly_time = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          metrics_assembly_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float mean_average_precision_iou_50 = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          mean_average_precision_iou_50_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float mean_average_precision_iou_range = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          mean_average_precision_iou_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .BinaryMetrics metrics_by_class = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_metrics_by_class(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 442);
        } else goto handle_unusual;
        continue;
      // repeated .BinaryMetrics metrics_by_area = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_metrics_by_area(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 450);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MulticlassMetrics::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:MulticlassMetrics)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float top1 = 1 [deprecated = true];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &top1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float top5 = 2 [deprecated = true];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &top5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float macro_avg_roc_auc = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &macro_avg_roc_auc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float macro_std_roc_auc = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &macro_std_roc_auc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float macro_avg_f1 = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &macro_avg_f1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float macro_std_f1 = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &macro_std_f1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_classes = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_classes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ConfusionMatrix confusion_matrix = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_confusion_matrix()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool tested_on_outside_negatives = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tested_on_outside_negatives_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .BinaryMetrics binary_metrics = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_binary_metrics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DataBatch test_ground_truth = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_test_ground_truth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DataBatch test_predictions = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_test_predictions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CooccurrenceMatrix cooccurrence_matrix = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cooccurrence_matrix()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PositiveLabelDistribution positive_label_distribution = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_positive_label_distribution()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float training_time = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (125 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &training_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float macro_avg_precision = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (133 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &macro_avg_precision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float macro_avg_recall = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (141 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &macro_avg_recall_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float k_fold_train_and_apply_time = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (149 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &k_fold_train_and_apply_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float num_examples = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (157 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &num_examples_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float metrics_assembly_time = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (165 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &metrics_assembly_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float mean_average_precision_iou_50 = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (173 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mean_average_precision_iou_50_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float mean_average_precision_iou_range = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (181 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mean_average_precision_iou_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .BinaryMetrics metrics_by_class = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (186 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_metrics_by_class()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .BinaryMetrics metrics_by_area = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (194 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_metrics_by_area()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MulticlassMetrics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MulticlassMetrics)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MulticlassMetrics::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MulticlassMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float top1 = 1 [deprecated = true];
  if (!(this->top1() <= 0 && this->top1() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->top1(), output);
  }

  // float top5 = 2 [deprecated = true];
  if (!(this->top5() <= 0 && this->top5() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->top5(), output);
  }

  // float macro_avg_roc_auc = 3;
  if (!(this->macro_avg_roc_auc() <= 0 && this->macro_avg_roc_auc() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->macro_avg_roc_auc(), output);
  }

  // float macro_std_roc_auc = 4;
  if (!(this->macro_std_roc_auc() <= 0 && this->macro_std_roc_auc() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->macro_std_roc_auc(), output);
  }

  // float macro_avg_f1 = 5;
  if (!(this->macro_avg_f1() <= 0 && this->macro_avg_f1() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->macro_avg_f1(), output);
  }

  // float macro_std_f1 = 6;
  if (!(this->macro_std_f1() <= 0 && this->macro_std_f1() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->macro_std_f1(), output);
  }

  // int32 num_classes = 7;
  if (this->num_classes() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->num_classes(), output);
  }

  // .ConfusionMatrix confusion_matrix = 8;
  if (this->has_confusion_matrix()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, _Internal::confusion_matrix(this), output);
  }

  // bool tested_on_outside_negatives = 9;
  if (this->tested_on_outside_negatives() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(9, this->tested_on_outside_negatives(), output);
  }

  // repeated .BinaryMetrics binary_metrics = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->binary_metrics_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->binary_metrics(static_cast<int>(i)),
      output);
  }

  // .DataBatch test_ground_truth = 11;
  if (this->has_test_ground_truth()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, _Internal::test_ground_truth(this), output);
  }

  // .DataBatch test_predictions = 12;
  if (this->has_test_predictions()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, _Internal::test_predictions(this), output);
  }

  // .CooccurrenceMatrix cooccurrence_matrix = 13;
  if (this->has_cooccurrence_matrix()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, _Internal::cooccurrence_matrix(this), output);
  }

  // .PositiveLabelDistribution positive_label_distribution = 14;
  if (this->has_positive_label_distribution()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, _Internal::positive_label_distribution(this), output);
  }

  // float training_time = 15;
  if (!(this->training_time() <= 0 && this->training_time() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(15, this->training_time(), output);
  }

  // float macro_avg_precision = 16;
  if (!(this->macro_avg_precision() <= 0 && this->macro_avg_precision() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(16, this->macro_avg_precision(), output);
  }

  // float macro_avg_recall = 17;
  if (!(this->macro_avg_recall() <= 0 && this->macro_avg_recall() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(17, this->macro_avg_recall(), output);
  }

  // float k_fold_train_and_apply_time = 18;
  if (!(this->k_fold_train_and_apply_time() <= 0 && this->k_fold_train_and_apply_time() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(18, this->k_fold_train_and_apply_time(), output);
  }

  // float num_examples = 19;
  if (!(this->num_examples() <= 0 && this->num_examples() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(19, this->num_examples(), output);
  }

  // float metrics_assembly_time = 20;
  if (!(this->metrics_assembly_time() <= 0 && this->metrics_assembly_time() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(20, this->metrics_assembly_time(), output);
  }

  // float mean_average_precision_iou_50 = 21;
  if (!(this->mean_average_precision_iou_50() <= 0 && this->mean_average_precision_iou_50() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(21, this->mean_average_precision_iou_50(), output);
  }

  // float mean_average_precision_iou_range = 22;
  if (!(this->mean_average_precision_iou_range() <= 0 && this->mean_average_precision_iou_range() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(22, this->mean_average_precision_iou_range(), output);
  }

  // repeated .BinaryMetrics metrics_by_class = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->metrics_by_class_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      23,
      this->metrics_by_class(static_cast<int>(i)),
      output);
  }

  // repeated .BinaryMetrics metrics_by_area = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->metrics_by_area_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      24,
      this->metrics_by_area(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MulticlassMetrics)
}

::PROTOBUF_NAMESPACE_ID::uint8* MulticlassMetrics::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MulticlassMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float top1 = 1 [deprecated = true];
  if (!(this->top1() <= 0 && this->top1() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->top1(), target);
  }

  // float top5 = 2 [deprecated = true];
  if (!(this->top5() <= 0 && this->top5() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->top5(), target);
  }

  // float macro_avg_roc_auc = 3;
  if (!(this->macro_avg_roc_auc() <= 0 && this->macro_avg_roc_auc() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->macro_avg_roc_auc(), target);
  }

  // float macro_std_roc_auc = 4;
  if (!(this->macro_std_roc_auc() <= 0 && this->macro_std_roc_auc() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->macro_std_roc_auc(), target);
  }

  // float macro_avg_f1 = 5;
  if (!(this->macro_avg_f1() <= 0 && this->macro_avg_f1() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->macro_avg_f1(), target);
  }

  // float macro_std_f1 = 6;
  if (!(this->macro_std_f1() <= 0 && this->macro_std_f1() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->macro_std_f1(), target);
  }

  // int32 num_classes = 7;
  if (this->num_classes() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->num_classes(), target);
  }

  // .ConfusionMatrix confusion_matrix = 8;
  if (this->has_confusion_matrix()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::confusion_matrix(this), target);
  }

  // bool tested_on_outside_negatives = 9;
  if (this->tested_on_outside_negatives() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->tested_on_outside_negatives(), target);
  }

  // repeated .BinaryMetrics binary_metrics = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->binary_metrics_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->binary_metrics(static_cast<int>(i)), target);
  }

  // .DataBatch test_ground_truth = 11;
  if (this->has_test_ground_truth()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, _Internal::test_ground_truth(this), target);
  }

  // .DataBatch test_predictions = 12;
  if (this->has_test_predictions()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, _Internal::test_predictions(this), target);
  }

  // .CooccurrenceMatrix cooccurrence_matrix = 13;
  if (this->has_cooccurrence_matrix()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, _Internal::cooccurrence_matrix(this), target);
  }

  // .PositiveLabelDistribution positive_label_distribution = 14;
  if (this->has_positive_label_distribution()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, _Internal::positive_label_distribution(this), target);
  }

  // float training_time = 15;
  if (!(this->training_time() <= 0 && this->training_time() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->training_time(), target);
  }

  // float macro_avg_precision = 16;
  if (!(this->macro_avg_precision() <= 0 && this->macro_avg_precision() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->macro_avg_precision(), target);
  }

  // float macro_avg_recall = 17;
  if (!(this->macro_avg_recall() <= 0 && this->macro_avg_recall() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(17, this->macro_avg_recall(), target);
  }

  // float k_fold_train_and_apply_time = 18;
  if (!(this->k_fold_train_and_apply_time() <= 0 && this->k_fold_train_and_apply_time() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(18, this->k_fold_train_and_apply_time(), target);
  }

  // float num_examples = 19;
  if (!(this->num_examples() <= 0 && this->num_examples() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->num_examples(), target);
  }

  // float metrics_assembly_time = 20;
  if (!(this->metrics_assembly_time() <= 0 && this->metrics_assembly_time() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(20, this->metrics_assembly_time(), target);
  }

  // float mean_average_precision_iou_50 = 21;
  if (!(this->mean_average_precision_iou_50() <= 0 && this->mean_average_precision_iou_50() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(21, this->mean_average_precision_iou_50(), target);
  }

  // float mean_average_precision_iou_range = 22;
  if (!(this->mean_average_precision_iou_range() <= 0 && this->mean_average_precision_iou_range() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(22, this->mean_average_precision_iou_range(), target);
  }

  // repeated .BinaryMetrics metrics_by_class = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->metrics_by_class_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        23, this->metrics_by_class(static_cast<int>(i)), target);
  }

  // repeated .BinaryMetrics metrics_by_area = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->metrics_by_area_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        24, this->metrics_by_area(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MulticlassMetrics)
  return target;
}

size_t MulticlassMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MulticlassMetrics)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BinaryMetrics binary_metrics = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->binary_metrics_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->binary_metrics(static_cast<int>(i)));
    }
  }

  // repeated .BinaryMetrics metrics_by_class = 23;
  {
    unsigned int count = static_cast<unsigned int>(this->metrics_by_class_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->metrics_by_class(static_cast<int>(i)));
    }
  }

  // repeated .BinaryMetrics metrics_by_area = 24;
  {
    unsigned int count = static_cast<unsigned int>(this->metrics_by_area_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->metrics_by_area(static_cast<int>(i)));
    }
  }

  // .ConfusionMatrix confusion_matrix = 8;
  if (this->has_confusion_matrix()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *confusion_matrix_);
  }

  // .DataBatch test_ground_truth = 11;
  if (this->has_test_ground_truth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *test_ground_truth_);
  }

  // .DataBatch test_predictions = 12;
  if (this->has_test_predictions()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *test_predictions_);
  }

  // .CooccurrenceMatrix cooccurrence_matrix = 13;
  if (this->has_cooccurrence_matrix()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cooccurrence_matrix_);
  }

  // .PositiveLabelDistribution positive_label_distribution = 14;
  if (this->has_positive_label_distribution()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *positive_label_distribution_);
  }

  // float top1 = 1 [deprecated = true];
  if (!(this->top1() <= 0 && this->top1() >= 0)) {
    total_size += 1 + 4;
  }

  // float top5 = 2 [deprecated = true];
  if (!(this->top5() <= 0 && this->top5() >= 0)) {
    total_size += 1 + 4;
  }

  // float macro_avg_roc_auc = 3;
  if (!(this->macro_avg_roc_auc() <= 0 && this->macro_avg_roc_auc() >= 0)) {
    total_size += 1 + 4;
  }

  // float macro_std_roc_auc = 4;
  if (!(this->macro_std_roc_auc() <= 0 && this->macro_std_roc_auc() >= 0)) {
    total_size += 1 + 4;
  }

  // float macro_avg_f1 = 5;
  if (!(this->macro_avg_f1() <= 0 && this->macro_avg_f1() >= 0)) {
    total_size += 1 + 4;
  }

  // float macro_std_f1 = 6;
  if (!(this->macro_std_f1() <= 0 && this->macro_std_f1() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 num_classes = 7;
  if (this->num_classes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->num_classes());
  }

  // bool tested_on_outside_negatives = 9;
  if (this->tested_on_outside_negatives() != 0) {
    total_size += 1 + 1;
  }

  // float training_time = 15;
  if (!(this->training_time() <= 0 && this->training_time() >= 0)) {
    total_size += 1 + 4;
  }

  // float macro_avg_precision = 16;
  if (!(this->macro_avg_precision() <= 0 && this->macro_avg_precision() >= 0)) {
    total_size += 2 + 4;
  }

  // float macro_avg_recall = 17;
  if (!(this->macro_avg_recall() <= 0 && this->macro_avg_recall() >= 0)) {
    total_size += 2 + 4;
  }

  // float k_fold_train_and_apply_time = 18;
  if (!(this->k_fold_train_and_apply_time() <= 0 && this->k_fold_train_and_apply_time() >= 0)) {
    total_size += 2 + 4;
  }

  // float num_examples = 19;
  if (!(this->num_examples() <= 0 && this->num_examples() >= 0)) {
    total_size += 2 + 4;
  }

  // float metrics_assembly_time = 20;
  if (!(this->metrics_assembly_time() <= 0 && this->metrics_assembly_time() >= 0)) {
    total_size += 2 + 4;
  }

  // float mean_average_precision_iou_50 = 21;
  if (!(this->mean_average_precision_iou_50() <= 0 && this->mean_average_precision_iou_50() >= 0)) {
    total_size += 2 + 4;
  }

  // float mean_average_precision_iou_range = 22;
  if (!(this->mean_average_precision_iou_range() <= 0 && this->mean_average_precision_iou_range() >= 0)) {
    total_size += 2 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MulticlassMetrics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MulticlassMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  const MulticlassMetrics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MulticlassMetrics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MulticlassMetrics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MulticlassMetrics)
    MergeFrom(*source);
  }
}

void MulticlassMetrics::MergeFrom(const MulticlassMetrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MulticlassMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  binary_metrics_.MergeFrom(from.binary_metrics_);
  metrics_by_class_.MergeFrom(from.metrics_by_class_);
  metrics_by_area_.MergeFrom(from.metrics_by_area_);
  if (from.has_confusion_matrix()) {
    mutable_confusion_matrix()->::ConfusionMatrix::MergeFrom(from.confusion_matrix());
  }
  if (from.has_test_ground_truth()) {
    mutable_test_ground_truth()->::DataBatch::MergeFrom(from.test_ground_truth());
  }
  if (from.has_test_predictions()) {
    mutable_test_predictions()->::DataBatch::MergeFrom(from.test_predictions());
  }
  if (from.has_cooccurrence_matrix()) {
    mutable_cooccurrence_matrix()->::CooccurrenceMatrix::MergeFrom(from.cooccurrence_matrix());
  }
  if (from.has_positive_label_distribution()) {
    mutable_positive_label_distribution()->::PositiveLabelDistribution::MergeFrom(from.positive_label_distribution());
  }
  if (!(from.top1() <= 0 && from.top1() >= 0)) {
    set_top1(from.top1());
  }
  if (!(from.top5() <= 0 && from.top5() >= 0)) {
    set_top5(from.top5());
  }
  if (!(from.macro_avg_roc_auc() <= 0 && from.macro_avg_roc_auc() >= 0)) {
    set_macro_avg_roc_auc(from.macro_avg_roc_auc());
  }
  if (!(from.macro_std_roc_auc() <= 0 && from.macro_std_roc_auc() >= 0)) {
    set_macro_std_roc_auc(from.macro_std_roc_auc());
  }
  if (!(from.macro_avg_f1() <= 0 && from.macro_avg_f1() >= 0)) {
    set_macro_avg_f1(from.macro_avg_f1());
  }
  if (!(from.macro_std_f1() <= 0 && from.macro_std_f1() >= 0)) {
    set_macro_std_f1(from.macro_std_f1());
  }
  if (from.num_classes() != 0) {
    set_num_classes(from.num_classes());
  }
  if (from.tested_on_outside_negatives() != 0) {
    set_tested_on_outside_negatives(from.tested_on_outside_negatives());
  }
  if (!(from.training_time() <= 0 && from.training_time() >= 0)) {
    set_training_time(from.training_time());
  }
  if (!(from.macro_avg_precision() <= 0 && from.macro_avg_precision() >= 0)) {
    set_macro_avg_precision(from.macro_avg_precision());
  }
  if (!(from.macro_avg_recall() <= 0 && from.macro_avg_recall() >= 0)) {
    set_macro_avg_recall(from.macro_avg_recall());
  }
  if (!(from.k_fold_train_and_apply_time() <= 0 && from.k_fold_train_and_apply_time() >= 0)) {
    set_k_fold_train_and_apply_time(from.k_fold_train_and_apply_time());
  }
  if (!(from.num_examples() <= 0 && from.num_examples() >= 0)) {
    set_num_examples(from.num_examples());
  }
  if (!(from.metrics_assembly_time() <= 0 && from.metrics_assembly_time() >= 0)) {
    set_metrics_assembly_time(from.metrics_assembly_time());
  }
  if (!(from.mean_average_precision_iou_50() <= 0 && from.mean_average_precision_iou_50() >= 0)) {
    set_mean_average_precision_iou_50(from.mean_average_precision_iou_50());
  }
  if (!(from.mean_average_precision_iou_range() <= 0 && from.mean_average_precision_iou_range() >= 0)) {
    set_mean_average_precision_iou_range(from.mean_average_precision_iou_range());
  }
}

void MulticlassMetrics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MulticlassMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MulticlassMetrics::CopyFrom(const MulticlassMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MulticlassMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MulticlassMetrics::IsInitialized() const {
  return true;
}

void MulticlassMetrics::InternalSwap(MulticlassMetrics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&binary_metrics_)->InternalSwap(CastToBase(&other->binary_metrics_));
  CastToBase(&metrics_by_class_)->InternalSwap(CastToBase(&other->metrics_by_class_));
  CastToBase(&metrics_by_area_)->InternalSwap(CastToBase(&other->metrics_by_area_));
  swap(confusion_matrix_, other->confusion_matrix_);
  swap(test_ground_truth_, other->test_ground_truth_);
  swap(test_predictions_, other->test_predictions_);
  swap(cooccurrence_matrix_, other->cooccurrence_matrix_);
  swap(positive_label_distribution_, other->positive_label_distribution_);
  swap(top1_, other->top1_);
  swap(top5_, other->top5_);
  swap(macro_avg_roc_auc_, other->macro_avg_roc_auc_);
  swap(macro_std_roc_auc_, other->macro_std_roc_auc_);
  swap(macro_avg_f1_, other->macro_avg_f1_);
  swap(macro_std_f1_, other->macro_std_f1_);
  swap(num_classes_, other->num_classes_);
  swap(tested_on_outside_negatives_, other->tested_on_outside_negatives_);
  swap(training_time_, other->training_time_);
  swap(macro_avg_precision_, other->macro_avg_precision_);
  swap(macro_avg_recall_, other->macro_avg_recall_);
  swap(k_fold_train_and_apply_time_, other->k_fold_train_and_apply_time_);
  swap(num_examples_, other->num_examples_);
  swap(metrics_assembly_time_, other->metrics_assembly_time_);
  swap(mean_average_precision_iou_50_, other->mean_average_precision_iou_50_);
  swap(mean_average_precision_iou_range_, other->mean_average_precision_iou_range_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MulticlassMetrics::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MulticlassMetricsResponse::InitAsDefaultInstance() {
  ::_MulticlassMetricsResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::ResponseStatus*>(
      ::ResponseStatus::internal_default_instance());
  ::_MulticlassMetricsResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::MulticlassMetrics*>(
      ::MulticlassMetrics::internal_default_instance());
}
class MulticlassMetricsResponse::_Internal {
 public:
  static const ::ResponseStatus& status(const MulticlassMetricsResponse* msg);
  static const ::MulticlassMetrics& result(const MulticlassMetricsResponse* msg);
};

const ::ResponseStatus&
MulticlassMetricsResponse::_Internal::status(const MulticlassMetricsResponse* msg) {
  return *msg->status_;
}
const ::MulticlassMetrics&
MulticlassMetricsResponse::_Internal::result(const MulticlassMetricsResponse* msg) {
  return *msg->result_;
}
void MulticlassMetricsResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
MulticlassMetricsResponse::MulticlassMetricsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MulticlassMetricsResponse)
}
MulticlassMetricsResponse::MulticlassMetricsResponse(const MulticlassMetricsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::ResponseStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from.has_result()) {
    result_ = new ::MulticlassMetrics(*from.result_);
  } else {
    result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:MulticlassMetricsResponse)
}

void MulticlassMetricsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MulticlassMetricsResponse_proto_2fpredictor_2fpredictor_5fmetrics_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&status_)) + sizeof(result_));
}

MulticlassMetricsResponse::~MulticlassMetricsResponse() {
  // @@protoc_insertion_point(destructor:MulticlassMetricsResponse)
  SharedDtor();
}

void MulticlassMetricsResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete result_;
}

void MulticlassMetricsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MulticlassMetricsResponse& MulticlassMetricsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MulticlassMetricsResponse_proto_2fpredictor_2fpredictor_5fmetrics_2eproto.base);
  return *internal_default_instance();
}


void MulticlassMetricsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:MulticlassMetricsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MulticlassMetricsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ResponseStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MulticlassMetrics result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MulticlassMetricsResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:MulticlassMetricsResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ResponseStatus status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MulticlassMetrics result = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MulticlassMetricsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MulticlassMetricsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MulticlassMetricsResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MulticlassMetricsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::status(this), output);
  }

  // .MulticlassMetrics result = 2;
  if (this->has_result()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::result(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MulticlassMetricsResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* MulticlassMetricsResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MulticlassMetricsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::status(this), target);
  }

  // .MulticlassMetrics result = 2;
  if (this->has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::result(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MulticlassMetricsResponse)
  return target;
}

size_t MulticlassMetricsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MulticlassMetricsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .MulticlassMetrics result = 2;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MulticlassMetricsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MulticlassMetricsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MulticlassMetricsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MulticlassMetricsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MulticlassMetricsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MulticlassMetricsResponse)
    MergeFrom(*source);
  }
}

void MulticlassMetricsResponse::MergeFrom(const MulticlassMetricsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MulticlassMetricsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    mutable_status()->::ResponseStatus::MergeFrom(from.status());
  }
  if (from.has_result()) {
    mutable_result()->::MulticlassMetrics::MergeFrom(from.result());
  }
}

void MulticlassMetricsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MulticlassMetricsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MulticlassMetricsResponse::CopyFrom(const MulticlassMetricsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MulticlassMetricsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MulticlassMetricsResponse::IsInitialized() const {
  return true;
}

void MulticlassMetricsResponse::InternalSwap(MulticlassMetricsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MulticlassMetricsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ProgressStatus_ConceptCountsEntry_DoNotUse::ProgressStatus_ConceptCountsEntry_DoNotUse() {}
ProgressStatus_ConceptCountsEntry_DoNotUse::ProgressStatus_ConceptCountsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ProgressStatus_ConceptCountsEntry_DoNotUse::MergeFrom(const ProgressStatus_ConceptCountsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ProgressStatus_ConceptCountsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ProgressStatus_ConceptCountsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void ProgressStatus::InitAsDefaultInstance() {
}
class ProgressStatus::_Internal {
 public:
};

ProgressStatus::ProgressStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProgressStatus)
}
ProgressStatus::ProgressStatus(const ProgressStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      train_stats_(from.train_stats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  concept_counts_.MergeFrom(from.concept_counts_);
  ::memcpy(&percent_completed_, &from.percent_completed_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_input_count_) -
    reinterpret_cast<char*>(&percent_completed_)) + sizeof(total_input_count_));
  // @@protoc_insertion_point(copy_constructor:ProgressStatus)
}

void ProgressStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProgressStatus_proto_2fpredictor_2fpredictor_5fmetrics_2eproto.base);
  ::memset(&percent_completed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_input_count_) -
      reinterpret_cast<char*>(&percent_completed_)) + sizeof(total_input_count_));
}

ProgressStatus::~ProgressStatus() {
  // @@protoc_insertion_point(destructor:ProgressStatus)
  SharedDtor();
}

void ProgressStatus::SharedDtor() {
}

void ProgressStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProgressStatus& ProgressStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProgressStatus_proto_2fpredictor_2fpredictor_5fmetrics_2eproto.base);
  return *internal_default_instance();
}


void ProgressStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:ProgressStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concept_counts_.Clear();
  train_stats_.Clear();
  ::memset(&percent_completed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_input_count_) -
      reinterpret_cast<char*>(&percent_completed_)) + sizeof(total_input_count_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProgressStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 percent_completed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          percent_completed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 time_remaining = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          time_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 total_input_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          total_input_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, uint32> concept_counts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&concept_counts_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // repeated .TrainStats train_stats = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_train_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProgressStatus::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProgressStatus)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 percent_completed = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &percent_completed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 time_remaining = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_remaining_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 total_input_count = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_input_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, uint32> concept_counts = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          ProgressStatus_ConceptCountsEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              ProgressStatus_ConceptCountsEntry_DoNotUse,
              std::string, ::PROTOBUF_NAMESPACE_ID::uint32,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 > > parser(&concept_counts_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ProgressStatus.ConceptCountsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TrainStats train_stats = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_train_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProgressStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProgressStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProgressStatus::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProgressStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 percent_completed = 1;
  if (this->percent_completed() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->percent_completed(), output);
  }

  // uint32 time_remaining = 2;
  if (this->time_remaining() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->time_remaining(), output);
  }

  // uint32 total_input_count = 3;
  if (this->total_input_count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->total_input_count(), output);
  }

  // map<string, uint32> concept_counts = 4;
  if (!this->concept_counts().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "ProgressStatus.ConceptCountsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->concept_counts().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->concept_counts().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->concept_counts().begin();
          it != this->concept_counts().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        ProgressStatus_ConceptCountsEntry_DoNotUse::Funcs::SerializeToCodedStream(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->concept_counts().begin();
          it != this->concept_counts().end(); ++it) {
        ProgressStatus_ConceptCountsEntry_DoNotUse::Funcs::SerializeToCodedStream(4, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated .TrainStats train_stats = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->train_stats_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->train_stats(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProgressStatus)
}

::PROTOBUF_NAMESPACE_ID::uint8* ProgressStatus::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProgressStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 percent_completed = 1;
  if (this->percent_completed() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->percent_completed(), target);
  }

  // uint32 time_remaining = 2;
  if (this->time_remaining() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->time_remaining(), target);
  }

  // uint32 total_input_count = 3;
  if (this->total_input_count() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->total_input_count(), target);
  }

  // map<string, uint32> concept_counts = 4;
  if (!this->concept_counts().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "ProgressStatus.ConceptCountsEntry.key");
      }
    };

    if (false &&
        this->concept_counts().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->concept_counts().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->concept_counts().begin();
          it != this->concept_counts().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ProgressStatus_ConceptCountsEntry_DoNotUse::Funcs::SerializeToArray(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->concept_counts().begin();
          it != this->concept_counts().end(); ++it) {
        target = ProgressStatus_ConceptCountsEntry_DoNotUse::Funcs::SerializeToArray(4, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated .TrainStats train_stats = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->train_stats_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->train_stats(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProgressStatus)
  return target;
}

size_t ProgressStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProgressStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, uint32> concept_counts = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->concept_counts_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
      it = this->concept_counts().begin();
      it != this->concept_counts().end(); ++it) {
    total_size += ProgressStatus_ConceptCountsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .TrainStats train_stats = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->train_stats_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->train_stats(static_cast<int>(i)));
    }
  }

  // uint32 percent_completed = 1;
  if (this->percent_completed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->percent_completed());
  }

  // uint32 time_remaining = 2;
  if (this->time_remaining() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->time_remaining());
  }

  // uint32 total_input_count = 3;
  if (this->total_input_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->total_input_count());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProgressStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProgressStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ProgressStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProgressStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProgressStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProgressStatus)
    MergeFrom(*source);
  }
}

void ProgressStatus::MergeFrom(const ProgressStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProgressStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  concept_counts_.MergeFrom(from.concept_counts_);
  train_stats_.MergeFrom(from.train_stats_);
  if (from.percent_completed() != 0) {
    set_percent_completed(from.percent_completed());
  }
  if (from.time_remaining() != 0) {
    set_time_remaining(from.time_remaining());
  }
  if (from.total_input_count() != 0) {
    set_total_input_count(from.total_input_count());
  }
}

void ProgressStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProgressStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProgressStatus::CopyFrom(const ProgressStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProgressStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProgressStatus::IsInitialized() const {
  return true;
}

void ProgressStatus::InternalSwap(ProgressStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  concept_counts_.Swap(&other->concept_counts_);
  CastToBase(&train_stats_)->InternalSwap(CastToBase(&other->train_stats_));
  swap(percent_completed_, other->percent_completed_);
  swap(time_remaining_, other->time_remaining_);
  swap(total_input_count_, other->total_input_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProgressStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrainStats::InitAsDefaultInstance() {
}
class TrainStats::_Internal {
 public:
};

TrainStats::TrainStats()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TrainStats)
}
TrainStats::TrainStats(const TrainStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&epoch_, &from.epoch_,
    static_cast<size_t>(reinterpret_cast<char*>(&cost_) -
    reinterpret_cast<char*>(&epoch_)) + sizeof(cost_));
  // @@protoc_insertion_point(copy_constructor:TrainStats)
}

void TrainStats::SharedCtor() {
  ::memset(&epoch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cost_) -
      reinterpret_cast<char*>(&epoch_)) + sizeof(cost_));
}

TrainStats::~TrainStats() {
  // @@protoc_insertion_point(destructor:TrainStats)
  SharedDtor();
}

void TrainStats::SharedDtor() {
}

void TrainStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrainStats& TrainStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrainStats_proto_2fpredictor_2fpredictor_5fmetrics_2eproto.base);
  return *internal_default_instance();
}


void TrainStats::Clear() {
// @@protoc_insertion_point(message_clear_start:TrainStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&epoch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cost_) -
      reinterpret_cast<char*>(&epoch_)) + sizeof(cost_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrainStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 epoch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 global_step = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          global_step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float cost = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          cost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrainStats::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:TrainStats)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 epoch = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &epoch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 global_step = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &global_step_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float cost = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TrainStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TrainStats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrainStats::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TrainStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 epoch = 1;
  if (this->epoch() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->epoch(), output);
  }

  // uint32 global_step = 2;
  if (this->global_step() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->global_step(), output);
  }

  // float cost = 3;
  if (!(this->cost() <= 0 && this->cost() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->cost(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TrainStats)
}

::PROTOBUF_NAMESPACE_ID::uint8* TrainStats::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TrainStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 epoch = 1;
  if (this->epoch() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->epoch(), target);
  }

  // uint32 global_step = 2;
  if (this->global_step() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->global_step(), target);
  }

  // float cost = 3;
  if (!(this->cost() <= 0 && this->cost() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->cost(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TrainStats)
  return target;
}

size_t TrainStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TrainStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 epoch = 1;
  if (this->epoch() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->epoch());
  }

  // uint32 global_step = 2;
  if (this->global_step() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->global_step());
  }

  // float cost = 3;
  if (!(this->cost() <= 0 && this->cost() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrainStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TrainStats)
  GOOGLE_DCHECK_NE(&from, this);
  const TrainStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrainStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TrainStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TrainStats)
    MergeFrom(*source);
  }
}

void TrainStats::MergeFrom(const TrainStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TrainStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.epoch() != 0) {
    set_epoch(from.epoch());
  }
  if (from.global_step() != 0) {
    set_global_step(from.global_step());
  }
  if (!(from.cost() <= 0 && from.cost() >= 0)) {
    set_cost(from.cost());
  }
}

void TrainStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TrainStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainStats::CopyFrom(const TrainStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TrainStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainStats::IsInitialized() const {
  return true;
}

void TrainStats::InternalSwap(TrainStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(epoch_, other->epoch_);
  swap(global_step_, other->global_step_);
  swap(cost_, other->cost_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrainStats::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::LabelFreq* Arena::CreateMaybeMessage< ::LabelFreq >(Arena* arena) {
  return Arena::CreateInternal< ::LabelFreq >(arena);
}
template<> PROTOBUF_NOINLINE ::PositiveLabelDistribution* Arena::CreateMaybeMessage< ::PositiveLabelDistribution >(Arena* arena) {
  return Arena::CreateInternal< ::PositiveLabelDistribution >(arena);
}
template<> PROTOBUF_NOINLINE ::CooccurrenceMatrixEntry* Arena::CreateMaybeMessage< ::CooccurrenceMatrixEntry >(Arena* arena) {
  return Arena::CreateInternal< ::CooccurrenceMatrixEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::CooccurrenceMatrix* Arena::CreateMaybeMessage< ::CooccurrenceMatrix >(Arena* arena) {
  return Arena::CreateInternal< ::CooccurrenceMatrix >(arena);
}
template<> PROTOBUF_NOINLINE ::ConfusionMatrixEntry* Arena::CreateMaybeMessage< ::ConfusionMatrixEntry >(Arena* arena) {
  return Arena::CreateInternal< ::ConfusionMatrixEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::ConfusionMatrix* Arena::CreateMaybeMessage< ::ConfusionMatrix >(Arena* arena) {
  return Arena::CreateInternal< ::ConfusionMatrix >(arena);
}
template<> PROTOBUF_NOINLINE ::ROC* Arena::CreateMaybeMessage< ::ROC >(Arena* arena) {
  return Arena::CreateInternal< ::ROC >(arena);
}
template<> PROTOBUF_NOINLINE ::PrecisionRecallCurve* Arena::CreateMaybeMessage< ::PrecisionRecallCurve >(Arena* arena) {
  return Arena::CreateInternal< ::PrecisionRecallCurve >(arena);
}
template<> PROTOBUF_NOINLINE ::BinaryMetrics* Arena::CreateMaybeMessage< ::BinaryMetrics >(Arena* arena) {
  return Arena::CreateInternal< ::BinaryMetrics >(arena);
}
template<> PROTOBUF_NOINLINE ::MulticlassMetrics* Arena::CreateMaybeMessage< ::MulticlassMetrics >(Arena* arena) {
  return Arena::CreateInternal< ::MulticlassMetrics >(arena);
}
template<> PROTOBUF_NOINLINE ::MulticlassMetricsResponse* Arena::CreateMaybeMessage< ::MulticlassMetricsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::MulticlassMetricsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ProgressStatus_ConceptCountsEntry_DoNotUse* Arena::CreateMaybeMessage< ::ProgressStatus_ConceptCountsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::ProgressStatus_ConceptCountsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ProgressStatus* Arena::CreateMaybeMessage< ::ProgressStatus >(Arena* arena) {
  return Arena::CreateInternal< ::ProgressStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::TrainStats* Arena::CreateMaybeMessage< ::TrainStats >(Arena* arena) {
  return Arena::CreateInternal< ::TrainStats >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
