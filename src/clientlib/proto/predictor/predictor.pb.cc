// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/predictor/predictor.proto

#include "proto/predictor/predictor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_proto_2fconcept_5ftrainer_5fdump_2fconcept_5ftrainer_5fdump_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ConceptTrainerDump_proto_2fconcept_5ftrainer_5fdump_2fconcept_5ftrainer_5fdump_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fdatabatch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DataBatch_proto_2futils_2fdatabatch_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2fembedding_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Embedding_proto_2futils_2fembedding_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fpredictor_2fpredictor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EvalSpec_proto_2fpredictor_2fpredictor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fpredictor_2fpredictor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PredictorGetWeightsResponse_WeightsEntry_DoNotUse_proto_2fpredictor_2fpredictor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fpredictor_2fpredictor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PredictorTrainRequest_proto_2fpredictor_2fpredictor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fpredictor_2fpredictor_5fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ProgressStatus_proto_2fpredictor_2fpredictor_5fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2frequest_5fmeta_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RequestMeta_proto_2futils_2frequest_5fmeta_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2futils_2frequest_5fmeta_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResponseStatus_proto_2futils_2frequest_5fmeta_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Search_proto_2fclarifai_2fapi_2fresources_2eproto;
class PredictorPredictRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PredictorPredictRequest> _instance;
} _PredictorPredictRequest_default_instance_;
class PredictorPredictSQLQueryRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PredictorPredictSQLQueryRequest> _instance;
} _PredictorPredictSQLQueryRequest_default_instance_;
class PredictorPredictResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PredictorPredictResponse> _instance;
} _PredictorPredictResponse_default_instance_;
class PredictorTrainAndEvalRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PredictorTrainAndEvalRequest> _instance;
} _PredictorTrainAndEvalRequest_default_instance_;
class PredictorTrainRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PredictorTrainRequest> _instance;
  const ::DataBatch* data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sql_query_;
} _PredictorTrainRequest_default_instance_;
class PredictorTrainResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PredictorTrainResponse> _instance;
} _PredictorTrainResponse_default_instance_;
class PredictorGetWeightsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PredictorGetWeightsRequest> _instance;
} _PredictorGetWeightsRequest_default_instance_;
class PredictorGetWeightsResponse_WeightsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PredictorGetWeightsResponse_WeightsEntry_DoNotUse> _instance;
} _PredictorGetWeightsResponse_WeightsEntry_DoNotUse_default_instance_;
class PredictorGetWeightsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PredictorGetWeightsResponse> _instance;
} _PredictorGetWeightsResponse_default_instance_;
class EvalSpecDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EvalSpec> _instance;
} _EvalSpec_default_instance_;
class PredictorEvaluateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PredictorEvaluateRequest> _instance;
} _PredictorEvaluateRequest_default_instance_;
static void InitDefaultsscc_info_EvalSpec_proto_2fpredictor_2fpredictor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_EvalSpec_default_instance_;
    new (ptr) ::EvalSpec();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EvalSpec::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EvalSpec_proto_2fpredictor_2fpredictor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_EvalSpec_proto_2fpredictor_2fpredictor_2eproto}, {}};

static void InitDefaultsscc_info_PredictorEvaluateRequest_proto_2fpredictor_2fpredictor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PredictorEvaluateRequest_default_instance_;
    new (ptr) ::PredictorEvaluateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PredictorEvaluateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PredictorEvaluateRequest_proto_2fpredictor_2fpredictor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_PredictorEvaluateRequest_proto_2fpredictor_2fpredictor_2eproto}, {
      &scc_info_RequestMeta_proto_2futils_2frequest_5fmeta_2eproto.base,
      &scc_info_Search_proto_2fclarifai_2fapi_2fresources_2eproto.base,}};

static void InitDefaultsscc_info_PredictorGetWeightsRequest_proto_2fpredictor_2fpredictor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PredictorGetWeightsRequest_default_instance_;
    new (ptr) ::PredictorGetWeightsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PredictorGetWeightsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PredictorGetWeightsRequest_proto_2fpredictor_2fpredictor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PredictorGetWeightsRequest_proto_2fpredictor_2fpredictor_2eproto}, {
      &scc_info_RequestMeta_proto_2futils_2frequest_5fmeta_2eproto.base,}};

static void InitDefaultsscc_info_PredictorGetWeightsResponse_proto_2fpredictor_2fpredictor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PredictorGetWeightsResponse_default_instance_;
    new (ptr) ::PredictorGetWeightsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PredictorGetWeightsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PredictorGetWeightsResponse_proto_2fpredictor_2fpredictor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_PredictorGetWeightsResponse_proto_2fpredictor_2fpredictor_2eproto}, {
      &scc_info_ResponseStatus_proto_2futils_2frequest_5fmeta_2eproto.base,
      &scc_info_PredictorGetWeightsResponse_WeightsEntry_DoNotUse_proto_2fpredictor_2fpredictor_2eproto.base,
      &scc_info_ConceptTrainerDump_proto_2fconcept_5ftrainer_5fdump_2fconcept_5ftrainer_5fdump_2eproto.base,}};

static void InitDefaultsscc_info_PredictorGetWeightsResponse_WeightsEntry_DoNotUse_proto_2fpredictor_2fpredictor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PredictorGetWeightsResponse_WeightsEntry_DoNotUse_default_instance_;
    new (ptr) ::PredictorGetWeightsResponse_WeightsEntry_DoNotUse();
  }
  ::PredictorGetWeightsResponse_WeightsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PredictorGetWeightsResponse_WeightsEntry_DoNotUse_proto_2fpredictor_2fpredictor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PredictorGetWeightsResponse_WeightsEntry_DoNotUse_proto_2fpredictor_2fpredictor_2eproto}, {
      &scc_info_Embedding_proto_2futils_2fembedding_2eproto.base,}};

static void InitDefaultsscc_info_PredictorPredictRequest_proto_2fpredictor_2fpredictor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PredictorPredictRequest_default_instance_;
    new (ptr) ::PredictorPredictRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PredictorPredictRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PredictorPredictRequest_proto_2fpredictor_2fpredictor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_PredictorPredictRequest_proto_2fpredictor_2fpredictor_2eproto}, {
      &scc_info_RequestMeta_proto_2futils_2frequest_5fmeta_2eproto.base,
      &scc_info_DataBatch_proto_2futils_2fdatabatch_2eproto.base,}};

static void InitDefaultsscc_info_PredictorPredictResponse_proto_2fpredictor_2fpredictor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PredictorPredictResponse_default_instance_;
    new (ptr) ::PredictorPredictResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PredictorPredictResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PredictorPredictResponse_proto_2fpredictor_2fpredictor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_PredictorPredictResponse_proto_2fpredictor_2fpredictor_2eproto}, {
      &scc_info_ResponseStatus_proto_2futils_2frequest_5fmeta_2eproto.base,
      &scc_info_DataBatch_proto_2futils_2fdatabatch_2eproto.base,}};

static void InitDefaultsscc_info_PredictorPredictSQLQueryRequest_proto_2fpredictor_2fpredictor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PredictorPredictSQLQueryRequest_default_instance_;
    new (ptr) ::PredictorPredictSQLQueryRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PredictorPredictSQLQueryRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PredictorPredictSQLQueryRequest_proto_2fpredictor_2fpredictor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PredictorPredictSQLQueryRequest_proto_2fpredictor_2fpredictor_2eproto}, {
      &scc_info_RequestMeta_proto_2futils_2frequest_5fmeta_2eproto.base,}};

static void InitDefaultsscc_info_PredictorTrainAndEvalRequest_proto_2fpredictor_2fpredictor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PredictorTrainAndEvalRequest_default_instance_;
    new (ptr) ::PredictorTrainAndEvalRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PredictorTrainAndEvalRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PredictorTrainAndEvalRequest_proto_2fpredictor_2fpredictor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_PredictorTrainAndEvalRequest_proto_2fpredictor_2fpredictor_2eproto}, {
      &scc_info_RequestMeta_proto_2futils_2frequest_5fmeta_2eproto.base,
      &scc_info_PredictorTrainRequest_proto_2fpredictor_2fpredictor_2eproto.base,
      &scc_info_EvalSpec_proto_2fpredictor_2fpredictor_2eproto.base,}};

static void InitDefaultsscc_info_PredictorTrainRequest_proto_2fpredictor_2fpredictor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PredictorTrainRequest_default_instance_;
    new (ptr) ::PredictorTrainRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PredictorTrainRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PredictorTrainRequest_proto_2fpredictor_2fpredictor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_PredictorTrainRequest_proto_2fpredictor_2fpredictor_2eproto}, {
      &scc_info_RequestMeta_proto_2futils_2frequest_5fmeta_2eproto.base,
      &scc_info_DataBatch_proto_2futils_2fdatabatch_2eproto.base,}};

static void InitDefaultsscc_info_PredictorTrainResponse_proto_2fpredictor_2fpredictor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PredictorTrainResponse_default_instance_;
    new (ptr) ::PredictorTrainResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PredictorTrainResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PredictorTrainResponse_proto_2fpredictor_2fpredictor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_PredictorTrainResponse_proto_2fpredictor_2fpredictor_2eproto}, {
      &scc_info_ResponseStatus_proto_2futils_2frequest_5fmeta_2eproto.base,
      &scc_info_ConceptTrainerDump_proto_2fconcept_5ftrainer_5fdump_2fconcept_5ftrainer_5fdump_2eproto.base,
      &scc_info_ProgressStatus_proto_2fpredictor_2fpredictor_5fmetrics_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fpredictor_2fpredictor_2eproto[11];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_proto_2fpredictor_2fpredictor_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fpredictor_2fpredictor_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2fpredictor_2fpredictor_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PredictorPredictRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PredictorPredictRequest, meta_),
  PROTOBUF_FIELD_OFFSET(::PredictorPredictRequest, data_),
  PROTOBUF_FIELD_OFFSET(::PredictorPredictRequest, trainer_name_),
  PROTOBUF_FIELD_OFFSET(::PredictorPredictRequest, aiids_),
  PROTOBUF_FIELD_OFFSET(::PredictorPredictRequest, topk_),
  PROTOBUF_FIELD_OFFSET(::PredictorPredictRequest, echo_aiids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PredictorPredictSQLQueryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PredictorPredictSQLQueryRequest, meta_),
  PROTOBUF_FIELD_OFFSET(::PredictorPredictSQLQueryRequest, sql_query_),
  PROTOBUF_FIELD_OFFSET(::PredictorPredictSQLQueryRequest, trainer_name_),
  PROTOBUF_FIELD_OFFSET(::PredictorPredictSQLQueryRequest, top_k_data_examples_),
  PROTOBUF_FIELD_OFFSET(::PredictorPredictSQLQueryRequest, aiids_),
  PROTOBUF_FIELD_OFFSET(::PredictorPredictSQLQueryRequest, top_k_predictions_),
  PROTOBUF_FIELD_OFFSET(::PredictorPredictSQLQueryRequest, echo_aiids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PredictorPredictResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PredictorPredictResponse, status_),
  PROTOBUF_FIELD_OFFSET(::PredictorPredictResponse, results_),
  PROTOBUF_FIELD_OFFSET(::PredictorPredictResponse, aiids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PredictorTrainAndEvalRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PredictorTrainAndEvalRequest, meta_),
  PROTOBUF_FIELD_OFFSET(::PredictorTrainAndEvalRequest, train_request_),
  PROTOBUF_FIELD_OFFSET(::PredictorTrainAndEvalRequest, eval_spec_),
  PROTOBUF_FIELD_OFFSET(::PredictorTrainAndEvalRequest, use_kfold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PredictorTrainRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::PredictorTrainRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PredictorTrainRequest, meta_),
  PROTOBUF_FIELD_OFFSET(::PredictorTrainRequest, trainer_name_),
  PROTOBUF_FIELD_OFFSET(::PredictorTrainRequest, use_prev_trained_),
  PROTOBUF_FIELD_OFFSET(::PredictorTrainRequest, training_type_),
  offsetof(::PredictorTrainRequestDefaultTypeInternal, data_),
  offsetof(::PredictorTrainRequestDefaultTypeInternal, sql_query_),
  PROTOBUF_FIELD_OFFSET(::PredictorTrainRequest, embeddings_model_),
  PROTOBUF_FIELD_OFFSET(::PredictorTrainRequest, aiids_),
  PROTOBUF_FIELD_OFFSET(::PredictorTrainRequest, train_iters_),
  PROTOBUF_FIELD_OFFSET(::PredictorTrainRequest, training_environment_),
  PROTOBUF_FIELD_OFFSET(::PredictorTrainRequest, hyper_parameters_),
  PROTOBUF_FIELD_OFFSET(::PredictorTrainRequest, missing_positive_example_policy_),
  PROTOBUF_FIELD_OFFSET(::PredictorTrainRequest, training_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PredictorTrainResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PredictorTrainResponse, status_),
  PROTOBUF_FIELD_OFFSET(::PredictorTrainResponse, trainer_),
  PROTOBUF_FIELD_OFFSET(::PredictorTrainResponse, failed_aiids_),
  PROTOBUF_FIELD_OFFSET(::PredictorTrainResponse, progress_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PredictorGetWeightsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PredictorGetWeightsRequest, meta_),
  PROTOBUF_FIELD_OFFSET(::PredictorGetWeightsRequest, trainer_name_),
  PROTOBUF_FIELD_OFFSET(::PredictorGetWeightsRequest, embeddings_model_),
  PROTOBUF_FIELD_OFFSET(::PredictorGetWeightsResponse_WeightsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PredictorGetWeightsResponse_WeightsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PredictorGetWeightsResponse_WeightsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::PredictorGetWeightsResponse_WeightsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PredictorGetWeightsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PredictorGetWeightsResponse, status_),
  PROTOBUF_FIELD_OFFSET(::PredictorGetWeightsResponse, weights_),
  PROTOBUF_FIELD_OFFSET(::PredictorGetWeightsResponse, trainer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EvalSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::EvalSpec, confusion_matrix_topk_),
  PROTOBUF_FIELD_OFFSET(::EvalSpec, cooccurrence_matrix_topk_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PredictorEvaluateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PredictorEvaluateRequest, meta_),
  PROTOBUF_FIELD_OFFSET(::PredictorEvaluateRequest, ground_truth_search_),
  PROTOBUF_FIELD_OFFSET(::PredictorEvaluateRequest, search_to_evaluate_),
  PROTOBUF_FIELD_OFFSET(::PredictorEvaluateRequest, aiids_),
  PROTOBUF_FIELD_OFFSET(::PredictorEvaluateRequest, api_key_),
  PROTOBUF_FIELD_OFFSET(::PredictorEvaluateRequest, evaluation_type_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::PredictorPredictRequest)},
  { 11, -1, sizeof(::PredictorPredictSQLQueryRequest)},
  { 23, -1, sizeof(::PredictorPredictResponse)},
  { 31, -1, sizeof(::PredictorTrainAndEvalRequest)},
  { 40, -1, sizeof(::PredictorTrainRequest)},
  { 58, -1, sizeof(::PredictorTrainResponse)},
  { 67, -1, sizeof(::PredictorGetWeightsRequest)},
  { 75, 82, sizeof(::PredictorGetWeightsResponse_WeightsEntry_DoNotUse)},
  { 84, -1, sizeof(::PredictorGetWeightsResponse)},
  { 92, -1, sizeof(::EvalSpec)},
  { 99, -1, sizeof(::PredictorEvaluateRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PredictorPredictRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PredictorPredictSQLQueryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PredictorPredictResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PredictorTrainAndEvalRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PredictorTrainRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PredictorTrainResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PredictorGetWeightsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PredictorGetWeightsResponse_WeightsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PredictorGetWeightsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_EvalSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PredictorEvaluateRequest_default_instance_),
};

const char descriptor_table_protodef_proto_2fpredictor_2fpredictor_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037proto/predictor/predictor.proto\032\"proto"
  "/clarifai/api/resources.proto\0325proto/con"
  "cept_trainer_dump/concept_trainer_dump.p"
  "roto\032\'proto/predictor/predictor_metrics."
  "proto\032\033proto/utils/databatch.proto\032\033prot"
  "o/utils/embedding.proto\032\036proto/utils/req"
  "uest_meta.proto\"\226\001\n\027PredictorPredictRequ"
  "est\022\032\n\004meta\030\001 \001(\0132\014.RequestMeta\022\030\n\004data\030"
  "\002 \001(\0132\n.DataBatch\022\024\n\014trainer_name\030\003 \001(\t\022"
  "\r\n\005aiids\030\004 \003(\t\022\014\n\004topk\030\005 \001(\005\022\022\n\necho_aii"
  "ds\030\006 \001(\010\"\301\001\n\037PredictorPredictSQLQueryReq"
  "uest\022\032\n\004meta\030\001 \001(\0132\014.RequestMeta\022\021\n\tsql_"
  "query\030\002 \001(\t\022\024\n\014trainer_name\030\003 \001(\t\022\033\n\023top"
  "_k_data_examples\030\004 \001(\005\022\r\n\005aiids\030\005 \003(\t\022\031\n"
  "\021top_k_predictions\030\006 \001(\005\022\022\n\necho_aiids\030\007"
  " \001(\010\"g\n\030PredictorPredictResponse\022\037\n\006stat"
  "us\030\001 \001(\0132\017.ResponseStatus\022\033\n\007results\030\002 \001"
  "(\0132\n.DataBatch\022\r\n\005aiids\030\003 \003(\t\"\232\001\n\034Predic"
  "torTrainAndEvalRequest\022\032\n\004meta\030\001 \001(\0132\014.R"
  "equestMeta\022-\n\rtrain_request\030\002 \001(\0132\026.Pred"
  "ictorTrainRequest\022\034\n\teval_spec\030\003 \001(\0132\t.E"
  "valSpec\022\021\n\tuse_kfold\030\004 \001(\010\"\237\003\n\025Predictor"
  "TrainRequest\022\032\n\004meta\030\001 \001(\0132\014.RequestMeta"
  "\022\024\n\014trainer_name\030\002 \001(\t\022\030\n\020use_prev_train"
  "ed\030\003 \001(\010\022$\n\rtraining_type\030\004 \001(\0162\r.Traini"
  "ngType\022\032\n\004data\030d \001(\0132\n.DataBatchH\000\022\023\n\tsq"
  "l_query\030e \001(\tH\000\022\030\n\020embeddings_model\030\005 \001("
  "\t\022\r\n\005aiids\030\006 \003(\t\022\023\n\013train_iters\030\007 \001(\005\0222\n"
  "\024training_environment\030\010 \001(\0162\024.TrainingEn"
  "vironment\022\030\n\020hyper_parameters\030\t \001(\t\022F\n\037m"
  "issing_positive_example_policy\030\n \001(\0162\035.M"
  "issingPositiveExamplePolicyB\017\n\rtraining_"
  "data\"\237\001\n\026PredictorTrainResponse\022\037\n\006statu"
  "s\030\001 \001(\0132\017.ResponseStatus\022$\n\007trainer\030\002 \001("
  "\0132\023.ConceptTrainerDump\022\024\n\014failed_aiids\030\003"
  " \003(\t\022(\n\017progress_status\030\004 \001(\0132\017.Progress"
  "Status\"l\n\032PredictorGetWeightsRequest\022\032\n\004"
  "meta\030\001 \001(\0132\014.RequestMeta\022\024\n\014trainer_name"
  "\030\002 \001(\t\022\034\n\020embeddings_model\030\005 \001(\tB\002\030\001\"\334\001\n"
  "\033PredictorGetWeightsResponse\022\037\n\006status\030\001"
  " \001(\0132\017.ResponseStatus\022:\n\007weights\030\002 \003(\0132)"
  ".PredictorGetWeightsResponse.WeightsEntr"
  "y\022$\n\007trainer\030\003 \001(\0132\023.ConceptTrainerDump\032"
  ":\n\014WeightsEntry\022\013\n\003key\030\001 \001(\t\022\031\n\005value\030\002 "
  "\001(\0132\n.Embedding:\0028\001\"K\n\010EvalSpec\022\035\n\025confu"
  "sion_matrix_topk\030\001 \001(\005\022 \n\030cooccurrence_m"
  "atrix_topk\030\002 \001(\005\"\345\001\n\030PredictorEvaluateRe"
  "quest\022\032\n\004meta\030\001 \001(\0132\014.RequestMeta\0221\n\023gro"
  "und_truth_search\030\002 \001(\0132\024.clarifai.api.Se"
  "arch\0220\n\022search_to_evaluate\030\003 \001(\0132\024.clari"
  "fai.api.Search\022\r\n\005aiids\030\004 \003(\t\022\017\n\007api_key"
  "\030\005 \001(\t\022(\n\017evaluation_type\030\006 \001(\0162\017.Evalua"
  "tionType*3\n\016EvaluationType\022\022\n\016Classifica"
  "tion\020\000\022\r\n\tDetection\020\0012\312\004\n\020PredictorServi"
  "ce\022I\n\020PredictorPredict\022\030.PredictorPredic"
  "tRequest\032\031.PredictorPredictResponse\"\000\022Y\n"
  "\030PredictorPredictSQLQuery\022 .PredictorPre"
  "dictSQLQueryRequest\032\031.PredictorPredictRe"
  "sponse\"\000\022C\n\016PredictorTrain\022\026.PredictorTr"
  "ainRequest\032\027.PredictorTrainResponse\"\000\022K\n"
  "\024PredictorTrainStream\022\026.PredictorTrainRe"
  "quest\032\027.PredictorTrainResponse\"\0000\001\022R\n\023Pr"
  "edictorGetWeights\022\033.PredictorGetWeightsR"
  "equest\032\034.PredictorGetWeightsResponse\"\000\022\\"
  "\n\035PredictorGetMulticlassMetrics\022\035.Predic"
  "torTrainAndEvalRequest\032\032.MulticlassMetri"
  "csResponse\"\000\022L\n\021PredictorEvaluate\022\031.Pred"
  "ictorEvaluateRequest\032\032.MulticlassMetrics"
  "Response\"\000B\013Z\tpredictorb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2fpredictor_2fpredictor_2eproto_deps[6] = {
  &::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto,
  &::descriptor_table_proto_2fconcept_5ftrainer_5fdump_2fconcept_5ftrainer_5fdump_2eproto,
  &::descriptor_table_proto_2fpredictor_2fpredictor_5fmetrics_2eproto,
  &::descriptor_table_proto_2futils_2fdatabatch_2eproto,
  &::descriptor_table_proto_2futils_2fembedding_2eproto,
  &::descriptor_table_proto_2futils_2frequest_5fmeta_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_2fpredictor_2fpredictor_2eproto_sccs[11] = {
  &scc_info_EvalSpec_proto_2fpredictor_2fpredictor_2eproto.base,
  &scc_info_PredictorEvaluateRequest_proto_2fpredictor_2fpredictor_2eproto.base,
  &scc_info_PredictorGetWeightsRequest_proto_2fpredictor_2fpredictor_2eproto.base,
  &scc_info_PredictorGetWeightsResponse_proto_2fpredictor_2fpredictor_2eproto.base,
  &scc_info_PredictorGetWeightsResponse_WeightsEntry_DoNotUse_proto_2fpredictor_2fpredictor_2eproto.base,
  &scc_info_PredictorPredictRequest_proto_2fpredictor_2fpredictor_2eproto.base,
  &scc_info_PredictorPredictResponse_proto_2fpredictor_2fpredictor_2eproto.base,
  &scc_info_PredictorPredictSQLQueryRequest_proto_2fpredictor_2fpredictor_2eproto.base,
  &scc_info_PredictorTrainAndEvalRequest_proto_2fpredictor_2fpredictor_2eproto.base,
  &scc_info_PredictorTrainRequest_proto_2fpredictor_2fpredictor_2eproto.base,
  &scc_info_PredictorTrainResponse_proto_2fpredictor_2fpredictor_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2fpredictor_2fpredictor_2eproto_once;
static bool descriptor_table_proto_2fpredictor_2fpredictor_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fpredictor_2fpredictor_2eproto = {
  &descriptor_table_proto_2fpredictor_2fpredictor_2eproto_initialized, descriptor_table_protodef_proto_2fpredictor_2fpredictor_2eproto, "proto/predictor/predictor.proto", 2751,
  &descriptor_table_proto_2fpredictor_2fpredictor_2eproto_once, descriptor_table_proto_2fpredictor_2fpredictor_2eproto_sccs, descriptor_table_proto_2fpredictor_2fpredictor_2eproto_deps, 11, 6,
  schemas, file_default_instances, TableStruct_proto_2fpredictor_2fpredictor_2eproto::offsets,
  file_level_metadata_proto_2fpredictor_2fpredictor_2eproto, 11, file_level_enum_descriptors_proto_2fpredictor_2fpredictor_2eproto, file_level_service_descriptors_proto_2fpredictor_2fpredictor_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2fpredictor_2fpredictor_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_2fpredictor_2fpredictor_2eproto), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EvaluationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fpredictor_2fpredictor_2eproto);
  return file_level_enum_descriptors_proto_2fpredictor_2fpredictor_2eproto[0];
}
bool EvaluationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void PredictorPredictRequest::InitAsDefaultInstance() {
  ::_PredictorPredictRequest_default_instance_._instance.get_mutable()->meta_ = const_cast< ::RequestMeta*>(
      ::RequestMeta::internal_default_instance());
  ::_PredictorPredictRequest_default_instance_._instance.get_mutable()->data_ = const_cast< ::DataBatch*>(
      ::DataBatch::internal_default_instance());
}
class PredictorPredictRequest::_Internal {
 public:
  static const ::RequestMeta& meta(const PredictorPredictRequest* msg);
  static const ::DataBatch& data(const PredictorPredictRequest* msg);
};

const ::RequestMeta&
PredictorPredictRequest::_Internal::meta(const PredictorPredictRequest* msg) {
  return *msg->meta_;
}
const ::DataBatch&
PredictorPredictRequest::_Internal::data(const PredictorPredictRequest* msg) {
  return *msg->data_;
}
void PredictorPredictRequest::clear_meta() {
  if (GetArenaNoVirtual() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
}
void PredictorPredictRequest::clear_data() {
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
PredictorPredictRequest::PredictorPredictRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PredictorPredictRequest)
}
PredictorPredictRequest::PredictorPredictRequest(const PredictorPredictRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      aiids_(from.aiids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  trainer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.trainer_name().empty()) {
    trainer_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trainer_name_);
  }
  if (from.has_meta()) {
    meta_ = new ::RequestMeta(*from.meta_);
  } else {
    meta_ = nullptr;
  }
  if (from.has_data()) {
    data_ = new ::DataBatch(*from.data_);
  } else {
    data_ = nullptr;
  }
  ::memcpy(&topk_, &from.topk_,
    static_cast<size_t>(reinterpret_cast<char*>(&echo_aiids_) -
    reinterpret_cast<char*>(&topk_)) + sizeof(echo_aiids_));
  // @@protoc_insertion_point(copy_constructor:PredictorPredictRequest)
}

void PredictorPredictRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PredictorPredictRequest_proto_2fpredictor_2fpredictor_2eproto.base);
  trainer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&meta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&echo_aiids_) -
      reinterpret_cast<char*>(&meta_)) + sizeof(echo_aiids_));
}

PredictorPredictRequest::~PredictorPredictRequest() {
  // @@protoc_insertion_point(destructor:PredictorPredictRequest)
  SharedDtor();
}

void PredictorPredictRequest::SharedDtor() {
  trainer_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete meta_;
  if (this != internal_default_instance()) delete data_;
}

void PredictorPredictRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PredictorPredictRequest& PredictorPredictRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PredictorPredictRequest_proto_2fpredictor_2fpredictor_2eproto.base);
  return *internal_default_instance();
}


void PredictorPredictRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:PredictorPredictRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  aiids_.Clear();
  trainer_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  ::memset(&topk_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&echo_aiids_) -
      reinterpret_cast<char*>(&topk_)) + sizeof(echo_aiids_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PredictorPredictRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .RequestMeta meta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DataBatch data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string trainer_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_trainer_name(), ptr, ctx, "PredictorPredictRequest.trainer_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string aiids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_aiids(), ptr, ctx, "PredictorPredictRequest.aiids");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // int32 topk = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          topk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool echo_aiids = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          echo_aiids_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PredictorPredictRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:PredictorPredictRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .RequestMeta meta = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_meta()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DataBatch data = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string trainer_name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_trainer_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->trainer_name().data(), static_cast<int>(this->trainer_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "PredictorPredictRequest.trainer_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string aiids = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_aiids()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->aiids(this->aiids_size() - 1).data(),
            static_cast<int>(this->aiids(this->aiids_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "PredictorPredictRequest.aiids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 topk = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &topk_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool echo_aiids = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &echo_aiids_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PredictorPredictRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PredictorPredictRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PredictorPredictRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PredictorPredictRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::meta(this), output);
  }

  // .DataBatch data = 2;
  if (this->has_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::data(this), output);
  }

  // string trainer_name = 3;
  if (this->trainer_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->trainer_name().data(), static_cast<int>(this->trainer_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PredictorPredictRequest.trainer_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->trainer_name(), output);
  }

  // repeated string aiids = 4;
  for (int i = 0, n = this->aiids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->aiids(i).data(), static_cast<int>(this->aiids(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PredictorPredictRequest.aiids");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      4, this->aiids(i), output);
  }

  // int32 topk = 5;
  if (this->topk() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->topk(), output);
  }

  // bool echo_aiids = 6;
  if (this->echo_aiids() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->echo_aiids(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PredictorPredictRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* PredictorPredictRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PredictorPredictRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::meta(this), target);
  }

  // .DataBatch data = 2;
  if (this->has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::data(this), target);
  }

  // string trainer_name = 3;
  if (this->trainer_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->trainer_name().data(), static_cast<int>(this->trainer_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PredictorPredictRequest.trainer_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->trainer_name(), target);
  }

  // repeated string aiids = 4;
  for (int i = 0, n = this->aiids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->aiids(i).data(), static_cast<int>(this->aiids(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PredictorPredictRequest.aiids");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(4, this->aiids(i), target);
  }

  // int32 topk = 5;
  if (this->topk() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->topk(), target);
  }

  // bool echo_aiids = 6;
  if (this->echo_aiids() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->echo_aiids(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PredictorPredictRequest)
  return target;
}

size_t PredictorPredictRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PredictorPredictRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string aiids = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->aiids_size());
  for (int i = 0, n = this->aiids_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->aiids(i));
  }

  // string trainer_name = 3;
  if (this->trainer_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->trainer_name());
  }

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meta_);
  }

  // .DataBatch data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // int32 topk = 5;
  if (this->topk() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->topk());
  }

  // bool echo_aiids = 6;
  if (this->echo_aiids() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PredictorPredictRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PredictorPredictRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PredictorPredictRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PredictorPredictRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PredictorPredictRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PredictorPredictRequest)
    MergeFrom(*source);
  }
}

void PredictorPredictRequest::MergeFrom(const PredictorPredictRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PredictorPredictRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  aiids_.MergeFrom(from.aiids_);
  if (from.trainer_name().size() > 0) {

    trainer_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trainer_name_);
  }
  if (from.has_meta()) {
    mutable_meta()->::RequestMeta::MergeFrom(from.meta());
  }
  if (from.has_data()) {
    mutable_data()->::DataBatch::MergeFrom(from.data());
  }
  if (from.topk() != 0) {
    set_topk(from.topk());
  }
  if (from.echo_aiids() != 0) {
    set_echo_aiids(from.echo_aiids());
  }
}

void PredictorPredictRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PredictorPredictRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PredictorPredictRequest::CopyFrom(const PredictorPredictRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PredictorPredictRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredictorPredictRequest::IsInitialized() const {
  return true;
}

void PredictorPredictRequest::InternalSwap(PredictorPredictRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  aiids_.InternalSwap(CastToBase(&other->aiids_));
  trainer_name_.Swap(&other->trainer_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(meta_, other->meta_);
  swap(data_, other->data_);
  swap(topk_, other->topk_);
  swap(echo_aiids_, other->echo_aiids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PredictorPredictRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PredictorPredictSQLQueryRequest::InitAsDefaultInstance() {
  ::_PredictorPredictSQLQueryRequest_default_instance_._instance.get_mutable()->meta_ = const_cast< ::RequestMeta*>(
      ::RequestMeta::internal_default_instance());
}
class PredictorPredictSQLQueryRequest::_Internal {
 public:
  static const ::RequestMeta& meta(const PredictorPredictSQLQueryRequest* msg);
};

const ::RequestMeta&
PredictorPredictSQLQueryRequest::_Internal::meta(const PredictorPredictSQLQueryRequest* msg) {
  return *msg->meta_;
}
void PredictorPredictSQLQueryRequest::clear_meta() {
  if (GetArenaNoVirtual() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
}
PredictorPredictSQLQueryRequest::PredictorPredictSQLQueryRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PredictorPredictSQLQueryRequest)
}
PredictorPredictSQLQueryRequest::PredictorPredictSQLQueryRequest(const PredictorPredictSQLQueryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      aiids_(from.aiids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sql_query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.sql_query().empty()) {
    sql_query_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sql_query_);
  }
  trainer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.trainer_name().empty()) {
    trainer_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trainer_name_);
  }
  if (from.has_meta()) {
    meta_ = new ::RequestMeta(*from.meta_);
  } else {
    meta_ = nullptr;
  }
  ::memcpy(&top_k_data_examples_, &from.top_k_data_examples_,
    static_cast<size_t>(reinterpret_cast<char*>(&echo_aiids_) -
    reinterpret_cast<char*>(&top_k_data_examples_)) + sizeof(echo_aiids_));
  // @@protoc_insertion_point(copy_constructor:PredictorPredictSQLQueryRequest)
}

void PredictorPredictSQLQueryRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PredictorPredictSQLQueryRequest_proto_2fpredictor_2fpredictor_2eproto.base);
  sql_query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trainer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&meta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&echo_aiids_) -
      reinterpret_cast<char*>(&meta_)) + sizeof(echo_aiids_));
}

PredictorPredictSQLQueryRequest::~PredictorPredictSQLQueryRequest() {
  // @@protoc_insertion_point(destructor:PredictorPredictSQLQueryRequest)
  SharedDtor();
}

void PredictorPredictSQLQueryRequest::SharedDtor() {
  sql_query_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trainer_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete meta_;
}

void PredictorPredictSQLQueryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PredictorPredictSQLQueryRequest& PredictorPredictSQLQueryRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PredictorPredictSQLQueryRequest_proto_2fpredictor_2fpredictor_2eproto.base);
  return *internal_default_instance();
}


void PredictorPredictSQLQueryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:PredictorPredictSQLQueryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  aiids_.Clear();
  sql_query_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trainer_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
  ::memset(&top_k_data_examples_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&echo_aiids_) -
      reinterpret_cast<char*>(&top_k_data_examples_)) + sizeof(echo_aiids_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PredictorPredictSQLQueryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .RequestMeta meta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sql_query = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_sql_query(), ptr, ctx, "PredictorPredictSQLQueryRequest.sql_query");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string trainer_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_trainer_name(), ptr, ctx, "PredictorPredictSQLQueryRequest.trainer_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 top_k_data_examples = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          top_k_data_examples_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string aiids = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_aiids(), ptr, ctx, "PredictorPredictSQLQueryRequest.aiids");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // int32 top_k_predictions = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          top_k_predictions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool echo_aiids = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          echo_aiids_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PredictorPredictSQLQueryRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:PredictorPredictSQLQueryRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .RequestMeta meta = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_meta()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sql_query = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_sql_query()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->sql_query().data(), static_cast<int>(this->sql_query().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "PredictorPredictSQLQueryRequest.sql_query"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string trainer_name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_trainer_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->trainer_name().data(), static_cast<int>(this->trainer_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "PredictorPredictSQLQueryRequest.trainer_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 top_k_data_examples = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &top_k_data_examples_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string aiids = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_aiids()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->aiids(this->aiids_size() - 1).data(),
            static_cast<int>(this->aiids(this->aiids_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "PredictorPredictSQLQueryRequest.aiids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 top_k_predictions = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &top_k_predictions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool echo_aiids = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &echo_aiids_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PredictorPredictSQLQueryRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PredictorPredictSQLQueryRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PredictorPredictSQLQueryRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PredictorPredictSQLQueryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::meta(this), output);
  }

  // string sql_query = 2;
  if (this->sql_query().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sql_query().data(), static_cast<int>(this->sql_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PredictorPredictSQLQueryRequest.sql_query");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sql_query(), output);
  }

  // string trainer_name = 3;
  if (this->trainer_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->trainer_name().data(), static_cast<int>(this->trainer_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PredictorPredictSQLQueryRequest.trainer_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->trainer_name(), output);
  }

  // int32 top_k_data_examples = 4;
  if (this->top_k_data_examples() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->top_k_data_examples(), output);
  }

  // repeated string aiids = 5;
  for (int i = 0, n = this->aiids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->aiids(i).data(), static_cast<int>(this->aiids(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PredictorPredictSQLQueryRequest.aiids");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      5, this->aiids(i), output);
  }

  // int32 top_k_predictions = 6;
  if (this->top_k_predictions() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->top_k_predictions(), output);
  }

  // bool echo_aiids = 7;
  if (this->echo_aiids() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->echo_aiids(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PredictorPredictSQLQueryRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* PredictorPredictSQLQueryRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PredictorPredictSQLQueryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::meta(this), target);
  }

  // string sql_query = 2;
  if (this->sql_query().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sql_query().data(), static_cast<int>(this->sql_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PredictorPredictSQLQueryRequest.sql_query");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->sql_query(), target);
  }

  // string trainer_name = 3;
  if (this->trainer_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->trainer_name().data(), static_cast<int>(this->trainer_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PredictorPredictSQLQueryRequest.trainer_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->trainer_name(), target);
  }

  // int32 top_k_data_examples = 4;
  if (this->top_k_data_examples() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->top_k_data_examples(), target);
  }

  // repeated string aiids = 5;
  for (int i = 0, n = this->aiids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->aiids(i).data(), static_cast<int>(this->aiids(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PredictorPredictSQLQueryRequest.aiids");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(5, this->aiids(i), target);
  }

  // int32 top_k_predictions = 6;
  if (this->top_k_predictions() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->top_k_predictions(), target);
  }

  // bool echo_aiids = 7;
  if (this->echo_aiids() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->echo_aiids(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PredictorPredictSQLQueryRequest)
  return target;
}

size_t PredictorPredictSQLQueryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PredictorPredictSQLQueryRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string aiids = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->aiids_size());
  for (int i = 0, n = this->aiids_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->aiids(i));
  }

  // string sql_query = 2;
  if (this->sql_query().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->sql_query());
  }

  // string trainer_name = 3;
  if (this->trainer_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->trainer_name());
  }

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meta_);
  }

  // int32 top_k_data_examples = 4;
  if (this->top_k_data_examples() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->top_k_data_examples());
  }

  // int32 top_k_predictions = 6;
  if (this->top_k_predictions() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->top_k_predictions());
  }

  // bool echo_aiids = 7;
  if (this->echo_aiids() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PredictorPredictSQLQueryRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PredictorPredictSQLQueryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PredictorPredictSQLQueryRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PredictorPredictSQLQueryRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PredictorPredictSQLQueryRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PredictorPredictSQLQueryRequest)
    MergeFrom(*source);
  }
}

void PredictorPredictSQLQueryRequest::MergeFrom(const PredictorPredictSQLQueryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PredictorPredictSQLQueryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  aiids_.MergeFrom(from.aiids_);
  if (from.sql_query().size() > 0) {

    sql_query_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sql_query_);
  }
  if (from.trainer_name().size() > 0) {

    trainer_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trainer_name_);
  }
  if (from.has_meta()) {
    mutable_meta()->::RequestMeta::MergeFrom(from.meta());
  }
  if (from.top_k_data_examples() != 0) {
    set_top_k_data_examples(from.top_k_data_examples());
  }
  if (from.top_k_predictions() != 0) {
    set_top_k_predictions(from.top_k_predictions());
  }
  if (from.echo_aiids() != 0) {
    set_echo_aiids(from.echo_aiids());
  }
}

void PredictorPredictSQLQueryRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PredictorPredictSQLQueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PredictorPredictSQLQueryRequest::CopyFrom(const PredictorPredictSQLQueryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PredictorPredictSQLQueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredictorPredictSQLQueryRequest::IsInitialized() const {
  return true;
}

void PredictorPredictSQLQueryRequest::InternalSwap(PredictorPredictSQLQueryRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  aiids_.InternalSwap(CastToBase(&other->aiids_));
  sql_query_.Swap(&other->sql_query_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  trainer_name_.Swap(&other->trainer_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(meta_, other->meta_);
  swap(top_k_data_examples_, other->top_k_data_examples_);
  swap(top_k_predictions_, other->top_k_predictions_);
  swap(echo_aiids_, other->echo_aiids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PredictorPredictSQLQueryRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PredictorPredictResponse::InitAsDefaultInstance() {
  ::_PredictorPredictResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::ResponseStatus*>(
      ::ResponseStatus::internal_default_instance());
  ::_PredictorPredictResponse_default_instance_._instance.get_mutable()->results_ = const_cast< ::DataBatch*>(
      ::DataBatch::internal_default_instance());
}
class PredictorPredictResponse::_Internal {
 public:
  static const ::ResponseStatus& status(const PredictorPredictResponse* msg);
  static const ::DataBatch& results(const PredictorPredictResponse* msg);
};

const ::ResponseStatus&
PredictorPredictResponse::_Internal::status(const PredictorPredictResponse* msg) {
  return *msg->status_;
}
const ::DataBatch&
PredictorPredictResponse::_Internal::results(const PredictorPredictResponse* msg) {
  return *msg->results_;
}
void PredictorPredictResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void PredictorPredictResponse::clear_results() {
  if (GetArenaNoVirtual() == nullptr && results_ != nullptr) {
    delete results_;
  }
  results_ = nullptr;
}
PredictorPredictResponse::PredictorPredictResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PredictorPredictResponse)
}
PredictorPredictResponse::PredictorPredictResponse(const PredictorPredictResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      aiids_(from.aiids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::ResponseStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from.has_results()) {
    results_ = new ::DataBatch(*from.results_);
  } else {
    results_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PredictorPredictResponse)
}

void PredictorPredictResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PredictorPredictResponse_proto_2fpredictor_2fpredictor_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&results_) -
      reinterpret_cast<char*>(&status_)) + sizeof(results_));
}

PredictorPredictResponse::~PredictorPredictResponse() {
  // @@protoc_insertion_point(destructor:PredictorPredictResponse)
  SharedDtor();
}

void PredictorPredictResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete results_;
}

void PredictorPredictResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PredictorPredictResponse& PredictorPredictResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PredictorPredictResponse_proto_2fpredictor_2fpredictor_2eproto.base);
  return *internal_default_instance();
}


void PredictorPredictResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:PredictorPredictResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  aiids_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && results_ != nullptr) {
    delete results_;
  }
  results_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PredictorPredictResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ResponseStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DataBatch results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_results(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string aiids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_aiids(), ptr, ctx, "PredictorPredictResponse.aiids");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PredictorPredictResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:PredictorPredictResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ResponseStatus status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DataBatch results = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string aiids = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_aiids()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->aiids(this->aiids_size() - 1).data(),
            static_cast<int>(this->aiids(this->aiids_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "PredictorPredictResponse.aiids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PredictorPredictResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PredictorPredictResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PredictorPredictResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PredictorPredictResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::status(this), output);
  }

  // .DataBatch results = 2;
  if (this->has_results()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::results(this), output);
  }

  // repeated string aiids = 3;
  for (int i = 0, n = this->aiids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->aiids(i).data(), static_cast<int>(this->aiids(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PredictorPredictResponse.aiids");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      3, this->aiids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PredictorPredictResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* PredictorPredictResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PredictorPredictResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::status(this), target);
  }

  // .DataBatch results = 2;
  if (this->has_results()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::results(this), target);
  }

  // repeated string aiids = 3;
  for (int i = 0, n = this->aiids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->aiids(i).data(), static_cast<int>(this->aiids(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PredictorPredictResponse.aiids");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(3, this->aiids(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PredictorPredictResponse)
  return target;
}

size_t PredictorPredictResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PredictorPredictResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string aiids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->aiids_size());
  for (int i = 0, n = this->aiids_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->aiids(i));
  }

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .DataBatch results = 2;
  if (this->has_results()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *results_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PredictorPredictResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PredictorPredictResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PredictorPredictResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PredictorPredictResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PredictorPredictResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PredictorPredictResponse)
    MergeFrom(*source);
  }
}

void PredictorPredictResponse::MergeFrom(const PredictorPredictResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PredictorPredictResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  aiids_.MergeFrom(from.aiids_);
  if (from.has_status()) {
    mutable_status()->::ResponseStatus::MergeFrom(from.status());
  }
  if (from.has_results()) {
    mutable_results()->::DataBatch::MergeFrom(from.results());
  }
}

void PredictorPredictResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PredictorPredictResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PredictorPredictResponse::CopyFrom(const PredictorPredictResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PredictorPredictResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredictorPredictResponse::IsInitialized() const {
  return true;
}

void PredictorPredictResponse::InternalSwap(PredictorPredictResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  aiids_.InternalSwap(CastToBase(&other->aiids_));
  swap(status_, other->status_);
  swap(results_, other->results_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PredictorPredictResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PredictorTrainAndEvalRequest::InitAsDefaultInstance() {
  ::_PredictorTrainAndEvalRequest_default_instance_._instance.get_mutable()->meta_ = const_cast< ::RequestMeta*>(
      ::RequestMeta::internal_default_instance());
  ::_PredictorTrainAndEvalRequest_default_instance_._instance.get_mutable()->train_request_ = const_cast< ::PredictorTrainRequest*>(
      ::PredictorTrainRequest::internal_default_instance());
  ::_PredictorTrainAndEvalRequest_default_instance_._instance.get_mutable()->eval_spec_ = const_cast< ::EvalSpec*>(
      ::EvalSpec::internal_default_instance());
}
class PredictorTrainAndEvalRequest::_Internal {
 public:
  static const ::RequestMeta& meta(const PredictorTrainAndEvalRequest* msg);
  static const ::PredictorTrainRequest& train_request(const PredictorTrainAndEvalRequest* msg);
  static const ::EvalSpec& eval_spec(const PredictorTrainAndEvalRequest* msg);
};

const ::RequestMeta&
PredictorTrainAndEvalRequest::_Internal::meta(const PredictorTrainAndEvalRequest* msg) {
  return *msg->meta_;
}
const ::PredictorTrainRequest&
PredictorTrainAndEvalRequest::_Internal::train_request(const PredictorTrainAndEvalRequest* msg) {
  return *msg->train_request_;
}
const ::EvalSpec&
PredictorTrainAndEvalRequest::_Internal::eval_spec(const PredictorTrainAndEvalRequest* msg) {
  return *msg->eval_spec_;
}
void PredictorTrainAndEvalRequest::clear_meta() {
  if (GetArenaNoVirtual() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
}
PredictorTrainAndEvalRequest::PredictorTrainAndEvalRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PredictorTrainAndEvalRequest)
}
PredictorTrainAndEvalRequest::PredictorTrainAndEvalRequest(const PredictorTrainAndEvalRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_meta()) {
    meta_ = new ::RequestMeta(*from.meta_);
  } else {
    meta_ = nullptr;
  }
  if (from.has_train_request()) {
    train_request_ = new ::PredictorTrainRequest(*from.train_request_);
  } else {
    train_request_ = nullptr;
  }
  if (from.has_eval_spec()) {
    eval_spec_ = new ::EvalSpec(*from.eval_spec_);
  } else {
    eval_spec_ = nullptr;
  }
  use_kfold_ = from.use_kfold_;
  // @@protoc_insertion_point(copy_constructor:PredictorTrainAndEvalRequest)
}

void PredictorTrainAndEvalRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PredictorTrainAndEvalRequest_proto_2fpredictor_2fpredictor_2eproto.base);
  ::memset(&meta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_kfold_) -
      reinterpret_cast<char*>(&meta_)) + sizeof(use_kfold_));
}

PredictorTrainAndEvalRequest::~PredictorTrainAndEvalRequest() {
  // @@protoc_insertion_point(destructor:PredictorTrainAndEvalRequest)
  SharedDtor();
}

void PredictorTrainAndEvalRequest::SharedDtor() {
  if (this != internal_default_instance()) delete meta_;
  if (this != internal_default_instance()) delete train_request_;
  if (this != internal_default_instance()) delete eval_spec_;
}

void PredictorTrainAndEvalRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PredictorTrainAndEvalRequest& PredictorTrainAndEvalRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PredictorTrainAndEvalRequest_proto_2fpredictor_2fpredictor_2eproto.base);
  return *internal_default_instance();
}


void PredictorTrainAndEvalRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:PredictorTrainAndEvalRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && train_request_ != nullptr) {
    delete train_request_;
  }
  train_request_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && eval_spec_ != nullptr) {
    delete eval_spec_;
  }
  eval_spec_ = nullptr;
  use_kfold_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PredictorTrainAndEvalRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .RequestMeta meta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PredictorTrainRequest train_request = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_train_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .EvalSpec eval_spec = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_eval_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool use_kfold = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          use_kfold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PredictorTrainAndEvalRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:PredictorTrainAndEvalRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .RequestMeta meta = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_meta()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PredictorTrainRequest train_request = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_train_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .EvalSpec eval_spec = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_eval_spec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_kfold = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_kfold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PredictorTrainAndEvalRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PredictorTrainAndEvalRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PredictorTrainAndEvalRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PredictorTrainAndEvalRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::meta(this), output);
  }

  // .PredictorTrainRequest train_request = 2;
  if (this->has_train_request()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::train_request(this), output);
  }

  // .EvalSpec eval_spec = 3;
  if (this->has_eval_spec()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::eval_spec(this), output);
  }

  // bool use_kfold = 4;
  if (this->use_kfold() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->use_kfold(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PredictorTrainAndEvalRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* PredictorTrainAndEvalRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PredictorTrainAndEvalRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::meta(this), target);
  }

  // .PredictorTrainRequest train_request = 2;
  if (this->has_train_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::train_request(this), target);
  }

  // .EvalSpec eval_spec = 3;
  if (this->has_eval_spec()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::eval_spec(this), target);
  }

  // bool use_kfold = 4;
  if (this->use_kfold() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->use_kfold(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PredictorTrainAndEvalRequest)
  return target;
}

size_t PredictorTrainAndEvalRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PredictorTrainAndEvalRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meta_);
  }

  // .PredictorTrainRequest train_request = 2;
  if (this->has_train_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *train_request_);
  }

  // .EvalSpec eval_spec = 3;
  if (this->has_eval_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *eval_spec_);
  }

  // bool use_kfold = 4;
  if (this->use_kfold() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PredictorTrainAndEvalRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PredictorTrainAndEvalRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PredictorTrainAndEvalRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PredictorTrainAndEvalRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PredictorTrainAndEvalRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PredictorTrainAndEvalRequest)
    MergeFrom(*source);
  }
}

void PredictorTrainAndEvalRequest::MergeFrom(const PredictorTrainAndEvalRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PredictorTrainAndEvalRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_meta()) {
    mutable_meta()->::RequestMeta::MergeFrom(from.meta());
  }
  if (from.has_train_request()) {
    mutable_train_request()->::PredictorTrainRequest::MergeFrom(from.train_request());
  }
  if (from.has_eval_spec()) {
    mutable_eval_spec()->::EvalSpec::MergeFrom(from.eval_spec());
  }
  if (from.use_kfold() != 0) {
    set_use_kfold(from.use_kfold());
  }
}

void PredictorTrainAndEvalRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PredictorTrainAndEvalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PredictorTrainAndEvalRequest::CopyFrom(const PredictorTrainAndEvalRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PredictorTrainAndEvalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredictorTrainAndEvalRequest::IsInitialized() const {
  return true;
}

void PredictorTrainAndEvalRequest::InternalSwap(PredictorTrainAndEvalRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(meta_, other->meta_);
  swap(train_request_, other->train_request_);
  swap(eval_spec_, other->eval_spec_);
  swap(use_kfold_, other->use_kfold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PredictorTrainAndEvalRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PredictorTrainRequest::InitAsDefaultInstance() {
  ::_PredictorTrainRequest_default_instance_._instance.get_mutable()->meta_ = const_cast< ::RequestMeta*>(
      ::RequestMeta::internal_default_instance());
  ::_PredictorTrainRequest_default_instance_.data_ = const_cast< ::DataBatch*>(
      ::DataBatch::internal_default_instance());
  ::_PredictorTrainRequest_default_instance_.sql_query_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
class PredictorTrainRequest::_Internal {
 public:
  static const ::RequestMeta& meta(const PredictorTrainRequest* msg);
  static const ::DataBatch& data(const PredictorTrainRequest* msg);
};

const ::RequestMeta&
PredictorTrainRequest::_Internal::meta(const PredictorTrainRequest* msg) {
  return *msg->meta_;
}
const ::DataBatch&
PredictorTrainRequest::_Internal::data(const PredictorTrainRequest* msg) {
  return *msg->training_data_.data_;
}
void PredictorTrainRequest::clear_meta() {
  if (GetArenaNoVirtual() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
}
void PredictorTrainRequest::set_allocated_data(::DataBatch* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_training_data();
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    set_has_data();
    training_data_.data_ = data;
  }
  // @@protoc_insertion_point(field_set_allocated:PredictorTrainRequest.data)
}
void PredictorTrainRequest::clear_data() {
  if (has_data()) {
    delete training_data_.data_;
    clear_has_training_data();
  }
}
PredictorTrainRequest::PredictorTrainRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PredictorTrainRequest)
}
PredictorTrainRequest::PredictorTrainRequest(const PredictorTrainRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      aiids_(from.aiids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  trainer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.trainer_name().empty()) {
    trainer_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trainer_name_);
  }
  embeddings_model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.embeddings_model().empty()) {
    embeddings_model_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.embeddings_model_);
  }
  hyper_parameters_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.hyper_parameters().empty()) {
    hyper_parameters_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hyper_parameters_);
  }
  if (from.has_meta()) {
    meta_ = new ::RequestMeta(*from.meta_);
  } else {
    meta_ = nullptr;
  }
  ::memcpy(&use_prev_trained_, &from.use_prev_trained_,
    static_cast<size_t>(reinterpret_cast<char*>(&missing_positive_example_policy_) -
    reinterpret_cast<char*>(&use_prev_trained_)) + sizeof(missing_positive_example_policy_));
  clear_has_training_data();
  switch (from.training_data_case()) {
    case kData: {
      mutable_data()->::DataBatch::MergeFrom(from.data());
      break;
    }
    case kSqlQuery: {
      set_sql_query(from.sql_query());
      break;
    }
    case TRAINING_DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:PredictorTrainRequest)
}

void PredictorTrainRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PredictorTrainRequest_proto_2fpredictor_2fpredictor_2eproto.base);
  trainer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  embeddings_model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hyper_parameters_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&meta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&missing_positive_example_policy_) -
      reinterpret_cast<char*>(&meta_)) + sizeof(missing_positive_example_policy_));
  clear_has_training_data();
}

PredictorTrainRequest::~PredictorTrainRequest() {
  // @@protoc_insertion_point(destructor:PredictorTrainRequest)
  SharedDtor();
}

void PredictorTrainRequest::SharedDtor() {
  trainer_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  embeddings_model_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hyper_parameters_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete meta_;
  if (has_training_data()) {
    clear_training_data();
  }
}

void PredictorTrainRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PredictorTrainRequest& PredictorTrainRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PredictorTrainRequest_proto_2fpredictor_2fpredictor_2eproto.base);
  return *internal_default_instance();
}


void PredictorTrainRequest::clear_training_data() {
// @@protoc_insertion_point(one_of_clear_start:PredictorTrainRequest)
  switch (training_data_case()) {
    case kData: {
      delete training_data_.data_;
      break;
    }
    case kSqlQuery: {
      training_data_.sql_query_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case TRAINING_DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TRAINING_DATA_NOT_SET;
}


void PredictorTrainRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:PredictorTrainRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  aiids_.Clear();
  trainer_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  embeddings_model_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hyper_parameters_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
  ::memset(&use_prev_trained_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&missing_positive_example_policy_) -
      reinterpret_cast<char*>(&use_prev_trained_)) + sizeof(missing_positive_example_policy_));
  clear_training_data();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PredictorTrainRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .RequestMeta meta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string trainer_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_trainer_name(), ptr, ctx, "PredictorTrainRequest.trainer_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool use_prev_trained = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          use_prev_trained_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TrainingType training_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_training_type(static_cast<::TrainingType>(val));
        } else goto handle_unusual;
        continue;
      // string embeddings_model = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_embeddings_model(), ptr, ctx, "PredictorTrainRequest.embeddings_model");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string aiids = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_aiids(), ptr, ctx, "PredictorTrainRequest.aiids");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // int32 train_iters = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          train_iters_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TrainingEnvironment training_environment = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_training_environment(static_cast<::TrainingEnvironment>(val));
        } else goto handle_unusual;
        continue;
      // string hyper_parameters = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_hyper_parameters(), ptr, ctx, "PredictorTrainRequest.hyper_parameters");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MissingPositiveExamplePolicy missing_positive_example_policy = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_missing_positive_example_policy(static_cast<::MissingPositiveExamplePolicy>(val));
        } else goto handle_unusual;
        continue;
      // .DataBatch data = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sql_query = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_sql_query(), ptr, ctx, "PredictorTrainRequest.sql_query");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PredictorTrainRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:PredictorTrainRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .RequestMeta meta = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_meta()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string trainer_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_trainer_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->trainer_name().data(), static_cast<int>(this->trainer_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "PredictorTrainRequest.trainer_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_prev_trained = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_prev_trained_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TrainingType training_type = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_training_type(static_cast< ::TrainingType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string embeddings_model = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_embeddings_model()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->embeddings_model().data(), static_cast<int>(this->embeddings_model().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "PredictorTrainRequest.embeddings_model"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string aiids = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_aiids()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->aiids(this->aiids_size() - 1).data(),
            static_cast<int>(this->aiids(this->aiids_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "PredictorTrainRequest.aiids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 train_iters = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &train_iters_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TrainingEnvironment training_environment = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_training_environment(static_cast< ::TrainingEnvironment >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string hyper_parameters = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_hyper_parameters()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->hyper_parameters().data(), static_cast<int>(this->hyper_parameters().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "PredictorTrainRequest.hyper_parameters"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MissingPositiveExamplePolicy missing_positive_example_policy = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_missing_positive_example_policy(static_cast< ::MissingPositiveExamplePolicy >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DataBatch data = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sql_query = 101;
      case 101: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (810 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_sql_query()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->sql_query().data(), static_cast<int>(this->sql_query().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "PredictorTrainRequest.sql_query"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PredictorTrainRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PredictorTrainRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PredictorTrainRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PredictorTrainRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::meta(this), output);
  }

  // string trainer_name = 2;
  if (this->trainer_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->trainer_name().data(), static_cast<int>(this->trainer_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PredictorTrainRequest.trainer_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->trainer_name(), output);
  }

  // bool use_prev_trained = 3;
  if (this->use_prev_trained() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->use_prev_trained(), output);
  }

  // .TrainingType training_type = 4;
  if (this->training_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->training_type(), output);
  }

  // string embeddings_model = 5;
  if (this->embeddings_model().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->embeddings_model().data(), static_cast<int>(this->embeddings_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PredictorTrainRequest.embeddings_model");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->embeddings_model(), output);
  }

  // repeated string aiids = 6;
  for (int i = 0, n = this->aiids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->aiids(i).data(), static_cast<int>(this->aiids(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PredictorTrainRequest.aiids");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      6, this->aiids(i), output);
  }

  // int32 train_iters = 7;
  if (this->train_iters() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->train_iters(), output);
  }

  // .TrainingEnvironment training_environment = 8;
  if (this->training_environment() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      8, this->training_environment(), output);
  }

  // string hyper_parameters = 9;
  if (this->hyper_parameters().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->hyper_parameters().data(), static_cast<int>(this->hyper_parameters().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PredictorTrainRequest.hyper_parameters");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->hyper_parameters(), output);
  }

  // .MissingPositiveExamplePolicy missing_positive_example_policy = 10;
  if (this->missing_positive_example_policy() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      10, this->missing_positive_example_policy(), output);
  }

  // .DataBatch data = 100;
  if (has_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, _Internal::data(this), output);
  }

  // string sql_query = 101;
  if (has_sql_query()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sql_query().data(), static_cast<int>(this->sql_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PredictorTrainRequest.sql_query");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      101, this->sql_query(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PredictorTrainRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* PredictorTrainRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PredictorTrainRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::meta(this), target);
  }

  // string trainer_name = 2;
  if (this->trainer_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->trainer_name().data(), static_cast<int>(this->trainer_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PredictorTrainRequest.trainer_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->trainer_name(), target);
  }

  // bool use_prev_trained = 3;
  if (this->use_prev_trained() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->use_prev_trained(), target);
  }

  // .TrainingType training_type = 4;
  if (this->training_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->training_type(), target);
  }

  // string embeddings_model = 5;
  if (this->embeddings_model().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->embeddings_model().data(), static_cast<int>(this->embeddings_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PredictorTrainRequest.embeddings_model");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->embeddings_model(), target);
  }

  // repeated string aiids = 6;
  for (int i = 0, n = this->aiids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->aiids(i).data(), static_cast<int>(this->aiids(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PredictorTrainRequest.aiids");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(6, this->aiids(i), target);
  }

  // int32 train_iters = 7;
  if (this->train_iters() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->train_iters(), target);
  }

  // .TrainingEnvironment training_environment = 8;
  if (this->training_environment() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->training_environment(), target);
  }

  // string hyper_parameters = 9;
  if (this->hyper_parameters().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->hyper_parameters().data(), static_cast<int>(this->hyper_parameters().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PredictorTrainRequest.hyper_parameters");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        9, this->hyper_parameters(), target);
  }

  // .MissingPositiveExamplePolicy missing_positive_example_policy = 10;
  if (this->missing_positive_example_policy() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->missing_positive_example_policy(), target);
  }

  // .DataBatch data = 100;
  if (has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        100, _Internal::data(this), target);
  }

  // string sql_query = 101;
  if (has_sql_query()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sql_query().data(), static_cast<int>(this->sql_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PredictorTrainRequest.sql_query");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        101, this->sql_query(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PredictorTrainRequest)
  return target;
}

size_t PredictorTrainRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PredictorTrainRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string aiids = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->aiids_size());
  for (int i = 0, n = this->aiids_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->aiids(i));
  }

  // string trainer_name = 2;
  if (this->trainer_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->trainer_name());
  }

  // string embeddings_model = 5;
  if (this->embeddings_model().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->embeddings_model());
  }

  // string hyper_parameters = 9;
  if (this->hyper_parameters().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->hyper_parameters());
  }

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meta_);
  }

  // bool use_prev_trained = 3;
  if (this->use_prev_trained() != 0) {
    total_size += 1 + 1;
  }

  // .TrainingType training_type = 4;
  if (this->training_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->training_type());
  }

  // int32 train_iters = 7;
  if (this->train_iters() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->train_iters());
  }

  // .TrainingEnvironment training_environment = 8;
  if (this->training_environment() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->training_environment());
  }

  // .MissingPositiveExamplePolicy missing_positive_example_policy = 10;
  if (this->missing_positive_example_policy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->missing_positive_example_policy());
  }

  switch (training_data_case()) {
    // .DataBatch data = 100;
    case kData: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *training_data_.data_);
      break;
    }
    // string sql_query = 101;
    case kSqlQuery: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->sql_query());
      break;
    }
    case TRAINING_DATA_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PredictorTrainRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PredictorTrainRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PredictorTrainRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PredictorTrainRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PredictorTrainRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PredictorTrainRequest)
    MergeFrom(*source);
  }
}

void PredictorTrainRequest::MergeFrom(const PredictorTrainRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PredictorTrainRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  aiids_.MergeFrom(from.aiids_);
  if (from.trainer_name().size() > 0) {

    trainer_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trainer_name_);
  }
  if (from.embeddings_model().size() > 0) {

    embeddings_model_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.embeddings_model_);
  }
  if (from.hyper_parameters().size() > 0) {

    hyper_parameters_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hyper_parameters_);
  }
  if (from.has_meta()) {
    mutable_meta()->::RequestMeta::MergeFrom(from.meta());
  }
  if (from.use_prev_trained() != 0) {
    set_use_prev_trained(from.use_prev_trained());
  }
  if (from.training_type() != 0) {
    set_training_type(from.training_type());
  }
  if (from.train_iters() != 0) {
    set_train_iters(from.train_iters());
  }
  if (from.training_environment() != 0) {
    set_training_environment(from.training_environment());
  }
  if (from.missing_positive_example_policy() != 0) {
    set_missing_positive_example_policy(from.missing_positive_example_policy());
  }
  switch (from.training_data_case()) {
    case kData: {
      mutable_data()->::DataBatch::MergeFrom(from.data());
      break;
    }
    case kSqlQuery: {
      set_sql_query(from.sql_query());
      break;
    }
    case TRAINING_DATA_NOT_SET: {
      break;
    }
  }
}

void PredictorTrainRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PredictorTrainRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PredictorTrainRequest::CopyFrom(const PredictorTrainRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PredictorTrainRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredictorTrainRequest::IsInitialized() const {
  return true;
}

void PredictorTrainRequest::InternalSwap(PredictorTrainRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  aiids_.InternalSwap(CastToBase(&other->aiids_));
  trainer_name_.Swap(&other->trainer_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  embeddings_model_.Swap(&other->embeddings_model_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hyper_parameters_.Swap(&other->hyper_parameters_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(meta_, other->meta_);
  swap(use_prev_trained_, other->use_prev_trained_);
  swap(training_type_, other->training_type_);
  swap(train_iters_, other->train_iters_);
  swap(training_environment_, other->training_environment_);
  swap(missing_positive_example_policy_, other->missing_positive_example_policy_);
  swap(training_data_, other->training_data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PredictorTrainRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PredictorTrainResponse::InitAsDefaultInstance() {
  ::_PredictorTrainResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::ResponseStatus*>(
      ::ResponseStatus::internal_default_instance());
  ::_PredictorTrainResponse_default_instance_._instance.get_mutable()->trainer_ = const_cast< ::ConceptTrainerDump*>(
      ::ConceptTrainerDump::internal_default_instance());
  ::_PredictorTrainResponse_default_instance_._instance.get_mutable()->progress_status_ = const_cast< ::ProgressStatus*>(
      ::ProgressStatus::internal_default_instance());
}
class PredictorTrainResponse::_Internal {
 public:
  static const ::ResponseStatus& status(const PredictorTrainResponse* msg);
  static const ::ConceptTrainerDump& trainer(const PredictorTrainResponse* msg);
  static const ::ProgressStatus& progress_status(const PredictorTrainResponse* msg);
};

const ::ResponseStatus&
PredictorTrainResponse::_Internal::status(const PredictorTrainResponse* msg) {
  return *msg->status_;
}
const ::ConceptTrainerDump&
PredictorTrainResponse::_Internal::trainer(const PredictorTrainResponse* msg) {
  return *msg->trainer_;
}
const ::ProgressStatus&
PredictorTrainResponse::_Internal::progress_status(const PredictorTrainResponse* msg) {
  return *msg->progress_status_;
}
void PredictorTrainResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void PredictorTrainResponse::clear_trainer() {
  if (GetArenaNoVirtual() == nullptr && trainer_ != nullptr) {
    delete trainer_;
  }
  trainer_ = nullptr;
}
void PredictorTrainResponse::clear_progress_status() {
  if (GetArenaNoVirtual() == nullptr && progress_status_ != nullptr) {
    delete progress_status_;
  }
  progress_status_ = nullptr;
}
PredictorTrainResponse::PredictorTrainResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PredictorTrainResponse)
}
PredictorTrainResponse::PredictorTrainResponse(const PredictorTrainResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      failed_aiids_(from.failed_aiids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::ResponseStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from.has_trainer()) {
    trainer_ = new ::ConceptTrainerDump(*from.trainer_);
  } else {
    trainer_ = nullptr;
  }
  if (from.has_progress_status()) {
    progress_status_ = new ::ProgressStatus(*from.progress_status_);
  } else {
    progress_status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PredictorTrainResponse)
}

void PredictorTrainResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PredictorTrainResponse_proto_2fpredictor_2fpredictor_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&progress_status_) -
      reinterpret_cast<char*>(&status_)) + sizeof(progress_status_));
}

PredictorTrainResponse::~PredictorTrainResponse() {
  // @@protoc_insertion_point(destructor:PredictorTrainResponse)
  SharedDtor();
}

void PredictorTrainResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete trainer_;
  if (this != internal_default_instance()) delete progress_status_;
}

void PredictorTrainResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PredictorTrainResponse& PredictorTrainResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PredictorTrainResponse_proto_2fpredictor_2fpredictor_2eproto.base);
  return *internal_default_instance();
}


void PredictorTrainResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:PredictorTrainResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  failed_aiids_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && trainer_ != nullptr) {
    delete trainer_;
  }
  trainer_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && progress_status_ != nullptr) {
    delete progress_status_;
  }
  progress_status_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PredictorTrainResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ResponseStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ConceptTrainerDump trainer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_trainer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string failed_aiids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_failed_aiids(), ptr, ctx, "PredictorTrainResponse.failed_aiids");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // .ProgressStatus progress_status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_progress_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PredictorTrainResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:PredictorTrainResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ResponseStatus status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ConceptTrainerDump trainer = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_trainer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string failed_aiids = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_failed_aiids()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->failed_aiids(this->failed_aiids_size() - 1).data(),
            static_cast<int>(this->failed_aiids(this->failed_aiids_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "PredictorTrainResponse.failed_aiids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ProgressStatus progress_status = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_progress_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PredictorTrainResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PredictorTrainResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PredictorTrainResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PredictorTrainResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::status(this), output);
  }

  // .ConceptTrainerDump trainer = 2;
  if (this->has_trainer()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::trainer(this), output);
  }

  // repeated string failed_aiids = 3;
  for (int i = 0, n = this->failed_aiids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->failed_aiids(i).data(), static_cast<int>(this->failed_aiids(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PredictorTrainResponse.failed_aiids");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      3, this->failed_aiids(i), output);
  }

  // .ProgressStatus progress_status = 4;
  if (this->has_progress_status()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::progress_status(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PredictorTrainResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* PredictorTrainResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PredictorTrainResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::status(this), target);
  }

  // .ConceptTrainerDump trainer = 2;
  if (this->has_trainer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::trainer(this), target);
  }

  // repeated string failed_aiids = 3;
  for (int i = 0, n = this->failed_aiids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->failed_aiids(i).data(), static_cast<int>(this->failed_aiids(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PredictorTrainResponse.failed_aiids");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(3, this->failed_aiids(i), target);
  }

  // .ProgressStatus progress_status = 4;
  if (this->has_progress_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::progress_status(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PredictorTrainResponse)
  return target;
}

size_t PredictorTrainResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PredictorTrainResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string failed_aiids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->failed_aiids_size());
  for (int i = 0, n = this->failed_aiids_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->failed_aiids(i));
  }

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .ConceptTrainerDump trainer = 2;
  if (this->has_trainer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trainer_);
  }

  // .ProgressStatus progress_status = 4;
  if (this->has_progress_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *progress_status_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PredictorTrainResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PredictorTrainResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PredictorTrainResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PredictorTrainResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PredictorTrainResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PredictorTrainResponse)
    MergeFrom(*source);
  }
}

void PredictorTrainResponse::MergeFrom(const PredictorTrainResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PredictorTrainResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  failed_aiids_.MergeFrom(from.failed_aiids_);
  if (from.has_status()) {
    mutable_status()->::ResponseStatus::MergeFrom(from.status());
  }
  if (from.has_trainer()) {
    mutable_trainer()->::ConceptTrainerDump::MergeFrom(from.trainer());
  }
  if (from.has_progress_status()) {
    mutable_progress_status()->::ProgressStatus::MergeFrom(from.progress_status());
  }
}

void PredictorTrainResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PredictorTrainResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PredictorTrainResponse::CopyFrom(const PredictorTrainResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PredictorTrainResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredictorTrainResponse::IsInitialized() const {
  return true;
}

void PredictorTrainResponse::InternalSwap(PredictorTrainResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  failed_aiids_.InternalSwap(CastToBase(&other->failed_aiids_));
  swap(status_, other->status_);
  swap(trainer_, other->trainer_);
  swap(progress_status_, other->progress_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PredictorTrainResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PredictorGetWeightsRequest::InitAsDefaultInstance() {
  ::_PredictorGetWeightsRequest_default_instance_._instance.get_mutable()->meta_ = const_cast< ::RequestMeta*>(
      ::RequestMeta::internal_default_instance());
}
class PredictorGetWeightsRequest::_Internal {
 public:
  static const ::RequestMeta& meta(const PredictorGetWeightsRequest* msg);
};

const ::RequestMeta&
PredictorGetWeightsRequest::_Internal::meta(const PredictorGetWeightsRequest* msg) {
  return *msg->meta_;
}
void PredictorGetWeightsRequest::clear_meta() {
  if (GetArenaNoVirtual() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
}
PredictorGetWeightsRequest::PredictorGetWeightsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PredictorGetWeightsRequest)
}
PredictorGetWeightsRequest::PredictorGetWeightsRequest(const PredictorGetWeightsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  trainer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.trainer_name().empty()) {
    trainer_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trainer_name_);
  }
  embeddings_model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.embeddings_model().empty()) {
    embeddings_model_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.embeddings_model_);
  }
  if (from.has_meta()) {
    meta_ = new ::RequestMeta(*from.meta_);
  } else {
    meta_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PredictorGetWeightsRequest)
}

void PredictorGetWeightsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PredictorGetWeightsRequest_proto_2fpredictor_2fpredictor_2eproto.base);
  trainer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  embeddings_model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  meta_ = nullptr;
}

PredictorGetWeightsRequest::~PredictorGetWeightsRequest() {
  // @@protoc_insertion_point(destructor:PredictorGetWeightsRequest)
  SharedDtor();
}

void PredictorGetWeightsRequest::SharedDtor() {
  trainer_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  embeddings_model_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete meta_;
}

void PredictorGetWeightsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PredictorGetWeightsRequest& PredictorGetWeightsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PredictorGetWeightsRequest_proto_2fpredictor_2fpredictor_2eproto.base);
  return *internal_default_instance();
}


void PredictorGetWeightsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:PredictorGetWeightsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trainer_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  embeddings_model_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PredictorGetWeightsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .RequestMeta meta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string trainer_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_trainer_name(), ptr, ctx, "PredictorGetWeightsRequest.trainer_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string embeddings_model = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_embeddings_model(), ptr, ctx, "PredictorGetWeightsRequest.embeddings_model");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PredictorGetWeightsRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:PredictorGetWeightsRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .RequestMeta meta = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_meta()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string trainer_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_trainer_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->trainer_name().data(), static_cast<int>(this->trainer_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "PredictorGetWeightsRequest.trainer_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string embeddings_model = 5 [deprecated = true];
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_embeddings_model()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->embeddings_model().data(), static_cast<int>(this->embeddings_model().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "PredictorGetWeightsRequest.embeddings_model"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PredictorGetWeightsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PredictorGetWeightsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PredictorGetWeightsRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PredictorGetWeightsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::meta(this), output);
  }

  // string trainer_name = 2;
  if (this->trainer_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->trainer_name().data(), static_cast<int>(this->trainer_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PredictorGetWeightsRequest.trainer_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->trainer_name(), output);
  }

  // string embeddings_model = 5 [deprecated = true];
  if (this->embeddings_model().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->embeddings_model().data(), static_cast<int>(this->embeddings_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PredictorGetWeightsRequest.embeddings_model");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->embeddings_model(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PredictorGetWeightsRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* PredictorGetWeightsRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PredictorGetWeightsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::meta(this), target);
  }

  // string trainer_name = 2;
  if (this->trainer_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->trainer_name().data(), static_cast<int>(this->trainer_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PredictorGetWeightsRequest.trainer_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->trainer_name(), target);
  }

  // string embeddings_model = 5 [deprecated = true];
  if (this->embeddings_model().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->embeddings_model().data(), static_cast<int>(this->embeddings_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PredictorGetWeightsRequest.embeddings_model");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->embeddings_model(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PredictorGetWeightsRequest)
  return target;
}

size_t PredictorGetWeightsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PredictorGetWeightsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string trainer_name = 2;
  if (this->trainer_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->trainer_name());
  }

  // string embeddings_model = 5 [deprecated = true];
  if (this->embeddings_model().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->embeddings_model());
  }

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meta_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PredictorGetWeightsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PredictorGetWeightsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PredictorGetWeightsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PredictorGetWeightsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PredictorGetWeightsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PredictorGetWeightsRequest)
    MergeFrom(*source);
  }
}

void PredictorGetWeightsRequest::MergeFrom(const PredictorGetWeightsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PredictorGetWeightsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.trainer_name().size() > 0) {

    trainer_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trainer_name_);
  }
  if (from.embeddings_model().size() > 0) {

    embeddings_model_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.embeddings_model_);
  }
  if (from.has_meta()) {
    mutable_meta()->::RequestMeta::MergeFrom(from.meta());
  }
}

void PredictorGetWeightsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PredictorGetWeightsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PredictorGetWeightsRequest::CopyFrom(const PredictorGetWeightsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PredictorGetWeightsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredictorGetWeightsRequest::IsInitialized() const {
  return true;
}

void PredictorGetWeightsRequest::InternalSwap(PredictorGetWeightsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  trainer_name_.Swap(&other->trainer_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  embeddings_model_.Swap(&other->embeddings_model_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(meta_, other->meta_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PredictorGetWeightsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

PredictorGetWeightsResponse_WeightsEntry_DoNotUse::PredictorGetWeightsResponse_WeightsEntry_DoNotUse() {}
PredictorGetWeightsResponse_WeightsEntry_DoNotUse::PredictorGetWeightsResponse_WeightsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PredictorGetWeightsResponse_WeightsEntry_DoNotUse::MergeFrom(const PredictorGetWeightsResponse_WeightsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PredictorGetWeightsResponse_WeightsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void PredictorGetWeightsResponse_WeightsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void PredictorGetWeightsResponse::InitAsDefaultInstance() {
  ::_PredictorGetWeightsResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::ResponseStatus*>(
      ::ResponseStatus::internal_default_instance());
  ::_PredictorGetWeightsResponse_default_instance_._instance.get_mutable()->trainer_ = const_cast< ::ConceptTrainerDump*>(
      ::ConceptTrainerDump::internal_default_instance());
}
class PredictorGetWeightsResponse::_Internal {
 public:
  static const ::ResponseStatus& status(const PredictorGetWeightsResponse* msg);
  static const ::ConceptTrainerDump& trainer(const PredictorGetWeightsResponse* msg);
};

const ::ResponseStatus&
PredictorGetWeightsResponse::_Internal::status(const PredictorGetWeightsResponse* msg) {
  return *msg->status_;
}
const ::ConceptTrainerDump&
PredictorGetWeightsResponse::_Internal::trainer(const PredictorGetWeightsResponse* msg) {
  return *msg->trainer_;
}
void PredictorGetWeightsResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void PredictorGetWeightsResponse::clear_weights() {
  weights_.Clear();
}
void PredictorGetWeightsResponse::clear_trainer() {
  if (GetArenaNoVirtual() == nullptr && trainer_ != nullptr) {
    delete trainer_;
  }
  trainer_ = nullptr;
}
PredictorGetWeightsResponse::PredictorGetWeightsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PredictorGetWeightsResponse)
}
PredictorGetWeightsResponse::PredictorGetWeightsResponse(const PredictorGetWeightsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  weights_.MergeFrom(from.weights_);
  if (from.has_status()) {
    status_ = new ::ResponseStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from.has_trainer()) {
    trainer_ = new ::ConceptTrainerDump(*from.trainer_);
  } else {
    trainer_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PredictorGetWeightsResponse)
}

void PredictorGetWeightsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PredictorGetWeightsResponse_proto_2fpredictor_2fpredictor_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trainer_) -
      reinterpret_cast<char*>(&status_)) + sizeof(trainer_));
}

PredictorGetWeightsResponse::~PredictorGetWeightsResponse() {
  // @@protoc_insertion_point(destructor:PredictorGetWeightsResponse)
  SharedDtor();
}

void PredictorGetWeightsResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete trainer_;
}

void PredictorGetWeightsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PredictorGetWeightsResponse& PredictorGetWeightsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PredictorGetWeightsResponse_proto_2fpredictor_2fpredictor_2eproto.base);
  return *internal_default_instance();
}


void PredictorGetWeightsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:PredictorGetWeightsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  weights_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && trainer_ != nullptr) {
    delete trainer_;
  }
  trainer_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PredictorGetWeightsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ResponseStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .Embedding> weights = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&weights_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // .ConceptTrainerDump trainer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_trainer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PredictorGetWeightsResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:PredictorGetWeightsResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ResponseStatus status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .Embedding> weights = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          PredictorGetWeightsResponse_WeightsEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              PredictorGetWeightsResponse_WeightsEntry_DoNotUse,
              std::string, ::Embedding,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Embedding > > parser(&weights_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "PredictorGetWeightsResponse.WeightsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ConceptTrainerDump trainer = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_trainer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PredictorGetWeightsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PredictorGetWeightsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PredictorGetWeightsResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PredictorGetWeightsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::status(this), output);
  }

  // map<string, .Embedding> weights = 2;
  if (!this->weights().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Embedding >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "PredictorGetWeightsResponse.WeightsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->weights().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->weights().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Embedding >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Embedding >::const_iterator
          it = this->weights().begin();
          it != this->weights().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        PredictorGetWeightsResponse_WeightsEntry_DoNotUse::Funcs::SerializeToCodedStream(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Embedding >::const_iterator
          it = this->weights().begin();
          it != this->weights().end(); ++it) {
        PredictorGetWeightsResponse_WeightsEntry_DoNotUse::Funcs::SerializeToCodedStream(2, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .ConceptTrainerDump trainer = 3;
  if (this->has_trainer()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::trainer(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PredictorGetWeightsResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* PredictorGetWeightsResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PredictorGetWeightsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::status(this), target);
  }

  // map<string, .Embedding> weights = 2;
  if (!this->weights().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Embedding >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "PredictorGetWeightsResponse.WeightsEntry.key");
      }
    };

    if (false &&
        this->weights().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->weights().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Embedding >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Embedding >::const_iterator
          it = this->weights().begin();
          it != this->weights().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = PredictorGetWeightsResponse_WeightsEntry_DoNotUse::Funcs::SerializeToArray(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Embedding >::const_iterator
          it = this->weights().begin();
          it != this->weights().end(); ++it) {
        target = PredictorGetWeightsResponse_WeightsEntry_DoNotUse::Funcs::SerializeToArray(2, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .ConceptTrainerDump trainer = 3;
  if (this->has_trainer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::trainer(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PredictorGetWeightsResponse)
  return target;
}

size_t PredictorGetWeightsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PredictorGetWeightsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .Embedding> weights = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->weights_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Embedding >::const_iterator
      it = this->weights().begin();
      it != this->weights().end(); ++it) {
    total_size += PredictorGetWeightsResponse_WeightsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .ResponseStatus status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .ConceptTrainerDump trainer = 3;
  if (this->has_trainer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trainer_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PredictorGetWeightsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PredictorGetWeightsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PredictorGetWeightsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PredictorGetWeightsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PredictorGetWeightsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PredictorGetWeightsResponse)
    MergeFrom(*source);
  }
}

void PredictorGetWeightsResponse::MergeFrom(const PredictorGetWeightsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PredictorGetWeightsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  weights_.MergeFrom(from.weights_);
  if (from.has_status()) {
    mutable_status()->::ResponseStatus::MergeFrom(from.status());
  }
  if (from.has_trainer()) {
    mutable_trainer()->::ConceptTrainerDump::MergeFrom(from.trainer());
  }
}

void PredictorGetWeightsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PredictorGetWeightsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PredictorGetWeightsResponse::CopyFrom(const PredictorGetWeightsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PredictorGetWeightsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredictorGetWeightsResponse::IsInitialized() const {
  return true;
}

void PredictorGetWeightsResponse::InternalSwap(PredictorGetWeightsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  weights_.Swap(&other->weights_);
  swap(status_, other->status_);
  swap(trainer_, other->trainer_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PredictorGetWeightsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EvalSpec::InitAsDefaultInstance() {
}
class EvalSpec::_Internal {
 public:
};

EvalSpec::EvalSpec()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EvalSpec)
}
EvalSpec::EvalSpec(const EvalSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&confusion_matrix_topk_, &from.confusion_matrix_topk_,
    static_cast<size_t>(reinterpret_cast<char*>(&cooccurrence_matrix_topk_) -
    reinterpret_cast<char*>(&confusion_matrix_topk_)) + sizeof(cooccurrence_matrix_topk_));
  // @@protoc_insertion_point(copy_constructor:EvalSpec)
}

void EvalSpec::SharedCtor() {
  ::memset(&confusion_matrix_topk_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cooccurrence_matrix_topk_) -
      reinterpret_cast<char*>(&confusion_matrix_topk_)) + sizeof(cooccurrence_matrix_topk_));
}

EvalSpec::~EvalSpec() {
  // @@protoc_insertion_point(destructor:EvalSpec)
  SharedDtor();
}

void EvalSpec::SharedDtor() {
}

void EvalSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EvalSpec& EvalSpec::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EvalSpec_proto_2fpredictor_2fpredictor_2eproto.base);
  return *internal_default_instance();
}


void EvalSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:EvalSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&confusion_matrix_topk_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cooccurrence_matrix_topk_) -
      reinterpret_cast<char*>(&confusion_matrix_topk_)) + sizeof(cooccurrence_matrix_topk_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EvalSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 confusion_matrix_topk = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          confusion_matrix_topk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cooccurrence_matrix_topk = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cooccurrence_matrix_topk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EvalSpec::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:EvalSpec)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 confusion_matrix_topk = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &confusion_matrix_topk_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cooccurrence_matrix_topk = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &cooccurrence_matrix_topk_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EvalSpec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EvalSpec)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EvalSpec::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EvalSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 confusion_matrix_topk = 1;
  if (this->confusion_matrix_topk() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->confusion_matrix_topk(), output);
  }

  // int32 cooccurrence_matrix_topk = 2;
  if (this->cooccurrence_matrix_topk() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->cooccurrence_matrix_topk(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EvalSpec)
}

::PROTOBUF_NAMESPACE_ID::uint8* EvalSpec::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:EvalSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 confusion_matrix_topk = 1;
  if (this->confusion_matrix_topk() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->confusion_matrix_topk(), target);
  }

  // int32 cooccurrence_matrix_topk = 2;
  if (this->cooccurrence_matrix_topk() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->cooccurrence_matrix_topk(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EvalSpec)
  return target;
}

size_t EvalSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EvalSpec)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 confusion_matrix_topk = 1;
  if (this->confusion_matrix_topk() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->confusion_matrix_topk());
  }

  // int32 cooccurrence_matrix_topk = 2;
  if (this->cooccurrence_matrix_topk() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->cooccurrence_matrix_topk());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EvalSpec::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EvalSpec)
  GOOGLE_DCHECK_NE(&from, this);
  const EvalSpec* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EvalSpec>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EvalSpec)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EvalSpec)
    MergeFrom(*source);
  }
}

void EvalSpec::MergeFrom(const EvalSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EvalSpec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.confusion_matrix_topk() != 0) {
    set_confusion_matrix_topk(from.confusion_matrix_topk());
  }
  if (from.cooccurrence_matrix_topk() != 0) {
    set_cooccurrence_matrix_topk(from.cooccurrence_matrix_topk());
  }
}

void EvalSpec::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EvalSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EvalSpec::CopyFrom(const EvalSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EvalSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EvalSpec::IsInitialized() const {
  return true;
}

void EvalSpec::InternalSwap(EvalSpec* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(confusion_matrix_topk_, other->confusion_matrix_topk_);
  swap(cooccurrence_matrix_topk_, other->cooccurrence_matrix_topk_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EvalSpec::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PredictorEvaluateRequest::InitAsDefaultInstance() {
  ::_PredictorEvaluateRequest_default_instance_._instance.get_mutable()->meta_ = const_cast< ::RequestMeta*>(
      ::RequestMeta::internal_default_instance());
  ::_PredictorEvaluateRequest_default_instance_._instance.get_mutable()->ground_truth_search_ = const_cast< ::clarifai::api::Search*>(
      ::clarifai::api::Search::internal_default_instance());
  ::_PredictorEvaluateRequest_default_instance_._instance.get_mutable()->search_to_evaluate_ = const_cast< ::clarifai::api::Search*>(
      ::clarifai::api::Search::internal_default_instance());
}
class PredictorEvaluateRequest::_Internal {
 public:
  static const ::RequestMeta& meta(const PredictorEvaluateRequest* msg);
  static const ::clarifai::api::Search& ground_truth_search(const PredictorEvaluateRequest* msg);
  static const ::clarifai::api::Search& search_to_evaluate(const PredictorEvaluateRequest* msg);
};

const ::RequestMeta&
PredictorEvaluateRequest::_Internal::meta(const PredictorEvaluateRequest* msg) {
  return *msg->meta_;
}
const ::clarifai::api::Search&
PredictorEvaluateRequest::_Internal::ground_truth_search(const PredictorEvaluateRequest* msg) {
  return *msg->ground_truth_search_;
}
const ::clarifai::api::Search&
PredictorEvaluateRequest::_Internal::search_to_evaluate(const PredictorEvaluateRequest* msg) {
  return *msg->search_to_evaluate_;
}
void PredictorEvaluateRequest::clear_meta() {
  if (GetArenaNoVirtual() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
}
void PredictorEvaluateRequest::clear_ground_truth_search() {
  if (GetArenaNoVirtual() == nullptr && ground_truth_search_ != nullptr) {
    delete ground_truth_search_;
  }
  ground_truth_search_ = nullptr;
}
void PredictorEvaluateRequest::clear_search_to_evaluate() {
  if (GetArenaNoVirtual() == nullptr && search_to_evaluate_ != nullptr) {
    delete search_to_evaluate_;
  }
  search_to_evaluate_ = nullptr;
}
PredictorEvaluateRequest::PredictorEvaluateRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PredictorEvaluateRequest)
}
PredictorEvaluateRequest::PredictorEvaluateRequest(const PredictorEvaluateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      aiids_(from.aiids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  api_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.api_key().empty()) {
    api_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.api_key_);
  }
  if (from.has_meta()) {
    meta_ = new ::RequestMeta(*from.meta_);
  } else {
    meta_ = nullptr;
  }
  if (from.has_ground_truth_search()) {
    ground_truth_search_ = new ::clarifai::api::Search(*from.ground_truth_search_);
  } else {
    ground_truth_search_ = nullptr;
  }
  if (from.has_search_to_evaluate()) {
    search_to_evaluate_ = new ::clarifai::api::Search(*from.search_to_evaluate_);
  } else {
    search_to_evaluate_ = nullptr;
  }
  evaluation_type_ = from.evaluation_type_;
  // @@protoc_insertion_point(copy_constructor:PredictorEvaluateRequest)
}

void PredictorEvaluateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PredictorEvaluateRequest_proto_2fpredictor_2fpredictor_2eproto.base);
  api_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&meta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&evaluation_type_) -
      reinterpret_cast<char*>(&meta_)) + sizeof(evaluation_type_));
}

PredictorEvaluateRequest::~PredictorEvaluateRequest() {
  // @@protoc_insertion_point(destructor:PredictorEvaluateRequest)
  SharedDtor();
}

void PredictorEvaluateRequest::SharedDtor() {
  api_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete meta_;
  if (this != internal_default_instance()) delete ground_truth_search_;
  if (this != internal_default_instance()) delete search_to_evaluate_;
}

void PredictorEvaluateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PredictorEvaluateRequest& PredictorEvaluateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PredictorEvaluateRequest_proto_2fpredictor_2fpredictor_2eproto.base);
  return *internal_default_instance();
}


void PredictorEvaluateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:PredictorEvaluateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  aiids_.Clear();
  api_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ground_truth_search_ != nullptr) {
    delete ground_truth_search_;
  }
  ground_truth_search_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && search_to_evaluate_ != nullptr) {
    delete search_to_evaluate_;
  }
  search_to_evaluate_ = nullptr;
  evaluation_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PredictorEvaluateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .RequestMeta meta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Search ground_truth_search = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_ground_truth_search(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clarifai.api.Search search_to_evaluate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_search_to_evaluate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string aiids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_aiids(), ptr, ctx, "PredictorEvaluateRequest.aiids");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // string api_key = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_api_key(), ptr, ctx, "PredictorEvaluateRequest.api_key");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .EvaluationType evaluation_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_evaluation_type(static_cast<::EvaluationType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PredictorEvaluateRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:PredictorEvaluateRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .RequestMeta meta = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_meta()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .clarifai.api.Search ground_truth_search = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ground_truth_search()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .clarifai.api.Search search_to_evaluate = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_search_to_evaluate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string aiids = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_aiids()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->aiids(this->aiids_size() - 1).data(),
            static_cast<int>(this->aiids(this->aiids_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "PredictorEvaluateRequest.aiids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string api_key = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_api_key()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->api_key().data(), static_cast<int>(this->api_key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "PredictorEvaluateRequest.api_key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .EvaluationType evaluation_type = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_evaluation_type(static_cast< ::EvaluationType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PredictorEvaluateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PredictorEvaluateRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PredictorEvaluateRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PredictorEvaluateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::meta(this), output);
  }

  // .clarifai.api.Search ground_truth_search = 2;
  if (this->has_ground_truth_search()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::ground_truth_search(this), output);
  }

  // .clarifai.api.Search search_to_evaluate = 3;
  if (this->has_search_to_evaluate()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::search_to_evaluate(this), output);
  }

  // repeated string aiids = 4;
  for (int i = 0, n = this->aiids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->aiids(i).data(), static_cast<int>(this->aiids(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PredictorEvaluateRequest.aiids");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      4, this->aiids(i), output);
  }

  // string api_key = 5;
  if (this->api_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->api_key().data(), static_cast<int>(this->api_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PredictorEvaluateRequest.api_key");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->api_key(), output);
  }

  // .EvaluationType evaluation_type = 6;
  if (this->evaluation_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      6, this->evaluation_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PredictorEvaluateRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* PredictorEvaluateRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PredictorEvaluateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::meta(this), target);
  }

  // .clarifai.api.Search ground_truth_search = 2;
  if (this->has_ground_truth_search()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::ground_truth_search(this), target);
  }

  // .clarifai.api.Search search_to_evaluate = 3;
  if (this->has_search_to_evaluate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::search_to_evaluate(this), target);
  }

  // repeated string aiids = 4;
  for (int i = 0, n = this->aiids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->aiids(i).data(), static_cast<int>(this->aiids(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PredictorEvaluateRequest.aiids");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(4, this->aiids(i), target);
  }

  // string api_key = 5;
  if (this->api_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->api_key().data(), static_cast<int>(this->api_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PredictorEvaluateRequest.api_key");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->api_key(), target);
  }

  // .EvaluationType evaluation_type = 6;
  if (this->evaluation_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->evaluation_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PredictorEvaluateRequest)
  return target;
}

size_t PredictorEvaluateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PredictorEvaluateRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string aiids = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->aiids_size());
  for (int i = 0, n = this->aiids_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->aiids(i));
  }

  // string api_key = 5;
  if (this->api_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->api_key());
  }

  // .RequestMeta meta = 1;
  if (this->has_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meta_);
  }

  // .clarifai.api.Search ground_truth_search = 2;
  if (this->has_ground_truth_search()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ground_truth_search_);
  }

  // .clarifai.api.Search search_to_evaluate = 3;
  if (this->has_search_to_evaluate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *search_to_evaluate_);
  }

  // .EvaluationType evaluation_type = 6;
  if (this->evaluation_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->evaluation_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PredictorEvaluateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PredictorEvaluateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PredictorEvaluateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PredictorEvaluateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PredictorEvaluateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PredictorEvaluateRequest)
    MergeFrom(*source);
  }
}

void PredictorEvaluateRequest::MergeFrom(const PredictorEvaluateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PredictorEvaluateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  aiids_.MergeFrom(from.aiids_);
  if (from.api_key().size() > 0) {

    api_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.api_key_);
  }
  if (from.has_meta()) {
    mutable_meta()->::RequestMeta::MergeFrom(from.meta());
  }
  if (from.has_ground_truth_search()) {
    mutable_ground_truth_search()->::clarifai::api::Search::MergeFrom(from.ground_truth_search());
  }
  if (from.has_search_to_evaluate()) {
    mutable_search_to_evaluate()->::clarifai::api::Search::MergeFrom(from.search_to_evaluate());
  }
  if (from.evaluation_type() != 0) {
    set_evaluation_type(from.evaluation_type());
  }
}

void PredictorEvaluateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PredictorEvaluateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PredictorEvaluateRequest::CopyFrom(const PredictorEvaluateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PredictorEvaluateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredictorEvaluateRequest::IsInitialized() const {
  return true;
}

void PredictorEvaluateRequest::InternalSwap(PredictorEvaluateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  aiids_.InternalSwap(CastToBase(&other->aiids_));
  api_key_.Swap(&other->api_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(meta_, other->meta_);
  swap(ground_truth_search_, other->ground_truth_search_);
  swap(search_to_evaluate_, other->search_to_evaluate_);
  swap(evaluation_type_, other->evaluation_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PredictorEvaluateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PredictorPredictRequest* Arena::CreateMaybeMessage< ::PredictorPredictRequest >(Arena* arena) {
  return Arena::CreateInternal< ::PredictorPredictRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::PredictorPredictSQLQueryRequest* Arena::CreateMaybeMessage< ::PredictorPredictSQLQueryRequest >(Arena* arena) {
  return Arena::CreateInternal< ::PredictorPredictSQLQueryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::PredictorPredictResponse* Arena::CreateMaybeMessage< ::PredictorPredictResponse >(Arena* arena) {
  return Arena::CreateInternal< ::PredictorPredictResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::PredictorTrainAndEvalRequest* Arena::CreateMaybeMessage< ::PredictorTrainAndEvalRequest >(Arena* arena) {
  return Arena::CreateInternal< ::PredictorTrainAndEvalRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::PredictorTrainRequest* Arena::CreateMaybeMessage< ::PredictorTrainRequest >(Arena* arena) {
  return Arena::CreateInternal< ::PredictorTrainRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::PredictorTrainResponse* Arena::CreateMaybeMessage< ::PredictorTrainResponse >(Arena* arena) {
  return Arena::CreateInternal< ::PredictorTrainResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::PredictorGetWeightsRequest* Arena::CreateMaybeMessage< ::PredictorGetWeightsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::PredictorGetWeightsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::PredictorGetWeightsResponse_WeightsEntry_DoNotUse* Arena::CreateMaybeMessage< ::PredictorGetWeightsResponse_WeightsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::PredictorGetWeightsResponse_WeightsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::PredictorGetWeightsResponse* Arena::CreateMaybeMessage< ::PredictorGetWeightsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::PredictorGetWeightsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::EvalSpec* Arena::CreateMaybeMessage< ::EvalSpec >(Arena* arena) {
  return Arena::CreateInternal< ::EvalSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::PredictorEvaluateRequest* Arena::CreateMaybeMessage< ::PredictorEvaluateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::PredictorEvaluateRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
